
displaytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022b58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b9c  08022d58  08022d58  00032d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003d2  080248f4  080248f4  000348f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000024  08024cc8  08024cc8  00034cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00017700  08024cec  08024cec  00034cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000020  0803c3ec  0803c3ec  0004c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0803c40c  0803c40c  0006c2fc  2**0
                  CONTENTS
  8 .ARM          00000008  0803c40c  0803c40c  0004c40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0803c414  0803c414  0006c2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0803c414  0803c414  0004c414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0803c428  0803c428  0004c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  0803c430  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 0001c200  200000fc  0803c52c  000500fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00003d4c  2001c2fc  0805872c  0006c2fc  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  20020048  0805872c  00070048  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  0006c2fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0008b4ee  00000000  00000000  0006c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001071e  00000000  00000000  000f7820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003fe8  00000000  00000000  00107f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003b60  00000000  00000000  0010bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000fbe3  00000000  00000000  0010fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004a8eb  00000000  00000000  0011f66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00165af5  00000000  00000000  00169f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  002cfa4b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000118b0  00000000  00000000  002cfb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2001c2fc 	.word	0x2001c2fc
 800021c:	00000000 	.word	0x00000000
 8000220:	08022d40 	.word	0x08022d40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2001c300 	.word	0x2001c300
 800023c:	08022d40 	.word	0x08022d40

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f001 fcce 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f848 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005cc:	f000 f8ac 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fcf8 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_ADC1_Init>
  MX_CRC_Init();
 80005d8:	f000 f94c 	bl	8000874 <MX_CRC_Init>
  MX_FMC_Init();
 80005dc:	f000 fc88 	bl	8000ef0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005e0:	f000 f96a 	bl	80008b8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f9bc 	bl	8000960 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa08 	bl	80009fc <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005ec:	f000 fa52 	bl	8000a94 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80005f0:	f000 fa8e 	bl	8000b10 <MX_SAI1_Init>
  MX_SPI1_Init();
 80005f4:	f000 faf2 	bl	8000bdc <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f8:	f000 fb2c 	bl	8000c54 <MX_TIM4_Init>
  MX_TIM16_Init();
 80005fc:	f000 fb7a 	bl	8000cf4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000600:	f000 fb9e 	bl	8000d40 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000604:	f000 fc16 	bl	8000e34 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000608:	f000 fc4a 	bl	8000ea0 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800060c:	f000 f994 	bl	8000938 <MX_ICACHE_Init>
  MX_TouchGFX_Init();
 8000610:	f00c f9e3 	bl	800c9da <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000614:	f00c f9da 	bl	800c9cc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f009 f8fc 	bl	8009814 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <main+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x88>)
 8000622:	f009 f941 	bl	80098a8 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <main+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of VSyncTask */
  VSyncTaskHandle = osThreadNew(StartVSyncTask, NULL, &VSyncTask_attributes);
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <main+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x94>)
 8000632:	f009 f939 	bl	80098a8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <main+0x98>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f009 f90e 	bl	800985c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x80>
 8000642:	bf00      	nop
 8000644:	080237f8 	.word	0x080237f8
 8000648:	080012a5 	.word	0x080012a5
 800064c:	2001caa4 	.word	0x2001caa4
 8000650:	0802381c 	.word	0x0802381c
 8000654:	080012b9 	.word	0x080012b9
 8000658:	2001caa8 	.word	0x2001caa8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2248      	movs	r2, #72	; 0x48
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f021 fbc1 	bl	8021df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800067e:	2000      	movs	r0, #0
 8000680:	f003 fb2c 	bl	8003cdc <HAL_PWREx_ControlVoltageScaling>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800068a:	f000 fe31 	bl	80012f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f003 fb07 	bl	8003ca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xc8>)
 800069a:	f023 0318 	bic.w	r3, r3, #24
 800069e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80006a2:	2316      	movs	r3, #22
 80006a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2381      	movs	r3, #129	; 0x81
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006bc:	23b0      	movs	r3, #176	; 0xb0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c8:	230c      	movs	r3, #12
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006cc:	2337      	movs	r3, #55	; 0x37
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fb8b 	bl	8003dfc <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fe00 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f84d 	bl	80047a8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000714:	f000 fdec 	bl	80012f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000718:	f005 fe82 	bl	8006420 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071c:	bf00      	nop
 800071e:	3760      	adds	r7, #96	; 0x60
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0a6      	sub	sp, #152	; 0x98
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2294      	movs	r2, #148	; 0x94
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f021 fb5c 	bl	8021df2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 800073a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000740:	2300      	movs	r3, #0
 8000742:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000754:	2330      	movs	r3, #48	; 0x30
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000758:	2311      	movs	r3, #17
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <PeriphCommonClock_Config+0x5c>)
 8000766:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fb32 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000776:	f000 fdbb 	bl	80012f0 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3798      	adds	r7, #152	; 0x98
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	01010000 	.word	0x01010000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_ADC1_Init+0xe0>)
 800080c:	f001 fd84 	bl	8002318 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 fd6b 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000826:	f002 fad3 	bl	8002dd0 <HAL_ADCEx_MultiModeConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000830:	f000 fd5e 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ADC1_Init+0xe8>)
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	; 0x7f
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000852:	f001 fead 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800085c:	f000 fd48 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2001c318 	.word	0x2001c318
 800086c:	42028000 	.word	0x42028000
 8000870:	25b00200 	.word	0x25b00200

08000874 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_CRC_Init+0x3c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <MX_CRC_Init+0x40>)
 800087c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_CRC_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000898:	2201      	movs	r2, #1
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_CRC_Init+0x3c>)
 800089e:	f002 fc1b 	bl	80030d8 <HAL_CRC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a8:	f000 fd22 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2001c380 	.word	0x2001c380
 80008b4:	40023000 	.word	0x40023000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_I2C1_Init+0x74>)
 80008f4:	f002 fe7a 	bl	80035ec <HAL_I2C_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008fe:	f000 fcf7 	bl	80012f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000906:	f002 ff00 	bl	800370a <HAL_I2CEx_ConfigAnalogFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000910:	f000 fcee 	bl	80012f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2C1_Init+0x74>)
 8000918:	f002 ff42 	bl	80037a0 <HAL_I2CEx_ConfigDigitalFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fce5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2001c3a4 	.word	0x2001c3a4
 8000930:	40005400 	.word	0x40005400
 8000934:	40505681 	.word	0x40505681

08000938 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800093c:	2000      	movs	r0, #0
 800093e:	f002 ff7b 	bl	8003838 <HAL_ICACHE_ConfigAssociativityMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000948:	f000 fcd2 	bl	80012f0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800094c:	f002 ff94 	bl	8003878 <HAL_ICACHE_Enable>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000956:	f000 fccb 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_LPUART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_LPUART1_UART_Init+0x98>)
 800096e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000984:	220c      	movs	r2, #12
 8000986:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f007 fd34 	bl	8008414 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009b2:	f000 fc9d 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	f008 facd 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fc94 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009cc:	f008 fb02 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f000 fc8b 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009dc:	f008 fa83 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009e6:	f000 fc83 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2001c3f8 	.word	0x2001c3f8
 80009f4:	40008000 	.word	0x40008000
 80009f8:	00033324 	.word	0x00033324

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f007 fce5 	bl	8008414 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fc4e 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f008 fa7e 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 fc45 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f008 fab3 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fc3c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f008 fa34 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 fc34 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2001c48c 	.word	0x2001c48c
 8000a90:	40013800 	.word	0x40013800

08000a94 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_OCTOSPI1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000af4:	f002 fed0 	bl	8003898 <HAL_OSPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fbf7 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2001c520 	.word	0x2001c520
 8000b0c:	44021000 	.word	0x44021000

08000b10 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <MX_SAI1_Init+0xc4>)
 8000b18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_SAI1_Init+0xc8>)
 8000b54:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bbc:	f005 ff86 	bl	8006acc <HAL_SAI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000bc6:	f000 fb93 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2001c578 	.word	0x2001c578
 8000bd4:	40015404 	.word	0x40015404
 8000bd8:	0002ee00 	.word	0x0002ee00

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c34:	2208      	movs	r2, #8
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c3a:	f006 f971 	bl	8006f20 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f000 fb54 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2001c610 	.word	0x2001c610
 8000c50:	40013000 	.word	0x40013000

08000c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_TIM4_Init+0x9c>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c9c:	f006 fa2b 	bl	80070f6 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 fb23 	bl	80012f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000caa:	2307      	movs	r3, #7
 8000cac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cba:	f006 fd77 	bl	80077ac <HAL_TIM_SlaveConfigSynchro>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000cc4:	f000 fb14 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cd6:	f007 fa57 	bl	8008188 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 fb06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2001c674 	.word	0x2001c674
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_TIM16_Init+0x48>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d26:	f006 f9e6 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d30:	f000 fade 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2001c6c0 	.word	0x2001c6c0
 8000d3c:	40014400 	.word	0x40014400

08000d40 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2234      	movs	r2, #52	; 0x34
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f021 f846 	bl	8021df2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <MX_TIM17_Init+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d94:	f006 f9af 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9e:	f000 faa7 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000da4:	f006 fa6e 	bl	8007284 <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000dae:	f000 fa9f 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000dd8:	f006 fbd4 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000de2:	f000 fa85 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e0e:	f007 fa43 	bl	8008298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e18:	f000 fa6a 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e1e:	f000 fd41 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2001c70c 	.word	0x2001c70c
 8000e30:	40014800 	.word	0x40014800

08000e34 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e4a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000e4e:	f7ff fb9f 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fb84 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fb81 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_UCPD1_Init+0x64>)
 8000e72:	f008 fbe2 	bl	800963a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_UCPD1_Init+0x68>)
 8000e8a:	f008 fbd6 	bl	800963a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	42020000 	.word	0x42020000
 8000e9c:	42020400 	.word	0x42020400

08000ea0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <MX_USB_PCD_Init+0x4c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed6:	f002 fddf 	bl	8003a98 <HAL_PCD_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ee0:	f000 fa06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2001c758 	.word	0x2001c758
 8000eec:	4000d400 	.word	0x4000d400

08000ef0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f020 ff78 	bl	8021df2 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_FMC_Init+0xcc>)
 8000f06:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <MX_FMC_Init+0xd0>)
 8000f0c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f90:	2311      	movs	r3, #17
 8000f92:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000fa0:	f006 f861 	bl	8007066 <HAL_SRAM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8000faa:	f000 f9a1 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2001ca4c 	.word	0x2001ca4c
 8000fbc:	44020000 	.word	0x44020000
 8000fc0:	44020104 	.word	0x44020104

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4baa      	ldr	r3, [pc, #680]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4aa9      	ldr	r2, [pc, #676]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4ba7      	ldr	r3, [pc, #668]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4aa3      	ldr	r2, [pc, #652]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a9d      	ldr	r2, [pc, #628]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001022:	f002 feb7 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a96      	ldr	r2, [pc, #600]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b94      	ldr	r3, [pc, #592]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a90      	ldr	r2, [pc, #576]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a84      	ldr	r2, [pc, #528]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f241 1102 	movw	r1, #4354	; 0x1102
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010a6:	f002 fa89 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2108      	movs	r1, #8
 80010ae:	4877      	ldr	r0, [pc, #476]	; (800128c <MX_GPIO_Init+0x2c8>)
 80010b0:	f002 fa84 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4875      	ldr	r0, [pc, #468]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80010ba:	f002 fa7f 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4873      	ldr	r0, [pc, #460]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80010c6:	f002 fa79 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80010d0:	f002 fa74 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80010da:	4870      	ldr	r0, [pc, #448]	; (800129c <MX_GPIO_Init+0x2d8>)
 80010dc:	f002 fa6e 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 80010e0:	f241 1302 	movw	r3, #4354	; 0x1102
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	4863      	ldr	r0, [pc, #396]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010fa:	f002 f8df 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110e:	230c      	movs	r3, #12
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	485c      	ldr	r0, [pc, #368]	; (800128c <MX_GPIO_Init+0x2c8>)
 800111a:	f002 f8cf 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 800111e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001130:	230c      	movs	r3, #12
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4859      	ldr	r0, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 800113c:	f002 f8be 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4852      	ldr	r0, [pc, #328]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 8001156:	f002 f8b1 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800115a:	2308      	movs	r3, #8
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4846      	ldr	r0, [pc, #280]	; (800128c <MX_GPIO_Init+0x2c8>)
 8001172:	f002 f8a3 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8001176:	230e      	movs	r3, #14
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <MX_GPIO_Init+0x2d8>)
 800118c:	f002 f896 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001190:	2320      	movs	r3, #32
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	483a      	ldr	r0, [pc, #232]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80011a8:	f002 f888 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80011c6:	f002 f879 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80011e2:	f002 f86b 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80011fc:	f002 f85e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_GPIO_Init+0x2c4>)
 800121c:	f002 f84e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8001220:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_GPIO_Init+0x2d8>)
 800123a:	f002 f83f 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001254:	f002 f832 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800126a:	2306      	movs	r3, #6
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001276:	f002 f821 	bl	80032bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	42021800 	.word	0x42021800
 800128c:	42020c00 	.word	0x42020c00
 8001290:	42020400 	.word	0x42020400
 8001294:	42020000 	.word	0x42020000
 8001298:	42021c00 	.word	0x42021c00
 800129c:	42021400 	.word	0x42021400
 80012a0:	42020800 	.word	0x42020800

080012a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_TouchGFX_Process();
 80012ac:	f00b fb9d 	bl	800c9ea <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f008 fb8b 	bl	80099cc <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartDefaultTask+0xc>

080012b8 <StartVSyncTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVSyncTask */
void StartVSyncTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVSyncTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);	//100Hz refresh
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f008 fb83 	bl	80099cc <osDelay>
    touchgfxSignalVSync();
 80012c6:	f00e f813 	bl	800f2f0 <touchgfxSignalVSync>
    osDelay(100);	//100Hz refresh
 80012ca:	e7f9      	b.n	80012c0 <StartVSyncTask+0x8>

080012cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012de:	f000 fe5b 	bl	8001f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_MspInit+0x4c>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x4c>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_MspInit+0x4c>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2107      	movs	r1, #7
 8001336:	f06f 0001 	mvn.w	r0, #1
 800133a:	f001 fea5 	bl	8003088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x74>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d123      	bne.n	80013b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_ADC_MspInit+0x7c>)
 80013b2:	f001 ff83 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	42028000 	.word	0x42028000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	42020000 	.word	0x42020000

080013cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_CRC_MspInit+0x38>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10b      	bne.n	80013f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023000 	.word	0x40023000
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	; 0xb8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2294      	movs	r2, #148	; 0x94
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f020 fce0 	bl	8021df2 <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_I2C_MspInit+0xb0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d13a      	bne.n	80014b2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fcc3 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff ff4c 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_I2C_MspInit+0xb8>)
 8001496:	f001 ff11 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	; 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	42020400 	.word	0x42020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b0      	sub	sp, #192	; 0xc0
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2294      	movs	r2, #148	; 0x94
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f020 fc82 	bl	8021df2 <memset>
  if(huart->Instance==LPUART1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_UART_MspInit+0x134>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13c      	bne.n	8001572 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014f8:	2320      	movs	r3, #32
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc65 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff feee 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	4a39      	ldr	r2, [pc, #228]	; (8001600 <HAL_UART_MspInit+0x138>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_UART_MspInit+0x138>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_UART_MspInit+0x138>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001544:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800155e:	2308      	movs	r3, #8
 8001560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001568:	4619      	mov	r1, r3
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <HAL_UART_MspInit+0x13c>)
 800156c:	f001 fea6 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001570:	e040      	b.n	80015f4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_UART_MspInit+0x140>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13b      	bne.n	80015f4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fc23 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001594:	f7ff feac 	bl	80012f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	6613      	str	r3, [r2, #96]	; 0x60
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80015c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <HAL_UART_MspInit+0x144>)
 80015f0:	f001 fe64 	bl	80032bc <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	37c0      	adds	r7, #192	; 0xc0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40008000 	.word	0x40008000
 8001600:	40021000 	.word	0x40021000
 8001604:	42020400 	.word	0x42020400
 8001608:	40013800 	.word	0x40013800
 800160c:	42020000 	.word	0x42020000

08001610 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0b0      	sub	sp, #192	; 0xc0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2294      	movs	r2, #148	; 0x94
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f020 fbde 	bl	8021df2 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_OSPI_MspInit+0x164>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f040 8094 	bne.w	800176a <HAL_OSPI_MspInit+0x15a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fbbe 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 800165e:	f7ff fe47 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6513      	str	r3, [r2, #80]	; 0x50
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 80016c2:	230e      	movs	r3, #14
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016da:	230a      	movs	r3, #10
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e4:	4619      	mov	r1, r3
 80016e6:	4825      	ldr	r0, [pc, #148]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 80016e8:	f001 fde8 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 8001712:	f001 fdd3 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8001716:	23cc      	movs	r3, #204	; 0xcc
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800172e:	230a      	movs	r3, #10
 8001730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_OSPI_MspInit+0x170>)
 800173c:	f001 fdbe 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001758:	230a      	movs	r3, #10
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <HAL_OSPI_MspInit+0x174>)
 8001766:	f001 fda9 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	37c0      	adds	r7, #192	; 0xc0
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	44021000 	.word	0x44021000
 8001778:	40021000 	.word	0x40021000
 800177c:	42020800 	.word	0x42020800
 8001780:	42020000 	.word	0x42020000
 8001784:	42020400 	.word	0x42020400

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d129      	bne.n	80017fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80017da:	f002 fadb 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80017de:	233c      	movs	r3, #60	; 0x3c
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017fa:	f001 fd5f 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40013000 	.word	0x40013000
 800180c:	40021000 	.word	0x40021000
 8001810:	42021800 	.word	0x42021800

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800183e:	e022      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0x88>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_TIM_Base_MspInit+0x8c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40000800 	.word	0x40000800
 8001898:	40021000 	.word	0x40021000
 800189c:	40014400 	.word	0x40014400
 80018a0:	40014800 	.word	0x40014800

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_MspPostInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80018de:	2302      	movs	r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80018ee:	230e      	movs	r3, #14
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_TIM_MspPostInit+0x6c>)
 80018fa:	f001 fcdf 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40014800 	.word	0x40014800
 800190c:	40021000 	.word	0x40021000
 8001910:	42021000 	.word	0x42021000

08001914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ae      	sub	sp, #184	; 0xb8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2294      	movs	r2, #148	; 0x94
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f020 fa5c 	bl	8021df2 <memset>
  if(hpcd->Instance==USB)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_PCD_MspInit+0xb8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d13e      	bne.n	80019c2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800194a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800194e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fa3c 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001962:	f7ff fcc5 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800197e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001998:	230a      	movs	r3, #10
 800199a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_PCD_MspInit+0xc0>)
 80019a6:	f001 fc89 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	37b8      	adds	r7, #184	; 0xb8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	4000d400 	.word	0x4000d400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42020000 	.word	0x42020000

080019d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13e      	bne.n	8001a72 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6513      	str	r3, [r2, #80]	; 0x50
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8001a12:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4815      	ldr	r0, [pc, #84]	; (8001a84 <HAL_FMC_MspInit+0xac>)
 8001a2e:	f001 fc45 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480f      	ldr	r0, [pc, #60]	; (8001a88 <HAL_FMC_MspInit+0xb0>)
 8001a4c:	f001 fc36 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8001a50:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <HAL_FMC_MspInit+0xb4>)
 8001a6c:	f001 fc26 	bl	80032bc <HAL_GPIO_Init>
 8001a70:	e000      	b.n	8001a74 <HAL_FMC_MspInit+0x9c>
    return;
 8001a72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2001caac 	.word	0x2001caac
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42020c00 	.word	0x42020c00
 8001a88:	42021400 	.word	0x42021400
 8001a8c:	42021000 	.word	0x42021000

08001a90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a98:	f7ff ff9e 	bl	80019d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_SAI_MspInit+0x64>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d124      	bne.n	8001b00 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ade:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8001ae0:	237c      	movs	r3, #124	; 0x7c
 8001ae2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001af0:	230d      	movs	r3, #13
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_SAI_MspInit+0x70>)
 8001afc:	f001 fbde 	bl	80032bc <HAL_GPIO_Init>

    }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40015404 	.word	0x40015404
 8001b0c:	2001cab0 	.word	0x2001cab0
 8001b10:	40021000 	.word	0x40021000
 8001b14:	42021000 	.word	0x42021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	202a      	movs	r0, #42	; 0x2a
 8001b2e:	f001 faab 	bl	8003088 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b32:	202a      	movs	r0, #42	; 0x2a
 8001b34:	f001 fac2 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f836 	bl	8004bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b60:	f003 f820 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8001b64:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3b01      	subs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b96:	f005 faae 	bl	80070f6 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_InitTick+0xa4>)
 8001ba2:	f005 faff 	bl	80071a4 <HAL_TIM_Base_Start_IT>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	2001cab4 	.word	0x2001cab4
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_UP_IRQHandler+0x10>)
 8001bf6:	f005 fba6 	bl	8007346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2001cab4 	.word	0x2001cab4

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f01f ff95 	bl	8021b4c <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	e000      	b.n	8001c5e <_read+0x16>
 8001c5c:	bf00      	nop
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	e000      	b.n	8001ca2 <_write+0x20>
 8001ca0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
  }
  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f01f fefa 	bl	8021b4c <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20030000 	.word	0x20030000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	2001cb00 	.word	0x2001cb00
 8001d8c:	20020048 	.word	0x20020048

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f000 f826 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001daa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
	ldr	r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001db2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <LoopForever+0x16>)
	cmp	r2, r3
 8001dba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dbe:	f01f ffd3 	bl	8021d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7fe fbfd 	bl	80005c0 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001dc8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001dcc:	0803c430 	.word	0x0803c430
	ldr	r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd4:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001dd8:	2001c2fc 	.word	0x2001c2fc
	ldr	r3, = _ebss
 8001ddc:	20020048 	.word	0x20020048

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>
	...

08001de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e005      	b.n	8001e36 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001e36:	4a46      	ldr	r2, [pc, #280]	; (8001f50 <SystemCoreClockUpdate+0x148>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d866      	bhi.n	8001f1a <SystemCoreClockUpdate+0x112>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <SystemCoreClockUpdate+0x4c>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e89 	.word	0x08001e89
 8001e58:	08001f1b 	.word	0x08001f1b
 8001e5c:	08001f1b 	.word	0x08001f1b
 8001e60:	08001f1b 	.word	0x08001f1b
 8001e64:	08001e91 	.word	0x08001e91
 8001e68:	08001f1b 	.word	0x08001f1b
 8001e6c:	08001f1b 	.word	0x08001f1b
 8001e70:	08001f1b 	.word	0x08001f1b
 8001e74:	08001e99 	.word	0x08001e99
 8001e78:	08001f1b 	.word	0x08001f1b
 8001e7c:	08001f1b 	.word	0x08001f1b
 8001e80:	08001f1b 	.word	0x08001f1b
 8001e84:	08001ea1 	.word	0x08001ea1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6013      	str	r3, [r2, #0]
      break;
 8001e8e:	e048      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <SystemCoreClockUpdate+0x150>)
 8001e94:	601a      	str	r2, [r3, #0]
      break;
 8001e96:	e044      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <SystemCoreClockUpdate+0x154>)
 8001e9c:	601a      	str	r2, [r3, #0]
      break;
 8001e9e:	e040      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <SystemCoreClockUpdate+0xbe>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d006      	beq.n	8001ed2 <SystemCoreClockUpdate+0xca>
 8001ec4:	e00b      	b.n	8001ede <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <SystemCoreClockUpdate+0x150>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	613b      	str	r3, [r7, #16]
          break;
 8001ed0:	e00b      	b.n	8001eea <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <SystemCoreClockUpdate+0x154>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	613b      	str	r3, [r7, #16]
          break;
 8001edc:	e005      	b.n	8001eea <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	613b      	str	r3, [r7, #16]
          break;
 8001ee8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0e5b      	lsrs	r3, r3, #25
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f16:	6013      	str	r3, [r2, #0]
      break;
 8001f18:	e003      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	6013      	str	r3, [r2, #0]
      break;
 8001f20:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <SystemCoreClockUpdate+0x158>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08023858 	.word	0x08023858
 8001f54:	20000004 	.word	0x20000004
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	08023840 	.word	0x08023840

08001f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f001 f87f 	bl	8003072 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001f74:	f7ff ff48 	bl	8001e08 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f78:	2007      	movs	r0, #7
 8001f7a:	f7ff fdcd 	bl	8001b18 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	e001      	b.n	8001f8e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f8a:	f7ff f9b7 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	2001cb04 	.word	0x2001cb04

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2001cb04 	.word	0x2001cb04

08001fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <LL_ADC_SetOffset+0x44>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	03fff000 	.word	0x03fff000

08002088 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3330      	adds	r3, #48	; 0x30
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	211f      	movs	r1, #31
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 011f 	and.w	r1, r3, #31
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0318 	and.w	r3, r3, #24
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	400b      	ands	r3, r1
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	0007ffff 	.word	0x0007ffff

08002208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002240:	d101      	bne.n	8002246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d101      	bne.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12e      	b.n	8002590 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff f803 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff67 	bl	800222c <LL_ADC_IsDeepPowerDownEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff4d 	bl	8002208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff82 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff66 	bl	8002254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_ADC_Init+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_ADC_Init+0x284>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff64 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff75 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80c7 	bne.w	800257e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80c3 	bne.w	800257e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff49 	bl	80022a4 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d110      	bne.n	800243a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002418:	4861      	ldr	r0, [pc, #388]	; (80025a0 <HAL_ADC_Init+0x288>)
 800241a:	f7ff ff43 	bl	80022a4 <LL_ADC_IsEnabled>
 800241e:	4604      	mov	r4, r0
 8002420:	4860      	ldr	r0, [pc, #384]	; (80025a4 <HAL_ADC_Init+0x28c>)
 8002422:	f7ff ff3f 	bl	80022a4 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	4323      	orrs	r3, r4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	485c      	ldr	r0, [pc, #368]	; (80025a8 <HAL_ADC_Init+0x290>)
 8002436:	f7ff fdcf 	bl	8001fd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002444:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800244a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002450:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	3b01      	subs	r3, #1
 800246e:	045b      	lsls	r3, r3, #17
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_ADC_Init+0x294>)
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff20 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 80024b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d140      	bne.n	800253a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e1b      	ldrb	r3, [r3, #24]
 80024c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e0:	f023 0306 	bic.w	r3, r3, #6
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d118      	bne.n	800252a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	e007      	b.n	800253a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10c      	bne.n	800255c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f023 010f 	bic.w	r1, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
 800255a:	e007      	b.n	800256c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020f 	bic.w	r2, r2, #15
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f023 0303 	bic.w	r3, r3, #3
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	; 0x58
 800257c:	e007      	b.n	800258e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000004 	.word	0x20000004
 800259c:	053e2d63 	.word	0x053e2d63
 80025a0:	42028000 	.word	0x42028000
 80025a4:	42028100 	.word	0x42028100
 80025a8:	42028300 	.word	0x42028300
 80025ac:	fff0c007 	.word	0xfff0c007

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b0b7      	sub	sp, #220	; 0xdc
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x22>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e3c1      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe73 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 83a6 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f7ff fd89 	bl	8002110 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe61 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002608:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe6d 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 8002616:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800261a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 81c1 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 81bc 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	4619      	mov	r1, r3
 8002644:	f7ff fd90 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd4a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002656:	e00e      	b.n	8002676 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff fd7f 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fd3a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00a      	beq.n	80026ae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6919      	ldr	r1, [r3, #16]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a8:	f7ff fcca 	bl	8002040 <LL_ADC_SetOffset>
 80026ac:	e17b      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fce7 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x12a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fcdc 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	e01e      	b.n	8002718 <HAL_ADC_ConfigChannel+0x168>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fcd1 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x180>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800274c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fca0 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fc84 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1f0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fc79 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e01e      	b.n	80027de <HAL_ADC_ConfigChannel+0x22e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc6e 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x246>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e018      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800280a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800280e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e004      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800281e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002828:	429a      	cmp	r2, r3
 800282a:	d106      	bne.n	800283a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc3d 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc21 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x2b6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc16 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x2f4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fc0b 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800288c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e004      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x30c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	e016      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fbdc 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fbc0 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x378>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fbb5 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	e017      	b.n	8002958 <HAL_ADC_ConfigChannel+0x3a8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2103      	movs	r1, #3
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fbaa 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002942:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e003      	b.n	8002956 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800294e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x3c0>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e011      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800297e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e003      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2103      	movs	r1, #3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb87 	bl	80020b4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc7a 	bl	80022a4 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 81c9 	bne.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f7ff fbfb 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a8f      	ldr	r2, [pc, #572]	; (8002c0c <HAL_ADC_ConfigChannel+0x65c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f040 8131 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x44e>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b09      	cmp	r3, #9
 80029f4:	bf94      	ite	ls
 80029f6:	2301      	movls	r3, #1
 80029f8:	2300      	movhi	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e019      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x482>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d079      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x4a2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	e015      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x4ce>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x4ee>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	e017      	b.n	8002ace <HAL_ADC_ConfigChannel+0x51e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x544>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x576>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b26:	430b      	orrs	r3, r1
 8002b28:	e081      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x596>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	069b      	lsls	r3, r3, #26
 8002b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b44:	e015      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x5c2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	069b      	lsls	r3, r3, #26
 8002b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x5e2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	e017      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x612>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	ea42 0103 	orr.w	r1, r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x63e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1e      	subs	r3, #30
 8002be6:	051b      	lsls	r3, r3, #20
 8002be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bec:	e01e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x67c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	613b      	str	r3, [r7, #16]
  return result;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e006      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x668>
 8002c0a:	bf00      	nop
 8002c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7ff fa98 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8082 	beq.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	4847      	ldr	r0, [pc, #284]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c48:	f7ff f9ec 	bl	8002024 <LL_ADC_GetCommonPathInternalCh>
 8002c4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c50:	4845      	ldr	r0, [pc, #276]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c52:	f7ff fb27 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	4844      	ldr	r0, [pc, #272]	; (8002d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c5a:	f7ff fb23 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4323      	orrs	r3, r4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15e      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d127      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d121      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d161      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4834      	ldr	r0, [pc, #208]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c92:	f7ff f9b4 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002cae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cbe:	e044      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d113      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d134      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481e      	ldr	r0, [pc, #120]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cec:	f7ff f987 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	e02b      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d126      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d120      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11b      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4811      	ldr	r0, [pc, #68]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d1e:	f7ff f96e 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e012      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	37dc      	adds	r7, #220	; 0xdc
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	80080000 	.word	0x80080000
 8002d64:	42028300 	.word	0x42028300
 8002d68:	42028000 	.word	0x42028000
 8002d6c:	42028100 	.word	0x42028100
 8002d70:	c7520000 	.word	0xc7520000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	053e2d63 	.word	0x053e2d63
 8002d7c:	cb840000 	.word	0xcb840000
 8002d80:	80000001 	.word	0x80000001

08002d84 <LL_ADC_IsEnabled>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_REG_IsConversionOngoing>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b0a1      	sub	sp, #132	; 0x84
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e089      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002df6:	2300      	movs	r3, #0
 8002df8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e068      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffb9 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ffb3 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d14a      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d147      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d027      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	4824      	ldr	r0, [pc, #144]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e7a:	f7ff ff83 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4823      	ldr	r0, [pc, #140]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e82:	f7ff ff7f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4323      	orrs	r3, r4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d132      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eaa:	e023      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb8:	4814      	ldr	r0, [pc, #80]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002eba:	f7ff ff63 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ec2:	f7ff ff5f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4323      	orrs	r3, r4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002edc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3784      	adds	r7, #132	; 0x84
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	42028000 	.word	0x42028000
 8002f10:	42028100 	.word	0x42028100
 8002f14:	42028300 	.word	0x42028300

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0152      	lsls	r2, r2, #5
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0152      	lsls	r2, r2, #5
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b03      	cmp	r3, #3
 8003028:	bf28      	it	cs
 800302a:	2303      	movcs	r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3303      	adds	r3, #3
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b04      	subs	r3, #4
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff4c 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003096:	f7ff ff63 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 800309a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7ff ffb3 	bl	800300c <NVIC_EncodePriority>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff82 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff56 	bl	8002f7c <__NVIC_EnableIRQ>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e054      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f5b      	ldrb	r3, [r3, #29]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f966 	bl	80013cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_CRC_Init+0xc4>)
 8003114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0218 	bic.w	r2, r2, #24
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e00c      	b.n	8003142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	461a      	mov	r2, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f834 	bl	80031a0 <HAL_CRCEx_Polynomial_Set>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e028      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e004      	b.n	8003160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	04c11db7 	.word	0x04c11db7

080031a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031b0:	231f      	movs	r3, #31
 80031b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
 80031c2:	e063      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031c4:	bf00      	nop
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	613a      	str	r2, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b18      	cmp	r3, #24
 80031e8:	d846      	bhi.n	8003278 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	0800327f 	.word	0x0800327f
 80031f4:	08003279 	.word	0x08003279
 80031f8:	08003279 	.word	0x08003279
 80031fc:	08003279 	.word	0x08003279
 8003200:	08003279 	.word	0x08003279
 8003204:	08003279 	.word	0x08003279
 8003208:	08003279 	.word	0x08003279
 800320c:	08003279 	.word	0x08003279
 8003210:	0800326d 	.word	0x0800326d
 8003214:	08003279 	.word	0x08003279
 8003218:	08003279 	.word	0x08003279
 800321c:	08003279 	.word	0x08003279
 8003220:	08003279 	.word	0x08003279
 8003224:	08003279 	.word	0x08003279
 8003228:	08003279 	.word	0x08003279
 800322c:	08003279 	.word	0x08003279
 8003230:	08003261 	.word	0x08003261
 8003234:	08003279 	.word	0x08003279
 8003238:	08003279 	.word	0x08003279
 800323c:	08003279 	.word	0x08003279
 8003240:	08003279 	.word	0x08003279
 8003244:	08003279 	.word	0x08003279
 8003248:	08003279 	.word	0x08003279
 800324c:	08003279 	.word	0x08003279
 8003250:	08003255 	.word	0x08003255
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d913      	bls.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800325e:	e010      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d90f      	bls.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800326a:	e00c      	b.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d90b      	bls.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003276:	e008      	b.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
        break;
 800327c:	e006      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327e:	bf00      	nop
 8003280:	e004      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800328a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 0118 	bic.w	r1, r3, #24
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	e158      	b.n	800357e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 814a 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d005      	beq.n	80032fc <HAL_GPIO_Init+0x40>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d017      	beq.n	800339a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d123      	bne.n	80033ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	6939      	ldr	r1, [r7, #16]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a4 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3318      	adds	r3, #24
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d025      	beq.n	80034a8 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01f      	beq.n	80034a4 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a50      	ldr	r2, [pc, #320]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d019      	beq.n	80034a0 <HAL_GPIO_Init+0x1e4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4f      	ldr	r2, [pc, #316]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_GPIO_Init+0x1e0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00d      	beq.n	8003498 <HAL_GPIO_Init+0x1dc>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4d      	ldr	r2, [pc, #308]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x1d8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_GPIO_Init+0x1d4>
 800348c:	2306      	movs	r3, #6
 800348e:	e00c      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003490:	2307      	movs	r3, #7
 8003492:	e00a      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003494:	2305      	movs	r3, #5
 8003496:	e008      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003498:	2304      	movs	r3, #4
 800349a:	e006      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 800349c:	2303      	movs	r3, #3
 800349e:	e004      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e002      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a8:	2300      	movs	r3, #0
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	f002 0203 	and.w	r2, r2, #3
 80034b0:	00d2      	lsls	r2, r2, #3
 80034b2:	4093      	lsls	r3, r2
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80034ba:	4938      	ldr	r1, [pc, #224]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3318      	adds	r3, #24
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ec:	4a2b      	ldr	r2, [pc, #172]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f ae9f 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	4002f400 	.word	0x4002f400
 80035a0:	42020000 	.word	0x42020000
 80035a4:	42020400 	.word	0x42020400
 80035a8:	42020800 	.word	0x42020800
 80035ac:	42020c00 	.word	0x42020c00
 80035b0:	42021000 	.word	0x42021000
 80035b4:	42021400 	.word	0x42021400
 80035b8:	42021800 	.word	0x42021800

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e081      	b.n	8003702 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fefa 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e006      	b.n	8003674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d104      	bne.n	8003686 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d138      	bne.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800372a:	2302      	movs	r3, #2
 800372c:	e032      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d139      	bne.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e033      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	e007      	b.n	8003866 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0204 	bic.w	r2, r3, #4
 800385e:	4905      	ldr	r1, [pc, #20]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40030400 	.word	0x40030400

08003878 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40030400 	.word	0x40030400

08003898 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe fb8c 	bl	8001fc0 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e0a2      	b.n	80039fc <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 809b 	bne.w	80039fc <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fea2 	bl	8001610 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80038cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f89b 	bl	8003a0c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_OSPI_Init+0x170>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68d1      	ldr	r1, [r2, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6912      	ldr	r2, [r2, #16]
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0412      	lsls	r2, r2, #16
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6952      	ldr	r2, [r2, #20]
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0212      	lsls	r2, r2, #8
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	69d2      	ldr	r2, [r2, #28]
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0412      	lsls	r2, r2, #16
 800392c:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003936:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f863 	bl	8003a2a <OSPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d146      	bne.n	80039fc <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039a4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0202 	orr.w	r2, r2, #2
 80039e2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d103      	bne.n	80039f6 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80039f4:	e002      	b.n	80039fc <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	f8e0f8f4 	.word	0xf8e0f8f4

08003a0c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a3a:	e01a      	b.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d016      	beq.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fabc 	bl	8001fc0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00e      	b.n	8003a90 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d1d6      	bne.n	8003a3c <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af06      	add	r7, sp, #24
 8003a9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0cb      	b.n	8003c42 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd ff28 	bl	8001914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 fe1f 	bl	8009714 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e040      	b.n	8003b5e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3301      	adds	r3, #1
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3303      	adds	r3, #3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3338      	adds	r3, #56	; 0x38
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	333c      	adds	r3, #60	; 0x3c
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3b9      	bcc.n	8003adc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e044      	b.n	8003bf8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3b5      	bcc.n	8003b6e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	687e      	ldr	r6, [r7, #4]
 8003c0a:	466d      	mov	r5, sp
 8003c0c:	f106 0410 	add.w	r4, r6, #16
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	1d33      	adds	r3, r6, #4
 8003c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f005 fd94 	bl	800974a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f805 	bl	8003c4a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003cee:	f000 f861 	bl	8003db4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	d101      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03e      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d101      	bne.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e035      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e02f      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003d24:	4917      	ldr	r1, [pc, #92]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	2232      	movs	r2, #50	; 0x32
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4c:	e002      	b.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d102      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f2      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d101      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e000      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40007000 	.word	0x40007000
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d90:	cccccccd 	.word	0xcccccccd

08003d94 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da2:	6053      	str	r3, [r2, #4]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e00a      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e001      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f000 bcc2 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e10:	4b99      	ldr	r3, [pc, #612]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80e9 	beq.w	8004004 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4a>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f040 8083 	bne.w	8003f46 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d17f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e46:	4b8c      	ldr	r3, [pc, #560]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_RCC_OscConfig+0x64>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f000 bc9a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7e>
 8003e70:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d224      	bcs.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fece 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f000 bc7a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	496f      	ldr	r1, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	496a      	ldr	r1, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e026      	b.n	8003f22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b68      	ldr	r3, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	495d      	ldr	r1, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe8d 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f000 bc39 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f22:	f000 fe17 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f2c:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_RCC_OscConfig+0x284>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fdf1 	bl	8001b18 <HAL_InitTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d060      	beq.n	8004002 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	f000 bc27 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d039      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a49      	ldr	r2, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f831 	bl	8001fc0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f60:	e00f      	b.n	8003f82 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fe f82d 	bl	8001fc0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d908      	bls.n	8003f82 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f000 bc09 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0e9      	beq.n	8003f62 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a39      	ldr	r2, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fac:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	492f      	ldr	r1, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e020      	b.n	8004004 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fce:	f7fd fff7 	bl	8001fc0 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd4:	e00e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fff3 	bl	8001fc0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d907      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e3cf      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1da>
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004002:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07e      	beq.n	800410e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x226>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d10e      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06e      	beq.n	800410c <HAL_RCC_OscConfig+0x310>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d16a      	bne.n	800410c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e3ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x256>
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405a:	d113      	bne.n	8004084 <HAL_RCC_OscConfig+0x288>
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e012      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	20000004 	.word	0x20000004
 8004080:	20000008 	.word	0x20000008
 8004084:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a8a      	ldr	r2, [pc, #552]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a87      	ldr	r2, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd ff8c 	bl	8001fc0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040aa:	e00e      	b.n	80040ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd ff88 	bl	8001fc0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d907      	bls.n	80040ca <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e364      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b7a      	ldr	r3, [pc, #488]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ea      	beq.n	80040ac <HAL_RCC_OscConfig+0x2b0>
 80040d6:	e01a      	b.n	800410e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd ff72 	bl	8001fc0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	e00e      	b.n	80040fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd ff6e 	bl	8001fc0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d907      	bls.n	80040fe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e34a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ea      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2e4>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x330>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d119      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d116      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x348>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e327      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4958      	ldr	r1, [pc, #352]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	e04c      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d029      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd ff27 	bl	8001fc0 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd ff23 	bl	8001fc0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e2ff      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004194:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ea      	beq.n	8004176 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	4941      	ldr	r1, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	e01e      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fefd 	bl	8001fc0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c8:	e00e      	b.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fd fef9 	bl	8001fc0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d907      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2d5      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ea      	bne.n	80041ca <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d062      	beq.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d038      	beq.n	800427a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f023 0310 	bic.w	r3, r3, #16
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004220:	e007      	b.n	8004232 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd febd 	bl	8001fc0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004248:	e00f      	b.n	800426a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd feb9 	bl	8001fc0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b07      	cmp	r3, #7
 8004256:	d908      	bls.n	800426a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e294      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e8      	beq.n	800424a <HAL_RCC_OscConfig+0x44e>
 8004278:	e025      	b.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fe99 	bl	8001fc0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	e012      	b.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004292:	f7fd fe95 	bl	8001fc0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b07      	cmp	r3, #7
 800429e:	d90b      	bls.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e270      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	4ba8      	ldr	r3, [pc, #672]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 812d 	beq.w	800452e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d8:	4ba0      	ldr	r3, [pc, #640]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b9d      	ldr	r3, [pc, #628]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a9c      	ldr	r2, [pc, #624]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b9a      	ldr	r3, [pc, #616]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b97      	ldr	r3, [pc, #604]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11e      	bne.n	800434a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a93      	ldr	r2, [pc, #588]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7fd fe52 	bl	8001fc0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431e:	e00e      	b.n	800433e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fe4e 	bl	8001fc0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d907      	bls.n	800433e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e22a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ea      	beq.n	8004320 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01f      	beq.n	8004396 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004362:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004382:	e018      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a74      	ldr	r2, [pc, #464]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004394:	e00f      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004396:	4b71      	ldr	r3, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043a6:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	4a6b      	ldr	r2, [pc, #428]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d068      	beq.n	8004490 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fdff 	bl	8001fc0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	e011      	b.n	80043ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd fdfb 	bl	8001fc0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1d4      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0e6      	beq.n	80043c6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d022      	beq.n	800444a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004404:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004414:	e011      	b.n	800443a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fdd3 	bl	8001fc0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d908      	bls.n	800443a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800443a:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0e6      	beq.n	8004416 <HAL_RCC_OscConfig+0x61a>
 8004448:	e068      	b.n	800451c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800444a:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	4a42      	ldr	r2, [pc, #264]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800445a:	e011      	b.n	8004480 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fd fdb0 	bl	8001fc0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d908      	bls.n	8004480 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e189      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <HAL_RCC_OscConfig+0x660>
 800448e:	e045      	b.n	800451c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fd96 	bl	8001fc0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004496:	e011      	b.n	80044bc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fd92 	bl	8001fc0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d908      	bls.n	80044bc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e16b      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d021      	beq.n	800451c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044e8:	e011      	b.n	800450e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fd fd69 	bl	8001fc0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d908      	bls.n	800450e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e142      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4a0d      	ldr	r2, [pc, #52]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fd35 	bl	8001fc0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x788>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fd fd2c 	bl	8001fc0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e107      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004584:	4b85      	ldr	r3, [pc, #532]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0e8      	beq.n	8004564 <HAL_RCC_OscConfig+0x768>
 8004592:	e022      	b.n	80045da <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fd0c 	bl	8001fc0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ac:	f7fd fd08 	bl	8001fc0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d908      	bls.n	80045cc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ba:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0e3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045cc:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e8      	bne.n	80045ac <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80d7 	beq.w	8004792 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	f000 8091 	beq.w	8004714 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d166      	bne.n	80046c8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fd fcdb 	bl	8001fc0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460e:	f7fd fcd7 	bl	8001fc0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <HAL_RCC_OscConfig+0x9a4>)
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004648:	3a01      	subs	r2, #1
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0552      	lsls	r2, r2, #21
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0652      	lsls	r2, r2, #25
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004672:	06d2      	lsls	r2, r2, #27
 8004674:	430a      	orrs	r2, r1
 8004676:	4949      	ldr	r1, [pc, #292]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd fc94 	bl	8001fc0 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e00e      	b.n	80046ba <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd fc90 	bl	8001fc0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d907      	bls.n	80046ba <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e06c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ea      	beq.n	800469c <HAL_RCC_OscConfig+0x8a0>
 80046c6:	e064      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fc74 	bl	8001fc0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e00e      	b.n	80046fa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fc70 	bl	8001fc0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d907      	bls.n	80046fa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e04c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ea      	bne.n	80046dc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4924      	ldr	r1, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x9a8>)
 800470e:	4013      	ands	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
 8004712:	e03e      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e039      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	429a      	cmp	r2, r3
 8004732:	d12c      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	3b01      	subs	r3, #1
 8004740:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d123      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11b      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d113      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d109      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	019f800c 	.word	0x019f800c
 80047a4:	feeefffc 	.word	0xfeeefffc

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e11c      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b90      	ldr	r3, [pc, #576]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	498b      	ldr	r1, [pc, #556]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e104      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	497b      	ldr	r1, [pc, #492]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8085 	beq.w	8004936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d11f      	bne.n	8004874 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0da      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004844:	f000 fa58 	bl	8004cf8 <RCC_GetSysClockFreqFromPLLSource>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d947      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d141      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e036      	b.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487c:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b6      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004894:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0aa      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b58      	ldr	r3, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0a2      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b4:	f000 f8b0 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a53      	ldr	r2, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90f      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ce:	4b4e      	ldr	r3, [pc, #312]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d6:	4a4c      	ldr	r2, [pc, #304]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4946      	ldr	r1, [pc, #280]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f4:	f7fd fb64 	bl	8001fc0 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e013      	b.n	8004924 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fb60 	bl	8001fc0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d90a      	bls.n	8004924 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e06a      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 020c 	and.w	r2, r3, #12
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	429a      	cmp	r2, r3
 8004934:	d1e2      	bne.n	80048fc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d105      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004960:	429a      	cmp	r2, r3
 8004962:	d208      	bcs.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4925      	ldr	r1, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004976:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d210      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 020f 	bic.w	r2, r3, #15
 800498c:	491d      	ldr	r1, [pc, #116]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e029      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049e4:	f000 f8b6 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x268>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd f890 	bl	8001b18 <HAL_InitTick>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	04c4b400 	.word	0x04c4b400
 8004a10:	20000004 	.word	0x20000004
 8004a14:	20000008 	.word	0x20000008

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a34      	ldr	r2, [pc, #208]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d146      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xb4>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xce>
 8004aca:	e019      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	0a12      	lsrs	r2, r2, #8
 8004ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	617b      	str	r3, [r7, #20]
        break;
 8004ae4:	e019      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	0a12      	lsrs	r2, r2, #8
 8004af4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
        break;
 8004afe:	e00c      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b0a:	68d2      	ldr	r2, [r2, #12]
 8004b0c:	0a12      	lsrs	r2, r2, #8
 8004b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
        break;
 8004b18:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0e5b      	lsrs	r3, r3, #25
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	3301      	adds	r3, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b34:	69bb      	ldr	r3, [r7, #24]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08023858 	.word	0x08023858
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004b58:	f7ff ff5e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	08023840 	.word	0x08023840

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff ffe8 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	08023850 	.word	0x08023850

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffd4 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	08023850 	.word	0x08023850

08004bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	220f      	movs	r2, #15
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetClockConfig+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f83a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6138      	str	r0, [r7, #16]
 8004c4e:	e014      	b.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff f82a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c86:	d10b      	bne.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d919      	bls.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2ba0      	cmp	r3, #160	; 0xa0
 8004c92:	d902      	bls.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c94:	2302      	movs	r3, #2
 8004c96:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c98:	e013      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c9e:	e010      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d902      	bls.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e00a      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d102      	bne.n	8004cb8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d101      	bne.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 020f 	bic.w	r2, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40022000 	.word	0x40022000

08004cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d015      	beq.n	8004d48 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d839      	bhi.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d01c      	beq.n	8004d62 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d133      	bne.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	0a12      	lsrs	r2, r2, #8
 8004d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
      break;
 8004d46:	e029      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d52:	68d2      	ldr	r2, [r2, #12]
 8004d54:	0a12      	lsrs	r2, r2, #8
 8004d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e01c      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e005      	b.n	8004d8a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	613b      	str	r3, [r7, #16]
        break;
 8004d94:	e002      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
      break;
 8004d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0e5b      	lsrs	r3, r3, #25
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004db6:	683b      	ldr	r3, [r7, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	08023858 	.word	0x08023858

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d040      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d02a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d825      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d026      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d821      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d006      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d81d      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d010      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e14:	e018      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a8e      	ldr	r2, [pc, #568]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e22:	e015      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb08 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3320      	adds	r3, #32
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fbe5 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
        break;
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e56:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	497b      	ldr	r1, [pc, #492]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d030      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d82a      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d824      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d81e      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb0:	e018      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a67      	ldr	r2, [pc, #412]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ebe:	e015      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 faba 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ed0:	e00c      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fb97 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
        break;
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4954      	ldr	r1, [pc, #336]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80ab 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	4a48      	ldr	r2, [pc, #288]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	6593      	str	r3, [r2, #88]	; 0x58
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f48:	4b43      	ldr	r3, [pc, #268]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f54:	f7fd f834 	bl	8001fc0 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5a:	e00f      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fd f830 	bl	8001fc0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d908      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004f7a:	e006      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0e9      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004f8a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d164      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01f      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fc ffe7 	bl	8001fc0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff4:	e012      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc ffe3 	bl	8001fc0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d909      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800501a:	e007      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0e5      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800502c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	77bb      	strb	r3, [r7, #30]
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005054:	40021000 	.word	0x40021000
 8005058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b9c      	ldr	r3, [pc, #624]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a9b      	ldr	r2, [pc, #620]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b96      	ldr	r3, [pc, #600]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	4992      	ldr	r1, [pc, #584]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a0:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 020c 	bic.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	498a      	ldr	r1, [pc, #552]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050c2:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4981      	ldr	r1, [pc, #516]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e4:	4b7c      	ldr	r3, [pc, #496]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	4979      	ldr	r1, [pc, #484]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005106:	4b74      	ldr	r3, [pc, #464]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	4970      	ldr	r1, [pc, #448]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005128:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	4968      	ldr	r1, [pc, #416]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	495f      	ldr	r1, [pc, #380]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516c:	4b5a      	ldr	r3, [pc, #360]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	4957      	ldr	r1, [pc, #348]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519c:	494e      	ldr	r1, [pc, #312]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b8:	d00e      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051be:	d814      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c8:	d10f      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ca:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	4a42      	ldr	r2, [pc, #264]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051d6:	e00c      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f92e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	77fb      	strb	r3, [r7, #31]
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	4934      	ldr	r1, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7ffb      	ldrb	r3, [r7, #31]
 8005212:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	492a      	ldr	r1, [pc, #168]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005242:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	4921      	ldr	r1, [pc, #132]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	4919      	ldr	r1, [pc, #100]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528c:	f023 0203 	bic.w	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	4910      	ldr	r1, [pc, #64]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02b      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c6:	d109      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a02      	ldr	r2, [pc, #8]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
 80052d4:	e014      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f8a7 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005314:	d108      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531c:	4a6e      	ldr	r2, [pc, #440]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800531e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005322:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005326:	e012      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005328:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005336:	4968      	ldr	r1, [pc, #416]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800533e:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005344:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d10d      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f86e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
 8005370:	77bb      	strb	r3, [r7, #30]
 8005372:	e016      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537c:	d106      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537e:	4b56      	ldr	r3, [pc, #344]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a55      	ldr	r2, [pc, #340]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005388:	60d3      	str	r3, [r2, #12]
 800538a:	e00a      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	d105      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	4a4f      	ldr	r2, [pc, #316]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d028      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053bc:	4946      	ldr	r1, [pc, #280]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a41      	ldr	r2, [pc, #260]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d8:	60d3      	str	r3, [r2, #12]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f827 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7ffb      	ldrb	r3, [r7, #31]
 80053fe:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	492e      	ldr	r1, [pc, #184]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d10c      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f802 	bl	8006440 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
 8005448:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545c:	f023 0204 	bic.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	491c      	ldr	r1, [pc, #112]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005480:	f023 0218 	bic.w	r2, r3, #24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4913      	ldr	r1, [pc, #76]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	490a      	ldr	r1, [pc, #40]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d105      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80054ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ee:	d13e      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d028      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550a:	f200 8773 	bhi.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d005      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d00e      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800551e:	f000 bf69 	b.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	f040 8763 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	61fb      	str	r3, [r7, #28]
        break;
 8005538:	f000 bf5e 	b.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	f040 8758 	bne.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800554c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005550:	61fb      	str	r3, [r7, #28]
        break;
 8005552:	f000 bf53 	b.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	f040 874d 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8005568:	61fb      	str	r3, [r7, #28]
        break;
 800556a:	f000 bf49 	b.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d036      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d84b      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d020      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005590:	e044      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d116      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	e005      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055ca:	e02a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
        break;
 80055d0:	e027      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055de:	d102      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80055e2:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055e4:	e01d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
        break;
 80055ea:	e01a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80055fc:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055fe:	e010      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
        break;
 8005604:	e00d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0003d090 	.word	0x0003d090
 8005610:	08023858 	.word	0x08023858
 8005614:	00f42400 	.word	0x00f42400
 8005618:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	bf00      	nop
    }

    switch (PeriphClk)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	f000 8659 	beq.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005632:	f200 86e7 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563c:	f000 8605 	beq.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	f200 86dd 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005650:	f000 8468 	beq.w	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565a:	f200 86d3 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005664:	f000 8530 	beq.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	f200 86c9 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005678:	f000 8180 	beq.w	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005682:	f200 86bf 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568c:	f000 80c2 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005696:	f200 86b5 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	f000 842f 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	f200 86ab 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b4:	f000 83e7 	beq.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	f200 86a1 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	f000 80a4 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d2:	f200 8697 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	f000 8092 	beq.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	f200 868d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	f000 8080 	beq.w	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	f200 8683 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	f000 8553 	beq.w	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	f200 8679 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	f000 84ff 	beq.w	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005722:	f200 866f 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	f000 84a0 	beq.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	f200 8665 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	f000 846b 	beq.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	f200 865d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b20      	cmp	r3, #32
 800574e:	d84b      	bhi.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8656 	beq.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	2b1f      	cmp	r3, #31
 800575e:	f200 8651 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005b81 	.word	0x08005b81
 800576c:	08005bf5 	.word	0x08005bf5
 8005770:	08006405 	.word	0x08006405
 8005774:	08005c87 	.word	0x08005c87
 8005778:	08006405 	.word	0x08006405
 800577c:	08006405 	.word	0x08006405
 8005780:	08006405 	.word	0x08006405
 8005784:	08005cff 	.word	0x08005cff
 8005788:	08006405 	.word	0x08006405
 800578c:	08006405 	.word	0x08006405
 8005790:	08006405 	.word	0x08006405
 8005794:	08006405 	.word	0x08006405
 8005798:	08006405 	.word	0x08006405
 800579c:	08006405 	.word	0x08006405
 80057a0:	08006405 	.word	0x08006405
 80057a4:	08005d83 	.word	0x08005d83
 80057a8:	08006405 	.word	0x08006405
 80057ac:	08006405 	.word	0x08006405
 80057b0:	08006405 	.word	0x08006405
 80057b4:	08006405 	.word	0x08006405
 80057b8:	08006405 	.word	0x08006405
 80057bc:	08006405 	.word	0x08006405
 80057c0:	08006405 	.word	0x08006405
 80057c4:	08006405 	.word	0x08006405
 80057c8:	08006405 	.word	0x08006405
 80057cc:	08006405 	.word	0x08006405
 80057d0:	08006405 	.word	0x08006405
 80057d4:	08006405 	.word	0x08006405
 80057d8:	08006405 	.word	0x08006405
 80057dc:	08006405 	.word	0x08006405
 80057e0:	08006405 	.word	0x08006405
 80057e4:	08005e05 	.word	0x08005e05
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	f000 83e8 	beq.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80057f0:	f000 be08 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057fa:	f001 f867 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
        break;
 8005800:	f000 be03 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800580a:	f001 f85f 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	f000 bdfb 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005814:	4b9c      	ldr	r3, [pc, #624]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800582e:	f200 8096 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d02a      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	f200 808d 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07f      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005850:	d04b      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8005852:	e084      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	f040 8081 	bne.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005862:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800586e:	4b86      	ldr	r3, [pc, #536]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	e005      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800587a:	4b83      	ldr	r3, [pc, #524]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	61fb      	str	r3, [r7, #28]
            break;
 800588e:	e069      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005890:	4b7d      	ldr	r3, [pc, #500]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800589c:	d165      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800589e:	4b7a      	ldr	r3, [pc, #488]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058aa:	d15e      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3301      	adds	r3, #1
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058c0:	4b71      	ldr	r3, [pc, #452]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ca:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
 80058d4:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	0d5b      	lsrs	r3, r3, #21
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	3301      	adds	r3, #1
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	61fb      	str	r3, [r7, #28]
            break;
 80058e8:	e03f      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f6:	d13b      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058f8:	4b63      	ldr	r3, [pc, #396]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005904:	d134      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005906:	f000 ff2d 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 800590a:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	3301      	adds	r3, #1
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	0d5b      	lsrs	r3, r3, #21
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	61fb      	str	r3, [r7, #28]
            break;
 8005948:	e012      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800594a:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10e      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800595a:	61fb      	str	r3, [r7, #28]
            break;
 800595c:	e00b      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 800595e:	bf00      	nop
 8005960:	f000 bd53 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005964:	bf00      	nop
 8005966:	f000 bd50 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800596a:	bf00      	nop
 800596c:	f000 bd4d 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005970:	bf00      	nop
 8005972:	f000 bd4a 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005976:	bf00      	nop
        break;
 8005978:	f000 bd47 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800597e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598a:	d13d      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005998:	f040 8536 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	f040 852e 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059c0:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ca:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0edb      	lsrs	r3, r3, #27
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059de:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 80059ea:	2311      	movs	r3, #17
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e001      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 80059f0:	2307      	movs	r3, #7
 80059f2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	fb03 f202 	mul.w	r2, r3, r2
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	f000 bd00 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a1a:	d016      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a22:	f200 809e 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d032      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	f200 8095 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8087 	beq.w	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a46:	d052      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005a48:	e08b      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f040 8088 	bne.w	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	e005      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	61fb      	str	r3, [r7, #28]
              break;
 8005a84:	e070      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	08023858 	.word	0x08023858
 8005a90:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a94:	4baa      	ldr	r3, [pc, #680]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa0:	d165      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005aa2:	4ba7      	ldr	r3, [pc, #668]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d15e      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ac4:	4b9e      	ldr	r3, [pc, #632]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0d5b      	lsrs	r3, r3, #21
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	61fb      	str	r3, [r7, #28]
              break;
 8005aec:	e03f      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005aee:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afa:	d13b      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b08:	d134      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b0a:	f000 fe2b 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005b0e:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b10:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b24:	4b86      	ldr	r3, [pc, #536]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	0d5b      	lsrs	r3, r3, #21
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	3301      	adds	r3, #1
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
              break;
 8005b4c:	e012      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d10e      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005b5c:	4b79      	ldr	r3, [pc, #484]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005b5e:	61fb      	str	r3, [r7, #28]
              break;
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8005b62:	bf00      	nop
 8005b64:	f000 bc50 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b68:	bf00      	nop
 8005b6a:	f000 bc4d 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b6e:	bf00      	nop
 8005b70:	f000 bc4a 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b74:	bf00      	nop
 8005b76:	f000 bc47 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b7a:	bf00      	nop
        break;
 8005b7c:	f000 bc44 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d827      	bhi.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bb1 	.word	0x08005bb1
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bcd 	.word	0x08005bcd
            frequency = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fffc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
            break;
 8005bae:	e01f      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005bb0:	f7fe ff32 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005bb4:	61f8      	str	r0, [r7, #28]
            break;
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d110      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8005bc6:	4b60      	ldr	r3, [pc, #384]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005bc8:	61fb      	str	r3, [r7, #28]
            break;
 8005bca:	e00d      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bcc:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	61fb      	str	r3, [r7, #28]
            break;
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8005be2:	bf00      	nop
 8005be4:	f000 bc11 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005be8:	bf00      	nop
 8005bea:	f000 bc0e 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bee:	bf00      	nop
        break;
 8005bf0:	f000 bc0b 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005bf4:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d839      	bhi.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c7b 	.word	0x08005c7b
 8005c14:	08005c7b 	.word	0x08005c7b
 8005c18:	08005c7b 	.word	0x08005c7b
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c7b 	.word	0x08005c7b
 8005c24:	08005c7b 	.word	0x08005c7b
 8005c28:	08005c7b 	.word	0x08005c7b
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c7b 	.word	0x08005c7b
 8005c34:	08005c7b 	.word	0x08005c7b
 8005c38:	08005c7b 	.word	0x08005c7b
 8005c3c:	08005c65 	.word	0x08005c65
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe ff9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
            break;
 8005c46:	e01d      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c48:	f7fe fee6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005c4c:	61f8      	str	r0, [r7, #28]
            break;
 8005c4e:	e019      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c50:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005c60:	61fb      	str	r3, [r7, #28]
            break;
 8005c62:	e00c      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d107      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	61fb      	str	r3, [r7, #28]
            break;
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005c7a:	bf00      	nop
 8005c7c:	e3c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c7e:	bf00      	nop
 8005c80:	e3c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c82:	bf00      	nop
        break;
 8005c84:	e3c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d021      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b30      	cmp	r3, #48	; 0x30
 8005c9c:	d829      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d011      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d823      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8005cb6:	e01c      	b.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe ff60 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
            break;
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fe feaa 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005cc4:	61f8      	str	r0, [r7, #28]
            break;
 8005cc6:	e019      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005cd8:	61fb      	str	r3, [r7, #28]
            break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cdc:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61fb      	str	r3, [r7, #28]
            break;
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8005cf2:	bf00      	nop
 8005cf4:	e389      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cf6:	bf00      	nop
 8005cf8:	e387      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cfa:	bf00      	nop
        break;
 8005cfc:	e385      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d0e:	d027      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2bc0      	cmp	r3, #192	; 0xc0
 8005d14:	d82f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d829      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d004      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8005d2e:	e022      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe ff24 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
            break;
 8005d36:	e023      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d38:	f7fe fe6e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005d3c:	61f8      	str	r0, [r7, #28]
            break;
 8005d3e:	e01f      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	02dc6c00 	.word	0x02dc6c00
 8005d48:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4c:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d10f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005d5a:	4b97      	ldr	r3, [pc, #604]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005d5c:	61fb      	str	r3, [r7, #28]
            break;
 8005d5e:	e00c      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	61fb      	str	r3, [r7, #28]
            break;
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005d76:	bf00      	nop
 8005d78:	e347      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7a:	bf00      	nop
 8005d7c:	e345      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7e:	bf00      	nop
        break;
 8005d80:	e343      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d82:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d94:	d025      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d82c      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d013      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d824      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005dbc:	e01c      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fedd 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	61f8      	str	r0, [r7, #28]
            break;
 8005dc4:	e01d      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe fe27 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005dca:	61f8      	str	r0, [r7, #28]
            break;
 8005dcc:	e019      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dce:	4b79      	ldr	r3, [pc, #484]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d10f      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005ddc:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005dde:	61fb      	str	r3, [r7, #28]
            break;
 8005de0:	e00c      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005de2:	4b74      	ldr	r3, [pc, #464]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d107      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df4:	61fb      	str	r3, [r7, #28]
            break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005df8:	bf00      	nop
 8005dfa:	e306      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dfc:	bf00      	nop
 8005dfe:	e304      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e00:	bf00      	nop
        break;
 8005e02:	e302      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e04:	4b6b      	ldr	r3, [pc, #428]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e16:	d025      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1e:	d82c      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d013      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d824      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3c:	d004      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fe9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005e44:	61f8      	str	r0, [r7, #28]
            break;
 8005e46:	e01d      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005e48:	f7fe fde6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005e4c:	61f8      	str	r0, [r7, #28]
            break;
 8005e4e:	e019      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e50:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d10f      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005e60:	61fb      	str	r3, [r7, #28]
            break;
 8005e62:	e00c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	61fb      	str	r3, [r7, #28]
            break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005e7a:	bf00      	nop
 8005e7c:	e2c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e7e:	bf00      	nop
 8005e80:	e2c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e82:	bf00      	nop
        break;
 8005e84:	e2c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e86:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ea0:	d12b      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe fdb9 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ea6:	61f8      	str	r0, [r7, #28]
            break;
 8005ea8:	e02a      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d023      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005eb6:	f000 fc55 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005eba:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	fb03 f202 	mul.w	r2, r3, r2
 8005ee4:	4b33      	ldr	r3, [pc, #204]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
            break;
 8005ef8:	e001      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005efa:	bf00      	nop
 8005efc:	e285      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e283      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fe fe46 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005f18:	61f8      	str	r0, [r7, #28]
        break;
 8005f1a:	e276      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f1c:	f7fe fd7c 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e272      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f2a:	f003 0318 	and.w	r3, r3, #24
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d010      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d834      	bhi.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d024      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005f48:	e02d      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f50:	f000 fcbc 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 8005f54:	61f8      	str	r0, [r7, #28]
            break;
 8005f56:	e02b      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d122      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	e005      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4a0c      	ldr	r2, [pc, #48]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	61fb      	str	r3, [r7, #28]
            break;
 8005f90:	e00b      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d106      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005fa2:	61fb      	str	r3, [r7, #28]
            break;
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8005fa6:	bf00      	nop
 8005fa8:	e22f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005faa:	bf00      	nop
 8005fac:	e22d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005fae:	bf00      	nop
        break;
 8005fb0:	e22b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	08023858 	.word	0x08023858
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fc0:	4b96      	ldr	r3, [pc, #600]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d819      	bhi.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d004      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe fdc6 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
            break;
 8005ff2:	e010      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ff4:	f7fe fd10 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ff8:	61f8      	str	r0, [r7, #28]
            break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ffc:	4b87      	ldr	r3, [pc, #540]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800600c:	61fb      	str	r3, [r7, #28]
            break;
 800600e:	e001      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8006010:	bf00      	nop
 8006012:	e1fa      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006014:	bf00      	nop
        break;
 8006016:	e1f8      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602a:	d013      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d819      	bhi.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006040:	d004      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8006042:	e011      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fe fd9a 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8006048:	61f8      	str	r0, [r7, #28]
            break;
 800604a:	e010      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 800604c:	f7fe fce4 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006050:	61f8      	str	r0, [r7, #28]
            break;
 8006052:	e00c      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006054:	4b71      	ldr	r3, [pc, #452]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	d104      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8006062:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006064:	61fb      	str	r3, [r7, #28]
            break;
 8006066:	e001      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8006068:	bf00      	nop
 800606a:	e1ce      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800606c:	bf00      	nop
        break;
 800606e:	e1cc      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006070:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006082:	d013      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d819      	bhi.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d004      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 800609a:	e011      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fd6e 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
            break;
 80060a2:	e010      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 80060a4:	f7fe fcb8 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060a8:	61f8      	str	r0, [r7, #28]
            break;
 80060aa:	e00c      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060ac:	4b5b      	ldr	r3, [pc, #364]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d104      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 80060ba:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80060bc:	61fb      	str	r3, [r7, #28]
            break;
 80060be:	e001      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 80060c0:	bf00      	nop
 80060c2:	e1a2      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060c4:	bf00      	nop
        break;
 80060c6:	e1a0      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d011      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d818      	bhi.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe fd45 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060f2:	61f8      	str	r0, [r7, #28]
            break;
 80060f4:	e010      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe fc8f 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060fa:	61f8      	str	r0, [r7, #28]
            break;
 80060fc:	e00c      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d104      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800610c:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800610e:	61fb      	str	r3, [r7, #28]
            break;
 8006110:	e001      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8006112:	bf00      	nop
 8006114:	e179      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006116:	bf00      	nop
        break;
 8006118:	e177      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800612c:	d02c      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006134:	d833      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800613c:	d01a      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006144:	d82b      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8006154:	e023      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe fd11 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800615a:	61f8      	str	r0, [r7, #28]
            break;
 800615c:	e026      	b.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800615e:	4b2f      	ldr	r3, [pc, #188]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d11a      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 800616c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006170:	61fb      	str	r3, [r7, #28]
            break;
 8006172:	e016      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006174:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d111      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006184:	61fb      	str	r3, [r7, #28]
            break;
 8006186:	e00e      	b.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d109      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	61fb      	str	r3, [r7, #28]
            break;
 800619c:	e005      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 800619e:	bf00      	nop
 80061a0:	e133      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a2:	bf00      	nop
 80061a4:	e131      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a6:	bf00      	nop
 80061a8:	e12f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061aa:	bf00      	nop
        break;
 80061ac:	e12d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c0:	d030      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d837      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d0:	d01a      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d8:	d82f      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d004      	beq.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 80061e8:	e027      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80061ea:	f7fe fcc7 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80061ee:	61f8      	str	r0, [r7, #28]
            break;
 80061f0:	e02a      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d11e      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8006200:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006204:	61fb      	str	r3, [r7, #28]
            break;
 8006206:	e01a      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d115      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8006216:	4b02      	ldr	r3, [pc, #8]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006218:	61fb      	str	r3, [r7, #28]
            break;
 800621a:	e012      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800621c:	40021000 	.word	0x40021000
 8006220:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006224:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d109      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	61fb      	str	r3, [r7, #28]
            break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800623a:	bf00      	nop
 800623c:	e0e5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800623e:	bf00      	nop
 8006240:	e0e3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006242:	bf00      	nop
 8006244:	e0e1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006246:	bf00      	nop
        break;
 8006248:	e0df      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800625c:	d02c      	beq.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006264:	d833      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	d01a      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006274:	d82b      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8006284:	e023      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006286:	f7fe fc79 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800628a:	61f8      	str	r0, [r7, #28]
            break;
 800628c:	e026      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11a      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800629c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062a0:	61fb      	str	r3, [r7, #28]
            break;
 80062a2:	e016      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d111      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 80062b2:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 80062b4:	61fb      	str	r3, [r7, #28]
            break;
 80062b6:	e00e      	b.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062b8:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d109      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
            break;
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 80062ce:	bf00      	nop
 80062d0:	e09b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d2:	bf00      	nop
 80062d4:	e099      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d6:	bf00      	nop
 80062d8:	e097      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062da:	bf00      	nop
        break;
 80062dc:	e095      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80062de:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f0:	d042      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f8:	d874      	bhi.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8006308:	e06c      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800630a:	4b42      	ldr	r3, [pc, #264]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006316:	d167      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800631a:	61fb      	str	r3, [r7, #28]
            break;
 800631c:	e064      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800631e:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632a:	d15f      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800632c:	4b39      	ldr	r3, [pc, #228]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006338:	d158      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800633a:	4b36      	ldr	r3, [pc, #216]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	3301      	adds	r3, #1
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	fb03 f202 	mul.w	r2, r3, r2
 8006362:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	0d5b      	lsrs	r3, r3, #21
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	3301      	adds	r3, #1
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	61fb      	str	r3, [r7, #28]
            break;
 8006376:	e039      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006378:	4b26      	ldr	r3, [pc, #152]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d035      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006384:	f000 f9ee 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8006388:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	3301      	adds	r3, #1
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	0edb      	lsrs	r3, r3, #27
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 80063c8:	2311      	movs	r3, #17
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e001      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 80063ce:	2307      	movs	r3, #7
 80063d0:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	fb03 f202 	mul.w	r2, r3, r2
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	61fb      	str	r3, [r7, #28]
            break;
 80063e2:	e005      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 80063e4:	bf00      	nop
 80063e6:	e010      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063e8:	bf00      	nop
 80063ea:	e00e      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063ec:	bf00      	nop
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063f0:	bf00      	nop
        break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f4:	bf00      	nop
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f8:	bf00      	nop
 80063fa:	e006      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006408:	bf00      	nop
    }
  }

  return (frequency);
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40021000 	.word	0x40021000
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800642a:	f043 0304 	orr.w	r3, r3, #4
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000

08006440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d018      	beq.n	8006488 <RCCEx_PLLSAI1_Config+0x48>
 8006456:	2b03      	cmp	r3, #3
 8006458:	d81f      	bhi.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d002      	beq.n	8006464 <RCCEx_PLLSAI1_Config+0x24>
 800645e:	2b02      	cmp	r3, #2
 8006460:	d009      	beq.n	8006476 <RCCEx_PLLSAI1_Config+0x36>
 8006462:	e01a      	b.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006464:	4b65      	ldr	r3, [pc, #404]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d117      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006474:	e014      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006476:	4b61      	ldr	r3, [pc, #388]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d110      	bne.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006486:	e00d      	b.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006488:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006498:	e006      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e004      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 809f 	bne.w	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b2:	4b52      	ldr	r3, [pc, #328]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a51      	ldr	r2, [pc, #324]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fb fd7f 	bl	8001fc0 <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c4:	e00f      	b.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c6:	f7fb fd7b 	bl	8001fc0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d908      	bls.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d4:	4b49      	ldr	r3, [pc, #292]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e4:	e006      	b.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064e6:	4b45      	ldr	r3, [pc, #276]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e9      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x86>
 80064f2:	e000      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80064f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d179      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d116      	bne.n	8006530 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006502:	4b3e      	ldr	r3, [pc, #248]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6892      	ldr	r2, [r2, #8]
 800650e:	0211      	lsls	r1, r2, #8
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68d2      	ldr	r2, [r2, #12]
 8006514:	06d2      	lsls	r2, r2, #27
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	4934      	ldr	r1, [pc, #208]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
 800652e:	e033      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d118      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006536:	4b31      	ldr	r3, [pc, #196]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	4b32      	ldr	r3, [pc, #200]	; (8006604 <RCCEx_PLLSAI1_Config+0x1c4>)
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6892      	ldr	r2, [r2, #8]
 8006542:	0211      	lsls	r1, r2, #8
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6912      	ldr	r2, [r2, #16]
 8006548:	0852      	lsrs	r2, r2, #1
 800654a:	3a01      	subs	r2, #1
 800654c:	0552      	lsls	r2, r2, #21
 800654e:	4311      	orrs	r1, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6852      	ldr	r2, [r2, #4]
 8006554:	3a01      	subs	r2, #1
 8006556:	0112      	lsls	r2, r2, #4
 8006558:	4311      	orrs	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	610b      	str	r3, [r1, #16]
 8006566:	e017      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b26      	ldr	r3, [pc, #152]	; (8006608 <RCCEx_PLLSAI1_Config+0x1c8>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	0211      	lsls	r1, r2, #8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6952      	ldr	r2, [r2, #20]
 800657a:	0852      	lsrs	r2, r2, #1
 800657c:	3a01      	subs	r2, #1
 800657e:	0652      	lsls	r2, r2, #25
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	3a01      	subs	r2, #1
 8006588:	0112      	lsls	r2, r2, #4
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	491a      	ldr	r1, [pc, #104]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fb fd0c 	bl	8001fc0 <HAL_GetTick>
 80065a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065aa:	e00f      	b.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ac:	f7fb fd08 	bl	8001fc0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d908      	bls.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80065ca:	e006      	b.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0e9      	beq.n	80065ac <RCCEx_PLLSAI1_Config+0x16c>
 80065d8:	e000      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80065da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4904      	ldr	r1, [pc, #16]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	07ff800c 	.word	0x07ff800c
 8006604:	ff9f800c 	.word	0xff9f800c
 8006608:	f9ff800c 	.word	0xf9ff800c

0800660c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b03      	cmp	r3, #3
 8006620:	d018      	beq.n	8006654 <RCCEx_PLLSAI2_Config+0x48>
 8006622:	2b03      	cmp	r3, #3
 8006624:	d81f      	bhi.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
 8006626:	2b01      	cmp	r3, #1
 8006628:	d002      	beq.n	8006630 <RCCEx_PLLSAI2_Config+0x24>
 800662a:	2b02      	cmp	r3, #2
 800662c:	d009      	beq.n	8006642 <RCCEx_PLLSAI2_Config+0x36>
 800662e:	e01a      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d117      	bne.n	800666c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006640:	e014      	b.n	800666c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006642:	4b46      	ldr	r3, [pc, #280]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006652:	e00d      	b.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006654:	4b41      	ldr	r3, [pc, #260]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006664:	e006      	b.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
      break;
 800666a:	e004      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006674:	bf00      	nop
  }

  if (status == HAL_OK)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d169      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800667c:	4b37      	ldr	r3, [pc, #220]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a36      	ldr	r2, [pc, #216]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006688:	f7fb fc9a 	bl	8001fc0 <HAL_GetTick>
 800668c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800668e:	e00f      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006690:	f7fb fc96 	bl	8001fc0 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d908      	bls.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ae:	e006      	b.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b0:	4b2a      	ldr	r3, [pc, #168]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e9      	bne.n	8006690 <RCCEx_PLLSAI2_Config+0x84>
 80066bc:	e000      	b.n	80066c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80066be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d144      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066cc:	4b23      	ldr	r3, [pc, #140]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <RCCEx_PLLSAI2_Config+0x154>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	0211      	lsls	r1, r2, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	3a01      	subs	r2, #1
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	491a      	ldr	r1, [pc, #104]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fc5c 	bl	8001fc0 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800670a:	e00f      	b.n	800672c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800670c:	f7fb fc58 	bl	8001fc0 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d908      	bls.n	800672c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800672a:	e006      	b.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0e9      	beq.n	800670c <RCCEx_PLLSAI2_Config+0x100>
 8006738:	e000      	b.n	800673c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800673a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	07ff800c 	.word	0x07ff800c

08006764 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d02d      	beq.n	80067d6 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 800677a:	2b03      	cmp	r3, #3
 800677c:	d835      	bhi.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800677e:	2b01      	cmp	r3, #1
 8006780:	d002      	beq.n	8006788 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d01d      	beq.n	80067c2 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8006786:	e030      	b.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006788:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d12c      	bne.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	e005      	b.n	80067b8 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 80067ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067be:	607b      	str	r3, [r7, #4]
      break;
 80067c0:	e015      	b.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d110      	bne.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80067d0:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 80067d2:	607b      	str	r3, [r7, #4]
      break;
 80067d4:	e00d      	b.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e2:	d108      	bne.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 80067e6:	607b      	str	r3, [r7, #4]
      break;
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f6:	bf00      	nop
  }

  return pllvco;
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	08023858 	.word	0x08023858
 8006810:	00f42400 	.word	0x00f42400
 8006814:	007a1200 	.word	0x007a1200

08006818 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d02d      	beq.n	800688a <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d835      	bhi.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d002      	beq.n	800683c <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8006836:	2b02      	cmp	r3, #2
 8006838:	d01d      	beq.n	8006876 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800683a:	e030      	b.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d12c      	bne.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	e005      	b.n	800686c <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 800686e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006872:	607b      	str	r3, [r7, #4]
      break;
 8006874:	e015      	b.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d110      	bne.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8006886:	607b      	str	r3, [r7, #4]
      break;
 8006888:	e00d      	b.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d108      	bne.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 800689a:	607b      	str	r3, [r7, #4]
      break;
 800689c:	e005      	b.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068aa:	bf00      	nop
  }

  return pllvco;
 80068ac:	687b      	ldr	r3, [r7, #4]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	08023858 	.word	0x08023858
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	007a1200 	.word	0x007a1200

080068cc <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e0:	d10c      	bne.n	80068fc <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068e2:	4b78      	ldr	r3, [pc, #480]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80068ec:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d110      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	e00c      	b.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80068fc:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006906:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690e:	d102      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006910:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006914:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 80cd 	bne.w	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d003      	beq.n	8006930 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692e:	d13b      	bne.n	80069a8 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800693c:	f040 80bb 	bne.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006940:	4b60      	ldr	r3, [pc, #384]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80b4 	beq.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800694e:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	3301      	adds	r3, #1
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006962:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800696e:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	0edb      	lsrs	r3, r3, #27
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 800698c:	2311      	movs	r3, #17
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e001      	b.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8006992:	2307      	movs	r3, #7
 8006994:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	fb03 f202 	mul.w	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069a6:	e086      	b.n	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d003      	beq.n	80069b6 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d109      	bne.n	80069ca <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b6:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d179      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 80069c4:	4b40      	ldr	r3, [pc, #256]	; (8006ac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80069c6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c8:	e076      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d135      	bne.n	8006a3c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80069d0:	4b3c      	ldr	r3, [pc, #240]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d06d      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80069dc:	f7ff fec2 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 80069e0:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	3301      	adds	r3, #1
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a00:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	0edb      	lsrs	r3, r3, #27
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8006a20:	2311      	movs	r3, #17
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e001      	b.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8006a26:	2307      	movs	r3, #7
 8006a28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	fb03 f202 	mul.w	r2, r3, r2
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e03d      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d003      	beq.n	8006a4a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d136      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d030      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8006a56:	f7ff fedf 	bl	8006818 <RCCEx_PLLSAI2_GetVCOFreq>
 8006a5a:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3301      	adds	r3, #1
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	0edb      	lsrs	r3, r3, #27
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006a9a:	2311      	movs	r3, #17
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e001      	b.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006aa0:	2307      	movs	r3, #7
 8006aa2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	fb03 f202 	mul.w	r2, r3, r2
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ab6:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e1da      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10e      	bne.n	8006b06 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a87      	ldr	r2, [pc, #540]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d107      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d103      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e1c6      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa ffc2 	bl	8001aa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9c3 	bl	8006eac <SAI_Disable>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e1b1      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00c      	beq.n	8006b5a <HAL_SAI_Init+0x8e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d80d      	bhi.n	8006b60 <HAL_SAI_Init+0x94>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SAI_Init+0x82>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <HAL_SAI_Init+0x88>
 8006b4c:	e008      	b.n	8006b60 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b52:	e008      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006b54:	2310      	movs	r3, #16
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b58:	e005      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006b5a:	2320      	movs	r3, #32
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b64:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d81d      	bhi.n	8006baa <HAL_SAI_Init+0xde>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <HAL_SAI_Init+0xa8>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b8b 	.word	0x08006b8b
 8006b7c:	08006b93 	.word	0x08006b93
 8006b80:	08006b9b 	.word	0x08006b9b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
      break;
 8006b88:	e012      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	61fb      	str	r3, [r7, #28]
      break;
 8006b90:	e00e      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b96:	61fb      	str	r3, [r7, #28]
      break;
 8006b98:	e00a      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b9e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ba8:	e002      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
      break;
 8006bae:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a55      	ldr	r2, [pc, #340]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_SAI_Init+0xf8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a54      	ldr	r2, [pc, #336]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006bc4:	4a53      	ldr	r2, [pc, #332]	; (8006d14 <HAL_SAI_Init+0x248>)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e002      	b.n	8006bd2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_SAI_Init+0x24c>)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d07e      	beq.n	8006cd8 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_SAI_Init+0x126>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a48      	ldr	r2, [pc, #288]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d104      	bne.n	8006bfc <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006bf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006bf6:	f7fe fc71 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006bfa:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a46      	ldr	r2, [pc, #280]	; (8006d1c <HAL_SAI_Init+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_SAI_Init+0x144>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a45      	ldr	r2, [pc, #276]	; (8006d20 <HAL_SAI_Init+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d104      	bne.n	8006c1a <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c14:	f7fe fc62 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006c18:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c22:	d120      	bne.n	8006c66 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d102      	bne.n	8006c32 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e00a      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d103      	bne.n	8006c42 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e002      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e017      	b.n	8006c96 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c6e:	d101      	bne.n	8006c74 <HAL_SAI_Init+0x1a8>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <HAL_SAI_Init+0x1aa>
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4619      	mov	r1, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c94:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	08da      	lsrs	r2, r3, #3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006ca8:	fba3 2301 	umull	r2, r3, r3, r1
 8006cac:	08da      	lsrs	r2, r3, #3
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	1aca      	subs	r2, r1, r3
 8006cb8:	2a08      	cmp	r2, #8
 8006cba:	d904      	bls.n	8006cc6 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d104      	bne.n	8006cd8 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_SAI_Init+0x21c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d109      	bne.n	8006cfc <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_SAI_Init+0x228>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e001      	b.n	8006cf8 <HAL_SAI_Init+0x22c>
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e017      	b.n	8006d2c <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d111      	bne.n	8006d28 <HAL_SAI_Init+0x25c>
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	e00f      	b.n	8006d2a <HAL_SAI_Init+0x25e>
 8006d0a:	bf00      	nop
 8006d0c:	40015404 	.word	0x40015404
 8006d10:	40015424 	.word	0x40015424
 8006d14:	40015400 	.word	0x40015400
 8006d18:	40015800 	.word	0x40015800
 8006d1c:	40015804 	.word	0x40015804
 8006d20:	40015824 	.word	0x40015824
 8006d24:	cccccccd 	.word	0xcccccccd
 8006d28:	2300      	movs	r3, #0
 8006d2a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_SAI_Init+0x3d0>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	431a      	orrs	r2, r3
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006d64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	051b      	lsls	r3, r3, #20
 8006d78:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d7e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d9c:	f023 030f 	bic.w	r3, r3, #15
 8006da0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_SAI_Init+0x3d4>)
 8006dcc:	400b      	ands	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006de0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006de6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006dec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	3b01      	subs	r3, #1
 8006df4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006df6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68d9      	ldr	r1, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006e0e:	400b      	ands	r3, r1
 8006e10:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_SAI_Init+0x3d8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d119      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10e      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e68:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	f005c010 	.word	0xf005c010
 8006ea0:	fff88000 	.word	0xfff88000
 8006ea4:	40015404 	.word	0x40015404
 8006ea8:	40015400 	.word	0x40015400

08006eac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <SAI_Disable+0x6c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <SAI_Disable+0x70>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	0b1b      	lsrs	r3, r3, #12
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ed6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef2:	e009      	b.n	8006f08 <SAI_Disable+0x5c>
    }
    count--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e7      	bne.n	8006ed8 <SAI_Disable+0x2c>

  return status;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	95cbec1b 	.word	0x95cbec1b

08006f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e095      	b.n	800705e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f42:	d009      	beq.n	8006f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	e005      	b.n	8006f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa fc08 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d902      	bls.n	8006fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006fae:	d007      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	ea42 0103 	orr.w	r1, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f003 0204 	and.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e038      	b.n	80070ee <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7fa fcfd 	bl	8001a90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3308      	adds	r3, #8
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f002 f823 	bl	80090ec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	461a      	mov	r2, r3
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	f002 f8eb 	bl	800928c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6858      	ldr	r0, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	f002 f934 	bl	8009330 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	6892      	ldr	r2, [r2, #8]
 80070d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6892      	ldr	r2, [r2, #8]
 80070dc:	f041 0101 	orr.w	r1, r1, #1
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e049      	b.n	800719c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fa fb79 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f000 fba3 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e04f      	b.n	800725c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a23      	ldr	r2, [pc, #140]	; (8007268 <HAL_TIM_Base_Start_IT+0xc4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01d      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d018      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_TIM_Base_Start_IT+0xc8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_TIM_Base_Start_IT+0xcc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00e      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <HAL_TIM_Base_Start_IT+0xd0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_TIM_Base_Start_IT+0xd4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <HAL_TIM_Base_Start_IT+0xd8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d115      	bne.n	8007246 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_TIM_Base_Start_IT+0xdc>)
 8007222:	4013      	ands	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d015      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d011      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	e008      	b.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e000      	b.n	800725a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00
 8007278:	40013400 	.word	0x40013400
 800727c:	40014000 	.word	0x40014000
 8007280:	00010007 	.word	0x00010007

08007284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e049      	b.n	800732a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f841 	bl	8007332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f000 fadc 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d122      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b02      	cmp	r3, #2
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0202 	mvn.w	r2, #2
 8007372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa5b 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa4d 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa5e 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d122      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d11b      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0204 	mvn.w	r2, #4
 80073c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa31 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 80073e2:	e005      	b.n	80073f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa23 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa34 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d122      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b08      	cmp	r3, #8
 8007410:	d11b      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f06f 0208 	mvn.w	r2, #8
 800741a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa07 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 8007436:	e005      	b.n	8007444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9f9 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa0a 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d122      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b10      	cmp	r3, #16
 8007464:	d11b      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f06f 0210 	mvn.w	r2, #16
 800746e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2208      	movs	r2, #8
 8007474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9dd 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800748a:	e005      	b.n	8007498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9cf 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e0 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10e      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0201 	mvn.w	r2, #1
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7f9 ff01 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ff7b 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ff6e 	bl	8008400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f98e 	bl	800786c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 ff2e 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800759e:	2302      	movs	r3, #2
 80075a0:	e0ff      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b14      	cmp	r3, #20
 80075ae:	f200 80f0 	bhi.w	8007792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007793 	.word	0x08007793
 80075c0:	08007793 	.word	0x08007793
 80075c4:	08007793 	.word	0x08007793
 80075c8:	0800764d 	.word	0x0800764d
 80075cc:	08007793 	.word	0x08007793
 80075d0:	08007793 	.word	0x08007793
 80075d4:	08007793 	.word	0x08007793
 80075d8:	0800768f 	.word	0x0800768f
 80075dc:	08007793 	.word	0x08007793
 80075e0:	08007793 	.word	0x08007793
 80075e4:	08007793 	.word	0x08007793
 80075e8:	080076cf 	.word	0x080076cf
 80075ec:	08007793 	.word	0x08007793
 80075f0:	08007793 	.word	0x08007793
 80075f4:	08007793 	.word	0x08007793
 80075f8:	08007711 	.word	0x08007711
 80075fc:	08007793 	.word	0x08007793
 8007600:	08007793 	.word	0x08007793
 8007604:	08007793 	.word	0x08007793
 8007608:	08007751 	.word	0x08007751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f9ce 	bl	80079b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e0a5      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa3e 	bl	8007ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]
      break;
 800768c:	e084      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 faa7 	bl	8007be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0204 	bic.w	r2, r2, #4
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      break;
 80076cc:	e064      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fb0f 	bl	8007cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	61da      	str	r2, [r3, #28]
      break;
 800770e:	e043      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fb58 	bl	8007dcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0208 	orr.w	r2, r2, #8
 800772a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0204 	bic.w	r2, r2, #4
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800774e:	e023      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fb9c 	bl	8007e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800776a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007790:	e002      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e031      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbc2 	bl	8007f60 <TIM_SlaveTimer_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e018      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007804:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007814:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00f      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3c      	ldr	r2, [pc, #240]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3b      	ldr	r2, [pc, #236]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3a      	ldr	r2, [pc, #232]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d108      	bne.n	80078d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <TIM_Base_SetConfig+0x114>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d01b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d017      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2b      	ldr	r2, [pc, #172]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a28      	ldr	r2, [pc, #160]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00f      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a11      	ldr	r2, [pc, #68]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d007      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	615a      	str	r2, [r3, #20]
}
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40014400 	.word	0x40014400
 80079b0:	40014800 	.word	0x40014800

080079b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f023 0302 	bic.w	r3, r3, #2
 8007a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00f      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2b      	ldr	r2, [pc, #172]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00b      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a29      	ldr	r2, [pc, #164]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a28      	ldr	r2, [pc, #160]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40013400 	.word	0x40013400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400
 8007ad0:	40014800 	.word	0x40014800

08007ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0320 	bic.w	r3, r3, #32
 8007b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC2_SetConfig+0x6c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d10d      	bne.n	8007b5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <TIM_OC2_SetConfig+0x108>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <TIM_OC2_SetConfig+0x10c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a19      	ldr	r2, [pc, #100]	; (8007be4 <TIM_OC2_SetConfig+0x110>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d113      	bne.n	8007bac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000
 8007be0:	40014400 	.word	0x40014400
 8007be4:	40014800 	.word	0x40014800

08007be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a27      	ldr	r2, [pc, #156]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_OC3_SetConfig+0x6a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10d      	bne.n	8007c6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00f      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <TIM_OC3_SetConfig+0x104>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <TIM_OC3_SetConfig+0x108>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a18      	ldr	r2, [pc, #96]	; (8007cf4 <TIM_OC3_SetConfig+0x10c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d113      	bne.n	8007cbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800

08007cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC4_SetConfig+0xc0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC4_SetConfig+0xc4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC4_SetConfig+0xc8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <TIM_OC4_SetConfig+0xcc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <TIM_OC4_SetConfig+0xd0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d109      	bne.n	8007d90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <TIM_OC5_SetConfig+0xb4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00f      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <TIM_OC5_SetConfig+0xb8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <TIM_OC5_SetConfig+0xbc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <TIM_OC5_SetConfig+0xc0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <TIM_OC5_SetConfig+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d109      	bne.n	8007e5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800

08007e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	051b      	lsls	r3, r3, #20
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_OC6_SetConfig+0xb8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00f      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_OC6_SetConfig+0xbc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_OC6_SetConfig+0xc0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_OC6_SetConfig+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_OC6_SetConfig+0xc8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d109      	bne.n	8007f24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	029b      	lsls	r3, r3, #10
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40013400 	.word	0x40013400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400
 8007f5c:	40014800 	.word	0x40014800

08007f60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b70      	cmp	r3, #112	; 0x70
 8007fb0:	d01a      	beq.n	8007fe8 <TIM_SlaveTimer_SetConfig+0x88>
 8007fb2:	2b70      	cmp	r3, #112	; 0x70
 8007fb4:	d860      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d054      	beq.n	8008064 <TIM_SlaveTimer_SetConfig+0x104>
 8007fba:	2b60      	cmp	r3, #96	; 0x60
 8007fbc:	d85c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fbe:	2b50      	cmp	r3, #80	; 0x50
 8007fc0:	d046      	beq.n	8008050 <TIM_SlaveTimer_SetConfig+0xf0>
 8007fc2:	2b50      	cmp	r3, #80	; 0x50
 8007fc4:	d858      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d019      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x9e>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d854      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d055      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	d850      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d051      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d84c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d04d      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d04b      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe6:	e047      	b.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68d9      	ldr	r1, [r3, #12]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f000 f8a6 	bl	8008148 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007ffc:	e040      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b05      	cmp	r3, #5
 8008004:	d101      	bne.n	800800a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e03b      	b.n	8008082 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008030:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
      break;
 800804e:	e017      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	461a      	mov	r2, r3
 800805e:	f000 f814 	bl	800808a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008062:	e00d      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	461a      	mov	r2, r3
 8008072:	f000 f839 	bl	80080e8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008076:	e003      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	e000      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800807e:	bf00      	nop
  }

  return status;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f023 0201 	bic.w	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 030a 	bic.w	r3, r3, #10
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f023 0210 	bic.w	r2, r3, #16
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	031b      	lsls	r3, r3, #12
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e068      	b.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d108      	bne.n	80081e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1e      	ldr	r2, [pc, #120]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01d      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d018      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1a      	ldr	r2, [pc, #104]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a13      	ldr	r2, [pc, #76]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10c      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4313      	orrs	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40014000 	.word	0x40014000

08008298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e087      	b.n	80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a25      	ldr	r2, [pc, #148]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d106      	bne.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d126      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	051b      	lsls	r3, r3, #20
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d106      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e042      	b.n	80084ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 f845 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f82c 	bl	80084b4 <UART_SetConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb20 	bl	8008ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fba7 	bl	8008bf8 <UART_CheckIdleState>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b8:	b08c      	sub	sp, #48	; 0x30
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	431a      	orrs	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4313      	orrs	r3, r2
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4baa      	ldr	r3, [pc, #680]	; (800878c <UART_SetConfig+0x2d8>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a9f      	ldr	r2, [pc, #636]	; (8008790 <UART_SetConfig+0x2dc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800851c:	4313      	orrs	r3, r2
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800852a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008534:	430b      	orrs	r3, r1
 8008536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f023 010f 	bic.w	r1, r3, #15
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a90      	ldr	r2, [pc, #576]	; (8008794 <UART_SetConfig+0x2e0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d125      	bne.n	80085a4 <UART_SetConfig+0xf0>
 8008558:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <UART_SetConfig+0x2e4>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d81a      	bhi.n	800859c <UART_SetConfig+0xe8>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <UART_SetConfig+0xb8>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008585 	.word	0x08008585
 8008578:	08008595 	.word	0x08008595
 800857c:	2301      	movs	r3, #1
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e116      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008584:	2302      	movs	r3, #2
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858a:	e112      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008592:	e10e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859a:	e10a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a2:	e106      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7c      	ldr	r2, [pc, #496]	; (800879c <UART_SetConfig+0x2e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d138      	bne.n	8008620 <UART_SetConfig+0x16c>
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <UART_SetConfig+0x2e4>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f003 030c 	and.w	r3, r3, #12
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d82d      	bhi.n	8008618 <UART_SetConfig+0x164>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x110>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085f9 	.word	0x080085f9
 80085c8:	08008619 	.word	0x08008619
 80085cc:	08008619 	.word	0x08008619
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008609 	.word	0x08008609
 80085d8:	08008619 	.word	0x08008619
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008619 	.word	0x08008619
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008619 	.word	0x08008619
 80085ec:	08008619 	.word	0x08008619
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008611 	.word	0x08008611
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e0d8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e0d4      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e0d0      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e0cc      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e0c8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a5e      	ldr	r2, [pc, #376]	; (80087a0 <UART_SetConfig+0x2ec>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d125      	bne.n	8008676 <UART_SetConfig+0x1c2>
 800862a:	4b5b      	ldr	r3, [pc, #364]	; (8008798 <UART_SetConfig+0x2e4>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d016      	beq.n	8008666 <UART_SetConfig+0x1b2>
 8008638:	2b30      	cmp	r3, #48	; 0x30
 800863a:	d818      	bhi.n	800866e <UART_SetConfig+0x1ba>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d00a      	beq.n	8008656 <UART_SetConfig+0x1a2>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d814      	bhi.n	800866e <UART_SetConfig+0x1ba>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <UART_SetConfig+0x19a>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d008      	beq.n	800865e <UART_SetConfig+0x1aa>
 800864c:	e00f      	b.n	800866e <UART_SetConfig+0x1ba>
 800864e:	2300      	movs	r3, #0
 8008650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008654:	e0ad      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008656:	2302      	movs	r3, #2
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865c:	e0a9      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800865e:	2304      	movs	r3, #4
 8008660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008664:	e0a5      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008666:	2308      	movs	r3, #8
 8008668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866c:	e0a1      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800866e:	2310      	movs	r3, #16
 8008670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008674:	e09d      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a4a      	ldr	r2, [pc, #296]	; (80087a4 <UART_SetConfig+0x2f0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d125      	bne.n	80086cc <UART_SetConfig+0x218>
 8008680:	4b45      	ldr	r3, [pc, #276]	; (8008798 <UART_SetConfig+0x2e4>)
 8008682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800868a:	2bc0      	cmp	r3, #192	; 0xc0
 800868c:	d016      	beq.n	80086bc <UART_SetConfig+0x208>
 800868e:	2bc0      	cmp	r3, #192	; 0xc0
 8008690:	d818      	bhi.n	80086c4 <UART_SetConfig+0x210>
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d00a      	beq.n	80086ac <UART_SetConfig+0x1f8>
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d814      	bhi.n	80086c4 <UART_SetConfig+0x210>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <UART_SetConfig+0x1f0>
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d008      	beq.n	80086b4 <UART_SetConfig+0x200>
 80086a2:	e00f      	b.n	80086c4 <UART_SetConfig+0x210>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e082      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086ac:	2302      	movs	r3, #2
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e07e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086b4:	2304      	movs	r3, #4
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ba:	e07a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086bc:	2308      	movs	r3, #8
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c2:	e076      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086c4:	2310      	movs	r3, #16
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ca:	e072      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <UART_SetConfig+0x2f4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d12a      	bne.n	800872c <UART_SetConfig+0x278>
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <UART_SetConfig+0x2e4>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e4:	d01a      	beq.n	800871c <UART_SetConfig+0x268>
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d81b      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f0:	d00c      	beq.n	800870c <UART_SetConfig+0x258>
 80086f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f6:	d815      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <UART_SetConfig+0x250>
 80086fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008700:	d008      	beq.n	8008714 <UART_SetConfig+0x260>
 8008702:	e00f      	b.n	8008724 <UART_SetConfig+0x270>
 8008704:	2300      	movs	r3, #0
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e052      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800870c:	2302      	movs	r3, #2
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e04e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e04a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008722:	e046      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872a:	e042      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a17      	ldr	r2, [pc, #92]	; (8008790 <UART_SetConfig+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d13a      	bne.n	80087ac <UART_SetConfig+0x2f8>
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <UART_SetConfig+0x2e4>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008744:	d01a      	beq.n	800877c <UART_SetConfig+0x2c8>
 8008746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800874a:	d81b      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008750:	d00c      	beq.n	800876c <UART_SetConfig+0x2b8>
 8008752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008756:	d815      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <UART_SetConfig+0x2b0>
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d008      	beq.n	8008774 <UART_SetConfig+0x2c0>
 8008762:	e00f      	b.n	8008784 <UART_SetConfig+0x2d0>
 8008764:	2300      	movs	r3, #0
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876a:	e022      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800876c:	2302      	movs	r3, #2
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e01e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e01a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e016      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e012      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800878c:	cfff69f3 	.word	0xcfff69f3
 8008790:	40008000 	.word	0x40008000
 8008794:	40013800 	.word	0x40013800
 8008798:	40021000 	.word	0x40021000
 800879c:	40004400 	.word	0x40004400
 80087a0:	40004800 	.word	0x40004800
 80087a4:	40004c00 	.word	0x40004c00
 80087a8:	40005000 	.word	0x40005000
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4ab0      	ldr	r2, [pc, #704]	; (8008a78 <UART_SetConfig+0x5c4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	f040 809b 	bne.w	80088f4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d827      	bhi.n	8008816 <UART_SetConfig+0x362>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x318>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008817 	.word	0x08008817
 80087dc:	08008807 	.word	0x08008807
 80087e0:	08008817 	.word	0x08008817
 80087e4:	08008817 	.word	0x08008817
 80087e8:	08008817 	.word	0x08008817
 80087ec:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f0:	f7fc f9c4 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fc f9d4 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b9e      	ldr	r3, [pc, #632]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fc f907 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8130 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	4a94      	ldr	r2, [pc, #592]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008834:	461a      	mov	r2, r3
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	fbb3 f3f2 	udiv	r3, r3, r2
 800883c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4413      	add	r3, r2
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	d305      	bcc.n	800885a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008860:	e113      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2200      	movs	r2, #0
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	60fa      	str	r2, [r7, #12]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	4a84      	ldr	r2, [pc, #528]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008874:	b29b      	uxth	r3, r3
 8008876:	2200      	movs	r2, #0
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008884:	f7f7 fcdc 	bl	8000240 <__aeabi_uldivmod>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4610      	mov	r0, r2
 800888e:	4619      	mov	r1, r3
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	020b      	lsls	r3, r1, #8
 800889a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800889e:	0202      	lsls	r2, r0, #8
 80088a0:	6979      	ldr	r1, [r7, #20]
 80088a2:	6849      	ldr	r1, [r1, #4]
 80088a4:	0849      	lsrs	r1, r1, #1
 80088a6:	2000      	movs	r0, #0
 80088a8:	460c      	mov	r4, r1
 80088aa:	4605      	mov	r5, r0
 80088ac:	eb12 0804 	adds.w	r8, r2, r4
 80088b0:	eb43 0905 	adc.w	r9, r3, r5
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	469a      	mov	sl, r3
 80088bc:	4693      	mov	fp, r2
 80088be:	4652      	mov	r2, sl
 80088c0:	465b      	mov	r3, fp
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fcbb 	bl	8000240 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4613      	mov	r3, r2
 80088d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d8:	d308      	bcc.n	80088ec <UART_SetConfig+0x438>
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e0:	d204      	bcs.n	80088ec <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0ce      	b.n	8008a8a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088f2:	e0ca      	b.n	8008a8a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d166      	bne.n	80089cc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80088fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008902:	2b08      	cmp	r3, #8
 8008904:	d827      	bhi.n	8008956 <UART_SetConfig+0x4a2>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0x458>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008931 	.word	0x08008931
 8008910:	08008939 	.word	0x08008939
 8008914:	08008941 	.word	0x08008941
 8008918:	08008957 	.word	0x08008957
 800891c:	08008947 	.word	0x08008947
 8008920:	08008957 	.word	0x08008957
 8008924:	08008957 	.word	0x08008957
 8008928:	08008957 	.word	0x08008957
 800892c:	0800894f 	.word	0x0800894f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fc f924 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008936:	e014      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008938:	f7fc f934 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800893e:	e010      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008940:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008944:	e00d      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008946:	f7fc f867 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800894c:	e009      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800894e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008954:	e005      	b.n	8008962 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8090 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	4a44      	ldr	r2, [pc, #272]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008974:	461a      	mov	r2, r3
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	fbb3 f3f2 	udiv	r3, r3, r2
 800897c:	005a      	lsls	r2, r3, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	441a      	add	r2, r3
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	fbb2 f3f3 	udiv	r3, r2, r3
 800898e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d916      	bls.n	80089c4 <UART_SetConfig+0x510>
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d212      	bcs.n	80089c4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f023 030f 	bic.w	r3, r3, #15
 80089a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	8bfb      	ldrh	r3, [r7, #30]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	8bfa      	ldrh	r2, [r7, #30]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	e062      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089ca:	e05e      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d828      	bhi.n	8008a26 <UART_SetConfig+0x572>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x528>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fc f8bc 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a06:	e014      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fc f8cc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a0e:	e010      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a14:	e00d      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fb ffff 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8008a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a30:	bf00      	nop
    }

    if (pclk != 0U)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d028      	beq.n	8008a8a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	441a      	add	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d910      	bls.n	8008a84 <UART_SetConfig+0x5d0>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d20c      	bcs.n	8008a84 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
 8008a74:	e009      	b.n	8008a8a <UART_SetConfig+0x5d6>
 8008a76:	bf00      	nop
 8008a78:	40008000 	.word	0x40008000
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	08023898 	.word	0x08023898
      }
      else
      {
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01a      	beq.n	8008bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb2:	d10a      	bne.n	8008bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b098      	sub	sp, #96	; 0x60
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c08:	f7f9 f9da 	bl	8001fc0 <HAL_GetTick>
 8008c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d12f      	bne.n	8008c7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c24:	2200      	movs	r2, #0
 8008c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f88e 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d022      	beq.n	8008c7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c54:	647b      	str	r3, [r7, #68]	; 0x44
 8008c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e063      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d149      	bne.n	8008d1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c92:	2200      	movs	r2, #0
 8008c94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f857 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03c      	beq.n	8008d1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e6      	bne.n	8008ca4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf6:	61fa      	str	r2, [r7, #28]
 8008cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	617b      	str	r3, [r7, #20]
   return(result);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e5      	bne.n	8008cd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e012      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3758      	adds	r7, #88	; 0x58
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5c:	e049      	b.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d045      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d66:	f7f9 f92b 	bl	8001fc0 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d302      	bcc.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e048      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d031      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d110      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2208      	movs	r2, #8
 8008da2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f838 	bl	8008e1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2208      	movs	r2, #8
 8008dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e029      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dcc:	d111      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f81e 	bl	8008e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e00f      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	bf0c      	ite	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	2300      	movne	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d0a6      	beq.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b095      	sub	sp, #84	; 0x54
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	643b      	str	r3, [r7, #64]	; 0x40
 8008e42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e3      	bne.n	8008e54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d118      	bne.n	8008ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008eda:	bf00      	nop
 8008edc:	3754      	adds	r7, #84	; 0x54
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_UARTEx_DisableFifoMode+0x16>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e027      	b.n	8008f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2224      	movs	r2, #36	; 0x24
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e02d      	b.n	8008fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f84f 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e02d      	b.n	8009048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f811 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	2b00      	cmp	r3, #0
 800905e:	d108      	bne.n	8009072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009070:	e031      	b.n	80090d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009072:	2308      	movs	r3, #8
 8009074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009076:	2308      	movs	r3, #8
 8009078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	0e5b      	lsrs	r3, r3, #25
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	0f5b      	lsrs	r3, r3, #29
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	7b3a      	ldrb	r2, [r7, #12]
 800909e:	4911      	ldr	r1, [pc, #68]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090a0:	5c8a      	ldrb	r2, [r1, r2]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090a6:	7b3a      	ldrb	r2, [r7, #12]
 80090a8:	490f      	ldr	r1, [pc, #60]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090be:	5c8a      	ldrb	r2, [r1, r2]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090c4:	7b7a      	ldrb	r2, [r7, #13]
 80090c6:	4908      	ldr	r1, [pc, #32]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	080238b0 	.word	0x080238b0
 80090e8:	080238b8 	.word	0x080238b8

080090ec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	f023 0101 	bic.w	r1, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d102      	bne.n	800911c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009116:	2340      	movs	r3, #64	; 0x40
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e001      	b.n	8009120 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800912c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009132:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009138:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800913e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009144:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800914a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009150:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009156:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800915c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <FMC_NORSRAM_Init+0x19c>)
 8009190:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009198:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80091a8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80091b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	43db      	mvns	r3, r3
 80091c0:	ea02 0103 	and.w	r1, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4319      	orrs	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091da:	d10c      	bne.n	80091f6 <FMC_NORSRAM_Init+0x10a>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009212:	2b01      	cmp	r3, #1
 8009214:	d12f      	bne.n	8009276 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b04      	cmp	r3, #4
 800922e:	d014      	beq.n	800925a <FMC_NORSRAM_Init+0x16e>
 8009230:	2b04      	cmp	r3, #4
 8009232:	d819      	bhi.n	8009268 <FMC_NORSRAM_Init+0x17c>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <FMC_NORSRAM_Init+0x152>
 8009238:	2b02      	cmp	r3, #2
 800923a:	d007      	beq.n	800924c <FMC_NORSRAM_Init+0x160>
 800923c:	e014      	b.n	8009268 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	621a      	str	r2, [r3, #32]
        break;
 800924a:	e015      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]
        break;
 8009258:	e00e      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	621a      	str	r2, [r3, #32]
        break;
 8009266:	e007      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]
        break;
 8009274:	e000      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8009276:	bf00      	nop

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0008fb7f 	.word	0x0008fb7f

0800928c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	431a      	orrs	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	431a      	orrs	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	431a      	orrs	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	041b      	lsls	r3, r3, #16
 80092c4:	431a      	orrs	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	431a      	orrs	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	3b02      	subs	r3, #2
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	ea42 0103 	orr.w	r1, r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	3201      	adds	r2, #1
 80092e4:	4319      	orrs	r1, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f8:	d113      	bne.n	8009322 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009302:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	3b01      	subs	r3, #1
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009344:	d121      	bne.n	800938a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6819      	ldr	r1, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4319      	orrs	r1, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	4319      	orrs	r1, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	4319      	orrs	r1, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	4319      	orrs	r1, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	430b      	orrs	r3, r1
 800937c:	ea42 0103 	orr.w	r1, r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009388:	e005      	b.n	8009396 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b08b      	sub	sp, #44	; 0x2c
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	613b      	str	r3, [r7, #16]
  return result;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80093ca:	2320      	movs	r3, #32
 80093cc:	e003      	b.n	80093d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	fab3 f383 	clz	r3, r3
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	2103      	movs	r1, #3
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	43db      	mvns	r3, r3
 80093e0:	401a      	ands	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	fa93 f3a3 	rbit	r3, r3
 80093ec:	61fb      	str	r3, [r7, #28]
  return result;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80093f8:	2320      	movs	r3, #32
 80093fa:	e003      	b.n	8009404 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]
}
 8009412:	bf00      	nop
 8009414:	372c      	adds	r7, #44	; 0x2c
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	431a      	orrs	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800944e:	b480      	push	{r7}
 8009450:	b08b      	sub	sp, #44	; 0x2c
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	fa93 f3a3 	rbit	r3, r3
 8009468:	613b      	str	r3, [r7, #16]
  return result;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009474:	2320      	movs	r3, #32
 8009476:	e003      	b.n	8009480 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	fab3 f383 	clz	r3, r3
 800947e:	b2db      	uxtb	r3, r3
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	2103      	movs	r1, #3
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	43db      	mvns	r3, r3
 800948a:	401a      	ands	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	fa93 f3a3 	rbit	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
  return result;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80094a2:	2320      	movs	r3, #32
 80094a4:	e003      	b.n	80094ae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	fab3 f383 	clz	r3, r3
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80094bc:	bf00      	nop
 80094be:	372c      	adds	r7, #44	; 0x2c
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b08b      	sub	sp, #44	; 0x2c
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	fa93 f3a3 	rbit	r3, r3
 80094e2:	613b      	str	r3, [r7, #16]
  return result;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094ee:	2320      	movs	r3, #32
 80094f0:	e003      	b.n	80094fa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	fab3 f383 	clz	r3, r3
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	2103      	movs	r1, #3
 80094fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009502:	43db      	mvns	r3, r3
 8009504:	401a      	ands	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	fa93 f3a3 	rbit	r3, r3
 8009510:	61fb      	str	r3, [r7, #28]
  return result;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800951c:	2320      	movs	r3, #32
 800951e:	e003      	b.n	8009528 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	fab3 f383 	clz	r3, r3
 8009526:	b2db      	uxtb	r3, r3
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	431a      	orrs	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	60da      	str	r2, [r3, #12]
}
 8009536:	bf00      	nop
 8009538:	372c      	adds	r7, #44	; 0x2c
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009542:	b480      	push	{r7}
 8009544:	b08b      	sub	sp, #44	; 0x2c
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	613b      	str	r3, [r7, #16]
  return result;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009568:	2320      	movs	r3, #32
 800956a:	e003      	b.n	8009574 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	fab3 f383 	clz	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	210f      	movs	r1, #15
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	fa93 f3a3 	rbit	r3, r3
 800958a:	61fb      	str	r3, [r7, #28]
  return result;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009596:	2320      	movs	r3, #32
 8009598:	e003      	b.n	80095a2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	431a      	orrs	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80095b0:	bf00      	nop
 80095b2:	372c      	adds	r7, #44	; 0x2c
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08b      	sub	sp, #44	; 0x2c
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	613b      	str	r3, [r7, #16]
  return result;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	210f      	movs	r1, #15
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	fa93 f3a3 	rbit	r3, r3
 8009608:	61fb      	str	r3, [r7, #28]
  return result;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009614:	2320      	movs	r3, #32
 8009616:	e003      	b.n	8009620 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	fab3 f383 	clz	r3, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	fa01 f303 	lsl.w	r3, r1, r3
 8009628:	431a      	orrs	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800962e:	bf00      	nop
 8009630:	372c      	adds	r7, #44	; 0x2c
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	fa93 f3a3 	rbit	r3, r3
 8009650:	60fb      	str	r3, [r7, #12]
  return result;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <LL_GPIO_Init+0x26>
    return 32U;
 800965c:	2320      	movs	r3, #32
 800965e:	e003      	b.n	8009668 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	fab3 f383 	clz	r3, r3
 8009666:	b2db      	uxtb	r3, r3
 8009668:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800966a:	e047      	b.n	80096fc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	2101      	movs	r1, #1
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d039      	beq.n	80096f6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d003      	beq.n	8009692 <LL_GPIO_Init+0x58>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d10d      	bne.n	80096ae <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	461a      	mov	r2, r3
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff fed7 	bl	800944e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	461a      	mov	r2, r3
 80096a6:	69b9      	ldr	r1, [r7, #24]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff feb8 	bl	800941e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	461a      	mov	r2, r3
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff06 	bl	80094c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d111      	bne.n	80096e8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2bff      	cmp	r3, #255	; 0xff
 80096c8:	d807      	bhi.n	80096da <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	461a      	mov	r2, r3
 80096d0:	69b9      	ldr	r1, [r7, #24]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff ff35 	bl	8009542 <LL_GPIO_SetAFPin_0_7>
 80096d8:	e006      	b.n	80096e8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	69b9      	ldr	r1, [r7, #24]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff ff6a 	bl	80095bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69b9      	ldr	r1, [r7, #24]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fe57 	bl	80093a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1b0      	bne.n	800966c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800971c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009720:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	b29b      	uxth	r3, r3
 800972e:	43db      	mvns	r3, r3
 8009730:	b29b      	uxth	r3, r3
 8009732:	4013      	ands	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800974a:	b084      	sub	sp, #16
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	f107 0014 	add.w	r0, r7, #20
 8009758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	b004      	add	sp, #16
 800978a:	4770      	bx	lr

0800978c <__NVIC_SetPriority>:
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979c:	2b00      	cmp	r3, #0
 800979e:	db0a      	blt.n	80097b6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	490c      	ldr	r1, [pc, #48]	; (80097d8 <__NVIC_SetPriority+0x4c>)
 80097a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097aa:	0152      	lsls	r2, r2, #5
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	440b      	add	r3, r1
 80097b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097b4:	e00a      	b.n	80097cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4908      	ldr	r1, [pc, #32]	; (80097dc <__NVIC_SetPriority+0x50>)
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	f003 030f 	and.w	r3, r3, #15
 80097c2:	3b04      	subs	r3, #4
 80097c4:	0152      	lsls	r2, r2, #5
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	440b      	add	r3, r1
 80097ca:	761a      	strb	r2, [r3, #24]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000e100 	.word	0xe000e100
 80097dc:	e000ed00 	.word	0xe000ed00

080097e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <SysTick_Handler+0x1c>)
 80097e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097e8:	f002 f880 	bl	800b8ec <xTaskGetSchedulerState>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d001      	beq.n	80097f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097f2:	f002 fdc3 	bl	800c37c <xPortSysTickHandler>
  }
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	e000e010 	.word	0xe000e010

08009800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009804:	2100      	movs	r1, #0
 8009806:	f06f 0004 	mvn.w	r0, #4
 800980a:	f7ff ffbf 	bl	800978c <__NVIC_SetPriority>
#endif
}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800981a:	f3ef 8305 	mrs	r3, IPSR
 800981e:	603b      	str	r3, [r7, #0]
  return(result);
 8009820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009826:	f06f 0305 	mvn.w	r3, #5
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	e00c      	b.n	8009848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <osKernelInitialize+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009836:	4b08      	ldr	r3, [pc, #32]	; (8009858 <osKernelInitialize+0x44>)
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800983c:	2300      	movs	r3, #0
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e002      	b.n	8009848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009848:	687b      	ldr	r3, [r7, #4]
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2001cb08 	.word	0x2001cb08

0800985c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009862:	f3ef 8305 	mrs	r3, IPSR
 8009866:	603b      	str	r3, [r7, #0]
  return(result);
 8009868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800986e:	f06f 0305 	mvn.w	r3, #5
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	e010      	b.n	8009898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <osKernelStart+0x48>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d109      	bne.n	8009892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800987e:	f7ff ffbf 	bl	8009800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009882:	4b08      	ldr	r3, [pc, #32]	; (80098a4 <osKernelStart+0x48>)
 8009884:	2202      	movs	r2, #2
 8009886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009888:	f001 fc3e 	bl	800b108 <vTaskStartScheduler>
      stat = osOK;
 800988c:	2300      	movs	r3, #0
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	e002      	b.n	8009898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009898:	687b      	ldr	r3, [r7, #4]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2001cb08 	.word	0x2001cb08

080098a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af04      	add	r7, sp, #16
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b8:	f3ef 8305 	mrs	r3, IPSR
 80098bc:	617b      	str	r3, [r7, #20]
  return(result);
 80098be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d17e      	bne.n	80099c2 <osThreadNew+0x11a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d07b      	beq.n	80099c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098ce:	2318      	movs	r3, #24
 80098d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d045      	beq.n	800996e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <osThreadNew+0x48>
        name = attr->name;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <osThreadNew+0x6e>
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2b38      	cmp	r3, #56	; 0x38
 8009908:	d805      	bhi.n	8009916 <osThreadNew+0x6e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <osThreadNew+0x72>
        return (NULL);
 8009916:	2300      	movs	r3, #0
 8009918:	e054      	b.n	80099c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	089b      	lsrs	r3, r3, #2
 8009928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <osThreadNew+0xa8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2bbb      	cmp	r3, #187	; 0xbb
 8009938:	d90a      	bls.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800993e:	2b00      	cmp	r3, #0
 8009940:	d006      	beq.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <osThreadNew+0xa8>
        mem = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e010      	b.n	8009972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <osThreadNew+0xca>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d108      	bne.n	8009972 <osThreadNew+0xca>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <osThreadNew+0xca>
          mem = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	61bb      	str	r3, [r7, #24]
 800996c:	e001      	b.n	8009972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d110      	bne.n	800999a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a3a      	ldr	r2, [r7, #32]
 800998c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f001 fa04 	bl	800ad9c <xTaskCreateStatic>
 8009994:	4603      	mov	r3, r0
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	e013      	b.n	80099c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d110      	bne.n	80099c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f001 fa37 	bl	800ae26 <xTaskCreate>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d001      	beq.n	80099c2 <osThreadNew+0x11a>
            hTask = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099c2:	693b      	ldr	r3, [r7, #16]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	; 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d4:	f3ef 8305 	mrs	r3, IPSR
 80099d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <osDelay+0x1c>
    stat = osErrorISR;
 80099e0:	f06f 0305 	mvn.w	r3, #5
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e007      	b.n	80099f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fb64 	bl	800b0c0 <vTaskDelay>
    }
  }

  return (stat);
 80099f8:	68fb      	ldr	r3, [r7, #12]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b08a      	sub	sp, #40	; 0x28
 8009a06:	af02      	add	r7, sp, #8
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a12:	f3ef 8305 	mrs	r3, IPSR
 8009a16:	613b      	str	r3, [r7, #16]
  return(result);
 8009a18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d175      	bne.n	8009b0a <osSemaphoreNew+0x108>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d072      	beq.n	8009b0a <osSemaphoreNew+0x108>
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d86e      	bhi.n	8009b0a <osSemaphoreNew+0x108>
    mem = -1;
 8009a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d015      	beq.n	8009a64 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <osSemaphoreNew+0x4c>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	2b4f      	cmp	r3, #79	; 0x4f
 8009a46:	d902      	bls.n	8009a4e <osSemaphoreNew+0x4c>
        mem = 1;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e00c      	b.n	8009a68 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d108      	bne.n	8009a68 <osSemaphoreNew+0x66>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <osSemaphoreNew+0x66>
          mem = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e001      	b.n	8009a68 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d04c      	beq.n	8009b0a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d128      	bne.n	8009ac8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10a      	bne.n	8009a92 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2203      	movs	r2, #3
 8009a82:	9200      	str	r2, [sp, #0]
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f000 fb3b 	bl	800a104 <xQueueGenericCreateStatic>
 8009a8e:	61f8      	str	r0, [r7, #28]
 8009a90:	e005      	b.n	8009a9e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a92:	2203      	movs	r2, #3
 8009a94:	2100      	movs	r1, #0
 8009a96:	2001      	movs	r0, #1
 8009a98:	f000 fb84 	bl	800a1a4 <xQueueGenericCreate>
 8009a9c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d022      	beq.n	8009aea <osSemaphoreNew+0xe8>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01f      	beq.n	8009aea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	69f8      	ldr	r0, [r7, #28]
 8009ab2:	f000 fc16 	bl	800a2e2 <xQueueGenericSend>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d016      	beq.n	8009aea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009abc:	69f8      	ldr	r0, [r7, #28]
 8009abe:	f000 ffa1 	bl	800aa04 <vQueueDelete>
            hSemaphore = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e010      	b.n	8009aea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d108      	bne.n	8009ae0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fbb9 	bl	800a24e <xQueueCreateCountingSemaphoreStatic>
 8009adc:	61f8      	str	r0, [r7, #28]
 8009ade:	e004      	b.n	8009aea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fbda 	bl	800a29c <xQueueCreateCountingSemaphore>
 8009ae8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <osSemaphoreNew+0xfc>
          name = attr->name;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	69f8      	ldr	r0, [r7, #28]
 8009b06:	f001 f8c1 	bl	800ac8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009b2c:	f06f 0303 	mvn.w	r3, #3
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e035      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01e      	beq.n	8009b7e <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009b46:	f06f 0303 	mvn.w	r3, #3
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	e028      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
    }
    else {
      yield = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	461a      	mov	r2, r3
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 fef4 	bl	800a948 <xQueueReceiveFromISR>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d003      	beq.n	8009b6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b66:	f06f 0302 	mvn.w	r3, #2
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e018      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d015      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
 8009b74:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <osSemaphoreAcquire+0x98>)
 8009b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e010      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6938      	ldr	r0, [r7, #16]
 8009b82:	f000 fe04 	bl	800a78e <xQueueSemaphoreTake>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d009      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
      if (timeout != 0U) {
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <osSemaphoreAcquire+0x86>
        stat = osErrorTimeout;
 8009b92:	f06f 0301 	mvn.w	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e002      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        stat = osErrorResource;
 8009b9a:	f06f 0302 	mvn.w	r3, #2
 8009b9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009bc6:	f06f 0303 	mvn.w	r3, #3
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e028      	b.n	8009c20 <osSemaphoreRelease+0x70>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d016      	beq.n	8009c08 <osSemaphoreRelease+0x58>
    yield = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	4619      	mov	r1, r3
 8009be4:	6938      	ldr	r0, [r7, #16]
 8009be6:	f000 fcb6 	bl	800a556 <xQueueGiveFromISR>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d003      	beq.n	8009bf8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009bf0:	f06f 0302 	mvn.w	r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
 8009bf6:	e013      	b.n	8009c20 <osSemaphoreRelease+0x70>
    } else {
      portYIELD_FROM_ISR (yield);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d010      	beq.n	8009c20 <osSemaphoreRelease+0x70>
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <osSemaphoreRelease+0x7c>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e00b      	b.n	8009c20 <osSemaphoreRelease+0x70>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6938      	ldr	r0, [r7, #16]
 8009c10:	f000 fb67 	bl	800a2e2 <xQueueGenericSend>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <osSemaphoreRelease+0x70>
      stat = osErrorResource;
 8009c1a:	f06f 0302 	mvn.w	r3, #2
 8009c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c20:	697b      	ldr	r3, [r7, #20]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	613b      	str	r3, [r7, #16]
  return(result);
 8009c46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d15f      	bne.n	8009d0c <osMessageQueueNew+0xdc>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d059      	beq.n	8009d0c <osMessageQueueNew+0xdc>
    mem = -1;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <osMessageQueueNew+0x62>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b4f      	cmp	r3, #79	; 0x4f
 8009c72:	d90e      	bls.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d302      	bcc.n	8009c92 <osMessageQueueNew+0x62>
        mem = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	e014      	b.n	8009cbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d110      	bne.n	8009cbc <osMessageQueueNew+0x8c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10c      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <osMessageQueueNew+0x8c>
          mem = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e001      	b.n	8009cbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10b      	bne.n	8009cda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	9100      	str	r1, [sp, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fa17 	bl	800a104 <xQueueGenericCreateStatic>
 8009cd6:	61f8      	str	r0, [r7, #28]
 8009cd8:	e008      	b.n	8009cec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d105      	bne.n	8009cec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa5d 	bl	800a1a4 <xQueueGenericCreate>
 8009cea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e001      	b.n	8009d04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	69f8      	ldr	r0, [r7, #28]
 8009d08:	f000 ffc0 	bl	800ac8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d30:	f3ef 8305 	mrs	r3, IPSR
 8009d34:	617b      	str	r3, [r7, #20]
  return(result);
 8009d36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d024      	beq.n	8009d86 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009d4e:	f06f 0303 	mvn.w	r3, #3
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e034      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d5a:	f107 0210 	add.w	r2, r7, #16
 8009d5e:	2300      	movs	r3, #0
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	69b8      	ldr	r0, [r7, #24]
 8009d64:	f000 fb86 	bl	800a474 <xQueueGenericSendFromISR>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d003      	beq.n	8009d76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009d6e:	f06f 0302 	mvn.w	r3, #2
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e024      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d021      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <osMessageQueuePut+0xb4>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e01c      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <osMessageQueuePut+0x7a>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8009d92:	f06f 0303 	mvn.w	r3, #3
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e012      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f000 fa9e 	bl	800a2e2 <xQueueGenericSend>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d009      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 8009db2:	f06f 0301 	mvn.w	r3, #1
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e002      	b.n	8009dc0 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de6:	f3ef 8305 	mrs	r3, IPSR
 8009dea:	617b      	str	r3, [r7, #20]
  return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d024      	beq.n	8009e3c <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e04:	f06f 0303 	mvn.w	r3, #3
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e033      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      yield = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e10:	f107 0310 	add.w	r3, r7, #16
 8009e14:	461a      	mov	r2, r3
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	69b8      	ldr	r0, [r7, #24]
 8009e1a:	f000 fd95 	bl	800a948 <xQueueReceiveFromISR>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d003      	beq.n	8009e2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009e24:	f06f 0302 	mvn.w	r3, #2
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	e023      	b.n	8009e74 <osMessageQueueGet+0xa4>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d020      	beq.n	8009e74 <osMessageQueueGet+0xa4>
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <osMessageQueueGet+0xb0>)
 8009e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e01b      	b.n	8009e74 <osMessageQueueGet+0xa4>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <osMessageQueueGet+0x78>
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d103      	bne.n	8009e50 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8009e48:	f06f 0303 	mvn.w	r3, #3
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e011      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f000 fbe1 	bl	800a61c <xQueueReceive>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d009      	beq.n	8009e74 <osMessageQueueGet+0xa4>
        if (timeout != 0U) {
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <osMessageQueueGet+0x9e>
          stat = osErrorTimeout;
 8009e66:	f06f 0301 	mvn.w	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e002      	b.n	8009e74 <osMessageQueueGet+0xa4>
        } else {
          stat = osErrorResource;
 8009e6e:	f06f 0302 	mvn.w	r3, #2
 8009e72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8009e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	2001cb0c 	.word	0x2001cb0c
 8009eb4:	2001cbc8 	.word	0x2001cbc8

08009eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8009ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ed6:	601a      	str	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	2001cdc8 	.word	0x2001cdc8
 8009ee8:	2001ce84 	.word	0x2001ce84

08009eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0208 	add.w	r2, r3, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 0208 	add.w	r2, r3, #8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d103      	bne.n	8009fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e00c      	b.n	8009fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <vListInsert+0x2e>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d2f6      	bcs.n	8009fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6892      	ldr	r2, [r2, #8]
 800a016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6852      	ldr	r2, [r2, #4]
 800a020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d103      	bne.n	800a034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <xQueueGenericReset+0x1a>
 800a068:	f002 fa8e 	bl	800c588 <ulSetInterruptMask>
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800a06e:	f002 f959 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	22ff      	movs	r2, #255	; 0xff
 800a0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10e      	bne.n	800a0e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d014      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3310      	adds	r3, #16
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fa71 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00c      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0dc:	f002 f910 	bl	800c300 <vPortYield>
 800a0e0:	e009      	b.n	800a0f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff ff00 	bl	8009eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fefb 	bl	8009eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0f6:	f002 f927 	bl	800c348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0fa:	2301      	movs	r3, #1
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <xQueueGenericCreateStatic+0x1a>
 800a118:	f002 fa36 	bl	800c588 <ulSetInterruptMask>
 800a11c:	e7fe      	b.n	800a11c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xQueueGenericCreateStatic+0x26>
 800a124:	f002 fa30 	bl	800c588 <ulSetInterruptMask>
 800a128:	e7fe      	b.n	800a128 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <xQueueGenericCreateStatic+0x32>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <xQueueGenericCreateStatic+0x36>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <xQueueGenericCreateStatic+0x38>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <xQueueGenericCreateStatic+0x42>
 800a140:	f002 fa22 	bl	800c588 <ulSetInterruptMask>
 800a144:	e7fe      	b.n	800a144 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <xQueueGenericCreateStatic+0x4e>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <xQueueGenericCreateStatic+0x52>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <xQueueGenericCreateStatic+0x54>
 800a156:	2300      	movs	r3, #0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <xQueueGenericCreateStatic+0x5e>
 800a15c:	f002 fa14 	bl	800c588 <ulSetInterruptMask>
 800a160:	e7fe      	b.n	800a160 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a162:	2350      	movs	r3, #80	; 0x50
 800a164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b50      	cmp	r3, #80	; 0x50
 800a16a:	d002      	beq.n	800a172 <xQueueGenericCreateStatic+0x6e>
 800a16c:	f002 fa0c 	bl	800c588 <ulSetInterruptMask>
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a172:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a186:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4613      	mov	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f837 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a19a:	697b      	ldr	r3, [r7, #20]
	}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xQueueGenericCreate+0x1a>
 800a1b8:	f002 f9e6 	bl	800c588 <ulSetInterruptMask>
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	3350      	adds	r3, #80	; 0x50
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 fa3b 	bl	800c648 <pvPortMalloc>
 800a1d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d011      	beq.n	800a1fe <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3350      	adds	r3, #80	; 0x50
 800a1e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1ec:	79fa      	ldrb	r2, [r7, #7]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f805 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a200:	4618      	mov	r0, r3
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a236:	2101      	movs	r1, #1
 800a238:	69b8      	ldr	r0, [r7, #24]
 800a23a:	f7ff ff0b 	bl	800a054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af02      	add	r7, sp, #8
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xQueueCreateCountingSemaphoreStatic+0x18>
 800a260:	f002 f992 	bl	800c588 <ulSetInterruptMask>
 800a264:	e7fe      	b.n	800a264 <xQueueCreateCountingSemaphoreStatic+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d902      	bls.n	800a274 <xQueueCreateCountingSemaphoreStatic+0x26>
 800a26e:	f002 f98b 	bl	800c588 <ulSetInterruptMask>
 800a272:	e7fe      	b.n	800a272 <xQueueCreateCountingSemaphoreStatic+0x24>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a274:	2302      	movs	r3, #2
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff ff40 	bl	800a104 <xQueueGenericCreateStatic>
 800a284:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a292:	697b      	ldr	r3, [r7, #20]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <xQueueCreateCountingSemaphore+0x16>
 800a2ac:	f002 f96c 	bl	800c588 <ulSetInterruptMask>
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d902      	bls.n	800a2c0 <xQueueCreateCountingSemaphore+0x24>
 800a2ba:	f002 f965 	bl	800c588 <ulSetInterruptMask>
 800a2be:	e7fe      	b.n	800a2be <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff6d 	bl	800a1a4 <xQueueGenericCreate>
 800a2ca:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
	}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <xQueueGenericSend+0x22>
 800a2fe:	f002 f943 	bl	800c588 <ulSetInterruptMask>
 800a302:	e7fe      	b.n	800a302 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <xQueueGenericSend+0x30>
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <xQueueGenericSend+0x34>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <xQueueGenericSend+0x36>
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <xQueueGenericSend+0x40>
 800a31c:	f002 f934 	bl	800c588 <ulSetInterruptMask>
 800a320:	e7fe      	b.n	800a320 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d103      	bne.n	800a330 <xQueueGenericSend+0x4e>
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <xQueueGenericSend+0x52>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <xQueueGenericSend+0x54>
 800a334:	2300      	movs	r3, #0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <xQueueGenericSend+0x5e>
 800a33a:	f002 f925 	bl	800c588 <ulSetInterruptMask>
 800a33e:	e7fe      	b.n	800a33e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a340:	f001 fad4 	bl	800b8ec <xTaskGetSchedulerState>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <xQueueGenericSend+0x6e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueGenericSend+0x72>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueGenericSend+0x74>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <xQueueGenericSend+0x7e>
 800a35a:	f002 f915 	bl	800c588 <ulSetInterruptMask>
 800a35e:	e7fe      	b.n	800a35e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a360:	f001 ffe0 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <xQueueGenericSend+0x94>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d11d      	bne.n	800a3b2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	6a38      	ldr	r0, [r7, #32]
 800a37c:	f000 fb75 	bl	800aa6a <prvCopyDataToQueue>
 800a380:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 f912 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a39a:	f001 ffb1 	bl	800c300 <vPortYield>
 800a39e:	e004      	b.n	800a3aa <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3a6:	f001 ffab 	bl	800c300 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3aa:	f001 ffcd 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e05c      	b.n	800a46c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3b8:	f001 ffc6 	bl	800c348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e055      	b.n	800a46c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3c6:	f107 0314 	add.w	r3, r7, #20
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f950 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3d4:	f001 ffb8 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3d8:	f000 fef6 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3dc:	f001 ffa2 	bl	800c324 <vPortEnterCritical>
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d103      	bne.n	800a3f6 <xQueueGenericSend+0x114>
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d103      	bne.n	800a40c <xQueueGenericSend+0x12a>
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a40c:	f001 ff9c 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a410:	1d3a      	adds	r2, r7, #4
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 f93f 	bl	800b69c <xTaskCheckForTimeOut>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11d      	bne.n	800a460 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a424:	6a38      	ldr	r0, [r7, #32]
 800a426:	f000 fc18 	bl	800ac5a <prvIsQueueFull>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	3310      	adds	r3, #16
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f87d 	bl	800b538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a43e:	6a38      	ldr	r0, [r7, #32]
 800a440:	f000 fba3 	bl	800ab8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a444:	f000 fece 	bl	800b1e4 <xTaskResumeAll>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d188      	bne.n	800a360 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800a44e:	f001 ff57 	bl	800c300 <vPortYield>
 800a452:	e785      	b.n	800a360 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a454:	6a38      	ldr	r0, [r7, #32]
 800a456:	f000 fb98 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45a:	f000 fec3 	bl	800b1e4 <xTaskResumeAll>
 800a45e:	e77f      	b.n	800a360 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a460:	6a38      	ldr	r0, [r7, #32]
 800a462:	f000 fb92 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a466:	f000 febd 	bl	800b1e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	; 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	; 0x28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <xQueueGenericSendFromISR+0x1e>
 800a48c:	f002 f87c 	bl	800c588 <ulSetInterruptMask>
 800a490:	e7fe      	b.n	800a490 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x2c>
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x30>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xQueueGenericSendFromISR+0x32>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <xQueueGenericSendFromISR+0x3c>
 800a4aa:	f002 f86d 	bl	800c588 <ulSetInterruptMask>
 800a4ae:	e7fe      	b.n	800a4ae <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d103      	bne.n	800a4be <xQueueGenericSendFromISR+0x4a>
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <xQueueGenericSendFromISR+0x4e>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xQueueGenericSendFromISR+0x50>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <xQueueGenericSendFromISR+0x5a>
 800a4c8:	f002 f85e 	bl	800c588 <ulSetInterruptMask>
 800a4cc:	e7fe      	b.n	800a4cc <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ce:	f002 f85b 	bl	800c588 <ulSetInterruptMask>
 800a4d2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <xQueueGenericSendFromISR+0x72>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d12d      	bne.n	800a542 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ec:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	6a38      	ldr	r0, [r7, #32]
 800a4fa:	f000 fab6 	bl	800aa6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a506:	d112      	bne.n	800a52e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d015      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	3324      	adds	r3, #36	; 0x24
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f84f 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00d      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e006      	b.n	800a53c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a52e:	7efb      	ldrb	r3, [r7, #27]
 800a530:	3301      	adds	r3, #1
 800a532:	b2db      	uxtb	r3, r3
 800a534:	b25a      	sxtb	r2, r3
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a540:	e001      	b.n	800a546 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a542:	2300      	movs	r3, #0
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a546:	69f8      	ldr	r0, [r7, #28]
 800a548:	f002 f82b 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3728      	adds	r7, #40	; 0x28
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b088      	sub	sp, #32
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <xQueueGiveFromISR+0x1a>
 800a56a:	f002 f80d 	bl	800c588 <ulSetInterruptMask>
 800a56e:	e7fe      	b.n	800a56e <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <xQueueGiveFromISR+0x28>
 800a578:	f002 f806 	bl	800c588 <ulSetInterruptMask>
 800a57c:	e7fe      	b.n	800a57c <xQueueGiveFromISR+0x26>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueGiveFromISR+0x38>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueGiveFromISR+0x3c>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGiveFromISR+0x3e>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <xQueueGiveFromISR+0x48>
 800a598:	f001 fff6 	bl	800c588 <ulSetInterruptMask>
 800a59c:	e7fe      	b.n	800a59c <xQueueGiveFromISR+0x46>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a59e:	f001 fff3 	bl	800c588 <ulSetInterruptMask>
 800a5a2:	6178      	str	r0, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d229      	bcs.n	800a608 <xQueueGiveFromISR+0xb2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ba:	73fb      	strb	r3, [r7, #15]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d112      	bne.n	800a5f4 <xQueueGiveFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d015      	beq.n	800a602 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	3324      	adds	r3, #36	; 0x24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 ffec 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00d      	beq.n	800a602 <xQueueGiveFromISR+0xac>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <xQueueGiveFromISR+0xac>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e006      	b.n	800a602 <xQueueGiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	b25a      	sxtb	r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a602:	2301      	movs	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e001      	b.n	800a60c <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f001 ffc8 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a612:	69fb      	ldr	r3, [r7, #28]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <xQueueReceive+0x20>
 800a636:	f001 ffa7 	bl	800c588 <ulSetInterruptMask>
 800a63a:	e7fe      	b.n	800a63a <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueReceive+0x2e>
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueReceive+0x32>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueReceive+0x34>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueReceive+0x3e>
 800a654:	f001 ff98 	bl	800c588 <ulSetInterruptMask>
 800a658:	e7fe      	b.n	800a658 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a65a:	f001 f947 	bl	800b8ec <xTaskGetSchedulerState>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <xQueueReceive+0x4e>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <xQueueReceive+0x52>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <xQueueReceive+0x54>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueReceive+0x5e>
 800a674:	f001 ff88 	bl	800c588 <ulSetInterruptMask>
 800a678:	e7fe      	b.n	800a678 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67a:	f001 fe53 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d019      	beq.n	800a6be <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	6a38      	ldr	r0, [r7, #32]
 800a68e:	f000 fa56 	bl	800ab3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 ff86 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6b2:	f001 fe25 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b6:	f001 fe47 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e063      	b.n	800a786 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d103      	bne.n	800a6cc <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c4:	f001 fe40 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e05c      	b.n	800a786 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d2:	f107 0314 	add.w	r3, r7, #20
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ffca 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e0:	f001 fe32 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e4:	f000 fd70 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e8:	f001 fe1c 	bl	800c324 <vPortEnterCritical>
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d103      	bne.n	800a702 <xQueueReceive+0xe6>
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueReceive+0xfc>
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a718:	f001 fe16 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71c:	1d3a      	adds	r2, r7, #4
 800a71e:	f107 0314 	add.w	r3, r7, #20
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f000 ffb9 	bl	800b69c <xTaskCheckForTimeOut>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d11d      	bne.n	800a76c <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a730:	6a38      	ldr	r0, [r7, #32]
 800a732:	f000 fa7c 	bl	800ac2e <prvIsQueueEmpty>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d011      	beq.n	800a760 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f000 fef7 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a74a:	6a38      	ldr	r0, [r7, #32]
 800a74c:	f000 fa1d 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a750:	f000 fd48 	bl	800b1e4 <xTaskResumeAll>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d18f      	bne.n	800a67a <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800a75a:	f001 fdd1 	bl	800c300 <vPortYield>
 800a75e:	e78c      	b.n	800a67a <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a760:	6a38      	ldr	r0, [r7, #32]
 800a762:	f000 fa12 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a766:	f000 fd3d 	bl	800b1e4 <xTaskResumeAll>
 800a76a:	e786      	b.n	800a67a <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a76c:	6a38      	ldr	r0, [r7, #32]
 800a76e:	f000 fa0c 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a772:	f000 fd37 	bl	800b1e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a776:	6a38      	ldr	r0, [r7, #32]
 800a778:	f000 fa59 	bl	800ac2e <prvIsQueueEmpty>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f43f af7b 	beq.w	800a67a <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a786:	4618      	mov	r0, r3
 800a788:	3728      	adds	r7, #40	; 0x28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08a      	sub	sp, #40	; 0x28
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <xQueueSemaphoreTake+0x22>
 800a7aa:	f001 feed 	bl	800c588 <ulSetInterruptMask>
 800a7ae:	e7fe      	b.n	800a7ae <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <xQueueSemaphoreTake+0x30>
 800a7b8:	f001 fee6 	bl	800c588 <ulSetInterruptMask>
 800a7bc:	e7fe      	b.n	800a7bc <xQueueSemaphoreTake+0x2e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7be:	f001 f895 	bl	800b8ec <xTaskGetSchedulerState>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <xQueueSemaphoreTake+0x40>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <xQueueSemaphoreTake+0x44>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <xQueueSemaphoreTake+0x46>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <xQueueSemaphoreTake+0x50>
 800a7d8:	f001 fed6 	bl	800c588 <ulSetInterruptMask>
 800a7dc:	e7fe      	b.n	800a7dc <xQueueSemaphoreTake+0x4e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7de:	f001 fda1 	bl	800c324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d01e      	beq.n	800a82c <xQueueSemaphoreTake+0x9e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <xQueueSemaphoreTake+0x7a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7fe:	f001 f9cb 	bl	800bb98 <pvTaskIncrementMutexHeldCount>
 800a802:	4602      	mov	r2, r0
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3310      	adds	r3, #16
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fecf 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a820:	f001 fd6e 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a824:	f001 fd90 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a828:	2301      	movs	r3, #1
 800a82a:	e089      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <xQueueSemaphoreTake+0xb8>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <xQueueSemaphoreTake+0xb0>
 800a838:	f001 fea6 	bl	800c588 <ulSetInterruptMask>
 800a83c:	e7fe      	b.n	800a83c <xQueueSemaphoreTake+0xae>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a83e:	f001 fd83 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a842:	2300      	movs	r3, #0
 800a844:	e07c      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a84c:	f107 030c 	add.w	r3, r7, #12
 800a850:	4618      	mov	r0, r3
 800a852:	f000 ff0d 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a856:	2301      	movs	r3, #1
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85a:	f001 fd75 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a85e:	f000 fcb3 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a862:	f001 fd5f 	bl	800c324 <vPortEnterCritical>
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d103      	bne.n	800a87c <xQueueSemaphoreTake+0xee>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a882:	b25b      	sxtb	r3, r3
 800a884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a888:	d103      	bne.n	800a892 <xQueueSemaphoreTake+0x104>
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a892:	f001 fd59 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a896:	463a      	mov	r2, r7
 800a898:	f107 030c 	add.w	r3, r7, #12
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fefc 	bl	800b69c <xTaskCheckForTimeOut>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12c      	bne.n	800a904 <xQueueSemaphoreTake+0x176>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8aa:	69f8      	ldr	r0, [r7, #28]
 800a8ac:	f000 f9bf 	bl	800ac2e <prvIsQueueEmpty>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d020      	beq.n	800a8f8 <xQueueSemaphoreTake+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <xQueueSemaphoreTake+0x144>
					{
						taskENTER_CRITICAL();
 800a8be:	f001 fd31 	bl	800c324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f82e 	bl	800b928 <xTaskPriorityInherit>
 800a8cc:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a8ce:	f001 fd3b 	bl	800c348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3324      	adds	r3, #36	; 0x24
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fe2c 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8e0:	69f8      	ldr	r0, [r7, #28]
 800a8e2:	f000 f952 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8e6:	f000 fc7d 	bl	800b1e4 <xTaskResumeAll>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f af76 	bne.w	800a7de <xQueueSemaphoreTake+0x50>
				{
					portYIELD_WITHIN_API();
 800a8f2:	f001 fd05 	bl	800c300 <vPortYield>
 800a8f6:	e772      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8f8:	69f8      	ldr	r0, [r7, #28]
 800a8fa:	f000 f946 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8fe:	f000 fc71 	bl	800b1e4 <xTaskResumeAll>
 800a902:	e76c      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a904:	69f8      	ldr	r0, [r7, #28]
 800a906:	f000 f940 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a90a:	f000 fc6b 	bl	800b1e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f000 f98d 	bl	800ac2e <prvIsQueueEmpty>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f43f af61 	beq.w	800a7de <xQueueSemaphoreTake+0x50>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 800a922:	f001 fcff 	bl	800c324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a926:	69f8      	ldr	r0, [r7, #28]
 800a928:	f000 f887 	bl	800aa3a <prvGetDisinheritPriorityAfterTimeout>
 800a92c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	6979      	ldr	r1, [r7, #20]
 800a934:	4618      	mov	r0, r3
 800a936:	f001 f8bd 	bl	800bab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a93a:	f001 fd05 	bl	800c348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a93e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a940:	4618      	mov	r0, r3
 800a942:	3728      	adds	r7, #40	; 0x28
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08a      	sub	sp, #40	; 0x28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xQueueReceiveFromISR+0x1c>
 800a95e:	f001 fe13 	bl	800c588 <ulSetInterruptMask>
 800a962:	e7fe      	b.n	800a962 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceiveFromISR+0x2a>
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceiveFromISR+0x2e>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceiveFromISR+0x30>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <xQueueReceiveFromISR+0x3a>
 800a97c:	f001 fe04 	bl	800c588 <ulSetInterruptMask>
 800a980:	e7fe      	b.n	800a980 <xQueueReceiveFromISR+0x38>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a982:	f001 fe01 	bl	800c588 <ulSetInterruptMask>
 800a986:	61f8      	str	r0, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d02d      	beq.n	800a9f0 <xQueueReceiveFromISR+0xa8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	6a38      	ldr	r0, [r7, #32]
 800a9a0:	f000 f8cd 	bl	800ab3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1e5a      	subs	r2, r3, #1
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d112      	bne.n	800a9dc <xQueueReceiveFromISR+0x94>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d015      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fdf8 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00d      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e006      	b.n	800a9ea <xQueueReceiveFromISR+0xa2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	b25a      	sxtb	r2, r3
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	e001      	b.n	800a9f4 <xQueueReceiveFromISR+0xac>
		}
		else
		{
			xReturn = pdFAIL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a9f4:	69f8      	ldr	r0, [r7, #28]
 800a9f6:	f001 fdd4 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3728      	adds	r7, #40	; 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <vQueueDelete+0x18>
 800aa16:	f001 fdb7 	bl	800c588 <ulSetInterruptMask>
 800aa1a:	e7fe      	b.n	800aa1a <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f95f 	bl	800ace0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <vQueueDelete+0x2e>
		{
			vPortFree( pxQueue );
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f001 febf 	bl	800c7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d006      	beq.n	800aa58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e001      	b.n	800aa5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d14d      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 ffaf 	bl	800b9f8 <xTaskPriorityDisinherit>
 800aa9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	e043      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d119      	bne.n	800aade <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6858      	ldr	r0, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	461a      	mov	r2, r3
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	f017 f98f 	bl	8021dd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	441a      	add	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d32b      	bcc.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	605a      	str	r2, [r3, #4]
 800aadc:	e026      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68d8      	ldr	r0, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	461a      	mov	r2, r3
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	f017 f975 	bl	8021dd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	425b      	negs	r3, r3
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d207      	bcs.n	800ab1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	425b      	negs	r3, r3
 800ab14:	441a      	add	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d105      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab34:	697b      	ldr	r3, [r7, #20]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d018      	beq.n	800ab82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d303      	bcc.n	800ab72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68d9      	ldr	r1, [r3, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6838      	ldr	r0, [r7, #0]
 800ab7e:	f017 f92b 	bl	8021dd8 <memcpy>
	}
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab92:	f001 fbc7 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab9e:	e011      	b.n	800abc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d012      	beq.n	800abce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fd03 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb8:	f000 fdc2 	bl	800b740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dce9      	bgt.n	800aba0 <prvUnlockQueue+0x16>
 800abcc:	e000      	b.n	800abd0 <prvUnlockQueue+0x46>
					break;
 800abce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd8:	f001 fbb6 	bl	800c348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abdc:	f001 fba2 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe8:	e011      	b.n	800ac0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d012      	beq.n	800ac18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3310      	adds	r3, #16
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fcde 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac02:	f000 fd9d 	bl	800b740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dce9      	bgt.n	800abea <prvUnlockQueue+0x60>
 800ac16:	e000      	b.n	800ac1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 fb91 	bl	800c348 <vPortExitCritical>
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac36:	f001 fb75 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e001      	b.n	800ac4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac4c:	f001 fb7c 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac62:	f001 fb5f 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d102      	bne.n	800ac78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e001      	b.n	800ac7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac7c:	f001 fb64 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e014      	b.n	800acc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <vQueueAddToRegistry+0x50>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aca8:	490c      	ldr	r1, [pc, #48]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acb2:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acbe:	e006      	b.n	800acce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b07      	cmp	r3, #7
 800acca:	d9e7      	bls.n	800ac9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	2001d284 	.word	0x2001d284

0800ace0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e016      	b.n	800ad1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800acee:	4a10      	ldr	r2, [pc, #64]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d10b      	bne.n	800ad16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acfe:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2100      	movs	r1, #0
 800ad04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	4413      	add	r3, r2
 800ad10:	2200      	movs	r2, #0
 800ad12:	605a      	str	r2, [r3, #4]
				break;
 800ad14:	e006      	b.n	800ad24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b07      	cmp	r3, #7
 800ad20:	d9e5      	bls.n	800acee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	2001d284 	.word	0x2001d284

0800ad34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad44:	f001 faee 	bl	800c324 <vPortEnterCritical>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d103      	bne.n	800ad5e <vQueueWaitForMessageRestricted+0x2a>
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d103      	bne.n	800ad74 <vQueueWaitForMessageRestricted+0x40>
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad74:	f001 fae8 	bl	800c348 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d106      	bne.n	800ad8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	3324      	adds	r3, #36	; 0x24
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fbf1 	bl	800b570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f7ff fefb 	bl	800ab8a <prvUnlockQueue>
	}
 800ad94:	bf00      	nop
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <xTaskCreateStatic+0x1a>
 800adb0:	f001 fbea 	bl	800c588 <ulSetInterruptMask>
 800adb4:	e7fe      	b.n	800adb4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <xTaskCreateStatic+0x26>
 800adbc:	f001 fbe4 	bl	800c588 <ulSetInterruptMask>
 800adc0:	e7fe      	b.n	800adc0 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adc2:	23bc      	movs	r3, #188	; 0xbc
 800adc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2bbc      	cmp	r3, #188	; 0xbc
 800adca:	d002      	beq.n	800add2 <xTaskCreateStatic+0x36>
 800adcc:	f001 fbdc 	bl	800c588 <ulSetInterruptMask>
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01b      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	f107 0318 	add.w	r3, r7, #24
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f850 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae10:	69f8      	ldr	r0, [r7, #28]
 800ae12:	f000 f8ed 	bl	800aff0 <prvAddNewTaskToReadyList>
 800ae16:	e001      	b.n	800ae1c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fc04 	bl	800c648 <pvPortMalloc>
 800ae40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae48:	20bc      	movs	r0, #188	; 0xbc
 800ae4a:	f001 fbfd 	bl	800c648 <pvPortMalloc>
 800ae4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae5c:	e005      	b.n	800ae6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f001 fca6 	bl	800c7b0 <vPortFree>
 800ae64:	e001      	b.n	800ae6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae78:	88fa      	ldrh	r2, [r7, #6]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80e 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f8ab 	bl	800aff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e002      	b.n	800aea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea6:	69bb      	ldr	r3, [r7, #24]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	21a5      	movs	r1, #165	; 0xa5
 800aeca:	f016 ff92 	bl	8021df2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aed8:	3b01      	subs	r3, #1
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f023 0307 	bic.w	r3, r3, #7
 800aee6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <prvInitialiseNewTask+0x48>
 800aef2:	f001 fb49 	bl	800c588 <ulSetInterruptMask>
 800aef6:	e7fe      	b.n	800aef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d01f      	beq.n	800af3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e012      	b.n	800af2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	7819      	ldrb	r1, [r3, #0]
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	3334      	adds	r3, #52	; 0x34
 800af14:	460a      	mov	r2, r1
 800af16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d006      	beq.n	800af32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3301      	adds	r3, #1
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	d9e9      	bls.n	800af04 <prvInitialiseNewTask+0x54>
 800af30:	e000      	b.n	800af34 <prvInitialiseNewTask+0x84>
			{
				break;
 800af32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af3c:	e003      	b.n	800af46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	2b37      	cmp	r3, #55	; 0x37
 800af4a:	d901      	bls.n	800af50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af4c:	2337      	movs	r3, #55	; 0x37
 800af4e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	6a3a      	ldr	r2, [r7, #32]
 800af54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ffe0 	bl	8009f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe ffdb 	bl	8009f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2200      	movs	r2, #0
 800af98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	3354      	adds	r3, #84	; 0x54
 800afa0:	2260      	movs	r2, #96	; 0x60
 800afa2:	2100      	movs	r1, #0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f016 ff24 	bl	8021df2 <memset>
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <prvInitialiseNewTask+0x134>)
 800afae:	659a      	str	r2, [r3, #88]	; 0x58
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	4a0d      	ldr	r2, [pc, #52]	; (800afe8 <prvInitialiseNewTask+0x138>)
 800afb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	4a0c      	ldr	r2, [pc, #48]	; (800afec <prvInitialiseNewTask+0x13c>)
 800afba:	661a      	str	r2, [r3, #96]	; 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	6938      	ldr	r0, [r7, #16]
 800afc6:	f001 fa09 	bl	800c3dc <pxPortInitialiseStack>
 800afca:	4602      	mov	r2, r0
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	08024878 	.word	0x08024878
 800afe8:	08024898 	.word	0x08024898
 800afec:	08024858 	.word	0x08024858

0800aff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f001 f994 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800affc:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b006:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b00e:	4a27      	ldr	r2, [pc, #156]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b014:	4b24      	ldr	r3, [pc, #144]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d110      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b01c:	f000 fbac 	bl	800b778 <prvInitialiseTaskLists>
 800b020:	e00d      	b.n	800b03e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b022:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02a:	4b20      	ldr	r3, [pc, #128]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d802      	bhi.n	800b03e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b038:	4a1c      	ldr	r2, [pc, #112]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b03e:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a1b      	ldr	r2, [pc, #108]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b046:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b18      	ldr	r3, [pc, #96]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <prvAddNewTaskToReadyList+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a12      	ldr	r2, [pc, #72]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b072:	441a      	add	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe ff63 	bl	8009f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b080:	f001 f962 	bl	800c348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d201      	bcs.n	800b09e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09a:	f001 f931 	bl	800c300 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	2001d798 	.word	0x2001d798
 800b0ac:	2001d2c4 	.word	0x2001d2c4
 800b0b0:	2001d7a4 	.word	0x2001d7a4
 800b0b4:	2001d7b4 	.word	0x2001d7b4
 800b0b8:	2001d7a0 	.word	0x2001d7a0
 800b0bc:	2001d2c8 	.word	0x2001d2c8

0800b0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00f      	beq.n	800b0f2 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0d2:	4b0c      	ldr	r3, [pc, #48]	; (800b104 <vTaskDelay+0x44>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <vTaskDelay+0x20>
 800b0da:	f001 fa55 	bl	800c588 <ulSetInterruptMask>
 800b0de:	e7fe      	b.n	800b0de <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800b0e0:	f000 f872 	bl	800b1c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd6a 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0ec:	f000 f87a 	bl	800b1e4 <xTaskResumeAll>
 800b0f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800b0f8:	f001 f902 	bl	800c300 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	2001d7c0 	.word	0x2001d7c0

0800b108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b116:	463a      	mov	r2, r7
 800b118:	1d39      	adds	r1, r7, #4
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe feb0 	bl	8009e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	9202      	str	r2, [sp, #8]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	2300      	movs	r3, #0
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	460a      	mov	r2, r1
 800b136:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <vTaskStartScheduler+0xa0>)
 800b138:	481c      	ldr	r0, [pc, #112]	; (800b1ac <vTaskStartScheduler+0xa4>)
 800b13a:	f7ff fe2f 	bl	800ad9c <xTaskCreateStatic>
 800b13e:	4603      	mov	r3, r0
 800b140:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b14c:	2301      	movs	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	e001      	b.n	800b156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d102      	bne.n	800b162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b15c:	f000 fd84 	bl	800bc68 <xTimerCreateTimerTask>
 800b160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d113      	bne.n	800b190 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b168:	f001 fa0e 	bl	800c588 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b16c:	4b11      	ldr	r3, [pc, #68]	; (800b1b4 <vTaskStartScheduler+0xac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3354      	adds	r3, #84	; 0x54
 800b172:	4a11      	ldr	r2, [pc, #68]	; (800b1b8 <vTaskStartScheduler+0xb0>)
 800b174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <vTaskStartScheduler+0xb4>)
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <vTaskStartScheduler+0xb8>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <vTaskStartScheduler+0xbc>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b18a:	f001 f9b1 	bl	800c4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b18e:	e006      	b.n	800b19e <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d102      	bne.n	800b19e <vTaskStartScheduler+0x96>
 800b198:	f001 f9f6 	bl	800c588 <ulSetInterruptMask>
 800b19c:	e7fe      	b.n	800b19c <vTaskStartScheduler+0x94>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	08022d70 	.word	0x08022d70
 800b1ac:	0800b759 	.word	0x0800b759
 800b1b0:	2001d7bc 	.word	0x2001d7bc
 800b1b4:	2001d2c4 	.word	0x2001d2c4
 800b1b8:	20000094 	.word	0x20000094
 800b1bc:	2001d7b8 	.word	0x2001d7b8
 800b1c0:	2001d7a4 	.word	0x2001d7a4
 800b1c4:	2001d79c 	.word	0x2001d79c

0800b1c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1cc:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	4a03      	ldr	r2, [pc, #12]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1d6:	bf00      	nop
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	2001d7c0 	.word	0x2001d7c0

0800b1e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1f2:	4b3b      	ldr	r3, [pc, #236]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <xTaskResumeAll+0x1c>
 800b1fa:	f001 f9c5 	bl	800c588 <ulSetInterruptMask>
 800b1fe:	e7fe      	b.n	800b1fe <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b200:	f001 f890 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b204:	4b36      	ldr	r3, [pc, #216]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3b01      	subs	r3, #1
 800b20a:	4a35      	ldr	r2, [pc, #212]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b20c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20e:	4b34      	ldr	r3, [pc, #208]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d15c      	bne.n	800b2d0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b216:	4b33      	ldr	r3, [pc, #204]	; (800b2e4 <xTaskResumeAll+0x100>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d058      	beq.n	800b2d0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21e:	e02f      	b.n	800b280 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3318      	adds	r3, #24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fee7 	bl	800a000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fee2 	bl	800a000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <xTaskResumeAll+0x108>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d903      	bls.n	800b250 <xTaskResumeAll+0x6c>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a27      	ldr	r2, [pc, #156]	; (800b2ec <xTaskResumeAll+0x108>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a24      	ldr	r2, [pc, #144]	; (800b2f0 <xTaskResumeAll+0x10c>)
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fe6d 	bl	8009f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b270:	4b20      	ldr	r3, [pc, #128]	; (800b2f4 <xTaskResumeAll+0x110>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d302      	bcc.n	800b280 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800b27a:	4b1f      	ldr	r3, [pc, #124]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b280:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1cb      	bne.n	800b220 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b28e:	f000 fb0d 	bl	800b8ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b292:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <xTaskResumeAll+0x118>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b29e:	f000 f83f 	bl	800b320 <xTaskIncrementTick>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f1      	bne.n	800b29e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <xTaskResumeAll+0x118>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2cc:	f001 f818 	bl	800c300 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d0:	f001 f83a 	bl	800c348 <vPortExitCritical>

	return xAlreadyYielded;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2001d7c0 	.word	0x2001d7c0
 800b2e4:	2001d798 	.word	0x2001d798
 800b2e8:	2001d758 	.word	0x2001d758
 800b2ec:	2001d7a0 	.word	0x2001d7a0
 800b2f0:	2001d2c8 	.word	0x2001d2c8
 800b2f4:	2001d2c4 	.word	0x2001d2c4
 800b2f8:	2001d7ac 	.word	0x2001d7ac
 800b2fc:	2001d7a8 	.word	0x2001d7a8

0800b300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <xTaskGetTickCount+0x1c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b30c:	687b      	ldr	r3, [r7, #4]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	2001d79c 	.word	0x2001d79c

0800b320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b32a:	4b4b      	ldr	r3, [pc, #300]	; (800b458 <xTaskIncrementTick+0x138>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f040 8087 	bne.w	800b442 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b334:	4b49      	ldr	r3, [pc, #292]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b33c:	4a47      	ldr	r2, [pc, #284]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d118      	bne.n	800b37a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <xTaskIncrementTick+0x140>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <xTaskIncrementTick+0x38>
 800b352:	f001 f919 	bl	800c588 <ulSetInterruptMask>
 800b356:	e7fe      	b.n	800b356 <xTaskIncrementTick+0x36>
 800b358:	4b41      	ldr	r3, [pc, #260]	; (800b460 <xTaskIncrementTick+0x140>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	4b41      	ldr	r3, [pc, #260]	; (800b464 <xTaskIncrementTick+0x144>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a3f      	ldr	r2, [pc, #252]	; (800b460 <xTaskIncrementTick+0x140>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4a3f      	ldr	r2, [pc, #252]	; (800b464 <xTaskIncrementTick+0x144>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	4b3e      	ldr	r3, [pc, #248]	; (800b468 <xTaskIncrementTick+0x148>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a3d      	ldr	r2, [pc, #244]	; (800b468 <xTaskIncrementTick+0x148>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f000 fa99 	bl	800b8ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b37a:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d349      	bcc.n	800b418 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	4b36      	ldr	r3, [pc, #216]	; (800b460 <xTaskIncrementTick+0x140>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d104      	bne.n	800b398 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b38e:	4b37      	ldr	r3, [pc, #220]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	601a      	str	r2, [r3, #0]
					break;
 800b396:	e03f      	b.n	800b418 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b398:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xTaskIncrementTick+0x140>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d203      	bcs.n	800b3b8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3b0:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3b6:	e02f      	b.n	800b418 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fe1f 	bl	800a000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fe16 	bl	800a000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <xTaskIncrementTick+0xc8>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a22      	ldr	r2, [pc, #136]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <xTaskIncrementTick+0x154>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fda1 	bl	8009f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <xTaskIncrementTick+0x158>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3b8      	bcc.n	800b384 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b416:	e7b5      	b.n	800b384 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b418:	4b17      	ldr	r3, [pc, #92]	; (800b478 <xTaskIncrementTick+0x158>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4915      	ldr	r1, [pc, #84]	; (800b474 <xTaskIncrementTick+0x154>)
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d901      	bls.n	800b434 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b434:	4b11      	ldr	r3, [pc, #68]	; (800b47c <xTaskIncrementTick+0x15c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e004      	b.n	800b44c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <xTaskIncrementTick+0x160>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	4a0d      	ldr	r2, [pc, #52]	; (800b480 <xTaskIncrementTick+0x160>)
 800b44a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b44c:	697b      	ldr	r3, [r7, #20]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	2001d7c0 	.word	0x2001d7c0
 800b45c:	2001d79c 	.word	0x2001d79c
 800b460:	2001d750 	.word	0x2001d750
 800b464:	2001d754 	.word	0x2001d754
 800b468:	2001d7b0 	.word	0x2001d7b0
 800b46c:	2001d7b8 	.word	0x2001d7b8
 800b470:	2001d7a0 	.word	0x2001d7a0
 800b474:	2001d2c8 	.word	0x2001d2c8
 800b478:	2001d2c4 	.word	0x2001d2c4
 800b47c:	2001d7ac 	.word	0x2001d7ac
 800b480:	2001d7a8 	.word	0x2001d7a8

0800b484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <vTaskSwitchContext+0x9c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b498:	e03e      	b.n	800b518 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b49a:	4b22      	ldr	r3, [pc, #136]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	607b      	str	r3, [r7, #4]
 800b4a6:	e008      	b.n	800b4ba <vTaskSwitchContext+0x36>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <vTaskSwitchContext+0x30>
 800b4ae:	f001 f86b 	bl	800c588 <ulSetInterruptMask>
 800b4b2:	e7fe      	b.n	800b4b2 <vTaskSwitchContext+0x2e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	491c      	ldr	r1, [pc, #112]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0ec      	beq.n	800b4a8 <vTaskSwitchContext+0x24>
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a14      	ldr	r2, [pc, #80]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4da:	4413      	add	r3, r2
 800b4dc:	603b      	str	r3, [r7, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d104      	bne.n	800b4fe <vTaskSwitchContext+0x7a>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	605a      	str	r2, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4a0a      	ldr	r2, [pc, #40]	; (800b530 <vTaskSwitchContext+0xac>)
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4a07      	ldr	r2, [pc, #28]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <vTaskSwitchContext+0xac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3354      	adds	r3, #84	; 0x54
 800b514:	4a07      	ldr	r2, [pc, #28]	; (800b534 <vTaskSwitchContext+0xb0>)
 800b516:	6013      	str	r3, [r2, #0]
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2001d7c0 	.word	0x2001d7c0
 800b524:	2001d7ac 	.word	0x2001d7ac
 800b528:	2001d7a0 	.word	0x2001d7a0
 800b52c:	2001d2c8 	.word	0x2001d2c8
 800b530:	2001d2c4 	.word	0x2001d2c4
 800b534:	20000094 	.word	0x20000094

0800b538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <vTaskPlaceOnEventList+0x16>
 800b548:	f001 f81e 	bl	800c588 <ulSetInterruptMask>
 800b54c:	e7fe      	b.n	800b54c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <vTaskPlaceOnEventList+0x34>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3318      	adds	r3, #24
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fe fd19 	bl	8009f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b55c:	2101      	movs	r1, #1
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f000 fb2e 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
}
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2001d2c4 	.word	0x2001d2c4

0800b570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <vTaskPlaceOnEventListRestricted+0x18>
 800b582:	f001 f801 	bl	800c588 <ulSetInterruptMask>
 800b586:	e7fe      	b.n	800b586 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vTaskPlaceOnEventListRestricted+0x44>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3318      	adds	r3, #24
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7fe fcd8 	bl	8009f46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f000 fb0b 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2001d2c4 	.word	0x2001d2c4

0800b5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <xTaskRemoveFromEventList+0x1c>
 800b5ce:	f000 ffdb 	bl	800c588 <ulSetInterruptMask>
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fd11 	bl	800a000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5de:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <xTaskRemoveFromEventList+0xa0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d11d      	bne.n	800b622 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fd08 	bl	800a000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b19      	ldr	r3, [pc, #100]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <xTaskRemoveFromEventList+0x4c>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a16      	ldr	r2, [pc, #88]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4613      	mov	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <xTaskRemoveFromEventList+0xa8>)
 800b612:	441a      	add	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3304      	adds	r3, #4
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fc93 	bl	8009f46 <vListInsertEnd>
 800b620:	e005      	b.n	800b62e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3318      	adds	r3, #24
 800b626:	4619      	mov	r1, r3
 800b628:	480e      	ldr	r0, [pc, #56]	; (800b664 <xTaskRemoveFromEventList+0xac>)
 800b62a:	f7fe fc8c 	bl	8009f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <xTaskRemoveFromEventList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d905      	bls.n	800b648 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <xTaskRemoveFromEventList+0xb4>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	e001      	b.n	800b64c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800b648:	2300      	movs	r3, #0
 800b64a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b64c:	68fb      	ldr	r3, [r7, #12]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2001d7c0 	.word	0x2001d7c0
 800b65c:	2001d7a0 	.word	0x2001d7a0
 800b660:	2001d2c8 	.word	0x2001d2c8
 800b664:	2001d758 	.word	0x2001d758
 800b668:	2001d2c4 	.word	0x2001d2c4
 800b66c:	2001d7ac 	.word	0x2001d7ac

0800b670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <vTaskInternalSetTimeOutState+0x24>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <vTaskInternalSetTimeOutState+0x28>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	605a      	str	r2, [r3, #4]
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	2001d7b0 	.word	0x2001d7b0
 800b698:	2001d79c 	.word	0x2001d79c

0800b69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xTaskCheckForTimeOut+0x16>
 800b6ac:	f000 ff6c 	bl	800c588 <ulSetInterruptMask>
 800b6b0:	e7fe      	b.n	800b6b0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xTaskCheckForTimeOut+0x22>
 800b6b8:	f000 ff66 	bl	800c588 <ulSetInterruptMask>
 800b6bc:	e7fe      	b.n	800b6bc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800b6be:	f000 fe31 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <xTaskCheckForTimeOut+0x9c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	e023      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b15      	ldr	r3, [pc, #84]	; (800b73c <xTaskCheckForTimeOut+0xa0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d007      	beq.n	800b6fe <xTaskCheckForTimeOut+0x62>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e015      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ffab 	bl	800b670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	e004      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 fe0d 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800b72e:	697b      	ldr	r3, [r7, #20]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	2001d79c 	.word	0x2001d79c
 800b73c:	2001d7b0 	.word	0x2001d7b0

0800b740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b744:	4b03      	ldr	r3, [pc, #12]	; (800b754 <vTaskMissedYield+0x14>)
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	2001d7ac 	.word	0x2001d7ac

0800b758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b760:	f000 f84a 	bl	800b7f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b764:	4b03      	ldr	r3, [pc, #12]	; (800b774 <prvIdleTask+0x1c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d9f9      	bls.n	800b760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b76c:	f000 fdc8 	bl	800c300 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b770:	e7f6      	b.n	800b760 <prvIdleTask+0x8>
 800b772:	bf00      	nop
 800b774:	2001d2c8 	.word	0x2001d2c8

0800b778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b77e:	2300      	movs	r3, #0
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	e00c      	b.n	800b79e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4613      	mov	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <prvInitialiseTaskLists+0x60>)
 800b790:	4413      	add	r3, r2
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fbaa 	bl	8009eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3301      	adds	r3, #1
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b37      	cmp	r3, #55	; 0x37
 800b7a2:	d9ef      	bls.n	800b784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7a4:	480d      	ldr	r0, [pc, #52]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7a6:	f7fe fba1 	bl	8009eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7aa:	480d      	ldr	r0, [pc, #52]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7ac:	f7fe fb9e 	bl	8009eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7b0:	480c      	ldr	r0, [pc, #48]	; (800b7e4 <prvInitialiseTaskLists+0x6c>)
 800b7b2:	f7fe fb9b 	bl	8009eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7b6:	480c      	ldr	r0, [pc, #48]	; (800b7e8 <prvInitialiseTaskLists+0x70>)
 800b7b8:	f7fe fb98 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7bc:	480b      	ldr	r0, [pc, #44]	; (800b7ec <prvInitialiseTaskLists+0x74>)
 800b7be:	f7fe fb95 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <prvInitialiseTaskLists+0x78>)
 800b7c4:	4a05      	ldr	r2, [pc, #20]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <prvInitialiseTaskLists+0x7c>)
 800b7ca:	4a05      	ldr	r2, [pc, #20]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	2001d2c8 	.word	0x2001d2c8
 800b7dc:	2001d728 	.word	0x2001d728
 800b7e0:	2001d73c 	.word	0x2001d73c
 800b7e4:	2001d758 	.word	0x2001d758
 800b7e8:	2001d76c 	.word	0x2001d76c
 800b7ec:	2001d784 	.word	0x2001d784
 800b7f0:	2001d750 	.word	0x2001d750
 800b7f4:	2001d754 	.word	0x2001d754

0800b7f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7fe:	e019      	b.n	800b834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b800:	f000 fd90 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b804:	4b10      	ldr	r3, [pc, #64]	; (800b848 <prvCheckTasksWaitingTermination+0x50>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe fbf5 	bl	800a000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b81e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3b01      	subs	r3, #1
 800b826:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b82a:	f000 fd8d 	bl	800c348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f810 	bl	800b854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e1      	bne.n	800b800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	2001d76c 	.word	0x2001d76c
 800b84c:	2001d798 	.word	0x2001d798
 800b850:	2001d780 	.word	0x2001d780

0800b854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3354      	adds	r3, #84	; 0x54
 800b860:	4618      	mov	r0, r3
 800b862:	f016 fead 	bl	80225c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d108      	bne.n	800b882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ff9b 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 ff98 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b880:	e010      	b.n	800b8a4 <prvDeleteTCB+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d103      	bne.n	800b894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 ff8f 	bl	800c7b0 <vPortFree>
	}
 800b892:	e007      	b.n	800b8a4 <prvDeleteTCB+0x50>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d002      	beq.n	800b8a4 <prvDeleteTCB+0x50>
 800b89e:	f000 fe73 	bl	800c588 <ulSetInterruptMask>
 800b8a2:	e7fe      	b.n	800b8a2 <prvDeleteTCB+0x4e>
	}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8be:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8c4:	e008      	b.n	800b8d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c6:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8d6:	6013      	str	r3, [r2, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	2001d750 	.word	0x2001d750
 800b8e8:	2001d7b8 	.word	0x2001d7b8

0800b8ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8f2:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <xTaskGetSchedulerState+0x34>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	e008      	b.n	800b912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b900:	4b08      	ldr	r3, [pc, #32]	; (800b924 <xTaskGetSchedulerState+0x38>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b908:	2302      	movs	r3, #2
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e001      	b.n	800b912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b912:	687b      	ldr	r3, [r7, #4]
	}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	2001d7a4 	.word	0x2001d7a4
 800b924:	2001d7c0 	.word	0x2001d7c0

0800b928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d051      	beq.n	800b9e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	429a      	cmp	r2, r3
 800b94a:	d241      	bcs.n	800b9d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	db06      	blt.n	800b962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6959      	ldr	r1, [r3, #20]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b974:	4413      	add	r3, r2
 800b976:	4299      	cmp	r1, r3
 800b978:	d122      	bne.n	800b9c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fb3e 	bl	800a000 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b984:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	4b18      	ldr	r3, [pc, #96]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d903      	bls.n	800b9a2 <xTaskPriorityInherit+0x7a>
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fe fac4 	bl	8009f46 <vListInsertEnd>
 800b9be:	e004      	b.n	800b9ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e008      	b.n	800b9e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d201      	bcs.n	800b9e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2001d2c4 	.word	0x2001d2c4
 800b9f0:	2001d2c8 	.word	0x2001d2c8
 800b9f4:	2001d7a0 	.word	0x2001d7a0

0800b9f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d046      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <xTaskPriorityDisinherit+0xb0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d002      	beq.n	800ba1e <xTaskPriorityDisinherit+0x26>
 800ba18:	f000 fdb6 	bl	800c588 <ulSetInterruptMask>
 800ba1c:	e7fe      	b.n	800ba1c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d102      	bne.n	800ba2c <xTaskPriorityDisinherit+0x34>
 800ba26:	f000 fdaf 	bl	800c588 <ulSetInterruptMask>
 800ba2a:	e7fe      	b.n	800ba2a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d02c      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fad6 	bl	800a000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskPriorityDisinherit+0x84>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a0c      	ldr	r2, [pc, #48]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <xTaskPriorityDisinherit+0xb8>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fa57 	bl	8009f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	2001d2c4 	.word	0x2001d2c4
 800baac:	2001d7a0 	.word	0x2001d7a0
 800bab0:	2001d2c8 	.word	0x2001d2c8

0800bab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d05a      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <vTaskPriorityDisinheritAfterTimeout+0x26>
 800bad4:	f000 fd58 	bl	800c588 <ulSetInterruptMask>
 800bad8:	e7fe      	b.n	800bad8 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d902      	bls.n	800baea <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e002      	b.n	800baf0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baee:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d043      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d13e      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb04:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d102      	bne.n	800bb14 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800bb0e:	f000 fd3b 	bl	800c588 <ulSetInterruptMask>
 800bb12:	e7fe      	b.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0x5e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db04      	blt.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6959      	ldr	r1, [r3, #20]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4a13      	ldr	r2, [pc, #76]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb42:	4413      	add	r3, r2
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d11c      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe fa57 	bl	800a000 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d903      	bls.n	800bb66 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	4a0c      	ldr	r2, [pc, #48]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a07      	ldr	r2, [pc, #28]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb74:	441a      	add	r2, r3
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe f9e2 	bl	8009f46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb82:	bf00      	nop
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2001d2c4 	.word	0x2001d2c4
 800bb90:	2001d2c8 	.word	0x2001d2c8
 800bb94:	2001d7a0 	.word	0x2001d7a0

0800bb98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb9c:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbaa:	3201      	adds	r2, #1
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbae:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	2001d2c4 	.word	0x2001d2c4

0800bbc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbca:	4b21      	ldr	r3, [pc, #132]	; (800bc50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd0:	4b20      	ldr	r3, [pc, #128]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fa12 	bl	800a000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d10a      	bne.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4819      	ldr	r0, [pc, #100]	; (800bc58 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbf4:	f7fe f9a7 	bl	8009f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbf8:	e026      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc02:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d209      	bcs.n	800bc26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fe f9b5 	bl	8009f8e <vListInsert>
}
 800bc24:	e010      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fe f9ab 	bl	8009f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d202      	bcs.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc42:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6013      	str	r3, [r2, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2001d79c 	.word	0x2001d79c
 800bc54:	2001d2c4 	.word	0x2001d2c4
 800bc58:	2001d784 	.word	0x2001d784
 800bc5c:	2001d754 	.word	0x2001d754
 800bc60:	2001d750 	.word	0x2001d750
 800bc64:	2001d7b8 	.word	0x2001d7b8

0800bc68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc72:	f000 fac7 	bl	800c204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <xTimerCreateTimerTask+0x70>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d020      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc86:	463a      	mov	r2, r7
 800bc88:	1d39      	adds	r1, r7, #4
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe f912 	bl	8009eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	9202      	str	r2, [sp, #8]
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	2302      	movs	r3, #2
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	460a      	mov	r2, r1
 800bca6:	490d      	ldr	r1, [pc, #52]	; (800bcdc <xTimerCreateTimerTask+0x74>)
 800bca8:	480d      	ldr	r0, [pc, #52]	; (800bce0 <xTimerCreateTimerTask+0x78>)
 800bcaa:	f7ff f877 	bl	800ad9c <xTaskCreateStatic>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xTimerCreateTimerTask+0x64>
 800bcc6:	f000 fc5f 	bl	800c588 <ulSetInterruptMask>
 800bcca:	e7fe      	b.n	800bcca <xTimerCreateTimerTask+0x62>
	return xReturn;
 800bccc:	68fb      	ldr	r3, [r7, #12]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2001d7f4 	.word	0x2001d7f4
 800bcdc:	08022d78 	.word	0x08022d78
 800bce0:	0800bdfd 	.word	0x0800bdfd
 800bce4:	2001d7f8 	.word	0x2001d7f8

0800bce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	; 0x28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d102      	bne.n	800bd06 <xTimerGenericCommand+0x1e>
 800bd00:	f000 fc42 	bl	800c588 <ulSetInterruptMask>
 800bd04:	e7fe      	b.n	800bd04 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd06:	4b1a      	ldr	r3, [pc, #104]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d02a      	beq.n	800bd64 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b05      	cmp	r3, #5
 800bd1e:	dc18      	bgt.n	800bd52 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd20:	f7ff fde4 	bl	800b8ec <xTaskGetSchedulerState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d109      	bne.n	800bd3e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd2a:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	f107 0114 	add.w	r1, r7, #20
 800bd32:	2300      	movs	r3, #0
 800bd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd36:	f7fe fad4 	bl	800a2e2 <xQueueGenericSend>
 800bd3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd3c:	e012      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f107 0114 	add.w	r1, r7, #20
 800bd46:	2300      	movs	r3, #0
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f7fe faca 	bl	800a2e2 <xQueueGenericSend>
 800bd4e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd50:	e008      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	f107 0114 	add.w	r1, r7, #20
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	f7fe fb89 	bl	800a474 <xQueueGenericSendFromISR>
 800bd62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3728      	adds	r7, #40	; 0x28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	2001d7f4 	.word	0x2001d7f4

0800bd74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7e:	4b1e      	ldr	r3, [pc, #120]	; (800bdf8 <prvProcessExpiredTimer+0x84>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe f937 	bl	800a000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d01a      	beq.n	800bdd6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f8c1 	bl	800bf34 <prvInsertTimerInActiveList>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d017      	beq.n	800bde8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff ff90 	bl	800bce8 <xTimerGenericCommand>
 800bdc8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <prvProcessExpiredTimer+0x74>
 800bdd0:	f000 fbda 	bl	800c588 <ulSetInterruptMask>
 800bdd4:	e7fe      	b.n	800bdd4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	4798      	blx	r3
}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	2001d7ec 	.word	0x2001d7ec

0800bdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f84f 	bl	800beac <prvGetNextExpireTime>
 800be0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f803 	bl	800be20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1a:	f000 f8cd 	bl	800bfb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1e:	e7f1      	b.n	800be04 <prvTimerTask+0x8>

0800be20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2a:	f7ff f9cd 	bl	800b1c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f85e 	bl	800bef4 <prvSampleTimeNow>
 800be38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12a      	bne.n	800be96 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d806      	bhi.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be4e:	f7ff f9c9 	bl	800b1e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff8d 	bl	800bd74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5a:	e01e      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <prvProcessTimerOrBlockTask+0x84>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <prvProcessTimerOrBlockTask+0x50>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <prvProcessTimerOrBlockTask+0x52>
 800be70:	2300      	movs	r3, #0
 800be72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <prvProcessTimerOrBlockTask+0x88>)
 800be76:	6818      	ldr	r0, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe ff57 	bl	800ad34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be86:	f7ff f9ad 	bl	800b1e4 <xTaskResumeAll>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800be90:	f000 fa36 	bl	800c300 <vPortYield>
}
 800be94:	e001      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800be96:	f7ff f9a5 	bl	800b1e4 <xTaskResumeAll>
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2001d7f0 	.word	0x2001d7f0
 800bea8:	2001d7f4 	.word	0x2001d7f4

0800beac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <prvGetNextExpireTime+0x16>
 800bebe:	2201      	movs	r2, #1
 800bec0:	e000      	b.n	800bec4 <prvGetNextExpireTime+0x18>
 800bec2:	2200      	movs	r2, #0
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e001      	b.n	800bee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bee0:	68fb      	ldr	r3, [r7, #12]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	2001d7ec 	.word	0x2001d7ec

0800bef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800befc:	f7ff fa00 	bl	800b300 <xTaskGetTickCount>
 800bf00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d205      	bcs.n	800bf18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf0c:	f000 f91e 	bl	800c14c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf1e:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf24:	68fb      	ldr	r3, [r7, #12]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	2001d7fc 	.word	0x2001d7fc

0800bf34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d812      	bhi.n	800bf80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d302      	bcc.n	800bf6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e01b      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <prvInsertTimerInActiveList+0x7c>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe f808 	bl	8009f8e <vListInsert>
 800bf7e:	e012      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d206      	bcs.n	800bf96 <prvInsertTimerInActiveList+0x62>
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d302      	bcc.n	800bf96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e007      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <prvInsertTimerInActiveList+0x80>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f7fd fff4 	bl	8009f8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	2001d7f0 	.word	0x2001d7f0
 800bfb4:	2001d7ec 	.word	0x2001d7ec

0800bfb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08c      	sub	sp, #48	; 0x30
 800bfbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfbe:	e0b2      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da11      	bge.n	800bfea <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfc6:	f107 0308 	add.w	r3, r7, #8
 800bfca:	3304      	adds	r3, #4
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <prvProcessReceivedCommands+0x22>
 800bfd4:	f000 fad8 	bl	800c588 <ulSetInterruptMask>
 800bfd8:	e7fe      	b.n	800bfd8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe0:	6850      	ldr	r0, [r2, #4]
 800bfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe4:	6892      	ldr	r2, [r2, #8]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f2c0 8099 	blt.w	800c124 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d004      	beq.n	800c008 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fffc 	bl	800a000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c008:	1d3b      	adds	r3, r7, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff ff72 	bl	800bef4 <prvSampleTimeNow>
 800c010:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b09      	cmp	r3, #9
 800c016:	f200 8086 	bhi.w	800c126 <prvProcessReceivedCommands+0x16e>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <prvProcessReceivedCommands+0x68>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c0ad 	.word	0x0800c0ad
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0fb 	.word	0x0800c0fb
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c049 	.word	0x0800c049
 800c040:	0800c0ad 	.word	0x0800c0ad
 800c044:	0800c0c1 	.word	0x0800c0c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	b2da      	uxtb	r2, r3
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	18d1      	adds	r1, r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	6a38      	ldr	r0, [r7, #32]
 800c068:	f7ff ff64 	bl	800bf34 <prvInsertTimerInActiveList>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d059      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	6a38      	ldr	r0, [r7, #32]
 800c078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d04e      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	441a      	add	r2, r3
 800c090:	2300      	movs	r3, #0
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2300      	movs	r3, #0
 800c096:	2100      	movs	r1, #0
 800c098:	6a38      	ldr	r0, [r7, #32]
 800c09a:	f7ff fe25 	bl	800bce8 <xTimerGenericCommand>
 800c09e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d13f      	bne.n	800c126 <prvProcessReceivedCommands+0x16e>
 800c0a6:	f000 fa6f 	bl	800c588 <ulSetInterruptMask>
 800c0aa:	e7fe      	b.n	800c0aa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b2:	f023 0301 	bic.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0be:	e032      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <prvProcessReceivedCommands+0x12e>
 800c0e0:	f000 fa52 	bl	800c588 <ulSetInterruptMask>
 800c0e4:	e7fe      	b.n	800c0e4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	699a      	ldr	r2, [r3, #24]
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	6a38      	ldr	r0, [r7, #32]
 800c0f4:	f7ff ff1e 	bl	800bf34 <prvInsertTimerInActiveList>
					break;
 800c0f8:	e015      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800c108:	6a38      	ldr	r0, [r7, #32]
 800c10a:	f000 fb51 	bl	800c7b0 <vPortFree>
 800c10e:	e00a      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c116:	f023 0301 	bic.w	r3, r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c122:	e000      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c124:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <prvProcessReceivedCommands+0x190>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f107 0108 	add.w	r1, r7, #8
 800c12e:	2200      	movs	r2, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe fa73 	bl	800a61c <xQueueReceive>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f af41 	bne.w	800bfc0 <prvProcessReceivedCommands+0x8>
	}
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	3728      	adds	r7, #40	; 0x28
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	2001d7f4 	.word	0x2001d7f4

0800c14c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c152:	e040      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c154:	4b29      	ldr	r3, [pc, #164]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15e:	4b27      	ldr	r3, [pc, #156]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd ff47 	bl	800a000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	2b00      	cmp	r3, #0
 800c186:	d026      	beq.n	800c1d6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	429a      	cmp	r2, r3
 800c198:	d90e      	bls.n	800c1b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fd feec 	bl	8009f8e <vListInsert>
 800c1b6:	e00e      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff fd90 	bl	800bce8 <xTimerGenericCommand>
 800c1c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <prvSwitchTimerLists+0x8a>
 800c1d0:	f000 f9da 	bl	800c588 <ulSetInterruptMask>
 800c1d4:	e7fe      	b.n	800c1d4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d6:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1b9      	bne.n	800c154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1ee:	4a04      	ldr	r2, [pc, #16]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	6013      	str	r3, [r2, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2001d7ec 	.word	0x2001d7ec
 800c200:	2001d7f0 	.word	0x2001d7f0

0800c204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c20a:	f000 f88b 	bl	800c324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c20e:	4b15      	ldr	r3, [pc, #84]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d120      	bne.n	800c258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c216:	4814      	ldr	r0, [pc, #80]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c218:	f7fd fe68 	bl	8009eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c21c:	4813      	ldr	r0, [pc, #76]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c21e:	f7fd fe65 	bl	8009eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c222:	4b13      	ldr	r3, [pc, #76]	; (800c270 <prvCheckForValidListAndQueue+0x6c>)
 800c224:	4a10      	ldr	r2, [pc, #64]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c228:	4b12      	ldr	r3, [pc, #72]	; (800c274 <prvCheckForValidListAndQueue+0x70>)
 800c22a:	4a10      	ldr	r2, [pc, #64]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c22c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c22e:	2300      	movs	r3, #0
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	4b11      	ldr	r3, [pc, #68]	; (800c278 <prvCheckForValidListAndQueue+0x74>)
 800c234:	4a11      	ldr	r2, [pc, #68]	; (800c27c <prvCheckForValidListAndQueue+0x78>)
 800c236:	2110      	movs	r1, #16
 800c238:	200a      	movs	r0, #10
 800c23a:	f7fd ff63 	bl	800a104 <xQueueGenericCreateStatic>
 800c23e:	4603      	mov	r3, r0
 800c240:	4a08      	ldr	r2, [pc, #32]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c244:	4b07      	ldr	r3, [pc, #28]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	490b      	ldr	r1, [pc, #44]	; (800c280 <prvCheckForValidListAndQueue+0x7c>)
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fd1a 	bl	800ac8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c258:	f000 f876 	bl	800c348 <vPortExitCritical>
}
 800c25c:	bf00      	nop
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	2001d7f4 	.word	0x2001d7f4
 800c268:	2001d7c4 	.word	0x2001d7c4
 800c26c:	2001d7d8 	.word	0x2001d7d8
 800c270:	2001d7ec 	.word	0x2001d7ec
 800c274:	2001d7f0 	.word	0x2001d7f0
 800c278:	2001d8a0 	.word	0x2001d8a0
 800c27c:	2001d800 	.word	0x2001d800
 800c280:	08022d80 	.word	0x08022d80

0800c284 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <vPortSetupTimerInterrupt+0x38>)
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <vPortSetupTimerInterrupt+0x3c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0a      	ldr	r2, [pc, #40]	; (800c2c4 <vPortSetupTimerInterrupt+0x40>)
 800c29a:	fba2 2303 	umull	r2, r3, r2, r3
 800c29e:	099b      	lsrs	r3, r3, #6
 800c2a0:	4a09      	ldr	r2, [pc, #36]	; (800c2c8 <vPortSetupTimerInterrupt+0x44>)
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c2a8:	2207      	movs	r2, #7
 800c2aa:	601a      	str	r2, [r3, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	e000e010 	.word	0xe000e010
 800c2bc:	e000e018 	.word	0xe000e018
 800c2c0:	20000004 	.word	0x20000004
 800c2c4:	10624dd3 	.word	0x10624dd3
 800c2c8:	e000e014 	.word	0xe000e014

0800c2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <prvTaskExitError+0x30>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d002      	beq.n	800c2e6 <prvTaskExitError+0x1a>
 800c2e0:	f000 f952 	bl	800c588 <ulSetInterruptMask>
 800c2e4:	e7fe      	b.n	800c2e4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800c2e6:	f000 f94f 	bl	800c588 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800c2ea:	bf00      	nop
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0fc      	beq.n	800c2ec <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20000010 	.word	0x20000010

0800c300 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c304:	4b06      	ldr	r3, [pc, #24]	; (800c320 <vPortYield+0x20>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c30c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c310:	f3bf 8f6f 	isb	sy
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c328:	f000 f92e 	bl	800c588 <ulSetInterruptMask>
	ulCriticalNesting++;
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <vPortEnterCritical+0x20>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3301      	adds	r3, #1
 800c332:	4a04      	ldr	r2, [pc, #16]	; (800c344 <vPortEnterCritical+0x20>)
 800c334:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c336:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c33a:	f3bf 8f6f 	isb	sy
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000010 	.word	0x20000010

0800c348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortExitCritical+0x30>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <vPortExitCritical+0x12>
 800c354:	f000 f918 	bl	800c588 <ulSetInterruptMask>
 800c358:	e7fe      	b.n	800c358 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800c35a:	4b07      	ldr	r3, [pc, #28]	; (800c378 <vPortExitCritical+0x30>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	4a05      	ldr	r2, [pc, #20]	; (800c378 <vPortExitCritical+0x30>)
 800c362:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <vPortExitCritical+0x30>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800c36c:	2000      	movs	r0, #0
 800c36e:	f000 f918 	bl	800c5a2 <vClearInterruptMask>
	}
}
 800c372:	bf00      	nop
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000010 	.word	0x20000010

0800c37c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c382:	f000 f901 	bl	800c588 <ulSetInterruptMask>
 800c386:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c388:	f7fe ffca 	bl	800b320 <xTaskIncrementTick>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <xPortSysTickHandler+0x2c>)
 800c394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c398:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f901 	bl	800c5a2 <vClearInterruptMask>
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed04 	.word	0xe000ed04

0800c3ac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b02      	subs	r3, #2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d102      	bne.n	800c3ce <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800c3c8:	f000 f8b2 	bl	800c530 <vRestoreContextOfFirstTask>
		}
		break;
 800c3cc:	e002      	b.n	800c3d4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800c3ce:	f000 f8db 	bl	800c588 <ulSetInterruptMask>
 800c3d2:	e7fe      	b.n	800c3d2 <vPortSVCHandler_C+0x26>
		}
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3b04      	subs	r3, #4
 800c3fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3b04      	subs	r3, #4
 800c408:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c40a:	4a38      	ldr	r2, [pc, #224]	; (800c4ec <pxPortInitialiseStack+0x110>)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3b04      	subs	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800c41c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3b04      	subs	r3, #4
 800c422:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800c42a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3b04      	subs	r3, #4
 800c430:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800c438:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800c446:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3b04      	subs	r3, #4
 800c44c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3b04      	subs	r3, #4
 800c458:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800c460:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3b04      	subs	r3, #4
 800c466:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800c46e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3b04      	subs	r3, #4
 800c474:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800c47c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800c48a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3b04      	subs	r3, #4
 800c490:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800c498:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800c4a6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800c4b4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800c4c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3b04      	subs	r3, #4
 800c4c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800c4d0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	0800c2cd 	.word	0x0800c2cd

0800c4f0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <xPortStartScheduler+0x38>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a0b      	ldr	r2, [pc, #44]	; (800c528 <xPortStartScheduler+0x38>)
 800c4fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4fe:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c500:	4b09      	ldr	r3, [pc, #36]	; (800c528 <xPortStartScheduler+0x38>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <xPortStartScheduler+0x38>)
 800c506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c50a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800c50c:	f7ff feba 	bl	800c284 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800c510:	4b06      	ldr	r3, [pc, #24]	; (800c52c <xPortStartScheduler+0x3c>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800c516:	f000 f823 	bl	800c560 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800c51a:	f7fe ffb3 	bl	800b484 <vTaskSwitchContext>
	prvTaskExitError();
 800c51e:	f7ff fed5 	bl	800c2cc <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	bd80      	pop	{r7, pc}
 800c528:	e000ed20 	.word	0xe000ed20
 800c52c:	20000010 	.word	0x20000010

0800c530 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <pxCurrentTCBConst2>)
 800c532:	6811      	ldr	r1, [r2, #0]
 800c534:	6808      	ldr	r0, [r1, #0]
 800c536:	c806      	ldmia	r0!, {r1, r2}
 800c538:	f381 880b 	msr	PSPLIM, r1
 800c53c:	2102      	movs	r1, #2
 800c53e:	f381 8814 	msr	CONTROL, r1
 800c542:	3020      	adds	r0, #32
 800c544:	f380 8809 	msr	PSP, r0
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	4710      	bx	r2
 800c54e:	bf00      	nop

0800c550 <pxCurrentTCBConst2>:
 800c550:	2001d2c4 	.word	0x2001d2c4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
	...

0800c560 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c560:	4807      	ldr	r0, [pc, #28]	; (800c580 <xVTORConst>)
 800c562:	6800      	ldr	r0, [r0, #0]
 800c564:	6800      	ldr	r0, [r0, #0]
 800c566:	f380 8808 	msr	MSP, r0
 800c56a:	b662      	cpsie	i
 800c56c:	b661      	cpsie	f
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	df02      	svc	2
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	f3af 8000 	nop.w

0800c580 <xVTORConst>:
 800c580:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c588:	f3ef 8011 	mrs	r0, BASEPRI
 800c58c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800c590:	f381 8811 	msr	BASEPRI, r1
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c59e:	bf00      	nop
 800c5a0:	4618      	mov	r0, r3

0800c5a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5a2:	f380 8811 	msr	BASEPRI, r0
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800c5b0:	bf00      	nop
	...

0800c5c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5c0:	f3ef 8009 	mrs	r0, PSP
 800c5c4:	f3ef 820b 	mrs	r2, PSPLIM
 800c5c8:	4673      	mov	r3, lr
 800c5ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <pxCurrentTCBConst>)
 800c5d0:	6811      	ldr	r1, [r2, #0]
 800c5d2:	6008      	str	r0, [r1, #0]
 800c5d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f7fe ff4e 	bl	800b484 <vTaskSwitchContext>
 800c5e8:	f04f 0000 	mov.w	r0, #0
 800c5ec:	f380 8811 	msr	BASEPRI, r0
 800c5f0:	4a07      	ldr	r2, [pc, #28]	; (800c610 <pxCurrentTCBConst>)
 800c5f2:	6811      	ldr	r1, [r2, #0]
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5fa:	f382 880b 	msr	PSPLIM, r2
 800c5fe:	f380 8809 	msr	PSP, r0
 800c602:	4718      	bx	r3
 800c604:	f3af 8000 	nop.w
 800c608:	f3af 8000 	nop.w
 800c60c:	f3af 8000 	nop.w

0800c610 <pxCurrentTCBConst>:
 800c610:	2001d2c4 	.word	0x2001d2c4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
	...

0800c620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c620:	f01e 0f04 	tst.w	lr, #4
 800c624:	bf0c      	ite	eq
 800c626:	f3ef 8008 	mrseq	r0, MSP
 800c62a:	f3ef 8009 	mrsne	r0, PSP
 800c62e:	4904      	ldr	r1, [pc, #16]	; (800c640 <svchandler_address_const>)
 800c630:	4708      	bx	r1
 800c632:	bf00      	nop
 800c634:	f3af 8000 	nop.w
 800c638:	f3af 8000 	nop.w
 800c63c:	f3af 8000 	nop.w

0800c640 <svchandler_address_const>:
 800c640:	0800c3ad 	.word	0x0800c3ad
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c654:	f7fe fdb8 	bl	800b1c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c658:	4b4f      	ldr	r3, [pc, #316]	; (800c798 <pvPortMalloc+0x150>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c660:	f000 f8f8 	bl	800c854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c664:	4b4d      	ldr	r3, [pc, #308]	; (800c79c <pvPortMalloc+0x154>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8083 	bne.w	800c778 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d015      	beq.n	800c6a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c678:	2208      	movs	r2, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <pvPortMalloc+0x5c>
 800c69e:	f7ff ff73 	bl	800c588 <ulSetInterruptMask>
 800c6a2:	e7fe      	b.n	800c6a2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d066      	beq.n	800c778 <pvPortMalloc+0x130>
 800c6aa:	4b3d      	ldr	r3, [pc, #244]	; (800c7a0 <pvPortMalloc+0x158>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d861      	bhi.n	800c778 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6b4:	4b3b      	ldr	r3, [pc, #236]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c6b8:	4b3a      	ldr	r3, [pc, #232]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6be:	e004      	b.n	800c6ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <pvPortMalloc+0x94>
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1f1      	bne.n	800c6c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6dc:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <pvPortMalloc+0x150>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d048      	beq.n	800c778 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	4413      	add	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	2308      	movs	r3, #8
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	429a      	cmp	r2, r3
 800c706:	d917      	bls.n	800c738 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <pvPortMalloc+0xd8>
 800c71a:	f7ff ff35 	bl	800c588 <ulSetInterruptMask>
 800c71e:	e7fe      	b.n	800c71e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	1ad2      	subs	r2, r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	f000 f8f0 	bl	800c918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c738:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <pvPortMalloc+0x158>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	4a17      	ldr	r2, [pc, #92]	; (800c7a0 <pvPortMalloc+0x158>)
 800c744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c746:	4b16      	ldr	r3, [pc, #88]	; (800c7a0 <pvPortMalloc+0x158>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b17      	ldr	r3, [pc, #92]	; (800c7a8 <pvPortMalloc+0x160>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d203      	bcs.n	800c75a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <pvPortMalloc+0x158>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <pvPortMalloc+0x160>)
 800c758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <pvPortMalloc+0x154>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	431a      	orrs	r2, r3
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <pvPortMalloc+0x164>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <pvPortMalloc+0x164>)
 800c776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c778:	f7fe fd34 	bl	800b1e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <pvPortMalloc+0x144>
 800c786:	f7ff feff 	bl	800c588 <ulSetInterruptMask>
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x142>
	return pvReturn;
 800c78c:	68fb      	ldr	r3, [r7, #12]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	2001f8f8 	.word	0x2001f8f8
 800c79c:	2001f90c 	.word	0x2001f90c
 800c7a0:	2001f8fc 	.word	0x2001f8fc
 800c7a4:	2001f8f0 	.word	0x2001f8f0
 800c7a8:	2001f900 	.word	0x2001f900
 800c7ac:	2001f904 	.word	0x2001f904

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d03d      	beq.n	800c83e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <vPortFree+0x98>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <vPortFree+0x34>
 800c7de:	f7ff fed3 	bl	800c588 <ulSetInterruptMask>
 800c7e2:	e7fe      	b.n	800c7e2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <vPortFree+0x42>
 800c7ec:	f7ff fecc 	bl	800c588 <ulSetInterruptMask>
 800c7f0:	e7fe      	b.n	800c7f0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <vPortFree+0x98>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01e      	beq.n	800c83e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d11a      	bne.n	800c83e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b0e      	ldr	r3, [pc, #56]	; (800c848 <vPortFree+0x98>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	43db      	mvns	r3, r3
 800c812:	401a      	ands	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c818:	f7fe fcd6 	bl	800b1c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <vPortFree+0x9c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4413      	add	r3, r2
 800c826:	4a09      	ldr	r2, [pc, #36]	; (800c84c <vPortFree+0x9c>)
 800c828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c82a:	68b8      	ldr	r0, [r7, #8]
 800c82c:	f000 f874 	bl	800c918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <vPortFree+0xa0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a06      	ldr	r2, [pc, #24]	; (800c850 <vPortFree+0xa0>)
 800c838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c83a:	f7fe fcd3 	bl	800b1e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	2001f90c 	.word	0x2001f90c
 800c84c:	2001f8fc 	.word	0x2001f8fc
 800c850:	2001f908 	.word	0x2001f908

0800c854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c85a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c860:	4b27      	ldr	r3, [pc, #156]	; (800c900 <prvHeapInit+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00c      	beq.n	800c888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3307      	adds	r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	4a1f      	ldr	r2, [pc, #124]	; (800c900 <prvHeapInit+0xac>)
 800c884:	4413      	add	r3, r2
 800c886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c88c:	4a1d      	ldr	r2, [pc, #116]	; (800c904 <prvHeapInit+0xb0>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c892:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <prvHeapInit+0xb0>)
 800c894:	2200      	movs	r2, #0
 800c896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0307 	bic.w	r3, r3, #7
 800c8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4a15      	ldr	r2, [pc, #84]	; (800c908 <prvHeapInit+0xb4>)
 800c8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <prvHeapInit+0xb4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <prvHeapInit+0xb4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <prvHeapInit+0xb4>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	4a0a      	ldr	r2, [pc, #40]	; (800c90c <prvHeapInit+0xb8>)
 800c8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4a09      	ldr	r2, [pc, #36]	; (800c910 <prvHeapInit+0xbc>)
 800c8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <prvHeapInit+0xc0>)
 800c8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8f2:	601a      	str	r2, [r3, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	2001d8f0 	.word	0x2001d8f0
 800c904:	2001f8f0 	.word	0x2001f8f0
 800c908:	2001f8f8 	.word	0x2001f8f8
 800c90c:	2001f900 	.word	0x2001f900
 800c910:	2001f8fc 	.word	0x2001f8fc
 800c914:	2001f90c 	.word	0x2001f90c

0800c918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c920:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <prvInsertBlockIntoFreeList+0xac>)
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e002      	b.n	800c92c <prvInsertBlockIntoFreeList+0x14>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d8f7      	bhi.n	800c926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d108      	bne.n	800c95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	441a      	add	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d118      	bne.n	800c9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d00d      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	441a      	add	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	e008      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c996:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	e003      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d002      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2001f8f0 	.word	0x2001f8f0
 800c9c8:	2001f8f8 	.word	0x2001f8f8

0800c9cc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
}
 800c9d0:	bf00      	nop
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800c9de:	f003 fb8d 	bl	80100fc <touchgfx_components_init>
  touchgfx_init();
 800c9e2:	f003 fb61 	bl	80100a8 <touchgfx_init>
}
 800c9e6:	bf00      	nop
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800c9ee:	f003 fb8d 	bl	801010c <touchgfx_taskEntry>
}
 800c9f2:	bf00      	nop
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    {
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
    }
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	080238dc 	.word	0x080238dc

0800ca18 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    }
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ffe9 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca26:	2104      	movs	r1, #4
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f015 f830 	bl	8021a8e <_ZdlPvj>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ca44:	887b      	ldrh	r3, [r7, #2]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d010      	beq.n	800ca6c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dc13      	bgt.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d005      	beq.n	800ca62 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800ca56:	e00e      	b.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ca58:	f001 fff0 	bl	800ea3c <_ZN17TypedTextDatabase8getFontsEv>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	e00a      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ca62:	f001 ffeb 	bl	800ea3c <_ZN17TypedTextDatabase8getFontsEv>
 800ca66:	4603      	mov	r3, r0
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	e005      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ca6c:	f001 ffe6 	bl	800ea3c <_ZN17TypedTextDatabase8getFontsEv>
 800ca70:	4603      	mov	r3, r0
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	e000      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800ca76:	2300      	movs	r3, #0
    }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	4a05      	ldr	r2, [pc, #20]	; (800caa0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff ffb1 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	080238c8 	.word	0x080238c8

0800caa4 <_ZN23ApplicationFontProviderD0Ev>:
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ffe7 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
 800cab2:	2104      	movs	r1, #4
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f014 ffea 	bl	8021a8e <_ZdlPvj>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    {
 800cacc:	4a04      	ldr	r2, [pc, #16]	; (800cae0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
    }
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	08023b90 	.word	0x08023b90

0800cae4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
    }
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff ffe9 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800caf2:	2114      	movs	r1, #20
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f014 ffca 	bl	8021a8e <_ZdlPvj>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800cb10:	887b      	ldrh	r3, [r7, #2]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e010      	b.n	800cb3c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3308      	adds	r3, #8
 800cb28:	681c      	ldr	r4, [r3, #0]
 800cb2a:	f107 030f 	add.w	r3, r7, #15
 800cb2e:	f107 0210 	add.w	r2, r7, #16
 800cb32:	8879      	ldrh	r1, [r7, #2]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	47a0      	blx	r4
 800cb38:	6178      	str	r0, [r7, #20]
        return glyph;
 800cb3a:	697b      	ldr	r3, [r7, #20]
    }
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd90      	pop	{r4, r7, pc}

0800cb44 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	89db      	ldrh	r3, [r3, #14]
    }
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8a1b      	ldrh	r3, [r3, #16]
    }
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	88db      	ldrh	r3, [r3, #6]
    }
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	889b      	ldrh	r3, [r3, #4]
    }
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7a9b      	ldrb	r3, [r3, #10]
 800cbb0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cbb4:	b2db      	uxtb	r3, r3
    }
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	7a9b      	ldrb	r3, [r3, #10]
 800cbce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cbd2:	b2db      	uxtb	r3, r3
    }
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	4a05      	ldr	r2, [pc, #20]	; (800cc00 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff ff67 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	080244cc 	.word	0x080244cc

0800cc04 <_ZN8touchgfx9ConstFontD0Ev>:
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff ffe7 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc12:	211c      	movs	r1, #28
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f014 ff3a 	bl	8021a8e <_ZdlPvj>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	4a05      	ldr	r2, [pc, #20]	; (800cc44 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff ffd3 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	08023900 	.word	0x08023900

0800cc48 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ffe7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cc56:	212c      	movs	r1, #44	; 0x2c
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f014 ff18 	bl	8021a8e <_ZdlPvj>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    {
 800cc70:	4a04      	ldr	r2, [pc, #16]	; (800cc84 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	601a      	str	r2, [r3, #0]
    }
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	080238f0 	.word	0x080238f0

0800cc88 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
    }
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff ffe9 	bl	800cc68 <_ZN8touchgfx9TypedTextD1Ev>
 800cc96:	2108      	movs	r1, #8
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f014 fef8 	bl	8021a8e <_ZdlPvj>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08e      	sub	sp, #56	; 0x38
 800ccdc:	af0a      	add	r7, sp, #40	; 0x28
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	4611      	mov	r1, r2
 800cce4:	461a      	mov	r2, r3
 800cce6:	460b      	mov	r3, r1
 800cce8:	80fb      	strh	r3, [r7, #6]
 800ccea:	4613      	mov	r3, r2
 800ccec:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	88b9      	ldrh	r1, [r7, #4]
 800ccf2:	88fa      	ldrh	r2, [r7, #6]
 800ccf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccf8:	9308      	str	r3, [sp, #32]
 800ccfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800cd02:	9306      	str	r3, [sp, #24]
 800cd04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd08:	9305      	str	r3, [sp, #20]
 800cd0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd0e:	9304      	str	r3, [sp, #16]
 800cd10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd14:	9303      	str	r3, [sp, #12]
 800cd16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd1a:	9302      	str	r3, [sp, #8]
 800cd1c:	7f3b      	ldrb	r3, [r7, #28]
 800cd1e:	9301      	str	r3, [sp, #4]
 800cd20:	8b3b      	ldrh	r3, [r7, #24]
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	460b      	mov	r3, r1
 800cd26:	68b9      	ldr	r1, [r7, #8]
 800cd28:	f007 fd66 	bl	80147f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800cd2c:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd36:	61da      	str	r2, [r3, #28]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd3c:	621a      	str	r2, [r3, #32]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd42:	625a      	str	r2, [r3, #36]	; 0x24
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd48:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	08023900 	.word	0x08023900

0800cd58 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	889b      	ldrh	r3, [r3, #4]
 800cd6c:	0adb      	lsrs	r3, r3, #11
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	4413      	add	r3, r2
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4413      	add	r3, r2
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b089      	sub	sp, #36	; 0x24
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	460b      	mov	r3, r1
 800cd94:	607a      	str	r2, [r7, #4]
 800cd96:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7b1b      	ldrb	r3, [r3, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	e030      	b.n	800ce0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6a1a      	ldr	r2, [r3, #32]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	7b5b      	ldrb	r3, [r3, #13]
 800cdb6:	021b      	lsls	r3, r3, #8
 800cdb8:	b21b      	sxth	r3, r3
 800cdba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdbe:	b219      	sxth	r1, r3
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	7adb      	ldrb	r3, [r3, #11]
 800cdc4:	b21b      	sxth	r3, r3
 800cdc6:	430b      	orrs	r3, r1
 800cdc8:	b21b      	sxth	r3, r3
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7b1b      	ldrb	r3, [r3, #12]
 800cdd6:	837b      	strh	r3, [r7, #26]
 800cdd8:	8b7b      	ldrh	r3, [r7, #26]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d015      	beq.n	800ce0a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	897a      	ldrh	r2, [r7, #10]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d103      	bne.n	800cdf0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cdee:	e00d      	b.n	800ce0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	897a      	ldrh	r2, [r7, #10]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d306      	bcc.n	800ce08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cdfa:	8b7b      	ldrh	r3, [r7, #26]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	837b      	strh	r3, [r7, #26]
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	3304      	adds	r3, #4
 800ce04:	61fb      	str	r3, [r7, #28]
 800ce06:	e7e7      	b.n	800cdd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800ce08:	bf00      	nop
        }
    }
    return 0;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3724      	adds	r7, #36	; 0x24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__tcf_0+0xc>)
 800ce1e:	f7ff ff01 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	2001f910 	.word	0x2001f910

0800ce28 <_Z23getFont_verdana_10_4bppv>:
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08e      	sub	sp, #56	; 0x38
 800ce2c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800ce2e:	4b21      	ldr	r3, [pc, #132]	; (800ceb4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce30:	e8d3 3f8f 	ldab	r3, [r3]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	bf0c      	ite	eq
 800ce3e:	2301      	moveq	r3, #1
 800ce40:	2300      	movne	r3, #0
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d030      	beq.n	800ceaa <_Z23getFont_verdana_10_4bppv+0x82>
 800ce48:	481a      	ldr	r0, [pc, #104]	; (800ceb4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce4a:	f014 fe22 	bl	8021a92 <__cxa_guard_acquire>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bf14      	ite	ne
 800ce54:	2301      	movne	r3, #1
 800ce56:	2300      	moveq	r3, #0
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d025      	beq.n	800ceaa <_Z23getFont_verdana_10_4bppv+0x82>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	930c      	str	r3, [sp, #48]	; 0x30
 800ce62:	2300      	movs	r3, #0
 800ce64:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce66:	2300      	movs	r3, #0
 800ce68:	930a      	str	r3, [sp, #40]	; 0x28
 800ce6a:	233f      	movs	r3, #63	; 0x3f
 800ce6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce6e:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <_Z23getFont_verdana_10_4bppv+0x90>)
 800ce70:	9308      	str	r3, [sp, #32]
 800ce72:	4b12      	ldr	r3, [pc, #72]	; (800cebc <_Z23getFont_verdana_10_4bppv+0x94>)
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	2300      	movs	r3, #0
 800ce78:	9306      	str	r3, [sp, #24]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9305      	str	r3, [sp, #20]
 800ce7e:	2301      	movs	r3, #1
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	2304      	movs	r3, #4
 800ce84:	9303      	str	r3, [sp, #12]
 800ce86:	2300      	movs	r3, #0
 800ce88:	9302      	str	r3, [sp, #8]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	230a      	movs	r3, #10
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	230a      	movs	r3, #10
 800ce94:	2201      	movs	r2, #1
 800ce96:	490a      	ldr	r1, [pc, #40]	; (800cec0 <_Z23getFont_verdana_10_4bppv+0x98>)
 800ce98:	480a      	ldr	r0, [pc, #40]	; (800cec4 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800ce9a:	f7ff ff1d 	bl	800ccd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ce9e:	480a      	ldr	r0, [pc, #40]	; (800cec8 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800cea0:	f014 fe40 	bl	8021b24 <atexit>
 800cea4:	4803      	ldr	r0, [pc, #12]	; (800ceb4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800cea6:	f014 fe00 	bl	8021aaa <__cxa_guard_release>
    return verdana_10_4bpp;
 800ceaa:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	2001f93c 	.word	0x2001f93c
 800ceb8:	08024cc8 	.word	0x08024cc8
 800cebc:	08024ce0 	.word	0x08024ce0
 800cec0:	08024c38 	.word	0x08024c38
 800cec4:	2001f910 	.word	0x2001f910
 800cec8:	0800ce19 	.word	0x0800ce19

0800cecc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
 800ced0:	4801      	ldr	r0, [pc, #4]	; (800ced8 <__tcf_0+0xc>)
 800ced2:	f7ff fea7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	2001f940 	.word	0x2001f940

0800cedc <_Z23getFont_verdana_20_4bppv>:
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08e      	sub	sp, #56	; 0x38
 800cee0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800cee2:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cee4:	e8d3 3f8f 	ldab	r3, [r3]
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bf0c      	ite	eq
 800cef2:	2301      	moveq	r3, #1
 800cef4:	2300      	movne	r3, #0
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d030      	beq.n	800cf5e <_Z23getFont_verdana_20_4bppv+0x82>
 800cefc:	481a      	ldr	r0, [pc, #104]	; (800cf68 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cefe:	f014 fdc8 	bl	8021a92 <__cxa_guard_acquire>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bf14      	ite	ne
 800cf08:	2301      	movne	r3, #1
 800cf0a:	2300      	moveq	r3, #0
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d025      	beq.n	800cf5e <_Z23getFont_verdana_20_4bppv+0x82>
 800cf12:	2300      	movs	r3, #0
 800cf14:	930c      	str	r3, [sp, #48]	; 0x30
 800cf16:	2300      	movs	r3, #0
 800cf18:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	930a      	str	r3, [sp, #40]	; 0x28
 800cf1e:	233f      	movs	r3, #63	; 0x3f
 800cf20:	9309      	str	r3, [sp, #36]	; 0x24
 800cf22:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <_Z23getFont_verdana_20_4bppv+0x90>)
 800cf24:	9308      	str	r3, [sp, #32]
 800cf26:	4b12      	ldr	r3, [pc, #72]	; (800cf70 <_Z23getFont_verdana_20_4bppv+0x94>)
 800cf28:	9307      	str	r3, [sp, #28]
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	9306      	str	r3, [sp, #24]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	2301      	movs	r3, #1
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	2304      	movs	r3, #4
 800cf38:	9303      	str	r3, [sp, #12]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	2314      	movs	r3, #20
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	2314      	movs	r3, #20
 800cf48:	2208      	movs	r2, #8
 800cf4a:	490a      	ldr	r1, [pc, #40]	; (800cf74 <_Z23getFont_verdana_20_4bppv+0x98>)
 800cf4c:	480a      	ldr	r0, [pc, #40]	; (800cf78 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800cf4e:	f7ff fec3 	bl	800ccd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cf52:	480a      	ldr	r0, [pc, #40]	; (800cf7c <_Z23getFont_verdana_20_4bppv+0xa0>)
 800cf54:	f014 fde6 	bl	8021b24 <atexit>
 800cf58:	4803      	ldr	r0, [pc, #12]	; (800cf68 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cf5a:	f014 fda6 	bl	8021aaa <__cxa_guard_release>
    return verdana_20_4bpp;
 800cf5e:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	2001f96c 	.word	0x2001f96c
 800cf6c:	08024ccc 	.word	0x08024ccc
 800cf70:	08024ce4 	.word	0x08024ce4
 800cf74:	08024c48 	.word	0x08024c48
 800cf78:	2001f940 	.word	0x2001f940
 800cf7c:	0800cecd 	.word	0x0800cecd

0800cf80 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf80:	b580      	push	{r7, lr}
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <__tcf_0+0xc>)
 800cf86:	f7ff fe4d 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	2001f970 	.word	0x2001f970

0800cf90 <_Z23getFont_verdana_40_4bppv>:
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08e      	sub	sp, #56	; 0x38
 800cf94:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf96:	4b21      	ldr	r3, [pc, #132]	; (800d01c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cf98:	e8d3 3f8f 	ldab	r3, [r3]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	2300      	movne	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d030      	beq.n	800d012 <_Z23getFont_verdana_40_4bppv+0x82>
 800cfb0:	481a      	ldr	r0, [pc, #104]	; (800d01c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cfb2:	f014 fd6e 	bl	8021a92 <__cxa_guard_acquire>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bf14      	ite	ne
 800cfbc:	2301      	movne	r3, #1
 800cfbe:	2300      	moveq	r3, #0
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d025      	beq.n	800d012 <_Z23getFont_verdana_40_4bppv+0x82>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	930c      	str	r3, [sp, #48]	; 0x30
 800cfca:	2300      	movs	r3, #0
 800cfcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfce:	2300      	movs	r3, #0
 800cfd0:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd2:	233f      	movs	r3, #63	; 0x3f
 800cfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <_Z23getFont_verdana_40_4bppv+0x90>)
 800cfd8:	9308      	str	r3, [sp, #32]
 800cfda:	4b12      	ldr	r3, [pc, #72]	; (800d024 <_Z23getFont_verdana_40_4bppv+0x94>)
 800cfdc:	9307      	str	r3, [sp, #28]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	9306      	str	r3, [sp, #24]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	2304      	movs	r3, #4
 800cfec:	9303      	str	r3, [sp, #12]
 800cfee:	2300      	movs	r3, #0
 800cff0:	9302      	str	r3, [sp, #8]
 800cff2:	2300      	movs	r3, #0
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	2328      	movs	r3, #40	; 0x28
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	2328      	movs	r3, #40	; 0x28
 800cffc:	2201      	movs	r2, #1
 800cffe:	490a      	ldr	r1, [pc, #40]	; (800d028 <_Z23getFont_verdana_40_4bppv+0x98>)
 800d000:	480a      	ldr	r0, [pc, #40]	; (800d02c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800d002:	f7ff fe69 	bl	800ccd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d006:	480a      	ldr	r0, [pc, #40]	; (800d030 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800d008:	f014 fd8c 	bl	8021b24 <atexit>
 800d00c:	4803      	ldr	r0, [pc, #12]	; (800d01c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d00e:	f014 fd4c 	bl	8021aaa <__cxa_guard_release>
    return verdana_40_4bpp;
 800d012:	4b06      	ldr	r3, [pc, #24]	; (800d02c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800d014:	4618      	mov	r0, r3
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2001f99c 	.word	0x2001f99c
 800d020:	08024cdc 	.word	0x08024cdc
 800d024:	08024ce8 	.word	0x08024ce8
 800d028:	08024cb8 	.word	0x08024cb8
 800d02c:	2001f970 	.word	0x2001f970
 800d030:	0800cf81 	.word	0x0800cf81

0800d034 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d08e:	b480      	push	{r7}
 800d090:	b083      	sub	sp, #12
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	460b      	mov	r3, r1
 800d098:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d09a:	bf00      	nop
 800d09c:	370c      	adds	r7, #12
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d0a6:	b480      	push	{r7}
 800d0a8:	b083      	sub	sp, #12
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
    {
    }
 800d0ae:	bf00      	nop
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
    {
    }
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
	...

0800d0d0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
    {
 800d0d8:	4a04      	ldr	r2, [pc, #16]	; (800d0ec <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	601a      	str	r2, [r3, #0]
    }
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	08023a70 	.word	0x08023a70

0800d0f0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
    }
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff ffe9 	bl	800d0d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d0fe:	2104      	movs	r1, #4
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f014 fcc4 	bl	8021a8e <_ZdlPvj>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
    {
    }
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d14e:	6810      	ldr	r0, [r2, #0]
 800d150:	6851      	ldr	r1, [r2, #4]
 800d152:	c303      	stmia	r3!, {r0, r1}
    }
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3304      	adds	r3, #4
 800d16c:	4618      	mov	r0, r3
 800d16e:	f006 fa76 	bl	801365e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
    {
 800d184:	4a04      	ldr	r2, [pc, #16]	; (800d198 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	601a      	str	r2, [r3, #0]
    }
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4618      	mov	r0, r3
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	08023a58 	.word	0x08023a58

0800d19c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
    }
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7ff ffe9 	bl	800d17c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d1aa:	2104      	movs	r1, #4
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f014 fc6e 	bl	8021a8e <_ZdlPvj>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
    {
        return instance;
 800d1c0:	4b03      	ldr	r3, [pc, #12]	; (800d1d0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
    }
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	2001fda4 	.word	0x2001fda4

0800d1d4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d008      	beq.n	800d1f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d003      	beq.n	800d1f6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d1ee:	4b06      	ldr	r3, [pc, #24]	; (800d208 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f4:	e002      	b.n	800d1fc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d1f6:	4b04      	ldr	r3, [pc, #16]	; (800d208 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
    }
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	2001fda4 	.word	0x2001fda4

0800d20c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d214:	4a07      	ldr	r2, [pc, #28]	; (800d234 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	605a      	str	r2, [r3, #4]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	721a      	strb	r2, [r3, #8]
    {
    }
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4618      	mov	r0, r3
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	08023a34 	.word	0x08023a34

0800d238 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
    {
 800d240:	4a04      	ldr	r2, [pc, #16]	; (800d254 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
    }
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	08023a34 	.word	0x08023a34

0800d258 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
    }
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ffe9 	bl	800d238 <_ZN8touchgfx10TransitionD1Ev>
 800d266:	210c      	movs	r1, #12
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f014 fc10 	bl	8021a8e <_ZdlPvj>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
    {
    }
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
    {
    }
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
    {
    }
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d2bc:	f006 f9aa 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f006 fdee 	bl	8013ea4 <_ZN8touchgfx11Application10invalidateEv>
    }
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	605a      	str	r2, [r3, #4]
    }
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	4a05      	ldr	r2, [pc, #20]	; (800d30c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fee7 	bl	800d0d0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	08024418 	.word	0x08024418

0800d310 <_ZN8touchgfx11ApplicationD0Ev>:
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff ffe7 	bl	800d2ec <_ZN8touchgfx11ApplicationD1Ev>
 800d31e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f014 fbb3 	bl	8021a8e <_ZdlPvj>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
	...

0800d334 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	f006 fa2a 	bl	8013798 <_ZN8touchgfx11ApplicationC1Ev>
 800d344:	4a09      	ldr	r2, [pc, #36]	; (800d36c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a04      	ldr	r2, [pc, #16]	; (800d370 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d35e:	6013      	str	r3, [r2, #0]
    }
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	080239e8 	.word	0x080239e8
 800d370:	2001fdf0 	.word	0x2001fdf0

0800d374 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f804 	bl	800d38a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d382:	bf00      	nop
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00f      	beq.n	800d3bc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	330c      	adds	r3, #12
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	4798      	blx	r3
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e000      	b.n	800d3be <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00e      	beq.n	800d3e0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	601a      	str	r2, [r3, #0]
    }
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	4a05      	ldr	r2, [pc, #20]	; (800d424 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	601a      	str	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff ff69 	bl	800d2ec <_ZN8touchgfx11ApplicationD1Ev>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	080239e8 	.word	0x080239e8

0800d428 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff ffe7 	bl	800d404 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d436:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f014 fb27 	bl	8021a8e <_ZdlPvj>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	4a08      	ldr	r2, [pc, #32]	; (800d478 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d460:	4618      	mov	r0, r3
 800d462:	f000 fac7 	bl	800d9f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff ffcb 	bl	800d404 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	08023984 	.word	0x08023984

0800d47c <_ZN23FrontendApplicationBaseD0Ev>:
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff ffe1 	bl	800d44c <_ZN23FrontendApplicationBaseD1Ev>
 800d48a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f014 fafd 	bl	8021a8e <_ZdlPvj>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b082      	sub	sp, #8
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f87c 	bl	800d5a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800d4ac:	bf00      	nop
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	721a      	strb	r2, [r3, #8]
    }
 800d4c2:	bf00      	nop
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	605a      	str	r2, [r3, #4]
    }
 800d4de:	bf00      	nop
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
	...

0800d4ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff ff1a 	bl	800d334 <_ZN8touchgfx14MVPApplicationC1Ev>
 800d500:	4a13      	ldr	r2, [pc, #76]	; (800d550 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 f89f 	bl	800d650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800d522:	f7ff fe4b 	bl	800d1bc <_ZN8touchgfx3HAL11getInstanceEv>
 800d526:	4603      	mov	r3, r0
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	3208      	adds	r2, #8
 800d52c:	6812      	ldr	r2, [r2, #0]
 800d52e:	2100      	movs	r1, #0
 800d530:	4618      	mov	r0, r3
 800d532:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800d534:	2000      	movs	r0, #0
 800d536:	f001 fa09 	bl	800e94c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800d53a:	f7ff fe4b 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 800d53e:	4603      	mov	r3, r0
 800d540:	4618      	mov	r0, r3
 800d542:	f00d fba8 	bl	801ac96 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	08023984 	.word	0x08023984

0800d554 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff ffe9 	bl	800d554 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	605a      	str	r2, [r3, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	3308      	adds	r3, #8
 800d590:	3208      	adds	r2, #8
 800d592:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d596:	e883 0003 	stmia.w	r3, {r0, r1}
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b089      	sub	sp, #36	; 0x24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800d5b2:	4b10      	ldr	r3, [pc, #64]	; (800d5f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800d5b4:	61bb      	str	r3, [r7, #24]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	f107 0008 	add.w	r0, r7, #8
 800d5be:	f107 0318 	add.w	r3, r7, #24
 800d5c2:	cb0c      	ldmia	r3, {r2, r3}
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	f000 f85f 	bl	800d688 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f7ff ffcb 	bl	800d56c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800d5d6:	f107 0308 	add.w	r3, r7, #8
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fa0a 	bl	800d9f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800d5ec:	bf00      	nop
 800d5ee:	3724      	adds	r7, #36	; 0x24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd90      	pop	{r4, r7, pc}
 800d5f4:	0800d5f9 	.word	0x0800d5f9

0800d5f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d60c:	461a      	mov	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	4b04      	ldr	r3, [pc, #16]	; (800d628 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800d618:	4804      	ldr	r0, [pc, #16]	; (800d62c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800d61a:	f000 f867 	bl	800d6ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800d61e:	bf00      	nop
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2001fde4 	.word	0x2001fde4
 800d62c:	2001fde0 	.word	0x2001fde0

0800d630 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	4a04      	ldr	r2, [pc, #16]	; (800d64c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4618      	mov	r0, r3
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	08023a58 	.word	0x08023a58

0800d650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff ffe8 	bl	800d630 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d660:	4a08      	ldr	r2, [pc, #32]	; (800d684 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	609a      	str	r2, [r3, #8]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	60da      	str	r2, [r3, #12]
    {
    }
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	080239d0 	.word	0x080239d0

0800d688 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	4639      	mov	r1, r7
 800d694:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7ff ffc8 	bl	800d630 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d6a0:	4a08      	ldr	r2, [pc, #32]	; (800d6c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	605a      	str	r2, [r3, #4]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	463a      	mov	r2, r7
 800d6b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d6b6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	080239d0 	.word	0x080239d0

0800d6c8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fd9a 	bl	800d20c <_ZN8touchgfx10TransitionC1Ev>
 800d6d8:	4a03      	ldr	r2, [pc, #12]	; (800d6e8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	08023960 	.word	0x08023960

0800d6ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b08f      	sub	sp, #60	; 0x3c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3320      	adds	r3, #32
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4610      	mov	r0, r2
 800d70a:	4798      	blx	r3
 800d70c:	4603      	mov	r3, r0
 800d70e:	2bdf      	cmp	r3, #223	; 0xdf
 800d710:	d805      	bhi.n	800d71e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800d712:	4b7e      	ldr	r3, [pc, #504]	; (800d90c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800d714:	4a7e      	ldr	r2, [pc, #504]	; (800d910 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d716:	21a3      	movs	r1, #163	; 0xa3
 800d718:	487e      	ldr	r0, [pc, #504]	; (800d914 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d71a:	f014 f9e5 	bl	8021ae8 <__assert_func>
 800d71e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	3320      	adds	r3, #32
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4610      	mov	r0, r2
 800d730:	4798      	blx	r3
 800d732:	4603      	mov	r3, r0
 800d734:	2b0f      	cmp	r3, #15
 800d736:	d805      	bhi.n	800d744 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800d738:	4b77      	ldr	r3, [pc, #476]	; (800d918 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d73a:	4a75      	ldr	r2, [pc, #468]	; (800d910 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d73c:	21a4      	movs	r1, #164	; 0xa4
 800d73e:	4875      	ldr	r0, [pc, #468]	; (800d914 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d740:	f014 f9d2 	bl	8021ae8 <__assert_func>
 800d744:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68da      	ldr	r2, [r3, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3320      	adds	r3, #32
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4610      	mov	r0, r2
 800d756:	4798      	blx	r3
 800d758:	4603      	mov	r3, r0
 800d75a:	2b0b      	cmp	r3, #11
 800d75c:	d805      	bhi.n	800d76a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800d75e:	4b6f      	ldr	r3, [pc, #444]	; (800d91c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d760:	4a6b      	ldr	r2, [pc, #428]	; (800d910 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d762:	21a5      	movs	r1, #165	; 0xa5
 800d764:	486b      	ldr	r0, [pc, #428]	; (800d914 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d766:	f014 f9bf 	bl	8021ae8 <__assert_func>
 800d76a:	bf00      	nop
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d778:	f005 ff4c 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 800d77c:	4603      	mov	r3, r0
 800d77e:	4618      	mov	r0, r3
 800d780:	f7ff fcee 	bl	800d160 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d008      	beq.n	800d79e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	330c      	adds	r3, #12
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4610      	mov	r0, r2
 800d79c:	4798      	blx	r3
    if (*currentTrans)
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4798      	blx	r3
    if (*currentScreen)
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d008      	beq.n	800d7d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3314      	adds	r3, #20
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	4798      	blx	r3
    if (*currentPresenter)
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d008      	beq.n	800d7ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	4798      	blx	r3
    if (*currentScreen)
 800d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d007      	beq.n	800d802 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4610      	mov	r0, r2
 800d800:	4798      	blx	r3
    if (*currentPresenter)
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d008      	beq.n	800d81c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3308      	adds	r3, #8
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4610      	mov	r0, r2
 800d81a:	4798      	blx	r3
}
 800d81c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	2100      	movs	r1, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f87b 	bl	800d920 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d82a:	4603      	mov	r3, r0
 800d82c:	4619      	mov	r1, r3
 800d82e:	200c      	movs	r0, #12
 800d830:	f7ff fc00 	bl	800d034 <_ZnwjPv>
 800d834:	4604      	mov	r4, r0
 800d836:	4620      	mov	r0, r4
 800d838:	f7ff ff46 	bl	800d6c8 <_ZN8touchgfx12NoTransitionC1Ev>
 800d83c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f000 f87e 	bl	800d946 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d84a:	4603      	mov	r3, r0
 800d84c:	4619      	mov	r1, r3
 800d84e:	20e0      	movs	r0, #224	; 0xe0
 800d850:	f7ff fbf0 	bl	800d034 <_ZnwjPv>
 800d854:	4604      	mov	r4, r0
 800d856:	4620      	mov	r0, r4
 800d858:	f001 fa8a 	bl	800ed70 <_ZN11Screen1ViewC1Ev>
 800d85c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f000 f881 	bl	800d96c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d86a:	4603      	mov	r3, r0
 800d86c:	4619      	mov	r1, r3
 800d86e:	2010      	movs	r0, #16
 800d870:	f7ff fbe0 	bl	800d034 <_ZnwjPv>
 800d874:	4604      	mov	r4, r0
 800d876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d878:	4620      	mov	r0, r4
 800d87a:	f001 fa23 	bl	800ecc4 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d87e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d884:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d88a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d890:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	3304      	adds	r3, #4
 800d89c:	e000      	b.n	800d8a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d8a4:	f7ff fda0 	bl	800d3e8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fe0d 	bl	800d4ce <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 f86a 	bl	800d992 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	61bb      	str	r3, [r7, #24]
 800d8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	330c      	adds	r3, #12
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69f8      	ldr	r0, [r7, #28]
 800d8d4:	4798      	blx	r3
    newPresenter->activate();
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	69b8      	ldr	r0, [r7, #24]
 800d8de:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d8e0:	6979      	ldr	r1, [r7, #20]
 800d8e2:	69f8      	ldr	r0, [r7, #28]
 800d8e4:	f007 fb26 	bl	8014f34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3310      	adds	r3, #16
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6978      	ldr	r0, [r7, #20]
 800d8f2:	4798      	blx	r3
    newTransition->invalidate();
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3314      	adds	r3, #20
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6978      	ldr	r0, [r7, #20]
 800d8fe:	4798      	blx	r3
}
 800d900:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d904:	4618      	mov	r0, r3
 800d906:	373c      	adds	r7, #60	; 0x3c
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd90      	pop	{r4, r7, pc}
 800d90c:	08022d88 	.word	0x08022d88
 800d910:	08022e18 	.word	0x08022e18
 800d914:	08022f1c 	.word	0x08022f1c
 800d918:	08022f60 	.word	0x08022f60
 800d91c:	08023004 	.word	0x08023004

0800d920 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3324      	adds	r3, #36	; 0x24
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	887a      	ldrh	r2, [r7, #2]
 800d936:	4611      	mov	r1, r2
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	4798      	blx	r3
 800d93c:	4603      	mov	r3, r0
    }
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	460b      	mov	r3, r1
 800d950:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3324      	adds	r3, #36	; 0x24
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	887a      	ldrh	r2, [r7, #2]
 800d95c:	4611      	mov	r1, r2
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	4798      	blx	r3
 800d962:	4603      	mov	r3, r0
    }
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3324      	adds	r3, #36	; 0x24
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	887a      	ldrh	r2, [r7, #2]
 800d982:	4611      	mov	r1, r2
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	4798      	blx	r3
 800d988:	4603      	mov	r3, r0
    }
 800d98a:	4618      	mov	r0, r3
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d992:	b480      	push	{r7}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d9a2:	bf00      	nop
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
	...

0800d9b0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	4a05      	ldr	r2, [pc, #20]	; (800d9d0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fc39 	bl	800d238 <_ZN8touchgfx10TransitionD1Ev>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	08023960 	.word	0x08023960

0800d9d4 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ffe7 	bl	800d9b0 <_ZN8touchgfx12NoTransitionD1Ev>
 800d9e2:	210c      	movs	r1, #12
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f014 f852 	bl	8021a8e <_ZdlPvj>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	4a05      	ldr	r2, [pc, #20]	; (800da14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff fbb9 	bl	800d17c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	080239d0 	.word	0x080239d0

0800da18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ffe7 	bl	800d9f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800da26:	2110      	movs	r1, #16
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f014 f830 	bl	8021a8e <_ZdlPvj>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4618      	mov	r0, r3
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	68d2      	ldr	r2, [r2, #12]
 800da48:	1052      	asrs	r2, r2, #1
 800da4a:	1899      	adds	r1, r3, r2
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f003 0301 	and.w	r3, r3, #1
 800da54:	2b00      	cmp	r3, #0
 800da56:	d102      	bne.n	800da5e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	e00a      	b.n	800da74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	68d2      	ldr	r2, [r2, #12]
 800da66:	1052      	asrs	r2, r2, #1
 800da68:	4413      	add	r3, r2
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	6892      	ldr	r2, [r2, #8]
 800da70:	4413      	add	r3, r2
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4608      	mov	r0, r1
 800da76:	4798      	blx	r3
    }
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d010      	beq.n	800dab2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d107      	bne.n	800daa8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d101      	bne.n	800daa8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800daa4:	2301      	movs	r3, #1
 800daa6:	e000      	b.n	800daaa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800daa8:	2300      	movs	r3, #0
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d001      	beq.n	800dab2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800dab2:	2300      	movs	r3, #0
    }
 800dab4:	4618      	mov	r0, r3
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
        : color(col)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	601a      	str	r2, [r3, #0]
    {
    }
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4618      	mov	r0, r3
 800dad4:	370c      	adds	r7, #12
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800dade:	b480      	push	{r7}
 800dae0:	b083      	sub	sp, #12
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	801a      	strh	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	805a      	strh	r2, [r3, #2]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	809a      	strh	r2, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	80da      	strh	r2, [r3, #6]
    {
    }
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	887a      	ldrh	r2, [r7, #2]
 800db1c:	801a      	strh	r2, [r3, #0]
    {
    }
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800db34:	4a14      	ldr	r2, [pc, #80]	; (800db88 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	3304      	adds	r3, #4
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ffcd 	bl	800dade <_ZN8touchgfx4RectC1Ev>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	330c      	adds	r3, #12
 800db48:	4618      	mov	r0, r3
 800db4a:	f7ff ffc8 	bl	800dade <_ZN8touchgfx4RectC1Ev>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	615a      	str	r2, [r3, #20]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	619a      	str	r2, [r3, #24]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	61da      	str	r2, [r3, #28]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	841a      	strh	r2, [r3, #32]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	845a      	strh	r2, [r3, #34]	; 0x22
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	08024464 	.word	0x08024464

0800db8c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
    {
 800db94:	4a04      	ldr	r2, [pc, #16]	; (800dba8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	601a      	str	r2, [r3, #0]
    }
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	08024464 	.word	0x08024464

0800dbac <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
    }
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff ffe9 	bl	800db8c <_ZN8touchgfx8DrawableD1Ev>
 800dbba:	2128      	movs	r1, #40	; 0x28
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f013 ff66 	bl	8021a8e <_ZdlPvj>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d005      	beq.n	800dbea <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3314      	adds	r3, #20
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	4798      	blx	r3
        }
    }
 800dbea:	bf00      	nop
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800dbf2:	b480      	push	{r7}
 800dbf4:	b083      	sub	sp, #12
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dbfa:	2300      	movs	r3, #0
    }
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	4608      	mov	r0, r1
 800dc12:	4611      	mov	r1, r2
 800dc14:	461a      	mov	r2, r3
 800dc16:	4603      	mov	r3, r0
 800dc18:	817b      	strh	r3, [r7, #10]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	813b      	strh	r3, [r7, #8]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800dc22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dc26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f82a 	bl	800dc86 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800dc32:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800dc36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 f87e 	bl	800dd3e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800dc42:	bf00      	nop
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	460b      	mov	r3, r1
 800dc54:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	887a      	ldrh	r2, [r7, #2]
 800dc5a:	809a      	strh	r2, [r3, #4]
    }
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	887a      	ldrh	r2, [r7, #2]
 800dc78:	80da      	strh	r2, [r3, #6]
    }
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b082      	sub	sp, #8
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	807b      	strh	r3, [r7, #2]
 800dc92:	4613      	mov	r3, r2
 800dc94:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3330      	adds	r3, #48	; 0x30
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dca2:	4611      	mov	r1, r2
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	4798      	blx	r3
        setY(y);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3334      	adds	r3, #52	; 0x34
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	4798      	blx	r3
    }
 800dcba:	bf00      	nop
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	460b      	mov	r3, r1
 800dccc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	887a      	ldrh	r2, [r7, #2]
 800dcd2:	811a      	strh	r2, [r3, #8]
    }
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	887a      	ldrh	r2, [r7, #2]
 800dcf0:	815a      	strh	r2, [r3, #10]
    }
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800dcfe:	b480      	push	{r7}
 800dd00:	b083      	sub	sp, #12
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
    {
    }
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd32:	bf00      	nop
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	460b      	mov	r3, r1
 800dd48:	807b      	strh	r3, [r7, #2]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3338      	adds	r3, #56	; 0x38
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	4798      	blx	r3
        setHeight(height);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	333c      	adds	r3, #60	; 0x3c
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
    }
 800dd72:	bf00      	nop
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dd7a:	b480      	push	{r7}
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
    {
    }
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	807b      	strh	r3, [r7, #2]
 800dde4:	4613      	mov	r3, r2
 800dde6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3354      	adds	r3, #84	; 0x54
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	8879      	ldrh	r1, [r7, #2]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ddf8:	b292      	uxth	r2, r2
 800ddfa:	1a8a      	subs	r2, r1, r2
 800ddfc:	b292      	uxth	r2, r2
 800ddfe:	b210      	sxth	r0, r2
 800de00:	8839      	ldrh	r1, [r7, #0]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800de08:	b292      	uxth	r2, r2
 800de0a:	1a8a      	subs	r2, r1, r2
 800de0c:	b292      	uxth	r2, r2
 800de0e:	b212      	sxth	r2, r2
 800de10:	4601      	mov	r1, r0
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	4798      	blx	r3
    }
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de2c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de34:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de3c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b084      	sub	sp, #16
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7ff ffe1 	bl	800de1e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	601a      	str	r2, [r3, #0]
    }
 800de6a:	bf00      	nop
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    {
 800de7c:	4a06      	ldr	r2, [pc, #24]	; (800de98 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3304      	adds	r3, #4
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fb84 	bl	800e594 <_ZN8touchgfx9ContainerD1Ev>
    }
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	08024568 	.word	0x08024568

0800de9c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
    }
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff ffe5 	bl	800de74 <_ZN8touchgfx6ScreenD1Ev>
 800deaa:	213c      	movs	r1, #60	; 0x3c
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f013 fdee 	bl	8021a8e <_ZdlPvj>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
    {
    }
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
    {
    }
 800ded8:	bf00      	nop
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
    {
    }
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    {
    }
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3304      	adds	r3, #4
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f002 fb95 	bl	8010664 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	60f8      	str	r0, [r7, #12]
 800df4a:	607b      	str	r3, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	817b      	strh	r3, [r7, #10]
 800df50:	4613      	mov	r3, r2
 800df52:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff ff24 	bl	800dda4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d008      	beq.n	800df74 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ff2a 	bl	800ddbe <_ZNK8touchgfx8Drawable11isTouchableEv>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df70:	2301      	movs	r3, #1
 800df72:	e000      	b.n	800df76 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800df74:	2300      	movs	r3, #0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d002      	beq.n	800df80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	601a      	str	r2, [r3, #0]
        }
    }
 800df80:	bf00      	nop
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff fdca 	bl	800db2c <_ZN8touchgfx8DrawableC1Ev>
 800df98:	4a03      	ldr	r2, [pc, #12]	; (800dfa8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	601a      	str	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	08023b00 	.word	0x08023b00

0800dfac <_ZN8touchgfx6WidgetD1Ev>:
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	4a05      	ldr	r2, [pc, #20]	; (800dfcc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff fde5 	bl	800db8c <_ZN8touchgfx8DrawableD1Ev>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	08023b00 	.word	0x08023b00

0800dfd0 <_ZN8touchgfx6WidgetD0Ev>:
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7ff ffe7 	bl	800dfac <_ZN8touchgfx6WidgetD1Ev>
 800dfde:	2128      	movs	r1, #40	; 0x28
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f013 fd54 	bl	8021a8e <_ZdlPvj>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4618      	mov	r0, r3
 800dffc:	2326      	movs	r3, #38	; 0x26
 800dffe:	461a      	mov	r2, r3
 800e000:	2100      	movs	r1, #0
 800e002:	f013 fef6 	bl	8021df2 <memset>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff ffbd 	bl	800df88 <_ZN8touchgfx6WidgetC1Ev>
 800e00e:	4a09      	ldr	r2, [pc, #36]	; (800e034 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	22ff      	movs	r2, #255	; 0xff
 800e018:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3328      	adds	r3, #40	; 0x28
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff fd4c 	bl	800dac0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	08024270 	.word	0x08024270

0800e038 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e060:	4a06      	ldr	r2, [pc, #24]	; (800e07c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	887a      	ldrh	r2, [r7, #2]
 800e06a:	809a      	strh	r2, [r3, #4]
    }
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	080238f0 	.word	0x080238f0

0800e080 <_ZN8touchgfx14AbstractButtonD1Ev>:
/**
 * This class defines an abstract interface for button-like elements. A button is a clickable
 * element that has two states: pressed and released. A button also has an action that
 * is executed when the button goes from state pressed to state released.
 */
class AbstractButton : public Widget
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	4a05      	ldr	r2, [pc, #20]	; (800e0a0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff ff8b 	bl	800dfac <_ZN8touchgfx6WidgetD1Ev>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	08024200 	.word	0x08024200

0800e0a4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff ffe7 	bl	800e080 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e0b2:	2130      	movs	r1, #48	; 0x30
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f013 fcea 	bl	8021a8e <_ZdlPvj>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	889a      	ldrh	r2, [r3, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	809a      	strh	r2, [r3, #4]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3334      	adds	r3, #52	; 0x34
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7ff ffe5 	bl	800e0c4 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f820 	bl	800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800e100:	bf00      	nop
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b08b      	sub	sp, #44	; 0x2c
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3334      	adds	r3, #52	; 0x34
 800e14c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId < numberOfTypedTexts;
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	889a      	ldrh	r2, [r3, #4]
 800e152:	4b47      	ldr	r3, [pc, #284]	; (800e270 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800e154:	881b      	ldrh	r3, [r3, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	bf34      	ite	cc
 800e15a:	2301      	movcc	r3, #1
 800e15c:	2300      	movcs	r3, #0
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	d07c      	beq.n	800e25e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11e>
        {
            const Font* f = typedText.getFont();
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3334      	adds	r3, #52	; 0x34
 800e168:	613b      	str	r3, [r7, #16]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e16a:	4b42      	ldr	r3, [pc, #264]	; (800e274 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d105      	bne.n	800e17e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 800e172:	4b41      	ldr	r3, [pc, #260]	; (800e278 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800e174:	4a41      	ldr	r2, [pc, #260]	; (800e27c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800e176:	216c      	movs	r1, #108	; 0x6c
 800e178:	4841      	ldr	r0, [pc, #260]	; (800e280 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800e17a:	f013 fcb5 	bl	8021ae8 <__assert_func>
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	889a      	ldrh	r2, [r3, #4]
 800e186:	4b3a      	ldr	r3, [pc, #232]	; (800e270 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	bf34      	ite	cc
 800e18e:	2301      	movcc	r3, #1
 800e190:	2300      	movcs	r3, #0
 800e192:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e194:	2b00      	cmp	r3, #0
 800e196:	d105      	bne.n	800e1a4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 800e198:	4b3a      	ldr	r3, [pc, #232]	; (800e284 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 800e19a:	4a38      	ldr	r2, [pc, #224]	; (800e27c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800e19c:	216d      	movs	r1, #109	; 0x6d
 800e19e:	4838      	ldr	r0, [pc, #224]	; (800e280 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800e1a0:	f013 fca2 	bl	8021ae8 <__assert_func>
 800e1a4:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800e1a6:	4b38      	ldr	r3, [pc, #224]	; (800e288 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	4b32      	ldr	r3, [pc, #200]	; (800e274 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800e1ac:	6819      	ldr	r1, [r3, #0]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	889b      	ldrh	r3, [r3, #4]
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	440b      	add	r3, r1
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3334      	adds	r3, #52	; 0x34
 800e1c4:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e1c6:	4b2b      	ldr	r3, [pc, #172]	; (800e274 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d105      	bne.n	800e1da <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9a>
 800e1ce:	4b2a      	ldr	r3, [pc, #168]	; (800e278 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800e1d0:	4a2e      	ldr	r2, [pc, #184]	; (800e28c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 800e1d2:	2160      	movs	r1, #96	; 0x60
 800e1d4:	482a      	ldr	r0, [pc, #168]	; (800e280 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800e1d6:	f013 fc87 	bl	8021ae8 <__assert_func>
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	889a      	ldrh	r2, [r3, #4]
 800e1e2:	4b23      	ldr	r3, [pc, #140]	; (800e270 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	bf34      	ite	cc
 800e1ea:	2301      	movcc	r3, #1
 800e1ec:	2300      	movcs	r3, #0
 800e1ee:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d105      	bne.n	800e200 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xc0>
 800e1f4:	4b23      	ldr	r3, [pc, #140]	; (800e284 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 800e1f6:	4a25      	ldr	r2, [pc, #148]	; (800e28c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 800e1f8:	2161      	movs	r1, #97	; 0x61
 800e1fa:	4821      	ldr	r0, [pc, #132]	; (800e280 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800e1fc:	f013 fc74 	bl	8021ae8 <__assert_func>
 800e200:	bf00      	nop
        return texts->getText(typedTextId);
 800e202:	4b23      	ldr	r3, [pc, #140]	; (800e290 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x150>)
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	889b      	ldrh	r3, [r3, #4]
 800e20a:	4619      	mov	r1, r3
 800e20c:	4610      	mov	r0, r2
 800e20e:	f000 fbf3 	bl	800e9f8 <_ZNK8touchgfx5Texts7getTextEt>
 800e212:	4603      	mov	r3, r0
 800e214:	bf00      	nop
 800e216:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3338      	adds	r3, #56	; 0x38
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e222:	4798      	blx	r3
 800e224:	4603      	mov	r3, r0
 800e226:	461c      	mov	r4, r3
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3348      	adds	r3, #72	; 0x48
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6a39      	ldr	r1, [r7, #32]
 800e232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
 800e238:	fb14 f303 	smulbb	r3, r4, r3
 800e23c:	b29c      	uxth	r4, r3
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3324      	adds	r3, #36	; 0x24
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6a39      	ldr	r1, [r7, #32]
 800e248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e24a:	4798      	blx	r3
 800e24c:	4603      	mov	r3, r0
 800e24e:	b29b      	uxth	r3, r3
 800e250:	4423      	add	r3, r4
 800e252:	b29b      	uxth	r3, r3
 800e254:	b21a      	sxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800e25c:	e003      	b.n	800e266 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x126>
            textHeightIncludingSpacing = 0;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    }
 800e266:	bf00      	nop
 800e268:	372c      	adds	r7, #44	; 0x2c
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd90      	pop	{r4, r7, pc}
 800e26e:	bf00      	nop
 800e270:	2001fdf8 	.word	0x2001fdf8
 800e274:	2001fdf4 	.word	0x2001fdf4
 800e278:	080230a8 	.word	0x080230a8
 800e27c:	080230ec 	.word	0x080230ec
 800e280:	08023128 	.word	0x08023128
 800e284:	0802316c 	.word	0x0802316c
 800e288:	2001fdfc 	.word	0x2001fdfc
 800e28c:	080231ac 	.word	0x080231ac
 800e290:	2001fe00 	.word	0x2001fe00

0800e294 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	4a05      	ldr	r2, [pc, #20]	; (800e2b4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fde5 	bl	800de74 <_ZN8touchgfx6ScreenD1Ev>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	08023acc 	.word	0x08023acc

0800e2b8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ffe7 	bl	800e294 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e2c6:	2140      	movs	r1, #64	; 0x40
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f013 fbe0 	bl	8021a8e <_ZdlPvj>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800e2d8:	b590      	push	{r4, r7, lr}
 800e2da:	b091      	sub	sp, #68	; 0x44
 800e2dc:	af02      	add	r7, sp, #8
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 f940 	bl	800e568 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800e2e8:	4a80      	ldr	r2, [pc, #512]	; (800e4ec <_ZN15Screen1ViewBaseC1Ev+0x214>)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3340      	adds	r3, #64	; 0x40
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7ff fe7c 	bl	800dff0 <_ZN8touchgfx3BoxC1Ev>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	336c      	adds	r3, #108	; 0x6c
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7ff fe77 	bl	800dff0 <_ZN8touchgfx3BoxC1Ev>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3398      	adds	r3, #152	; 0x98
 800e306:	4618      	mov	r0, r3
 800e308:	f003 fce2 	bl	8011cd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
{
    __background.setPosition(0, 0, 240, 240);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e312:	23f0      	movs	r3, #240	; 0xf0
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	23f0      	movs	r3, #240	; 0xf0
 800e318:	2200      	movs	r2, #0
 800e31a:	2100      	movs	r1, #0
 800e31c:	f7ff fc74 	bl	800dc08 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e326:	2300      	movs	r3, #0
 800e328:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e32c:	2300      	movs	r3, #0
 800e32e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800e332:	2300      	movs	r3, #0
 800e334:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800e338:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e33c:	041b      	lsls	r3, r3, #16
 800e33e:	461a      	mov	r2, r3
 800e340:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e344:	021b      	lsls	r3, r3, #8
 800e346:	431a      	orrs	r2, r3
 800e348:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e34c:	4313      	orrs	r3, r2
 800e34e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e356:	4611      	mov	r1, r2
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff fbb1 	bl	800dac0 <_ZN8touchgfx9colortypeC1Em>
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	4619      	mov	r1, r3
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff fe68 	bl	800e038 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3340      	adds	r3, #64	; 0x40
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f7ff fdd7 	bl	800df24 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 240);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800e37c:	23f0      	movs	r3, #240	; 0xf0
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	23f0      	movs	r3, #240	; 0xf0
 800e382:	2200      	movs	r2, #0
 800e384:	2100      	movs	r1, #0
 800e386:	f7ff fc3f 	bl	800dc08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(24, 9, 230));
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e390:	2318      	movs	r3, #24
 800e392:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800e396:	2309      	movs	r3, #9
 800e398:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800e39c:	23e6      	movs	r3, #230	; 0xe6
 800e39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e3a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e3a6:	041b      	lsls	r3, r3, #16
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e3bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fb7c 	bl	800dac0 <_ZN8touchgfx9colortypeC1Em>
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f7ff fe33 	bl	800e038 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	336c      	adds	r3, #108	; 0x6c
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7ff fda2 	bl	800df24 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel1.setXY(0, 95);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3398      	adds	r3, #152	; 0x98
 800e3e4:	225f      	movs	r2, #95	; 0x5f
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7ff fc4c 	bl	800dc86 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e3f4:	f107 030c 	add.w	r3, r7, #12
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fb86 	bl	800db0c <_ZN8touchgfx6BitmapC1Et>
 800e400:	f107 0310 	add.w	r3, r7, #16
 800e404:	2101      	movs	r1, #1
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff fb80 	bl	800db0c <_ZN8touchgfx6BitmapC1Et>
 800e40c:	f107 0210 	add.w	r2, r7, #16
 800e410:	f107 030c 	add.w	r3, r7, #12
 800e414:	4619      	mov	r1, r3
 800e416:	4620      	mov	r0, r4
 800e418:	f003 faea 	bl	80119f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_19HU));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e422:	f107 0314 	add.w	r3, r7, #20
 800e426:	2100      	movs	r1, #0
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff fe13 	bl	800e054 <_ZN8touchgfx9TypedTextC1Et>
 800e42e:	f107 0314 	add.w	r3, r7, #20
 800e432:	4619      	mov	r1, r3
 800e434:	4620      	mov	r0, r4
 800e436:	f7ff fe55 	bl	800e0e4 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800e43a:	f107 0314 	add.w	r3, r7, #20
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fc12 	bl	800cc68 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e44a:	23ff      	movs	r3, #255	; 0xff
 800e44c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800e450:	23ff      	movs	r3, #255	; 0xff
 800e452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e456:	23ff      	movs	r3, #255	; 0xff
 800e458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e45c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e460:	041b      	lsls	r3, r3, #16
 800e462:	461a      	mov	r2, r3
 800e464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e468:	021b      	lsls	r3, r3, #8
 800e46a:	431a      	orrs	r2, r3
 800e46c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e470:	4313      	orrs	r3, r2
 800e472:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e476:	f107 0320 	add.w	r3, r7, #32
 800e47a:	4611      	mov	r1, r2
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7ff fb1f 	bl	800dac0 <_ZN8touchgfx9colortypeC1Em>
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	4619      	mov	r1, r3
 800e486:	4620      	mov	r0, r4
 800e488:	f7ff fe3e 	bl	800e108 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e492:	23ff      	movs	r3, #255	; 0xff
 800e494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e498:	23ff      	movs	r3, #255	; 0xff
 800e49a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e49e:	23ff      	movs	r3, #255	; 0xff
 800e4a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e4a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4a8:	041b      	lsls	r3, r3, #16
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e4b0:	021b      	lsls	r3, r3, #8
 800e4b2:	431a      	orrs	r2, r3
 800e4b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e4be:	f107 031c 	add.w	r3, r7, #28
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff fafb 	bl	800dac0 <_ZN8touchgfx9colortypeC1Em>
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f7ff fe28 	bl	800e124 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel1);
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3398      	adds	r3, #152	; 0x98
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f7ff fd21 	bl	800df24 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	373c      	adds	r7, #60	; 0x3c
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd90      	pop	{r4, r7, pc}
 800e4ec:	08023a98 	.word	0x08023a98

0800e4f0 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	4a0d      	ldr	r2, [pc, #52]	; (800e530 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	3398      	adds	r3, #152	; 0x98
 800e502:	4618      	mov	r0, r3
 800e504:	f000 f8ac 	bl	800e660 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	336c      	adds	r3, #108	; 0x6c
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 f863 	bl	800e5d8 <_ZN8touchgfx3BoxD1Ev>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	3340      	adds	r3, #64	; 0x40
 800e516:	4618      	mov	r0, r3
 800e518:	f000 f85e 	bl	800e5d8 <_ZN8touchgfx3BoxD1Ev>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7ff feb8 	bl	800e294 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08023a98 	.word	0x08023a98

0800e534 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
}
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff ffd7 	bl	800e4f0 <_ZN15Screen1ViewBaseD1Ev>
 800e542:	21e0      	movs	r1, #224	; 0xe0
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f013 faa2 	bl	8021a8e <_ZdlPvj>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]

}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	f006 fb32 	bl	8014bdc <_ZN8touchgfx6ScreenC1Ev>
 800e578:	4a05      	ldr	r2, [pc, #20]	; (800e590 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	08023acc 	.word	0x08023acc

0800e594 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	4a05      	ldr	r2, [pc, #20]	; (800e5b4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7ff faf1 	bl	800db8c <_ZN8touchgfx8DrawableD1Ev>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	08024018 	.word	0x08024018

0800e5b8 <_ZN8touchgfx9ContainerD0Ev>:
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff ffe7 	bl	800e594 <_ZN8touchgfx9ContainerD1Ev>
 800e5c6:	212c      	movs	r1, #44	; 0x2c
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f013 fa60 	bl	8021a8e <_ZdlPvj>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	4a05      	ldr	r2, [pc, #20]	; (800e5f8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	601a      	str	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fcdf 	bl	800dfac <_ZN8touchgfx6WidgetD1Ev>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	08024270 	.word	0x08024270

0800e5fc <_ZN8touchgfx3BoxD0Ev>:
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff ffe7 	bl	800e5d8 <_ZN8touchgfx3BoxD1Ev>
 800e60a:	212c      	movs	r1, #44	; 0x2c
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f013 fa3e 	bl	8021a8e <_ZdlPvj>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	4a05      	ldr	r2, [pc, #20]	; (800e63c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fd27 	bl	800e080 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	080242d8 	.word	0x080242d8

0800e640 <_ZN8touchgfx6ButtonD0Ev>:
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff ffe7 	bl	800e61c <_ZN8touchgfx6ButtonD1Ev>
 800e64e:	2134      	movs	r1, #52	; 0x34
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f013 fa1c 	bl	8021a8e <_ZdlPvj>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	4a08      	ldr	r2, [pc, #32]	; (800e68c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3334      	adds	r3, #52	; 0x34
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe faf8 	bl	800cc68 <_ZN8touchgfx9TypedTextD1Ev>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff ffce 	bl	800e61c <_ZN8touchgfx6ButtonD1Ev>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	0802434c 	.word	0x0802434c

0800e690 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7ff ffe1 	bl	800e660 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800e69e:	2148      	movs	r1, #72	; 0x48
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f013 f9f4 	bl	8021a8e <_ZdlPvj>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e6b4:	4b02      	ldr	r3, [pc, #8]	; (800e6c0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	08023b60 	.word	0x08023b60

0800e6c4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e6c8:	2302      	movs	r3, #2
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800e6e2:	2300      	movs	r3, #0
    }
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e6f8:	2300      	movs	r3, #0
    }
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e706:	b480      	push	{r7}
 800e708:	b083      	sub	sp, #12
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e70e:	2300      	movs	r3, #0
    }
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	4613      	mov	r3, r2
 800e728:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800e72a:	4a07      	ldr	r2, [pc, #28]	; (800e748 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e730:	4a06      	ldr	r2, [pc, #24]	; (800e74c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e736:	4a06      	ldr	r2, [pc, #24]	; (800e750 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	8013      	strh	r3, [r2, #0]
    }
 800e73c:	bf00      	nop
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	2001fdf4 	.word	0x2001fdf4
 800e74c:	2001fdfc 	.word	0x2001fdfc
 800e750:	2001fdf8 	.word	0x2001fdf8

0800e754 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e754:	b40e      	push	{r1, r2, r3}
 800e756:	b580      	push	{r7, lr}
 800e758:	b085      	sub	sp, #20
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e75e:	f107 0320 	add.w	r3, r7, #32
 800e762:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	69fa      	ldr	r2, [r7, #28]
 800e768:	2100      	movs	r1, #0
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f005 fe6c 	bl	8014448 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e770:	4603      	mov	r3, r0
 800e772:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e774:	89fb      	ldrh	r3, [r7, #14]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e780:	b003      	add	sp, #12
 800e782:	4770      	bx	lr

0800e784 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e784:	b40c      	push	{r2, r3}
 800e786:	b580      	push	{r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	460b      	mov	r3, r1
 800e790:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e792:	f107 031c 	add.w	r3, r7, #28
 800e796:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e798:	78f9      	ldrb	r1, [r7, #3]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f005 fe52 	bl	8014448 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e7a8:	89fb      	ldrh	r3, [r7, #14]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7b4:	b002      	add	sp, #8
 800e7b6:	4770      	bx	lr

0800e7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08a      	sub	sp, #40	; 0x28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d016      	beq.n	800e7fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3322      	adds	r3, #34	; 0x22
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	8adb      	ldrh	r3, [r3, #22]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d105      	bne.n	800e7e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e7da:	4b43      	ldr	r3, [pc, #268]	; (800e8e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e7dc:	4a43      	ldr	r2, [pc, #268]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e7de:	21c5      	movs	r1, #197	; 0xc5
 800e7e0:	4843      	ldr	r0, [pc, #268]	; (800e8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e7e2:	f013 f981 	bl	8021ae8 <__assert_func>
            return buffer[pos];
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	8a9b      	ldrh	r3, [r3, #20]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e000      	b.n	800e7fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d06a      	beq.n	800e8d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f007 f8aa 	bl	801595a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3322      	adds	r3, #34	; 0x22
 800e80a:	623b      	str	r3, [r7, #32]
 800e80c:	2301      	movs	r3, #1
 800e80e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	8adb      	ldrh	r3, [r3, #22]
 800e814:	8bfa      	ldrh	r2, [r7, #30]
 800e816:	429a      	cmp	r2, r3
 800e818:	d305      	bcc.n	800e826 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e81a:	4b36      	ldr	r3, [pc, #216]	; (800e8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e81c:	4a36      	ldr	r2, [pc, #216]	; (800e8f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e81e:	21cb      	movs	r1, #203	; 0xcb
 800e820:	4833      	ldr	r0, [pc, #204]	; (800e8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e822:	f013 f961 	bl	8021ae8 <__assert_func>
            const uint16_t index = pos + offset;
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	8a9a      	ldrh	r2, [r3, #20]
 800e82a:	8bfb      	ldrh	r3, [r7, #30]
 800e82c:	4413      	add	r3, r2
 800e82e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e830:	8bbb      	ldrh	r3, [r7, #28]
 800e832:	2b09      	cmp	r3, #9
 800e834:	d801      	bhi.n	800e83a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e836:	8bbb      	ldrh	r3, [r7, #28]
 800e838:	e001      	b.n	800e83e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e83a:	8bbb      	ldrh	r3, [r7, #28]
 800e83c:	3b0a      	subs	r3, #10
 800e83e:	6a3a      	ldr	r2, [r7, #32]
 800e840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e844:	f640 123f 	movw	r2, #2367	; 0x93f
 800e848:	4293      	cmp	r3, r2
 800e84a:	bf0c      	ite	eq
 800e84c:	2301      	moveq	r3, #1
 800e84e:	2300      	movne	r3, #0
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d03f      	beq.n	800e8d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3322      	adds	r3, #34	; 0x22
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	3222      	adds	r2, #34	; 0x22
 800e85e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	8ad2      	ldrh	r2, [r2, #22]
 800e864:	2a00      	cmp	r2, #0
 800e866:	d105      	bne.n	800e874 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e868:	4b1f      	ldr	r3, [pc, #124]	; (800e8e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e86a:	4a20      	ldr	r2, [pc, #128]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e86c:	21c5      	movs	r1, #197	; 0xc5
 800e86e:	4820      	ldr	r0, [pc, #128]	; (800e8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e870:	f013 f93a 	bl	8021ae8 <__assert_func>
            return buffer[pos];
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	8a92      	ldrh	r2, [r2, #20]
 800e878:	4611      	mov	r1, r2
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e880:	613b      	str	r3, [r7, #16]
 800e882:	4613      	mov	r3, r2
 800e884:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	8adb      	ldrh	r3, [r3, #22]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d806      	bhi.n	800e89c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e88e:	4b1b      	ldr	r3, [pc, #108]	; (800e8fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e890:	4a1b      	ldr	r2, [pc, #108]	; (800e900 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e892:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800e896:	4816      	ldr	r0, [pc, #88]	; (800e8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e898:	f013 f926 	bl	8021ae8 <__assert_func>
            const uint16_t index = pos + 1;
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	8a9b      	ldrh	r3, [r3, #20]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e8a4:	89bb      	ldrh	r3, [r7, #12]
 800e8a6:	2b09      	cmp	r3, #9
 800e8a8:	d801      	bhi.n	800e8ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e8aa:	89bb      	ldrh	r3, [r7, #12]
 800e8ac:	e000      	b.n	800e8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	89f9      	ldrh	r1, [r7, #14]
 800e8b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e8b8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	3322      	adds	r3, #34	; 0x22
 800e8be:	61bb      	str	r3, [r7, #24]
 800e8c0:	f640 133f 	movw	r3, #2367	; 0x93f
 800e8c4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	8a9b      	ldrh	r3, [r3, #20]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	8afa      	ldrh	r2, [r7, #22]
 800e8d0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e8d4:	bf00      	nop
        }
    }
    return getNextChar();
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f006 ff42 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e8dc:	4603      	mov	r3, r0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3728      	adds	r7, #40	; 0x28
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	080231e4 	.word	0x080231e4
 800e8ec:	080231f0 	.word	0x080231f0
 800e8f0:	0802329c 	.word	0x0802329c
 800e8f4:	080232e4 	.word	0x080232e4
 800e8f8:	080232f4 	.word	0x080232f4
 800e8fc:	080233c8 	.word	0x080233c8
 800e900:	080233d4 	.word	0x080233d4

0800e904 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f006 feee 	bl	80156ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e912:	bf00      	nop
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b088      	sub	sp, #32
 800e91e:	af02      	add	r7, sp, #8
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	1d38      	adds	r0, r7, #4
 800e924:	e880 0006 	stmia.w	r0, {r1, r2}
 800e928:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800e92a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e92e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800e930:	1d39      	adds	r1, r7, #4
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	683a      	ldr	r2, [r7, #0]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f004 fa30 	bl	8012da4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800e944:	bf00      	nop
 800e946:	3718      	adds	r7, #24
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e94c:	b590      	push	{r4, r7, lr}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e95a:	88fb      	ldrh	r3, [r7, #6]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d127      	bne.n	800e9b0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e960:	88fb      	ldrh	r3, [r7, #6]
 800e962:	4a1e      	ldr	r2, [pc, #120]	; (800e9dc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d016      	beq.n	800e99a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e96c:	88fb      	ldrh	r3, [r7, #6]
 800e96e:	4a1b      	ldr	r2, [pc, #108]	; (800e9dc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e974:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	4413      	add	r3, r2
 800e97e:	4a18      	ldr	r2, [pc, #96]	; (800e9e0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e980:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	4413      	add	r3, r2
 800e98a:	4a16      	ldr	r2, [pc, #88]	; (800e9e4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e98c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	4413      	add	r3, r2
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	e00a      	b.n	800e9b0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e99a:	4b11      	ldr	r3, [pc, #68]	; (800e9e0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e99c:	4a12      	ldr	r2, [pc, #72]	; (800e9e8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e99e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e9a0:	4a12      	ldr	r2, [pc, #72]	; (800e9ec <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e9a2:	4b10      	ldr	r3, [pc, #64]	; (800e9e4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e9a4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e9a6:	88fb      	ldrh	r3, [r7, #6]
 800e9a8:	4a11      	ldr	r2, [pc, #68]	; (800e9f0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ae:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00d      	beq.n	800e9d2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e9b6:	4a0f      	ldr	r2, [pc, #60]	; (800e9f4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e9b8:	88fb      	ldrh	r3, [r7, #6]
 800e9ba:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e9bc:	f000 f83e 	bl	800ea3c <_ZN17TypedTextDatabase8getFontsEv>
 800e9c0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e9c2:	f000 f833 	bl	800ea2c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff fea5 	bl	800e71c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e9d2:	bf00      	nop
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd90      	pop	{r4, r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	2001f9a0 	.word	0x2001f9a0
 800e9e0:	2001f9a8 	.word	0x2001f9a8
 800e9e4:	2001f9ac 	.word	0x2001f9ac
 800e9e8:	0803c3f0 	.word	0x0803c3f0
 800e9ec:	0803c3ec 	.word	0x0803c3ec
 800e9f0:	0803c408 	.word	0x0803c408
 800e9f4:	2001f9a4 	.word	0x2001f9a4

0800e9f8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	460b      	mov	r3, r1
 800ea02:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ea04:	4b07      	ldr	r3, [pc, #28]	; (800ea24 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ea0a:	6819      	ldr	r1, [r3, #0]
 800ea0c:	887b      	ldrh	r3, [r7, #2]
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	440b      	add	r3, r1
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	4413      	add	r3, r2
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	2001f9a8 	.word	0x2001f9a8
 800ea28:	2001f9ac 	.word	0x2001f9ac

0800ea2c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ea30:	2301      	movs	r3, #1
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ea40:	4b02      	ldr	r3, [pc, #8]	; (800ea4c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	2001f9b0 	.word	0x2001f9b0

0800ea50 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d113      	bne.n	800ea88 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d10e      	bne.n	800ea88 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ea6a:	f7fe fa37 	bl	800cedc <_Z23getFont_verdana_20_4bppv>
 800ea6e:	4603      	mov	r3, r0
};
 800ea70:	4a07      	ldr	r2, [pc, #28]	; (800ea90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea72:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ea74:	f7fe fa8c 	bl	800cf90 <_Z23getFont_verdana_40_4bppv>
 800ea78:	4603      	mov	r3, r0
};
 800ea7a:	4a05      	ldr	r2, [pc, #20]	; (800ea90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea7c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800ea7e:	f7fe f9d3 	bl	800ce28 <_Z23getFont_verdana_10_4bppv>
 800ea82:	4603      	mov	r3, r0
};
 800ea84:	4a02      	ldr	r2, [pc, #8]	; (800ea90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea86:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	2001f9b0 	.word	0x2001f9b0

0800ea94 <_GLOBAL__sub_I_touchgfx_fonts>:
 800ea94:	b580      	push	{r7, lr}
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	f7ff ffd7 	bl	800ea50 <_Z41__static_initialization_and_destruction_0ii>
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	4a05      	ldr	r2, [pc, #20]	; (800eac4 <_ZN19FrontendApplicationD1Ev+0x20>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe fcc9 	bl	800d44c <_ZN23FrontendApplicationBaseD1Ev>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4618      	mov	r0, r3
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	08023bec 	.word	0x08023bec

0800eac8 <_ZN19FrontendApplicationD0Ev>:
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff ffe7 	bl	800eaa4 <_ZN19FrontendApplicationD1Ev>
 800ead6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f012 ffd7 	bl	8021a8e <_ZdlPvj>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 f82d 	bl	800eb58 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f004 fe09 	bl	8013718 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800eb06:	bf00      	nop
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
	...

0800eb10 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fe fce2 	bl	800d4ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800eb28:	4a03      	ldr	r2, [pc, #12]	; (800eb38 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	601a      	str	r2, [r3, #0]
{

}
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08023bec 	.word	0x08023bec

0800eb3c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	601a      	str	r2, [r3, #0]
{

}
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <_ZN5Model4tickEv>:

void Model::tick()
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]

}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
    {
    }
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
    {
    }
 800eb88:	bf00      	nop
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    {
 800eb9c:	4a04      	ldr	r2, [pc, #16]	; (800ebb0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
    }
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	08023c70 	.word	0x08023c70

0800ebb4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
    }
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff ffe9 	bl	800eb94 <_ZN8touchgfx9PresenterD1Ev>
 800ebc2:	2104      	movs	r1, #4
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f012 ff62 	bl	8021a8e <_ZdlPvj>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
    {
 800ebdc:	4a04      	ldr	r2, [pc, #16]	; (800ebf0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
    }
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	08023c70 	.word	0x08023c70

0800ebf4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	4a06      	ldr	r2, [pc, #24]	; (800ec18 <_ZN13ModelListenerC1Ev+0x24>)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	605a      	str	r2, [r3, #4]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	08023c60 	.word	0x08023c60

0800ec1c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	4a04      	ldr	r2, [pc, #16]	; (800ec38 <_ZN13ModelListenerD1Ev+0x1c>)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	08023c60 	.word	0x08023c60

0800ec3c <_ZN13ModelListenerD0Ev>:
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7ff ffe9 	bl	800ec1c <_ZN13ModelListenerD1Ev>
 800ec4a:	2108      	movs	r1, #8
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f012 ff1e 	bl	8021a8e <_ZdlPvj>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	4a09      	ldr	r2, [pc, #36]	; (800ec8c <_ZN16Screen1PresenterD1Ev+0x30>)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	4a09      	ldr	r2, [pc, #36]	; (800ec90 <_ZN16Screen1PresenterD1Ev+0x34>)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	605a      	str	r2, [r3, #4]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff ffd1 	bl	800ec1c <_ZN13ModelListenerD1Ev>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff ff89 	bl	800eb94 <_ZN8touchgfx9PresenterD1Ev>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	08023c38 	.word	0x08023c38
 800ec90:	08023c50 	.word	0x08023c50

0800ec94 <_ZThn4_N16Screen1PresenterD1Ev>:
 800ec94:	f1a0 0004 	sub.w	r0, r0, #4
 800ec98:	e7e0      	b.n	800ec5c <_ZN16Screen1PresenterD1Ev>
 800ec9a:	bf00      	nop

0800ec9c <_ZN16Screen1PresenterD0Ev>:
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ffd9 	bl	800ec5c <_ZN16Screen1PresenterD1Ev>
 800ecaa:	2110      	movs	r1, #16
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f012 feee 	bl	8021a8e <_ZdlPvj>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <_ZThn4_N16Screen1PresenterD0Ev>:
 800ecbc:	f1a0 0004 	sub.w	r0, r0, #4
 800ecc0:	e7ec      	b.n	800ec9c <_ZN16Screen1PresenterD0Ev>
	...

0800ecc4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
    : view(v)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff ff7f 	bl	800ebd4 <_ZN8touchgfx9PresenterC1Ev>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7ff ff8a 	bl	800ebf4 <_ZN13ModelListenerC1Ev>
 800ece0:	4a06      	ldr	r2, [pc, #24]	; (800ecfc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	4a06      	ldr	r2, [pc, #24]	; (800ed00 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	605a      	str	r2, [r3, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	60da      	str	r2, [r3, #12]
{

}
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	08023c38 	.word	0x08023c38
 800ed00:	08023c50 	.word	0x08023c50

0800ed04 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]

}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]

}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	4a05      	ldr	r2, [pc, #20]	; (800ed4c <_ZN11Screen1ViewD1Ev+0x20>)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff fbd7 	bl	800e4f0 <_ZN15Screen1ViewBaseD1Ev>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4618      	mov	r0, r3
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	08023c88 	.word	0x08023c88

0800ed50 <_ZN11Screen1ViewD0Ev>:
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7ff ffe7 	bl	800ed2c <_ZN11Screen1ViewD1Ev>
 800ed5e:	21e0      	movs	r1, #224	; 0xe0
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f012 fe94 	bl	8021a8e <_ZdlPvj>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7ff faac 	bl	800e2d8 <_ZN15Screen1ViewBaseC1Ev>
 800ed80:	4a03      	ldr	r2, [pc, #12]	; (800ed90 <_ZN11Screen1ViewC1Ev+0x20>)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
{

}
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	08023c88 	.word	0x08023c88

0800ed94 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff fbd8 	bl	800e554 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff f894 	bl	800dee4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800edbc:	bf00      	nop
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
    {
 800edcc:	4a04      	ldr	r2, [pc, #16]	; (800ede0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	601a      	str	r2, [r3, #0]
    }
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4618      	mov	r0, r3
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	08023cd4 	.word	0x08023cd4

0800ede4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    }
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff ffe9 	bl	800edc4 <_ZN8touchgfx15TouchControllerD1Ev>
 800edf2:	2104      	movs	r1, #4
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f012 fe4a 	bl	8021a8e <_ZdlPvj>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b085      	sub	sp, #20
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3714      	adds	r7, #20
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
	...

0800ee34 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	4a05      	ldr	r2, [pc, #20]	; (800ee54 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff ffbd 	bl	800edc4 <_ZN8touchgfx15TouchControllerD1Ev>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	08023cbc 	.word	0x08023cbc

0800ee58 <_ZN20STM32TouchControllerD0Ev>:
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff ffe7 	bl	800ee34 <_ZN20STM32TouchControllerD1Ev>
 800ee66:	2104      	movs	r1, #4
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f012 fe10 	bl	8021a8e <_ZdlPvj>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800ee78:	b480      	push	{r7}
 800ee7a:	af00      	add	r7, sp, #0

}
 800ee7c:	bf00      	nop
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d80c      	bhi.n	800eeb2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800ee98:	a201      	add	r2, pc, #4	; (adr r2, 800eea0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800ee9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9e:	bf00      	nop
 800eea0:	0800eeb1 	.word	0x0800eeb1
 800eea4:	0800eeb1 	.word	0x0800eeb1
 800eea8:	0800eeb1 	.word	0x0800eeb1
 800eeac:	0800eeb1 	.word	0x0800eeb1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800eeb0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop

0800eec0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4603      	mov	r3, r0
 800eec8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d80c      	bhi.n	800eeea <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800eed0:	a201      	add	r2, pc, #4	; (adr r2, 800eed8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800eed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed6:	bf00      	nop
 800eed8:	0800eee9 	.word	0x0800eee9
 800eedc:	0800eee9 	.word	0x0800eee9
 800eee0:	0800eee9 	.word	0x0800eee9
 800eee4:	0800eee9 	.word	0x0800eee9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800eee8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800eeea:	bf00      	nop
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop

0800eef8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ef02:	79fb      	ldrb	r3, [r7, #7]
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d80c      	bhi.n	800ef22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800ef08:	a201      	add	r2, pc, #4	; (adr r2, 800ef10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800ef0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0e:	bf00      	nop
 800ef10:	0800ef21 	.word	0x0800ef21
 800ef14:	0800ef21 	.word	0x0800ef21
 800ef18:	0800ef21 	.word	0x0800ef21
 800ef1c:	0800ef21 	.word	0x0800ef21
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800ef20:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800ef22:	bf00      	nop
 800ef24:	370c      	adds	r7, #12
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop

0800ef30 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    {
 800ef38:	4a04      	ldr	r2, [pc, #16]	; (800ef4c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
    }
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	080240b4 	.word	0x080240b4

0800ef50 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
    }
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff ffe9 	bl	800ef30 <_ZN8touchgfx3HALD1Ev>
 800ef5e:	217c      	movs	r1, #124	; 0x7c
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f012 fd94 	bl	8021a8e <_ZdlPvj>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	78fa      	ldrb	r2, [r7, #3]
 800ef80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800ef8c:	bf00      	nop
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	807b      	strh	r3, [r7, #2]
 800efa4:	4613      	mov	r3, r2
 800efa6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800efa8:	4b0c      	ldr	r3, [pc, #48]	; (800efdc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	887a      	ldrh	r2, [r7, #2]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d304      	bcc.n	800efbc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800efb2:	4b0b      	ldr	r3, [pc, #44]	; (800efe0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800efb4:	881b      	ldrh	r3, [r3, #0]
 800efb6:	883a      	ldrh	r2, [r7, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d205      	bcs.n	800efc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800efbc:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800efbe:	4a0a      	ldr	r2, [pc, #40]	; (800efe8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800efc0:	219e      	movs	r1, #158	; 0x9e
 800efc2:	480a      	ldr	r0, [pc, #40]	; (800efec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800efc4:	f012 fd90 	bl	8021ae8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800efc8:	4a09      	ldr	r2, [pc, #36]	; (800eff0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800efca:	887b      	ldrh	r3, [r7, #2]
 800efcc:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800efce:	4a09      	ldr	r2, [pc, #36]	; (800eff4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800efd0:	883b      	ldrh	r3, [r7, #0]
 800efd2:	8013      	strh	r3, [r2, #0]
    }
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	2001fd98 	.word	0x2001fd98
 800efe0:	2001fd9a 	.word	0x2001fd9a
 800efe4:	08023488 	.word	0x08023488
 800efe8:	080234ec 	.word	0x080234ec
 800efec:	08023530 	.word	0x08023530
 800eff0:	2001fd9e 	.word	0x2001fd9e
 800eff4:	2001fda0 	.word	0x2001fda0

0800eff8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685a      	ldr	r2, [r3, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4610      	mov	r0, r2
 800f018:	4798      	blx	r3
 800f01a:	4603      	mov	r3, r0
 800f01c:	e000      	b.n	800f020 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800f01e:	2300      	movs	r3, #0
    }
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800f036:	3301      	adds	r3, #1
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800f040:	bf00      	nop
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f002 fb19 	bl	801168c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	33ac      	adds	r3, #172	; 0xac
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	4798      	blx	r3
    }
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800f06e:	b480      	push	{r7}
 800f070:	b083      	sub	sp, #12
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800f078:	2300      	movs	r3, #0
    }
 800f07a:	4618      	mov	r0, r3
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
	...

0800f088 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800f09c:	4b0f      	ldr	r3, [pc, #60]	; (800f0dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800f09e:	4a10      	ldr	r2, [pc, #64]	; (800f0e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800f0a0:	f240 21d2 	movw	r1, #722	; 0x2d2
 800f0a4:	480f      	ldr	r0, [pc, #60]	; (800f0e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800f0a6:	f012 fd1f 	bl	8021ae8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf14      	ite	ne
 800f0bc:	2301      	movne	r3, #1
 800f0be:	2300      	moveq	r3, #0
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800f0c4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	338c      	adds	r3, #140	; 0x8c
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	4798      	blx	r3
    }
 800f0d4:	bf00      	nop
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	08023574 	.word	0x08023574
 800f0e0:	080235ac 	.word	0x080235ac
 800f0e4:	08023530 	.word	0x08023530
 800f0e8:	2001fda2 	.word	0x2001fda2

0800f0ec <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	bf14      	ite	ne
 800f102:	2301      	movne	r3, #1
 800f104:	2300      	moveq	r3, #0
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b03      	ldr	r3, [pc, #12]	; (800f118 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800f10a:	701a      	strb	r2, [r3, #0]
    }
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	2001fda3 	.word	0x2001fda3

0800f11c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f124:	2300      	movs	r3, #0
    }
 800f126:	4618      	mov	r0, r3
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f142:	2b00      	cmp	r3, #0
 800f144:	d004      	beq.n	800f150 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f14a:	887a      	ldrh	r2, [r7, #2]
 800f14c:	4610      	mov	r0, r2
 800f14e:	4798      	blx	r3
        }
    }
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800f160:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800f164:	4618      	mov	r0, r3
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	3318      	adds	r3, #24
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4610      	mov	r0, r2
 800f188:	4798      	blx	r3
 800f18a:	4603      	mov	r3, r0
    }
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00c      	beq.n	800f1be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3330      	adds	r3, #48	; 0x30
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	4798      	blx	r3
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d101      	bne.n	800f1be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e000      	b.n	800f1c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c8:	e001      	b.n	800f1ce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	2001fda2 	.word	0x2001fda2

0800f1dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d011      	beq.n	800f218 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800f1f4:	4b14      	ldr	r3, [pc, #80]	; (800f248 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d11e      	bne.n	800f23a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800f1fc:	4b13      	ldr	r3, [pc, #76]	; (800f24c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f202:	4b13      	ldr	r3, [pc, #76]	; (800f250 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f204:	881a      	ldrh	r2, [r3, #0]
 800f206:	4b11      	ldr	r3, [pc, #68]	; (800f24c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f208:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800f20a:	4a11      	ldr	r2, [pc, #68]	; (800f250 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f20c:	89bb      	ldrh	r3, [r7, #12]
 800f20e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800f210:	4b0d      	ldr	r3, [pc, #52]	; (800f248 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f212:	2201      	movs	r2, #1
 800f214:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800f216:	e010      	b.n	800f23a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800f218:	4b0b      	ldr	r3, [pc, #44]	; (800f248 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00c      	beq.n	800f23a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800f220:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f222:	881b      	ldrh	r3, [r3, #0]
 800f224:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f226:	4b0a      	ldr	r3, [pc, #40]	; (800f250 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f228:	881a      	ldrh	r2, [r3, #0]
 800f22a:	4b08      	ldr	r3, [pc, #32]	; (800f24c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f22c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800f22e:	4a08      	ldr	r2, [pc, #32]	; (800f250 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f230:	89fb      	ldrh	r3, [r7, #14]
 800f232:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800f234:	4b04      	ldr	r3, [pc, #16]	; (800f248 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
    }
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	2001fd9c 	.word	0x2001fd9c
 800f24c:	2001fd9a 	.word	0x2001fd9a
 800f250:	2001fd98 	.word	0x2001fd98

0800f254 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
    {
    }
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
    {
    }
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4618      	mov	r0, r3
 800f288:	f001 fc76 	bl	8010b78 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	4a05      	ldr	r2, [pc, #20]	; (800f2b4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff fe43 	bl	800ef30 <_ZN8touchgfx3HALD1Ev>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	08023f0c 	.word	0x08023f0c

0800f2b8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7ff ffe7 	bl	800f294 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f2c6:	217c      	movs	r1, #124	; 0x7c
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f012 fbe0 	bl	8021a8e <_ZdlPvj>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ffca 	bl	800f27c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f2e8:	bf00      	nop
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <touchgfxSignalVSync>:
#include <touchgfx/hal/OSWrappers.hpp>
#include "main.h"

extern "C"
void touchgfxSignalVSync(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 800f2f4:	f7fd ff62 	bl	800d1bc <_ZN8touchgfx3HAL11getInstanceEv>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7ff fe94 	bl	800f028 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 800f300:	f000 fab0 	bl	800f864 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800f304:	bf00      	nop
 800f306:	bd80      	pop	{r7, pc}

0800f308 <__ST7789H2_WriteData>:
#define LCD_REGISTER_ADDR FMC_BANK1_1
#define LCD_DATA_ADDR     (FMC_BANK1_1 | 0x00000002UL)

extern "C"
void __ST7789H2_WriteData(uint16_t *pData, uint16_t Length)
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	460b      	mov	r3, r1
 800f312:	807b      	strh	r3, [r7, #2]
     uint16_t i = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	81fb      	strh	r3, [r7, #14]
     while (i < Length)
 800f318:	89fa      	ldrh	r2, [r7, #14]
 800f31a:	887b      	ldrh	r3, [r7, #2]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d209      	bcs.n	800f334 <__ST7789H2_WriteData+0x2c>
     {
         /* Write data value */
         *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f320:	89fb      	ldrh	r3, [r7, #14]
 800f322:	1c5a      	adds	r2, r3, #1
 800f324:	81fa      	strh	r2, [r7, #14]
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	4413      	add	r3, r2
 800f32c:	4a04      	ldr	r2, [pc, #16]	; (800f340 <__ST7789H2_WriteData+0x38>)
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	8013      	strh	r3, [r2, #0]
     while (i < Length)
 800f332:	e7f1      	b.n	800f318 <__ST7789H2_WriteData+0x10>
     }
}
 800f334:	bf00      	nop
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	60000002 	.word	0x60000002

0800f344 <__ST7789H2_ReadData>:

extern "C"
void __ST7789H2_ReadData(uint16_t *pData, uint16_t Length)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	460b      	mov	r3, r1
 800f34e:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 800f350:	2300      	movs	r3, #0
 800f352:	81fb      	strh	r3, [r7, #14]
    while (i < Length)
 800f354:	89fa      	ldrh	r2, [r7, #14]
 800f356:	887b      	ldrh	r3, [r7, #2]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d209      	bcs.n	800f370 <__ST7789H2_ReadData+0x2c>
    {
        /* Read value */
        pData[i++] = *(uint16_t *)LCD_DATA_ADDR;
 800f35c:	4907      	ldr	r1, [pc, #28]	; (800f37c <__ST7789H2_ReadData+0x38>)
 800f35e:	89fb      	ldrh	r3, [r7, #14]
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	81fa      	strh	r2, [r7, #14]
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	4413      	add	r3, r2
 800f36a:	880a      	ldrh	r2, [r1, #0]
 800f36c:	801a      	strh	r2, [r3, #0]
    while (i < Length)
 800f36e:	e7f1      	b.n	800f354 <__ST7789H2_ReadData+0x10>
    }
}
 800f370:	bf00      	nop
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	60000002 	.word	0x60000002

0800f380 <__ST7789H2_WriteReg>:

extern "C"
void __ST7789H2_WriteReg(uint16_t Reg, uint16_t *pData, uint16_t Length)
{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	4603      	mov	r3, r0
 800f388:	6039      	str	r1, [r7, #0]
 800f38a:	80fb      	strh	r3, [r7, #6]
 800f38c:	4613      	mov	r3, r2
 800f38e:	80bb      	strh	r3, [r7, #4]
    uint16_t i = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	81fb      	strh	r3, [r7, #14]
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 800f394:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800f398:	88fb      	ldrh	r3, [r7, #6]
 800f39a:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f39c:	89fa      	ldrh	r2, [r7, #14]
 800f39e:	88bb      	ldrh	r3, [r7, #4]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d209      	bcs.n	800f3b8 <__ST7789H2_WriteReg+0x38>
    {
        /* Write data value */
        *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f3a4:	89fb      	ldrh	r3, [r7, #14]
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	81fa      	strh	r2, [r7, #14]
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	4a04      	ldr	r2, [pc, #16]	; (800f3c4 <__ST7789H2_WriteReg+0x44>)
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f3b6:	e7f1      	b.n	800f39c <__ST7789H2_WriteReg+0x1c>
    }
}
 800f3b8:	bf00      	nop
 800f3ba:	3714      	adds	r7, #20
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	60000002 	.word	0x60000002

0800f3c8 <__ST7789H2_GetOrientation>:
    }
}

extern "C"
uint32_t __ST7789H2_GetOrientation(void)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
    uint32_t Orientation = LCD_ORIENTATION_LANDSCAPE_ROT180;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	607b      	str	r3, [r7, #4]
    //Lcd_Drv[0]->GetOrientation(Lcd_CompObj[0], &Orientation);

    return Orientation;
 800f3d2:	687b      	ldr	r3, [r7, #4]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <__ST7789H2_SetDisplayWindow>:

extern "C"
void __ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800f3e0:	b590      	push	{r4, r7, lr}
 800f3e2:	b089      	sub	sp, #36	; 0x24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	4608      	mov	r0, r1
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	4623      	mov	r3, r4
 800f3f0:	80fb      	strh	r3, [r7, #6]
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	80bb      	strh	r3, [r7, #4]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	807b      	strh	r3, [r7, #2]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	803b      	strh	r3, [r7, #0]
    //if (refreshRect != Rect(Xpos, Ypos, Width, Height))
    {
        // Check ST7789H2_DrawBitmap() implementation
        uint8_t  parameter[8];
        uint32_t Xstart, Xstop, Ystart, Ystop;
        static uint32_t Orientation = __ST7789H2_GetOrientation(); // Fixed Orientation
 800f3fe:	4b55      	ldr	r3, [pc, #340]	; (800f554 <__ST7789H2_SetDisplayWindow+0x174>)
 800f400:	e8d3 3f8f 	ldab	r3, [r3]
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	bf0c      	ite	eq
 800f40e:	2301      	moveq	r3, #1
 800f410:	2300      	movne	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b00      	cmp	r3, #0
 800f416:	d012      	beq.n	800f43e <__ST7789H2_SetDisplayWindow+0x5e>
 800f418:	484e      	ldr	r0, [pc, #312]	; (800f554 <__ST7789H2_SetDisplayWindow+0x174>)
 800f41a:	f012 fb3a 	bl	8021a92 <__cxa_guard_acquire>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	bf14      	ite	ne
 800f424:	2301      	movne	r3, #1
 800f426:	2300      	moveq	r3, #0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <__ST7789H2_SetDisplayWindow+0x5e>
 800f42e:	f7ff ffcb 	bl	800f3c8 <__ST7789H2_GetOrientation>
 800f432:	4603      	mov	r3, r0
 800f434:	4a48      	ldr	r2, [pc, #288]	; (800f558 <__ST7789H2_SetDisplayWindow+0x178>)
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	4846      	ldr	r0, [pc, #280]	; (800f554 <__ST7789H2_SetDisplayWindow+0x174>)
 800f43a:	f012 fb36 	bl	8021aaa <__cxa_guard_release>

        /* Compute new Y start and stop values */
        if (Orientation == LCD_ORIENTATION_PORTRAIT)
 800f43e:	4b46      	ldr	r3, [pc, #280]	; (800f558 <__ST7789H2_SetDisplayWindow+0x178>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10e      	bne.n	800f464 <__ST7789H2_SetDisplayWindow+0x84>
        {
            Ystart = Ypos;
 800f446:	88bb      	ldrh	r3, [r7, #4]
 800f448:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f44a:	88ba      	ldrh	r2, [r7, #4]
 800f44c:	883b      	ldrh	r3, [r7, #0]
 800f44e:	4413      	add	r3, r2
 800f450:	3b01      	subs	r3, #1
 800f452:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f454:	88fb      	ldrh	r3, [r7, #6]
 800f456:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f458:	88fa      	ldrh	r2, [r7, #6]
 800f45a:	887b      	ldrh	r3, [r7, #2]
 800f45c:	4413      	add	r3, r2
 800f45e:	3b01      	subs	r3, #1
 800f460:	61bb      	str	r3, [r7, #24]
 800f462:	e039      	b.n	800f4d8 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 800f464:	4b3c      	ldr	r3, [pc, #240]	; (800f558 <__ST7789H2_SetDisplayWindow+0x178>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d10f      	bne.n	800f48c <__ST7789H2_SetDisplayWindow+0xac>
        {
            Ystart = Ypos;
 800f46c:	88bb      	ldrh	r3, [r7, #4]
 800f46e:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f470:	88ba      	ldrh	r2, [r7, #4]
 800f472:	883b      	ldrh	r3, [r7, #0]
 800f474:	4413      	add	r3, r2
 800f476:	3b01      	subs	r3, #1
 800f478:	613b      	str	r3, [r7, #16]
            Xstart = Xpos + 0x50U;
 800f47a:	88fb      	ldrh	r3, [r7, #6]
 800f47c:	3350      	adds	r3, #80	; 0x50
 800f47e:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1 + 0x50U;
 800f480:	88fa      	ldrh	r2, [r7, #6]
 800f482:	887b      	ldrh	r3, [r7, #2]
 800f484:	4413      	add	r3, r2
 800f486:	334f      	adds	r3, #79	; 0x4f
 800f488:	61bb      	str	r3, [r7, #24]
 800f48a:	e025      	b.n	800f4d8 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 800f48c:	4b32      	ldr	r3, [pc, #200]	; (800f558 <__ST7789H2_SetDisplayWindow+0x178>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d10f      	bne.n	800f4b4 <__ST7789H2_SetDisplayWindow+0xd4>
        {
            Ystart = Ypos + 0x50U;
 800f494:	88bb      	ldrh	r3, [r7, #4]
 800f496:	3350      	adds	r3, #80	; 0x50
 800f498:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1 + 0x50U;
 800f49a:	88ba      	ldrh	r2, [r7, #4]
 800f49c:	883b      	ldrh	r3, [r7, #0]
 800f49e:	4413      	add	r3, r2
 800f4a0:	334f      	adds	r3, #79	; 0x4f
 800f4a2:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f4a8:	88fa      	ldrh	r2, [r7, #6]
 800f4aa:	887b      	ldrh	r3, [r7, #2]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	e011      	b.n	800f4d8 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800f4b4:	4b28      	ldr	r3, [pc, #160]	; (800f558 <__ST7789H2_SetDisplayWindow+0x178>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b03      	cmp	r3, #3
 800f4ba:	d10d      	bne.n	800f4d8 <__ST7789H2_SetDisplayWindow+0xf8>
        {
            Ystart = Ypos;
 800f4bc:	88bb      	ldrh	r3, [r7, #4]
 800f4be:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f4c0:	88ba      	ldrh	r2, [r7, #4]
 800f4c2:	883b      	ldrh	r3, [r7, #0]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f4ca:	88fb      	ldrh	r3, [r7, #6]
 800f4cc:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f4ce:	88fa      	ldrh	r2, [r7, #6]
 800f4d0:	887b      	ldrh	r3, [r7, #2]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	61bb      	str	r3, [r7, #24]
        }

        /* CASET: Column Address Set */
        parameter[0] = (uint8_t)(Xstart >> 8);           /* XS[15:8] */
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	0a1b      	lsrs	r3, r3, #8
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Xstart;                 /* XS[7:0] */
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Xstop >> 8);            /* XE[15:8] */
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	0a1b      	lsrs	r3, r3, #8
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Xstop;                  /* XE[7:0] */
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_CASET, (uint16_t *)parameter, 4);
 800f504:	f107 0308 	add.w	r3, r7, #8
 800f508:	2204      	movs	r2, #4
 800f50a:	4619      	mov	r1, r3
 800f50c:	202a      	movs	r0, #42	; 0x2a
 800f50e:	f7ff ff37 	bl	800f380 <__ST7789H2_WriteReg>

        /* RASET: Row Address Set */
        parameter[0] = (uint8_t)(Ystart >> 8);           /* YS[15:8] */
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	0a1b      	lsrs	r3, r3, #8
 800f516:	b2db      	uxtb	r3, r3
 800f518:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f51a:	2300      	movs	r3, #0
 800f51c:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Ystart;                 /* YS[7:0] */
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	b2db      	uxtb	r3, r3
 800f522:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f524:	2300      	movs	r3, #0
 800f526:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Ystop >> 8);            /* YE[15:8] */
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	0a1b      	lsrs	r3, r3, #8
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f530:	2300      	movs	r3, #0
 800f532:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Ystop;                  /* YE[7:0] */
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	b2db      	uxtb	r3, r3
 800f538:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f53a:	2300      	movs	r3, #0
 800f53c:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_RASET, (uint16_t *)parameter, 4);
 800f53e:	f107 0308 	add.w	r3, r7, #8
 800f542:	2204      	movs	r2, #4
 800f544:	4619      	mov	r1, r3
 800f546:	202b      	movs	r0, #43	; 0x2b
 800f548:	f7ff ff1a 	bl	800f380 <__ST7789H2_WriteReg>

        //refreshRect = Rect(Xpos, Ypos, Width, Height);
    }
}
 800f54c:	bf00      	nop
 800f54e:	3724      	adds	r7, #36	; 0x24
 800f550:	46bd      	mov	sp, r7
 800f552:	bd90      	pop	{r4, r7, pc}
 800f554:	2001f9c0 	.word	0x2001f9c0
 800f558:	2001f9bc 	.word	0x2001f9bc

0800f55c <_ZN11TouchGFXHAL10initializeEv>:
/*///////////////////////////////////////////////////////////////*/

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4618      	mov	r0, r3
 800f568:	f000 ffa6 	bl	80104b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    /* Display ON command */
    __ST7789H2_WriteReg(ST7789V_DISPLAY_ON, (uint16_t*)NULL, 0);
 800f56c:	2200      	movs	r2, #0
 800f56e:	2100      	movs	r1, #0
 800f570:	2029      	movs	r0, #41	; 0x29
 800f572:	f7ff ff05 	bl	800f380 <__ST7789H2_WriteReg>

    /* Sleep Out command */
    __ST7789H2_WriteReg(ST7789V_SLEEP_OUT, (uint16_t*)NULL, 0);
 800f576:	2200      	movs	r2, #0
 800f578:	2100      	movs	r1, #0
 800f57a:	2011      	movs	r0, #17
 800f57c:	f7ff ff00 	bl	800f380 <__ST7789H2_WriteReg>
}
 800f580:	bf00      	nop
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4618      	mov	r0, r3
 800f594:	f000 fff4 	bl	8010580 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f598:	4603      	mov	r3, r0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 fff3 	bl	801059c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 fff0 	bl	80105b2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    this->copyFrameBufferBlockToLCD(rect);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	6819      	ldr	r1, [r3, #0]
 800f5d6:	460a      	mov	r2, r1
 800f5d8:	6859      	ldr	r1, [r3, #4]
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	461a      	mov	r2, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 f805 	bl	800f5f0 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
	...

0800f5f0 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect rect)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b088      	sub	sp, #32
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	1d3b      	adds	r3, r7, #4
 800f5fa:	e883 0006 	stmia.w	r3, {r1, r2}
    uint16_t tmp;

    // Use default implementation (CPU copy!).
    // This can be accelerated using regular DMA hardware
    uint16_t *ptr = getClientFrameBuffer() + rect.x + rect.y * DISPLAY_WIDTH;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	4618      	mov	r0, r3
 800f602:	f7ff fdc7 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f606:	4602      	mov	r2, r0
 800f608:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f60c:	4619      	mov	r1, r3
 800f60e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f612:	4618      	mov	r0, r3
 800f614:	4b20      	ldr	r3, [pc, #128]	; (800f698 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	fb00 f303 	mul.w	r3, r0, r3
 800f61c:	440b      	add	r3, r1
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	4413      	add	r3, r2
 800f622:	61bb      	str	r3, [r7, #24]

    /* Set Cursor */
    __ST7789H2_SetDisplayWindow(rect.x, rect.y, rect.width, rect.height);
 800f624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f628:	b298      	uxth	r0, r3
 800f62a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f62e:	b299      	uxth	r1, r3
 800f630:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f634:	b29a      	uxth	r2, r3
 800f636:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	f7ff fed0 	bl	800f3e0 <__ST7789H2_SetDisplayWindow>

    /* Prepare to write */
    __ST7789H2_WriteReg(ST7789V_GRAM, (uint16_t*)NULL, 0);
 800f640:	2200      	movs	r2, #0
 800f642:	2100      	movs	r1, #0
 800f644:	202c      	movs	r0, #44	; 0x2c
 800f646:	f7ff fe9b 	bl	800f380 <__ST7789H2_WriteReg>

    /* Read dummy data */
    __ST7789H2_ReadData(&tmp, 1);
 800f64a:	f107 0316 	add.w	r3, r7, #22
 800f64e:	2101      	movs	r1, #1
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fe77 	bl	800f344 <__ST7789H2_ReadData>

    for (int32_t h = 0; h < rect.height ; h++)
 800f656:	2300      	movs	r3, #0
 800f658:	61fb      	str	r3, [r7, #28]
 800f65a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f65e:	461a      	mov	r2, r3
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	4293      	cmp	r3, r2
 800f664:	da13      	bge.n	800f68e <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x9e>
    {
#ifndef TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
        __ST7789H2_WriteData((ptr + h * DISPLAY_WIDTH), rect.width);
 800f666:	4b0c      	ldr	r3, [pc, #48]	; (800f698 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f668:	881b      	ldrh	r3, [r3, #0]
 800f66a:	461a      	mov	r2, r3
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	fb02 f303 	mul.w	r3, r2, r3
 800f672:	005b      	lsls	r3, r3, #1
 800f674:	69ba      	ldr	r2, [r7, #24]
 800f676:	4413      	add	r3, r2
 800f678:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f67c:	b292      	uxth	r2, r2
 800f67e:	4611      	mov	r1, r2
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff fe41 	bl	800f308 <__ST7789H2_WriteData>
    for (int32_t h = 0; h < rect.height ; h++)
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	3301      	adds	r3, #1
 800f68a:	61fb      	str	r3, [r7, #28]
 800f68c:	e7e5      	b.n	800f65a <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x6a>
        MX_DMA_Init(2);
        HAL_DMA_Start(&hdma, (uint32_t)((ptr + h * DISPLAY_WIDTH)), (uint32_t)LCD_DATA_ADDR, 2 * rect.width);
        HAL_DMA_PollForTransfer(&hdma, HAL_DMA_FULL_TRANSFER, 100);
#endif // !TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
    }
}
 800f68e:	bf00      	nop
 800f690:	3720      	adds	r7, #32
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	2001fd98 	.word	0x2001fd98

0800f69c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
 800f6a8:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	68b9      	ldr	r1, [r7, #8]
 800f6b2:	f000 ff8c 	bl	80105ce <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800f6b6:	4603      	mov	r3, r0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f000 ff16 	bl	80104fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f6d0:	bf00      	nop
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 ff14 	bl	8010510 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 ff12 	bl	8010524 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f700:	bf00      	nop
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 ff10 	bl	8010538 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f000 ff0e 	bl	801054c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800f730:	4603      	mov	r3, r0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	f000 ff0e 	bl	8010566 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
	...

0800f754 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	4a05      	ldr	r2, [pc, #20]	; (800f774 <_ZN11TouchGFXHALD1Ev+0x20>)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff fd95 	bl	800f294 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	08023cec 	.word	0x08023cec

0800f778 <_ZN11TouchGFXHALD0Ev>:
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff ffe7 	bl	800f754 <_ZN11TouchGFXHALD1Ev>
 800f786:	217c      	movs	r1, #124	; 0x7c
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f012 f980 	bl	8021a8e <_ZdlPvj>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	4618      	mov	r0, r3
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f79c:	2200      	movs	r2, #0
 800f79e:	2101      	movs	r1, #1
 800f7a0:	2001      	movs	r0, #1
 800f7a2:	f7fa f92e 	bl	8009a02 <osSemaphoreNew>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	4a0f      	ldr	r2, [pc, #60]	; (800f7e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f7aa:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f7ac:	4b0e      	ldr	r3, [pc, #56]	; (800f7e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f7b4:	4b0d      	ldr	r3, [pc, #52]	; (800f7ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f7b6:	4a0e      	ldr	r2, [pc, #56]	; (800f7f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f7b8:	2128      	movs	r1, #40	; 0x28
 800f7ba:	480e      	ldr	r0, [pc, #56]	; (800f7f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f7bc:	f012 f994 	bl	8021ae8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2104      	movs	r1, #4
 800f7c4:	2001      	movs	r0, #1
 800f7c6:	f7fa fa33 	bl	8009c30 <osMessageQueueNew>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f7ce:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f7d0:	4b09      	ldr	r3, [pc, #36]	; (800f7f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d105      	bne.n	800f7e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f7d8:	4b08      	ldr	r3, [pc, #32]	; (800f7fc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f7da:	4a05      	ldr	r2, [pc, #20]	; (800f7f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f7dc:	212c      	movs	r1, #44	; 0x2c
 800f7de:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f7e0:	f012 f982 	bl	8021ae8 <__assert_func>
}
 800f7e4:	bf00      	nop
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	2001f9c4 	.word	0x2001f9c4
 800f7ec:	080235fc 	.word	0x080235fc
 800f7f0:	08023648 	.word	0x08023648
 800f7f4:	08023678 	.word	0x08023678
 800f7f8:	2001f9c8 	.word	0x2001f9c8
 800f7fc:	080236a4 	.word	0x080236a4

0800f800 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f800:	b580      	push	{r7, lr}
 800f802:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f804:	4b04      	ldr	r3, [pc, #16]	; (800f818 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f04f 31ff 	mov.w	r1, #4294967295
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fa f981 	bl	8009b14 <osSemaphoreAcquire>
}
 800f812:	bf00      	nop
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	2001f9c4 	.word	0x2001f9c4

0800f81c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f820:	4b03      	ldr	r3, [pc, #12]	; (800f830 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4618      	mov	r0, r3
 800f826:	f7fa f9c3 	bl	8009bb0 <osSemaphoreRelease>
}
 800f82a:	bf00      	nop
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	2001f9c4 	.word	0x2001f9c4

0800f834 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f834:	b580      	push	{r7, lr}
 800f836:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f838:	4b03      	ldr	r3, [pc, #12]	; (800f848 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2100      	movs	r1, #0
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fa f968 	bl	8009b14 <osSemaphoreAcquire>
}
 800f844:	bf00      	nop
 800f846:	bd80      	pop	{r7, pc}
 800f848:	2001f9c4 	.word	0x2001f9c4

0800f84c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f850:	4b03      	ldr	r3, [pc, #12]	; (800f860 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4618      	mov	r0, r3
 800f856:	f7fa f9ab 	bl	8009bb0 <osSemaphoreRelease>
}
 800f85a:	bf00      	nop
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	2001f9c4 	.word	0x2001f9c4

0800f864 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800f864:	b580      	push	{r7, lr}
 800f866:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800f868:	4b04      	ldr	r3, [pc, #16]	; (800f87c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800f86a:	6818      	ldr	r0, [r3, #0]
 800f86c:	2300      	movs	r3, #0
 800f86e:	2200      	movs	r2, #0
 800f870:	4903      	ldr	r1, [pc, #12]	; (800f880 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800f872:	f7fa fa51 	bl	8009d18 <osMessageQueuePut>
}
 800f876:	bf00      	nop
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	2001f9c8 	.word	0x2001f9c8
 800f880:	20000014 	.word	0x20000014

0800f884 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800f88a:	4b09      	ldr	r3, [pc, #36]	; (800f8b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	1d39      	adds	r1, r7, #4
 800f890:	2300      	movs	r3, #0
 800f892:	2200      	movs	r2, #0
 800f894:	f7fa fa9c 	bl	8009dd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800f898:	4b05      	ldr	r3, [pc, #20]	; (800f8b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f89a:	6818      	ldr	r0, [r3, #0]
 800f89c:	1d39      	adds	r1, r7, #4
 800f89e:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f7fa fa94 	bl	8009dd0 <osMessageQueueGet>
}
 800f8a8:	bf00      	nop
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	2001f9c8 	.word	0x2001f9c8

0800f8b4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
        : color(0)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]
    }
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
    {
 800f8d8:	4a04      	ldr	r2, [pc, #16]	; (800f8ec <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	601a      	str	r2, [r3, #0]
    }
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	08023e14 	.word	0x08023e14

0800f8f0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
    }
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff ffe9 	bl	800f8d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f8fe:	2104      	movs	r1, #4
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f012 f8c4 	bl	8021a8e <_ZdlPvj>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    {
    }
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800f92c:	2300      	movs	r3, #0
    }
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
	...

0800f93c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
    {
 800f944:	4a04      	ldr	r2, [pc, #16]	; (800f958 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	601a      	str	r2, [r3, #0]
    }
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4618      	mov	r0, r3
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	0802418c 	.word	0x0802418c

0800f95c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
    }
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7ff ffe9 	bl	800f93c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800f96a:	210c      	movs	r1, #12
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f012 f88e 	bl	8021a8e <_ZdlPvj>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800f986:	4a09      	ldr	r2, [pc, #36]	; (800f9ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	601a      	str	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	683a      	ldr	r2, [r7, #0]
 800f990:	605a      	str	r2, [r3, #4]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	721a      	strb	r2, [r3, #8]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	725a      	strb	r2, [r3, #9]
    {
    }
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	0802418c 	.word	0x0802418c

0800f9b0 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
    {
    }
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
    {
    }
 800f9cc:	bf00      	nop
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	330c      	adds	r3, #12
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff ff65 	bl	800f8b4 <_ZN8touchgfx9colortypeC1Ev>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	330c      	adds	r3, #12
 800fa02:	4619      	mov	r1, r3
 800fa04:	4610      	mov	r0, r2
 800fa06:	f7ff ffb9 	bl	800f97c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800fa0a:	4a0b      	ldr	r2, [pc, #44]	; (800fa38 <_ZN8STM32DMAC1Ev+0x44>)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	601a      	str	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f103 000c 	add.w	r0, r3, #12
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3320      	adds	r3, #32
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	f001 ff6f 	bl	8011900 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3320      	adds	r3, #32
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff ffd6 	bl	800f9d8 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	08023dc4 	.word	0x08023dc4

0800fa3c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	370c      	adds	r7, #12
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
	...

0800fa54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800fa5e:	4b03      	ldr	r3, [pc, #12]	; (800fa6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800fa60:	4a03      	ldr	r2, [pc, #12]	; (800fa70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800fa62:	2122      	movs	r1, #34	; 0x22
 800fa64:	4803      	ldr	r0, [pc, #12]	; (800fa74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800fa66:	f012 f83f 	bl	8021ae8 <__assert_func>
 800fa6a:	bf00      	nop
 800fa6c:	080236e8 	.word	0x080236e8
 800fa70:	0802370c 	.word	0x0802370c
 800fa74:	0802374c 	.word	0x0802374c

0800fa78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800fa82:	4b03      	ldr	r3, [pc, #12]	; (800fa90 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800fa84:	4a03      	ldr	r2, [pc, #12]	; (800fa94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800fa86:	2127      	movs	r1, #39	; 0x27
 800fa88:	4803      	ldr	r0, [pc, #12]	; (800fa98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800fa8a:	f012 f82d 	bl	8021ae8 <__assert_func>
 800fa8e:	bf00      	nop
 800fa90:	080236e8 	.word	0x080236e8
 800fa94:	08023778 	.word	0x08023778
 800fa98:	0802374c 	.word	0x0802374c

0800fa9c <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	4a08      	ldr	r2, [pc, #32]	; (800fac8 <_ZN8STM32DMAD1Ev+0x2c>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	330c      	adds	r3, #12
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f81c 	bl	800faec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7ff ff40 	bl	800f93c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	08023dc4 	.word	0x08023dc4

0800facc <_ZN8STM32DMAD0Ev>:
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffe1 	bl	800fa9c <_ZN8STM32DMAD1Ev>
 800fada:	2144      	movs	r1, #68	; 0x44
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f011 ffd6 	bl	8021a8e <_ZdlPvj>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	4a05      	ldr	r2, [pc, #20]	; (800fb0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff fee7 	bl	800f8d0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	080241dc 	.word	0x080241dc

0800fb10 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ffe7 	bl	800faec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fb1e:	2114      	movs	r1, #20
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f011 ffb4 	bl	8021a8e <_ZdlPvj>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800fb38:	4a04      	ldr	r2, [pc, #16]	; (800fb4c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6013      	str	r3, [r2, #0]
    }
 800fb3e:	bf00      	nop
 800fb40:	370c      	adds	r7, #12
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	2001fe00 	.word	0x2001fe00

0800fb50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
 800fb5c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800fb5e:	4a0b      	ldr	r2, [pc, #44]	; (800fb8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	68ba      	ldr	r2, [r7, #8]
 800fb68:	605a      	str	r2, [r3, #4]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	609a      	str	r2, [r3, #8]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	60da      	str	r2, [r3, #12]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	611a      	str	r2, [r3, #16]
    {
    }
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3714      	adds	r7, #20
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	08023efc 	.word	0x08023efc

0800fb90 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
    {
 800fb98:	4a04      	ldr	r2, [pc, #16]	; (800fbac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	601a      	str	r2, [r3, #0]
    }
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4618      	mov	r0, r3
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	08023efc 	.word	0x08023efc

0800fbb0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
    }
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7ff ffe9 	bl	800fb90 <_ZN8touchgfx7MVPHeapD1Ev>
 800fbbe:	2114      	movs	r1, #20
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f011 ff64 	bl	8021a8e <_ZdlPvj>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    {
 800fbd8:	4a04      	ldr	r2, [pc, #16]	; (800fbec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	601a      	str	r2, [r3, #0]
    }
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	080243c0 	.word	0x080243c0

0800fbf0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    }
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7ff ffe9 	bl	800fbd0 <_ZN8touchgfx3LCDD1Ev>
 800fbfe:	2108      	movs	r1, #8
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f011 ff44 	bl	8021a8e <_ZdlPvj>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	801a      	strh	r2, [r3, #0]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2200      	movs	r2, #0
 800fc22:	805a      	strh	r2, [r3, #2]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	809a      	strh	r2, [r3, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	80da      	strh	r2, [r3, #6]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	811a      	strh	r2, [r3, #8]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	815a      	strh	r2, [r3, #10]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	819a      	strh	r2, [r3, #12]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	739a      	strb	r2, [r3, #14]
        {
        }
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	370c      	adds	r7, #12
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7ff ffd5 	bl	800fc10 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	611a      	str	r2, [r3, #16]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	829a      	strh	r2, [r3, #20]
    {
    }
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
 800fc88:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800fc8a:	4a55      	ldr	r2, [pc, #340]	; (800fde0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	605a      	str	r2, [r3, #4]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	609a      	str	r2, [r3, #8]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	60da      	str	r2, [r3, #12]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2200      	movs	r2, #0
 800fca6:	611a      	str	r2, [r3, #16]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	615a      	str	r2, [r3, #20]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	619a      	str	r2, [r3, #24]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	331c      	adds	r3, #28
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7ff ffcc 	bl	800fc56 <_ZN8touchgfx8GesturesC1Ev>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	639a      	str	r2, [r3, #56]	; 0x38
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	63da      	str	r2, [r3, #60]	; 0x3c
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	641a      	str	r2, [r3, #64]	; 0x40
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	645a      	str	r2, [r3, #68]	; 0x44
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2201      	movs	r2, #1
 800fcea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	64da      	str	r2, [r3, #76]	; 0x4c
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	3350      	adds	r3, #80	; 0x50
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fd fee8 	bl	800dade <_ZN8touchgfx4RectC1Ev>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2200      	movs	r2, #0
 800fd12:	659a      	str	r2, [r3, #88]	; 0x58
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	65da      	str	r2, [r3, #92]	; 0x5c
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	661a      	str	r2, [r3, #96]	; 0x60
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	671a      	str	r2, [r3, #112]	; 0x70
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800fd96:	4a13      	ldr	r2, [pc, #76]	; (800fde4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800fd9c:	4a12      	ldr	r2, [pc, #72]	; (800fde8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fd9e:	8b3b      	ldrh	r3, [r7, #24]
 800fda0:	8013      	strh	r3, [r2, #0]
 800fda2:	4b11      	ldr	r3, [pc, #68]	; (800fde8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fda4:	881a      	ldrh	r2, [r3, #0]
 800fda6:	4b11      	ldr	r3, [pc, #68]	; (800fdec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800fda8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800fdaa:	4a11      	ldr	r2, [pc, #68]	; (800fdf0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fdac:	8bbb      	ldrh	r3, [r7, #28]
 800fdae:	8013      	strh	r3, [r2, #0]
 800fdb0:	4b0f      	ldr	r3, [pc, #60]	; (800fdf0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fdb2:	881a      	ldrh	r2, [r3, #0]
 800fdb4:	4b0f      	ldr	r3, [pc, #60]	; (800fdf4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800fdb6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800fdb8:	4b0f      	ldr	r3, [pc, #60]	; (800fdf8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800fdbe:	8b3a      	ldrh	r2, [r7, #24]
 800fdc0:	8bbb      	ldrh	r3, [r7, #28]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	bf34      	ite	cc
 800fdc6:	2301      	movcc	r3, #1
 800fdc8:	2300      	movcs	r3, #0
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	461a      	mov	r2, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	080240b4 	.word	0x080240b4
 800fde4:	2001fda4 	.word	0x2001fda4
 800fde8:	2001fd98 	.word	0x2001fd98
 800fdec:	2001fd9e 	.word	0x2001fd9e
 800fdf0:	2001fd9a 	.word	0x2001fd9a
 800fdf4:	2001fda0 	.word	0x2001fda0
 800fdf8:	2001fd9c 	.word	0x2001fd9c

0800fdfc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd fbcb 	bl	800d5a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800fe0e:	bf00      	nop
 800fe10:	3708      	adds	r7, #8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af02      	add	r7, sp, #8
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
 800fe24:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	68b9      	ldr	r1, [r7, #8]
 800fe32:	f7ff fe8d 	bl	800fb50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800fe36:	4a04      	ldr	r2, [pc, #16]	; (800fe48 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	601a      	str	r2, [r3, #0]
    {

    }
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	08023ee8 	.word	0x08023ee8

0800fe4c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__tcf_0+0xc>)
 800fe52:	f000 f965 	bl	8010120 <_ZN12FrontendHeapD1Ev>
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	2001f9cc 	.word	0x2001f9cc

0800fe5c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800fe60:	4b11      	ldr	r3, [pc, #68]	; (800fea8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fe62:	e8d3 3f8f 	ldab	r3, [r3]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	bf0c      	ite	eq
 800fe70:	2301      	moveq	r3, #1
 800fe72:	2300      	movne	r3, #0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d013      	beq.n	800fea2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fe7a:	480b      	ldr	r0, [pc, #44]	; (800fea8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fe7c:	f011 fe09 	bl	8021a92 <__cxa_guard_acquire>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	bf14      	ite	ne
 800fe86:	2301      	movne	r3, #1
 800fe88:	2300      	moveq	r3, #0
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d008      	beq.n	800fea2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fe90:	4806      	ldr	r0, [pc, #24]	; (800feac <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fe92:	f000 f867 	bl	800ff64 <_ZN12FrontendHeapC1Ev>
 800fe96:	4806      	ldr	r0, [pc, #24]	; (800feb0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800fe98:	f011 fe44 	bl	8021b24 <atexit>
 800fe9c:	4802      	ldr	r0, [pc, #8]	; (800fea8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fe9e:	f011 fe04 	bl	8021aaa <__cxa_guard_release>
        return instance;
 800fea2:	4b02      	ldr	r3, [pc, #8]	; (800feac <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800fea4:	4618      	mov	r0, r3
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	2001fc54 	.word	0x2001fc54
 800feac:	2001f9cc 	.word	0x2001f9cc
 800feb0:	0800fe4d 	.word	0x0800fe4d

0800feb4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	4a05      	ldr	r2, [pc, #20]	; (800fed4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff fe63 	bl	800fb90 <_ZN8touchgfx7MVPHeapD1Ev>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	08023ee8 	.word	0x08023ee8

0800fed8 <_ZN16FrontendHeapBaseD0Ev>:
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff ffe7 	bl	800feb4 <_ZN16FrontendHeapBaseD1Ev>
 800fee6:	2114      	movs	r1, #20
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f011 fdd0 	bl	8021a8e <_ZdlPvj>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 fb9a 	bl	801063c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ff08:	4a03      	ldr	r2, [pc, #12]	; (800ff18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	08023eb4 	.word	0x08023eb4

0800ff1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 fb88 	bl	801063c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ff2c:	4a03      	ldr	r2, [pc, #12]	; (800ff3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	08023e80 	.word	0x08023e80

0800ff40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 fb76 	bl	801063c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800ff50:	4a03      	ldr	r2, [pc, #12]	; (800ff60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	08023e4c 	.word	0x08023e4c

0800ff64 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ff64:	b590      	push	{r4, r7, lr}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af02      	add	r7, sp, #8
 800ff6a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f103 0114 	add.w	r1, r3, #20
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	4623      	mov	r3, r4
 800ff8a:	f7ff ff45 	bl	800fe18 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800ff8e:	4a18      	ldr	r2, [pc, #96]	; (800fff0 <_ZN12FrontendHeapC1Ev+0x8c>)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3314      	adds	r3, #20
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7ff ffad 	bl	800fef8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	332c      	adds	r3, #44	; 0x2c
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ffba 	bl	800ff1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff ffc6 	bl	800ff40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fe fdbe 	bl	800eb3c <_ZN5ModelC1Ev>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	f7fe fd9e 	bl	800eb10 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f7ff ff0c 	bl	800fdfc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd90      	pop	{r4, r7, pc}
 800ffee:	bf00      	nop
 800fff0:	08023e38 	.word	0x08023e38

0800fff4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
 8010000:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	8bbb      	ldrh	r3, [r7, #28]
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	8b3b      	ldrh	r3, [r7, #24]
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	68b9      	ldr	r1, [r7, #8]
 8010012:	f7ff fe33 	bl	800fc7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8010016:	4a04      	ldr	r2, [pc, #16]	; (8010028 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	601a      	str	r2, [r3, #0]
    }
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	4618      	mov	r0, r3
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08023f0c 	.word	0x08023f0c

0801002c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af02      	add	r7, sp, #8
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	8bbb      	ldrh	r3, [r7, #28]
 801003e:	9301      	str	r3, [sp, #4]
 8010040:	8b3b      	ldrh	r3, [r7, #24]
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	68b9      	ldr	r1, [r7, #8]
 801004a:	f7ff ffd3 	bl	800fff4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801004e:	4a04      	ldr	r2, [pc, #16]	; (8010060 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	601a      	str	r2, [r3, #0]
    }
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	08023cec 	.word	0x08023cec

08010064 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	4a04      	ldr	r2, [pc, #16]	; (8010080 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	601a      	str	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr
 8010080:	08023cd4 	.word	0x08023cd4

08010084 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff ffe8 	bl	8010064 <_ZN8touchgfx15TouchControllerC1Ev>
 8010094:	4a03      	ldr	r2, [pc, #12]	; (80100a4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4618      	mov	r0, r3
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	08023cbc 	.word	0x08023cbc

080100a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 240);

void touchgfx_init()
{
 80100a8:	b590      	push	{r4, r7, lr}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80100ae:	f7fe faff 	bl	800e6b0 <_ZN14BitmapDatabase11getInstanceEv>
 80100b2:	4604      	mov	r4, r0
 80100b4:	f7fe fb06 	bl	800e6c4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80100b8:	4603      	mov	r3, r0
 80100ba:	4619      	mov	r1, r3
 80100bc:	2300      	movs	r3, #0
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	2300      	movs	r3, #0
 80100c2:	2200      	movs	r2, #0
 80100c4:	4620      	mov	r0, r4
 80100c6:	f005 ff1d 	bl	8015f04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80100ca:	4809      	ldr	r0, [pc, #36]	; (80100f0 <touchgfx_init+0x48>)
 80100cc:	f7ff fd30 	bl	800fb30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80100d0:	2000      	movs	r0, #0
 80100d2:	f7fe fc3b 	bl	800e94c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80100d6:	4807      	ldr	r0, [pc, #28]	; (80100f4 <touchgfx_init+0x4c>)
 80100d8:	f005 fe7c 	bl	8015dd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80100dc:	f7ff febe 	bl	800fe5c <_ZN12FrontendHeap11getInstanceEv>
 80100e0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80100e2:	4805      	ldr	r0, [pc, #20]	; (80100f8 <touchgfx_init+0x50>)
 80100e4:	f7ff fa3a 	bl	800f55c <_ZN11TouchGFXHAL10initializeEv>
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd90      	pop	{r4, r7, pc}
 80100f0:	2001fd18 	.word	0x2001fd18
 80100f4:	20000018 	.word	0x20000018
 80100f8:	2001fd1c 	.word	0x2001fd1c

080100fc <touchgfx_components_init>:

void touchgfx_components_init()
{
 80100fc:	b480      	push	{r7}
 80100fe:	af00      	add	r7, sp, #0
}
 8010100:	bf00      	nop
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
	...

0801010c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8010110:	4802      	ldr	r0, [pc, #8]	; (801011c <touchgfx_taskEntry+0x10>)
 8010112:	f000 fd9a 	bl	8010c4a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8010116:	bf00      	nop
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2001fd1c 	.word	0x2001fd1c

08010120 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	4a10      	ldr	r2, [pc, #64]	; (801016c <_ZN12FrontendHeapD1Ev+0x4c>)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe fcb5 	bl	800eaa4 <_ZN19FrontendApplicationD1Ev>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010140:	4618      	mov	r0, r3
 8010142:	f000 f827 	bl	8010194 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	332c      	adds	r3, #44	; 0x2c
 801014a:	4618      	mov	r0, r3
 801014c:	f000 f844 	bl	80101d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3314      	adds	r3, #20
 8010154:	4618      	mov	r0, r3
 8010156:	f000 f861 	bl	801021c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff fea9 	bl	800feb4 <_ZN16FrontendHeapBaseD1Ev>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	08023e38 	.word	0x08023e38

08010170 <_ZN12FrontendHeapD0Ev>:
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f7ff ffd1 	bl	8010120 <_ZN12FrontendHeapD1Ev>
 801017e:	f44f 7122 	mov.w	r1, #648	; 0x288
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f011 fc83 	bl	8021a8e <_ZdlPvj>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	4a05      	ldr	r2, [pc, #20]	; (80101b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 fa47 	bl	8010638 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	08023e4c 	.word	0x08023e4c

080101b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff ffe7 	bl	8010194 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80101c6:	2114      	movs	r1, #20
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f011 fc60 	bl	8021a8e <_ZdlPvj>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	4a05      	ldr	r2, [pc, #20]	; (80101f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	601a      	str	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 fa25 	bl	8010638 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	08023e80 	.word	0x08023e80

080101fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7ff ffe7 	bl	80101d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801020a:	21e8      	movs	r1, #232	; 0xe8
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f011 fc3e 	bl	8021a8e <_ZdlPvj>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	4a05      	ldr	r2, [pc, #20]	; (801023c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f000 fa03 	bl	8010638 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	08023eb4 	.word	0x08023eb4

08010240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff ffe7 	bl	801021c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801024e:	2118      	movs	r1, #24
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f011 fc1c 	bl	8021a8e <_ZdlPvj>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	4a05      	ldr	r2, [pc, #20]	; (8010280 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	f7ff fcad 	bl	800fbd0 <_ZN8touchgfx3LCDD1Ev>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4618      	mov	r0, r3
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	080247cc 	.word	0x080247cc

08010284 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7ff ffe7 	bl	8010260 <_ZN8touchgfx8LCD16bppD1Ev>
 8010292:	2178      	movs	r1, #120	; 0x78
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f011 fbfa 	bl	8021a8e <_ZdlPvj>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <_Z41__static_initialization_and_destruction_0ii>:
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d117      	bne.n	80102e4 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d112      	bne.n	80102e4 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 80102be:	4817      	ldr	r0, [pc, #92]	; (801031c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80102c0:	f7ff fee0 	bl	8010084 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80102c4:	4816      	ldr	r0, [pc, #88]	; (8010320 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80102c6:	f7ff fb95 	bl	800f9f4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80102ca:	4816      	ldr	r0, [pc, #88]	; (8010324 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80102cc:	f008 ff1a 	bl	8019104 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 240);
 80102d0:	23f0      	movs	r3, #240	; 0xf0
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	23f0      	movs	r3, #240	; 0xf0
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	4b10      	ldr	r3, [pc, #64]	; (801031c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80102da:	4a12      	ldr	r2, [pc, #72]	; (8010324 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80102dc:	4910      	ldr	r1, [pc, #64]	; (8010320 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80102de:	4812      	ldr	r0, [pc, #72]	; (8010328 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80102e0:	f7ff fea4 	bl	801002c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d113      	bne.n	8010312 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d10e      	bne.n	8010312 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80102f4:	480c      	ldr	r0, [pc, #48]	; (8010328 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80102f6:	f7ff fa2d 	bl	800f754 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80102fa:	480c      	ldr	r0, [pc, #48]	; (801032c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80102fc:	f7fc fbc0 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010300:	4808      	ldr	r0, [pc, #32]	; (8010324 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010302:	f7ff ffad 	bl	8010260 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8010306:	4806      	ldr	r0, [pc, #24]	; (8010320 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010308:	f7ff fbc8 	bl	800fa9c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801030c:	4803      	ldr	r0, [pc, #12]	; (801031c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801030e:	f7fe fd91 	bl	800ee34 <_ZN20STM32TouchControllerD1Ev>
}
 8010312:	bf00      	nop
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	2001fc58 	.word	0x2001fc58
 8010320:	2001fc5c 	.word	0x2001fc5c
 8010324:	2001fca0 	.word	0x2001fca0
 8010328:	2001fd1c 	.word	0x2001fd1c
 801032c:	20000018 	.word	0x20000018

08010330 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010338:	2301      	movs	r3, #1
    }
 801033a:	4618      	mov	r0, r3
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8010346:	b480      	push	{r7}
 8010348:	b083      	sub	sp, #12
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801034e:	230c      	movs	r3, #12
    }
 8010350:	4618      	mov	r0, r3
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	460b      	mov	r3, r1
 8010366:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010368:	887a      	ldrh	r2, [r7, #2]
 801036a:	4613      	mov	r3, r2
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	4413      	add	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	3308      	adds	r3, #8
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	4413      	add	r3, r2
    }
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010390:	887a      	ldrh	r2, [r7, #2]
 8010392:	4613      	mov	r3, r2
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	4413      	add	r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	3308      	adds	r3, #8
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	4413      	add	r3, r2
    }
 80103a0:	4618      	mov	r0, r3
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80103b4:	2301      	movs	r3, #1
    }
 80103b6:	4618      	mov	r0, r3
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80103ca:	23e0      	movs	r3, #224	; 0xe0
    }
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	460b      	mov	r3, r1
 80103e2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80103e4:	887a      	ldrh	r2, [r7, #2]
 80103e6:	4613      	mov	r3, r2
 80103e8:	00db      	lsls	r3, r3, #3
 80103ea:	1a9b      	subs	r3, r3, r2
 80103ec:	015b      	lsls	r3, r3, #5
 80103ee:	3308      	adds	r3, #8
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	4413      	add	r3, r2
    }
 80103f4:	4618      	mov	r0, r3
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	460b      	mov	r3, r1
 801040a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801040c:	887a      	ldrh	r2, [r7, #2]
 801040e:	4613      	mov	r3, r2
 8010410:	00db      	lsls	r3, r3, #3
 8010412:	1a9b      	subs	r3, r3, r2
 8010414:	015b      	lsls	r3, r3, #5
 8010416:	3308      	adds	r3, #8
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	4413      	add	r3, r2
    }
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010430:	2301      	movs	r3, #1
    }
 8010432:	4618      	mov	r0, r3
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801043e:	b480      	push	{r7}
 8010440:	b083      	sub	sp, #12
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010446:	2310      	movs	r3, #16
    }
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	460b      	mov	r3, r1
 801045e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010460:	887b      	ldrh	r3, [r7, #2]
 8010462:	011b      	lsls	r3, r3, #4
 8010464:	3308      	adds	r3, #8
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	4413      	add	r3, r2
    }
 801046a:	4618      	mov	r0, r3
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr

08010476 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010476:	b480      	push	{r7}
 8010478:	b083      	sub	sp, #12
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	460b      	mov	r3, r1
 8010480:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010482:	887b      	ldrh	r3, [r7, #2]
 8010484:	011b      	lsls	r3, r3, #4
 8010486:	3308      	adds	r3, #8
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	4413      	add	r3, r2
    }
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <_GLOBAL__sub_I_touchgfx_init>:
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
 801049c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80104a0:	2001      	movs	r0, #1
 80104a2:	f7ff feff 	bl	80102a4 <_Z41__static_initialization_and_destruction_0ii>
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <_GLOBAL__sub_D_touchgfx_init>:
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80104b0:	2000      	movs	r0, #0
 80104b2:	f7ff fef7 	bl	80102a4 <_Z41__static_initialization_and_destruction_0ii>
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 240 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 80104b8:	b5b0      	push	{r4, r5, r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f000 fbad 	bl	8010c22 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80104c8:	687d      	ldr	r5, [r7, #4]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	3364      	adds	r3, #100	; 0x64
 80104d0:	681c      	ldr	r4, [r3, #0]
 80104d2:	f003 f89f 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4619      	mov	r1, r3
 80104da:	4628      	mov	r0, r5
 80104dc:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3388      	adds	r3, #136	; 0x88
 80104e6:	681c      	ldr	r4, [r3, #0]
 80104e8:	2300      	movs	r3, #0
 80104ea:	2200      	movs	r2, #0
 80104ec:	4902      	ldr	r1, [pc, #8]	; (80104f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80104ee:	47a0      	blx	r4
}
 80104f0:	bf00      	nop
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bdb0      	pop	{r4, r5, r7, pc}
 80104f8:	200000fc 	.word	0x200000fc

080104fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
}
 8010504:	bf00      	nop
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
}
 801052c:	bf00      	nop
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f000 fb4a 	bl	8010bf0 <_ZN8touchgfx3HAL10beginFrameEv>
 801055c:	4603      	mov	r3, r0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b082      	sub	sp, #8
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f000 fb49 	bl	8010c08 <_ZN8touchgfx3HAL8endFrameEv>
}
 8010576:	bf00      	nop
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8010588:	4b03      	ldr	r3, [pc, #12]	; (8010598 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 801058a:	4618      	mov	r0, r3
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	200000fc 	.word	0x200000fc

0801059c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80105a6:	bf00      	nop
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr

080105b2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b082      	sub	sp, #8
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
 80105ba:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 fadf 	bl	8010b84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80105c6:	bf00      	nop
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	60b9      	str	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
 80105da:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	68b9      	ldr	r1, [r7, #8]
 80105e4:	f000 fc39 	bl	8010e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80105e8:	4603      	mov	r3, r0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80105f2:	8880      	ldrh	r0, [r0, #4]
 80105f4:	4770      	bx	lr

080105f6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80105f6:	b570      	push	{r4, r5, r6, lr}
 80105f8:	6803      	ldr	r3, [r0, #0]
 80105fa:	4605      	mov	r5, r0
 80105fc:	460c      	mov	r4, r1
 80105fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010600:	2100      	movs	r1, #0
 8010602:	4798      	blx	r3
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	4606      	mov	r6, r0
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	4628      	mov	r0, r5
 801060c:	4798      	blx	r3
 801060e:	1ba4      	subs	r4, r4, r6
 8010610:	b2a4      	uxth	r4, r4
 8010612:	fbb4 f0f0 	udiv	r0, r4, r0
 8010616:	bd70      	pop	{r4, r5, r6, pc}

08010618 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010618:	2300      	movs	r3, #0
 801061a:	8083      	strh	r3, [r0, #4]
 801061c:	4770      	bx	lr

0801061e <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801061e:	b510      	push	{r4, lr}
 8010620:	4604      	mov	r4, r0
 8010622:	6803      	ldr	r3, [r0, #0]
 8010624:	8881      	ldrh	r1, [r0, #4]
 8010626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010628:	4798      	blx	r3
 801062a:	88a3      	ldrh	r3, [r4, #4]
 801062c:	3301      	adds	r3, #1
 801062e:	80a3      	strh	r3, [r4, #4]
 8010630:	bd10      	pop	{r4, pc}

08010632 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010632:	6803      	ldr	r3, [r0, #0]
 8010634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010636:	4718      	bx	r3

08010638 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8010638:	4770      	bx	lr
	...

0801063c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801063c:	4a02      	ldr	r2, [pc, #8]	; (8010648 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801063e:	6002      	str	r2, [r0, #0]
 8010640:	2200      	movs	r2, #0
 8010642:	8082      	strh	r2, [r0, #4]
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	08023fe4 	.word	0x08023fe4

0801064c <_ZN8touchgfx9Container13getFirstChildEv>:
 801064c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801064e:	4770      	bx	lr

08010650 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010652:	2000      	movs	r0, #0
 8010654:	b12b      	cbz	r3, 8010662 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010656:	b920      	cbnz	r0, 8010662 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010658:	1a5a      	subs	r2, r3, r1
 801065a:	4250      	negs	r0, r2
 801065c:	4150      	adcs	r0, r2
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	e7f8      	b.n	8010654 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8010662:	4770      	bx	lr

08010664 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8010664:	2300      	movs	r3, #0
 8010666:	6148      	str	r0, [r1, #20]
 8010668:	618b      	str	r3, [r1, #24]
 801066a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801066c:	b913      	cbnz	r3, 8010674 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801066e:	6281      	str	r1, [r0, #40]	; 0x28
 8010670:	4770      	bx	lr
 8010672:	4613      	mov	r3, r2
 8010674:	699a      	ldr	r2, [r3, #24]
 8010676:	2a00      	cmp	r2, #0
 8010678:	d1fb      	bne.n	8010672 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801067a:	6199      	str	r1, [r3, #24]
 801067c:	4770      	bx	lr

0801067e <_ZN8touchgfx9Container9removeAllEv>:
 801067e:	2200      	movs	r2, #0
 8010680:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010682:	b123      	cbz	r3, 801068e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010684:	6999      	ldr	r1, [r3, #24]
 8010686:	6281      	str	r1, [r0, #40]	; 0x28
 8010688:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801068c:	e7f8      	b.n	8010680 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801068e:	4770      	bx	lr

08010690 <_ZN8touchgfx9Container6unlinkEv>:
 8010690:	2300      	movs	r3, #0
 8010692:	6283      	str	r3, [r0, #40]	; 0x28
 8010694:	4770      	bx	lr

08010696 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010696:	2200      	movs	r2, #0
 8010698:	8002      	strh	r2, [r0, #0]
 801069a:	8042      	strh	r2, [r0, #2]
 801069c:	8082      	strh	r2, [r0, #4]
 801069e:	80c2      	strh	r2, [r0, #6]
 80106a0:	4770      	bx	lr

080106a2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80106a2:	b570      	push	{r4, r5, r6, lr}
 80106a4:	460d      	mov	r5, r1
 80106a6:	4616      	mov	r6, r2
 80106a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80106aa:	b13c      	cbz	r4, 80106bc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	4620      	mov	r0, r4
 80106b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106b2:	4632      	mov	r2, r6
 80106b4:	4629      	mov	r1, r5
 80106b6:	4798      	blx	r3
 80106b8:	69a4      	ldr	r4, [r4, #24]
 80106ba:	e7f6      	b.n	80106aa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80106bc:	bd70      	pop	{r4, r5, r6, pc}

080106be <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80106be:	b538      	push	{r3, r4, r5, lr}
 80106c0:	460d      	mov	r5, r1
 80106c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80106c4:	b134      	cbz	r4, 80106d4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	4621      	mov	r1, r4
 80106ca:	689b      	ldr	r3, [r3, #8]
 80106cc:	4628      	mov	r0, r5
 80106ce:	4798      	blx	r3
 80106d0:	69a4      	ldr	r4, [r4, #24]
 80106d2:	e7f7      	b.n	80106c4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80106d4:	bd38      	pop	{r3, r4, r5, pc}

080106d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80106d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80106d8:	b19b      	cbz	r3, 8010702 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80106da:	428b      	cmp	r3, r1
 80106dc:	d109      	bne.n	80106f2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80106de:	2100      	movs	r1, #0
 80106e0:	699a      	ldr	r2, [r3, #24]
 80106e2:	6159      	str	r1, [r3, #20]
 80106e4:	6282      	str	r2, [r0, #40]	; 0x28
 80106e6:	b902      	cbnz	r2, 80106ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80106e8:	4770      	bx	lr
 80106ea:	6199      	str	r1, [r3, #24]
 80106ec:	4770      	bx	lr
 80106ee:	4613      	mov	r3, r2
 80106f0:	b13a      	cbz	r2, 8010702 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80106f2:	699a      	ldr	r2, [r3, #24]
 80106f4:	428a      	cmp	r2, r1
 80106f6:	d1fa      	bne.n	80106ee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80106f8:	698a      	ldr	r2, [r1, #24]
 80106fa:	619a      	str	r2, [r3, #24]
 80106fc:	2300      	movs	r3, #0
 80106fe:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010702:	4770      	bx	lr

08010704 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010704:	b410      	push	{r4}
 8010706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010708:	4604      	mov	r4, r0
 801070a:	b92b      	cbnz	r3, 8010718 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801070c:	6803      	ldr	r3, [r0, #0]
 801070e:	4611      	mov	r1, r2
 8010710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010716:	4718      	bx	r3
 8010718:	b941      	cbnz	r1, 801072c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801071a:	6193      	str	r3, [r2, #24]
 801071c:	6282      	str	r2, [r0, #40]	; 0x28
 801071e:	6154      	str	r4, [r2, #20]
 8010720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010724:	4770      	bx	lr
 8010726:	4603      	mov	r3, r0
 8010728:	2800      	cmp	r0, #0
 801072a:	d0f9      	beq.n	8010720 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801072c:	4299      	cmp	r1, r3
 801072e:	6998      	ldr	r0, [r3, #24]
 8010730:	d1f9      	bne.n	8010726 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010732:	6190      	str	r0, [r2, #24]
 8010734:	618a      	str	r2, [r1, #24]
 8010736:	e7f2      	b.n	801071e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010738 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801073c:	461f      	mov	r7, r3
 801073e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8010742:	460d      	mov	r5, r1
 8010744:	4616      	mov	r6, r2
 8010746:	b103      	cbz	r3, 801074a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010748:	6038      	str	r0, [r7, #0]
 801074a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801074c:	b314      	cbz	r4, 8010794 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801074e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010752:	b1eb      	cbz	r3, 8010790 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010754:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010758:	428d      	cmp	r5, r1
 801075a:	db19      	blt.n	8010790 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801075c:	8923      	ldrh	r3, [r4, #8]
 801075e:	b289      	uxth	r1, r1
 8010760:	440b      	add	r3, r1
 8010762:	b21b      	sxth	r3, r3
 8010764:	429d      	cmp	r5, r3
 8010766:	da13      	bge.n	8010790 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010768:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801076c:	4296      	cmp	r6, r2
 801076e:	db0f      	blt.n	8010790 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010770:	8963      	ldrh	r3, [r4, #10]
 8010772:	b292      	uxth	r2, r2
 8010774:	4413      	add	r3, r2
 8010776:	b21b      	sxth	r3, r3
 8010778:	429e      	cmp	r6, r3
 801077a:	da09      	bge.n	8010790 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	1ab2      	subs	r2, r6, r2
 8010780:	1a69      	subs	r1, r5, r1
 8010782:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8010786:	b212      	sxth	r2, r2
 8010788:	463b      	mov	r3, r7
 801078a:	b209      	sxth	r1, r1
 801078c:	4620      	mov	r0, r4
 801078e:	47c0      	blx	r8
 8010790:	69a4      	ldr	r4, [r4, #24]
 8010792:	e7db      	b.n	801074c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010798 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079c:	4c6c      	ldr	r4, [pc, #432]	; (8010950 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 801079e:	b0a1      	sub	sp, #132	; 0x84
 80107a0:	6824      	ldr	r4, [r4, #0]
 80107a2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80107a4:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80107a8:	2400      	movs	r4, #0
 80107aa:	802c      	strh	r4, [r5, #0]
 80107ac:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80107ae:	4606      	mov	r6, r0
 80107b0:	802c      	strh	r4, [r5, #0]
 80107b2:	601c      	str	r4, [r3, #0]
 80107b4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80107b8:	9303      	str	r3, [sp, #12]
 80107ba:	f7ff ffbd 	bl	8010738 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80107be:	f1b9 0f03 	cmp.w	r9, #3
 80107c2:	f340 80bf 	ble.w	8010944 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 80107c6:	4631      	mov	r1, r6
 80107c8:	a80c      	add	r0, sp, #48	; 0x30
 80107ca:	f004 f803 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80107ce:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80107d2:	9306      	str	r3, [sp, #24]
 80107d4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80107d8:	9307      	str	r3, [sp, #28]
 80107da:	9b03      	ldr	r3, [sp, #12]
 80107dc:	f8d3 a000 	ldr.w	sl, [r3]
 80107e0:	f1ba 0f00 	cmp.w	sl, #0
 80107e4:	f000 80b1 	beq.w	801094a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80107e8:	4651      	mov	r1, sl
 80107ea:	a810      	add	r0, sp, #64	; 0x40
 80107ec:	f003 fff2 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80107f0:	2002      	movs	r0, #2
 80107f2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	fb91 f1f0 	sdiv	r1, r1, r0
 80107fc:	9a06      	ldr	r2, [sp, #24]
 80107fe:	189d      	adds	r5, r3, r2
 8010800:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8010804:	9a07      	ldr	r2, [sp, #28]
 8010806:	4419      	add	r1, r3
 8010808:	9b02      	ldr	r3, [sp, #8]
 801080a:	1a6d      	subs	r5, r5, r1
 801080c:	4413      	add	r3, r2
 801080e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010812:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010816:	fb92 f2f0 	sdiv	r2, r2, r0
 801081a:	440a      	add	r2, r1
 801081c:	1a9b      	subs	r3, r3, r2
 801081e:	435b      	muls	r3, r3
 8010820:	fb05 3505 	mla	r5, r5, r5, r3
 8010824:	4f4b      	ldr	r7, [pc, #300]	; (8010954 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010826:	ac10      	add	r4, sp, #64	; 0x40
 8010828:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801082c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801082e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010830:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010834:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801083c:	2303      	movs	r3, #3
 801083e:	f1b9 0f0c 	cmp.w	r9, #12
 8010842:	bfda      	itte	le
 8010844:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010848:	fb92 f8f3 	sdivle	r8, r2, r3
 801084c:	4698      	movgt	r8, r3
 801084e:	2400      	movs	r4, #0
 8010850:	f8cd 9000 	str.w	r9, [sp]
 8010854:	1c63      	adds	r3, r4, #1
 8010856:	9308      	str	r3, [sp, #32]
 8010858:	9b00      	ldr	r3, [sp, #0]
 801085a:	f04f 0b00 	mov.w	fp, #0
 801085e:	fb93 f3f8 	sdiv	r3, r3, r8
 8010862:	f004 0401 	and.w	r4, r4, #1
 8010866:	aa10      	add	r2, sp, #64	; 0x40
 8010868:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801086c:	b29b      	uxth	r3, r3
 801086e:	3404      	adds	r4, #4
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	9a04      	ldr	r2, [sp, #16]
 8010874:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010878:	fb13 f302 	smulbb	r3, r3, r2
 801087c:	9a01      	ldr	r2, [sp, #4]
 801087e:	b29b      	uxth	r3, r3
 8010880:	1899      	adds	r1, r3, r2
 8010882:	9305      	str	r3, [sp, #20]
 8010884:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010888:	b209      	sxth	r1, r1
 801088a:	4299      	cmp	r1, r3
 801088c:	db4d      	blt.n	801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801088e:	8932      	ldrh	r2, [r6, #8]
 8010890:	4413      	add	r3, r2
 8010892:	b21b      	sxth	r3, r3
 8010894:	4299      	cmp	r1, r3
 8010896:	da48      	bge.n	801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010898:	9b04      	ldr	r3, [sp, #16]
 801089a:	6827      	ldr	r7, [r4, #0]
 801089c:	fb17 f703 	smulbb	r7, r7, r3
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	b2bf      	uxth	r7, r7
 80108a4:	18fa      	adds	r2, r7, r3
 80108a6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80108aa:	b212      	sxth	r2, r2
 80108ac:	429a      	cmp	r2, r3
 80108ae:	db3c      	blt.n	801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80108b0:	8970      	ldrh	r0, [r6, #10]
 80108b2:	4403      	add	r3, r0
 80108b4:	b21b      	sxth	r3, r3
 80108b6:	429a      	cmp	r2, r3
 80108b8:	da37      	bge.n	801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80108ba:	2300      	movs	r3, #0
 80108bc:	4630      	mov	r0, r6
 80108be:	930b      	str	r3, [sp, #44]	; 0x2c
 80108c0:	ab0b      	add	r3, sp, #44	; 0x2c
 80108c2:	f7ff ff39 	bl	8010738 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80108c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108c8:	b37a      	cbz	r2, 801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80108ca:	4552      	cmp	r2, sl
 80108cc:	d02d      	beq.n	801092a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80108ce:	4611      	mov	r1, r2
 80108d0:	a80e      	add	r0, sp, #56	; 0x38
 80108d2:	9209      	str	r2, [sp, #36]	; 0x24
 80108d4:	f003 ff7e 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80108d8:	f04f 0e02 	mov.w	lr, #2
 80108dc:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80108e0:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80108e4:	fb91 f1fe 	sdiv	r1, r1, lr
 80108e8:	fb9c fcfe 	sdiv	ip, ip, lr
 80108ec:	9a06      	ldr	r2, [sp, #24]
 80108ee:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80108f2:	9b01      	ldr	r3, [sp, #4]
 80108f4:	4401      	add	r1, r0
 80108f6:	4413      	add	r3, r2
 80108f8:	1a58      	subs	r0, r3, r1
 80108fa:	9a07      	ldr	r2, [sp, #28]
 80108fc:	9b02      	ldr	r3, [sp, #8]
 80108fe:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010902:	4413      	add	r3, r2
 8010904:	448c      	add	ip, r1
 8010906:	eba3 030c 	sub.w	r3, r3, ip
 801090a:	435b      	muls	r3, r3
 801090c:	fb00 3300 	mla	r3, r0, r0, r3
 8010910:	42ab      	cmp	r3, r5
 8010912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010914:	d208      	bcs.n	8010928 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8010916:	461d      	mov	r5, r3
 8010918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801091a:	9803      	ldr	r0, [sp, #12]
 801091c:	6001      	str	r1, [r0, #0]
 801091e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010920:	9805      	ldr	r0, [sp, #20]
 8010922:	8008      	strh	r0, [r1, #0]
 8010924:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010926:	800f      	strh	r7, [r1, #0]
 8010928:	4692      	mov	sl, r2
 801092a:	f10b 0b01 	add.w	fp, fp, #1
 801092e:	f1bb 0f04 	cmp.w	fp, #4
 8010932:	f104 0408 	add.w	r4, r4, #8
 8010936:	d19c      	bne.n	8010872 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8010938:	9b00      	ldr	r3, [sp, #0]
 801093a:	9c08      	ldr	r4, [sp, #32]
 801093c:	444b      	add	r3, r9
 801093e:	4544      	cmp	r4, r8
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	d187      	bne.n	8010854 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8010944:	b021      	add	sp, #132	; 0x84
 8010946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094a:	f04f 35ff 	mov.w	r5, #4294967295
 801094e:	e769      	b.n	8010824 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010950:	2001fda4 	.word	0x2001fda4
 8010954:	080237b8 	.word	0x080237b8

08010958 <_ZN8touchgfx4RectaNERKS0_>:
 8010958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801095c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010960:	888c      	ldrh	r4, [r1, #4]
 8010962:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010966:	443c      	add	r4, r7
 8010968:	b2a4      	uxth	r4, r4
 801096a:	fa0f f884 	sxth.w	r8, r4
 801096e:	45c1      	cmp	r9, r8
 8010970:	da2f      	bge.n	80109d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010972:	8882      	ldrh	r2, [r0, #4]
 8010974:	444a      	add	r2, r9
 8010976:	b292      	uxth	r2, r2
 8010978:	fa0f fe82 	sxth.w	lr, r2
 801097c:	4577      	cmp	r7, lr
 801097e:	da28      	bge.n	80109d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010980:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010984:	88cb      	ldrh	r3, [r1, #6]
 8010986:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801098a:	442b      	add	r3, r5
 801098c:	b21b      	sxth	r3, r3
 801098e:	429e      	cmp	r6, r3
 8010990:	da1f      	bge.n	80109d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010992:	88c3      	ldrh	r3, [r0, #6]
 8010994:	4433      	add	r3, r6
 8010996:	b29b      	uxth	r3, r3
 8010998:	fa0f fc83 	sxth.w	ip, r3
 801099c:	4565      	cmp	r5, ip
 801099e:	da18      	bge.n	80109d2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80109a0:	454f      	cmp	r7, r9
 80109a2:	bfb8      	it	lt
 80109a4:	464f      	movlt	r7, r9
 80109a6:	42b5      	cmp	r5, r6
 80109a8:	bfb8      	it	lt
 80109aa:	4635      	movlt	r5, r6
 80109ac:	45f0      	cmp	r8, lr
 80109ae:	bfd8      	it	le
 80109b0:	4622      	movle	r2, r4
 80109b2:	1bd2      	subs	r2, r2, r7
 80109b4:	8082      	strh	r2, [r0, #4]
 80109b6:	884a      	ldrh	r2, [r1, #2]
 80109b8:	88c9      	ldrh	r1, [r1, #6]
 80109ba:	8007      	strh	r7, [r0, #0]
 80109bc:	440a      	add	r2, r1
 80109be:	b292      	uxth	r2, r2
 80109c0:	b211      	sxth	r1, r2
 80109c2:	458c      	cmp	ip, r1
 80109c4:	bfa8      	it	ge
 80109c6:	4613      	movge	r3, r2
 80109c8:	1b5b      	subs	r3, r3, r5
 80109ca:	80c3      	strh	r3, [r0, #6]
 80109cc:	8045      	strh	r5, [r0, #2]
 80109ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109d2:	2300      	movs	r3, #0
 80109d4:	8003      	strh	r3, [r0, #0]
 80109d6:	8043      	strh	r3, [r0, #2]
 80109d8:	8083      	strh	r3, [r0, #4]
 80109da:	80c3      	strh	r3, [r0, #6]
 80109dc:	e7f7      	b.n	80109ce <_ZN8touchgfx4RectaNERKS0_+0x76>

080109de <_ZNK8touchgfx4Rect7isEmptyEv>:
 80109de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	dd06      	ble.n	80109f4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80109e6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80109ea:	2800      	cmp	r0, #0
 80109ec:	bfcc      	ite	gt
 80109ee:	2000      	movgt	r0, #0
 80109f0:	2001      	movle	r0, #1
 80109f2:	4770      	bx	lr
 80109f4:	2001      	movs	r0, #1
 80109f6:	4770      	bx	lr

080109f8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80109f8:	2300      	movs	r3, #0
 80109fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109fe:	4604      	mov	r4, r0
 8010a00:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010a02:	8003      	strh	r3, [r0, #0]
 8010a04:	8043      	strh	r3, [r0, #2]
 8010a06:	8083      	strh	r3, [r0, #4]
 8010a08:	80c3      	strh	r3, [r0, #6]
 8010a0a:	2d00      	cmp	r5, #0
 8010a0c:	d040      	beq.n	8010a90 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8010a0e:	1d28      	adds	r0, r5, #4
 8010a10:	f7ff ffe5 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a14:	b988      	cbnz	r0, 8010a3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010a16:	4620      	mov	r0, r4
 8010a18:	f7ff ffe1 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a1c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010a20:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010a24:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010a28:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010a2c:	b138      	cbz	r0, 8010a3e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010a2e:	8022      	strh	r2, [r4, #0]
 8010a30:	8063      	strh	r3, [r4, #2]
 8010a32:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010a36:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010a3a:	69ad      	ldr	r5, [r5, #24]
 8010a3c:	e7e5      	b.n	8010a0a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010a3e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010a42:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010a46:	4290      	cmp	r0, r2
 8010a48:	4607      	mov	r7, r0
 8010a4a:	bfa8      	it	ge
 8010a4c:	4617      	movge	r7, r2
 8010a4e:	4299      	cmp	r1, r3
 8010a50:	460e      	mov	r6, r1
 8010a52:	bfa8      	it	ge
 8010a54:	461e      	movge	r6, r3
 8010a56:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8010a5a:	4472      	add	r2, lr
 8010a5c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010a60:	4440      	add	r0, r8
 8010a62:	4471      	add	r1, lr
 8010a64:	4463      	add	r3, ip
 8010a66:	b200      	sxth	r0, r0
 8010a68:	b212      	sxth	r2, r2
 8010a6a:	b209      	sxth	r1, r1
 8010a6c:	b21b      	sxth	r3, r3
 8010a6e:	4290      	cmp	r0, r2
 8010a70:	bfac      	ite	ge
 8010a72:	ebc7 0200 	rsbge	r2, r7, r0
 8010a76:	ebc7 0202 	rsblt	r2, r7, r2
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	bfac      	ite	ge
 8010a7e:	ebc6 0301 	rsbge	r3, r6, r1
 8010a82:	ebc6 0303 	rsblt	r3, r6, r3
 8010a86:	8027      	strh	r7, [r4, #0]
 8010a88:	8066      	strh	r6, [r4, #2]
 8010a8a:	80a2      	strh	r2, [r4, #4]
 8010a8c:	80e3      	strh	r3, [r4, #6]
 8010a8e:	e7d4      	b.n	8010a3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010a90:	4620      	mov	r0, r4
 8010a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a96 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010a96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010a9a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010a9e:	b383      	cbz	r3, 8010b02 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010aa0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010aa2:	b374      	cbz	r4, 8010b02 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010aa4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010aa8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010aac:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010ab0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010ab4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010ab8:	b303      	cbz	r3, 8010afc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010aba:	4668      	mov	r0, sp
 8010abc:	1d21      	adds	r1, r4, #4
 8010abe:	f8ad 5000 	strh.w	r5, [sp]
 8010ac2:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010ac6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010aca:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010ace:	f7ff ff43 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8010ad2:	4668      	mov	r0, sp
 8010ad4:	f7ff ff83 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8010ad8:	b980      	cbnz	r0, 8010afc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010ada:	f8bd 3000 	ldrh.w	r3, [sp]
 8010ade:	88a2      	ldrh	r2, [r4, #4]
 8010ae0:	4669      	mov	r1, sp
 8010ae2:	1a9b      	subs	r3, r3, r2
 8010ae4:	f8ad 3000 	strh.w	r3, [sp]
 8010ae8:	88e2      	ldrh	r2, [r4, #6]
 8010aea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010aee:	4620      	mov	r0, r4
 8010af0:	1a9b      	subs	r3, r3, r2
 8010af2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	4798      	blx	r3
 8010afc:	69a4      	ldr	r4, [r4, #24]
 8010afe:	2c00      	cmp	r4, #0
 8010b00:	d1d8      	bne.n	8010ab4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010b02:	b002      	add	sp, #8
 8010b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b08 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b0a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010b0e:	460d      	mov	r5, r1
 8010b10:	4616      	mov	r6, r2
 8010b12:	b323      	cbz	r3, 8010b5e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010b14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010b16:	b314      	cbz	r4, 8010b5e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010b18:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010b1c:	b1eb      	cbz	r3, 8010b5a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010b1e:	466b      	mov	r3, sp
 8010b20:	6828      	ldr	r0, [r5, #0]
 8010b22:	6869      	ldr	r1, [r5, #4]
 8010b24:	c303      	stmia	r3!, {r0, r1}
 8010b26:	4668      	mov	r0, sp
 8010b28:	1d21      	adds	r1, r4, #4
 8010b2a:	f7ff ff15 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8010b2e:	4668      	mov	r0, sp
 8010b30:	f7ff ff55 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8010b34:	b988      	cbnz	r0, 8010b5a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010b36:	f8bd 3000 	ldrh.w	r3, [sp]
 8010b3a:	88a2      	ldrh	r2, [r4, #4]
 8010b3c:	4669      	mov	r1, sp
 8010b3e:	1a9b      	subs	r3, r3, r2
 8010b40:	f8ad 3000 	strh.w	r3, [sp]
 8010b44:	88e2      	ldrh	r2, [r4, #6]
 8010b46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	1a9b      	subs	r3, r3, r2
 8010b4e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	4632      	mov	r2, r6
 8010b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b58:	4798      	blx	r3
 8010b5a:	69a4      	ldr	r4, [r4, #24]
 8010b5c:	e7db      	b.n	8010b16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010b5e:	b002      	add	sp, #8
 8010b60:	bd70      	pop	{r4, r5, r6, pc}

08010b62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010b62:	b513      	push	{r0, r1, r4, lr}
 8010b64:	6803      	ldr	r3, [r0, #0]
 8010b66:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e9cd 3300 	strd	r3, r3, [sp]
 8010b70:	466b      	mov	r3, sp
 8010b72:	47a0      	blx	r4
 8010b74:	b002      	add	sp, #8
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010b78:	2301      	movs	r3, #1
 8010b7a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010b7e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010b82:	4770      	bx	lr

08010b84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010b84:	2301      	movs	r3, #1
 8010b86:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010b8a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010b8e:	4770      	bx	lr

08010b90 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010b90:	2201      	movs	r2, #1
 8010b92:	6843      	ldr	r3, [r0, #4]
 8010b94:	725a      	strb	r2, [r3, #9]
 8010b96:	6840      	ldr	r0, [r0, #4]
 8010b98:	6803      	ldr	r3, [r0, #0]
 8010b9a:	691b      	ldr	r3, [r3, #16]
 8010b9c:	4718      	bx	r3

08010b9e <_ZN8touchgfx3HAL8flushDMAEv>:
 8010b9e:	6840      	ldr	r0, [r0, #4]
 8010ba0:	6803      	ldr	r3, [r0, #0]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	4718      	bx	r3

08010ba6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010ba6:	b530      	push	{r4, r5, lr}
 8010ba8:	b08b      	sub	sp, #44	; 0x2c
 8010baa:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8010bae:	6804      	ldr	r4, [r0, #0]
 8010bb0:	9509      	str	r5, [sp, #36]	; 0x24
 8010bb2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010bb6:	9508      	str	r5, [sp, #32]
 8010bb8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8010bbc:	9507      	str	r5, [sp, #28]
 8010bbe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8010bc2:	9506      	str	r5, [sp, #24]
 8010bc4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8010bc8:	9505      	str	r5, [sp, #20]
 8010bca:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8010bce:	9504      	str	r5, [sp, #16]
 8010bd0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8010bd4:	9503      	str	r5, [sp, #12]
 8010bd6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010bda:	9502      	str	r5, [sp, #8]
 8010bdc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010be0:	e9cd 3500 	strd	r3, r5, [sp]
 8010be4:	4613      	mov	r3, r2
 8010be6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010be8:	2200      	movs	r2, #0
 8010bea:	47a0      	blx	r4
 8010bec:	b00b      	add	sp, #44	; 0x2c
 8010bee:	bd30      	pop	{r4, r5, pc}

08010bf0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010bf0:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	b123      	cbz	r3, 8010c00 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010bf6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010bfa:	f080 0001 	eor.w	r0, r0, #1
 8010bfe:	4770      	bx	lr
 8010c00:	2001      	movs	r0, #1
 8010c02:	4770      	bx	lr
 8010c04:	2001fda2 	.word	0x2001fda2

08010c08 <_ZN8touchgfx3HAL8endFrameEv>:
 8010c08:	b510      	push	{r4, lr}
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	6840      	ldr	r0, [r0, #4]
 8010c0e:	6803      	ldr	r3, [r0, #0]
 8010c10:	689b      	ldr	r3, [r3, #8]
 8010c12:	4798      	blx	r3
 8010c14:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8010c18:	b113      	cbz	r3, 8010c20 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010c20:	bd10      	pop	{r4, pc}

08010c22 <_ZN8touchgfx3HAL10initializeEv>:
 8010c22:	b510      	push	{r4, lr}
 8010c24:	4604      	mov	r4, r0
 8010c26:	f7fe fdb7 	bl	800f798 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010c2a:	f7fe f925 	bl	800ee78 <_ZN8touchgfx4GPIO4initEv>
 8010c2e:	6860      	ldr	r0, [r4, #4]
 8010c30:	6803      	ldr	r3, [r0, #0]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	4798      	blx	r3
 8010c36:	68e0      	ldr	r0, [r4, #12]
 8010c38:	6803      	ldr	r3, [r0, #0]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	4798      	blx	r3
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	4620      	mov	r0, r4
 8010c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c48:	4718      	bx	r3

08010c4a <_ZN8touchgfx3HAL9taskEntryEv>:
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	b508      	push	{r3, lr}
 8010c4e:	6803      	ldr	r3, [r0, #0]
 8010c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c54:	4798      	blx	r3
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	4798      	blx	r3
 8010c5e:	f7fe fe11 	bl	800f884 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c66:	e7f8      	b.n	8010c5a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08010c68 <_ZN8touchgfx3HAL4tickEv>:
 8010c68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010c6a:	6803      	ldr	r3, [r0, #0]
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010c72:	4798      	blx	r3
 8010c74:	4d59      	ldr	r5, [pc, #356]	; (8010ddc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010c76:	2800      	cmp	r0, #0
 8010c78:	f000 8095 	beq.w	8010da6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010c7c:	2600      	movs	r6, #0
 8010c7e:	2001      	movs	r0, #1
 8010c80:	f7fe f902 	bl	800ee88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010c84:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8010c88:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8010c8c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010c90:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8010c94:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8010c98:	b133      	cbz	r3, 8010ca8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010ca2:	4798      	blx	r3
 8010ca4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8010ca8:	2601      	movs	r6, #1
 8010caa:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8010cae:	6862      	ldr	r2, [r4, #4]
 8010cb0:	f083 0301 	eor.w	r3, r3, #1
 8010cb4:	7253      	strb	r3, [r2, #9]
 8010cb6:	702e      	strb	r6, [r5, #0]
 8010cb8:	f002 fcac 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 8010cbc:	6803      	ldr	r3, [r0, #0]
 8010cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cc0:	4798      	blx	r3
 8010cc2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010cc6:	b90b      	cbnz	r3, 8010ccc <_ZN8touchgfx3HAL4tickEv+0x64>
 8010cc8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8010ccc:	f002 fca2 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 8010cd0:	6803      	ldr	r3, [r0, #0]
 8010cd2:	695b      	ldr	r3, [r3, #20]
 8010cd4:	4798      	blx	r3
 8010cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cd8:	6803      	ldr	r3, [r0, #0]
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	4798      	blx	r3
 8010cde:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010ce2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010cee:	b10a      	cbz	r2, 8010cf4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1eb      	bne.n	8010ccc <_ZN8touchgfx3HAL4tickEv+0x64>
 8010cf4:	4a3a      	ldr	r2, [pc, #232]	; (8010de0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010cf6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8010cfa:	7813      	ldrb	r3, [r2, #0]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	b25b      	sxtb	r3, r3
 8010d00:	4299      	cmp	r1, r3
 8010d02:	7013      	strb	r3, [r2, #0]
 8010d04:	dc10      	bgt.n	8010d28 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010d06:	2300      	movs	r3, #0
 8010d08:	68e0      	ldr	r0, [r4, #12]
 8010d0a:	7013      	strb	r3, [r2, #0]
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	aa03      	add	r2, sp, #12
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	a902      	add	r1, sp, #8
 8010d14:	4798      	blx	r3
 8010d16:	6823      	ldr	r3, [r4, #0]
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d050      	beq.n	8010dbe <_ZN8touchgfx3HAL4tickEv+0x156>
 8010d1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010d20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010d24:	4620      	mov	r0, r4
 8010d26:	4798      	blx	r3
 8010d28:	2300      	movs	r3, #0
 8010d2a:	6960      	ldr	r0, [r4, #20]
 8010d2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010d30:	b158      	cbz	r0, 8010d4a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010d32:	6803      	ldr	r3, [r0, #0]
 8010d34:	f10d 0107 	add.w	r1, sp, #7
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	4798      	blx	r3
 8010d3c:	b128      	cbz	r0, 8010d4a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010d3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d40:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010d44:	6803      	ldr	r3, [r0, #0]
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	4798      	blx	r3
 8010d4a:	f104 001c 	add.w	r0, r4, #28
 8010d4e:	f010 fde9 	bl	8021924 <_ZN8touchgfx8Gestures4tickEv>
 8010d52:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8010d56:	b30b      	cbz	r3, 8010d9c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010d58:	6920      	ldr	r0, [r4, #16]
 8010d5a:	6803      	ldr	r3, [r0, #0]
 8010d5c:	691b      	ldr	r3, [r3, #16]
 8010d5e:	4798      	blx	r3
 8010d60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d62:	4606      	mov	r6, r0
 8010d64:	b903      	cbnz	r3, 8010d68 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010d66:	6720      	str	r0, [r4, #112]	; 0x70
 8010d68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d6a:	4a1e      	ldr	r2, [pc, #120]	; (8010de4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010d6c:	1af3      	subs	r3, r6, r3
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d914      	bls.n	8010d9c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010d72:	6920      	ldr	r0, [r4, #16]
 8010d74:	6803      	ldr	r3, [r0, #0]
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	4798      	blx	r3
 8010d7a:	2264      	movs	r2, #100	; 0x64
 8010d7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d7e:	1af3      	subs	r3, r6, r3
 8010d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d84:	fbb0 f0f3 	udiv	r0, r0, r3
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	dc1d      	bgt.n	8010dc8 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010d8c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8010d90:	6920      	ldr	r0, [r4, #16]
 8010d92:	2100      	movs	r1, #0
 8010d94:	6803      	ldr	r3, [r0, #0]
 8010d96:	69db      	ldr	r3, [r3, #28]
 8010d98:	4798      	blx	r3
 8010d9a:	6726      	str	r6, [r4, #112]	; 0x70
 8010d9c:	f002 fc3a 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 8010da0:	6803      	ldr	r3, [r0, #0]
 8010da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da4:	4798      	blx	r3
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	4620      	mov	r0, r4
 8010daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010dae:	4798      	blx	r3
 8010db0:	2001      	movs	r0, #1
 8010db2:	f7fe f885 	bl	800eec0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010db6:	2300      	movs	r3, #0
 8010db8:	702b      	strb	r3, [r5, #0]
 8010dba:	b004      	add	sp, #16
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
 8010dbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	4798      	blx	r3
 8010dc6:	e7af      	b.n	8010d28 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010dc8:	2863      	cmp	r0, #99	; 0x63
 8010dca:	bfcb      	itete	gt
 8010dcc:	2300      	movgt	r3, #0
 8010dce:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8010dd2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8010dd6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8010dda:	e7d9      	b.n	8010d90 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010ddc:	2001fda8 	.word	0x2001fda8
 8010de0:	2001fda9 	.word	0x2001fda9
 8010de4:	05f5e100 	.word	0x05f5e100

08010de8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010de8:	f7fe bd18 	b.w	800f81c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010dec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010dec:	6581      	str	r1, [r0, #88]	; 0x58
 8010dee:	301c      	adds	r0, #28
 8010df0:	f010 bd96 	b.w	8021920 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010df4 <_ZN8touchgfx3HAL5touchEll>:
 8010df4:	b530      	push	{r4, r5, lr}
 8010df6:	4604      	mov	r4, r0
 8010df8:	b087      	sub	sp, #28
 8010dfa:	a804      	add	r0, sp, #16
 8010dfc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010e00:	f002 fa12 	bl	8013228 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010e04:	9b04      	ldr	r3, [sp, #16]
 8010e06:	a906      	add	r1, sp, #24
 8010e08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e0c:	9b05      	ldr	r3, [sp, #20]
 8010e0e:	a803      	add	r0, sp, #12
 8010e10:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010e14:	f002 fa5a 	bl	80132cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010e18:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8010e1c:	f104 001c 	add.w	r0, r4, #28
 8010e20:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010e24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010e28:	b189      	cbz	r1, 8010e4e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010e2a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010e34:	4613      	mov	r3, r2
 8010e36:	462a      	mov	r2, r5
 8010e38:	f010 fd82 	bl	8021940 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010e3c:	b128      	cbz	r0, 8010e4a <_ZN8touchgfx3HAL5touchEll+0x56>
 8010e3e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010e42:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010e44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010e48:	6623      	str	r3, [r4, #96]	; 0x60
 8010e4a:	b007      	add	sp, #28
 8010e4c:	bd30      	pop	{r4, r5, pc}
 8010e4e:	f010 fdb7 	bl	80219c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010e52:	2301      	movs	r3, #1
 8010e54:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010e58:	e7f1      	b.n	8010e3e <_ZN8touchgfx3HAL5touchEll+0x4a>

08010e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010e5a:	b510      	push	{r4, lr}
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d046      	beq.n	8010eee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e60:	ea81 0002 	eor.w	r0, r1, r2
 8010e64:	07c4      	lsls	r4, r0, #31
 8010e66:	d508      	bpl.n	8010e7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010e68:	440b      	add	r3, r1
 8010e6a:	3a01      	subs	r2, #1
 8010e6c:	428b      	cmp	r3, r1
 8010e6e:	d93e      	bls.n	8010eee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e70:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010e74:	f801 0b01 	strb.w	r0, [r1], #1
 8010e78:	e7f8      	b.n	8010e6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010e7a:	07d0      	lsls	r0, r2, #31
 8010e7c:	bf42      	ittt	mi
 8010e7e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010e82:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010e86:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d911      	bls.n	8010eb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e8e:	ea81 0402 	eor.w	r4, r1, r2
 8010e92:	07a4      	lsls	r4, r4, #30
 8010e94:	4610      	mov	r0, r2
 8010e96:	d022      	beq.n	8010ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010e98:	f023 0401 	bic.w	r4, r3, #1
 8010e9c:	440c      	add	r4, r1
 8010e9e:	428c      	cmp	r4, r1
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	d904      	bls.n	8010eae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010ea4:	8812      	ldrh	r2, [r2, #0]
 8010ea6:	3002      	adds	r0, #2
 8010ea8:	f821 2b02 	strh.w	r2, [r1], #2
 8010eac:	e7f7      	b.n	8010e9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	f023 0003 	bic.w	r0, r3, #3
 8010eb6:	4408      	add	r0, r1
 8010eb8:	4288      	cmp	r0, r1
 8010eba:	4614      	mov	r4, r2
 8010ebc:	d904      	bls.n	8010ec8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010ebe:	6824      	ldr	r4, [r4, #0]
 8010ec0:	3204      	adds	r2, #4
 8010ec2:	f841 4b04 	str.w	r4, [r1], #4
 8010ec6:	e7f7      	b.n	8010eb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010ec8:	f003 0303 	and.w	r3, r3, #3
 8010ecc:	440b      	add	r3, r1
 8010ece:	3a01      	subs	r2, #1
 8010ed0:	428b      	cmp	r3, r1
 8010ed2:	d90c      	bls.n	8010eee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010ed4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010ed8:	f801 0b01 	strb.w	r0, [r1], #1
 8010edc:	e7f8      	b.n	8010ed0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010ede:	0790      	lsls	r0, r2, #30
 8010ee0:	d0e7      	beq.n	8010eb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010ee2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010ee6:	3b02      	subs	r3, #2
 8010ee8:	f821 0b02 	strh.w	r0, [r1], #2
 8010eec:	e7e1      	b.n	8010eb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010eee:	2001      	movs	r0, #1
 8010ef0:	bd10      	pop	{r4, pc}

08010ef2 <_ZN8touchgfx3HAL7noTouchEv>:
 8010ef2:	b510      	push	{r4, lr}
 8010ef4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8010ef8:	4604      	mov	r4, r0
 8010efa:	b153      	cbz	r3, 8010f12 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010efc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010f00:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8010f04:	2101      	movs	r1, #1
 8010f06:	301c      	adds	r0, #28
 8010f08:	f010 fd5a 	bl	80219c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010f12:	bd10      	pop	{r4, pc}

08010f14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f18:	4604      	mov	r4, r0
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	b085      	sub	sp, #20
 8010f1e:	ad04      	add	r5, sp, #16
 8010f20:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010f24:	69a0      	ldr	r0, [r4, #24]
 8010f26:	4699      	mov	r9, r3
 8010f28:	6806      	ldr	r6, [r0, #0]
 8010f2a:	9501      	str	r5, [sp, #4]
 8010f2c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8010f30:	460f      	mov	r7, r1
 8010f32:	9500      	str	r5, [sp, #0]
 8010f34:	6835      	ldr	r5, [r6, #0]
 8010f36:	4690      	mov	r8, r2
 8010f38:	47a8      	blx	r5
 8010f3a:	4d10      	ldr	r5, [pc, #64]	; (8010f7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	f8a5 9000 	strh.w	r9, [r5]
 8010f42:	f7fc f947 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8010f46:	6803      	ldr	r3, [r0, #0]
 8010f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f4a:	4798      	blx	r3
 8010f4c:	b128      	cbz	r0, 8010f5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010f4e:	2801      	cmp	r0, #1
 8010f50:	d00b      	beq.n	8010f6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010f52:	4630      	mov	r0, r6
 8010f54:	b005      	add	sp, #20
 8010f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f5a:	882b      	ldrh	r3, [r5, #0]
 8010f5c:	fb08 7203 	mla	r2, r8, r3, r7
 8010f60:	9b03      	ldr	r3, [sp, #12]
 8010f62:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010f66:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010f68:	e7f3      	b.n	8010f52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010f6a:	882a      	ldrh	r2, [r5, #0]
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	fb08 7202 	mla	r2, r8, r2, r7
 8010f72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010f76:	1a9a      	subs	r2, r3, r2
 8010f78:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010f7a:	e7ea      	b.n	8010f52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010f7c:	2001fd9e 	.word	0x2001fd9e

08010f80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f82:	b08b      	sub	sp, #44	; 0x2c
 8010f84:	4617      	mov	r7, r2
 8010f86:	4604      	mov	r4, r0
 8010f88:	460e      	mov	r6, r1
 8010f8a:	461d      	mov	r5, r3
 8010f8c:	f7fc f922 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8010f90:	6803      	ldr	r3, [r0, #0]
 8010f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f94:	4798      	blx	r3
 8010f96:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010f9a:	9007      	str	r0, [sp, #28]
 8010f9c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010fa0:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010fa2:	6822      	ldr	r2, [r4, #0]
 8010fa4:	881b      	ldrh	r3, [r3, #0]
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	9306      	str	r3, [sp, #24]
 8010faa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010fae:	4620      	mov	r0, r4
 8010fb0:	9305      	str	r3, [sp, #20]
 8010fb2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010fbc:	9303      	str	r3, [sp, #12]
 8010fbe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010fc2:	9302      	str	r3, [sp, #8]
 8010fc4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010fc8:	e9cd 5300 	strd	r5, r3, [sp]
 8010fcc:	463b      	mov	r3, r7
 8010fce:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	47a8      	blx	r5
 8010fd4:	b00b      	add	sp, #44	; 0x2c
 8010fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd8:	2001fd9e 	.word	0x2001fd9e

08010fdc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fe0:	4698      	mov	r8, r3
 8010fe2:	6803      	ldr	r3, [r0, #0]
 8010fe4:	b08b      	sub	sp, #44	; 0x2c
 8010fe6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010fe8:	4b14      	ldr	r3, [pc, #80]	; (801103c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010fea:	4617      	mov	r7, r2
 8010fec:	f8b3 9000 	ldrh.w	r9, [r3]
 8010ff0:	460e      	mov	r6, r1
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f7fc f8ee 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8010ff8:	6803      	ldr	r3, [r0, #0]
 8010ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ffc:	4798      	blx	r3
 8010ffe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011002:	2200      	movs	r2, #0
 8011004:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011008:	2302      	movs	r3, #2
 801100a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801100e:	2301      	movs	r3, #1
 8011010:	9305      	str	r3, [sp, #20]
 8011012:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011016:	4631      	mov	r1, r6
 8011018:	9304      	str	r3, [sp, #16]
 801101a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801101e:	4620      	mov	r0, r4
 8011020:	9303      	str	r3, [sp, #12]
 8011022:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011026:	9302      	str	r3, [sp, #8]
 8011028:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801102c:	e9cd 8300 	strd	r8, r3, [sp]
 8011030:	463b      	mov	r3, r7
 8011032:	47a8      	blx	r5
 8011034:	b00b      	add	sp, #44	; 0x2c
 8011036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801103a:	bf00      	nop
 801103c:	2001fd9e 	.word	0x2001fd9e

08011040 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011044:	4698      	mov	r8, r3
 8011046:	6803      	ldr	r3, [r0, #0]
 8011048:	b087      	sub	sp, #28
 801104a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801104c:	4b10      	ldr	r3, [pc, #64]	; (8011090 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801104e:	460e      	mov	r6, r1
 8011050:	f8b3 9000 	ldrh.w	r9, [r3]
 8011054:	4617      	mov	r7, r2
 8011056:	4604      	mov	r4, r0
 8011058:	f7fc f8bc 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 801105c:	6803      	ldr	r3, [r0, #0]
 801105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011060:	4798      	blx	r3
 8011062:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011066:	f8cd 900c 	str.w	r9, [sp, #12]
 801106a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801106e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011072:	463a      	mov	r2, r7
 8011074:	9302      	str	r3, [sp, #8]
 8011076:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801107a:	4631      	mov	r1, r6
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011082:	4620      	mov	r0, r4
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	4643      	mov	r3, r8
 8011088:	47a8      	blx	r5
 801108a:	b007      	add	sp, #28
 801108c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011090:	2001fd9e 	.word	0x2001fd9e

08011094 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	4604      	mov	r4, r0
 801109a:	b08f      	sub	sp, #60	; 0x3c
 801109c:	4610      	mov	r0, r2
 801109e:	460d      	mov	r5, r1
 80110a0:	4691      	mov	r9, r2
 80110a2:	461e      	mov	r6, r3
 80110a4:	f004 feae 	bl	8015e04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	f000 809d 	beq.w	80111e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	4620      	mov	r0, r4
 80110b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b4:	4798      	blx	r3
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	f8df b190 	ldr.w	fp, [pc, #400]	; 801124c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80110bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110be:	4620      	mov	r0, r4
 80110c0:	4798      	blx	r3
 80110c2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8011250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80110c6:	f8bb 3000 	ldrh.w	r3, [fp]
 80110ca:	4f5d      	ldr	r7, [pc, #372]	; (8011240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80110d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80110d6:	9302      	str	r3, [sp, #8]
 80110d8:	883b      	ldrh	r3, [r7, #0]
 80110da:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80110de:	9303      	str	r3, [sp, #12]
 80110e0:	4b58      	ldr	r3, [pc, #352]	; (8011244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80110e2:	4640      	mov	r0, r8
 80110e4:	881a      	ldrh	r2, [r3, #0]
 80110e6:	9305      	str	r3, [sp, #20]
 80110e8:	9204      	str	r2, [sp, #16]
 80110ea:	f004 ff1f 	bl	8015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80110ee:	8038      	strh	r0, [r7, #0]
 80110f0:	4640      	mov	r0, r8
 80110f2:	f004 ff4f 	bl	8015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80110f6:	9b05      	ldr	r3, [sp, #20]
 80110f8:	b280      	uxth	r0, r0
 80110fa:	8018      	strh	r0, [r3, #0]
 80110fc:	4b52      	ldr	r3, [pc, #328]	; (8011248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d174      	bne.n	80111ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011104:	883b      	ldrh	r3, [r7, #0]
 8011106:	f8aa 0000 	strh.w	r0, [sl]
 801110a:	f8ab 3000 	strh.w	r3, [fp]
 801110e:	4648      	mov	r0, r9
 8011110:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011114:	f004 fe76 	bl	8015e04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011118:	2200      	movs	r2, #0
 801111a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801111e:	4611      	mov	r1, r2
 8011120:	4628      	mov	r0, r5
 8011122:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011126:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801112a:	f7fc fdac 	bl	800dc86 <_ZN8touchgfx8Drawable5setXYEss>
 801112e:	2301      	movs	r3, #1
 8011130:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011134:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011138:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	dd5c      	ble.n	80111fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011140:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dd58      	ble.n	80111fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011148:	462a      	mov	r2, r5
 801114a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801114e:	ab0a      	add	r3, sp, #40	; 0x28
 8011150:	6851      	ldr	r1, [r2, #4]
 8011152:	c303      	stmia	r3!, {r0, r1}
 8011154:	4631      	mov	r1, r6
 8011156:	a80a      	add	r0, sp, #40	; 0x28
 8011158:	f7ff fbfe 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 801115c:	2100      	movs	r1, #0
 801115e:	4b38      	ldr	r3, [pc, #224]	; (8011240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011160:	910c      	str	r1, [sp, #48]	; 0x30
 8011162:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011166:	4b37      	ldr	r3, [pc, #220]	; (8011244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011168:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011170:	aa0a      	add	r2, sp, #40	; 0x28
 8011172:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011176:	ab08      	add	r3, sp, #32
 8011178:	e892 0003 	ldmia.w	r2, {r0, r1}
 801117c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011180:	4618      	mov	r0, r3
 8011182:	a90c      	add	r1, sp, #48	; 0x30
 8011184:	f7ff fbe8 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8011188:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801118a:	2b00      	cmp	r3, #0
 801118c:	d13c      	bne.n	8011208 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801118e:	2000      	movs	r0, #0
 8011190:	2600      	movs	r6, #0
 8011192:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011196:	696b      	ldr	r3, [r5, #20]
 8011198:	682a      	ldr	r2, [r5, #0]
 801119a:	616e      	str	r6, [r5, #20]
 801119c:	9305      	str	r3, [sp, #20]
 801119e:	6892      	ldr	r2, [r2, #8]
 80111a0:	a908      	add	r1, sp, #32
 80111a2:	4628      	mov	r0, r5
 80111a4:	4790      	blx	r2
 80111a6:	9b05      	ldr	r3, [sp, #20]
 80111a8:	4652      	mov	r2, sl
 80111aa:	616b      	str	r3, [r5, #20]
 80111ac:	4649      	mov	r1, r9
 80111ae:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80111b2:	4628      	mov	r0, r5
 80111b4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80111b8:	f7fc fd65 	bl	800dc86 <_ZN8touchgfx8Drawable5setXYEss>
 80111bc:	9a01      	ldr	r2, [sp, #4]
 80111be:	4b23      	ldr	r3, [pc, #140]	; (801124c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80111c0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80111c4:	801a      	strh	r2, [r3, #0]
 80111c6:	9a02      	ldr	r2, [sp, #8]
 80111c8:	4b21      	ldr	r3, [pc, #132]	; (8011250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80111ca:	4620      	mov	r0, r4
 80111cc:	801a      	strh	r2, [r3, #0]
 80111ce:	9a03      	ldr	r2, [sp, #12]
 80111d0:	4b1b      	ldr	r3, [pc, #108]	; (8011240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80111d2:	801a      	strh	r2, [r3, #0]
 80111d4:	4b1b      	ldr	r3, [pc, #108]	; (8011244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80111d6:	9a04      	ldr	r2, [sp, #16]
 80111d8:	801a      	strh	r2, [r3, #0]
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111de:	4798      	blx	r3
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	4620      	mov	r0, r4
 80111e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e6:	4798      	blx	r3
 80111e8:	b00f      	add	sp, #60	; 0x3c
 80111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ee:	883b      	ldrh	r3, [r7, #0]
 80111f0:	f8ab 0000 	strh.w	r0, [fp]
 80111f4:	f8aa 3000 	strh.w	r3, [sl]
 80111f8:	e789      	b.n	801110e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80111fa:	462a      	mov	r2, r5
 80111fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011200:	ab0a      	add	r3, sp, #40	; 0x28
 8011202:	6851      	ldr	r1, [r2, #4]
 8011204:	c303      	stmia	r3!, {r0, r1}
 8011206:	e7a9      	b.n	801115c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011208:	a807      	add	r0, sp, #28
 801120a:	f004 ffff 	bl	801620c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801120e:	4606      	mov	r6, r0
 8011210:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011212:	6803      	ldr	r3, [r0, #0]
 8011214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011216:	4798      	blx	r3
 8011218:	4286      	cmp	r6, r0
 801121a:	d1b8      	bne.n	801118e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801121c:	f7fb ffda 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8011220:	6803      	ldr	r3, [r0, #0]
 8011222:	4606      	mov	r6, r0
 8011224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011226:	a807      	add	r0, sp, #28
 8011228:	9305      	str	r3, [sp, #20]
 801122a:	f004 ffef 	bl	801620c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801122e:	9b05      	ldr	r3, [sp, #20]
 8011230:	4601      	mov	r1, r0
 8011232:	4630      	mov	r0, r6
 8011234:	4798      	blx	r3
 8011236:	f080 0001 	eor.w	r0, r0, #1
 801123a:	b2c0      	uxtb	r0, r0
 801123c:	e7a8      	b.n	8011190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801123e:	bf00      	nop
 8011240:	2001fd98 	.word	0x2001fd98
 8011244:	2001fd9a 	.word	0x2001fd9a
 8011248:	2001fd9c 	.word	0x2001fd9c
 801124c:	2001fd9e 	.word	0x2001fd9e
 8011250:	2001fda0 	.word	0x2001fda0

08011254 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011258:	461d      	mov	r5, r3
 801125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801125e:	2400      	movs	r4, #0
 8011260:	b08a      	sub	sp, #40	; 0x28
 8011262:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011266:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801126a:	4690      	mov	r8, r2
 801126c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011270:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011274:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011278:	f8ad 301a 	strh.w	r3, [sp, #26]
 801127c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011280:	4607      	mov	r7, r0
 8011282:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011286:	9404      	str	r4, [sp, #16]
 8011288:	f88d 4020 	strb.w	r4, [sp, #32]
 801128c:	f7fd ff82 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011290:	fb06 8505 	mla	r5, r6, r5, r8
 8011294:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	9505      	str	r5, [sp, #20]
 801129c:	f8ad 601e 	strh.w	r6, [sp, #30]
 80112a0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80112a4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80112a8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80112ac:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80112b0:	6803      	ldr	r3, [r0, #0]
 80112b2:	a901      	add	r1, sp, #4
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	4798      	blx	r3
 80112b8:	b00a      	add	sp, #40	; 0x28
 80112ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112be <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80112be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112c2:	2400      	movs	r4, #0
 80112c4:	461d      	mov	r5, r3
 80112c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112ca:	4691      	mov	r9, r2
 80112cc:	b08b      	sub	sp, #44	; 0x2c
 80112ce:	4688      	mov	r8, r1
 80112d0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80112d4:	4607      	mov	r7, r0
 80112d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112da:	9404      	str	r4, [sp, #16]
 80112dc:	f7fd ff5a 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80112e0:	fb06 9505 	mla	r5, r6, r5, r9
 80112e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80112e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80112ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112f0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	9505      	str	r5, [sp, #20]
 80112f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112fc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011300:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011304:	f8cd 8010 	str.w	r8, [sp, #16]
 8011308:	f8ad 4020 	strh.w	r4, [sp, #32]
 801130c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011310:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011314:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011318:	6803      	ldr	r3, [r0, #0]
 801131a:	a901      	add	r1, sp, #4
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	4798      	blx	r3
 8011320:	b00b      	add	sp, #44	; 0x2c
 8011322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011328 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801132c:	4698      	mov	r8, r3
 801132e:	2300      	movs	r3, #0
 8011330:	b08a      	sub	sp, #40	; 0x28
 8011332:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011336:	4606      	mov	r6, r0
 8011338:	2d0b      	cmp	r5, #11
 801133a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801133e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011342:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011346:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801134a:	9304      	str	r3, [sp, #16]
 801134c:	d137      	bne.n	80113be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801134e:	2380      	movs	r3, #128	; 0x80
 8011350:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011354:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011358:	f88d 0020 	strb.w	r0, [sp, #32]
 801135c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011360:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011364:	4630      	mov	r0, r6
 8011366:	f8ad 301a 	strh.w	r3, [sp, #26]
 801136a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801136e:	9203      	str	r2, [sp, #12]
 8011370:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011374:	f7fd ff0e 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011378:	2c0b      	cmp	r4, #11
 801137a:	bf8c      	ite	hi
 801137c:	2100      	movhi	r1, #0
 801137e:	4b1b      	ldrls	r3, [pc, #108]	; (80113ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011380:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011384:	bf98      	it	ls
 8011386:	5d19      	ldrbls	r1, [r3, r4]
 8011388:	fb02 8307 	mla	r3, r2, r7, r8
 801138c:	10c9      	asrs	r1, r1, #3
 801138e:	fb01 0003 	mla	r0, r1, r3, r0
 8011392:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011396:	9005      	str	r0, [sp, #20]
 8011398:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801139c:	2300      	movs	r3, #0
 801139e:	6870      	ldr	r0, [r6, #4]
 80113a0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80113a4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80113a8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80113ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80113b0:	6803      	ldr	r3, [r0, #0]
 80113b2:	a901      	add	r1, sp, #4
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	4798      	blx	r3
 80113b8:	b00a      	add	sp, #40	; 0x28
 80113ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113be:	2d02      	cmp	r5, #2
 80113c0:	d109      	bne.n	80113d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80113c2:	28ff      	cmp	r0, #255	; 0xff
 80113c4:	d105      	bne.n	80113d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80113c6:	f1bc 0f00 	cmp.w	ip, #0
 80113ca:	bf14      	ite	ne
 80113cc:	2340      	movne	r3, #64	; 0x40
 80113ce:	2320      	moveq	r3, #32
 80113d0:	e7be      	b.n	8011350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113d2:	2340      	movs	r3, #64	; 0x40
 80113d4:	e7bc      	b.n	8011350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113d6:	28ff      	cmp	r0, #255	; 0xff
 80113d8:	d105      	bne.n	80113e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80113da:	f1bc 0f00 	cmp.w	ip, #0
 80113de:	bf14      	ite	ne
 80113e0:	2304      	movne	r3, #4
 80113e2:	2301      	moveq	r3, #1
 80113e4:	e7b4      	b.n	8011350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113e6:	2304      	movs	r3, #4
 80113e8:	e7b2      	b.n	8011350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80113ea:	bf00      	nop
 80113ec:	080240a0 	.word	0x080240a0

080113f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	b08b      	sub	sp, #44	; 0x2c
 80113f6:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80113fa:	461d      	mov	r5, r3
 80113fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011400:	bf14      	ite	ne
 8011402:	2308      	movne	r3, #8
 8011404:	2302      	moveq	r3, #2
 8011406:	2400      	movs	r4, #0
 8011408:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801140c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011410:	4688      	mov	r8, r1
 8011412:	4693      	mov	fp, r2
 8011414:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011418:	9404      	str	r4, [sp, #16]
 801141a:	4607      	mov	r7, r0
 801141c:	f7fd feba 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011420:	2e0b      	cmp	r6, #11
 8011422:	bf98      	it	ls
 8011424:	4b15      	ldrls	r3, [pc, #84]	; (801147c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011426:	fb05 b50a 	mla	r5, r5, sl, fp
 801142a:	bf98      	it	ls
 801142c:	5d9c      	ldrbls	r4, [r3, r6]
 801142e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011432:	10e4      	asrs	r4, r4, #3
 8011434:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011438:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801143c:	fb04 0405 	mla	r4, r4, r5, r0
 8011440:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011444:	2300      	movs	r3, #0
 8011446:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	9405      	str	r4, [sp, #20]
 801144e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011452:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011456:	f8cd 8010 	str.w	r8, [sp, #16]
 801145a:	f88d 9020 	strb.w	r9, [sp, #32]
 801145e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8011462:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011466:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801146a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	a901      	add	r1, sp, #4
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	4798      	blx	r3
 8011476:	b00b      	add	sp, #44	; 0x2c
 8011478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147c:	080240a0 	.word	0x080240a0

08011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011484:	461e      	mov	r6, r3
 8011486:	4b0a      	ldr	r3, [pc, #40]	; (80114b0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011488:	460f      	mov	r7, r1
 801148a:	881d      	ldrh	r5, [r3, #0]
 801148c:	4690      	mov	r8, r2
 801148e:	f7fb fea1 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8011492:	6803      	ldr	r3, [r0, #0]
 8011494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011496:	4798      	blx	r3
 8011498:	280b      	cmp	r0, #11
 801149a:	bf8e      	itee	hi
 801149c:	2400      	movhi	r4, #0
 801149e:	4b05      	ldrls	r3, [pc, #20]	; (80114b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80114a0:	5c1c      	ldrbls	r4, [r3, r0]
 80114a2:	fb08 7005 	mla	r0, r8, r5, r7
 80114a6:	10e4      	asrs	r4, r4, #3
 80114a8:	fb04 6000 	mla	r0, r4, r0, r6
 80114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b0:	2001fd9e 	.word	0x2001fd9e
 80114b4:	080240a0 	.word	0x080240a0

080114b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80114b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ba:	2500      	movs	r5, #0
 80114bc:	b08b      	sub	sp, #44	; 0x2c
 80114be:	461f      	mov	r7, r3
 80114c0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80114c4:	4604      	mov	r4, r0
 80114c6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80114ca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80114ce:	4616      	mov	r6, r2
 80114d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80114d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80114d8:	9504      	str	r5, [sp, #16]
 80114da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80114de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80114e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80114e6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80114ea:	f88d 3020 	strb.w	r3, [sp, #32]
 80114ee:	f7fd fe51 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80114f2:	463a      	mov	r2, r7
 80114f4:	4631      	mov	r1, r6
 80114f6:	4603      	mov	r3, r0
 80114f8:	4620      	mov	r0, r4
 80114fa:	f7ff ffc1 	bl	8011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80114fe:	4b0e      	ldr	r3, [pc, #56]	; (8011538 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011500:	9005      	str	r0, [sp, #20]
 8011502:	881b      	ldrh	r3, [r3, #0]
 8011504:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011508:	f7fb fe64 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 801150c:	6803      	ldr	r3, [r0, #0]
 801150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011510:	4798      	blx	r3
 8011512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011514:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011518:	9304      	str	r3, [sp, #16]
 801151a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801151e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011522:	6860      	ldr	r0, [r4, #4]
 8011524:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011528:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801152c:	6803      	ldr	r3, [r0, #0]
 801152e:	a901      	add	r1, sp, #4
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	4798      	blx	r3
 8011534:	b00b      	add	sp, #44	; 0x2c
 8011536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011538:	2001fd9e 	.word	0x2001fd9e

0801153c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801153e:	b08d      	sub	sp, #52	; 0x34
 8011540:	466b      	mov	r3, sp
 8011542:	e883 0006 	stmia.w	r3, {r1, r2}
 8011546:	2300      	movs	r3, #0
 8011548:	2501      	movs	r5, #1
 801154a:	9306      	str	r3, [sp, #24]
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	9503      	str	r5, [sp, #12]
 8011550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011552:	4604      	mov	r4, r0
 8011554:	f8bd 6000 	ldrh.w	r6, [sp]
 8011558:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801155c:	4798      	blx	r3
 801155e:	463a      	mov	r2, r7
 8011560:	4631      	mov	r1, r6
 8011562:	4603      	mov	r3, r0
 8011564:	4620      	mov	r0, r4
 8011566:	f7ff ff8b 	bl	8011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801156a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801156c:	9004      	str	r0, [sp, #16]
 801156e:	9307      	str	r3, [sp, #28]
 8011570:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011574:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011578:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801157c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011580:	4b0e      	ldr	r3, [pc, #56]	; (80115bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011588:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801158c:	f7fb fe22 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8011590:	6803      	ldr	r3, [r0, #0]
 8011592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011594:	4798      	blx	r3
 8011596:	23ff      	movs	r3, #255	; 0xff
 8011598:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801159c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80115a0:	6860      	ldr	r0, [r4, #4]
 80115a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80115a6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80115aa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80115ae:	6803      	ldr	r3, [r0, #0]
 80115b0:	a903      	add	r1, sp, #12
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	4798      	blx	r3
 80115b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80115b8:	b00d      	add	sp, #52	; 0x34
 80115ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115bc:	2001fd9e 	.word	0x2001fd9e

080115c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80115c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c4:	b08c      	sub	sp, #48	; 0x30
 80115c6:	466d      	mov	r5, sp
 80115c8:	461e      	mov	r6, r3
 80115ca:	2300      	movs	r3, #0
 80115cc:	e885 0006 	stmia.w	r5, {r1, r2}
 80115d0:	2501      	movs	r5, #1
 80115d2:	9306      	str	r3, [sp, #24]
 80115d4:	6803      	ldr	r3, [r0, #0]
 80115d6:	9503      	str	r5, [sp, #12]
 80115d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115da:	4604      	mov	r4, r0
 80115dc:	f8bd 7000 	ldrh.w	r7, [sp]
 80115e0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80115e4:	4798      	blx	r3
 80115e6:	4642      	mov	r2, r8
 80115e8:	4639      	mov	r1, r7
 80115ea:	4603      	mov	r3, r0
 80115ec:	4620      	mov	r0, r4
 80115ee:	f7ff ff47 	bl	8011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80115f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80115f6:	9004      	str	r0, [sp, #16]
 80115f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80115fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011600:	9607      	str	r6, [sp, #28]
 8011602:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801160e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011610:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011614:	f7fb fdde 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 8011618:	6803      	ldr	r3, [r0, #0]
 801161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161c:	4798      	blx	r3
 801161e:	23ff      	movs	r3, #255	; 0xff
 8011620:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011624:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011628:	6860      	ldr	r0, [r4, #4]
 801162a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801162e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011632:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011636:	6803      	ldr	r3, [r0, #0]
 8011638:	a903      	add	r1, sp, #12
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	4798      	blx	r3
 801163e:	4630      	mov	r0, r6
 8011640:	b00c      	add	sp, #48	; 0x30
 8011642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011646:	bf00      	nop
 8011648:	2001fd9e 	.word	0x2001fd9e

0801164c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801164e:	b085      	sub	sp, #20
 8011650:	ac02      	add	r4, sp, #8
 8011652:	e884 0006 	stmia.w	r4, {r1, r2}
 8011656:	4605      	mov	r5, r0
 8011658:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801165c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011660:	f7fd fd98 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011664:	463a      	mov	r2, r7
 8011666:	4603      	mov	r3, r0
 8011668:	4631      	mov	r1, r6
 801166a:	4628      	mov	r0, r5
 801166c:	f7ff ff08 	bl	8011480 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011670:	4a05      	ldr	r2, [pc, #20]	; (8011688 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011672:	682b      	ldr	r3, [r5, #0]
 8011674:	8812      	ldrh	r2, [r2, #0]
 8011676:	9200      	str	r2, [sp, #0]
 8011678:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801167a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801167e:	4603      	mov	r3, r0
 8011680:	4628      	mov	r0, r5
 8011682:	47b0      	blx	r6
 8011684:	b005      	add	sp, #20
 8011686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011688:	2001fd9e 	.word	0x2001fd9e

0801168c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011692:	4604      	mov	r4, r0
 8011694:	b19b      	cbz	r3, 80116be <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011696:	2002      	movs	r0, #2
 8011698:	f7fd fc2e 	bl	800eef8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801169c:	2300      	movs	r3, #0
 801169e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80116a2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80116a6:	6823      	ldr	r3, [r4, #0]
 80116a8:	4620      	mov	r0, r4
 80116aa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80116ae:	f7fd fd71 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80116b2:	462b      	mov	r3, r5
 80116b4:	4601      	mov	r1, r0
 80116b6:	4620      	mov	r0, r4
 80116b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116bc:	4718      	bx	r3
 80116be:	bd70      	pop	{r4, r5, r6, pc}

080116c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80116c0:	b538      	push	{r3, r4, r5, lr}
 80116c2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80116c6:	4604      	mov	r4, r0
 80116c8:	428b      	cmp	r3, r1
 80116ca:	460d      	mov	r5, r1
 80116cc:	d006      	beq.n	80116dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80116ce:	6803      	ldr	r3, [r0, #0]
 80116d0:	b929      	cbnz	r1, 80116de <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80116d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80116d6:	4798      	blx	r3
 80116d8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80116dc:	bd38      	pop	{r3, r4, r5, pc}
 80116de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80116e2:	e7f8      	b.n	80116d6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080116e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80116e4:	b510      	push	{r4, lr}
 80116e6:	4b0d      	ldr	r3, [pc, #52]	; (801171c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80116e8:	4604      	mov	r4, r0
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	b95b      	cbnz	r3, 8011706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d007      	beq.n	8011706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116f6:	6840      	ldr	r0, [r0, #4]
 80116f8:	f000 f90e 	bl	8011918 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80116fc:	b118      	cbz	r0, 8011706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80116fe:	6862      	ldr	r2, [r4, #4]
 8011700:	7a53      	ldrb	r3, [r2, #9]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d0fc      	beq.n	8011700 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011706:	f7fe f87b 	bl	800f800 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801170a:	4620      	mov	r0, r4
 801170c:	2100      	movs	r1, #0
 801170e:	f7ff ffd7 	bl	80116c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011712:	4620      	mov	r0, r4
 8011714:	f7fd fd3e 	bl	800f194 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011718:	bd10      	pop	{r4, pc}
 801171a:	bf00      	nop
 801171c:	2001fda2 	.word	0x2001fda2

08011720 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8011720:	6803      	ldr	r3, [r0, #0]
 8011722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011724:	4718      	bx	r3

08011726 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011726:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801172a:	1a13      	subs	r3, r2, r0
 801172c:	4258      	negs	r0, r3
 801172e:	4158      	adcs	r0, r3
 8011730:	4770      	bx	lr

08011732 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011732:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011736:	1a9b      	subs	r3, r3, r2
 8011738:	2b00      	cmp	r3, #0
 801173a:	bfdc      	itt	le
 801173c:	6882      	ldrle	r2, [r0, #8]
 801173e:	189b      	addle	r3, r3, r2
 8011740:	2b01      	cmp	r3, #1
 8011742:	bfcc      	ite	gt
 8011744:	2000      	movgt	r0, #0
 8011746:	2001      	movle	r0, #1
 8011748:	4770      	bx	lr

0801174a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801174a:	6902      	ldr	r2, [r0, #16]
 801174c:	6843      	ldr	r3, [r0, #4]
 801174e:	2024      	movs	r0, #36	; 0x24
 8011750:	fb00 3002 	mla	r0, r0, r2, r3
 8011754:	4770      	bx	lr

08011756 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011756:	6803      	ldr	r3, [r0, #0]
 8011758:	691b      	ldr	r3, [r3, #16]
 801175a:	4718      	bx	r3

0801175c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801175c:	2301      	movs	r3, #1
 801175e:	b570      	push	{r4, r5, r6, lr}
 8011760:	7203      	strb	r3, [r0, #8]
 8011762:	4604      	mov	r4, r0
 8011764:	6840      	ldr	r0, [r0, #4]
 8011766:	6803      	ldr	r3, [r0, #0]
 8011768:	699b      	ldr	r3, [r3, #24]
 801176a:	4798      	blx	r3
 801176c:	6803      	ldr	r3, [r0, #0]
 801176e:	4605      	mov	r5, r0
 8011770:	2b40      	cmp	r3, #64	; 0x40
 8011772:	d00c      	beq.n	801178e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011774:	d810      	bhi.n	8011798 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011776:	2b04      	cmp	r3, #4
 8011778:	d01d      	beq.n	80117b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801177a:	d804      	bhi.n	8011786 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801177c:	2b01      	cmp	r3, #1
 801177e:	d006      	beq.n	801178e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011780:	2b02      	cmp	r3, #2
 8011782:	d02c      	beq.n	80117de <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	2b08      	cmp	r3, #8
 8011788:	d01d      	beq.n	80117c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801178a:	2b20      	cmp	r3, #32
 801178c:	d1fa      	bne.n	8011784 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801178e:	6823      	ldr	r3, [r4, #0]
 8011790:	4620      	mov	r0, r4
 8011792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011794:	4798      	blx	r3
 8011796:	e013      	b.n	80117c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801179c:	d0f7      	beq.n	801178e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801179e:	d804      	bhi.n	80117aa <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80117a0:	2b80      	cmp	r3, #128	; 0x80
 80117a2:	d0f4      	beq.n	801178e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117a8:	e7f0      	b.n	801178c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80117aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117ae:	d0ee      	beq.n	801178e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80117b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117b4:	e7e5      	b.n	8011782 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	7f01      	ldrb	r1, [r0, #28]
 80117ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117bc:	4620      	mov	r0, r4
 80117be:	4798      	blx	r3
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117c4:	e006      	b.n	80117d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	7f01      	ldrb	r1, [r0, #28]
 80117ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117cc:	4620      	mov	r0, r4
 80117ce:	4798      	blx	r3
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117d4:	4629      	mov	r1, r5
 80117d6:	4620      	mov	r0, r4
 80117d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117dc:	4718      	bx	r3
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	4620      	mov	r0, r4
 80117e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117e4:	4798      	blx	r3
 80117e6:	e7f3      	b.n	80117d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080117e8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80117e8:	4770      	bx	lr

080117ea <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80117ea:	4770      	bx	lr

080117ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80117ec:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80117f0:	1ad2      	subs	r2, r2, r3
 80117f2:	2a00      	cmp	r2, #0
 80117f4:	b510      	push	{r4, lr}
 80117f6:	bfdc      	itt	le
 80117f8:	6884      	ldrle	r4, [r0, #8]
 80117fa:	1912      	addle	r2, r2, r4
 80117fc:	2a01      	cmp	r2, #1
 80117fe:	dd16      	ble.n	801182e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011800:	2424      	movs	r4, #36	; 0x24
 8011802:	6842      	ldr	r2, [r0, #4]
 8011804:	fb04 2303 	mla	r3, r4, r3, r2
 8011808:	f101 0220 	add.w	r2, r1, #32
 801180c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011810:	4291      	cmp	r1, r2
 8011812:	f843 4b04 	str.w	r4, [r3], #4
 8011816:	d1f9      	bne.n	801180c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011818:	780a      	ldrb	r2, [r1, #0]
 801181a:	701a      	strb	r2, [r3, #0]
 801181c:	68c3      	ldr	r3, [r0, #12]
 801181e:	6882      	ldr	r2, [r0, #8]
 8011820:	3301      	adds	r3, #1
 8011822:	429a      	cmp	r2, r3
 8011824:	bfd8      	it	le
 8011826:	1a9b      	suble	r3, r3, r2
 8011828:	f3bf 8f5b 	dmb	ish
 801182c:	60c3      	str	r3, [r0, #12]
 801182e:	bd10      	pop	{r4, pc}

08011830 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011830:	6903      	ldr	r3, [r0, #16]
 8011832:	6882      	ldr	r2, [r0, #8]
 8011834:	3301      	adds	r3, #1
 8011836:	429a      	cmp	r2, r3
 8011838:	bfd8      	it	le
 801183a:	1a9b      	suble	r3, r3, r2
 801183c:	f3bf 8f5b 	dmb	ish
 8011840:	6103      	str	r3, [r0, #16]
 8011842:	4770      	bx	lr

08011844 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011844:	b570      	push	{r4, r5, r6, lr}
 8011846:	4604      	mov	r4, r0
 8011848:	460e      	mov	r6, r1
 801184a:	6860      	ldr	r0, [r4, #4]
 801184c:	6803      	ldr	r3, [r0, #0]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	4798      	blx	r3
 8011852:	2800      	cmp	r0, #0
 8011854:	d1f9      	bne.n	801184a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011856:	4d0d      	ldr	r5, [pc, #52]	; (801188c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011858:	6828      	ldr	r0, [r5, #0]
 801185a:	6803      	ldr	r3, [r0, #0]
 801185c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801185e:	4798      	blx	r3
 8011860:	f7fd ffe8 	bl	800f834 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011864:	6828      	ldr	r0, [r5, #0]
 8011866:	2101      	movs	r1, #1
 8011868:	f7ff ff2a 	bl	80116c0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801186c:	6860      	ldr	r0, [r4, #4]
 801186e:	4631      	mov	r1, r6
 8011870:	6803      	ldr	r3, [r0, #0]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	4798      	blx	r3
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	4620      	mov	r0, r4
 801187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187c:	4798      	blx	r3
 801187e:	6828      	ldr	r0, [r5, #0]
 8011880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011884:	6803      	ldr	r3, [r0, #0]
 8011886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011888:	4718      	bx	r3
 801188a:	bf00      	nop
 801188c:	2001fda4 	.word	0x2001fda4

08011890 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011890:	b508      	push	{r3, lr}
 8011892:	f7fd ffb5 	bl	800f800 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801189a:	f7fd bfbf 	b.w	800f81c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801189e <_ZN8touchgfx13DMA_Interface5startEv>:
 801189e:	b510      	push	{r4, lr}
 80118a0:	4604      	mov	r4, r0
 80118a2:	6840      	ldr	r0, [r0, #4]
 80118a4:	6803      	ldr	r3, [r0, #0]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4798      	blx	r3
 80118aa:	b948      	cbnz	r0, 80118c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80118ac:	7a63      	ldrb	r3, [r4, #9]
 80118ae:	b13b      	cbz	r3, 80118c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80118b0:	7a23      	ldrb	r3, [r4, #8]
 80118b2:	b92b      	cbnz	r3, 80118c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80118b4:	6823      	ldr	r3, [r4, #0]
 80118b6:	4620      	mov	r0, r4
 80118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118be:	4718      	bx	r3
 80118c0:	bd10      	pop	{r4, pc}

080118c2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80118c2:	b570      	push	{r4, r5, r6, lr}
 80118c4:	4604      	mov	r4, r0
 80118c6:	6840      	ldr	r0, [r0, #4]
 80118c8:	6803      	ldr	r3, [r0, #0]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4798      	blx	r3
 80118ce:	4605      	mov	r5, r0
 80118d0:	b930      	cbnz	r0, 80118e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80118d2:	7a23      	ldrb	r3, [r4, #8]
 80118d4:	b123      	cbz	r3, 80118e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80118d6:	6860      	ldr	r0, [r4, #4]
 80118d8:	6803      	ldr	r3, [r0, #0]
 80118da:	695b      	ldr	r3, [r3, #20]
 80118dc:	4798      	blx	r3
 80118de:	7225      	strb	r5, [r4, #8]
 80118e0:	6860      	ldr	r0, [r4, #4]
 80118e2:	6803      	ldr	r3, [r0, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4798      	blx	r3
 80118e8:	b928      	cbnz	r0, 80118f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80118ea:	6823      	ldr	r3, [r4, #0]
 80118ec:	4620      	mov	r0, r4
 80118ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f4:	4718      	bx	r3
 80118f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118fa:	f7fd bfa7 	b.w	800f84c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08011900 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011900:	6082      	str	r2, [r0, #8]
 8011902:	2200      	movs	r2, #0
 8011904:	b510      	push	{r4, lr}
 8011906:	4c03      	ldr	r4, [pc, #12]	; (8011914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011908:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801190c:	e9c0 4100 	strd	r4, r1, [r0]
 8011910:	bd10      	pop	{r4, pc}
 8011912:	bf00      	nop
 8011914:	080241dc 	.word	0x080241dc

08011918 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011918:	6840      	ldr	r0, [r0, #4]
 801191a:	6803      	ldr	r3, [r0, #0]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	4718      	bx	r3

08011920 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011920:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8011924:	4770      	bx	lr

08011926 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8011926:	b510      	push	{r4, lr}
 8011928:	4604      	mov	r4, r0
 801192a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801192c:	b150      	cbz	r0, 8011944 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801192e:	6803      	ldr	r3, [r0, #0]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	4798      	blx	r3
 8011934:	b130      	cbz	r0, 8011944 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011936:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011938:	4621      	mov	r1, r4
 801193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801193e:	6803      	ldr	r3, [r0, #0]
 8011940:	689b      	ldr	r3, [r3, #8]
 8011942:	4718      	bx	r3
 8011944:	bd10      	pop	{r4, pc}

08011946 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8011946:	790b      	ldrb	r3, [r1, #4]
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	2b00      	cmp	r3, #0
 801194c:	bf0c      	ite	eq
 801194e:	2301      	moveq	r3, #1
 8011950:	2300      	movne	r3, #0
 8011952:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8011956:	4604      	mov	r4, r0
 8011958:	460e      	mov	r6, r1
 801195a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801195e:	d109      	bne.n	8011974 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8011960:	b14d      	cbz	r5, 8011976 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8011962:	7933      	ldrb	r3, [r6, #4]
 8011964:	2b01      	cmp	r3, #1
 8011966:	d10c      	bne.n	8011982 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	4620      	mov	r0, r4
 801196c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011972:	4718      	bx	r3
 8011974:	b12d      	cbz	r5, 8011982 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	4620      	mov	r0, r4
 801197a:	695b      	ldr	r3, [r3, #20]
 801197c:	4798      	blx	r3
 801197e:	2d00      	cmp	r5, #0
 8011980:	d1ef      	bne.n	8011962 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8011982:	bd70      	pop	{r4, r5, r6, pc}

08011984 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011984:	2300      	movs	r3, #0
 8011986:	8083      	strh	r3, [r0, #4]
 8011988:	80c3      	strh	r3, [r0, #6]
 801198a:	8003      	strh	r3, [r0, #0]
 801198c:	8043      	strh	r3, [r0, #2]
 801198e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8011992:	2bff      	cmp	r3, #255	; 0xff
 8011994:	bf01      	itttt	eq
 8011996:	890b      	ldrheq	r3, [r1, #8]
 8011998:	8083      	strheq	r3, [r0, #4]
 801199a:	894b      	ldrheq	r3, [r1, #10]
 801199c:	80c3      	strheq	r3, [r0, #6]
 801199e:	4770      	bx	lr

080119a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80119a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	466b      	mov	r3, sp
 80119a6:	6808      	ldr	r0, [r1, #0]
 80119a8:	6849      	ldr	r1, [r1, #4]
 80119aa:	c303      	stmia	r3!, {r0, r1}
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	4669      	mov	r1, sp
 80119b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b2:	4620      	mov	r0, r4
 80119b4:	4798      	blx	r3
 80119b6:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80119be:	b10a      	cbz	r2, 80119c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80119c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80119c2:	b900      	cbnz	r0, 80119c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80119c4:	6898      	ldr	r0, [r3, #8]
 80119c6:	6803      	ldr	r3, [r0, #0]
 80119c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80119ca:	6a1d      	ldr	r5, [r3, #32]
 80119cc:	4669      	mov	r1, sp
 80119ce:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80119d2:	47a8      	blx	r5
 80119d4:	b003      	add	sp, #12
 80119d6:	bd30      	pop	{r4, r5, pc}
 80119d8:	2001fda4 	.word	0x2001fda4

080119dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80119dc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80119e0:	b12a      	cbz	r2, 80119ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80119e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80119e6:	b112      	cbz	r2, 80119ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80119e8:	6803      	ldr	r3, [r0, #0]
 80119ea:	695b      	ldr	r3, [r3, #20]
 80119ec:	4718      	bx	r3
 80119ee:	4770      	bx	lr

080119f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	4605      	mov	r5, r0
 80119f4:	880b      	ldrh	r3, [r1, #0]
 80119f6:	4604      	mov	r4, r0
 80119f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80119fa:	8813      	ldrh	r3, [r2, #0]
 80119fc:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011a00:	4628      	mov	r0, r5
 8011a02:	f004 fa93 	bl	8015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011a06:	4606      	mov	r6, r0
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f004 fac3 	bl	8015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011a0e:	4605      	mov	r5, r0
 8011a10:	6823      	ldr	r3, [r4, #0]
 8011a12:	4631      	mov	r1, r6
 8011a14:	4620      	mov	r0, r4
 8011a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a18:	4798      	blx	r3
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	4620      	mov	r0, r4
 8011a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a26:	4718      	bx	r3

08011a28 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8011a28:	b510      	push	{r4, lr}
 8011a2a:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8011a2e:	4604      	mov	r4, r0
 8011a30:	2bff      	cmp	r3, #255	; 0xff
 8011a32:	d006      	beq.n	8011a42 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8011a34:	2300      	movs	r3, #0
 8011a36:	8003      	strh	r3, [r0, #0]
 8011a38:	8043      	strh	r3, [r0, #2]
 8011a3a:	8083      	strh	r3, [r0, #4]
 8011a3c:	80c3      	strh	r3, [r0, #6]
 8011a3e:	4620      	mov	r0, r4
 8011a40:	bd10      	pop	{r4, pc}
 8011a42:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8011a46:	b11b      	cbz	r3, 8011a50 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8011a48:	3130      	adds	r1, #48	; 0x30
 8011a4a:	f004 fad7 	bl	8015ffc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011a4e:	e7f6      	b.n	8011a3e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8011a50:	312e      	adds	r1, #46	; 0x2e
 8011a52:	e7fa      	b.n	8011a4a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08011a54 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8011a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011a5c:	b08a      	sub	sp, #40	; 0x28
 8011a5e:	4604      	mov	r4, r0
 8011a60:	4688      	mov	r8, r1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d066      	beq.n	8011b34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011a66:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011a68:	a805      	add	r0, sp, #20
 8011a6a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a6e:	f004 fa5d 	bl	8015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011a72:	4607      	mov	r7, r0
 8011a74:	a805      	add	r0, sp, #20
 8011a76:	f004 fa8d 	bl	8015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f9b8 6000 	ldrsh.w	r6, [r8]
 8011a80:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011a84:	9306      	str	r3, [sp, #24]
 8011a86:	4432      	add	r2, r6
 8011a88:	b292      	uxth	r2, r2
 8011a8a:	fa0f fc82 	sxth.w	ip, r2
 8011a8e:	459c      	cmp	ip, r3
 8011a90:	dd52      	ble.n	8011b38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a92:	42b7      	cmp	r7, r6
 8011a94:	dd50      	ble.n	8011b38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a96:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8011a9a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011a9e:	442b      	add	r3, r5
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	b219      	sxth	r1, r3
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	dd47      	ble.n	8011b38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011aa8:	42a8      	cmp	r0, r5
 8011aaa:	dd45      	ble.n	8011b38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011aac:	4567      	cmp	r7, ip
 8011aae:	bfb8      	it	lt
 8011ab0:	b2ba      	uxthlt	r2, r7
 8011ab2:	4288      	cmp	r0, r1
 8011ab4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011ab8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011abc:	bfb8      	it	lt
 8011abe:	b283      	uxthlt	r3, r0
 8011ac0:	1b92      	subs	r2, r2, r6
 8011ac2:	1b5b      	subs	r3, r3, r5
 8011ac4:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011ac8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011acc:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011ad0:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ad8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d026      	beq.n	8011b2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011ae0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	dd22      	ble.n	8011b2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011ae8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	dd1e      	ble.n	8011b2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011af0:	2300      	movs	r3, #0
 8011af2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	a908      	add	r1, sp, #32
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	4620      	mov	r0, r4
 8011afe:	4798      	blx	r3
 8011b00:	4b0f      	ldr	r3, [pc, #60]	; (8011b40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011b08:	b10a      	cbz	r2, 8011b0e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8011b0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011b0c:	b900      	cbnz	r0, 8011b10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8011b0e:	6898      	ldr	r0, [r3, #8]
 8011b10:	2501      	movs	r5, #1
 8011b12:	6801      	ldr	r1, [r0, #0]
 8011b14:	9502      	str	r5, [sp, #8]
 8011b16:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8011b1a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011b1e:	9401      	str	r4, [sp, #4]
 8011b20:	ac06      	add	r4, sp, #24
 8011b22:	9400      	str	r4, [sp, #0]
 8011b24:	688c      	ldr	r4, [r1, #8]
 8011b26:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011b2a:	a905      	add	r1, sp, #20
 8011b2c:	47a0      	blx	r4
 8011b2e:	b00a      	add	sp, #40	; 0x28
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011b36:	e797      	b.n	8011a68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	9307      	str	r3, [sp, #28]
 8011b3c:	e7ca      	b.n	8011ad4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8011b3e:	bf00      	nop
 8011b40:	2001fda4 	.word	0x2001fda4

08011b44 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011b44:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8011b48:	b12a      	cbz	r2, 8011b56 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011b4a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011b4e:	b112      	cbz	r2, 8011b56 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011b50:	6803      	ldr	r3, [r0, #0]
 8011b52:	695b      	ldr	r3, [r3, #20]
 8011b54:	4718      	bx	r3
 8011b56:	4770      	bx	lr

08011b58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8011b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	b08d      	sub	sp, #52	; 0x34
 8011b60:	460f      	mov	r7, r1
 8011b62:	f7ff ff77 	bl	8011a54 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8011b66:	4a55      	ldr	r2, [pc, #340]	; (8011cbc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8011b68:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011b6a:	8812      	ldrh	r2, [r2, #0]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	f240 8082 	bls.w	8011c76 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011b72:	4d53      	ldr	r5, [pc, #332]	; (8011cc0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8011b74:	682a      	ldr	r2, [r5, #0]
 8011b76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011b7a:	4b52      	ldr	r3, [pc, #328]	; (8011cc4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011b82:	2200      	movs	r2, #0
 8011b84:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011b88:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8011b8c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8011b90:	2a03      	cmp	r2, #3
 8011b92:	d811      	bhi.n	8011bb8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8011b94:	e8df f002 	tbb	[pc, r2]
 8011b98:	89727902 	.word	0x89727902
 8011b9c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8011ba0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011ba4:	1ad2      	subs	r2, r2, r3
 8011ba6:	2002      	movs	r0, #2
 8011ba8:	fb92 f2f0 	sdiv	r2, r2, r0
 8011bac:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011bb0:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011bb4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011bb8:	f10d 0914 	add.w	r9, sp, #20
 8011bbc:	f10d 080c 	add.w	r8, sp, #12
 8011bc0:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011bc4:	e889 0003 	stmia.w	r9, {r0, r1}
 8011bc8:	4639      	mov	r1, r7
 8011bca:	4648      	mov	r0, r9
 8011bcc:	f7fe fec4 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8011bd0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	dd4e      	ble.n	8011c76 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011bd8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	dd4a      	ble.n	8011c76 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011be0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011be4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011be8:	4641      	mov	r1, r8
 8011bea:	1a9b      	subs	r3, r3, r2
 8011bec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011bf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011bf4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	1a9b      	subs	r3, r3, r2
 8011bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c04:	4798      	blx	r3
 8011c06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d053      	beq.n	8011cb6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8011c0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011c10:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8011c12:	682b      	ldr	r3, [r5, #0]
 8011c14:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8011c18:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011c1c:	785b      	ldrb	r3, [r3, #1]
 8011c1e:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8011c22:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8011c26:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011c2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8011c34:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8011c38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011c3c:	4b22      	ldr	r3, [pc, #136]	; (8011cc8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8011c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	9607      	str	r6, [sp, #28]
 8011c44:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011c48:	f88d 5020 	strb.w	r5, [sp, #32]
 8011c4c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011c50:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011c54:	b10a      	cbz	r2, 8011c5a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8011c56:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c58:	b904      	cbnz	r4, 8011c5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8011c5a:	689c      	ldr	r4, [r3, #8]
 8011c5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ccc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8011c5e:	6818      	ldr	r0, [r3, #0]
 8011c60:	f7fc feca 	bl	800e9f8 <_ZNK8touchgfx5Texts7getTextEt>
 8011c64:	ab07      	add	r3, sp, #28
 8011c66:	9001      	str	r0, [sp, #4]
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011c6e:	464b      	mov	r3, r9
 8011c70:	4620      	mov	r0, r4
 8011c72:	f7fc fe52 	bl	800e91a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011c76:	b00d      	add	sp, #52	; 0x34
 8011c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c7c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8011c80:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011c84:	1ad2      	subs	r2, r2, r3
 8011c86:	3201      	adds	r2, #1
 8011c88:	e78d      	b.n	8011ba6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8011c8a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011c8e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	3201      	adds	r2, #1
 8011c96:	2002      	movs	r0, #2
 8011c98:	fb92 f2f0 	sdiv	r2, r2, r0
 8011c9c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011ca0:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011ca4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011ca8:	e786      	b.n	8011bb8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8011caa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011cae:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8011cb2:	1ad2      	subs	r2, r2, r3
 8011cb4:	e7ef      	b.n	8011c96 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8011cb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011cb8:	e7aa      	b.n	8011c10 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8011cba:	bf00      	nop
 8011cbc:	2001fdf8 	.word	0x2001fdf8
 8011cc0:	2001fdf4 	.word	0x2001fdf4
 8011cc4:	2001fdfc 	.word	0x2001fdfc
 8011cc8:	2001fda4 	.word	0x2001fda4
 8011ccc:	2001fe00 	.word	0x2001fe00

08011cd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011cd8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8011cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	4c10      	ldr	r4, [pc, #64]	; (8011d24 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8011ce4:	8082      	strh	r2, [r0, #4]
 8011ce6:	6004      	str	r4, [r0, #0]
 8011ce8:	4c0f      	ldr	r4, [pc, #60]	; (8011d28 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8011cea:	80c2      	strh	r2, [r0, #6]
 8011cec:	8102      	strh	r2, [r0, #8]
 8011cee:	8142      	strh	r2, [r0, #10]
 8011cf0:	8182      	strh	r2, [r0, #12]
 8011cf2:	81c2      	strh	r2, [r0, #14]
 8011cf4:	8202      	strh	r2, [r0, #16]
 8011cf6:	8242      	strh	r2, [r0, #18]
 8011cf8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011cfc:	61c2      	str	r2, [r0, #28]
 8011cfe:	8402      	strh	r2, [r0, #32]
 8011d00:	8442      	strh	r2, [r0, #34]	; 0x22
 8011d02:	6282      	str	r2, [r0, #40]	; 0x28
 8011d04:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8011d08:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8011d0a:	8601      	strh	r1, [r0, #48]	; 0x30
 8011d0c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8011d10:	6344      	str	r4, [r0, #52]	; 0x34
 8011d12:	8701      	strh	r1, [r0, #56]	; 0x38
 8011d14:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8011d18:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8011d1c:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8011d20:	bd10      	pop	{r4, pc}
 8011d22:	bf00      	nop
 8011d24:	0802434c 	.word	0x0802434c
 8011d28:	080238f0 	.word	0x080238f0

08011d2c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011d2c:	b510      	push	{r4, lr}
 8011d2e:	6803      	ldr	r3, [r0, #0]
 8011d30:	460c      	mov	r4, r1
 8011d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d34:	4798      	blx	r3
 8011d36:	1b03      	subs	r3, r0, r4
 8011d38:	4258      	negs	r0, r3
 8011d3a:	4158      	adcs	r0, r3
 8011d3c:	bd10      	pop	{r4, pc}
	...

08011d40 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011d40:	4b01      	ldr	r3, [pc, #4]	; (8011d48 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011d42:	6019      	str	r1, [r3, #0]
 8011d44:	4770      	bx	lr
 8011d46:	bf00      	nop
 8011d48:	2001fdac 	.word	0x2001fdac

08011d4c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d50:	4696      	mov	lr, r2
 8011d52:	4614      	mov	r4, r2
 8011d54:	4605      	mov	r5, r0
 8011d56:	460e      	mov	r6, r1
 8011d58:	461f      	mov	r7, r3
 8011d5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d5e:	b097      	sub	sp, #92	; 0x5c
 8011d60:	f10d 0c1c 	add.w	ip, sp, #28
 8011d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d68:	f8de 3000 	ldr.w	r3, [lr]
 8011d6c:	f104 0e14 	add.w	lr, r4, #20
 8011d70:	f8cc 3000 	str.w	r3, [ip]
 8011d74:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011d78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d80:	f8de 3000 	ldr.w	r3, [lr]
 8011d84:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011d88:	f8cc 3000 	str.w	r3, [ip]
 8011d8c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011d90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d98:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8011d9c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011da0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011da4:	f8de 3000 	ldr.w	r3, [lr]
 8011da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011daa:	f8cc 3000 	str.w	r3, [ip]
 8011dae:	9201      	str	r2, [sp, #4]
 8011db0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011db4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	9200      	str	r2, [sp, #0]
 8011dba:	f8cd 8008 	str.w	r8, [sp, #8]
 8011dbe:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8011dc2:	aa07      	add	r2, sp, #28
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47d8      	blx	fp
 8011dcc:	46a6      	mov	lr, r4
 8011dce:	f10d 0c1c 	add.w	ip, sp, #28
 8011dd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dda:	f8de 3000 	ldr.w	r3, [lr]
 8011dde:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011de2:	f8cc 3000 	str.w	r3, [ip]
 8011de6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011dea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011df2:	f8de 3000 	ldr.w	r3, [lr]
 8011df6:	343c      	adds	r4, #60	; 0x3c
 8011df8:	f8cc 3000 	str.w	r3, [ip]
 8011dfc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	4631      	mov	r1, r6
 8011e0a:	f8cc 3000 	str.w	r3, [ip]
 8011e0e:	682b      	ldr	r3, [r5, #0]
 8011e10:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e16:	f8cd 8008 	str.w	r8, [sp, #8]
 8011e1a:	9201      	str	r2, [sp, #4]
 8011e1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e1e:	4628      	mov	r0, r5
 8011e20:	9200      	str	r2, [sp, #0]
 8011e22:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8011e24:	aa07      	add	r2, sp, #28
 8011e26:	463b      	mov	r3, r7
 8011e28:	47a0      	blx	r4
 8011e2a:	b017      	add	sp, #92	; 0x5c
 8011e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e30 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011e30:	2000      	movs	r0, #0
 8011e32:	4770      	bx	lr

08011e34 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	b08d      	sub	sp, #52	; 0x34
 8011e3a:	4688      	mov	r8, r1
 8011e3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011e3e:	f8d3 c000 	ldr.w	ip, [r3]
 8011e42:	680f      	ldr	r7, [r1, #0]
 8011e44:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8011e48:	eba7 070c 	sub.w	r7, r7, ip
 8011e4c:	42bc      	cmp	r4, r7
 8011e4e:	bfa8      	it	ge
 8011e50:	463c      	movge	r4, r7
 8011e52:	ee07 4a90 	vmov	s15, r4
 8011e56:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8011e5a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011e5e:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8011e62:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011e66:	edd3 6a07 	vldr	s13, [r3, #28]
 8011e6a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011e6e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011e72:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011e76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e7a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8011e7e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8011e82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e88:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011e8c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011e90:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011e94:	eb09 0e0c 	add.w	lr, r9, ip
 8011e98:	4571      	cmp	r1, lr
 8011e9a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011e9e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011ea2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011ea6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011eaa:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011eae:	f340 808c 	ble.w	8011fca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011eb2:	eba1 060e 	sub.w	r6, r1, lr
 8011eb6:	fb96 f5f4 	sdiv	r5, r6, r4
 8011eba:	ee07 5a10 	vmov	s14, r5
 8011ebe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ec2:	2d00      	cmp	r5, #0
 8011ec4:	fb04 6615 	mls	r6, r4, r5, r6
 8011ec8:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011ecc:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011ed0:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011ed4:	dd12      	ble.n	8011efc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011ed6:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011eda:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011ee6:	bf14      	ite	ne
 8011ee8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011eec:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011ef0:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011ef4:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011ef8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011efc:	fb05 f204 	mul.w	r2, r5, r4
 8011f00:	1abf      	subs	r7, r7, r2
 8011f02:	4494      	add	ip, r2
 8011f04:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011f08:	4411      	add	r1, r2
 8011f0a:	eb09 020c 	add.w	r2, r9, ip
 8011f0e:	443a      	add	r2, r7
 8011f10:	b209      	sxth	r1, r1
 8011f12:	428a      	cmp	r2, r1
 8011f14:	bfc4      	itt	gt
 8011f16:	eba1 0209 	subgt.w	r2, r1, r9
 8011f1a:	eba2 070c 	subgt.w	r7, r2, ip
 8011f1e:	2f00      	cmp	r7, #0
 8011f20:	dd50      	ble.n	8011fc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011f22:	fb97 f1f4 	sdiv	r1, r7, r4
 8011f26:	fb04 7211 	mls	r2, r4, r1, r7
 8011f2a:	b90a      	cbnz	r2, 8011f30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011f2c:	4622      	mov	r2, r4
 8011f2e:	3901      	subs	r1, #1
 8011f30:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011f34:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011f38:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011f3c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011f40:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011f44:	ee17 7a90 	vmov	r7, s15
 8011f48:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011f4c:	eef0 6a42 	vmov.f32	s13, s4
 8011f50:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011f54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011f58:	ee17 ca90 	vmov	ip, s15
 8011f5c:	eeb0 7a61 	vmov.f32	s14, s3
 8011f60:	6840      	ldr	r0, [r0, #4]
 8011f62:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8011f66:	f8d0 a000 	ldr.w	sl, [r0]
 8011f6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011f6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011f6e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011f72:	9008      	str	r0, [sp, #32]
 8011f74:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011f7c:	fb9c fcf4 	sdiv	ip, ip, r4
 8011f80:	445b      	add	r3, fp
 8011f82:	9307      	str	r3, [sp, #28]
 8011f84:	ee16 3a90 	vmov	r3, s13
 8011f88:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011f8c:	fb0c 3306 	mla	r3, ip, r6, r3
 8011f90:	fb97 f7f4 	sdiv	r7, r7, r4
 8011f94:	9302      	str	r3, [sp, #8]
 8011f96:	ee17 3a10 	vmov	r3, s14
 8011f9a:	2900      	cmp	r1, #0
 8011f9c:	bfcc      	ite	gt
 8011f9e:	46a1      	movgt	r9, r4
 8011fa0:	4691      	movle	r9, r2
 8011fa2:	44b6      	add	lr, r6
 8011fa4:	fb04 e505 	mla	r5, r4, r5, lr
 8011fa8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011fac:	fb07 3706 	mla	r7, r7, r6, r3
 8011fb0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011fb4:	e9cd 4700 	strd	r4, r7, [sp]
 8011fb8:	eba9 0306 	sub.w	r3, r9, r6
 8011fbc:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011fc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011fc2:	47a0      	blx	r4
 8011fc4:	b00d      	add	sp, #52	; 0x34
 8011fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fca:	2500      	movs	r5, #0
 8011fcc:	462e      	mov	r6, r5
 8011fce:	e799      	b.n	8011f04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	461d      	mov	r5, r3
 8011fd6:	b0db      	sub	sp, #364	; 0x16c
 8011fd8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011fdc:	910f      	str	r1, [sp, #60]	; 0x3c
 8011fde:	930a      	str	r3, [sp, #40]	; 0x28
 8011fe0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011fe4:	9009      	str	r0, [sp, #36]	; 0x24
 8011fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fe8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011fec:	4614      	mov	r4, r2
 8011fee:	9310      	str	r3, [sp, #64]	; 0x40
 8011ff0:	6803      	ldr	r3, [r0, #0]
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8011ff6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ffa:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011ffe:	47b8      	blx	r7
 8012000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012002:	6058      	str	r0, [r3, #4]
 8012004:	2800      	cmp	r0, #0
 8012006:	f000 83a1 	beq.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801200a:	ed94 7a02 	vldr	s14, [r4, #8]
 801200e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012016:	682b      	ldr	r3, [r5, #0]
 8012018:	9314      	str	r3, [sp, #80]	; 0x50
 801201a:	686b      	ldr	r3, [r5, #4]
 801201c:	9315      	str	r3, [sp, #84]	; 0x54
 801201e:	4bc1      	ldr	r3, [pc, #772]	; (8012324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012020:	7819      	ldrb	r1, [r3, #0]
 8012022:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012026:	2900      	cmp	r1, #0
 8012028:	bf16      	itet	ne
 801202a:	4619      	movne	r1, r3
 801202c:	4611      	moveq	r1, r2
 801202e:	4613      	movne	r3, r2
 8012030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012034:	9116      	str	r1, [sp, #88]	; 0x58
 8012036:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801203a:	f240 8387 	bls.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801203e:	ed94 7a07 	vldr	s14, [r4, #28]
 8012042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204a:	f240 837f 	bls.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801204e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205a:	f240 8377 	bls.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801205e:	6822      	ldr	r2, [r4, #0]
 8012060:	4bb1      	ldr	r3, [pc, #708]	; (8012328 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012062:	429a      	cmp	r2, r3
 8012064:	f2c0 8372 	blt.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012068:	49b0      	ldr	r1, [pc, #704]	; (801232c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801206a:	6963      	ldr	r3, [r4, #20]
 801206c:	428a      	cmp	r2, r1
 801206e:	f300 836d 	bgt.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012072:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012076:	48ae      	ldr	r0, [pc, #696]	; (8012330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012078:	33ff      	adds	r3, #255	; 0xff
 801207a:	4283      	cmp	r3, r0
 801207c:	f200 8366 	bhi.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012082:	4dac      	ldr	r5, [pc, #688]	; (8012334 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012084:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012088:	33ff      	adds	r3, #255	; 0xff
 801208a:	42ab      	cmp	r3, r5
 801208c:	f200 835e 	bhi.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012090:	6862      	ldr	r2, [r4, #4]
 8012092:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8012096:	33ff      	adds	r3, #255	; 0xff
 8012098:	4283      	cmp	r3, r0
 801209a:	f200 8357 	bhi.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801209e:	69a1      	ldr	r1, [r4, #24]
 80120a0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80120a4:	33ff      	adds	r3, #255	; 0xff
 80120a6:	4283      	cmp	r3, r0
 80120a8:	f200 8350 	bhi.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80120ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80120ae:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80120b2:	30ff      	adds	r0, #255	; 0xff
 80120b4:	42a8      	cmp	r0, r5
 80120b6:	f200 8349 	bhi.w	801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80120ba:	428a      	cmp	r2, r1
 80120bc:	f280 8110 	bge.w	80122e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80120c0:	429a      	cmp	r2, r3
 80120c2:	f300 8119 	bgt.w	80122f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80120c6:	4299      	cmp	r1, r3
 80120c8:	f280 811d 	bge.w	8012306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80120cc:	2502      	movs	r5, #2
 80120ce:	2701      	movs	r7, #1
 80120d0:	46a9      	mov	r9, r5
 80120d2:	46b8      	mov	r8, r7
 80120d4:	f04f 0a00 	mov.w	sl, #0
 80120d8:	4621      	mov	r1, r4
 80120da:	a849      	add	r0, sp, #292	; 0x124
 80120dc:	f003 fc5c 	bl	8015998 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80120e0:	4622      	mov	r2, r4
 80120e2:	4653      	mov	r3, sl
 80120e4:	a949      	add	r1, sp, #292	; 0x124
 80120e6:	f8cd 9000 	str.w	r9, [sp]
 80120ea:	a819      	add	r0, sp, #100	; 0x64
 80120ec:	f003 fd86 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80120f0:	4622      	mov	r2, r4
 80120f2:	4653      	mov	r3, sl
 80120f4:	a949      	add	r1, sp, #292	; 0x124
 80120f6:	f8cd 8000 	str.w	r8, [sp]
 80120fa:	a829      	add	r0, sp, #164	; 0xa4
 80120fc:	f003 fd7e 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012100:	4643      	mov	r3, r8
 8012102:	4622      	mov	r2, r4
 8012104:	a949      	add	r1, sp, #292	; 0x124
 8012106:	f8cd 9000 	str.w	r9, [sp]
 801210a:	a839      	add	r0, sp, #228	; 0xe4
 801210c:	f003 fd76 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012110:	42af      	cmp	r7, r5
 8012112:	bfb5      	itete	lt
 8012114:	2300      	movlt	r3, #0
 8012116:	2301      	movge	r3, #1
 8012118:	930e      	strlt	r3, [sp, #56]	; 0x38
 801211a:	930e      	strge	r3, [sp, #56]	; 0x38
 801211c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801211e:	af12      	add	r7, sp, #72	; 0x48
 8012120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012124:	bfb9      	ittee	lt
 8012126:	ad29      	addlt	r5, sp, #164	; 0xa4
 8012128:	ac19      	addlt	r4, sp, #100	; 0x64
 801212a:	ad19      	addge	r5, sp, #100	; 0x64
 801212c:	ac29      	addge	r4, sp, #164	; 0xa4
 801212e:	e887 0003 	stmia.w	r7, {r0, r1}
 8012132:	b928      	cbnz	r0, 8012140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012134:	4b80      	ldr	r3, [pc, #512]	; (8012338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012136:	6818      	ldr	r0, [r3, #0]
 8012138:	6803      	ldr	r3, [r0, #0]
 801213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801213c:	4798      	blx	r3
 801213e:	6038      	str	r0, [r7, #0]
 8012140:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012142:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801214a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801214c:	930c      	str	r3, [sp, #48]	; 0x30
 801214e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012150:	6963      	ldr	r3, [r4, #20]
 8012152:	440b      	add	r3, r1
 8012154:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012158:	4408      	add	r0, r1
 801215a:	b200      	sxth	r0, r0
 801215c:	4283      	cmp	r3, r0
 801215e:	900d      	str	r0, [sp, #52]	; 0x34
 8012160:	f280 80dd 	bge.w	801231e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012164:	428b      	cmp	r3, r1
 8012166:	da08      	bge.n	801217a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012168:	2a00      	cmp	r2, #0
 801216a:	dd06      	ble.n	801217a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801216c:	1acb      	subs	r3, r1, r3
 801216e:	429a      	cmp	r2, r3
 8012170:	f2c0 80e4 	blt.w	801233c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012174:	2b00      	cmp	r3, #0
 8012176:	f300 80e2 	bgt.w	801233e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801217a:	6967      	ldr	r7, [r4, #20]
 801217c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801217e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012182:	443b      	add	r3, r7
 8012184:	461f      	mov	r7, r3
 8012186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012188:	1bdf      	subs	r7, r3, r7
 801218a:	4297      	cmp	r7, r2
 801218c:	bfa8      	it	ge
 801218e:	4617      	movge	r7, r2
 8012190:	2f00      	cmp	r7, #0
 8012192:	f340 8166 	ble.w	8012462 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012196:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012198:	6829      	ldr	r1, [r5, #0]
 801219a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801219e:	f9bb 3000 	ldrsh.w	r3, [fp]
 80121a2:	4411      	add	r1, r2
 80121a4:	4299      	cmp	r1, r3
 80121a6:	6820      	ldr	r0, [r4, #0]
 80121a8:	dd1a      	ble.n	80121e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80121aa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80121ae:	4402      	add	r2, r0
 80121b0:	440b      	add	r3, r1
 80121b2:	b21b      	sxth	r3, r3
 80121b4:	429a      	cmp	r2, r3
 80121b6:	dc13      	bgt.n	80121e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80121b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	a912      	add	r1, sp, #72	; 0x48
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	9206      	str	r2, [sp, #24]
 80121c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121c4:	9500      	str	r5, [sp, #0]
 80121c6:	9205      	str	r2, [sp, #20]
 80121c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80121d0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80121d2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80121d6:	aa49      	add	r2, sp, #292	; 0x124
 80121d8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80121dc:	4623      	mov	r3, r4
 80121de:	47c8      	blx	r9
 80121e0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80121e4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80121e8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80121ec:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80121f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121f4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80121f8:	ed94 6a08 	vldr	s12, [r4, #32]
 80121fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012200:	edd4 6a07 	vldr	s13, [r4, #28]
 8012204:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012208:	441a      	add	r2, r3
 801220a:	6963      	ldr	r3, [r4, #20]
 801220c:	68a1      	ldr	r1, [r4, #8]
 801220e:	3301      	adds	r3, #1
 8012210:	6163      	str	r3, [r4, #20]
 8012212:	69a3      	ldr	r3, [r4, #24]
 8012214:	6022      	str	r2, [r4, #0]
 8012216:	3b01      	subs	r3, #1
 8012218:	61a3      	str	r3, [r4, #24]
 801221a:	6923      	ldr	r3, [r4, #16]
 801221c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012220:	440b      	add	r3, r1
 8012222:	68e1      	ldr	r1, [r4, #12]
 8012224:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012228:	428b      	cmp	r3, r1
 801222a:	edc4 6a07 	vstr	s13, [r4, #28]
 801222e:	6123      	str	r3, [r4, #16]
 8012230:	db15      	blt.n	801225e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012232:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012236:	ee76 6a26 	vadd.f32	s13, s12, s13
 801223a:	edc4 6a07 	vstr	s13, [r4, #28]
 801223e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012242:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012246:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801224a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012252:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012256:	3201      	adds	r2, #1
 8012258:	1a5b      	subs	r3, r3, r1
 801225a:	6022      	str	r2, [r4, #0]
 801225c:	6123      	str	r3, [r4, #16]
 801225e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012262:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012266:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801226a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801226e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012272:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012276:	ed95 6a08 	vldr	s12, [r5, #32]
 801227a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801227e:	edd5 6a07 	vldr	s13, [r5, #28]
 8012282:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012286:	441a      	add	r2, r3
 8012288:	696b      	ldr	r3, [r5, #20]
 801228a:	68a9      	ldr	r1, [r5, #8]
 801228c:	3301      	adds	r3, #1
 801228e:	616b      	str	r3, [r5, #20]
 8012290:	69ab      	ldr	r3, [r5, #24]
 8012292:	602a      	str	r2, [r5, #0]
 8012294:	3b01      	subs	r3, #1
 8012296:	61ab      	str	r3, [r5, #24]
 8012298:	692b      	ldr	r3, [r5, #16]
 801229a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801229e:	440b      	add	r3, r1
 80122a0:	68e9      	ldr	r1, [r5, #12]
 80122a2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80122a6:	428b      	cmp	r3, r1
 80122a8:	edc5 6a07 	vstr	s13, [r5, #28]
 80122ac:	612b      	str	r3, [r5, #16]
 80122ae:	db15      	blt.n	80122dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80122b0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80122b4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80122b8:	edc5 6a07 	vstr	s13, [r5, #28]
 80122bc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80122c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80122c4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80122c8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80122cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122d0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80122d4:	3201      	adds	r2, #1
 80122d6:	1a5b      	subs	r3, r3, r1
 80122d8:	602a      	str	r2, [r5, #0]
 80122da:	612b      	str	r3, [r5, #16]
 80122dc:	3f01      	subs	r7, #1
 80122de:	e757      	b.n	8012190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80122e0:	4299      	cmp	r1, r3
 80122e2:	dc13      	bgt.n	801230c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80122e4:	429a      	cmp	r2, r3
 80122e6:	da14      	bge.n	8012312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80122e8:	2502      	movs	r5, #2
 80122ea:	2703      	movs	r7, #3
 80122ec:	46a9      	mov	r9, r5
 80122ee:	f04f 0800 	mov.w	r8, #0
 80122f2:	f04f 0a01 	mov.w	sl, #1
 80122f6:	e6ef      	b.n	80120d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80122f8:	2501      	movs	r5, #1
 80122fa:	2700      	movs	r7, #0
 80122fc:	46a9      	mov	r9, r5
 80122fe:	46b8      	mov	r8, r7
 8012300:	f04f 0a02 	mov.w	sl, #2
 8012304:	e6e8      	b.n	80120d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012306:	2501      	movs	r5, #1
 8012308:	2702      	movs	r7, #2
 801230a:	e6e1      	b.n	80120d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801230c:	2500      	movs	r5, #0
 801230e:	2701      	movs	r7, #1
 8012310:	e7f4      	b.n	80122fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012312:	2702      	movs	r7, #2
 8012314:	2503      	movs	r5, #3
 8012316:	f04f 0900 	mov.w	r9, #0
 801231a:	46b8      	mov	r8, r7
 801231c:	e7e9      	b.n	80122f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801231e:	4613      	mov	r3, r2
 8012320:	e728      	b.n	8012174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012322:	bf00      	nop
 8012324:	2001fd9c 	.word	0x2001fd9c
 8012328:	fffd8f01 	.word	0xfffd8f01
 801232c:	00027100 	.word	0x00027100
 8012330:	0004e1ff 	.word	0x0004e1ff
 8012334:	0004e1fe 	.word	0x0004e1fe
 8012338:	2001fda4 	.word	0x2001fda4
 801233c:	4613      	mov	r3, r2
 801233e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012342:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012346:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801234a:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801234e:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012352:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012356:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801235a:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801235e:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012362:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012366:	469e      	mov	lr, r3
 8012368:	469c      	mov	ip, r3
 801236a:	f04f 0900 	mov.w	r9, #0
 801236e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012370:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012372:	9111      	str	r1, [sp, #68]	; 0x44
 8012374:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012378:	f1bc 0f00 	cmp.w	ip, #0
 801237c:	d147      	bne.n	801240e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801237e:	eb03 0c07 	add.w	ip, r3, r7
 8012382:	1ad7      	subs	r7, r2, r3
 8012384:	f1b9 0f00 	cmp.w	r9, #0
 8012388:	d009      	beq.n	801239e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801238a:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801238e:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8012392:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8012396:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801239a:	9029      	str	r0, [sp, #164]	; 0xa4
 801239c:	912d      	str	r1, [sp, #180]	; 0xb4
 801239e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80123a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80123a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80123aa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80123ae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80123b2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80123b6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80123ba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80123be:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80123c2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80123c6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80123ca:	f04f 0800 	mov.w	r8, #0
 80123ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80123d0:	9111      	str	r1, [sp, #68]	; 0x44
 80123d2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80123d6:	f1be 0f00 	cmp.w	lr, #0
 80123da:	d031      	beq.n	8012440 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80123dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80123de:	4450      	add	r0, sl
 80123e0:	4431      	add	r1, r6
 80123e2:	4549      	cmp	r1, r9
 80123e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80123e8:	ee37 7a04 	vadd.f32	s14, s14, s8
 80123ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80123f0:	db08      	blt.n	8012404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80123f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80123f6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123fa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80123fe:	3001      	adds	r0, #1
 8012400:	eba1 0109 	sub.w	r1, r1, r9
 8012404:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012408:	f04f 0801 	mov.w	r8, #1
 801240c:	e7e3      	b.n	80123d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801240e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012410:	4450      	add	r0, sl
 8012412:	4431      	add	r1, r6
 8012414:	4541      	cmp	r1, r8
 8012416:	ee37 7a24 	vadd.f32	s14, s14, s9
 801241a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801241e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012422:	db08      	blt.n	8012436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012424:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012428:	ee37 7a25 	vadd.f32	s14, s14, s11
 801242c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012430:	3001      	adds	r0, #1
 8012432:	eba1 0108 	sub.w	r1, r1, r8
 8012436:	f10c 3cff 	add.w	ip, ip, #4294967295
 801243a:	f04f 0901 	mov.w	r9, #1
 801243e:	e79b      	b.n	8012378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012440:	449c      	add	ip, r3
 8012442:	1aff      	subs	r7, r7, r3
 8012444:	f1b8 0f00 	cmp.w	r8, #0
 8012448:	d009      	beq.n	801245e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801244a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801244e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012452:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012456:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801245a:	9019      	str	r0, [sp, #100]	; 0x64
 801245c:	911d      	str	r1, [sp, #116]	; 0x74
 801245e:	1ad2      	subs	r2, r2, r3
 8012460:	e68b      	b.n	801217a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012464:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 80d1 	beq.w	801260e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801246c:	ad19      	add	r5, sp, #100	; 0x64
 801246e:	ac39      	add	r4, sp, #228	; 0xe4
 8012470:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012472:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801247a:	930c      	str	r3, [sp, #48]	; 0x30
 801247c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801247e:	6963      	ldr	r3, [r4, #20]
 8012480:	440b      	add	r3, r1
 8012482:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012486:	4408      	add	r0, r1
 8012488:	b200      	sxth	r0, r0
 801248a:	4283      	cmp	r3, r0
 801248c:	900d      	str	r0, [sp, #52]	; 0x34
 801248e:	f280 80c1 	bge.w	8012614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012492:	428b      	cmp	r3, r1
 8012494:	da08      	bge.n	80124a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012496:	2a00      	cmp	r2, #0
 8012498:	dd06      	ble.n	80124a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801249a:	1acb      	subs	r3, r1, r3
 801249c:	429a      	cmp	r2, r3
 801249e:	f2c0 80bb 	blt.w	8012618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f300 80b9 	bgt.w	801261a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80124a8:	6967      	ldr	r7, [r4, #20]
 80124aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124ac:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80124b0:	443b      	add	r3, r7
 80124b2:	461f      	mov	r7, r3
 80124b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124b6:	1bdf      	subs	r7, r3, r7
 80124b8:	4297      	cmp	r7, r2
 80124ba:	bfa8      	it	ge
 80124bc:	4617      	movge	r7, r2
 80124be:	2f00      	cmp	r7, #0
 80124c0:	f340 813c 	ble.w	801273c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80124c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80124c6:	6829      	ldr	r1, [r5, #0]
 80124c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124cc:	f9bb 3000 	ldrsh.w	r3, [fp]
 80124d0:	4411      	add	r1, r2
 80124d2:	4299      	cmp	r1, r3
 80124d4:	6820      	ldr	r0, [r4, #0]
 80124d6:	dd1a      	ble.n	801250e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80124d8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80124dc:	4402      	add	r2, r0
 80124de:	440b      	add	r3, r1
 80124e0:	b21b      	sxth	r3, r3
 80124e2:	429a      	cmp	r2, r3
 80124e4:	dc13      	bgt.n	801250e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80124e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ea:	a912      	add	r1, sp, #72	; 0x48
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	9206      	str	r2, [sp, #24]
 80124f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124f2:	9500      	str	r5, [sp, #0]
 80124f4:	9205      	str	r2, [sp, #20]
 80124f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124fa:	e9cd b203 	strd	fp, r2, [sp, #12]
 80124fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012500:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012504:	aa49      	add	r2, sp, #292	; 0x124
 8012506:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801250a:	4623      	mov	r3, r4
 801250c:	47c8      	blx	r9
 801250e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012512:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012516:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801251a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801251e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012522:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012526:	ed94 6a08 	vldr	s12, [r4, #32]
 801252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801252e:	edd4 6a07 	vldr	s13, [r4, #28]
 8012532:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012536:	441a      	add	r2, r3
 8012538:	6963      	ldr	r3, [r4, #20]
 801253a:	68a1      	ldr	r1, [r4, #8]
 801253c:	3301      	adds	r3, #1
 801253e:	6163      	str	r3, [r4, #20]
 8012540:	69a3      	ldr	r3, [r4, #24]
 8012542:	6022      	str	r2, [r4, #0]
 8012544:	3b01      	subs	r3, #1
 8012546:	61a3      	str	r3, [r4, #24]
 8012548:	6923      	ldr	r3, [r4, #16]
 801254a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801254e:	440b      	add	r3, r1
 8012550:	68e1      	ldr	r1, [r4, #12]
 8012552:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012556:	428b      	cmp	r3, r1
 8012558:	edc4 6a07 	vstr	s13, [r4, #28]
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	db15      	blt.n	801258c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012560:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012564:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012568:	edc4 6a07 	vstr	s13, [r4, #28]
 801256c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012570:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012574:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012578:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012580:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012584:	3201      	adds	r2, #1
 8012586:	1a5b      	subs	r3, r3, r1
 8012588:	6022      	str	r2, [r4, #0]
 801258a:	6123      	str	r3, [r4, #16]
 801258c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012594:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012598:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801259c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125a0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80125a4:	ed95 6a08 	vldr	s12, [r5, #32]
 80125a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125ac:	edd5 6a07 	vldr	s13, [r5, #28]
 80125b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80125b4:	441a      	add	r2, r3
 80125b6:	696b      	ldr	r3, [r5, #20]
 80125b8:	68a9      	ldr	r1, [r5, #8]
 80125ba:	3301      	adds	r3, #1
 80125bc:	616b      	str	r3, [r5, #20]
 80125be:	69ab      	ldr	r3, [r5, #24]
 80125c0:	602a      	str	r2, [r5, #0]
 80125c2:	3b01      	subs	r3, #1
 80125c4:	61ab      	str	r3, [r5, #24]
 80125c6:	692b      	ldr	r3, [r5, #16]
 80125c8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80125cc:	440b      	add	r3, r1
 80125ce:	68e9      	ldr	r1, [r5, #12]
 80125d0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80125d4:	428b      	cmp	r3, r1
 80125d6:	edc5 6a07 	vstr	s13, [r5, #28]
 80125da:	612b      	str	r3, [r5, #16]
 80125dc:	db15      	blt.n	801260a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80125de:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80125e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80125e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80125ea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80125ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 80125f2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80125f6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80125fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125fe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012602:	3201      	adds	r2, #1
 8012604:	1a5b      	subs	r3, r3, r1
 8012606:	602a      	str	r2, [r5, #0]
 8012608:	612b      	str	r3, [r5, #16]
 801260a:	3f01      	subs	r7, #1
 801260c:	e757      	b.n	80124be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801260e:	ad39      	add	r5, sp, #228	; 0xe4
 8012610:	ac19      	add	r4, sp, #100	; 0x64
 8012612:	e72d      	b.n	8012470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012614:	4613      	mov	r3, r2
 8012616:	e744      	b.n	80124a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012618:	4613      	mov	r3, r2
 801261a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801261e:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012622:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8012626:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801262a:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801262e:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012632:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8012636:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801263a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801263e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8012642:	469e      	mov	lr, r3
 8012644:	461f      	mov	r7, r3
 8012646:	f04f 0900 	mov.w	r9, #0
 801264a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801264c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8012650:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8012652:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8012656:	960e      	str	r6, [sp, #56]	; 0x38
 8012658:	2f00      	cmp	r7, #0
 801265a:	d146      	bne.n	80126ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801265c:	449c      	add	ip, r3
 801265e:	1ad7      	subs	r7, r2, r3
 8012660:	f1b9 0f00 	cmp.w	r9, #0
 8012664:	d009      	beq.n	801267a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012666:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801266a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801266e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8012672:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8012676:	9039      	str	r0, [sp, #228]	; 0xe4
 8012678:	913d      	str	r1, [sp, #244]	; 0xf4
 801267a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801267e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012682:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012686:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801268a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801268e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012692:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012696:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801269a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801269e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80126a2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80126a6:	f04f 0800 	mov.w	r8, #0
 80126aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80126ac:	910e      	str	r1, [sp, #56]	; 0x38
 80126ae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80126b2:	f1be 0f00 	cmp.w	lr, #0
 80126b6:	d030      	beq.n	801271a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80126b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80126ba:	4450      	add	r0, sl
 80126bc:	4431      	add	r1, r6
 80126be:	4549      	cmp	r1, r9
 80126c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80126c4:	ee37 7a04 	vadd.f32	s14, s14, s8
 80126c8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80126cc:	db08      	blt.n	80126e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80126ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 80126d2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80126d6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80126da:	3001      	adds	r0, #1
 80126dc:	eba1 0109 	sub.w	r1, r1, r9
 80126e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80126e4:	f04f 0801 	mov.w	r8, #1
 80126e8:	e7e3      	b.n	80126b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80126ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80126ec:	4450      	add	r0, sl
 80126ee:	4431      	add	r1, r6
 80126f0:	4541      	cmp	r1, r8
 80126f2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80126f6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80126fa:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80126fe:	db08      	blt.n	8012712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012700:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012704:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012708:	ee77 7a86 	vadd.f32	s15, s15, s12
 801270c:	3001      	adds	r0, #1
 801270e:	eba1 0108 	sub.w	r1, r1, r8
 8012712:	3f01      	subs	r7, #1
 8012714:	f04f 0901 	mov.w	r9, #1
 8012718:	e79e      	b.n	8012658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801271a:	449c      	add	ip, r3
 801271c:	1aff      	subs	r7, r7, r3
 801271e:	f1b8 0f00 	cmp.w	r8, #0
 8012722:	d009      	beq.n	8012738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8012724:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012728:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801272c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012730:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012734:	9019      	str	r0, [sp, #100]	; 0x64
 8012736:	911d      	str	r1, [sp, #116]	; 0x74
 8012738:	1ad2      	subs	r2, r2, r3
 801273a:	e6b5      	b.n	80124a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801273c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	b923      	cbnz	r3, 801274c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012742:	4b04      	ldr	r3, [pc, #16]	; (8012754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8012744:	6818      	ldr	r0, [r3, #0]
 8012746:	6803      	ldr	r3, [r0, #0]
 8012748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801274a:	4798      	blx	r3
 801274c:	b05b      	add	sp, #364	; 0x16c
 801274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012752:	bf00      	nop
 8012754:	2001fda4 	.word	0x2001fda4

08012758 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8012758:	b570      	push	{r4, r5, r6, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	2500      	movs	r5, #0
 801275e:	9805      	ldr	r0, [sp, #20]
 8012760:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8012764:	6061      	str	r1, [r4, #4]
 8012766:	8263      	strh	r3, [r4, #18]
 8012768:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801276c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012770:	8025      	strh	r5, [r4, #0]
 8012772:	7221      	strb	r1, [r4, #8]
 8012774:	7266      	strb	r6, [r4, #9]
 8012776:	60e0      	str	r0, [r4, #12]
 8012778:	8222      	strh	r2, [r4, #16]
 801277a:	82a3      	strh	r3, [r4, #20]
 801277c:	82e5      	strh	r5, [r4, #22]
 801277e:	8325      	strh	r5, [r4, #24]
 8012780:	8365      	strh	r5, [r4, #26]
 8012782:	83a5      	strh	r5, [r4, #28]
 8012784:	83e5      	strh	r5, [r4, #30]
 8012786:	8425      	strh	r5, [r4, #32]
 8012788:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801278c:	b32e      	cbz	r6, 80127da <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801278e:	6803      	ldr	r3, [r0, #0]
 8012790:	695b      	ldr	r3, [r3, #20]
 8012792:	4798      	blx	r3
 8012794:	4606      	mov	r6, r0
 8012796:	b300      	cbz	r0, 80127da <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012798:	68e0      	ldr	r0, [r4, #12]
 801279a:	4631      	mov	r1, r6
 801279c:	6803      	ldr	r3, [r0, #0]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	4798      	blx	r3
 80127a2:	4605      	mov	r5, r0
 80127a4:	b1c8      	cbz	r0, 80127da <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80127a6:	7b43      	ldrb	r3, [r0, #13]
 80127a8:	7a82      	ldrb	r2, [r0, #10]
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127b0:	4313      	orrs	r3, r2
 80127b2:	8423      	strh	r3, [r4, #32]
 80127b4:	7a63      	ldrb	r3, [r4, #9]
 80127b6:	2b06      	cmp	r3, #6
 80127b8:	d10f      	bne.n	80127da <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80127ba:	68e0      	ldr	r0, [r4, #12]
 80127bc:	462a      	mov	r2, r5
 80127be:	6803      	ldr	r3, [r0, #0]
 80127c0:	4631      	mov	r1, r6
 80127c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127c4:	4798      	blx	r3
 80127c6:	7b6b      	ldrb	r3, [r5, #13]
 80127c8:	005b      	lsls	r3, r3, #1
 80127ca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80127ce:	7aab      	ldrb	r3, [r5, #10]
 80127d0:	4313      	orrs	r3, r2
 80127d2:	4418      	add	r0, r3
 80127d4:	8c23      	ldrh	r3, [r4, #32]
 80127d6:	4418      	add	r0, r3
 80127d8:	8420      	strh	r0, [r4, #32]
 80127da:	4620      	mov	r0, r4
 80127dc:	bd70      	pop	{r4, r5, r6, pc}

080127de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80127de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e2:	2400      	movs	r4, #0
 80127e4:	4681      	mov	r9, r0
 80127e6:	4688      	mov	r8, r1
 80127e8:	4692      	mov	sl, r2
 80127ea:	469b      	mov	fp, r3
 80127ec:	4627      	mov	r7, r4
 80127ee:	4625      	mov	r5, r4
 80127f0:	4626      	mov	r6, r4
 80127f2:	b085      	sub	sp, #20
 80127f4:	4554      	cmp	r4, sl
 80127f6:	da2a      	bge.n	801284e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80127f8:	2300      	movs	r3, #0
 80127fa:	9303      	str	r3, [sp, #12]
 80127fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012800:	429d      	cmp	r5, r3
 8012802:	d004      	beq.n	801280e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8012804:	f242 030b 	movw	r3, #8203	; 0x200b
 8012808:	429d      	cmp	r5, r3
 801280a:	bf18      	it	ne
 801280c:	462f      	movne	r7, r5
 801280e:	ab03      	add	r3, sp, #12
 8012810:	4642      	mov	r2, r8
 8012812:	4659      	mov	r1, fp
 8012814:	4648      	mov	r0, r9
 8012816:	f002 fed5 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801281a:	4605      	mov	r5, r0
 801281c:	b1b8      	cbz	r0, 801284e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801281e:	280a      	cmp	r0, #10
 8012820:	d015      	beq.n	801284e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012822:	9a03      	ldr	r2, [sp, #12]
 8012824:	b18a      	cbz	r2, 801284a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8012826:	7b50      	ldrb	r0, [r2, #13]
 8012828:	7a93      	ldrb	r3, [r2, #10]
 801282a:	0040      	lsls	r0, r0, #1
 801282c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012830:	4303      	orrs	r3, r0
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	f8d8 3000 	ldr.w	r3, [r8]
 8012838:	4639      	mov	r1, r7
 801283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801283c:	4640      	mov	r0, r8
 801283e:	8895      	ldrh	r5, [r2, #4]
 8012840:	4798      	blx	r3
 8012842:	9b01      	ldr	r3, [sp, #4]
 8012844:	4418      	add	r0, r3
 8012846:	4406      	add	r6, r0
 8012848:	b2b6      	uxth	r6, r6
 801284a:	3401      	adds	r4, #1
 801284c:	e7d2      	b.n	80127f4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801284e:	4630      	mov	r0, r6
 8012850:	b005      	add	sp, #20
 8012852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8012856:	2a02      	cmp	r2, #2
 8012858:	b530      	push	{r4, r5, lr}
 801285a:	d011      	beq.n	8012880 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801285c:	2a03      	cmp	r2, #3
 801285e:	d01c      	beq.n	801289a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8012860:	2a01      	cmp	r2, #1
 8012862:	d10c      	bne.n	801287e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012864:	888b      	ldrh	r3, [r1, #4]
 8012866:	8801      	ldrh	r1, [r0, #0]
 8012868:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801286c:	1a5b      	subs	r3, r3, r1
 801286e:	8844      	ldrh	r4, [r0, #2]
 8012870:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	8004      	strh	r4, [r0, #0]
 8012878:	8043      	strh	r3, [r0, #2]
 801287a:	8081      	strh	r1, [r0, #4]
 801287c:	80c2      	strh	r2, [r0, #6]
 801287e:	bd30      	pop	{r4, r5, pc}
 8012880:	88cb      	ldrh	r3, [r1, #6]
 8012882:	8842      	ldrh	r2, [r0, #2]
 8012884:	1a9b      	subs	r3, r3, r2
 8012886:	88c2      	ldrh	r2, [r0, #6]
 8012888:	1a9b      	subs	r3, r3, r2
 801288a:	888a      	ldrh	r2, [r1, #4]
 801288c:	8801      	ldrh	r1, [r0, #0]
 801288e:	8043      	strh	r3, [r0, #2]
 8012890:	1a52      	subs	r2, r2, r1
 8012892:	8881      	ldrh	r1, [r0, #4]
 8012894:	1a52      	subs	r2, r2, r1
 8012896:	8002      	strh	r2, [r0, #0]
 8012898:	e7f1      	b.n	801287e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801289a:	88cb      	ldrh	r3, [r1, #6]
 801289c:	8841      	ldrh	r1, [r0, #2]
 801289e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80128a2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80128a6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80128aa:	1a5b      	subs	r3, r3, r1
 80128ac:	1a9b      	subs	r3, r3, r2
 80128ae:	8003      	strh	r3, [r0, #0]
 80128b0:	8045      	strh	r5, [r0, #2]
 80128b2:	8082      	strh	r2, [r0, #4]
 80128b4:	80c4      	strh	r4, [r0, #6]
 80128b6:	e7e2      	b.n	801287e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080128b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80128b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128bc:	b09f      	sub	sp, #124	; 0x7c
 80128be:	9116      	str	r1, [sp, #88]	; 0x58
 80128c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80128c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80128c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80128c6:	8809      	ldrh	r1, [r1, #0]
 80128c8:	889b      	ldrh	r3, [r3, #4]
 80128ca:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80128ce:	440b      	add	r3, r1
 80128d0:	b21b      	sxth	r3, r3
 80128d2:	9310      	str	r3, [sp, #64]	; 0x40
 80128d4:	f8d8 3000 	ldr.w	r3, [r8]
 80128d8:	9212      	str	r2, [sp, #72]	; 0x48
 80128da:	7b19      	ldrb	r1, [r3, #12]
 80128dc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80128e0:	7adb      	ldrb	r3, [r3, #11]
 80128e2:	9011      	str	r0, [sp, #68]	; 0x44
 80128e4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80128e8:	9114      	str	r1, [sp, #80]	; 0x50
 80128ea:	9315      	str	r3, [sp, #84]	; 0x54
 80128ec:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	d06a      	beq.n	80129ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80128f4:	f898 3010 	ldrb.w	r3, [r8, #16]
 80128f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80128fa:	2b06      	cmp	r3, #6
 80128fc:	bf14      	ite	ne
 80128fe:	2301      	movne	r3, #1
 8012900:	2302      	moveq	r3, #2
 8012902:	4413      	add	r3, r2
 8012904:	f04f 0900 	mov.w	r9, #0
 8012908:	464c      	mov	r4, r9
 801290a:	930f      	str	r3, [sp, #60]	; 0x3c
 801290c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012910:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8012914:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8012918:	4293      	cmp	r3, r2
 801291a:	f280 808f 	bge.w	8012a3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801291e:	2300      	movs	r3, #0
 8012920:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8012924:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012928:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801292c:	429c      	cmp	r4, r3
 801292e:	d006      	beq.n	801293e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8012930:	f242 020b 	movw	r2, #8203	; 0x200b
 8012934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012936:	4294      	cmp	r4, r2
 8012938:	bf18      	it	ne
 801293a:	4623      	movne	r3, r4
 801293c:	930d      	str	r3, [sp, #52]	; 0x34
 801293e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012940:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8012942:	f8d8 2000 	ldr.w	r2, [r8]
 8012946:	428b      	cmp	r3, r1
 8012948:	db41      	blt.n	80129ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801294a:	6813      	ldr	r3, [r2, #0]
 801294c:	4610      	mov	r0, r2
 801294e:	695b      	ldr	r3, [r3, #20]
 8012950:	4798      	blx	r3
 8012952:	4604      	mov	r4, r0
 8012954:	f8d8 0000 	ldr.w	r0, [r8]
 8012958:	aa1d      	add	r2, sp, #116	; 0x74
 801295a:	6803      	ldr	r3, [r0, #0]
 801295c:	4621      	mov	r1, r4
 801295e:	689d      	ldr	r5, [r3, #8]
 8012960:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012964:	47a8      	blx	r5
 8012966:	901c      	str	r0, [sp, #112]	; 0x70
 8012968:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801296c:	429c      	cmp	r4, r3
 801296e:	f000 80eb 	beq.w	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012972:	f242 030b 	movw	r3, #8203	; 0x200b
 8012976:	429c      	cmp	r4, r3
 8012978:	f000 80e6 	beq.w	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801297c:	2c00      	cmp	r4, #0
 801297e:	f000 80f8 	beq.w	8012b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8012982:	2c0a      	cmp	r4, #10
 8012984:	d060      	beq.n	8012a48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8012986:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012988:	b36a      	cbz	r2, 80129e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801298a:	8894      	ldrh	r4, [r2, #4]
 801298c:	f1bb 0f00 	cmp.w	fp, #0
 8012990:	d03b      	beq.n	8012a0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8012992:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012996:	f1bb 0f01 	cmp.w	fp, #1
 801299a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801299e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80129a2:	f892 900a 	ldrb.w	r9, [r2, #10]
 80129a6:	ea49 0903 	orr.w	r9, r9, r3
 80129aa:	d134      	bne.n	8012a16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80129ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129ae:	eba6 0609 	sub.w	r6, r6, r9
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d14f      	bne.n	8012a56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80129b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80129b8:	eb09 0306 	add.w	r3, r9, r6
 80129bc:	4413      	add	r3, r2
 80129be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80129c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80129c4:	4293      	cmp	r3, r2
 80129c6:	da51      	bge.n	8012a6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80129c8:	e038      	b.n	8012a3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80129ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80129cc:	e79a      	b.n	8012904 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80129ce:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	ab1d      	add	r3, sp, #116	; 0x74
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	4659      	mov	r1, fp
 80129da:	ab1c      	add	r3, sp, #112	; 0x70
 80129dc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80129de:	f002 fe3a 	bl	8015656 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80129e2:	4604      	mov	r4, r0
 80129e4:	e7c0      	b.n	8012968 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80129e6:	f8d8 0000 	ldr.w	r0, [r8]
 80129ea:	6803      	ldr	r3, [r0, #0]
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	4798      	blx	r3
 80129f0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80129f4:	4298      	cmp	r0, r3
 80129f6:	f000 80a7 	beq.w	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80129fa:	f242 030b 	movw	r3, #8203	; 0x200b
 80129fe:	4298      	cmp	r0, r3
 8012a00:	f000 80a2 	beq.w	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012a04:	f1bb 0f00 	cmp.w	fp, #0
 8012a08:	d100      	bne.n	8012a0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8012a0a:	444e      	add	r6, r9
 8012a0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	d1bf      	bne.n	8012992 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8012a12:	4691      	mov	r9, r2
 8012a14:	e098      	b.n	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 80ac 	beq.w	8012b76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 8012a1e:	f1bb 0f00 	cmp.w	fp, #0
 8012a22:	d118      	bne.n	8012a56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8012a24:	f8d8 0000 	ldr.w	r0, [r8]
 8012a28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a2a:	6803      	ldr	r3, [r0, #0]
 8012a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a2e:	4798      	blx	r3
 8012a30:	4406      	add	r6, r0
 8012a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a36:	1af3      	subs	r3, r6, r3
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	dd17      	ble.n	8012a6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8012a3c:	2c00      	cmp	r4, #0
 8012a3e:	f000 8098 	beq.w	8012b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8012a42:	2c0a      	cmp	r4, #10
 8012a44:	f040 8086 	bne.w	8012b54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8012a48:	240a      	movs	r4, #10
 8012a4a:	fab4 f084 	clz	r0, r4
 8012a4e:	0940      	lsrs	r0, r0, #5
 8012a50:	b01f      	add	sp, #124	; 0x7c
 8012a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a56:	f8d8 0000 	ldr.w	r0, [r8]
 8012a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a5c:	6803      	ldr	r3, [r0, #0]
 8012a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a60:	4798      	blx	r3
 8012a62:	f1bb 0f01 	cmp.w	fp, #1
 8012a66:	eba6 0600 	sub.w	r6, r6, r0
 8012a6a:	d0a4      	beq.n	80129b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8012a6c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012a6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012a70:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8012a74:	f9b3 7000 	ldrsh.w	r7, [r3]
 8012a78:	7b43      	ldrb	r3, [r0, #13]
 8012a7a:	4431      	add	r1, r6
 8012a7c:	015b      	lsls	r3, r3, #5
 8012a7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012a82:	7983      	ldrb	r3, [r0, #6]
 8012a84:	4313      	orrs	r3, r2
 8012a86:	440b      	add	r3, r1
 8012a88:	42bb      	cmp	r3, r7
 8012a8a:	db5d      	blt.n	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a8e:	4299      	cmp	r1, r3
 8012a90:	da5a      	bge.n	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012a92:	f8d8 0000 	ldr.w	r0, [r8]
 8012a96:	42b7      	cmp	r7, r6
 8012a98:	6803      	ldr	r3, [r0, #0]
 8012a9a:	bfc8      	it	gt
 8012a9c:	1bbf      	subgt	r7, r7, r6
 8012a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa0:	bfcc      	ite	gt
 8012aa2:	b2bf      	uxthgt	r7, r7
 8012aa4:	2700      	movle	r7, #0
 8012aa6:	4798      	blx	r3
 8012aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012aaa:	7b5a      	ldrb	r2, [r3, #13]
 8012aac:	00d1      	lsls	r1, r2, #3
 8012aae:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8012ab2:	7a19      	ldrb	r1, [r3, #8]
 8012ab4:	4329      	orrs	r1, r5
 8012ab6:	0655      	lsls	r5, r2, #25
 8012ab8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012aba:	bf44      	itt	mi
 8012abc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8012ac0:	b209      	sxthmi	r1, r1
 8012ac2:	1945      	adds	r5, r0, r5
 8012ac4:	1a6d      	subs	r5, r5, r1
 8012ac6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012ac8:	b2ad      	uxth	r5, r5
 8012aca:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012ace:	fa0f fa85 	sxth.w	sl, r5
 8012ad2:	4551      	cmp	r1, sl
 8012ad4:	dd3c      	ble.n	8012b50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8012ad6:	0112      	lsls	r2, r2, #4
 8012ad8:	79d8      	ldrb	r0, [r3, #7]
 8012ada:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012ade:	4302      	orrs	r2, r0
 8012ae0:	4492      	add	sl, r2
 8012ae2:	4551      	cmp	r1, sl
 8012ae4:	dc30      	bgt.n	8012b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8012ae6:	468a      	mov	sl, r1
 8012ae8:	1b4d      	subs	r5, r1, r5
 8012aea:	b22d      	sxth	r5, r5
 8012aec:	9319      	str	r3, [sp, #100]	; 0x64
 8012aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012af0:	f8d8 0000 	ldr.w	r0, [r8]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	6801      	ldr	r1, [r0, #0]
 8012af8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012afa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8012afe:	9218      	str	r2, [sp, #96]	; 0x60
 8012b00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012b02:	4788      	blx	r1
 8012b04:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012b08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8012b0c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8012b10:	b2ad      	uxth	r5, r5
 8012b12:	910a      	str	r1, [sp, #40]	; 0x28
 8012b14:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8012b18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b1a:	9109      	str	r1, [sp, #36]	; 0x24
 8012b1c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012b20:	9305      	str	r3, [sp, #20]
 8012b22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012b24:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8012b28:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8012b2c:	4437      	add	r7, r6
 8012b2e:	9304      	str	r3, [sp, #16]
 8012b30:	b23f      	sxth	r7, r7
 8012b32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b34:	9206      	str	r2, [sp, #24]
 8012b36:	f8cd a004 	str.w	sl, [sp, #4]
 8012b3a:	9700      	str	r7, [sp, #0]
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012b44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012b46:	47a8      	blx	r5
 8012b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8012b4e:	e6e1      	b.n	8012914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8012b50:	2500      	movs	r5, #0
 8012b52:	e7cb      	b.n	8012aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8012b54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012b56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012b58:	3501      	adds	r5, #1
 8012b5a:	429d      	cmp	r5, r3
 8012b5c:	f6bf af75 	bge.w	8012a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8012b60:	4659      	mov	r1, fp
 8012b62:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012b64:	f7fb fe28 	bl	800e7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012b68:	4604      	mov	r4, r0
 8012b6a:	b110      	cbz	r0, 8012b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8012b6c:	280a      	cmp	r0, #10
 8012b6e:	d1f2      	bne.n	8012b56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8012b70:	e76a      	b.n	8012a48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8012b72:	2400      	movs	r4, #0
 8012b74:	e769      	b.n	8012a4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8012b76:	f1bb 0f00 	cmp.w	fp, #0
 8012b7a:	f43f af5a 	beq.w	8012a32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8012b7e:	e775      	b.n	8012a6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012b80:	b530      	push	{r4, r5, lr}
 8012b82:	8ac4      	ldrh	r4, [r0, #22]
 8012b84:	8b45      	ldrh	r5, [r0, #26]
 8012b86:	8343      	strh	r3, [r0, #26]
 8012b88:	442c      	add	r4, r5
 8012b8a:	1ae4      	subs	r4, r4, r3
 8012b8c:	82c4      	strh	r4, [r0, #22]
 8012b8e:	8b83      	ldrh	r3, [r0, #28]
 8012b90:	8b04      	ldrh	r4, [r0, #24]
 8012b92:	4422      	add	r2, r4
 8012b94:	440c      	add	r4, r1
 8012b96:	1a59      	subs	r1, r3, r1
 8012b98:	83c2      	strh	r2, [r0, #30]
 8012b9a:	8304      	strh	r4, [r0, #24]
 8012b9c:	8381      	strh	r1, [r0, #28]
 8012b9e:	bd30      	pop	{r4, r5, pc}

08012ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8012ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	8a47      	ldrh	r7, [r0, #18]
 8012ba8:	68c0      	ldr	r0, [r0, #12]
 8012baa:	b085      	sub	sp, #20
 8012bac:	6803      	ldr	r3, [r0, #0]
 8012bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bb0:	4798      	blx	r3
 8012bb2:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8012bb6:	7a63      	ldrb	r3, [r4, #9]
 8012bb8:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8012bbc:	42b7      	cmp	r7, r6
 8012bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8012bc2:	bfac      	ite	ge
 8012bc4:	f04f 0900 	movge.w	r9, #0
 8012bc8:	f04f 0901 	movlt.w	r9, #1
 8012bcc:	2b05      	cmp	r3, #5
 8012bce:	d804      	bhi.n	8012bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8012bd0:	e8df f003 	tbb	[pc, r3]
 8012bd4:	460e0852 	.word	0x460e0852
 8012bd8:	4b4b      	.short	0x4b4b
 8012bda:	2500      	movs	r5, #0
 8012bdc:	46a9      	mov	r9, r5
 8012bde:	462e      	mov	r6, r5
 8012be0:	462f      	mov	r7, r5
 8012be2:	e00d      	b.n	8012c00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012be4:	42b7      	cmp	r7, r6
 8012be6:	bfb4      	ite	lt
 8012be8:	2600      	movlt	r6, #0
 8012bea:	2601      	movge	r6, #1
 8012bec:	2500      	movs	r5, #0
 8012bee:	e7f7      	b.n	8012be0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8012bf0:	464d      	mov	r5, r9
 8012bf2:	f04f 0900 	mov.w	r9, #0
 8012bf6:	42b7      	cmp	r7, r6
 8012bf8:	bfb4      	ite	lt
 8012bfa:	2600      	movlt	r6, #0
 8012bfc:	2601      	movge	r6, #1
 8012bfe:	464f      	mov	r7, r9
 8012c00:	f04f 0800 	mov.w	r8, #0
 8012c04:	f8a4 8016 	strh.w	r8, [r4, #22]
 8012c08:	f8a4 8018 	strh.w	r8, [r4, #24]
 8012c0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012c10:	2300      	movs	r3, #0
 8012c12:	9303      	str	r3, [sp, #12]
 8012c14:	8823      	ldrh	r3, [r4, #0]
 8012c16:	2b20      	cmp	r3, #32
 8012c18:	d032      	beq.n	8012c80 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe0>
 8012c1a:	f242 010b 	movw	r1, #8203	; 0x200b
 8012c1e:	1a5a      	subs	r2, r3, r1
 8012c20:	f1d2 0a00 	rsbs	sl, r2, #0
 8012c24:	eb4a 0a02 	adc.w	sl, sl, r2
 8012c28:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d008      	beq.n	8012c42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012c30:	428b      	cmp	r3, r1
 8012c32:	9a01      	ldr	r2, [sp, #4]
 8012c34:	bf16      	itet	ne
 8012c36:	461a      	movne	r2, r3
 8012c38:	f04f 0a01 	moveq.w	sl, #1
 8012c3c:	f04f 0a00 	movne.w	sl, #0
 8012c40:	9201      	str	r2, [sp, #4]
 8012c42:	ab03      	add	r3, sp, #12
 8012c44:	68e2      	ldr	r2, [r4, #12]
 8012c46:	7a21      	ldrb	r1, [r4, #8]
 8012c48:	6860      	ldr	r0, [r4, #4]
 8012c4a:	f002 fcbb 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c4e:	8020      	strh	r0, [r4, #0]
 8012c50:	b9d0      	cbnz	r0, 8012c88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe8>
 8012c52:	2300      	movs	r3, #0
 8012c54:	8ba2      	ldrh	r2, [r4, #28]
 8012c56:	4611      	mov	r1, r2
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7ff ff91 	bl	8012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012c5e:	e06d      	b.n	8012d3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 8012c60:	2500      	movs	r5, #0
 8012c62:	2701      	movs	r7, #1
 8012c64:	46a9      	mov	r9, r5
 8012c66:	462e      	mov	r6, r5
 8012c68:	e7ca      	b.n	8012c00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012c6a:	2500      	movs	r5, #0
 8012c6c:	42b7      	cmp	r7, r6
 8012c6e:	bfb4      	ite	lt
 8012c70:	2700      	movlt	r7, #0
 8012c72:	2701      	movge	r7, #1
 8012c74:	462e      	mov	r6, r5
 8012c76:	e7c3      	b.n	8012c00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012c78:	2500      	movs	r5, #0
 8012c7a:	2601      	movs	r6, #1
 8012c7c:	46a9      	mov	r9, r5
 8012c7e:	e7af      	b.n	8012be0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8012c80:	9301      	str	r3, [sp, #4]
 8012c82:	f04f 0a01 	mov.w	sl, #1
 8012c86:	e7dc      	b.n	8012c42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012c88:	8b63      	ldrh	r3, [r4, #26]
 8012c8a:	280a      	cmp	r0, #10
 8012c8c:	f103 0301 	add.w	r3, r3, #1
 8012c90:	8363      	strh	r3, [r4, #26]
 8012c92:	d0de      	beq.n	8012c52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8012c94:	9a03      	ldr	r2, [sp, #12]
 8012c96:	bb62      	cbnz	r2, 8012cf2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x152>
 8012c98:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012c9c:	4298      	cmp	r0, r3
 8012c9e:	d003      	beq.n	8012ca8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8012ca0:	f242 030b 	movw	r3, #8203	; 0x200b
 8012ca4:	4298      	cmp	r0, r3
 8012ca6:	d1b3      	bne.n	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012ca8:	8823      	ldrh	r3, [r4, #0]
 8012caa:	8ba1      	ldrh	r1, [r4, #28]
 8012cac:	2b20      	cmp	r3, #32
 8012cae:	d003      	beq.n	8012cb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x118>
 8012cb0:	f242 000b 	movw	r0, #8203	; 0x200b
 8012cb4:	4283      	cmp	r3, r0
 8012cb6:	d131      	bne.n	8012d1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17c>
 8012cb8:	f1ba 0f00 	cmp.w	sl, #0
 8012cbc:	bf0a      	itet	eq
 8012cbe:	4688      	moveq	r8, r1
 8012cc0:	4650      	movne	r0, sl
 8012cc2:	2001      	moveq	r0, #1
 8012cc4:	440a      	add	r2, r1
 8012cc6:	8b23      	ldrh	r3, [r4, #24]
 8012cc8:	b292      	uxth	r2, r2
 8012cca:	83a2      	strh	r2, [r4, #28]
 8012ccc:	4413      	add	r3, r2
 8012cce:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012cd2:	f1b9 0f00 	cmp.w	r9, #0
 8012cd6:	d102      	bne.n	8012cde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x13e>
 8012cd8:	2d00      	cmp	r5, #0
 8012cda:	d042      	beq.n	8012d62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c2>
 8012cdc:	b300      	cbz	r0, 8012d20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8012cde:	8c21      	ldrh	r1, [r4, #32]
 8012ce0:	4419      	add	r1, r3
 8012ce2:	458c      	cmp	ip, r1
 8012ce4:	da37      	bge.n	8012d56 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 8012ce6:	8ae1      	ldrh	r1, [r4, #22]
 8012ce8:	2900      	cmp	r1, #0
 8012cea:	d034      	beq.n	8012d56 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 8012cec:	4563      	cmp	r3, ip
 8012cee:	dd8f      	ble.n	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012cf0:	e01d      	b.n	8012d2e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x18e>
 8012cf2:	8893      	ldrh	r3, [r2, #4]
 8012cf4:	9901      	ldr	r1, [sp, #4]
 8012cf6:	8023      	strh	r3, [r4, #0]
 8012cf8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8012cfc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012d00:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8012d04:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8012d08:	ea4b 0b00 	orr.w	fp, fp, r0
 8012d0c:	68e0      	ldr	r0, [r4, #12]
 8012d0e:	6803      	ldr	r3, [r0, #0]
 8012d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d12:	4798      	blx	r3
 8012d14:	eb0b 0200 	add.w	r2, fp, r0
 8012d18:	b292      	uxth	r2, r2
 8012d1a:	e7c5      	b.n	8012ca8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8012d1c:	2000      	movs	r0, #0
 8012d1e:	e7d1      	b.n	8012cc4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x124>
 8012d20:	4563      	cmp	r3, ip
 8012d22:	f77f af75 	ble.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d26:	8ae3      	ldrh	r3, [r4, #22]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	f43f af71 	beq.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	8c22      	ldrh	r2, [r4, #32]
 8012d32:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8012d36:	8be3      	ldrh	r3, [r4, #30]
 8012d38:	4413      	add	r3, r2
 8012d3a:	83e3      	strh	r3, [r4, #30]
 8012d3c:	68e0      	ldr	r0, [r4, #12]
 8012d3e:	6803      	ldr	r3, [r0, #0]
 8012d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d42:	4798      	blx	r3
 8012d44:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8012d48:	4418      	add	r0, r3
 8012d4a:	8a63      	ldrh	r3, [r4, #18]
 8012d4c:	1a18      	subs	r0, r3, r0
 8012d4e:	8260      	strh	r0, [r4, #18]
 8012d50:	b005      	add	sp, #20
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	2300      	movs	r3, #0
 8012d58:	4611      	mov	r1, r2
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f7ff ff10 	bl	8012b80 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012d60:	e756      	b.n	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d62:	4563      	cmp	r3, ip
 8012d64:	dd14      	ble.n	8012d90 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f0>
 8012d66:	b117      	cbz	r7, 8012d6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ce>
 8012d68:	2301      	movs	r3, #1
 8012d6a:	460a      	mov	r2, r1
 8012d6c:	e773      	b.n	8012c56 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8012d6e:	2e00      	cmp	r6, #0
 8012d70:	f43f af4e 	beq.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	f47f af4b 	bne.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d7a:	f1ba 0f00 	cmp.w	sl, #0
 8012d7e:	d002      	beq.n	8012d86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e6>
 8012d80:	2301      	movs	r3, #1
 8012d82:	4642      	mov	r2, r8
 8012d84:	e768      	b.n	8012c58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8012d86:	8ae3      	ldrh	r3, [r4, #22]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	f43f af41 	beq.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d8e:	e7d5      	b.n	8012d3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	f47f af3d 	bne.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d96:	f1ba 0f00 	cmp.w	sl, #0
 8012d9a:	f43f af39 	beq.w	8012c10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	4642      	mov	r2, r8
 8012da2:	e7da      	b.n	8012d5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>

08012da4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	b0e3      	sub	sp, #396	; 0x18c
 8012daa:	461c      	mov	r4, r3
 8012dac:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8012dae:	4683      	mov	fp, r0
 8012db0:	4688      	mov	r8, r1
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f000 810f 	beq.w	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 810b 	beq.w	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012dc0:	7ba3      	ldrb	r3, [r4, #14]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f000 8107 	beq.w	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012dc8:	ad0a      	add	r5, sp, #40	; 0x28
 8012dca:	462b      	mov	r3, r5
 8012dcc:	6810      	ldr	r0, [r2, #0]
 8012dce:	6851      	ldr	r1, [r2, #4]
 8012dd0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8012dd4:	c303      	stmia	r3!, {r0, r1}
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8012ddc:	910c      	str	r1, [sp, #48]	; 0x30
 8012dde:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012de2:	a90c      	add	r1, sp, #48	; 0x30
 8012de4:	79a2      	ldrb	r2, [r4, #6]
 8012de6:	4628      	mov	r0, r5
 8012de8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012dec:	f7ff fd33 	bl	8012856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012df0:	a90c      	add	r1, sp, #48	; 0x30
 8012df2:	4608      	mov	r0, r1
 8012df4:	79a2      	ldrb	r2, [r4, #6]
 8012df6:	f7ff fd2e 	bl	8012856 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012dfa:	a817      	add	r0, sp, #92	; 0x5c
 8012dfc:	f002 f8a0 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 8012e00:	6820      	ldr	r0, [r4, #0]
 8012e02:	6803      	ldr	r3, [r0, #0]
 8012e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e06:	4798      	blx	r3
 8012e08:	4606      	mov	r6, r0
 8012e0a:	6820      	ldr	r0, [r4, #0]
 8012e0c:	6803      	ldr	r3, [r0, #0]
 8012e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e10:	4798      	blx	r3
 8012e12:	4633      	mov	r3, r6
 8012e14:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8012e16:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8012e18:	9000      	str	r0, [sp, #0]
 8012e1a:	a817      	add	r0, sp, #92	; 0x5c
 8012e1c:	f002 f8e3 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012e20:	6820      	ldr	r0, [r4, #0]
 8012e22:	f894 a004 	ldrb.w	sl, [r4, #4]
 8012e26:	6803      	ldr	r3, [r0, #0]
 8012e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e2a:	4798      	blx	r3
 8012e2c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012e30:	6823      	ldr	r3, [r4, #0]
 8012e32:	4607      	mov	r7, r0
 8012e34:	4406      	add	r6, r0
 8012e36:	a830      	add	r0, sp, #192	; 0xc0
 8012e38:	f893 9009 	ldrb.w	r9, [r3, #9]
 8012e3c:	f002 f880 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 8012e40:	7c23      	ldrb	r3, [r4, #16]
 8012e42:	b17b      	cbz	r3, 8012e64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8012e44:	6820      	ldr	r0, [r4, #0]
 8012e46:	6803      	ldr	r3, [r0, #0]
 8012e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e4a:	4798      	blx	r3
 8012e4c:	9009      	str	r0, [sp, #36]	; 0x24
 8012e4e:	6820      	ldr	r0, [r4, #0]
 8012e50:	6802      	ldr	r2, [r0, #0]
 8012e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012e54:	4790      	blx	r2
 8012e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e58:	9000      	str	r0, [sp, #0]
 8012e5a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8012e5c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8012e5e:	a830      	add	r0, sp, #192	; 0xc0
 8012e60:	f002 f8c1 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012e64:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012e68:	7be2      	ldrb	r2, [r4, #15]
 8012e6a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012e6e:	1a8a      	subs	r2, r1, r2
 8012e70:	7c21      	ldrb	r1, [r4, #16]
 8012e72:	b292      	uxth	r2, r2
 8012e74:	9103      	str	r1, [sp, #12]
 8012e76:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8012e7a:	a80e      	add	r0, sp, #56	; 0x38
 8012e7c:	9102      	str	r1, [sp, #8]
 8012e7e:	6821      	ldr	r1, [r4, #0]
 8012e80:	9101      	str	r1, [sp, #4]
 8012e82:	7961      	ldrb	r1, [r4, #5]
 8012e84:	9100      	str	r1, [sp, #0]
 8012e86:	a930      	add	r1, sp, #192	; 0xc0
 8012e88:	f7ff fc66 	bl	8012758 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012e8c:	2e00      	cmp	r6, #0
 8012e8e:	dc5b      	bgt.n	8012f48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8012e90:	f04f 0900 	mov.w	r9, #0
 8012e94:	af17      	add	r7, sp, #92	; 0x5c
 8012e96:	7c23      	ldrb	r3, [r4, #16]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f000 80ae 	beq.w	8012ffa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012e9e:	a80e      	add	r0, sp, #56	; 0x38
 8012ea0:	f7ff fe7e 	bl	8012ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012ea4:	f1ba 0f00 	cmp.w	sl, #0
 8012ea8:	f000 80a2 	beq.w	8012ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8012eac:	7c23      	ldrb	r3, [r4, #16]
 8012eae:	2264      	movs	r2, #100	; 0x64
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	a849      	add	r0, sp, #292	; 0x124
 8012eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8012eb6:	f00e ff8f 	bl	8021dd8 <memcpy>
 8012eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f000 80a4 	beq.w	801300a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8012ec2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8012ec6:	7922      	ldrb	r2, [r4, #4]
 8012ec8:	2a01      	cmp	r2, #1
 8012eca:	f040 8087 	bne.w	8012fdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012ece:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8012ed2:	1ac0      	subs	r0, r0, r3
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	fb90 f0f3 	sdiv	r0, r0, r3
 8012eda:	b200      	sxth	r0, r0
 8012edc:	7c23      	ldrb	r3, [r4, #16]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f000 8088 	beq.w	8012ff4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8012ee4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8012ee8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8012eec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012ef0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012ef4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012ef8:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012efc:	4410      	add	r0, r2
 8012efe:	b200      	sxth	r0, r0
 8012f00:	9000      	str	r0, [sp, #0]
 8012f02:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012f06:	4642      	mov	r2, r8
 8012f08:	2100      	movs	r1, #0
 8012f0a:	4658      	mov	r0, fp
 8012f0c:	f7ff fcd4 	bl	80128b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d160      	bne.n	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012f14:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012f18:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012f1c:	b2b2      	uxth	r2, r6
 8012f1e:	4413      	add	r3, r2
 8012f20:	1a8a      	subs	r2, r1, r2
 8012f22:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8012f26:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8012f2a:	b21b      	sxth	r3, r3
 8012f2c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012f30:	2a00      	cmp	r2, #0
 8012f32:	d150      	bne.n	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012f34:	6822      	ldr	r2, [r4, #0]
 8012f36:	8869      	ldrh	r1, [r5, #2]
 8012f38:	7a12      	ldrb	r2, [r2, #8]
 8012f3a:	1a9b      	subs	r3, r3, r2
 8012f3c:	88ea      	ldrh	r2, [r5, #6]
 8012f3e:	440a      	add	r2, r1
 8012f40:	b212      	sxth	r2, r2
 8012f42:	4293      	cmp	r3, r2
 8012f44:	dda7      	ble.n	8012e96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8012f46:	e046      	b.n	8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012f48:	7c23      	ldrb	r3, [r4, #16]
 8012f4a:	444f      	add	r7, r9
 8012f4c:	b1c3      	cbz	r3, 8012f80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8012f4e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8012f52:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012f56:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012f5a:	443b      	add	r3, r7
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	da97      	bge.n	8012e90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012f60:	a80e      	add	r0, sp, #56	; 0x38
 8012f62:	f7ff fe1d 	bl	8012ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012f66:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	454b      	cmp	r3, r9
 8012f70:	9309      	str	r3, [sp, #36]	; 0x24
 8012f72:	d021      	beq.n	8012fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8012f74:	7961      	ldrb	r1, [r4, #5]
 8012f76:	a817      	add	r0, sp, #92	; 0x5c
 8012f78:	f7fb fc1e 	bl	800e7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7e:	e7f4      	b.n	8012f6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8012f80:	fa1f f986 	uxth.w	r9, r6
 8012f84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012f88:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012f8c:	443b      	add	r3, r7
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	f6bf af7e 	bge.w	8012e90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012f94:	a817      	add	r0, sp, #92	; 0x5c
 8012f96:	f002 fbe3 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012f9a:	b1e0      	cbz	r0, 8012fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012f9c:	280a      	cmp	r0, #10
 8012f9e:	d1f1      	bne.n	8012f84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012fa0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012fa4:	444b      	add	r3, r9
 8012fa6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012faa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012fae:	eba3 0309 	sub.w	r3, r3, r9
 8012fb2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012fb6:	e7e5      	b.n	8012f84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012fb8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012fbc:	b2b3      	uxth	r3, r6
 8012fbe:	441a      	add	r2, r3
 8012fc0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8012fc4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012fce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1bd      	bne.n	8012f52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8012fd6:	b063      	add	sp, #396	; 0x18c
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	2a02      	cmp	r2, #2
 8012fde:	d105      	bne.n	8012fec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8012fe0:	7be2      	ldrb	r2, [r4, #15]
 8012fe2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8012fe6:	1a80      	subs	r0, r0, r2
 8012fe8:	1ac0      	subs	r0, r0, r3
 8012fea:	e776      	b.n	8012eda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8012fec:	2000      	movs	r0, #0
 8012fee:	e775      	b.n	8012edc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012ff0:	7be0      	ldrb	r0, [r4, #15]
 8012ff2:	e773      	b.n	8012edc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012ff4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012ff8:	e776      	b.n	8012ee8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012ffa:	f1ba 0f00 	cmp.w	sl, #0
 8012ffe:	d0f7      	beq.n	8012ff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8013000:	2264      	movs	r2, #100	; 0x64
 8013002:	4639      	mov	r1, r7
 8013004:	a849      	add	r0, sp, #292	; 0x124
 8013006:	f00e fee7 	bl	8021dd8 <memcpy>
 801300a:	2300      	movs	r3, #0
 801300c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013010:	6821      	ldr	r1, [r4, #0]
 8013012:	a849      	add	r0, sp, #292	; 0x124
 8013014:	f7ff fbe3 	bl	80127de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013018:	b203      	sxth	r3, r0
 801301a:	e754      	b.n	8012ec6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801301c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801301c:	2b03      	cmp	r3, #3
 801301e:	d818      	bhi.n	8013052 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013020:	e8df f003 	tbb	[pc, r3]
 8013024:	130d0602 	.word	0x130d0602
 8013028:	f9b0 2000 	ldrsh.w	r2, [r0]
 801302c:	1850      	adds	r0, r2, r1
 801302e:	4770      	bx	lr
 8013030:	8803      	ldrh	r3, [r0, #0]
 8013032:	8880      	ldrh	r0, [r0, #4]
 8013034:	4418      	add	r0, r3
 8013036:	b200      	sxth	r0, r0
 8013038:	1a80      	subs	r0, r0, r2
 801303a:	3801      	subs	r0, #1
 801303c:	4770      	bx	lr
 801303e:	8803      	ldrh	r3, [r0, #0]
 8013040:	8880      	ldrh	r0, [r0, #4]
 8013042:	4418      	add	r0, r3
 8013044:	b200      	sxth	r0, r0
 8013046:	1a40      	subs	r0, r0, r1
 8013048:	e7f7      	b.n	801303a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801304a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801304e:	4410      	add	r0, r2
 8013050:	4770      	bx	lr
 8013052:	2000      	movs	r0, #0
 8013054:	4770      	bx	lr

08013056 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013056:	2b03      	cmp	r3, #3
 8013058:	d817      	bhi.n	801308a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801305a:	e8df f003 	tbb	[pc, r3]
 801305e:	0602      	.short	0x0602
 8013060:	1009      	.short	0x1009
 8013062:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013066:	1850      	adds	r0, r2, r1
 8013068:	4770      	bx	lr
 801306a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801306e:	e7fa      	b.n	8013066 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013070:	8843      	ldrh	r3, [r0, #2]
 8013072:	88c0      	ldrh	r0, [r0, #6]
 8013074:	4418      	add	r0, r3
 8013076:	b200      	sxth	r0, r0
 8013078:	1a80      	subs	r0, r0, r2
 801307a:	3801      	subs	r0, #1
 801307c:	4770      	bx	lr
 801307e:	8843      	ldrh	r3, [r0, #2]
 8013080:	88c0      	ldrh	r0, [r0, #6]
 8013082:	4418      	add	r0, r3
 8013084:	b200      	sxth	r0, r0
 8013086:	1a40      	subs	r0, r0, r1
 8013088:	e7f7      	b.n	801307a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801308a:	2000      	movs	r0, #0
 801308c:	4770      	bx	lr
	...

08013090 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013090:	2200      	movs	r2, #0
 8013092:	4b01      	ldr	r3, [pc, #4]	; (8013098 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	4770      	bx	lr
 8013098:	2001fdac 	.word	0x2001fdac

0801309c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801309c:	4603      	mov	r3, r0
 801309e:	b1c8      	cbz	r0, 80130d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80130a0:	0c02      	lsrs	r2, r0, #16
 80130a2:	0412      	lsls	r2, r2, #16
 80130a4:	b9a2      	cbnz	r2, 80130d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80130a6:	0403      	lsls	r3, r0, #16
 80130a8:	2010      	movs	r0, #16
 80130aa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80130ae:	bf04      	itt	eq
 80130b0:	021b      	lsleq	r3, r3, #8
 80130b2:	3008      	addeq	r0, #8
 80130b4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80130b8:	bf04      	itt	eq
 80130ba:	011b      	lsleq	r3, r3, #4
 80130bc:	3004      	addeq	r0, #4
 80130be:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80130c2:	bf04      	itt	eq
 80130c4:	009b      	lsleq	r3, r3, #2
 80130c6:	3002      	addeq	r0, #2
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	db04      	blt.n	80130d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80130cc:	3001      	adds	r0, #1
 80130ce:	4770      	bx	lr
 80130d0:	2000      	movs	r0, #0
 80130d2:	e7ea      	b.n	80130aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80130d4:	2020      	movs	r0, #32
 80130d6:	4770      	bx	lr

080130d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	b087      	sub	sp, #28
 80130de:	4681      	mov	r9, r0
 80130e0:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80130e4:	4610      	mov	r0, r2
 80130e6:	4698      	mov	r8, r3
 80130e8:	460d      	mov	r5, r1
 80130ea:	b981      	cbnz	r1, 801310e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80130ec:	b14b      	cbz	r3, 8013102 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80130ee:	460b      	mov	r3, r1
 80130f0:	e9cd 4700 	strd	r4, r7, [sp]
 80130f4:	464a      	mov	r2, r9
 80130f6:	4641      	mov	r1, r8
 80130f8:	f7ff ffee 	bl	80130d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80130fc:	b007      	add	sp, #28
 80130fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013102:	f04f 33ff 	mov.w	r3, #4294967295
 8013106:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801310a:	603b      	str	r3, [r7, #0]
 801310c:	e7f6      	b.n	80130fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801310e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8013112:	d107      	bne.n	8013124 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8013114:	fb09 f602 	mul.w	r6, r9, r2
 8013118:	fbb6 f0f4 	udiv	r0, r6, r4
 801311c:	fb04 6610 	mls	r6, r4, r0, r6
 8013120:	603e      	str	r6, [r7, #0]
 8013122:	e7eb      	b.n	80130fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013124:	fa09 fb01 	lsl.w	fp, r9, r1
 8013128:	fbbb f3f4 	udiv	r3, fp, r4
 801312c:	2601      	movs	r6, #1
 801312e:	9302      	str	r3, [sp, #8]
 8013130:	408e      	lsls	r6, r1
 8013132:	fb0a f303 	mul.w	r3, sl, r3
 8013136:	3e01      	subs	r6, #1
 8013138:	4016      	ands	r6, r2
 801313a:	4630      	mov	r0, r6
 801313c:	9303      	str	r3, [sp, #12]
 801313e:	f7ff ffad 	bl	801309c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013142:	464a      	mov	r2, r9
 8013144:	460b      	mov	r3, r1
 8013146:	e9cd 4700 	strd	r4, r7, [sp]
 801314a:	4601      	mov	r1, r0
 801314c:	4630      	mov	r0, r6
 801314e:	f7ff ffc3 	bl	80130d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013152:	9b02      	ldr	r3, [sp, #8]
 8013154:	4606      	mov	r6, r0
 8013156:	fb04 bb13 	mls	fp, r4, r3, fp
 801315a:	4658      	mov	r0, fp
 801315c:	eb05 0108 	add.w	r1, r5, r8
 8013160:	f7ff ff9c 	bl	801309c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013164:	ab05      	add	r3, sp, #20
 8013166:	e9cd 4300 	strd	r4, r3, [sp]
 801316a:	465a      	mov	r2, fp
 801316c:	4603      	mov	r3, r0
 801316e:	4650      	mov	r0, sl
 8013170:	f7ff ffb2 	bl	80130d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013174:	6839      	ldr	r1, [r7, #0]
 8013176:	9a05      	ldr	r2, [sp, #20]
 8013178:	9b03      	ldr	r3, [sp, #12]
 801317a:	4411      	add	r1, r2
 801317c:	fbb1 f2f4 	udiv	r2, r1, r4
 8013180:	fb04 1412 	mls	r4, r4, r2, r1
 8013184:	18d3      	adds	r3, r2, r3
 8013186:	441e      	add	r6, r3
 8013188:	4430      	add	r0, r6
 801318a:	603c      	str	r4, [r7, #0]
 801318c:	e7b6      	b.n	80130fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801318e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801318e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013192:	b085      	sub	sp, #20
 8013194:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013196:	f1b0 0900 	subs.w	r9, r0, #0
 801319a:	461d      	mov	r5, r3
 801319c:	bfbf      	itttt	lt
 801319e:	6823      	ldrlt	r3, [r4, #0]
 80131a0:	f1c9 0900 	rsblt	r9, r9, #0
 80131a4:	425b      	neglt	r3, r3
 80131a6:	6023      	strlt	r3, [r4, #0]
 80131a8:	bfb4      	ite	lt
 80131aa:	f04f 36ff 	movlt.w	r6, #4294967295
 80131ae:	2601      	movge	r6, #1
 80131b0:	2a00      	cmp	r2, #0
 80131b2:	4617      	mov	r7, r2
 80131b4:	da04      	bge.n	80131c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80131b6:	6823      	ldr	r3, [r4, #0]
 80131b8:	4257      	negs	r7, r2
 80131ba:	425b      	negs	r3, r3
 80131bc:	4276      	negs	r6, r6
 80131be:	6023      	str	r3, [r4, #0]
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	4638      	mov	r0, r7
 80131c4:	bfba      	itte	lt
 80131c6:	426d      	neglt	r5, r5
 80131c8:	f04f 38ff 	movlt.w	r8, #4294967295
 80131cc:	f04f 0801 	movge.w	r8, #1
 80131d0:	f7ff ff64 	bl	801309c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80131d4:	ab03      	add	r3, sp, #12
 80131d6:	e9cd 5300 	strd	r5, r3, [sp]
 80131da:	463a      	mov	r2, r7
 80131dc:	4603      	mov	r3, r0
 80131de:	4648      	mov	r0, r9
 80131e0:	f7ff ff7a 	bl	80130d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	9a03      	ldr	r2, [sp, #12]
 80131e8:	4546      	cmp	r6, r8
 80131ea:	441a      	add	r2, r3
 80131ec:	fb92 f3f5 	sdiv	r3, r2, r5
 80131f0:	4418      	add	r0, r3
 80131f2:	fb05 2313 	mls	r3, r5, r3, r2
 80131f6:	bf18      	it	ne
 80131f8:	4240      	negne	r0, r0
 80131fa:	1c72      	adds	r2, r6, #1
 80131fc:	6023      	str	r3, [r4, #0]
 80131fe:	d105      	bne.n	801320c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013200:	2b00      	cmp	r3, #0
 8013202:	f1c3 0200 	rsb	r2, r3, #0
 8013206:	db0b      	blt.n	8013220 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013208:	6022      	str	r2, [r4, #0]
 801320a:	e006      	b.n	801321a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801320c:	2e01      	cmp	r6, #1
 801320e:	d104      	bne.n	801321a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013210:	2b00      	cmp	r3, #0
 8013212:	da02      	bge.n	801321a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013214:	442b      	add	r3, r5
 8013216:	3801      	subs	r0, #1
 8013218:	6023      	str	r3, [r4, #0]
 801321a:	b005      	add	sp, #20
 801321c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013220:	3801      	subs	r0, #1
 8013222:	1b52      	subs	r2, r2, r5
 8013224:	e7f0      	b.n	8013208 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08013228 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801322c:	4c1c      	ldr	r4, [pc, #112]	; (80132a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801322e:	4605      	mov	r5, r0
 8013230:	69a3      	ldr	r3, [r4, #24]
 8013232:	6807      	ldr	r7, [r0, #0]
 8013234:	b92b      	cbnz	r3, 8013242 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013236:	6840      	ldr	r0, [r0, #4]
 8013238:	e9c5 7000 	strd	r7, r0, [r5]
 801323c:	b004      	add	sp, #16
 801323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013242:	f04f 0802 	mov.w	r8, #2
 8013246:	fb93 f1f8 	sdiv	r1, r3, r8
 801324a:	68a2      	ldr	r2, [r4, #8]
 801324c:	ae04      	add	r6, sp, #16
 801324e:	440a      	add	r2, r1
 8013250:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013254:	69e1      	ldr	r1, [r4, #28]
 8013256:	463a      	mov	r2, r7
 8013258:	9600      	str	r6, [sp, #0]
 801325a:	6820      	ldr	r0, [r4, #0]
 801325c:	f7ff ff97 	bl	801318e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013260:	69a3      	ldr	r3, [r4, #24]
 8013262:	4607      	mov	r7, r0
 8013264:	686a      	ldr	r2, [r5, #4]
 8013266:	6a21      	ldr	r1, [r4, #32]
 8013268:	9600      	str	r6, [sp, #0]
 801326a:	6860      	ldr	r0, [r4, #4]
 801326c:	f7ff ff8f 	bl	801318e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013270:	69a3      	ldr	r3, [r4, #24]
 8013272:	6962      	ldr	r2, [r4, #20]
 8013274:	fb93 f8f8 	sdiv	r8, r3, r8
 8013278:	4442      	add	r2, r8
 801327a:	9203      	str	r2, [sp, #12]
 801327c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801327e:	682a      	ldr	r2, [r5, #0]
 8013280:	4407      	add	r7, r0
 8013282:	9600      	str	r6, [sp, #0]
 8013284:	68e0      	ldr	r0, [r4, #12]
 8013286:	f7ff ff82 	bl	801318e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801328a:	9600      	str	r6, [sp, #0]
 801328c:	4680      	mov	r8, r0
 801328e:	69a3      	ldr	r3, [r4, #24]
 8013290:	686a      	ldr	r2, [r5, #4]
 8013292:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013294:	6920      	ldr	r0, [r4, #16]
 8013296:	f7ff ff7a 	bl	801318e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801329a:	4440      	add	r0, r8
 801329c:	e7cc      	b.n	8013238 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801329e:	bf00      	nop
 80132a0:	2001fdb0 	.word	0x2001fdb0

080132a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80132a4:	4b07      	ldr	r3, [pc, #28]	; (80132c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d109      	bne.n	80132c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80132ac:	f9b1 3000 	ldrsh.w	r3, [r1]
 80132b0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80132b4:	8003      	strh	r3, [r0, #0]
 80132b6:	4b04      	ldr	r3, [pc, #16]	; (80132c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	3b01      	subs	r3, #1
 80132bc:	1a9b      	subs	r3, r3, r2
 80132be:	800b      	strh	r3, [r1, #0]
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	2001fd9c 	.word	0x2001fd9c
 80132c8:	2001fd98 	.word	0x2001fd98

080132cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80132cc:	b510      	push	{r4, lr}
 80132ce:	4b07      	ldr	r3, [pc, #28]	; (80132ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d108      	bne.n	80132e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80132d6:	4b06      	ldr	r3, [pc, #24]	; (80132f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80132d8:	880c      	ldrh	r4, [r1, #0]
 80132da:	881b      	ldrh	r3, [r3, #0]
 80132dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80132e0:	3b01      	subs	r3, #1
 80132e2:	1b1b      	subs	r3, r3, r4
 80132e4:	8003      	strh	r3, [r0, #0]
 80132e6:	800a      	strh	r2, [r1, #0]
 80132e8:	bd10      	pop	{r4, pc}
 80132ea:	bf00      	nop
 80132ec:	2001fd9c 	.word	0x2001fd9c
 80132f0:	2001fd98 	.word	0x2001fd98

080132f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80132f4:	b510      	push	{r4, lr}
 80132f6:	4b0a      	ldr	r3, [pc, #40]	; (8013320 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d10e      	bne.n	801331c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80132fe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013302:	8843      	ldrh	r3, [r0, #2]
 8013304:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013308:	18ca      	adds	r2, r1, r3
 801330a:	4b06      	ldr	r3, [pc, #24]	; (8013324 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801330c:	8044      	strh	r4, [r0, #2]
 801330e:	881b      	ldrh	r3, [r3, #0]
 8013310:	1a9b      	subs	r3, r3, r2
 8013312:	8003      	strh	r3, [r0, #0]
 8013314:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013318:	8081      	strh	r1, [r0, #4]
 801331a:	80c3      	strh	r3, [r0, #6]
 801331c:	bd10      	pop	{r4, pc}
 801331e:	bf00      	nop
 8013320:	2001fd9c 	.word	0x2001fd9c
 8013324:	2001fd98 	.word	0x2001fd98

08013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013328:	4b08      	ldr	r3, [pc, #32]	; (801334c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d10c      	bne.n	801334a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013330:	8803      	ldrh	r3, [r0, #0]
 8013332:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013336:	8842      	ldrh	r2, [r0, #2]
 8013338:	8002      	strh	r2, [r0, #0]
 801333a:	185a      	adds	r2, r3, r1
 801333c:	4b04      	ldr	r3, [pc, #16]	; (8013350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	1a9b      	subs	r3, r3, r2
 8013342:	8043      	strh	r3, [r0, #2]
 8013344:	88c3      	ldrh	r3, [r0, #6]
 8013346:	80c1      	strh	r1, [r0, #6]
 8013348:	8083      	strh	r3, [r0, #4]
 801334a:	4770      	bx	lr
 801334c:	2001fd9c 	.word	0x2001fd9c
 8013350:	2001fd98 	.word	0x2001fd98

08013354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013354:	b510      	push	{r4, lr}
 8013356:	4b07      	ldr	r3, [pc, #28]	; (8013374 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d108      	bne.n	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801335e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013362:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013366:	8003      	strh	r3, [r0, #0]
 8013368:	8893      	ldrh	r3, [r2, #4]
 801336a:	3b01      	subs	r3, #1
 801336c:	1b1b      	subs	r3, r3, r4
 801336e:	800b      	strh	r3, [r1, #0]
 8013370:	bd10      	pop	{r4, pc}
 8013372:	bf00      	nop
 8013374:	2001fd9c 	.word	0x2001fd9c

08013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013378:	b510      	push	{r4, lr}
 801337a:	4b0a      	ldr	r3, [pc, #40]	; (80133a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801337c:	460a      	mov	r2, r1
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d10d      	bne.n	80133a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013384:	8881      	ldrh	r1, [r0, #4]
 8013386:	8803      	ldrh	r3, [r0, #0]
 8013388:	440b      	add	r3, r1
 801338a:	4601      	mov	r1, r0
 801338c:	3b01      	subs	r3, #1
 801338e:	f821 3b02 	strh.w	r3, [r1], #2
 8013392:	f7ff ffdf 	bl	8013354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013396:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801339a:	88c2      	ldrh	r2, [r0, #6]
 801339c:	80c3      	strh	r3, [r0, #6]
 801339e:	8082      	strh	r2, [r0, #4]
 80133a0:	bd10      	pop	{r4, pc}
 80133a2:	bf00      	nop
 80133a4:	2001fd9c 	.word	0x2001fd9c

080133a8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80133a8:	2100      	movs	r1, #0
 80133aa:	4b06      	ldr	r3, [pc, #24]	; (80133c4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80133ac:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80133b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133b4:	4b04      	ldr	r3, [pc, #16]	; (80133c8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80133b6:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80133ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133be:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80133c2:	4770      	bx	lr
 80133c4:	2001fd98 	.word	0x2001fd98
 80133c8:	2001fd9a 	.word	0x2001fd9a

080133cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80133cc:	4b03      	ldr	r3, [pc, #12]	; (80133dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80133ce:	6818      	ldr	r0, [r3, #0]
 80133d0:	b110      	cbz	r0, 80133d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80133d2:	6803      	ldr	r3, [r0, #0]
 80133d4:	699b      	ldr	r3, [r3, #24]
 80133d6:	4718      	bx	r3
 80133d8:	4770      	bx	lr
 80133da:	bf00      	nop
 80133dc:	2001fde0 	.word	0x2001fde0

080133e0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80133e0:	4770      	bx	lr
	...

080133e4 <_ZN8touchgfx11Application4drawEv>:
 80133e4:	b507      	push	{r0, r1, r2, lr}
 80133e6:	2100      	movs	r1, #0
 80133e8:	4b08      	ldr	r3, [pc, #32]	; (801340c <_ZN8touchgfx11Application4drawEv+0x28>)
 80133ea:	9100      	str	r1, [sp, #0]
 80133ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133f0:	4b07      	ldr	r3, [pc, #28]	; (8013410 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80133f2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80133f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133fa:	4669      	mov	r1, sp
 80133fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013400:	6803      	ldr	r3, [r0, #0]
 8013402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013404:	4798      	blx	r3
 8013406:	b003      	add	sp, #12
 8013408:	f85d fb04 	ldr.w	pc, [sp], #4
 801340c:	2001fd98 	.word	0x2001fd98
 8013410:	2001fd9a 	.word	0x2001fd9a

08013414 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013414:	4b03      	ldr	r3, [pc, #12]	; (8013424 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013416:	6818      	ldr	r0, [r3, #0]
 8013418:	b110      	cbz	r0, 8013420 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801341a:	6803      	ldr	r3, [r0, #0]
 801341c:	69db      	ldr	r3, [r3, #28]
 801341e:	4718      	bx	r3
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop
 8013424:	2001fde0 	.word	0x2001fde0

08013428 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013428:	4b03      	ldr	r3, [pc, #12]	; (8013438 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801342a:	6818      	ldr	r0, [r3, #0]
 801342c:	b110      	cbz	r0, 8013434 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801342e:	6803      	ldr	r3, [r0, #0]
 8013430:	6a1b      	ldr	r3, [r3, #32]
 8013432:	4718      	bx	r3
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop
 8013438:	2001fde0 	.word	0x2001fde0

0801343c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801343c:	2300      	movs	r3, #0
 801343e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8013442:	4770      	bx	lr

08013444 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013444:	4b03      	ldr	r3, [pc, #12]	; (8013454 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013446:	6818      	ldr	r0, [r3, #0]
 8013448:	b110      	cbz	r0, 8013450 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801344a:	6803      	ldr	r3, [r0, #0]
 801344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801344e:	4718      	bx	r3
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	2001fde0 	.word	0x2001fde0

08013458 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013458:	b510      	push	{r4, lr}
 801345a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801345e:	888a      	ldrh	r2, [r1, #4]
 8013460:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013464:	4422      	add	r2, r4
 8013466:	b212      	sxth	r2, r2
 8013468:	4293      	cmp	r3, r2
 801346a:	da15      	bge.n	8013498 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801346c:	8882      	ldrh	r2, [r0, #4]
 801346e:	4413      	add	r3, r2
 8013470:	b21b      	sxth	r3, r3
 8013472:	429c      	cmp	r4, r3
 8013474:	da10      	bge.n	8013498 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013476:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801347a:	88c9      	ldrh	r1, [r1, #6]
 801347c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013480:	4419      	add	r1, r3
 8013482:	b209      	sxth	r1, r1
 8013484:	428a      	cmp	r2, r1
 8013486:	da07      	bge.n	8013498 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013488:	88c0      	ldrh	r0, [r0, #6]
 801348a:	4410      	add	r0, r2
 801348c:	b200      	sxth	r0, r0
 801348e:	4283      	cmp	r3, r0
 8013490:	bfac      	ite	ge
 8013492:	2000      	movge	r0, #0
 8013494:	2001      	movlt	r0, #1
 8013496:	bd10      	pop	{r4, pc}
 8013498:	2000      	movs	r0, #0
 801349a:	e7fc      	b.n	8013496 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801349c <_ZN8touchgfx4Rect10restrictToEss>:
 801349c:	f9b0 3000 	ldrsh.w	r3, [r0]
 80134a0:	b510      	push	{r4, lr}
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	da04      	bge.n	80134b0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80134a6:	8884      	ldrh	r4, [r0, #4]
 80134a8:	4423      	add	r3, r4
 80134aa:	8083      	strh	r3, [r0, #4]
 80134ac:	2300      	movs	r3, #0
 80134ae:	8003      	strh	r3, [r0, #0]
 80134b0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80134b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80134b8:	1b09      	subs	r1, r1, r4
 80134ba:	428b      	cmp	r3, r1
 80134bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80134c0:	bfc8      	it	gt
 80134c2:	8081      	strhgt	r1, [r0, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	da04      	bge.n	80134d2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80134c8:	88c1      	ldrh	r1, [r0, #6]
 80134ca:	440b      	add	r3, r1
 80134cc:	80c3      	strh	r3, [r0, #6]
 80134ce:	2300      	movs	r3, #0
 80134d0:	8043      	strh	r3, [r0, #2]
 80134d2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80134d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80134da:	1a52      	subs	r2, r2, r1
 80134dc:	4293      	cmp	r3, r2
 80134de:	bfc8      	it	gt
 80134e0:	80c2      	strhgt	r2, [r0, #6]
 80134e2:	bd10      	pop	{r4, pc}

080134e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	460c      	mov	r4, r1
 80134e8:	4b0f      	ldr	r3, [pc, #60]	; (8013528 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80134ea:	4620      	mov	r0, r4
 80134ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80134f0:	4b0e      	ldr	r3, [pc, #56]	; (801352c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80134f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80134f6:	f7ff ffd1 	bl	801349c <_ZN8touchgfx4Rect10restrictToEss>
 80134fa:	4b0d      	ldr	r3, [pc, #52]	; (8013530 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80134fc:	6818      	ldr	r0, [r3, #0]
 80134fe:	b190      	cbz	r0, 8013526 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013500:	6803      	ldr	r3, [r0, #0]
 8013502:	4621      	mov	r1, r4
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	4798      	blx	r3
 8013508:	4b0a      	ldr	r3, [pc, #40]	; (8013534 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801350a:	6818      	ldr	r0, [r3, #0]
 801350c:	b118      	cbz	r0, 8013516 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801350e:	6803      	ldr	r3, [r0, #0]
 8013510:	4621      	mov	r1, r4
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	4798      	blx	r3
 8013516:	4b08      	ldr	r3, [pc, #32]	; (8013538 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013518:	4621      	mov	r1, r4
 801351a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801351e:	6818      	ldr	r0, [r3, #0]
 8013520:	6803      	ldr	r3, [r0, #0]
 8013522:	69db      	ldr	r3, [r3, #28]
 8013524:	4718      	bx	r3
 8013526:	bd10      	pop	{r4, pc}
 8013528:	2001fd9a 	.word	0x2001fd9a
 801352c:	2001fd98 	.word	0x2001fd98
 8013530:	2001fde0 	.word	0x2001fde0
 8013534:	2001fddc 	.word	0x2001fddc
 8013538:	2001fda4 	.word	0x2001fda4

0801353c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801353e:	4606      	mov	r6, r0
 8013540:	4608      	mov	r0, r1
 8013542:	460f      	mov	r7, r1
 8013544:	f7fd fa4b 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8013548:	b9e8      	cbnz	r0, 8013586 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801354a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801354e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013552:	42a5      	cmp	r5, r4
 8013554:	db17      	blt.n	8013586 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013556:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801355a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801355e:	429a      	cmp	r2, r3
 8013560:	db11      	blt.n	8013586 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013562:	88b9      	ldrh	r1, [r7, #4]
 8013564:	440d      	add	r5, r1
 8013566:	88b1      	ldrh	r1, [r6, #4]
 8013568:	b22d      	sxth	r5, r5
 801356a:	440c      	add	r4, r1
 801356c:	b224      	sxth	r4, r4
 801356e:	42a5      	cmp	r5, r4
 8013570:	dc09      	bgt.n	8013586 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013572:	88f8      	ldrh	r0, [r7, #6]
 8013574:	4410      	add	r0, r2
 8013576:	88f2      	ldrh	r2, [r6, #6]
 8013578:	b200      	sxth	r0, r0
 801357a:	4413      	add	r3, r2
 801357c:	b21b      	sxth	r3, r3
 801357e:	4298      	cmp	r0, r3
 8013580:	bfcc      	ite	gt
 8013582:	2000      	movgt	r0, #0
 8013584:	2001      	movle	r0, #1
 8013586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013588 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358a:	4604      	mov	r4, r0
 801358c:	4608      	mov	r0, r1
 801358e:	460d      	mov	r5, r1
 8013590:	f7fd fa25 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8013594:	b978      	cbnz	r0, 80135b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013596:	4620      	mov	r0, r4
 8013598:	f7fd fa21 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 801359c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80135a0:	b150      	cbz	r0, 80135b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80135a2:	8026      	strh	r6, [r4, #0]
 80135a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80135a8:	8063      	strh	r3, [r4, #2]
 80135aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80135ae:	80a3      	strh	r3, [r4, #4]
 80135b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80135b4:	80e3      	strh	r3, [r4, #6]
 80135b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80135bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80135c0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80135c4:	42b1      	cmp	r1, r6
 80135c6:	460f      	mov	r7, r1
 80135c8:	bfa8      	it	ge
 80135ca:	4637      	movge	r7, r6
 80135cc:	4293      	cmp	r3, r2
 80135ce:	4618      	mov	r0, r3
 80135d0:	bfa8      	it	ge
 80135d2:	4610      	movge	r0, r2
 80135d4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80135d8:	88ed      	ldrh	r5, [r5, #6]
 80135da:	4466      	add	r6, ip
 80135dc:	442a      	add	r2, r5
 80135de:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80135e2:	88e5      	ldrh	r5, [r4, #6]
 80135e4:	4461      	add	r1, ip
 80135e6:	442b      	add	r3, r5
 80135e8:	b236      	sxth	r6, r6
 80135ea:	b209      	sxth	r1, r1
 80135ec:	b212      	sxth	r2, r2
 80135ee:	b21b      	sxth	r3, r3
 80135f0:	428e      	cmp	r6, r1
 80135f2:	bfac      	ite	ge
 80135f4:	ebc7 0106 	rsbge	r1, r7, r6
 80135f8:	ebc7 0101 	rsblt	r1, r7, r1
 80135fc:	429a      	cmp	r2, r3
 80135fe:	bfac      	ite	ge
 8013600:	ebc0 0202 	rsbge	r2, r0, r2
 8013604:	ebc0 0203 	rsblt	r2, r0, r3
 8013608:	8027      	strh	r7, [r4, #0]
 801360a:	8060      	strh	r0, [r4, #2]
 801360c:	80a1      	strh	r1, [r4, #4]
 801360e:	80e2      	strh	r2, [r4, #6]
 8013610:	e7d1      	b.n	80135b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013614 <_ZN8touchgfx11Application11getInstanceEv>:
 8013614:	4b01      	ldr	r3, [pc, #4]	; (801361c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013616:	6818      	ldr	r0, [r3, #0]
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	2001fdf0 	.word	0x2001fdf0

08013620 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013620:	2300      	movs	r3, #0
 8013622:	b510      	push	{r4, lr}
 8013624:	4604      	mov	r4, r0
 8013626:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801362a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801362e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013632:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013636:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801363a:	429a      	cmp	r2, r3
 801363c:	d90e      	bls.n	801365c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801363e:	18e2      	adds	r2, r4, r3
 8013640:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8013644:	b122      	cbz	r2, 8013650 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8013646:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801364a:	6803      	ldr	r3, [r0, #0]
 801364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801364e:	4798      	blx	r3
 8013650:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013654:	3301      	adds	r3, #1
 8013656:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801365a:	e7ea      	b.n	8013632 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801365c:	bd10      	pop	{r4, pc}

0801365e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801365e:	2300      	movs	r3, #0
 8013660:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8013664:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013668:	30a4      	adds	r0, #164	; 0xa4
 801366a:	f802 3b01 	strb.w	r3, [r2], #1
 801366e:	4282      	cmp	r2, r0
 8013670:	d1fb      	bne.n	801366a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8013672:	4770      	bx	lr

08013674 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013674:	b570      	push	{r4, r5, r6, lr}
 8013676:	4c0b      	ldr	r4, [pc, #44]	; (80136a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8013678:	4605      	mov	r5, r0
 801367a:	6820      	ldr	r0, [r4, #0]
 801367c:	460e      	mov	r6, r1
 801367e:	b110      	cbz	r0, 8013686 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8013680:	6803      	ldr	r3, [r0, #0]
 8013682:	695b      	ldr	r3, [r3, #20]
 8013684:	4798      	blx	r3
 8013686:	1d28      	adds	r0, r5, #4
 8013688:	f7ff ffe9 	bl	801365e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801368c:	6026      	str	r6, [r4, #0]
 801368e:	6833      	ldr	r3, [r6, #0]
 8013690:	4630      	mov	r0, r6
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	4798      	blx	r3
 8013696:	682b      	ldr	r3, [r5, #0]
 8013698:	4628      	mov	r0, r5
 801369a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136a0:	4718      	bx	r3
 80136a2:	bf00      	nop
 80136a4:	2001fde0 	.word	0x2001fde0

080136a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80136a8:	2300      	movs	r3, #0
 80136aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ac:	461a      	mov	r2, r3
 80136ae:	461c      	mov	r4, r3
 80136b0:	461d      	mov	r5, r3
 80136b2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80136b6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80136ba:	459c      	cmp	ip, r3
 80136bc:	dd1a      	ble.n	80136f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80136be:	18c6      	adds	r6, r0, r3
 80136c0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80136c4:	b16e      	cbz	r6, 80136e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d008      	beq.n	80136dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80136ca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80136ce:	fa1f fe82 	uxth.w	lr, r2
 80136d2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80136d6:	1887      	adds	r7, r0, r2
 80136d8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80136dc:	3201      	adds	r2, #1
 80136de:	3301      	adds	r3, #1
 80136e0:	e7eb      	b.n	80136ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80136e2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80136e6:	4299      	cmp	r1, r3
 80136e8:	bfa8      	it	ge
 80136ea:	3501      	addge	r5, #1
 80136ec:	429e      	cmp	r6, r3
 80136ee:	bfc8      	it	gt
 80136f0:	3401      	addgt	r4, #1
 80136f2:	e7f4      	b.n	80136de <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80136f4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80136f8:	1b49      	subs	r1, r1, r5
 80136fa:	1b1b      	subs	r3, r3, r4
 80136fc:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8013700:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013704:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8013708:	4293      	cmp	r3, r2
 801370a:	dd03      	ble.n	8013714 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801370c:	3b01      	subs	r3, #1
 801370e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013712:	e7f7      	b.n	8013704 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013718 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	4d16      	ldr	r5, [pc, #88]	; (8013774 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801371c:	4604      	mov	r4, r0
 801371e:	6828      	ldr	r0, [r5, #0]
 8013720:	b140      	cbz	r0, 8013734 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013722:	7a03      	ldrb	r3, [r0, #8]
 8013724:	b933      	cbnz	r3, 8013734 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013726:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801372a:	6803      	ldr	r3, [r0, #0]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013732:	4718      	bx	r3
 8013734:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8013738:	4e0f      	ldr	r6, [pc, #60]	; (8013778 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801373a:	b973      	cbnz	r3, 801375a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801373c:	b168      	cbz	r0, 801375a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801373e:	7a03      	ldrb	r3, [r0, #8]
 8013740:	b15b      	cbz	r3, 801375a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013742:	6830      	ldr	r0, [r6, #0]
 8013744:	b110      	cbz	r0, 801374c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013746:	6803      	ldr	r3, [r0, #0]
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	4798      	blx	r3
 801374c:	6828      	ldr	r0, [r5, #0]
 801374e:	6803      	ldr	r3, [r0, #0]
 8013750:	68db      	ldr	r3, [r3, #12]
 8013752:	4798      	blx	r3
 8013754:	2301      	movs	r3, #1
 8013756:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801375a:	3404      	adds	r4, #4
 801375c:	4620      	mov	r0, r4
 801375e:	f7ff ff5f 	bl	8013620 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8013762:	4620      	mov	r0, r4
 8013764:	f7ff ffa0 	bl	80136a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013768:	6830      	ldr	r0, [r6, #0]
 801376a:	b110      	cbz	r0, 8013772 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801376c:	6803      	ldr	r3, [r0, #0]
 801376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013770:	e7dd      	b.n	801372e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8013772:	bd70      	pop	{r4, r5, r6, pc}
 8013774:	2001fde4 	.word	0x2001fde4
 8013778:	2001fde0 	.word	0x2001fde0

0801377c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801377c:	4603      	mov	r3, r0
 801377e:	2200      	movs	r2, #0
 8013780:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8013784:	801a      	strh	r2, [r3, #0]
 8013786:	805a      	strh	r2, [r3, #2]
 8013788:	809a      	strh	r2, [r3, #4]
 801378a:	80da      	strh	r2, [r3, #6]
 801378c:	3308      	adds	r3, #8
 801378e:	428b      	cmp	r3, r1
 8013790:	d1f8      	bne.n	8013784 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8013792:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013796:	4770      	bx	lr

08013798 <_ZN8touchgfx11ApplicationC1Ev>:
 8013798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379a:	4606      	mov	r6, r0
 801379c:	4604      	mov	r4, r0
 801379e:	2500      	movs	r5, #0
 80137a0:	4b1b      	ldr	r3, [pc, #108]	; (8013810 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80137a2:	22a8      	movs	r2, #168	; 0xa8
 80137a4:	f846 3b04 	str.w	r3, [r6], #4
 80137a8:	2100      	movs	r1, #0
 80137aa:	4630      	mov	r0, r6
 80137ac:	f00e fb21 	bl	8021df2 <memset>
 80137b0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80137b4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80137b8:	f7ff ffe0 	bl	801377c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80137bc:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80137c0:	f7ff ffdc 	bl	801377c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80137c4:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80137c8:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80137cc:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80137d0:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80137d4:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80137d8:	490e      	ldr	r1, [pc, #56]	; (8013814 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80137da:	480f      	ldr	r0, [pc, #60]	; (8013818 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80137dc:	f00e f84e 	bl	802187c <CRC_Lock>
 80137e0:	4f0e      	ldr	r7, [pc, #56]	; (801381c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80137e2:	4b0f      	ldr	r3, [pc, #60]	; (8013820 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80137e4:	b158      	cbz	r0, 80137fe <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80137e6:	801d      	strh	r5, [r3, #0]
 80137e8:	2300      	movs	r3, #0
 80137ea:	4a0e      	ldr	r2, [pc, #56]	; (8013824 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80137ec:	4630      	mov	r0, r6
 80137ee:	6013      	str	r3, [r2, #0]
 80137f0:	4a0d      	ldr	r2, [pc, #52]	; (8013828 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80137f2:	603b      	str	r3, [r7, #0]
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	f7ff ff32 	bl	801365e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80137fa:	4620      	mov	r0, r4
 80137fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013802:	2002      	movs	r0, #2
 8013804:	801a      	strh	r2, [r3, #0]
 8013806:	6038      	str	r0, [r7, #0]
 8013808:	f001 fa20 	bl	8014c4c <_ZN8touchgfx6Screen4drawEv>
 801380c:	e7ec      	b.n	80137e8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801380e:	bf00      	nop
 8013810:	08024418 	.word	0x08024418
 8013814:	b5e8b5cd 	.word	0xb5e8b5cd
 8013818:	f407a5c2 	.word	0xf407a5c2
 801381c:	2001fde0 	.word	0x2001fde0
 8013820:	2000001c 	.word	0x2000001c
 8013824:	2001fdf0 	.word	0x2001fdf0
 8013828:	2001fde4 	.word	0x2001fde4

0801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801382c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8013830:	b510      	push	{r4, lr}
 8013832:	3b01      	subs	r3, #1
 8013834:	b29b      	uxth	r3, r3
 8013836:	428b      	cmp	r3, r1
 8013838:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801383c:	d908      	bls.n	8013850 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801383e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013848:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801384c:	685a      	ldr	r2, [r3, #4]
 801384e:	6062      	str	r2, [r4, #4]
 8013850:	bd10      	pop	{r4, pc}
	...

08013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	4b8f      	ldr	r3, [pc, #572]	; (8013a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801385a:	b08f      	sub	sp, #60	; 0x3c
 801385c:	ac0a      	add	r4, sp, #40	; 0x28
 801385e:	e884 0006 	stmia.w	r4, {r1, r2}
 8013862:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013866:	4b8d      	ldr	r3, [pc, #564]	; (8013a9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8013868:	4683      	mov	fp, r0
 801386a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801386e:	4620      	mov	r0, r4
 8013870:	f7ff fe14 	bl	801349c <_ZN8touchgfx4Rect10restrictToEss>
 8013874:	4620      	mov	r0, r4
 8013876:	f7fd f8b2 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 801387a:	2800      	cmp	r0, #0
 801387c:	d16a      	bne.n	8013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801387e:	9403      	str	r4, [sp, #12]
 8013880:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8013884:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013888:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801388c:	35a4      	adds	r5, #164	; 0xa4
 801388e:	9301      	str	r3, [sp, #4]
 8013890:	b15c      	cbz	r4, 80138aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8013892:	4629      	mov	r1, r5
 8013894:	9803      	ldr	r0, [sp, #12]
 8013896:	f7ff fe51 	bl	801353c <_ZNK8touchgfx4Rect8includesERKS0_>
 801389a:	3c01      	subs	r4, #1
 801389c:	b118      	cbz	r0, 80138a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801389e:	b2a1      	uxth	r1, r4
 80138a0:	9801      	ldr	r0, [sp, #4]
 80138a2:	f7ff ffc3 	bl	801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80138a6:	3d08      	subs	r5, #8
 80138a8:	e7f2      	b.n	8013890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80138aa:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80138ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80138b2:	9302      	str	r3, [sp, #8]
 80138b4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80138b8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80138bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80138c0:	9306      	str	r3, [sp, #24]
 80138c2:	445c      	add	r4, fp
 80138c4:	2500      	movs	r5, #0
 80138c6:	4626      	mov	r6, r4
 80138c8:	462f      	mov	r7, r5
 80138ca:	f8cd 8014 	str.w	r8, [sp, #20]
 80138ce:	9b05      	ldr	r3, [sp, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d073      	beq.n	80139bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80138d4:	9903      	ldr	r1, [sp, #12]
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7ff fdbe 	bl	8013458 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80138dc:	b350      	cbz	r0, 8013934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80138de:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80138e2:	f9b6 c000 	ldrsh.w	ip, [r6]
 80138e6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80138ea:	45e6      	cmp	lr, ip
 80138ec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80138f0:	db33      	blt.n	801395a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80138f2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80138f6:	88b3      	ldrh	r3, [r6, #4]
 80138f8:	4472      	add	r2, lr
 80138fa:	4463      	add	r3, ip
 80138fc:	b212      	sxth	r2, r2
 80138fe:	b21b      	sxth	r3, r3
 8013900:	429a      	cmp	r2, r3
 8013902:	dc2a      	bgt.n	801395a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013904:	88f3      	ldrh	r3, [r6, #6]
 8013906:	fa1f f289 	uxth.w	r2, r9
 801390a:	4413      	add	r3, r2
 801390c:	b29b      	uxth	r3, r3
 801390e:	45ca      	cmp	sl, r9
 8013910:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8013914:	fa0f fe83 	sxth.w	lr, r3
 8013918:	fa1f fc8a 	uxth.w	ip, sl
 801391c:	db0f      	blt.n	801393e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801391e:	eba3 030c 	sub.w	r3, r3, ip
 8013922:	1ac9      	subs	r1, r1, r3
 8013924:	b209      	sxth	r1, r1
 8013926:	2900      	cmp	r1, #0
 8013928:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801392c:	dd12      	ble.n	8013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801392e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8013932:	4605      	mov	r5, r0
 8013934:	9b05      	ldr	r3, [sp, #20]
 8013936:	3e08      	subs	r6, #8
 8013938:	3b01      	subs	r3, #1
 801393a:	9305      	str	r3, [sp, #20]
 801393c:	e7c7      	b.n	80138ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801393e:	4461      	add	r1, ip
 8013940:	b209      	sxth	r1, r1
 8013942:	4571      	cmp	r1, lr
 8013944:	dc38      	bgt.n	80139b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013946:	eba2 020c 	sub.w	r2, r2, ip
 801394a:	b212      	sxth	r2, r2
 801394c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8013950:	2a00      	cmp	r2, #0
 8013952:	dcee      	bgt.n	8013932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013954:	b00f      	add	sp, #60	; 0x3c
 8013956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395a:	45ca      	cmp	sl, r9
 801395c:	db2c      	blt.n	80139b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801395e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8013962:	449a      	add	sl, r3
 8013964:	88f3      	ldrh	r3, [r6, #6]
 8013966:	fa0f fa8a 	sxth.w	sl, sl
 801396a:	4499      	add	r9, r3
 801396c:	fa0f f989 	sxth.w	r9, r9
 8013970:	45ca      	cmp	sl, r9
 8013972:	dc21      	bgt.n	80139b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013974:	88b3      	ldrh	r3, [r6, #4]
 8013976:	fa1f f28c 	uxth.w	r2, ip
 801397a:	4413      	add	r3, r2
 801397c:	b29b      	uxth	r3, r3
 801397e:	45e6      	cmp	lr, ip
 8013980:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013984:	fa1f f98e 	uxth.w	r9, lr
 8013988:	fa0f fa83 	sxth.w	sl, r3
 801398c:	db0a      	blt.n	80139a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801398e:	eba3 0309 	sub.w	r3, r3, r9
 8013992:	1ac9      	subs	r1, r1, r3
 8013994:	b209      	sxth	r1, r1
 8013996:	2900      	cmp	r1, #0
 8013998:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801399c:	ddda      	ble.n	8013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801399e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80139a2:	e7c6      	b.n	8013932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80139a4:	4449      	add	r1, r9
 80139a6:	b209      	sxth	r1, r1
 80139a8:	4551      	cmp	r1, sl
 80139aa:	dc05      	bgt.n	80139b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80139ac:	eba2 0209 	sub.w	r2, r2, r9
 80139b0:	b212      	sxth	r2, r2
 80139b2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80139b6:	e7cb      	b.n	8013950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80139b8:	4607      	mov	r7, r0
 80139ba:	e7bb      	b.n	8013934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80139bc:	2d00      	cmp	r5, #0
 80139be:	d181      	bne.n	80138c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80139c0:	2f00      	cmp	r7, #0
 80139c2:	f000 81de 	beq.w	8013d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80139c6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80139ca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80139ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80139d2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80139d6:	b2b9      	uxth	r1, r7
 80139d8:	b2b3      	uxth	r3, r6
 80139da:	441a      	add	r2, r3
 80139dc:	448a      	add	sl, r1
 80139de:	b292      	uxth	r2, r2
 80139e0:	fa1f fa8a 	uxth.w	sl, sl
 80139e4:	fa0f f882 	sxth.w	r8, r2
 80139e8:	9105      	str	r1, [sp, #20]
 80139ea:	fa0f f98a 	sxth.w	r9, sl
 80139ee:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80139f2:	9b04      	ldr	r3, [sp, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d053      	beq.n	8013aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80139f8:	9903      	ldr	r1, [sp, #12]
 80139fa:	4620      	mov	r0, r4
 80139fc:	f7ff fd2c 	bl	8013458 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013a00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a04:	b1c0      	cbz	r0, 8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a06:	f9b4 e000 	ldrsh.w	lr, [r4]
 8013a0a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013a0e:	4576      	cmp	r6, lr
 8013a10:	dc23      	bgt.n	8013a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013a12:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013a16:	44f4      	add	ip, lr
 8013a18:	fa0f fc8c 	sxth.w	ip, ip
 8013a1c:	45e0      	cmp	r8, ip
 8013a1e:	db1c      	blt.n	8013a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013a20:	428f      	cmp	r7, r1
 8013a22:	fa1f fc81 	uxth.w	ip, r1
 8013a26:	88e1      	ldrh	r1, [r4, #6]
 8013a28:	dc0d      	bgt.n	8013a46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8013a2a:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013a2e:	eba1 010c 	sub.w	r1, r1, ip
 8013a32:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013a36:	80e1      	strh	r1, [r4, #6]
 8013a38:	4628      	mov	r0, r5
 8013a3a:	9904      	ldr	r1, [sp, #16]
 8013a3c:	3c08      	subs	r4, #8
 8013a3e:	3901      	subs	r1, #1
 8013a40:	9104      	str	r1, [sp, #16]
 8013a42:	4605      	mov	r5, r0
 8013a44:	e7d3      	b.n	80139ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8013a46:	4461      	add	r1, ip
 8013a48:	b209      	sxth	r1, r1
 8013a4a:	4549      	cmp	r1, r9
 8013a4c:	dcf5      	bgt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a4e:	9905      	ldr	r1, [sp, #20]
 8013a50:	eba1 0c0c 	sub.w	ip, r1, ip
 8013a54:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013a58:	e7ee      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a5a:	428f      	cmp	r7, r1
 8013a5c:	dced      	bgt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a5e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8013a62:	4461      	add	r1, ip
 8013a64:	b209      	sxth	r1, r1
 8013a66:	4589      	cmp	r9, r1
 8013a68:	dbe7      	blt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a6a:	4576      	cmp	r6, lr
 8013a6c:	fa1f fc8e 	uxth.w	ip, lr
 8013a70:	88a1      	ldrh	r1, [r4, #4]
 8013a72:	dc07      	bgt.n	8013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8013a74:	eba2 0c0c 	sub.w	ip, r2, ip
 8013a78:	eba1 010c 	sub.w	r1, r1, ip
 8013a7c:	f8a4 8000 	strh.w	r8, [r4]
 8013a80:	80a1      	strh	r1, [r4, #4]
 8013a82:	e7d9      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a84:	4461      	add	r1, ip
 8013a86:	b209      	sxth	r1, r1
 8013a88:	4588      	cmp	r8, r1
 8013a8a:	dbd6      	blt.n	8013a3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013a8c:	eba3 0c0c 	sub.w	ip, r3, ip
 8013a90:	f8a4 c004 	strh.w	ip, [r4, #4]
 8013a94:	e7d0      	b.n	8013a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013a96:	bf00      	nop
 8013a98:	2001fd9a 	.word	0x2001fd9a
 8013a9c:	2001fd98 	.word	0x2001fd98
 8013aa0:	2d00      	cmp	r5, #0
 8013aa2:	f000 816e 	beq.w	8013d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013aa6:	9b06      	ldr	r3, [sp, #24]
 8013aa8:	445b      	add	r3, fp
 8013aaa:	461c      	mov	r4, r3
 8013aac:	9b02      	ldr	r3, [sp, #8]
 8013aae:	3301      	adds	r3, #1
 8013ab0:	f000 8167 	beq.w	8013d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013ab4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8013ab8:	4629      	mov	r1, r5
 8013aba:	9803      	ldr	r0, [sp, #12]
 8013abc:	f7ff fd3e 	bl	801353c <_ZNK8touchgfx4Rect8includesERKS0_>
 8013ac0:	b120      	cbz	r0, 8013acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8013ac2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8013ac6:	9801      	ldr	r0, [sp, #4]
 8013ac8:	f7ff feb0 	bl	801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013acc:	9903      	ldr	r1, [sp, #12]
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f7ff fcc2 	bl	8013458 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	f000 809c 	beq.w	8013c12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013ada:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8013ade:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013ae2:	fa1f f189 	uxth.w	r1, r9
 8013ae6:	eb01 0c03 	add.w	ip, r1, r3
 8013aea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013aee:	fa1f fa8c 	uxth.w	sl, ip
 8013af2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8013af6:	9309      	str	r3, [sp, #36]	; 0x24
 8013af8:	b283      	uxth	r3, r0
 8013afa:	eb03 050c 	add.w	r5, r3, ip
 8013afe:	b2ad      	uxth	r5, r5
 8013b00:	9505      	str	r5, [sp, #20]
 8013b02:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013b06:	4548      	cmp	r0, r9
 8013b08:	9504      	str	r5, [sp, #16]
 8013b0a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8013b0e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8013b12:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8013b16:	f340 8099 	ble.w	8013c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8013b1a:	1a5b      	subs	r3, r3, r1
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	4596      	cmp	lr, r2
 8013b20:	fa0f f08a 	sxth.w	r0, sl
 8013b24:	b21e      	sxth	r6, r3
 8013b26:	dd2e      	ble.n	8013b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013b28:	9f02      	ldr	r7, [sp, #8]
 8013b2a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8013b2e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013b32:	9f04      	ldr	r7, [sp, #16]
 8013b34:	fa1f fe8e 	uxth.w	lr, lr
 8013b38:	1a3f      	subs	r7, r7, r0
 8013b3a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8013b3e:	b292      	uxth	r2, r2
 8013b40:	ebae 0102 	sub.w	r1, lr, r2
 8013b44:	44a6      	add	lr, r4
 8013b46:	4402      	add	r2, r0
 8013b48:	b289      	uxth	r1, r1
 8013b4a:	fa0f fe8e 	sxth.w	lr, lr
 8013b4e:	b212      	sxth	r2, r2
 8013b50:	b20d      	sxth	r5, r1
 8013b52:	ebae 0202 	sub.w	r2, lr, r2
 8013b56:	436f      	muls	r7, r5
 8013b58:	4372      	muls	r2, r6
 8013b5a:	4297      	cmp	r7, r2
 8013b5c:	db09      	blt.n	8013b72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8013b5e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8013b62:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8013b66:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013b6a:	449c      	add	ip, r3
 8013b6c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013b70:	e686      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013b72:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8013b76:	4421      	add	r1, r4
 8013b78:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8013b7c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013b80:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013b84:	e67c      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013b86:	9f04      	ldr	r7, [sp, #16]
 8013b88:	42b8      	cmp	r0, r7
 8013b8a:	da27      	bge.n	8013bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013b8c:	9902      	ldr	r1, [sp, #8]
 8013b8e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8013b92:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013b96:	eb05 010e 	add.w	r1, r5, lr
 8013b9a:	fa1f f881 	uxth.w	r8, r1
 8013b9e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8013ba2:	fa0f f988 	sxth.w	r9, r8
 8013ba6:	4411      	add	r1, r2
 8013ba8:	eba1 0108 	sub.w	r1, r1, r8
 8013bac:	b289      	uxth	r1, r1
 8013bae:	fa0f f881 	sxth.w	r8, r1
 8013bb2:	eba2 020e 	sub.w	r2, r2, lr
 8013bb6:	1a3f      	subs	r7, r7, r0
 8013bb8:	4372      	muls	r2, r6
 8013bba:	fb08 f707 	mul.w	r7, r8, r7
 8013bbe:	42ba      	cmp	r2, r7
 8013bc0:	dc06      	bgt.n	8013bd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8013bc2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8013bc6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8013bca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8013bce:	e7ca      	b.n	8013b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8013bd0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8013bd4:	4429      	add	r1, r5
 8013bd6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013bda:	e651      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013bdc:	9805      	ldr	r0, [sp, #20]
 8013bde:	2d06      	cmp	r5, #6
 8013be0:	ebaa 0000 	sub.w	r0, sl, r0
 8013be4:	b280      	uxth	r0, r0
 8013be6:	fa0f fe80 	sxth.w	lr, r0
 8013bea:	d817      	bhi.n	8013c1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013bf2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8013bf6:	1c6b      	adds	r3, r5, #1
 8013bf8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8013bfc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013c00:	9b01      	ldr	r3, [sp, #4]
 8013c02:	9801      	ldr	r0, [sp, #4]
 8013c04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013c08:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013c0c:	805a      	strh	r2, [r3, #2]
 8013c0e:	809e      	strh	r6, [r3, #4]
 8013c10:	80d9      	strh	r1, [r3, #6]
 8013c12:	9b02      	ldr	r3, [sp, #8]
 8013c14:	3c08      	subs	r4, #8
 8013c16:	3b01      	subs	r3, #1
 8013c18:	9302      	str	r3, [sp, #8]
 8013c1a:	e747      	b.n	8013aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8013c1c:	9a02      	ldr	r2, [sp, #8]
 8013c1e:	45b6      	cmp	lr, r6
 8013c20:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013c24:	db0d      	blt.n	8013c42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013c26:	449c      	add	ip, r3
 8013c28:	fa1f fc8c 	uxth.w	ip, ip
 8013c2c:	445a      	add	r2, fp
 8013c2e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013c32:	448c      	add	ip, r1
 8013c34:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8013c38:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8013c3c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8013c40:	e61e      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013c42:	445a      	add	r2, fp
 8013c44:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8013c48:	4484      	add	ip, r0
 8013c4a:	e78f      	b.n	8013b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013c4c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8013c50:	fa1f f18e 	uxth.w	r1, lr
 8013c54:	eb01 0806 	add.w	r8, r1, r6
 8013c58:	b293      	uxth	r3, r2
 8013c5a:	fa1f f888 	uxth.w	r8, r8
 8013c5e:	9306      	str	r3, [sp, #24]
 8013c60:	fa0f f388 	sxth.w	r3, r8
 8013c64:	9307      	str	r3, [sp, #28]
 8013c66:	9f06      	ldr	r7, [sp, #24]
 8013c68:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8013c6c:	4596      	cmp	lr, r2
 8013c6e:	443b      	add	r3, r7
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	9308      	str	r3, [sp, #32]
 8013c74:	da24      	bge.n	8013cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013c76:	9905      	ldr	r1, [sp, #20]
 8013c78:	eba3 0308 	sub.w	r3, r3, r8
 8013c7c:	ebaa 0401 	sub.w	r4, sl, r1
 8013c80:	b2a4      	uxth	r4, r4
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	b225      	sxth	r5, r4
 8013c86:	b219      	sxth	r1, r3
 8013c88:	eba2 020e 	sub.w	r2, r2, lr
 8013c8c:	eba9 0000 	sub.w	r0, r9, r0
 8013c90:	436a      	muls	r2, r5
 8013c92:	4348      	muls	r0, r1
 8013c94:	4282      	cmp	r2, r0
 8013c96:	9a02      	ldr	r2, [sp, #8]
 8013c98:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013c9c:	445a      	add	r2, fp
 8013c9e:	dc06      	bgt.n	8013cae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013ca0:	9b07      	ldr	r3, [sp, #28]
 8013ca2:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8013ca6:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8013caa:	44a4      	add	ip, r4
 8013cac:	e75e      	b.n	8013b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013cae:	9904      	ldr	r1, [sp, #16]
 8013cb0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8013cb4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8013cb8:	4433      	add	r3, r6
 8013cba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013cbe:	e5df      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013cc0:	9f06      	ldr	r7, [sp, #24]
 8013cc2:	9b04      	ldr	r3, [sp, #16]
 8013cc4:	1bc9      	subs	r1, r1, r7
 8013cc6:	fa0f f78a 	sxth.w	r7, sl
 8013cca:	b289      	uxth	r1, r1
 8013ccc:	429f      	cmp	r7, r3
 8013cce:	fa0f fe81 	sxth.w	lr, r1
 8013cd2:	dd24      	ble.n	8013d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 8013cd4:	9a05      	ldr	r2, [sp, #20]
 8013cd6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013cda:	ebaa 0202 	sub.w	r2, sl, r2
 8013cde:	9d07      	ldr	r5, [sp, #28]
 8013ce0:	b292      	uxth	r2, r2
 8013ce2:	eba5 0a03 	sub.w	sl, r5, r3
 8013ce6:	b214      	sxth	r4, r2
 8013ce8:	eba9 0000 	sub.w	r0, r9, r0
 8013cec:	fb0e f000 	mul.w	r0, lr, r0
 8013cf0:	fb04 fa0a 	mul.w	sl, r4, sl
 8013cf4:	9b02      	ldr	r3, [sp, #8]
 8013cf6:	4550      	cmp	r0, sl
 8013cf8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013cfc:	445b      	add	r3, fp
 8013cfe:	db03      	blt.n	8013d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8013d00:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8013d04:	4494      	add	ip, r2
 8013d06:	e731      	b.n	8013b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013d08:	9a04      	ldr	r2, [sp, #16]
 8013d0a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8013d0e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013d12:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8013d16:	4431      	add	r1, r6
 8013d18:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013d1c:	e75b      	b.n	8013bd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8013d1e:	9b08      	ldr	r3, [sp, #32]
 8013d20:	2d06      	cmp	r5, #6
 8013d22:	eba3 0308 	sub.w	r3, r3, r8
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	b218      	sxth	r0, r3
 8013d2a:	d813      	bhi.n	8013d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8013d2c:	9b07      	ldr	r3, [sp, #28]
 8013d2e:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8013d32:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8013d36:	1c6b      	adds	r3, r5, #1
 8013d38:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013d3c:	9b01      	ldr	r3, [sp, #4]
 8013d3e:	9901      	ldr	r1, [sp, #4]
 8013d40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013d44:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013d48:	805a      	strh	r2, [r3, #2]
 8013d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d4c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013d50:	809a      	strh	r2, [r3, #4]
 8013d52:	e75e      	b.n	8013c12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013d54:	9c02      	ldr	r4, [sp, #8]
 8013d56:	4570      	cmp	r0, lr
 8013d58:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013d5c:	db0d      	blt.n	8013d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8013d5e:	4431      	add	r1, r6
 8013d60:	9b06      	ldr	r3, [sp, #24]
 8013d62:	b289      	uxth	r1, r1
 8013d64:	445c      	add	r4, fp
 8013d66:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013d6a:	4419      	add	r1, r3
 8013d6c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013d70:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8013d74:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8013d78:	e582      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013d7a:	445c      	add	r4, fp
 8013d7c:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8013d80:	e79a      	b.n	8013cb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013d82:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8013d86:	2e07      	cmp	r6, #7
 8013d88:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013d8c:	d812      	bhi.n	8013db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 8013d8e:	1c75      	adds	r5, r6, #1
 8013d90:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8013d94:	9d01      	ldr	r5, [sp, #4]
 8013d96:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013d9a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8013d9e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8013da2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8013da6:	442c      	add	r4, r5
 8013da8:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013dac:	8061      	strh	r1, [r4, #2]
 8013dae:	80a2      	strh	r2, [r4, #4]
 8013db0:	80e3      	strh	r3, [r4, #6]
 8013db2:	e5cf      	b.n	8013954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013db4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013db8:	f04f 37ff 	mov.w	r7, #4294967295
 8013dbc:	2500      	movs	r5, #0
 8013dbe:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013dc2:	3e01      	subs	r6, #1
 8013dc4:	445c      	add	r4, fp
 8013dc6:	9305      	str	r3, [sp, #20]
 8013dc8:	1e72      	subs	r2, r6, #1
 8013dca:	4691      	mov	r9, r2
 8013dcc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013dd0:	9302      	str	r3, [sp, #8]
 8013dd2:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8013dd6:	9304      	str	r3, [sp, #16]
 8013dd8:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8013ddc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013de0:	bf16      	itet	ne
 8013de2:	9905      	ldrne	r1, [sp, #20]
 8013de4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013de8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013dec:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013df0:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013df4:	6818      	ldr	r0, [r3, #0]
 8013df6:	fb18 f801 	smulbb	r8, r8, r1
 8013dfa:	6859      	ldr	r1, [r3, #4]
 8013dfc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013e00:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013e04:	4671      	mov	r1, lr
 8013e06:	a80c      	add	r0, sp, #48	; 0x30
 8013e08:	9207      	str	r2, [sp, #28]
 8013e0a:	9306      	str	r3, [sp, #24]
 8013e0c:	f7ff fbbc 	bl	8013588 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013e10:	f04f 0c08 	mov.w	ip, #8
 8013e14:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8013e18:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8013e1c:	9b04      	ldr	r3, [sp, #16]
 8013e1e:	9a02      	ldr	r2, [sp, #8]
 8013e20:	fb10 f001 	smulbb	r0, r0, r1
 8013e24:	fb02 8803 	mla	r8, r2, r3, r8
 8013e28:	eba0 0108 	sub.w	r1, r0, r8
 8013e2c:	fb90 f0fc 	sdiv	r0, r0, ip
 8013e30:	4288      	cmp	r0, r1
 8013e32:	dc20      	bgt.n	8013e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013e34:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013e38:	4551      	cmp	r1, sl
 8013e3a:	da03      	bge.n	8013e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8013e3c:	b1d9      	cbz	r1, 8013e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013e3e:	468a      	mov	sl, r1
 8013e40:	464f      	mov	r7, r9
 8013e42:	4635      	mov	r5, r6
 8013e44:	f109 39ff 	add.w	r9, r9, #4294967295
 8013e48:	f119 0f02 	cmn.w	r9, #2
 8013e4c:	d1c6      	bne.n	8013ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8013e4e:	4616      	mov	r6, r2
 8013e50:	3201      	adds	r2, #1
 8013e52:	f1a4 0408 	sub.w	r4, r4, #8
 8013e56:	d1b7      	bne.n	8013dc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8013e58:	9b01      	ldr	r3, [sp, #4]
 8013e5a:	b2ac      	uxth	r4, r5
 8013e5c:	00ed      	lsls	r5, r5, #3
 8013e5e:	1958      	adds	r0, r3, r5
 8013e60:	1c7b      	adds	r3, r7, #1
 8013e62:	d10b      	bne.n	8013e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8013e64:	4601      	mov	r1, r0
 8013e66:	9803      	ldr	r0, [sp, #12]
 8013e68:	f7ff fb8e 	bl	8013588 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	9801      	ldr	r0, [sp, #4]
 8013e70:	f7ff fcdc 	bl	801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013e74:	e504      	b.n	8013880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013e76:	464f      	mov	r7, r9
 8013e78:	4635      	mov	r5, r6
 8013e7a:	e7ed      	b.n	8013e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8013e7c:	9b01      	ldr	r3, [sp, #4]
 8013e7e:	00ff      	lsls	r7, r7, #3
 8013e80:	19d9      	adds	r1, r3, r7
 8013e82:	f7ff fb81 	bl	8013588 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013e86:	9b03      	ldr	r3, [sp, #12]
 8013e88:	445f      	add	r7, fp
 8013e8a:	cb03      	ldmia	r3!, {r0, r1}
 8013e8c:	445d      	add	r5, fp
 8013e8e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8013e92:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8013e96:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013e9a:	9b03      	ldr	r3, [sp, #12]
 8013e9c:	6869      	ldr	r1, [r5, #4]
 8013e9e:	c303      	stmia	r3!, {r0, r1}
 8013ea0:	e7e4      	b.n	8013e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 8013ea2:	bf00      	nop

08013ea4 <_ZN8touchgfx11Application10invalidateEv>:
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4b09      	ldr	r3, [pc, #36]	; (8013ecc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013ea8:	b082      	sub	sp, #8
 8013eaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013eae:	4b08      	ldr	r3, [pc, #32]	; (8013ed0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013eb0:	9100      	str	r1, [sp, #0]
 8013eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013eb6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013eba:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ebe:	ab02      	add	r3, sp, #8
 8013ec0:	e913 0006 	ldmdb	r3, {r1, r2}
 8013ec4:	b002      	add	sp, #8
 8013ec6:	f7ff bcc5 	b.w	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013eca:	bf00      	nop
 8013ecc:	2001fd98 	.word	0x2001fd98
 8013ed0:	2001fd9a 	.word	0x2001fd9a

08013ed4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8013edc:	b09b      	sub	sp, #108	; 0x6c
 8013ede:	4604      	mov	r4, r0
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f7fc fd7c 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	b940      	cbnz	r0, 8013efc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8013eea:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f7ff fcb0 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013ef4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013ef8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8013efc:	4bc9      	ldr	r3, [pc, #804]	; (8014224 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d03e      	beq.n	8013f82 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013f04:	4dc8      	ldr	r5, [pc, #800]	; (8014228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8013f06:	4628      	mov	r0, r5
 8013f08:	f7fc fd69 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f0c:	4606      	mov	r6, r0
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d137      	bne.n	8013f82 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013f12:	4628      	mov	r0, r5
 8013f14:	f7ff f9ee 	bl	80132f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013f18:	6829      	ldr	r1, [r5, #0]
 8013f1a:	686a      	ldr	r2, [r5, #4]
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	f7ff fc99 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f22:	802e      	strh	r6, [r5, #0]
 8013f24:	806e      	strh	r6, [r5, #2]
 8013f26:	80ae      	strh	r6, [r5, #4]
 8013f28:	80ee      	strh	r6, [r5, #6]
 8013f2a:	ae09      	add	r6, sp, #36	; 0x24
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7ff fc25 	bl	801377c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013f32:	4abe      	ldr	r2, [pc, #760]	; (801422c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013f34:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8013f38:	8815      	ldrh	r5, [r2, #0]
 8013f3a:	9202      	str	r2, [sp, #8]
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013f42:	429f      	cmp	r7, r3
 8013f44:	d924      	bls.n	8013f90 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8013f46:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8013f4a:	2907      	cmp	r1, #7
 8013f4c:	d816      	bhi.n	8013f7c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8013f4e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013f52:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8013f56:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013f5a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013f5e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8013f62:	1c4a      	adds	r2, r1, #1
 8013f64:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8013f68:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8013f6c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8013f70:	f8a2 9002 	strh.w	r9, [r2, #2]
 8013f74:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013f78:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	e7df      	b.n	8013f42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8013f82:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1cf      	bne.n	8013f2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8013f8a:	b01b      	add	sp, #108	; 0x6c
 8013f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f90:	462f      	mov	r7, r5
 8013f92:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8013f96:	42bb      	cmp	r3, r7
 8013f98:	d90b      	bls.n	8013fb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8013f9a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013f9e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8013fa2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	3701      	adds	r7, #1
 8013faa:	f7ff fc53 	bl	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013fae:	b2bf      	uxth	r7, r7
 8013fb0:	e7ef      	b.n	8013f92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8013fb2:	4a9f      	ldr	r2, [pc, #636]	; (8014230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8013fb4:	6813      	ldr	r3, [r2, #0]
 8013fb6:	4690      	mov	r8, r2
 8013fb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	f040 80e6 	bne.w	801418e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8013fc2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	2500      	movs	r5, #0
 8013fca:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8013fce:	33ae      	adds	r3, #174	; 0xae
 8013fd0:	428f      	cmp	r7, r1
 8013fd2:	f103 0308 	add.w	r3, r3, #8
 8013fd6:	dd0a      	ble.n	8013fee <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8013fd8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013fdc:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8013fe0:	3101      	adds	r1, #1
 8013fe2:	4402      	add	r2, r0
 8013fe4:	b212      	sxth	r2, r2
 8013fe6:	4295      	cmp	r5, r2
 8013fe8:	bfb8      	it	lt
 8013fea:	4615      	movlt	r5, r2
 8013fec:	e7f0      	b.n	8013fd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8013fee:	4b91      	ldr	r3, [pc, #580]	; (8014234 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8013ff0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8014230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	46d8      	mov	r8, fp
 8013ff8:	2b0f      	cmp	r3, #15
 8013ffa:	bf88      	it	hi
 8013ffc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8014000:	f04f 0300 	mov.w	r3, #0
 8014004:	bf98      	it	ls
 8014006:	f04f 0a01 	movls.w	sl, #1
 801400a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801400e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8014012:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014016:	4438      	add	r0, r7
 8014018:	b207      	sxth	r7, r0
 801401a:	f8db 0000 	ldr.w	r0, [fp]
 801401e:	42bd      	cmp	r5, r7
 8014020:	6803      	ldr	r3, [r0, #0]
 8014022:	f340 8084 	ble.w	801412e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801402a:	4798      	blx	r3
 801402c:	eb07 030a 	add.w	r3, r7, sl
 8014030:	4298      	cmp	r0, r3
 8014032:	da07      	bge.n	8014044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014034:	4285      	cmp	r5, r0
 8014036:	dd05      	ble.n	8014044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014038:	4287      	cmp	r7, r0
 801403a:	dd6d      	ble.n	8014118 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801403c:	2f00      	cmp	r7, #0
 801403e:	dd6b      	ble.n	8014118 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8014040:	4628      	mov	r0, r5
 8014042:	e004      	b.n	801404e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8014044:	4287      	cmp	r7, r0
 8014046:	dcfb      	bgt.n	8014040 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014048:	42a8      	cmp	r0, r5
 801404a:	bfa8      	it	ge
 801404c:	4628      	movge	r0, r5
 801404e:	2200      	movs	r2, #0
 8014050:	4b79      	ldr	r3, [pc, #484]	; (8014238 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8014052:	1bc0      	subs	r0, r0, r7
 8014054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014058:	f8ad 7016 	strh.w	r7, [sp, #22]
 801405c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014060:	9b02      	ldr	r3, [sp, #8]
 8014062:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014066:	881f      	ldrh	r7, [r3, #0]
 8014068:	f8ad 001a 	strh.w	r0, [sp, #26]
 801406c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014070:	42bb      	cmp	r3, r7
 8014072:	d9cc      	bls.n	801400e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014074:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8014078:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801407c:	ab07      	add	r3, sp, #28
 801407e:	6851      	ldr	r1, [r2, #4]
 8014080:	c303      	stmia	r3!, {r0, r1}
 8014082:	a905      	add	r1, sp, #20
 8014084:	a807      	add	r0, sp, #28
 8014086:	f7ff f9e7 	bl	8013458 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801408a:	2800      	cmp	r0, #0
 801408c:	d04c      	beq.n	8014128 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801408e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014092:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014096:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801409a:	4686      	mov	lr, r0
 801409c:	4290      	cmp	r0, r2
 801409e:	4448      	add	r0, r9
 80140a0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80140a4:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80140a8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80140ac:	bfb8      	it	lt
 80140ae:	4696      	movlt	lr, r2
 80140b0:	444a      	add	r2, r9
 80140b2:	4299      	cmp	r1, r3
 80140b4:	b280      	uxth	r0, r0
 80140b6:	b292      	uxth	r2, r2
 80140b8:	468c      	mov	ip, r1
 80140ba:	9303      	str	r3, [sp, #12]
 80140bc:	bfb8      	it	lt
 80140be:	469c      	movlt	ip, r3
 80140c0:	fa0f f982 	sxth.w	r9, r2
 80140c4:	b203      	sxth	r3, r0
 80140c6:	454b      	cmp	r3, r9
 80140c8:	bfb8      	it	lt
 80140ca:	4602      	movlt	r2, r0
 80140cc:	eba2 020e 	sub.w	r2, r2, lr
 80140d0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80140d4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80140d8:	9b03      	ldr	r3, [sp, #12]
 80140da:	4411      	add	r1, r2
 80140dc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80140e0:	b289      	uxth	r1, r1
 80140e2:	4413      	add	r3, r2
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	b208      	sxth	r0, r1
 80140e8:	b21a      	sxth	r2, r3
 80140ea:	4290      	cmp	r0, r2
 80140ec:	bfb8      	it	lt
 80140ee:	460b      	movlt	r3, r1
 80140f0:	eba3 030c 	sub.w	r3, r3, ip
 80140f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80140f8:	f8ad e01c 	strh.w	lr, [sp, #28]
 80140fc:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014100:	a807      	add	r0, sp, #28
 8014102:	f7fc fc6c 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8014106:	b920      	cbnz	r0, 8014112 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8014108:	6823      	ldr	r3, [r4, #0]
 801410a:	a907      	add	r1, sp, #28
 801410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801410e:	4620      	mov	r0, r4
 8014110:	4798      	blx	r3
 8014112:	3701      	adds	r7, #1
 8014114:	b2bf      	uxth	r7, r7
 8014116:	e7a9      	b.n	801406c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8014118:	f8d8 0000 	ldr.w	r0, [r8]
 801411c:	2101      	movs	r1, #1
 801411e:	6803      	ldr	r3, [r0, #0]
 8014120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014124:	4798      	blx	r3
 8014126:	e772      	b.n	801400e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014128:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801412c:	e7e8      	b.n	8014100 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014130:	4798      	blx	r3
 8014132:	4b42      	ldr	r3, [pc, #264]	; (801423c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	f43f af27 	beq.w	8013f8a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801413c:	2300      	movs	r3, #0
 801413e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8014142:	9b02      	ldr	r3, [sp, #8]
 8014144:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801414e:	429d      	cmp	r5, r3
 8014150:	f67f af1b 	bls.w	8013f8a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014154:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8014158:	2907      	cmp	r1, #7
 801415a:	d815      	bhi.n	8014188 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801415c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8014160:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014164:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014168:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801416c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8014170:	1c4a      	adds	r2, r1, #1
 8014172:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8014176:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801417a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801417e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8014182:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014186:	80d7      	strh	r7, [r2, #6]
 8014188:	3301      	adds	r3, #1
 801418a:	b29b      	uxth	r3, r3
 801418c:	e7df      	b.n	801414e <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801418e:	2b02      	cmp	r3, #2
 8014190:	f040 8136 	bne.w	8014400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8014194:	4b2a      	ldr	r3, [pc, #168]	; (8014240 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8014196:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	2b01      	cmp	r3, #1
 801419e:	f000 809c 	beq.w	80142da <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80141a2:	9b02      	ldr	r3, [sp, #8]
 80141a4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80141a8:	f8b3 b000 	ldrh.w	fp, [r3]
 80141ac:	f10b 0b01 	add.w	fp, fp, #1
 80141b0:	fa1f fb8b 	uxth.w	fp, fp
 80141b4:	2a00      	cmp	r2, #0
 80141b6:	d0bc      	beq.n	8014132 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80141b8:	4659      	mov	r1, fp
 80141ba:	f04f 0800 	mov.w	r8, #0
 80141be:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80141c2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80141c6:	441d      	add	r5, r3
 80141c8:	b22d      	sxth	r5, r5
 80141ca:	b28b      	uxth	r3, r1
 80141cc:	429a      	cmp	r2, r3
 80141ce:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80141d2:	f240 80c1 	bls.w	8014358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80141d6:	4427      	add	r7, r4
 80141d8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80141dc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80141e0:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80141e4:	4608      	mov	r0, r1
 80141e6:	4563      	cmp	r3, ip
 80141e8:	f340 80a3 	ble.w	8014332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80141ec:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80141f0:	4465      	add	r5, ip
 80141f2:	b22d      	sxth	r5, r5
 80141f4:	429d      	cmp	r5, r3
 80141f6:	bfa8      	it	ge
 80141f8:	461d      	movge	r5, r3
 80141fa:	3101      	adds	r1, #1
 80141fc:	4680      	mov	r8, r0
 80141fe:	e7e4      	b.n	80141ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014200:	d10b      	bne.n	801421a <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8014202:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8014206:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801420a:	458c      	cmp	ip, r1
 801420c:	bfb4      	ite	lt
 801420e:	469c      	movlt	ip, r3
 8014210:	46bc      	movge	ip, r7
 8014212:	4572      	cmp	r2, lr
 8014214:	bfb8      	it	lt
 8014216:	4672      	movlt	r2, lr
 8014218:	e088      	b.n	801432c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801421a:	428a      	cmp	r2, r1
 801421c:	bfb8      	it	lt
 801421e:	460a      	movlt	r2, r1
 8014220:	46bc      	mov	ip, r7
 8014222:	e083      	b.n	801432c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8014224:	2001fddc 	.word	0x2001fddc
 8014228:	2001fde8 	.word	0x2001fde8
 801422c:	2000001c 	.word	0x2000001c
 8014230:	2001fda4 	.word	0x2001fda4
 8014234:	2001fd9a 	.word	0x2001fd9a
 8014238:	2001fd98 	.word	0x2001fd98
 801423c:	2001fda2 	.word	0x2001fda2
 8014240:	2001fd9c 	.word	0x2001fd9c
 8014244:	1961      	adds	r1, r4, r5
 8014246:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801424a:	ab07      	add	r3, sp, #28
 801424c:	6849      	ldr	r1, [r1, #4]
 801424e:	c303      	stmia	r3!, {r0, r1}
 8014250:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014254:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014258:	2b13      	cmp	r3, #19
 801425a:	bfd8      	it	le
 801425c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8014260:	440b      	add	r3, r1
 8014262:	1a9b      	subs	r3, r3, r2
 8014264:	a807      	add	r0, sp, #28
 8014266:	f8ad 3020 	strh.w	r3, [sp, #32]
 801426a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801426e:	f7ff f85b 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014272:	a807      	add	r0, sp, #28
 8014274:	f7fc fbb3 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8014278:	bb78      	cbnz	r0, 80142da <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801427a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801427e:	f8d8 0000 	ldr.w	r0, [r8]
 8014282:	f1bc 0f14 	cmp.w	ip, #20
 8014286:	bfa8      	it	ge
 8014288:	f04f 0c14 	movge.w	ip, #20
 801428c:	f8d0 e000 	ldr.w	lr, [r0]
 8014290:	fa1f fc8c 	uxth.w	ip, ip
 8014294:	f8cd c000 	str.w	ip, [sp]
 8014298:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801429c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80142a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80142a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80142a8:	47d0      	blx	sl
 80142aa:	4682      	mov	sl, r0
 80142ac:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80142b0:	a807      	add	r0, sp, #28
 80142b2:	f7ff f81f 	bl	80132f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	4620      	mov	r0, r4
 80142ba:	4425      	add	r5, r4
 80142bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142be:	a907      	add	r1, sp, #28
 80142c0:	4798      	blx	r3
 80142c2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80142c6:	eba0 000a 	sub.w	r0, r0, sl
 80142ca:	b200      	sxth	r0, r0
 80142cc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80142d0:	b918      	cbnz	r0, 80142da <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80142d2:	b2b9      	uxth	r1, r7
 80142d4:	4648      	mov	r0, r9
 80142d6:	f7ff faa9 	bl	801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80142da:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80142de:	f1bb 0f00 	cmp.w	fp, #0
 80142e2:	f43f af26 	beq.w	8014132 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80142e6:	2700      	movs	r7, #0
 80142e8:	9b02      	ldr	r3, [sp, #8]
 80142ea:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80142ee:	881b      	ldrh	r3, [r3, #0]
 80142f0:	3301      	adds	r3, #1
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	b299      	uxth	r1, r3
 80142f6:	458b      	cmp	fp, r1
 80142f8:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80142fc:	d9a2      	bls.n	8014244 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80142fe:	4425      	add	r5, r4
 8014300:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8014304:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8014308:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801430c:	4408      	add	r0, r1
 801430e:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8014312:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8014316:	b200      	sxth	r0, r0
 8014318:	4471      	add	r1, lr
 801431a:	b209      	sxth	r1, r1
 801431c:	4288      	cmp	r0, r1
 801431e:	469c      	mov	ip, r3
 8014320:	f6bf af6e 	bge.w	8014200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8014324:	4586      	cmp	lr, r0
 8014326:	4672      	mov	r2, lr
 8014328:	bfb8      	it	lt
 801432a:	4602      	movlt	r2, r0
 801432c:	3301      	adds	r3, #1
 801432e:	4667      	mov	r7, ip
 8014330:	e7e0      	b.n	80142f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8014332:	d10c      	bne.n	801434e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8014334:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8014338:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801433c:	4287      	cmp	r7, r0
 801433e:	bfb4      	ite	lt
 8014340:	4608      	movlt	r0, r1
 8014342:	4640      	movge	r0, r8
 8014344:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8014348:	443b      	add	r3, r7
 801434a:	b21b      	sxth	r3, r3
 801434c:	e752      	b.n	80141f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801434e:	4565      	cmp	r5, ip
 8014350:	bfa8      	it	ge
 8014352:	4665      	movge	r5, ip
 8014354:	4640      	mov	r0, r8
 8014356:	e750      	b.n	80141fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8014358:	eb09 0007 	add.w	r0, r9, r7
 801435c:	4427      	add	r7, r4
 801435e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8014362:	9203      	str	r2, [sp, #12]
 8014364:	f1ba 0f13 	cmp.w	sl, #19
 8014368:	bfde      	ittt	le
 801436a:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801436e:	4455      	addle	r5, sl
 8014370:	b22d      	sxthle	r5, r5
 8014372:	f7fc fb34 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8014376:	9a03      	ldr	r2, [sp, #12]
 8014378:	2800      	cmp	r0, #0
 801437a:	f47f af1b 	bne.w	80141b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801437e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8014382:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014386:	1aad      	subs	r5, r5, r2
 8014388:	2d14      	cmp	r5, #20
 801438a:	bfa8      	it	ge
 801438c:	2514      	movge	r5, #20
 801438e:	4828      	ldr	r0, [pc, #160]	; (8014430 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8014390:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8014394:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8014398:	6800      	ldr	r0, [r0, #0]
 801439a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801439e:	f8ad 201e 	strh.w	r2, [sp, #30]
 80143a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80143a6:	f8d0 c000 	ldr.w	ip, [r0]
 80143aa:	b2ad      	uxth	r5, r5
 80143ac:	fa1f fa8a 	uxth.w	sl, sl
 80143b0:	4555      	cmp	r5, sl
 80143b2:	bf94      	ite	ls
 80143b4:	9500      	strls	r5, [sp, #0]
 80143b6:	f8cd a000 	strhi.w	sl, [sp]
 80143ba:	b292      	uxth	r2, r2
 80143bc:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	b289      	uxth	r1, r1
 80143c4:	47a8      	blx	r5
 80143c6:	6823      	ldr	r3, [r4, #0]
 80143c8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80143cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ce:	a907      	add	r1, sp, #28
 80143d0:	4620      	mov	r0, r4
 80143d2:	4798      	blx	r3
 80143d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80143d8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80143dc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80143e0:	1a5b      	subs	r3, r3, r1
 80143e2:	440a      	add	r2, r1
 80143e4:	b21b      	sxth	r3, r3
 80143e6:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80143ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f47f aed7 	bne.w	80141a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80143f4:	fa1f f188 	uxth.w	r1, r8
 80143f8:	4648      	mov	r0, r9
 80143fa:	f7ff fa17 	bl	801382c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80143fe:	e6d0      	b.n	80141a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8014400:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014404:	42ab      	cmp	r3, r5
 8014406:	f67f ae94 	bls.w	8014132 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801440a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801440e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014412:	ab07      	add	r3, sp, #28
 8014414:	6851      	ldr	r1, [r2, #4]
 8014416:	c303      	stmia	r3!, {r0, r1}
 8014418:	a807      	add	r0, sp, #28
 801441a:	f7fc fae0 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 801441e:	b920      	cbnz	r0, 801442a <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	a907      	add	r1, sp, #28
 8014424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014426:	4620      	mov	r0, r4
 8014428:	4798      	blx	r3
 801442a:	3501      	adds	r5, #1
 801442c:	b2ad      	uxth	r5, r5
 801442e:	e7e7      	b.n	8014400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8014430:	2001fda4 	.word	0x2001fda4

08014434 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014434:	2200      	movs	r2, #0
 8014436:	4b03      	ldr	r3, [pc, #12]	; (8014444 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014438:	801a      	strh	r2, [r3, #0]
 801443a:	805a      	strh	r2, [r3, #2]
 801443c:	809a      	strh	r2, [r3, #4]
 801443e:	80da      	strh	r2, [r3, #6]
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	2001fde8 	.word	0x2001fde8

08014448 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	4606      	mov	r6, r0
 801444e:	b09d      	sub	sp, #116	; 0x74
 8014450:	a803      	add	r0, sp, #12
 8014452:	4614      	mov	r4, r2
 8014454:	468a      	mov	sl, r1
 8014456:	461d      	mov	r5, r3
 8014458:	f000 fd72 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 801445c:	6833      	ldr	r3, [r6, #0]
 801445e:	4630      	mov	r0, r6
 8014460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014462:	4798      	blx	r3
 8014464:	6833      	ldr	r3, [r6, #0]
 8014466:	4607      	mov	r7, r0
 8014468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801446a:	4630      	mov	r0, r6
 801446c:	4798      	blx	r3
 801446e:	462a      	mov	r2, r5
 8014470:	2500      	movs	r5, #0
 8014472:	9000      	str	r0, [sp, #0]
 8014474:	4621      	mov	r1, r4
 8014476:	463b      	mov	r3, r7
 8014478:	a803      	add	r0, sp, #12
 801447a:	f000 fdb4 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801447e:	462c      	mov	r4, r5
 8014480:	46a9      	mov	r9, r5
 8014482:	46a8      	mov	r8, r5
 8014484:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8014488:	2300      	movs	r3, #0
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014490:	429c      	cmp	r4, r3
 8014492:	d002      	beq.n	801449a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014494:	455c      	cmp	r4, fp
 8014496:	bf18      	it	ne
 8014498:	4625      	movne	r5, r4
 801449a:	ab02      	add	r3, sp, #8
 801449c:	4632      	mov	r2, r6
 801449e:	4651      	mov	r1, sl
 80144a0:	a803      	add	r0, sp, #12
 80144a2:	f001 f88f 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144a6:	4604      	mov	r4, r0
 80144a8:	b108      	cbz	r0, 80144ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80144aa:	280a      	cmp	r0, #10
 80144ac:	d10a      	bne.n	80144c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80144ae:	45c1      	cmp	r9, r8
 80144b0:	bf38      	it	cc
 80144b2:	46c1      	movcc	r9, r8
 80144b4:	f04f 0800 	mov.w	r8, #0
 80144b8:	2c00      	cmp	r4, #0
 80144ba:	d1e5      	bne.n	8014488 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80144bc:	4648      	mov	r0, r9
 80144be:	b01d      	add	sp, #116	; 0x74
 80144c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c4:	9a02      	ldr	r2, [sp, #8]
 80144c6:	2a00      	cmp	r2, #0
 80144c8:	d0de      	beq.n	8014488 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80144ca:	7b57      	ldrb	r7, [r2, #13]
 80144cc:	6833      	ldr	r3, [r6, #0]
 80144ce:	007f      	lsls	r7, r7, #1
 80144d0:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80144d4:	7a97      	ldrb	r7, [r2, #10]
 80144d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144d8:	4307      	orrs	r7, r0
 80144da:	4629      	mov	r1, r5
 80144dc:	4630      	mov	r0, r6
 80144de:	8894      	ldrh	r4, [r2, #4]
 80144e0:	4798      	blx	r3
 80144e2:	4438      	add	r0, r7
 80144e4:	4480      	add	r8, r0
 80144e6:	fa1f f888 	uxth.w	r8, r8
 80144ea:	e7e5      	b.n	80144b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080144ec <_ZNK8touchgfx4Font12getCharWidthEt>:
 80144ec:	b508      	push	{r3, lr}
 80144ee:	6803      	ldr	r3, [r0, #0]
 80144f0:	68db      	ldr	r3, [r3, #12]
 80144f2:	4798      	blx	r3
 80144f4:	b128      	cbz	r0, 8014502 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80144f6:	7b43      	ldrb	r3, [r0, #13]
 80144f8:	7a80      	ldrb	r0, [r0, #10]
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014500:	4318      	orrs	r0, r3
 8014502:	bd08      	pop	{r3, pc}

08014504 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014504:	b40e      	push	{r1, r2, r3}
 8014506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014508:	4605      	mov	r5, r0
 801450a:	b09e      	sub	sp, #120	; 0x78
 801450c:	ab23      	add	r3, sp, #140	; 0x8c
 801450e:	f853 4b04 	ldr.w	r4, [r3], #4
 8014512:	a805      	add	r0, sp, #20
 8014514:	9303      	str	r3, [sp, #12]
 8014516:	f000 fd13 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 801451a:	682b      	ldr	r3, [r5, #0]
 801451c:	4628      	mov	r0, r5
 801451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014520:	4798      	blx	r3
 8014522:	682b      	ldr	r3, [r5, #0]
 8014524:	4606      	mov	r6, r0
 8014526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014528:	4628      	mov	r0, r5
 801452a:	4798      	blx	r3
 801452c:	4621      	mov	r1, r4
 801452e:	2400      	movs	r4, #0
 8014530:	4633      	mov	r3, r6
 8014532:	9000      	str	r0, [sp, #0]
 8014534:	9a03      	ldr	r2, [sp, #12]
 8014536:	ae1e      	add	r6, sp, #120	; 0x78
 8014538:	a805      	add	r0, sp, #20
 801453a:	f000 fd54 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801453e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8014542:	4633      	mov	r3, r6
 8014544:	462a      	mov	r2, r5
 8014546:	4621      	mov	r1, r4
 8014548:	a805      	add	r0, sp, #20
 801454a:	f001 f83b 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801454e:	b1f0      	cbz	r0, 801458e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8014550:	280a      	cmp	r0, #10
 8014552:	d018      	beq.n	8014586 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014554:	9f04      	ldr	r7, [sp, #16]
 8014556:	b1b7      	cbz	r7, 8014586 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014558:	7b78      	ldrb	r0, [r7, #13]
 801455a:	7a3b      	ldrb	r3, [r7, #8]
 801455c:	00c1      	lsls	r1, r0, #3
 801455e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014562:	4319      	orrs	r1, r3
 8014564:	0643      	lsls	r3, r0, #25
 8014566:	bf44      	itt	mi
 8014568:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801456c:	b219      	sxthmi	r1, r3
 801456e:	0100      	lsls	r0, r0, #4
 8014570:	79fb      	ldrb	r3, [r7, #7]
 8014572:	88ea      	ldrh	r2, [r5, #6]
 8014574:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014578:	4303      	orrs	r3, r0
 801457a:	4413      	add	r3, r2
 801457c:	1a5b      	subs	r3, r3, r1
 801457e:	b21b      	sxth	r3, r3
 8014580:	429c      	cmp	r4, r3
 8014582:	bfb8      	it	lt
 8014584:	461c      	movlt	r4, r3
 8014586:	4633      	mov	r3, r6
 8014588:	462a      	mov	r2, r5
 801458a:	2100      	movs	r1, #0
 801458c:	e7dc      	b.n	8014548 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801458e:	b2a0      	uxth	r0, r4
 8014590:	b01e      	add	sp, #120	; 0x78
 8014592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014596:	b003      	add	sp, #12
 8014598:	4770      	bx	lr

0801459a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801459a:	7a43      	ldrb	r3, [r0, #9]
 801459c:	8880      	ldrh	r0, [r0, #4]
 801459e:	4418      	add	r0, r3
 80145a0:	b280      	uxth	r0, r0
 80145a2:	4770      	bx	lr

080145a4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80145a4:	6803      	ldr	r3, [r0, #0]
 80145a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145a8:	4718      	bx	r3

080145aa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80145aa:	b40e      	push	{r1, r2, r3}
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	4604      	mov	r4, r0
 80145b0:	b09d      	sub	sp, #116	; 0x74
 80145b2:	ab21      	add	r3, sp, #132	; 0x84
 80145b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80145b8:	a803      	add	r0, sp, #12
 80145ba:	9302      	str	r3, [sp, #8]
 80145bc:	f000 fcc0 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 80145c0:	6823      	ldr	r3, [r4, #0]
 80145c2:	4620      	mov	r0, r4
 80145c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145c6:	4798      	blx	r3
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	4606      	mov	r6, r0
 80145cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145ce:	4620      	mov	r0, r4
 80145d0:	4798      	blx	r3
 80145d2:	4633      	mov	r3, r6
 80145d4:	9000      	str	r0, [sp, #0]
 80145d6:	9a02      	ldr	r2, [sp, #8]
 80145d8:	4629      	mov	r1, r5
 80145da:	a803      	add	r0, sp, #12
 80145dc:	f000 fd03 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80145e0:	a803      	add	r0, sp, #12
 80145e2:	f001 f8bd 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80145e6:	2401      	movs	r4, #1
 80145e8:	b2a3      	uxth	r3, r4
 80145ea:	b140      	cbz	r0, 80145fe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80145ec:	280a      	cmp	r0, #10
 80145ee:	bf08      	it	eq
 80145f0:	3301      	addeq	r3, #1
 80145f2:	a803      	add	r0, sp, #12
 80145f4:	bf08      	it	eq
 80145f6:	b21c      	sxtheq	r4, r3
 80145f8:	f001 f8b2 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80145fc:	e7f4      	b.n	80145e8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80145fe:	4618      	mov	r0, r3
 8014600:	b01d      	add	sp, #116	; 0x74
 8014602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014606:	b003      	add	sp, #12
 8014608:	4770      	bx	lr

0801460a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801460a:	b40e      	push	{r1, r2, r3}
 801460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801460e:	4604      	mov	r4, r0
 8014610:	b09e      	sub	sp, #120	; 0x78
 8014612:	ab23      	add	r3, sp, #140	; 0x8c
 8014614:	f853 5b04 	ldr.w	r5, [r3], #4
 8014618:	a805      	add	r0, sp, #20
 801461a:	9303      	str	r3, [sp, #12]
 801461c:	f000 fc90 	bl	8014f40 <_ZN8touchgfx12TextProviderC1Ev>
 8014620:	6823      	ldr	r3, [r4, #0]
 8014622:	4620      	mov	r0, r4
 8014624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014626:	4798      	blx	r3
 8014628:	6823      	ldr	r3, [r4, #0]
 801462a:	4606      	mov	r6, r0
 801462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801462e:	4620      	mov	r0, r4
 8014630:	4798      	blx	r3
 8014632:	4633      	mov	r3, r6
 8014634:	4629      	mov	r1, r5
 8014636:	9000      	str	r0, [sp, #0]
 8014638:	9a03      	ldr	r2, [sp, #12]
 801463a:	a805      	add	r0, sp, #20
 801463c:	f000 fcd3 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014640:	2100      	movs	r1, #0
 8014642:	ad1e      	add	r5, sp, #120	; 0x78
 8014644:	f845 1d68 	str.w	r1, [r5, #-104]!
 8014648:	462b      	mov	r3, r5
 801464a:	4622      	mov	r2, r4
 801464c:	a805      	add	r0, sp, #20
 801464e:	f000 ffb9 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014652:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8014656:	b1d8      	cbz	r0, 8014690 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8014658:	280a      	cmp	r0, #10
 801465a:	d012      	beq.n	8014682 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801465c:	9804      	ldr	r0, [sp, #16]
 801465e:	b180      	cbz	r0, 8014682 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8014660:	7b47      	ldrb	r7, [r0, #13]
 8014662:	88e2      	ldrh	r2, [r4, #6]
 8014664:	00fb      	lsls	r3, r7, #3
 8014666:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801466a:	7a03      	ldrb	r3, [r0, #8]
 801466c:	430b      	orrs	r3, r1
 801466e:	0679      	lsls	r1, r7, #25
 8014670:	bf44      	itt	mi
 8014672:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014676:	b21b      	sxthmi	r3, r3
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	b21b      	sxth	r3, r3
 801467c:	429e      	cmp	r6, r3
 801467e:	bfa8      	it	ge
 8014680:	461e      	movge	r6, r3
 8014682:	462b      	mov	r3, r5
 8014684:	4622      	mov	r2, r4
 8014686:	2100      	movs	r1, #0
 8014688:	a805      	add	r0, sp, #20
 801468a:	f000 ff9b 	bl	80155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801468e:	e7e2      	b.n	8014656 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8014690:	4630      	mov	r0, r6
 8014692:	b01e      	add	sp, #120	; 0x78
 8014694:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014698:	b003      	add	sp, #12
 801469a:	4770      	bx	lr

0801469c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801469c:	b513      	push	{r0, r1, r4, lr}
 801469e:	2400      	movs	r4, #0
 80146a0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80146a4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80146a8:	6803      	ldr	r3, [r0, #0]
 80146aa:	f8ad 1004 	strh.w	r1, [sp, #4]
 80146ae:	9400      	str	r4, [sp, #0]
 80146b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80146b4:	691b      	ldr	r3, [r3, #16]
 80146b6:	4669      	mov	r1, sp
 80146b8:	4798      	blx	r3
 80146ba:	b002      	add	sp, #8
 80146bc:	bd10      	pop	{r4, pc}

080146be <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80146be:	b538      	push	{r3, r4, r5, lr}
 80146c0:	460c      	mov	r4, r1
 80146c2:	4605      	mov	r5, r0
 80146c4:	680b      	ldr	r3, [r1, #0]
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	4798      	blx	r3
 80146ca:	6823      	ldr	r3, [r4, #0]
 80146cc:	4620      	mov	r0, r4
 80146ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d0:	4629      	mov	r1, r5
 80146d2:	4798      	blx	r3
 80146d4:	4628      	mov	r0, r5
 80146d6:	bd38      	pop	{r3, r4, r5, pc}

080146d8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80146d8:	b410      	push	{r4}
 80146da:	880a      	ldrh	r2, [r1, #0]
 80146dc:	8884      	ldrh	r4, [r0, #4]
 80146de:	4422      	add	r2, r4
 80146e0:	800a      	strh	r2, [r1, #0]
 80146e2:	88c4      	ldrh	r4, [r0, #6]
 80146e4:	884a      	ldrh	r2, [r1, #2]
 80146e6:	4422      	add	r2, r4
 80146e8:	804a      	strh	r2, [r1, #2]
 80146ea:	6940      	ldr	r0, [r0, #20]
 80146ec:	b120      	cbz	r0, 80146f8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80146ee:	6803      	ldr	r3, [r0, #0]
 80146f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f6:	4718      	bx	r3
 80146f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146fc:	4770      	bx	lr

080146fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80146fe:	b570      	push	{r4, r5, r6, lr}
 8014700:	460c      	mov	r4, r1
 8014702:	8882      	ldrh	r2, [r0, #4]
 8014704:	880b      	ldrh	r3, [r1, #0]
 8014706:	4605      	mov	r5, r0
 8014708:	4413      	add	r3, r2
 801470a:	800b      	strh	r3, [r1, #0]
 801470c:	88c2      	ldrh	r2, [r0, #6]
 801470e:	884b      	ldrh	r3, [r1, #2]
 8014710:	4413      	add	r3, r2
 8014712:	804b      	strh	r3, [r1, #2]
 8014714:	1d01      	adds	r1, r0, #4
 8014716:	4620      	mov	r0, r4
 8014718:	f7fc f91e 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 801471c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014720:	2b00      	cmp	r3, #0
 8014722:	dd0b      	ble.n	801473c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014724:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd07      	ble.n	801473c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801472c:	6968      	ldr	r0, [r5, #20]
 801472e:	b128      	cbz	r0, 801473c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014730:	6803      	ldr	r3, [r0, #0]
 8014732:	4621      	mov	r1, r4
 8014734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801473a:	4718      	bx	r3
 801473c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014740 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8014740:	b570      	push	{r4, r5, r6, lr}
 8014742:	460c      	mov	r4, r1
 8014744:	8882      	ldrh	r2, [r0, #4]
 8014746:	880b      	ldrh	r3, [r1, #0]
 8014748:	4605      	mov	r5, r0
 801474a:	4413      	add	r3, r2
 801474c:	800b      	strh	r3, [r1, #0]
 801474e:	88c2      	ldrh	r2, [r0, #6]
 8014750:	884b      	ldrh	r3, [r1, #2]
 8014752:	4413      	add	r3, r2
 8014754:	804b      	strh	r3, [r1, #2]
 8014756:	1d01      	adds	r1, r0, #4
 8014758:	4620      	mov	r0, r4
 801475a:	f7fc f8fd 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 801475e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	dd18      	ble.n	8014798 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014766:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801476a:	2b00      	cmp	r3, #0
 801476c:	dd14      	ble.n	8014798 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801476e:	6968      	ldr	r0, [r5, #20]
 8014770:	b128      	cbz	r0, 801477e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8014772:	6803      	ldr	r3, [r0, #0]
 8014774:	4621      	mov	r1, r4
 8014776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801477a:	691b      	ldr	r3, [r3, #16]
 801477c:	4718      	bx	r3
 801477e:	4b07      	ldr	r3, [pc, #28]	; (801479c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	3304      	adds	r3, #4
 8014784:	429d      	cmp	r5, r3
 8014786:	d107      	bne.n	8014798 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014788:	f7fe ff44 	bl	8013614 <_ZN8touchgfx11Application11getInstanceEv>
 801478c:	6821      	ldr	r1, [r4, #0]
 801478e:	6862      	ldr	r2, [r4, #4]
 8014790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014794:	f7ff b85e 	b.w	8013854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014798:	bd70      	pop	{r4, r5, r6, pc}
 801479a:	bf00      	nop
 801479c:	2001fde0 	.word	0x2001fde0

080147a0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	4604      	mov	r4, r0
 80147a4:	4616      	mov	r6, r2
 80147a6:	460d      	mov	r5, r1
 80147a8:	b901      	cbnz	r1, 80147ac <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80147aa:	b192      	cbz	r2, 80147d2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80147ac:	6823      	ldr	r3, [r4, #0]
 80147ae:	4620      	mov	r0, r4
 80147b0:	699b      	ldr	r3, [r3, #24]
 80147b2:	4798      	blx	r3
 80147b4:	88e2      	ldrh	r2, [r4, #6]
 80147b6:	88a1      	ldrh	r1, [r4, #4]
 80147b8:	4432      	add	r2, r6
 80147ba:	4429      	add	r1, r5
 80147bc:	4620      	mov	r0, r4
 80147be:	b212      	sxth	r2, r2
 80147c0:	b209      	sxth	r1, r1
 80147c2:	f7f9 fa60 	bl	800dc86 <_ZN8touchgfx8Drawable5setXYEss>
 80147c6:	6823      	ldr	r3, [r4, #0]
 80147c8:	4620      	mov	r0, r4
 80147ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	4718      	bx	r3
 80147d2:	bd70      	pop	{r4, r5, r6, pc}

080147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80147d4:	b510      	push	{r4, lr}
 80147d6:	2300      	movs	r3, #0
 80147d8:	4604      	mov	r4, r0
 80147da:	4608      	mov	r0, r1
 80147dc:	8023      	strh	r3, [r4, #0]
 80147de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80147e2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80147e6:	8063      	strh	r3, [r4, #2]
 80147e8:	6803      	ldr	r3, [r0, #0]
 80147ea:	80a1      	strh	r1, [r4, #4]
 80147ec:	80e2      	strh	r2, [r4, #6]
 80147ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f0:	4621      	mov	r1, r4
 80147f2:	4798      	blx	r3
 80147f4:	4620      	mov	r0, r4
 80147f6:	bd10      	pop	{r4, pc}

080147f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80147f8:	b530      	push	{r4, r5, lr}
 80147fa:	8083      	strh	r3, [r0, #4]
 80147fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014800:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014804:	80c3      	strh	r3, [r0, #6]
 8014806:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801480a:	6141      	str	r1, [r0, #20]
 801480c:	7203      	strb	r3, [r0, #8]
 801480e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014812:	8302      	strh	r2, [r0, #24]
 8014814:	7243      	strb	r3, [r0, #9]
 8014816:	7a83      	ldrb	r3, [r0, #10]
 8014818:	f365 0306 	bfi	r3, r5, #0, #7
 801481c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014820:	f365 13c7 	bfi	r3, r5, #7, #1
 8014824:	7283      	strb	r3, [r0, #10]
 8014826:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801482a:	72c3      	strb	r3, [r0, #11]
 801482c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014830:	7303      	strb	r3, [r0, #12]
 8014832:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014836:	81c3      	strh	r3, [r0, #14]
 8014838:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801483c:	8203      	strh	r3, [r0, #16]
 801483e:	4b01      	ldr	r3, [pc, #4]	; (8014844 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8014840:	6003      	str	r3, [r0, #0]
 8014842:	bd30      	pop	{r4, r5, pc}
 8014844:	080244cc 	.word	0x080244cc

08014848 <_ZNK8touchgfx9ConstFont4findEt>:
 8014848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801484a:	6944      	ldr	r4, [r0, #20]
 801484c:	b3bc      	cbz	r4, 80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801484e:	88a3      	ldrh	r3, [r4, #4]
 8014850:	8b02      	ldrh	r2, [r0, #24]
 8014852:	1acb      	subs	r3, r1, r3
 8014854:	f102 32ff 	add.w	r2, r2, #4294967295
 8014858:	d431      	bmi.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801485a:	4293      	cmp	r3, r2
 801485c:	dd0c      	ble.n	8014878 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801485e:	230e      	movs	r3, #14
 8014860:	fb03 4302 	mla	r3, r3, r2, r4
 8014864:	889b      	ldrh	r3, [r3, #4]
 8014866:	1a5b      	subs	r3, r3, r1
 8014868:	1ad3      	subs	r3, r2, r3
 801486a:	429a      	cmp	r2, r3
 801486c:	db27      	blt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801486e:	2b00      	cmp	r3, #0
 8014870:	bfbc      	itt	lt
 8014872:	2302      	movlt	r3, #2
 8014874:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014878:	2500      	movs	r5, #0
 801487a:	260e      	movs	r6, #14
 801487c:	4295      	cmp	r5, r2
 801487e:	dc1e      	bgt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014880:	fb06 4003 	mla	r0, r6, r3, r4
 8014884:	8887      	ldrh	r7, [r0, #4]
 8014886:	42b9      	cmp	r1, r7
 8014888:	d01a      	beq.n	80148c0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801488a:	d20d      	bcs.n	80148a8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801488c:	1e5a      	subs	r2, r3, #1
 801488e:	4295      	cmp	r5, r2
 8014890:	dc15      	bgt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014892:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014896:	1a5b      	subs	r3, r3, r1
 8014898:	1ad3      	subs	r3, r2, r3
 801489a:	429a      	cmp	r2, r3
 801489c:	db0f      	blt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801489e:	429d      	cmp	r5, r3
 80148a0:	ddec      	ble.n	801487c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80148a2:	1953      	adds	r3, r2, r5
 80148a4:	105b      	asrs	r3, r3, #1
 80148a6:	e7e9      	b.n	801487c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80148a8:	1c5d      	adds	r5, r3, #1
 80148aa:	42aa      	cmp	r2, r5
 80148ac:	db07      	blt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80148ae:	8a43      	ldrh	r3, [r0, #18]
 80148b0:	1acb      	subs	r3, r1, r3
 80148b2:	442b      	add	r3, r5
 80148b4:	429d      	cmp	r5, r3
 80148b6:	dc02      	bgt.n	80148be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80148b8:	429a      	cmp	r2, r3
 80148ba:	dadf      	bge.n	801487c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80148bc:	e7f1      	b.n	80148a2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80148be:	2000      	movs	r0, #0
 80148c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80148c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c4:	4604      	mov	r4, r0
 80148c6:	4617      	mov	r7, r2
 80148c8:	461e      	mov	r6, r3
 80148ca:	b911      	cbnz	r1, 80148d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80148cc:	2500      	movs	r5, #0
 80148ce:	4628      	mov	r0, r5
 80148d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d2:	290a      	cmp	r1, #10
 80148d4:	d0fa      	beq.n	80148cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80148d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80148da:	4291      	cmp	r1, r2
 80148dc:	d0f6      	beq.n	80148cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80148de:	f242 020b 	movw	r2, #8203	; 0x200b
 80148e2:	4291      	cmp	r1, r2
 80148e4:	d0f2      	beq.n	80148cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80148e6:	f7ff ffaf 	bl	8014848 <_ZNK8touchgfx9ConstFont4findEt>
 80148ea:	4605      	mov	r5, r0
 80148ec:	b950      	cbnz	r0, 8014904 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80148ee:	6823      	ldr	r3, [r4, #0]
 80148f0:	4620      	mov	r0, r4
 80148f2:	691b      	ldr	r3, [r3, #16]
 80148f4:	4798      	blx	r3
 80148f6:	4601      	mov	r1, r0
 80148f8:	4620      	mov	r0, r4
 80148fa:	f7ff ffa5 	bl	8014848 <_ZNK8touchgfx9ConstFont4findEt>
 80148fe:	4605      	mov	r5, r0
 8014900:	2800      	cmp	r0, #0
 8014902:	d0e3      	beq.n	80148cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	4629      	mov	r1, r5
 8014908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801490a:	4620      	mov	r0, r4
 801490c:	4798      	blx	r3
 801490e:	6038      	str	r0, [r7, #0]
 8014910:	6823      	ldr	r3, [r4, #0]
 8014912:	4620      	mov	r0, r4
 8014914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014916:	4798      	blx	r3
 8014918:	7030      	strb	r0, [r6, #0]
 801491a:	e7d8      	b.n	80148ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801491c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801491c:	2000      	movs	r0, #0
 801491e:	4770      	bx	lr

08014920 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014920:	2001      	movs	r0, #1
 8014922:	4770      	bx	lr

08014924 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8014924:	2002      	movs	r0, #2
 8014926:	4770      	bx	lr

08014928 <_ZN8touchgfx12GestureEventD1Ev>:
 8014928:	4770      	bx	lr

0801492a <_ZN8touchgfx9DragEventD1Ev>:
 801492a:	4770      	bx	lr

0801492c <_ZN8touchgfx10ClickEventD1Ev>:
 801492c:	4770      	bx	lr

0801492e <_ZN8touchgfx10ClickEventD0Ev>:
 801492e:	b510      	push	{r4, lr}
 8014930:	4604      	mov	r4, r0
 8014932:	210c      	movs	r1, #12
 8014934:	f00d f8ab 	bl	8021a8e <_ZdlPvj>
 8014938:	4620      	mov	r0, r4
 801493a:	bd10      	pop	{r4, pc}

0801493c <_ZN8touchgfx9DragEventD0Ev>:
 801493c:	b510      	push	{r4, lr}
 801493e:	4604      	mov	r4, r0
 8014940:	2110      	movs	r1, #16
 8014942:	f00d f8a4 	bl	8021a8e <_ZdlPvj>
 8014946:	4620      	mov	r0, r4
 8014948:	bd10      	pop	{r4, pc}

0801494a <_ZN8touchgfx12GestureEventD0Ev>:
 801494a:	b510      	push	{r4, lr}
 801494c:	4604      	mov	r4, r0
 801494e:	210c      	movs	r1, #12
 8014950:	f00d f89d 	bl	8021a8e <_ZdlPvj>
 8014954:	4620      	mov	r0, r4
 8014956:	bd10      	pop	{r4, pc}

08014958 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014958:	b530      	push	{r4, r5, lr}
 801495a:	460d      	mov	r5, r1
 801495c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801495e:	b087      	sub	sp, #28
 8014960:	4604      	mov	r4, r0
 8014962:	b301      	cbz	r1, 80149a6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8014964:	a801      	add	r0, sp, #4
 8014966:	f7ff ff35 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801496a:	892a      	ldrh	r2, [r5, #8]
 801496c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014970:	7928      	ldrb	r0, [r5, #4]
 8014972:	1ad2      	subs	r2, r2, r3
 8014974:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014976:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801497a:	441a      	add	r2, r3
 801497c:	896b      	ldrh	r3, [r5, #10]
 801497e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014982:	f88d 0010 	strb.w	r0, [sp, #16]
 8014986:	1b5b      	subs	r3, r3, r5
 8014988:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801498a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801498c:	442b      	add	r3, r5
 801498e:	4d07      	ldr	r5, [pc, #28]	; (80149ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014990:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014994:	9503      	str	r5, [sp, #12]
 8014996:	f8ad 2014 	strh.w	r2, [sp, #20]
 801499a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801499e:	6803      	ldr	r3, [r0, #0]
 80149a0:	a903      	add	r1, sp, #12
 80149a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149a4:	4798      	blx	r3
 80149a6:	b007      	add	sp, #28
 80149a8:	bd30      	pop	{r4, r5, pc}
 80149aa:	bf00      	nop
 80149ac:	08024554 	.word	0x08024554

080149b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80149b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80149b6:	b08a      	sub	sp, #40	; 0x28
 80149b8:	4604      	mov	r4, r0
 80149ba:	460d      	mov	r5, r1
 80149bc:	b113      	cbz	r3, 80149c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80149be:	790b      	ldrb	r3, [r1, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d044      	beq.n	8014a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80149c4:	f104 0804 	add.w	r8, r4, #4
 80149c8:	4641      	mov	r1, r8
 80149ca:	a803      	add	r0, sp, #12
 80149cc:	f7ff ff02 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80149d0:	792b      	ldrb	r3, [r5, #4]
 80149d2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80149d6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80149da:	b983      	cbnz	r3, 80149fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80149dc:	892a      	ldrh	r2, [r5, #8]
 80149de:	88e9      	ldrh	r1, [r5, #6]
 80149e0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80149e4:	1b92      	subs	r2, r2, r6
 80149e6:	1bc9      	subs	r1, r1, r7
 80149e8:	9301      	str	r3, [sp, #4]
 80149ea:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	b212      	sxth	r2, r2
 80149f2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80149f6:	b209      	sxth	r1, r1
 80149f8:	4640      	mov	r0, r8
 80149fa:	f7fb fecd 	bl	8010798 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80149fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014a00:	b329      	cbz	r1, 8014a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014a02:	a805      	add	r0, sp, #20
 8014a04:	f7ff fee6 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a08:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014a0c:	792b      	ldrb	r3, [r5, #4]
 8014a0e:	1abf      	subs	r7, r7, r2
 8014a10:	88ea      	ldrh	r2, [r5, #6]
 8014a12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014a14:	4417      	add	r7, r2
 8014a16:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014a18:	f88d 3020 	strb.w	r3, [sp, #32]
 8014a1c:	4417      	add	r7, r2
 8014a1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014a22:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014a26:	1ab6      	subs	r6, r6, r2
 8014a28:	892a      	ldrh	r2, [r5, #8]
 8014a2a:	a907      	add	r1, sp, #28
 8014a2c:	4416      	add	r6, r2
 8014a2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014a30:	4416      	add	r6, r2
 8014a32:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014a36:	2600      	movs	r6, #0
 8014a38:	4a06      	ldr	r2, [pc, #24]	; (8014a54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014a3a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014a3e:	9207      	str	r2, [sp, #28]
 8014a40:	6803      	ldr	r3, [r0, #0]
 8014a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a44:	4798      	blx	r3
 8014a46:	792b      	ldrb	r3, [r5, #4]
 8014a48:	b10b      	cbz	r3, 8014a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014a4a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014a4e:	b00a      	add	sp, #40	; 0x28
 8014a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a54:	0802452c 	.word	0x0802452c

08014a58 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a5c:	460c      	mov	r4, r1
 8014a5e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014a60:	b088      	sub	sp, #32
 8014a62:	4605      	mov	r5, r0
 8014a64:	2900      	cmp	r1, #0
 8014a66:	d06d      	beq.n	8014b44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014a68:	4668      	mov	r0, sp
 8014a6a:	f7ff feb3 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a6e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8014a70:	88e3      	ldrh	r3, [r4, #6]
 8014a72:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014a76:	440b      	add	r3, r1
 8014a78:	b21b      	sxth	r3, r3
 8014a7a:	4543      	cmp	r3, r8
 8014a7c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014a80:	db31      	blt.n	8014ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014a82:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014a86:	44c4      	add	ip, r8
 8014a88:	fa0f fc8c 	sxth.w	ip, ip
 8014a8c:	4563      	cmp	r3, ip
 8014a8e:	da2a      	bge.n	8014ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014a90:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8014a92:	8926      	ldrh	r6, [r4, #8]
 8014a94:	4416      	add	r6, r2
 8014a96:	b236      	sxth	r6, r6
 8014a98:	42be      	cmp	r6, r7
 8014a9a:	db24      	blt.n	8014ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014a9c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014aa0:	4438      	add	r0, r7
 8014aa2:	b200      	sxth	r0, r0
 8014aa4:	4286      	cmp	r6, r0
 8014aa6:	da1e      	bge.n	8014ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014aa8:	8963      	ldrh	r3, [r4, #10]
 8014aaa:	4419      	add	r1, r3
 8014aac:	b209      	sxth	r1, r1
 8014aae:	4541      	cmp	r1, r8
 8014ab0:	db08      	blt.n	8014ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014ab2:	4561      	cmp	r1, ip
 8014ab4:	da06      	bge.n	8014ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014ab6:	89a3      	ldrh	r3, [r4, #12]
 8014ab8:	441a      	add	r2, r3
 8014aba:	b212      	sxth	r2, r2
 8014abc:	42ba      	cmp	r2, r7
 8014abe:	db01      	blt.n	8014ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014ac0:	4282      	cmp	r2, r0
 8014ac2:	db10      	blt.n	8014ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014ac4:	4b21      	ldr	r3, [pc, #132]	; (8014b4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014ac6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014ac8:	9304      	str	r3, [sp, #16]
 8014aca:	2302      	movs	r3, #2
 8014acc:	f88d 3014 	strb.w	r3, [sp, #20]
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ad6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ada:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ade:	6803      	ldr	r3, [r0, #0]
 8014ae0:	a904      	add	r1, sp, #16
 8014ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ae4:	4798      	blx	r3
 8014ae6:	1d29      	adds	r1, r5, #4
 8014ae8:	a802      	add	r0, sp, #8
 8014aea:	f7ff fe73 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014aee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014af2:	88e0      	ldrh	r0, [r4, #6]
 8014af4:	eba3 0808 	sub.w	r8, r3, r8
 8014af8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014afc:	7921      	ldrb	r1, [r4, #4]
 8014afe:	1bdf      	subs	r7, r3, r7
 8014b00:	b2bb      	uxth	r3, r7
 8014b02:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8014b06:	fa1f f888 	uxth.w	r8, r8
 8014b0a:	8922      	ldrh	r2, [r4, #8]
 8014b0c:	8967      	ldrh	r7, [r4, #10]
 8014b0e:	89a4      	ldrh	r4, [r4, #12]
 8014b10:	4440      	add	r0, r8
 8014b12:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8014b14:	4460      	add	r0, ip
 8014b16:	441a      	add	r2, r3
 8014b18:	44b8      	add	r8, r7
 8014b1a:	4423      	add	r3, r4
 8014b1c:	4c0c      	ldr	r4, [pc, #48]	; (8014b50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014b1e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014b22:	4433      	add	r3, r6
 8014b24:	4432      	add	r2, r6
 8014b26:	44e0      	add	r8, ip
 8014b28:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014b2a:	f88d 1014 	strb.w	r1, [sp, #20]
 8014b2e:	9404      	str	r4, [sp, #16]
 8014b30:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014b34:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014b38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014b3c:	6803      	ldr	r3, [r0, #0]
 8014b3e:	a904      	add	r1, sp, #16
 8014b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b42:	4798      	blx	r3
 8014b44:	b008      	add	sp, #32
 8014b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b4a:	bf00      	nop
 8014b4c:	0802452c 	.word	0x0802452c
 8014b50:	08024540 	.word	0x08024540

08014b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b56:	4604      	mov	r4, r0
 8014b58:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014b5c:	3201      	adds	r2, #1
 8014b5e:	d112      	bne.n	8014b86 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014b60:	2500      	movs	r5, #0
 8014b62:	9500      	str	r5, [sp, #0]
 8014b64:	466d      	mov	r5, sp
 8014b66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014b6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014b6e:	6803      	ldr	r3, [r0, #0]
 8014b70:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014b74:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014b78:	4629      	mov	r1, r5
 8014b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7c:	4798      	blx	r3
 8014b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b82:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b86:	4620      	mov	r0, r4
 8014b88:	b003      	add	sp, #12
 8014b8a:	bd30      	pop	{r4, r5, pc}

08014b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014b8c:	b513      	push	{r0, r1, r4, lr}
 8014b8e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014b92:	4604      	mov	r4, r0
 8014b94:	3301      	adds	r3, #1
 8014b96:	d109      	bne.n	8014bac <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014b98:	4601      	mov	r1, r0
 8014b9a:	4668      	mov	r0, sp
 8014b9c:	f7ff fe1a 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014ba0:	f8bd 3000 	ldrh.w	r3, [sp]
 8014ba4:	8423      	strh	r3, [r4, #32]
 8014ba6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014baa:	8463      	strh	r3, [r4, #34]	; 0x22
 8014bac:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014bb0:	b002      	add	sp, #8
 8014bb2:	bd10      	pop	{r4, pc}

08014bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014bb4:	b513      	push	{r0, r1, r4, lr}
 8014bb6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014bba:	4604      	mov	r4, r0
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	d109      	bne.n	8014bd4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014bc0:	4601      	mov	r1, r0
 8014bc2:	4668      	mov	r0, sp
 8014bc4:	f7ff fe06 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014bc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8014bcc:	8423      	strh	r3, [r4, #32]
 8014bce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014bd2:	8463      	strh	r3, [r4, #34]	; 0x22
 8014bd4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8014bd8:	b002      	add	sp, #8
 8014bda:	bd10      	pop	{r4, pc}

08014bdc <_ZN8touchgfx6ScreenC1Ev>:
 8014bdc:	b570      	push	{r4, r5, r6, lr}
 8014bde:	4605      	mov	r5, r0
 8014be0:	4b16      	ldr	r3, [pc, #88]	; (8014c3c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014be2:	2101      	movs	r1, #1
 8014be4:	f845 3b04 	str.w	r3, [r5], #4
 8014be8:	2300      	movs	r3, #0
 8014bea:	4604      	mov	r4, r0
 8014bec:	8103      	strh	r3, [r0, #8]
 8014bee:	8143      	strh	r3, [r0, #10]
 8014bf0:	8183      	strh	r3, [r0, #12]
 8014bf2:	81c3      	strh	r3, [r0, #14]
 8014bf4:	8203      	strh	r3, [r0, #16]
 8014bf6:	8243      	strh	r3, [r0, #18]
 8014bf8:	8283      	strh	r3, [r0, #20]
 8014bfa:	82c3      	strh	r3, [r0, #22]
 8014bfc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014c00:	6203      	str	r3, [r0, #32]
 8014c02:	8483      	strh	r3, [r0, #36]	; 0x24
 8014c04:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014c06:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014c0a:	4a0d      	ldr	r2, [pc, #52]	; (8014c40 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014c0c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8014c10:	6343      	str	r3, [r0, #52]	; 0x34
 8014c12:	4b0c      	ldr	r3, [pc, #48]	; (8014c44 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014c14:	6042      	str	r2, [r0, #4]
 8014c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014c1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8014c1c:	4a0a      	ldr	r2, [pc, #40]	; (8014c48 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014c1e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8014c22:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014c26:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	4798      	blx	r3
 8014c2e:	6863      	ldr	r3, [r4, #4]
 8014c30:	4628      	mov	r0, r5
 8014c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c34:	4631      	mov	r1, r6
 8014c36:	4798      	blx	r3
 8014c38:	4620      	mov	r0, r4
 8014c3a:	bd70      	pop	{r4, r5, r6, pc}
 8014c3c:	08024568 	.word	0x08024568
 8014c40:	08024018 	.word	0x08024018
 8014c44:	2001fd9a 	.word	0x2001fd9a
 8014c48:	2001fd98 	.word	0x2001fd98

08014c4c <_ZN8touchgfx6Screen4drawEv>:
 8014c4c:	b507      	push	{r0, r1, r2, lr}
 8014c4e:	2100      	movs	r1, #0
 8014c50:	4b08      	ldr	r3, [pc, #32]	; (8014c74 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014c52:	9100      	str	r1, [sp, #0]
 8014c54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c58:	4b07      	ldr	r3, [pc, #28]	; (8014c78 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014c5a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c62:	4669      	mov	r1, sp
 8014c64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014c68:	6803      	ldr	r3, [r0, #0]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	4798      	blx	r3
 8014c6e:	b003      	add	sp, #12
 8014c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c74:	2001fd98 	.word	0x2001fd98
 8014c78:	2001fd9a 	.word	0x2001fd9a

08014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014c84:	b089      	sub	sp, #36	; 0x24
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	4680      	mov	r8, r0
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	4615      	mov	r5, r2
 8014c8e:	dd0e      	ble.n	8014cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014c90:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	dd0a      	ble.n	8014cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014c98:	4628      	mov	r0, r5
 8014c9a:	f7ff ff5b 	bl	8014b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014c9e:	4621      	mov	r1, r4
 8014ca0:	f7fe fbda 	bl	8013458 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014ca4:	69eb      	ldr	r3, [r5, #28]
 8014ca6:	b928      	cbnz	r0, 8014cb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014ca8:	461d      	mov	r5, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d1f4      	bne.n	8014c98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014cae:	b009      	add	sp, #36	; 0x24
 8014cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cb4:	ae04      	add	r6, sp, #16
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f000 80b5 	beq.w	8014e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	a802      	add	r0, sp, #8
 8014cc4:	4798      	blx	r3
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f7ff ff60 	bl	8014b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014ccc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014cd0:	4407      	add	r7, r0
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7ff ff6e 	bl	8014bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014cd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014cdc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014ce0:	4418      	add	r0, r3
 8014ce2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014ce6:	4621      	mov	r1, r4
 8014ce8:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014cec:	b23f      	sxth	r7, r7
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014cf8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014cfc:	f7fb fe2c 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8014d00:	4628      	mov	r0, r5
 8014d02:	f7ff ff27 	bl	8014b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014d06:	4602      	mov	r2, r0
 8014d08:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014d0c:	ab06      	add	r3, sp, #24
 8014d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d12:	4611      	mov	r1, r2
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7fb fe1f 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8014d1a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014d1e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014d22:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014d26:	4299      	cmp	r1, r3
 8014d28:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014d2c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014d30:	d10b      	bne.n	8014d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014d32:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014d36:	4552      	cmp	r2, sl
 8014d38:	d107      	bne.n	8014d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014d3a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014d3e:	455a      	cmp	r2, fp
 8014d40:	d103      	bne.n	8014d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014d42:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014d46:	454a      	cmp	r2, r9
 8014d48:	d06d      	beq.n	8014e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014d4a:	f1bb 0f00 	cmp.w	fp, #0
 8014d4e:	dd65      	ble.n	8014e1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014d50:	f1b9 0f00 	cmp.w	r9, #0
 8014d54:	dd62      	ble.n	8014e1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014d56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014d5a:	fa1f f08a 	uxth.w	r0, sl
 8014d5e:	4552      	cmp	r2, sl
 8014d60:	9000      	str	r0, [sp, #0]
 8014d62:	da12      	bge.n	8014d8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014d64:	9301      	str	r3, [sp, #4]
 8014d66:	9b00      	ldr	r3, [sp, #0]
 8014d68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014d6c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014d70:	1a9a      	subs	r2, r3, r2
 8014d72:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014d76:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014d7a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014d7e:	69ea      	ldr	r2, [r5, #28]
 8014d80:	4631      	mov	r1, r6
 8014d82:	4640      	mov	r0, r8
 8014d84:	f7ff ff7a 	bl	8014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014d88:	9b01      	ldr	r3, [sp, #4]
 8014d8a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014d8e:	b29f      	uxth	r7, r3
 8014d90:	429a      	cmp	r2, r3
 8014d92:	da0d      	bge.n	8014db0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014d94:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014d98:	1aba      	subs	r2, r7, r2
 8014d9a:	f8ad a012 	strh.w	sl, [sp, #18]
 8014d9e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014da2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014da6:	69ea      	ldr	r2, [r5, #28]
 8014da8:	4631      	mov	r1, r6
 8014daa:	4640      	mov	r0, r8
 8014dac:	f7ff ff66 	bl	8014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014db0:	8822      	ldrh	r2, [r4, #0]
 8014db2:	88a3      	ldrh	r3, [r4, #4]
 8014db4:	445f      	add	r7, fp
 8014db6:	4413      	add	r3, r2
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	b2bf      	uxth	r7, r7
 8014dbc:	b23a      	sxth	r2, r7
 8014dbe:	b219      	sxth	r1, r3
 8014dc0:	4291      	cmp	r1, r2
 8014dc2:	dd0d      	ble.n	8014de0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014dc4:	1bdb      	subs	r3, r3, r7
 8014dc6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014dca:	f8ad a012 	strh.w	sl, [sp, #18]
 8014dce:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014dd2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014dd6:	69ea      	ldr	r2, [r5, #28]
 8014dd8:	4631      	mov	r1, r6
 8014dda:	4640      	mov	r0, r8
 8014ddc:	f7ff ff4e 	bl	8014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014de0:	88e2      	ldrh	r2, [r4, #6]
 8014de2:	8863      	ldrh	r3, [r4, #2]
 8014de4:	4413      	add	r3, r2
 8014de6:	9a00      	ldr	r2, [sp, #0]
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	444a      	add	r2, r9
 8014dec:	fa1f f982 	uxth.w	r9, r2
 8014df0:	fa0f f289 	sxth.w	r2, r9
 8014df4:	b219      	sxth	r1, r3
 8014df6:	428a      	cmp	r2, r1
 8014df8:	da15      	bge.n	8014e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014dfa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014dfe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014e02:	eba3 0309 	sub.w	r3, r3, r9
 8014e06:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014e0a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014e0e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014e12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e16:	69ea      	ldr	r2, [r5, #28]
 8014e18:	4631      	mov	r1, r6
 8014e1a:	e001      	b.n	8014e20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014e1c:	4621      	mov	r1, r4
 8014e1e:	69ea      	ldr	r2, [r5, #28]
 8014e20:	4640      	mov	r0, r8
 8014e22:	f7ff ff2b 	bl	8014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e26:	4628      	mov	r0, r5
 8014e28:	f7ff fe94 	bl	8014b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014e2c:	4633      	mov	r3, r6
 8014e2e:	4602      	mov	r2, r0
 8014e30:	6861      	ldr	r1, [r4, #4]
 8014e32:	6820      	ldr	r0, [r4, #0]
 8014e34:	c303      	stmia	r3!, {r0, r1}
 8014e36:	4611      	mov	r1, r2
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f7fb fd8d 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8014e3e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f77f af33 	ble.w	8014cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014e48:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f77f af2e 	ble.w	8014cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014e52:	4628      	mov	r0, r5
 8014e54:	f7ff fe9a 	bl	8014b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014e58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014e5c:	1a18      	subs	r0, r3, r0
 8014e5e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014e62:	4628      	mov	r0, r5
 8014e64:	f7ff fea6 	bl	8014bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014e68:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014e6c:	4631      	mov	r1, r6
 8014e6e:	1a18      	subs	r0, r3, r0
 8014e70:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014e74:	682b      	ldr	r3, [r5, #0]
 8014e76:	4628      	mov	r0, r5
 8014e78:	689b      	ldr	r3, [r3, #8]
 8014e7a:	4798      	blx	r3
 8014e7c:	e717      	b.n	8014cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014e7e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014e7e:	b570      	push	{r4, r5, r6, lr}
 8014e80:	2300      	movs	r3, #0
 8014e82:	460c      	mov	r4, r1
 8014e84:	b086      	sub	sp, #24
 8014e86:	1d06      	adds	r6, r0, #4
 8014e88:	4631      	mov	r1, r6
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	a802      	add	r0, sp, #8
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	f7ff fca0 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014e98:	8822      	ldrh	r2, [r4, #0]
 8014e9a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014e9e:	1ad2      	subs	r2, r2, r3
 8014ea0:	8863      	ldrh	r3, [r4, #2]
 8014ea2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014ea6:	1a5b      	subs	r3, r3, r1
 8014ea8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014eac:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014eb0:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014eb4:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014eb8:	aa01      	add	r2, sp, #4
 8014eba:	a904      	add	r1, sp, #16
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014ec2:	f7fb fe21 	bl	8010b08 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014ec6:	9a01      	ldr	r2, [sp, #4]
 8014ec8:	b11a      	cbz	r2, 8014ed2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014eca:	4621      	mov	r1, r4
 8014ecc:	4628      	mov	r0, r5
 8014ece:	f7ff fed5 	bl	8014c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014ed2:	b006      	add	sp, #24
 8014ed4:	bd70      	pop	{r4, r5, r6, pc}

08014ed6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014ed6:	b530      	push	{r4, r5, lr}
 8014ed8:	4602      	mov	r2, r0
 8014eda:	b085      	sub	sp, #20
 8014edc:	460d      	mov	r5, r1
 8014ede:	466b      	mov	r3, sp
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014ee6:	6851      	ldr	r1, [r2, #4]
 8014ee8:	c303      	stmia	r3!, {r0, r1}
 8014eea:	4629      	mov	r1, r5
 8014eec:	4668      	mov	r0, sp
 8014eee:	f7fb fd33 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8014ef2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014ef6:	b12b      	cbz	r3, 8014f04 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014ef8:	4669      	mov	r1, sp
 8014efa:	4620      	mov	r0, r4
 8014efc:	f7ff ffbf 	bl	8014e7e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014f00:	b005      	add	sp, #20
 8014f02:	bd30      	pop	{r4, r5, pc}
 8014f04:	3404      	adds	r4, #4
 8014f06:	4621      	mov	r1, r4
 8014f08:	a802      	add	r0, sp, #8
 8014f0a:	f7ff fc63 	bl	80147d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014f12:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014f16:	4669      	mov	r1, sp
 8014f18:	1a9b      	subs	r3, r3, r2
 8014f1a:	f8ad 3000 	strh.w	r3, [sp]
 8014f1e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014f22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014f26:	4620      	mov	r0, r4
 8014f28:	1a9b      	subs	r3, r3, r2
 8014f2a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014f2e:	f7fb fdb2 	bl	8010a96 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014f32:	e7e5      	b.n	8014f00 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014f34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014f34:	460b      	mov	r3, r1
 8014f36:	680a      	ldr	r2, [r1, #0]
 8014f38:	1d01      	adds	r1, r0, #4
 8014f3a:	6992      	ldr	r2, [r2, #24]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	4710      	bx	r2

08014f40 <_ZN8touchgfx12TextProviderC1Ev>:
 8014f40:	b538      	push	{r3, r4, r5, lr}
 8014f42:	2500      	movs	r5, #0
 8014f44:	2302      	movs	r3, #2
 8014f46:	4604      	mov	r4, r0
 8014f48:	e9c0 5500 	strd	r5, r5, [r0]
 8014f4c:	7403      	strb	r3, [r0, #16]
 8014f4e:	6145      	str	r5, [r0, #20]
 8014f50:	7605      	strb	r5, [r0, #24]
 8014f52:	83c5      	strh	r5, [r0, #30]
 8014f54:	8405      	strh	r5, [r0, #32]
 8014f56:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014f58:	8705      	strh	r5, [r0, #56]	; 0x38
 8014f5a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8014f5c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8014f60:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8014f64:	220e      	movs	r2, #14
 8014f66:	4629      	mov	r1, r5
 8014f68:	304c      	adds	r0, #76	; 0x4c
 8014f6a:	f00c ff42 	bl	8021df2 <memset>
 8014f6e:	2301      	movs	r3, #1
 8014f70:	4620      	mov	r0, r4
 8014f72:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8014f76:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014f7a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8014f7e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8014f82:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8014f86:	f7f9 fcbd 	bl	800e904 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	bd38      	pop	{r3, r4, r5, pc}

08014f8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014f8e:	b530      	push	{r4, r5, lr}
 8014f90:	2500      	movs	r5, #0
 8014f92:	2401      	movs	r4, #1
 8014f94:	6843      	ldr	r3, [r0, #4]
 8014f96:	b913      	cbnz	r3, 8014f9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014f98:	6803      	ldr	r3, [r0, #0]
 8014f9a:	b313      	cbz	r3, 8014fe2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014f9c:	6043      	str	r3, [r0, #4]
 8014f9e:	7e03      	ldrb	r3, [r0, #24]
 8014fa0:	b143      	cbz	r3, 8014fb4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014fa2:	6943      	ldr	r3, [r0, #20]
 8014fa4:	b12b      	cbz	r3, 8014fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014fa6:	881a      	ldrh	r2, [r3, #0]
 8014fa8:	b11a      	cbz	r2, 8014fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014faa:	1c9a      	adds	r2, r3, #2
 8014fac:	6142      	str	r2, [r0, #20]
 8014fae:	8818      	ldrh	r0, [r3, #0]
 8014fb0:	bd30      	pop	{r4, r5, pc}
 8014fb2:	7605      	strb	r5, [r0, #24]
 8014fb4:	6843      	ldr	r3, [r0, #4]
 8014fb6:	8819      	ldrh	r1, [r3, #0]
 8014fb8:	b199      	cbz	r1, 8014fe2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014fba:	1c9a      	adds	r2, r3, #2
 8014fbc:	2902      	cmp	r1, #2
 8014fbe:	6042      	str	r2, [r0, #4]
 8014fc0:	d1f5      	bne.n	8014fae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014fc2:	7c03      	ldrb	r3, [r0, #16]
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d8e5      	bhi.n	8014f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fc8:	1c5a      	adds	r2, r3, #1
 8014fca:	7402      	strb	r2, [r0, #16]
 8014fcc:	3302      	adds	r3, #2
 8014fce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014fd2:	6143      	str	r3, [r0, #20]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d0dd      	beq.n	8014f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fd8:	881b      	ldrh	r3, [r3, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d0da      	beq.n	8014f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fde:	7604      	strb	r4, [r0, #24]
 8014fe0:	e7d8      	b.n	8014f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	e7e4      	b.n	8014fb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014fe6:	6001      	str	r1, [r0, #0]
 8014fe8:	2100      	movs	r1, #0
 8014fea:	b430      	push	{r4, r5}
 8014fec:	6041      	str	r1, [r0, #4]
 8014fee:	6815      	ldr	r5, [r2, #0]
 8014ff0:	6085      	str	r5, [r0, #8]
 8014ff2:	6852      	ldr	r2, [r2, #4]
 8014ff4:	6443      	str	r3, [r0, #68]	; 0x44
 8014ff6:	9b02      	ldr	r3, [sp, #8]
 8014ff8:	60c2      	str	r2, [r0, #12]
 8014ffa:	7401      	strb	r1, [r0, #16]
 8014ffc:	6141      	str	r1, [r0, #20]
 8014ffe:	7601      	strb	r1, [r0, #24]
 8015000:	8701      	strh	r1, [r0, #56]	; 0x38
 8015002:	8401      	strh	r1, [r0, #32]
 8015004:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015008:	6483      	str	r3, [r0, #72]	; 0x48
 801500a:	bc30      	pop	{r4, r5}
 801500c:	f7f9 bc7a 	b.w	800e904 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015012:	4605      	mov	r5, r0
 8015014:	4608      	mov	r0, r1
 8015016:	b1e9      	cbz	r1, 8015054 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8015018:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801501c:	460b      	mov	r3, r1
 801501e:	4622      	mov	r2, r4
 8015020:	f101 0708 	add.w	r7, r1, #8
 8015024:	4626      	mov	r6, r4
 8015026:	6818      	ldr	r0, [r3, #0]
 8015028:	6859      	ldr	r1, [r3, #4]
 801502a:	3308      	adds	r3, #8
 801502c:	c603      	stmia	r6!, {r0, r1}
 801502e:	42bb      	cmp	r3, r7
 8015030:	4634      	mov	r4, r6
 8015032:	d1f7      	bne.n	8015024 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015034:	6818      	ldr	r0, [r3, #0]
 8015036:	6030      	str	r0, [r6, #0]
 8015038:	4610      	mov	r0, r2
 801503a:	889b      	ldrh	r3, [r3, #4]
 801503c:	80b3      	strh	r3, [r6, #4]
 801503e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8015042:	015b      	lsls	r3, r3, #5
 8015044:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015048:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801504c:	430b      	orrs	r3, r1
 801504e:	425b      	negs	r3, r3
 8015050:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015056 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015056:	b538      	push	{r3, r4, r5, lr}
 8015058:	460c      	mov	r4, r1
 801505a:	6811      	ldr	r1, [r2, #0]
 801505c:	4610      	mov	r0, r2
 801505e:	68cd      	ldr	r5, [r1, #12]
 8015060:	4619      	mov	r1, r3
 8015062:	47a8      	blx	r5
 8015064:	2800      	cmp	r0, #0
 8015066:	bf08      	it	eq
 8015068:	4620      	moveq	r0, r4
 801506a:	bd38      	pop	{r3, r4, r5, pc}

0801506c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506e:	4604      	mov	r4, r0
 8015070:	4615      	mov	r5, r2
 8015072:	4608      	mov	r0, r1
 8015074:	b93a      	cbnz	r2, 8015086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015076:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801507a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801507e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015082:	4628      	mov	r0, r5
 8015084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015086:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801508a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801508e:	8893      	ldrh	r3, [r2, #4]
 8015090:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015094:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015098:	79ee      	ldrb	r6, [r5, #7]
 801509a:	4316      	orrs	r6, r2
 801509c:	19da      	adds	r2, r3, r7
 801509e:	b291      	uxth	r1, r2
 80150a0:	291d      	cmp	r1, #29
 80150a2:	b2b7      	uxth	r7, r6
 80150a4:	d879      	bhi.n	801519a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80150a6:	2201      	movs	r2, #1
 80150a8:	408a      	lsls	r2, r1
 80150aa:	4974      	ldr	r1, [pc, #464]	; (801527c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80150ac:	10f6      	asrs	r6, r6, #3
 80150ae:	420a      	tst	r2, r1
 80150b0:	d12d      	bne.n	801510e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 80150b2:	f412 7f60 	tst.w	r2, #896	; 0x380
 80150b6:	d070      	beq.n	801519a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80150b8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80150bc:	462b      	mov	r3, r5
 80150be:	f105 0e08 	add.w	lr, r5, #8
 80150c2:	4615      	mov	r5, r2
 80150c4:	4694      	mov	ip, r2
 80150c6:	6818      	ldr	r0, [r3, #0]
 80150c8:	6859      	ldr	r1, [r3, #4]
 80150ca:	3308      	adds	r3, #8
 80150cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80150d0:	4573      	cmp	r3, lr
 80150d2:	4662      	mov	r2, ip
 80150d4:	d1f6      	bne.n	80150c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80150d6:	6818      	ldr	r0, [r3, #0]
 80150d8:	f8cc 0000 	str.w	r0, [ip]
 80150dc:	889b      	ldrh	r3, [r3, #4]
 80150de:	f8ac 3004 	strh.w	r3, [ip, #4]
 80150e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80150e6:	b2b3      	uxth	r3, r6
 80150e8:	1aca      	subs	r2, r1, r3
 80150ea:	b292      	uxth	r2, r2
 80150ec:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80150f0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80150f4:	10d2      	asrs	r2, r2, #3
 80150f6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80150fa:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80150fe:	4302      	orrs	r2, r0
 8015100:	1bcf      	subs	r7, r1, r7
 8015102:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8015106:	1afb      	subs	r3, r7, r3
 8015108:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801510c:	e7b9      	b.n	8015082 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801510e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015110:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015114:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8015116:	f640 6333 	movw	r3, #3635	; 0xe33
 801511a:	4299      	cmp	r1, r3
 801511c:	d110      	bne.n	8015140 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801511e:	6803      	ldr	r3, [r0, #0]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	4798      	blx	r3
 8015124:	7b41      	ldrb	r1, [r0, #13]
 8015126:	00cb      	lsls	r3, r1, #3
 8015128:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801512c:	7a03      	ldrb	r3, [r0, #8]
 801512e:	0648      	lsls	r0, r1, #25
 8015130:	ea43 0302 	orr.w	r3, r3, r2
 8015134:	bf44      	itt	mi
 8015136:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801513a:	b21b      	sxthmi	r3, r3
 801513c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015140:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015144:	462a      	mov	r2, r5
 8015146:	443b      	add	r3, r7
 8015148:	4433      	add	r3, r6
 801514a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801514e:	f105 0c08 	add.w	ip, r5, #8
 8015152:	4635      	mov	r5, r6
 8015154:	b29b      	uxth	r3, r3
 8015156:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801515a:	4637      	mov	r7, r6
 801515c:	6810      	ldr	r0, [r2, #0]
 801515e:	6851      	ldr	r1, [r2, #4]
 8015160:	3208      	adds	r2, #8
 8015162:	c703      	stmia	r7!, {r0, r1}
 8015164:	4562      	cmp	r2, ip
 8015166:	463e      	mov	r6, r7
 8015168:	d1f7      	bne.n	801515a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801516a:	6810      	ldr	r0, [r2, #0]
 801516c:	6038      	str	r0, [r7, #0]
 801516e:	8892      	ldrh	r2, [r2, #4]
 8015170:	80ba      	strh	r2, [r7, #4]
 8015172:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015176:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801517a:	10db      	asrs	r3, r3, #3
 801517c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015184:	4313      	orrs	r3, r2
 8015186:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801518a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801518e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8015192:	1a9b      	subs	r3, r3, r2
 8015194:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015198:	e773      	b.n	8015082 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801519a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801519e:	f023 0204 	bic.w	r2, r3, #4
 80151a2:	428a      	cmp	r2, r1
 80151a4:	d003      	beq.n	80151ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80151a6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d120      	bne.n	80151f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 80151ae:	3b01      	subs	r3, #1
 80151b0:	4602      	mov	r2, r0
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	4629      	mov	r1, r5
 80151b6:	4620      	mov	r0, r4
 80151b8:	f7ff ff4d 	bl	8015056 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80151bc:	7b41      	ldrb	r1, [r0, #13]
 80151be:	00cb      	lsls	r3, r1, #3
 80151c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80151c4:	7a03      	ldrb	r3, [r0, #8]
 80151c6:	0649      	lsls	r1, r1, #25
 80151c8:	ea43 0302 	orr.w	r3, r3, r2
 80151cc:	bf44      	itt	mi
 80151ce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80151d2:	b21b      	sxthmi	r3, r3
 80151d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80151d8:	7b6b      	ldrb	r3, [r5, #13]
 80151da:	7aaa      	ldrb	r2, [r5, #10]
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151e2:	4313      	orrs	r3, r2
 80151e4:	115a      	asrs	r2, r3, #5
 80151e6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80151ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80151ee:	e036      	b.n	801525e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80151f0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80151f4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80151f8:	7a2a      	ldrb	r2, [r5, #8]
 80151fa:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80151fe:	ea42 0201 	orr.w	r2, r2, r1
 8015202:	f640 6109 	movw	r1, #3593	; 0xe09
 8015206:	bf1c      	itt	ne
 8015208:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801520c:	b212      	sxthne	r2, r2
 801520e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015212:	f023 0210 	bic.w	r2, r3, #16
 8015216:	428a      	cmp	r2, r1
 8015218:	d003      	beq.n	8015222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801521a:	f640 6213 	movw	r2, #3603	; 0xe13
 801521e:	4293      	cmp	r3, r2
 8015220:	d12a      	bne.n	8015278 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8015222:	7b6e      	ldrb	r6, [r5, #13]
 8015224:	4629      	mov	r1, r5
 8015226:	0076      	lsls	r6, r6, #1
 8015228:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801522c:	7aae      	ldrb	r6, [r5, #10]
 801522e:	4316      	orrs	r6, r2
 8015230:	f640 6213 	movw	r2, #3603	; 0xe13
 8015234:	4293      	cmp	r3, r2
 8015236:	bf18      	it	ne
 8015238:	f103 33ff 	addne.w	r3, r3, #4294967295
 801523c:	4602      	mov	r2, r0
 801523e:	bf14      	ite	ne
 8015240:	b29b      	uxthne	r3, r3
 8015242:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015246:	4620      	mov	r0, r4
 8015248:	f7ff ff05 	bl	8015056 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801524c:	7b43      	ldrb	r3, [r0, #13]
 801524e:	7a82      	ldrb	r2, [r0, #10]
 8015250:	005b      	lsls	r3, r3, #1
 8015252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015256:	4313      	orrs	r3, r2
 8015258:	1af6      	subs	r6, r6, r3
 801525a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801525e:	7b69      	ldrb	r1, [r5, #13]
 8015260:	00cb      	lsls	r3, r1, #3
 8015262:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015266:	7a2b      	ldrb	r3, [r5, #8]
 8015268:	4313      	orrs	r3, r2
 801526a:	064a      	lsls	r2, r1, #25
 801526c:	bf44      	itt	mi
 801526e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015272:	b21b      	sxthmi	r3, r3
 8015274:	1bdb      	subs	r3, r3, r7
 8015276:	e747      	b.n	8015108 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8015278:	2300      	movs	r3, #0
 801527a:	e7b6      	b.n	80151ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801527c:	3fc00079 	.word	0x3fc00079

08015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015284:	4604      	mov	r4, r0
 8015286:	b942      	cbnz	r2, 801529a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801528c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015290:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015294:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015298:	e047      	b.n	801532a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801529a:	7b51      	ldrb	r1, [r2, #13]
 801529c:	8893      	ldrh	r3, [r2, #4]
 801529e:	010d      	lsls	r5, r1, #4
 80152a0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80152a4:	79d5      	ldrb	r5, [r2, #7]
 80152a6:	4305      	orrs	r5, r0
 80152a8:	2d04      	cmp	r5, #4
 80152aa:	bfcc      	ite	gt
 80152ac:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80152b0:	f04f 0e01 	movle.w	lr, #1
 80152b4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80152b8:	f200 80ab 	bhi.w	8015412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80152bc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80152c0:	4283      	cmp	r3, r0
 80152c2:	d216      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152c4:	f240 605b 	movw	r0, #1627	; 0x65b
 80152c8:	4283      	cmp	r3, r0
 80152ca:	d859      	bhi.n	8015380 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80152cc:	f240 6057 	movw	r0, #1623	; 0x657
 80152d0:	4283      	cmp	r3, r0
 80152d2:	d20e      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152d4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80152d8:	d24a      	bcs.n	8015370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80152da:	f240 604e 	movw	r0, #1614	; 0x64e
 80152de:	4283      	cmp	r3, r0
 80152e0:	d207      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152e2:	f240 601a 	movw	r0, #1562	; 0x61a
 80152e6:	4283      	cmp	r3, r0
 80152e8:	d02a      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80152ea:	d821      	bhi.n	8015330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80152ec:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80152f0:	d35b      	bcc.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80152f2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80152f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80152fa:	f040 80d0 	bne.w	801549e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80152fe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015302:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015306:	f040 80ca 	bne.w	801549e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801530a:	00cb      	lsls	r3, r1, #3
 801530c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015310:	7a13      	ldrb	r3, [r2, #8]
 8015312:	0649      	lsls	r1, r1, #25
 8015314:	ea43 0300 	orr.w	r3, r3, r0
 8015318:	bf44      	itt	mi
 801531a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801531e:	b21b      	sxthmi	r3, r3
 8015320:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015324:	1b5d      	subs	r5, r3, r5
 8015326:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801532a:	4610      	mov	r0, r2
 801532c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015330:	f240 604b 	movw	r0, #1611	; 0x64b
 8015334:	4283      	cmp	r3, r0
 8015336:	d338      	bcc.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015338:	f240 604c 	movw	r0, #1612	; 0x64c
 801533c:	4283      	cmp	r3, r0
 801533e:	d9d8      	bls.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015340:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015344:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015348:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801534c:	f040 80f2 	bne.w	8015534 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8015350:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015354:	f040 80ee 	bne.w	8015534 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8015358:	00cb      	lsls	r3, r1, #3
 801535a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801535e:	7a13      	ldrb	r3, [r2, #8]
 8015360:	064e      	lsls	r6, r1, #25
 8015362:	ea43 0300 	orr.w	r3, r3, r0
 8015366:	bf44      	itt	mi
 8015368:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801536c:	b21b      	sxthmi	r3, r3
 801536e:	e7d9      	b.n	8015324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015370:	f240 6054 	movw	r0, #1620	; 0x654
 8015374:	4283      	cmp	r3, r0
 8015376:	d8e3      	bhi.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015378:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801537c:	d9e0      	bls.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801537e:	e7b8      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015380:	f240 6074 	movw	r0, #1652	; 0x674
 8015384:	4283      	cmp	r3, r0
 8015386:	d0b4      	beq.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015388:	d82d      	bhi.n	80153e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801538a:	f240 605e 	movw	r0, #1630	; 0x65e
 801538e:	4283      	cmp	r3, r0
 8015390:	d804      	bhi.n	801539c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015392:	f240 605d 	movw	r0, #1629	; 0x65d
 8015396:	4283      	cmp	r3, r0
 8015398:	d3d2      	bcc.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801539a:	e7aa      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801539c:	f240 605f 	movw	r0, #1631	; 0x65f
 80153a0:	4283      	cmp	r3, r0
 80153a2:	d0cd      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80153a4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80153a8:	d0a3      	beq.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153aa:	00cb      	lsls	r3, r1, #3
 80153ac:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80153b0:	7a13      	ldrb	r3, [r2, #8]
 80153b2:	0649      	lsls	r1, r1, #25
 80153b4:	ea43 0300 	orr.w	r3, r3, r0
 80153b8:	bf44      	itt	mi
 80153ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80153be:	b21b      	sxthmi	r3, r3
 80153c0:	1b5d      	subs	r5, r3, r5
 80153c2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80153c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80153ca:	7b53      	ldrb	r3, [r2, #13]
 80153cc:	015b      	lsls	r3, r3, #5
 80153ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80153d2:	7993      	ldrb	r3, [r2, #6]
 80153d4:	430b      	orrs	r3, r1
 80153d6:	2105      	movs	r1, #5
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	fb93 f3f1 	sdiv	r3, r3, r1
 80153de:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80153e2:	440b      	add	r3, r1
 80153e4:	e756      	b.n	8015294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80153e6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80153ea:	4283      	cmp	r3, r0
 80153ec:	d809      	bhi.n	8015402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80153ee:	f240 60df 	movw	r0, #1759	; 0x6df
 80153f2:	4283      	cmp	r3, r0
 80153f4:	f4bf af7d 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153f8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80153fc:	2b05      	cmp	r3, #5
 80153fe:	d8d4      	bhi.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015400:	e777      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015402:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015406:	4283      	cmp	r3, r0
 8015408:	d09a      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801540a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801540e:	4283      	cmp	r3, r0
 8015410:	e7ca      	b.n	80153a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015412:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015416:	d22b      	bcs.n	8015470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015418:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801541c:	4283      	cmp	r3, r0
 801541e:	d28f      	bcs.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015420:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015424:	4283      	cmp	r3, r0
 8015426:	d816      	bhi.n	8015456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015428:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801542c:	4283      	cmp	r3, r0
 801542e:	f4bf af60 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015432:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015436:	4283      	cmp	r3, r0
 8015438:	d80a      	bhi.n	8015450 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801543a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801543e:	4283      	cmp	r3, r0
 8015440:	f4bf af57 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015444:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8015448:	4283      	cmp	r3, r0
 801544a:	f43f af79 	beq.w	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801544e:	e7ac      	b.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015450:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015454:	e7f8      	b.n	8015448 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015456:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801545a:	4283      	cmp	r3, r0
 801545c:	d802      	bhi.n	8015464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801545e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015462:	e798      	b.n	8015396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015464:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8015468:	4283      	cmp	r3, r0
 801546a:	f47f af42 	bne.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801546e:	e767      	b.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015470:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8015474:	4283      	cmp	r3, r0
 8015476:	f43f af63 	beq.w	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801547a:	d802      	bhi.n	8015482 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801547c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8015480:	e7f2      	b.n	8015468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8015482:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8015486:	4283      	cmp	r3, r0
 8015488:	d805      	bhi.n	8015496 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801548a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801548e:	4283      	cmp	r3, r0
 8015490:	f4ff af2f 	bcc.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015494:	e754      	b.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015496:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801549a:	4283      	cmp	r3, r0
 801549c:	e7af      	b.n	80153fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801549e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80154a2:	4617      	mov	r7, r2
 80154a4:	4666      	mov	r6, ip
 80154a6:	f102 0808 	add.w	r8, r2, #8
 80154aa:	46e6      	mov	lr, ip
 80154ac:	6838      	ldr	r0, [r7, #0]
 80154ae:	6879      	ldr	r1, [r7, #4]
 80154b0:	3708      	adds	r7, #8
 80154b2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80154b6:	4547      	cmp	r7, r8
 80154b8:	46f4      	mov	ip, lr
 80154ba:	d1f6      	bne.n	80154aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80154bc:	6838      	ldr	r0, [r7, #0]
 80154be:	f8ce 0000 	str.w	r0, [lr]
 80154c2:	88b9      	ldrh	r1, [r7, #4]
 80154c4:	f8ae 1004 	strh.w	r1, [lr, #4]
 80154c8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80154cc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80154d0:	d009      	beq.n	80154e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80154d2:	7b51      	ldrb	r1, [r2, #13]
 80154d4:	7992      	ldrb	r2, [r2, #6]
 80154d6:	0149      	lsls	r1, r1, #5
 80154d8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80154dc:	4311      	orrs	r1, r2
 80154de:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80154e2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80154e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80154ea:	b2ad      	uxth	r5, r5
 80154ec:	d00d      	beq.n	801550a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80154ee:	442b      	add	r3, r5
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80154f6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80154fa:	10db      	asrs	r3, r3, #3
 80154fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015504:	4313      	orrs	r3, r2
 8015506:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801550a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801550e:	00cb      	lsls	r3, r1, #3
 8015510:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015514:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8015518:	064f      	lsls	r7, r1, #25
 801551a:	ea43 0302 	orr.w	r3, r3, r2
 801551e:	bf44      	itt	mi
 8015520:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015524:	b21b      	sxthmi	r3, r3
 8015526:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801552a:	1b5b      	subs	r3, r3, r5
 801552c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015530:	4632      	mov	r2, r6
 8015532:	e6fa      	b.n	801532a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015534:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8015538:	4617      	mov	r7, r2
 801553a:	4666      	mov	r6, ip
 801553c:	f102 0908 	add.w	r9, r2, #8
 8015540:	46e0      	mov	r8, ip
 8015542:	6838      	ldr	r0, [r7, #0]
 8015544:	6879      	ldr	r1, [r7, #4]
 8015546:	3708      	adds	r7, #8
 8015548:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801554c:	454f      	cmp	r7, r9
 801554e:	46c4      	mov	ip, r8
 8015550:	d1f6      	bne.n	8015540 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8015552:	6838      	ldr	r0, [r7, #0]
 8015554:	f8c8 0000 	str.w	r0, [r8]
 8015558:	88b9      	ldrh	r1, [r7, #4]
 801555a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801555e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015562:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015566:	d009      	beq.n	801557c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8015568:	7b51      	ldrb	r1, [r2, #13]
 801556a:	7992      	ldrb	r2, [r2, #6]
 801556c:	0149      	lsls	r1, r1, #5
 801556e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015572:	4311      	orrs	r1, r2
 8015574:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015578:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801557c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015580:	d00e      	beq.n	80155a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8015582:	eba3 030e 	sub.w	r3, r3, lr
 8015586:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801558a:	b29b      	uxth	r3, r3
 801558c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015590:	10db      	asrs	r3, r3, #3
 8015592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801559a:	4313      	orrs	r3, r2
 801559c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80155a0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80155a4:	00cb      	lsls	r3, r1, #3
 80155a6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80155aa:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80155ae:	0648      	lsls	r0, r1, #25
 80155b0:	ea43 0302 	orr.w	r3, r3, r2
 80155b4:	bf44      	itt	mi
 80155b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80155ba:	b21b      	sxthmi	r3, r3
 80155bc:	1b5d      	subs	r5, r3, r5
 80155be:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80155c2:	e7b5      	b.n	8015530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080155c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80155c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c8:	461e      	mov	r6, r3
 80155ca:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80155cc:	4604      	mov	r4, r0
 80155ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80155d2:	4617      	mov	r7, r2
 80155d4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80155d8:	f7f9 f8ee 	bl	800e7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80155dc:	4605      	mov	r5, r0
 80155de:	b918      	cbnz	r0, 80155e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80155e0:	6030      	str	r0, [r6, #0]
 80155e2:	4628      	mov	r0, r5
 80155e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	4601      	mov	r1, r0
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	4638      	mov	r0, r7
 80155f0:	4798      	blx	r3
 80155f2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80155f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80155fa:	4602      	mov	r2, r0
 80155fc:	6030      	str	r0, [r6, #0]
 80155fe:	d213      	bcs.n	8015628 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015600:	4643      	mov	r3, r8
 8015602:	4639      	mov	r1, r7
 8015604:	4620      	mov	r0, r4
 8015606:	f7ff fe3b 	bl	8015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801560a:	6030      	str	r0, [r6, #0]
 801560c:	6833      	ldr	r3, [r6, #0]
 801560e:	b143      	cbz	r3, 8015622 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015610:	7b5a      	ldrb	r2, [r3, #13]
 8015612:	7a9b      	ldrb	r3, [r3, #10]
 8015614:	0052      	lsls	r2, r2, #1
 8015616:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801561a:	4313      	orrs	r3, r2
 801561c:	bf0c      	ite	eq
 801561e:	2301      	moveq	r3, #1
 8015620:	2300      	movne	r3, #0
 8015622:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8015626:	e7dc      	b.n	80155e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015628:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801562c:	b29b      	uxth	r3, r3
 801562e:	2b7f      	cmp	r3, #127	; 0x7f
 8015630:	d804      	bhi.n	801563c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015632:	4639      	mov	r1, r7
 8015634:	4620      	mov	r0, r4
 8015636:	f7ff fd19 	bl	801506c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801563a:	e7e6      	b.n	801560a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801563c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015640:	2b00      	cmp	r3, #0
 8015642:	d0e3      	beq.n	801560c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015644:	f640 1302 	movw	r3, #2306	; 0x902
 8015648:	429d      	cmp	r5, r3
 801564a:	d1df      	bne.n	801560c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801564c:	4601      	mov	r1, r0
 801564e:	4620      	mov	r0, r4
 8015650:	f7ff fcde 	bl	8015010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015654:	e7d9      	b.n	801560a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015656 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8015656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801565a:	461e      	mov	r6, r3
 801565c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801565e:	4604      	mov	r4, r0
 8015660:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015664:	4617      	mov	r7, r2
 8015666:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801566a:	f7f9 f8a5 	bl	800e7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801566e:	4605      	mov	r5, r0
 8015670:	b918      	cbnz	r0, 801567a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8015672:	6030      	str	r0, [r6, #0]
 8015674:	4628      	mov	r0, r5
 8015676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	4601      	mov	r1, r0
 801567e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015682:	4638      	mov	r0, r7
 8015684:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015688:	47c8      	blx	r9
 801568a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801568e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015692:	4602      	mov	r2, r0
 8015694:	6030      	str	r0, [r6, #0]
 8015696:	d213      	bcs.n	80156c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8015698:	4643      	mov	r3, r8
 801569a:	4639      	mov	r1, r7
 801569c:	4620      	mov	r0, r4
 801569e:	f7ff fdef 	bl	8015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80156a2:	6030      	str	r0, [r6, #0]
 80156a4:	6833      	ldr	r3, [r6, #0]
 80156a6:	b143      	cbz	r3, 80156ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80156a8:	7b5a      	ldrb	r2, [r3, #13]
 80156aa:	7a9b      	ldrb	r3, [r3, #10]
 80156ac:	0052      	lsls	r2, r2, #1
 80156ae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80156b2:	4313      	orrs	r3, r2
 80156b4:	bf0c      	ite	eq
 80156b6:	2301      	moveq	r3, #1
 80156b8:	2300      	movne	r3, #0
 80156ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80156be:	e7d9      	b.n	8015674 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80156c0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	2b7f      	cmp	r3, #127	; 0x7f
 80156c8:	d804      	bhi.n	80156d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80156ca:	4639      	mov	r1, r7
 80156cc:	4620      	mov	r0, r4
 80156ce:	f7ff fccd 	bl	801506c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80156d2:	e7e6      	b.n	80156a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80156d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d0e3      	beq.n	80156a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80156dc:	f640 1302 	movw	r3, #2306	; 0x902
 80156e0:	429d      	cmp	r5, r3
 80156e2:	d1df      	bne.n	80156a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80156e4:	4601      	mov	r1, r0
 80156e6:	4620      	mov	r0, r4
 80156e8:	f7ff fc92 	bl	8015010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80156ec:	e7d9      	b.n	80156a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080156ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80156ee:	b510      	push	{r4, lr}
 80156f0:	4604      	mov	r4, r0
 80156f2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80156f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80156f8:	b1f1      	cbz	r1, 8015738 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80156fa:	2b0a      	cmp	r3, #10
 80156fc:	d02f      	beq.n	801575e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80156fe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015700:	3901      	subs	r1, #1
 8015702:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8015706:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8015708:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801570c:	1c51      	adds	r1, r2, #1
 801570e:	b289      	uxth	r1, r1
 8015710:	2901      	cmp	r1, #1
 8015712:	bf84      	itt	hi
 8015714:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015718:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801571a:	f103 0201 	add.w	r2, r3, #1
 801571e:	8722      	strh	r2, [r4, #56]	; 0x38
 8015720:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015722:	bf98      	it	ls
 8015724:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8015726:	4413      	add	r3, r2
 8015728:	b29b      	uxth	r3, r3
 801572a:	2b09      	cmp	r3, #9
 801572c:	bf88      	it	hi
 801572e:	3b0a      	subhi	r3, #10
 8015730:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015734:	8458      	strh	r0, [r3, #34]	; 0x22
 8015736:	e7dc      	b.n	80156f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015738:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801573a:	2b0a      	cmp	r3, #10
 801573c:	d00f      	beq.n	801575e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801573e:	4620      	mov	r0, r4
 8015740:	f7ff fc25 	bl	8014f8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015744:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015746:	1c5a      	adds	r2, r3, #1
 8015748:	8722      	strh	r2, [r4, #56]	; 0x38
 801574a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801574c:	4413      	add	r3, r2
 801574e:	b29b      	uxth	r3, r3
 8015750:	2b09      	cmp	r3, #9
 8015752:	bf88      	it	hi
 8015754:	3b0a      	subhi	r3, #10
 8015756:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801575a:	8458      	strh	r0, [r3, #34]	; 0x22
 801575c:	e7ec      	b.n	8015738 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801575e:	bd10      	pop	{r4, pc}

08015760 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4604      	mov	r4, r0
 8015764:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015766:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801576a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801576c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801576e:	3a01      	subs	r2, #1
 8015770:	8702      	strh	r2, [r0, #56]	; 0x38
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	b292      	uxth	r2, r2
 8015776:	2a09      	cmp	r2, #9
 8015778:	bf86      	itte	hi
 801577a:	3b09      	subhi	r3, #9
 801577c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801577e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8015780:	f7ff ffb5 	bl	80156ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015784:	8c23      	ldrh	r3, [r4, #32]
 8015786:	2b01      	cmp	r3, #1
 8015788:	bf9c      	itt	ls
 801578a:	3301      	addls	r3, #1
 801578c:	8423      	strhls	r3, [r4, #32]
 801578e:	8be3      	ldrh	r3, [r4, #30]
 8015790:	b90b      	cbnz	r3, 8015796 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015792:	2302      	movs	r3, #2
 8015794:	83e3      	strh	r3, [r4, #30]
 8015796:	8be3      	ldrh	r3, [r4, #30]
 8015798:	4628      	mov	r0, r5
 801579a:	3b01      	subs	r3, #1
 801579c:	b29b      	uxth	r3, r3
 801579e:	83e3      	strh	r3, [r4, #30]
 80157a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80157a4:	8365      	strh	r5, [r4, #26]
 80157a6:	bd38      	pop	{r3, r4, r5, pc}

080157a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80157a8:	428a      	cmp	r2, r1
 80157aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80157b0:	d931      	bls.n	8015816 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80157b2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80157b4:	1a54      	subs	r4, r2, r1
 80157b6:	19ee      	adds	r6, r5, r7
 80157b8:	3e01      	subs	r6, #1
 80157ba:	fa1f fe84 	uxth.w	lr, r4
 80157be:	b2b4      	uxth	r4, r6
 80157c0:	eba4 090e 	sub.w	r9, r4, lr
 80157c4:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80157c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80157cc:	fa1f f989 	uxth.w	r9, r9
 80157d0:	2c09      	cmp	r4, #9
 80157d2:	4626      	mov	r6, r4
 80157d4:	bf88      	it	hi
 80157d6:	f1a4 060a 	subhi.w	r6, r4, #10
 80157da:	f1bc 0f00 	cmp.w	ip, #0
 80157de:	bf08      	it	eq
 80157e0:	f04f 0c02 	moveq.w	ip, #2
 80157e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80157e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80157ec:	3c01      	subs	r4, #1
 80157ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80157f2:	fa1f fc8c 	uxth.w	ip, ip
 80157f6:	b2a4      	uxth	r4, r4
 80157f8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80157fc:	454c      	cmp	r4, r9
 80157fe:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8015802:	d1e5      	bne.n	80157d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015804:	eba5 050e 	sub.w	r5, r5, lr
 8015808:	eb0e 0408 	add.w	r4, lr, r8
 801580c:	8705      	strh	r5, [r0, #56]	; 0x38
 801580e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8015812:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8015816:	250a      	movs	r5, #10
 8015818:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801581a:	1a64      	subs	r4, r4, r1
 801581c:	4439      	add	r1, r7
 801581e:	b289      	uxth	r1, r1
 8015820:	2909      	cmp	r1, #9
 8015822:	bf88      	it	hi
 8015824:	390a      	subhi	r1, #10
 8015826:	8704      	strh	r4, [r0, #56]	; 0x38
 8015828:	86c1      	strh	r1, [r0, #54]	; 0x36
 801582a:	b18a      	cbz	r2, 8015850 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801582c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801582e:	3a01      	subs	r2, #1
 8015830:	3101      	adds	r1, #1
 8015832:	b292      	uxth	r2, r2
 8015834:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8015838:	8701      	strh	r1, [r0, #56]	; 0x38
 801583a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801583c:	b901      	cbnz	r1, 8015840 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801583e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015840:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015842:	3901      	subs	r1, #1
 8015844:	b289      	uxth	r1, r1
 8015846:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015848:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801584c:	844c      	strh	r4, [r1, #34]	; 0x22
 801584e:	e7ec      	b.n	801582a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8015850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015854:	f7ff bf4b 	b.w	80156ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08015858 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8015858:	b570      	push	{r4, r5, r6, lr}
 801585a:	2500      	movs	r5, #0
 801585c:	4295      	cmp	r5, r2
 801585e:	d011      	beq.n	8015884 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015860:	8bc4      	ldrh	r4, [r0, #30]
 8015862:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015866:	4414      	add	r4, r2
 8015868:	3c01      	subs	r4, #1
 801586a:	1b64      	subs	r4, r4, r5
 801586c:	b2a4      	uxth	r4, r4
 801586e:	2c01      	cmp	r4, #1
 8015870:	bf88      	it	hi
 8015872:	3c02      	subhi	r4, #2
 8015874:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015878:	8b64      	ldrh	r4, [r4, #26]
 801587a:	42b4      	cmp	r4, r6
 801587c:	d117      	bne.n	80158ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801587e:	3501      	adds	r5, #1
 8015880:	b2ad      	uxth	r5, r5
 8015882:	e7eb      	b.n	801585c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015884:	2400      	movs	r4, #0
 8015886:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801588a:	4413      	add	r3, r2
 801588c:	b2a2      	uxth	r2, r4
 801588e:	429a      	cmp	r2, r3
 8015890:	da0f      	bge.n	80158b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015892:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8015894:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8015898:	4432      	add	r2, r6
 801589a:	b292      	uxth	r2, r2
 801589c:	2a09      	cmp	r2, #9
 801589e:	bf88      	it	hi
 80158a0:	3a0a      	subhi	r2, #10
 80158a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80158a6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80158a8:	3401      	adds	r4, #1
 80158aa:	42aa      	cmp	r2, r5
 80158ac:	d0ee      	beq.n	801588c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80158ae:	2000      	movs	r0, #0
 80158b0:	bd70      	pop	{r4, r5, r6, pc}
 80158b2:	2001      	movs	r0, #1
 80158b4:	e7fc      	b.n	80158b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080158b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80158b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ba:	4605      	mov	r5, r0
 80158bc:	4616      	mov	r6, r2
 80158be:	1c8c      	adds	r4, r1, #2
 80158c0:	8809      	ldrh	r1, [r1, #0]
 80158c2:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80158c6:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80158ca:	42b3      	cmp	r3, r6
 80158cc:	d124      	bne.n	8015918 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80158ce:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80158d2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80158d6:	f001 070f 	and.w	r7, r1, #15
 80158da:	f8cd 8000 	str.w	r8, [sp]
 80158de:	464b      	mov	r3, r9
 80158e0:	4652      	mov	r2, sl
 80158e2:	4621      	mov	r1, r4
 80158e4:	4628      	mov	r0, r5
 80158e6:	f7ff ffb7 	bl	8015858 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80158ea:	4683      	mov	fp, r0
 80158ec:	b168      	cbz	r0, 801590a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80158ee:	eb0a 0109 	add.w	r1, sl, r9
 80158f2:	4441      	add	r1, r8
 80158f4:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80158f8:	463a      	mov	r2, r7
 80158fa:	4649      	mov	r1, r9
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7ff ff53 	bl	80157a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015902:	4658      	mov	r0, fp
 8015904:	b003      	add	sp, #12
 8015906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590a:	eb07 010a 	add.w	r1, r7, sl
 801590e:	4449      	add	r1, r9
 8015910:	4441      	add	r1, r8
 8015912:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015916:	e7d2      	b.n	80158be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8015918:	f04f 0b00 	mov.w	fp, #0
 801591c:	e7f1      	b.n	8015902 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801591e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801591e:	b570      	push	{r4, r5, r6, lr}
 8015920:	8810      	ldrh	r0, [r2, #0]
 8015922:	4298      	cmp	r0, r3
 8015924:	d817      	bhi.n	8015956 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015926:	1e48      	subs	r0, r1, #1
 8015928:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801592c:	4298      	cmp	r0, r3
 801592e:	d312      	bcc.n	8015956 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015930:	2400      	movs	r4, #0
 8015932:	428c      	cmp	r4, r1
 8015934:	d20f      	bcs.n	8015956 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015936:	1860      	adds	r0, r4, r1
 8015938:	1040      	asrs	r0, r0, #1
 801593a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801593e:	0085      	lsls	r5, r0, #2
 8015940:	42b3      	cmp	r3, r6
 8015942:	d902      	bls.n	801594a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015944:	3001      	adds	r0, #1
 8015946:	b284      	uxth	r4, r0
 8015948:	e7f3      	b.n	8015932 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801594a:	d201      	bcs.n	8015950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801594c:	b281      	uxth	r1, r0
 801594e:	e7f0      	b.n	8015932 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015950:	442a      	add	r2, r5
 8015952:	8850      	ldrh	r0, [r2, #2]
 8015954:	bd70      	pop	{r4, r5, r6, pc}
 8015956:	2000      	movs	r0, #0
 8015958:	e7fc      	b.n	8015954 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801595a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801595a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	260b      	movs	r6, #11
 8015962:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8015964:	886f      	ldrh	r7, [r5, #2]
 8015966:	087f      	lsrs	r7, r7, #1
 8015968:	3e01      	subs	r6, #1
 801596a:	d013      	beq.n	8015994 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801596c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801596e:	462a      	mov	r2, r5
 8015970:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015974:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8015978:	4639      	mov	r1, r7
 801597a:	4643      	mov	r3, r8
 801597c:	4620      	mov	r0, r4
 801597e:	f7ff ffce 	bl	801591e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015982:	b138      	cbz	r0, 8015994 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015984:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8015988:	4642      	mov	r2, r8
 801598a:	4620      	mov	r0, r4
 801598c:	f7ff ff93 	bl	80158b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015990:	2800      	cmp	r0, #0
 8015992:	d1e9      	bne.n	8015968 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015998 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8015998:	b570      	push	{r4, r5, r6, lr}
 801599a:	694a      	ldr	r2, [r1, #20]
 801599c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801599e:	684b      	ldr	r3, [r1, #4]
 80159a0:	1b54      	subs	r4, r2, r5
 80159a2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80159a4:	f000 8107 	beq.w	8015bb6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 80159a8:	1b9b      	subs	r3, r3, r6
 80159aa:	d003      	beq.n	80159b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80159ac:	2210      	movs	r2, #16
 80159ae:	4363      	muls	r3, r4
 80159b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80159b4:	680c      	ldr	r4, [r1, #0]
 80159b6:	698a      	ldr	r2, [r1, #24]
 80159b8:	1b65      	subs	r5, r4, r5
 80159ba:	f000 80fe 	beq.w	8015bba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 80159be:	1b92      	subs	r2, r2, r6
 80159c0:	d003      	beq.n	80159ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80159c2:	2410      	movs	r4, #16
 80159c4:	436a      	muls	r2, r5
 80159c6:	fb92 f2f4 	sdiv	r2, r2, r4
 80159ca:	1a9b      	subs	r3, r3, r2
 80159cc:	ee07 3a90 	vmov	s15, r3
 80159d0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015bf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 80159d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80159e0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80159e4:	460a      	mov	r2, r1
 80159e6:	eeb1 6a43 	vneg.f32	s12, s6
 80159ea:	4603      	mov	r3, r0
 80159ec:	f100 040c 	add.w	r4, r0, #12
 80159f0:	edd2 7a02 	vldr	s15, [r2, #8]
 80159f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80159f8:	ece3 6a01 	vstmia	r3!, {s13}
 80159fc:	edd2 7a03 	vldr	s15, [r2, #12]
 8015a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a04:	edc3 7a02 	vstr	s15, [r3, #8]
 8015a08:	edd2 7a04 	vldr	s15, [r2, #16]
 8015a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a10:	429c      	cmp	r4, r3
 8015a12:	edc3 7a05 	vstr	s15, [r3, #20]
 8015a16:	f102 0214 	add.w	r2, r2, #20
 8015a1a:	d1e9      	bne.n	80159f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015a1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015a1e:	698b      	ldr	r3, [r1, #24]
 8015a20:	edd0 4a02 	vldr	s9, [r0, #8]
 8015a24:	1a9b      	subs	r3, r3, r2
 8015a26:	ee07 3a90 	vmov	s15, r3
 8015a2a:	684b      	ldr	r3, [r1, #4]
 8015a2c:	edd0 3a00 	vldr	s7, [r0]
 8015a30:	1a9b      	subs	r3, r3, r2
 8015a32:	edd0 6a01 	vldr	s13, [r0, #4]
 8015a36:	ee07 3a10 	vmov	s14, r3
 8015a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a3e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015a42:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015a46:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015a4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a4e:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015a52:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015a5a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015a5e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8015a62:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015a64:	694a      	ldr	r2, [r1, #20]
 8015a66:	ed90 5a05 	vldr	s10, [r0, #20]
 8015a6a:	1b13      	subs	r3, r2, r4
 8015a6c:	ee07 3a10 	vmov	s14, r3
 8015a70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a74:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a78:	680b      	ldr	r3, [r1, #0]
 8015a7a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015a7e:	1b1b      	subs	r3, r3, r4
 8015a80:	ee07 3a10 	vmov	s14, r3
 8015a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a8c:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015a90:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015a94:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8015a98:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015a9a:	698b      	ldr	r3, [r1, #24]
 8015a9c:	ed90 2a03 	vldr	s4, [r0, #12]
 8015aa0:	1a9b      	subs	r3, r3, r2
 8015aa2:	ee06 3a90 	vmov	s13, r3
 8015aa6:	684b      	ldr	r3, [r1, #4]
 8015aa8:	edd0 5a04 	vldr	s11, [r0, #16]
 8015aac:	1a9b      	subs	r3, r3, r2
 8015aae:	ee07 3a10 	vmov	s14, r3
 8015ab2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ab6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015aba:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015abe:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ac6:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015aca:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015ace:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015ad2:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015ad6:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015ada:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015adc:	694a      	ldr	r2, [r1, #20]
 8015ade:	ed90 1a07 	vldr	s2, [r0, #28]
 8015ae2:	1b13      	subs	r3, r2, r4
 8015ae4:	ee07 3a10 	vmov	s14, r3
 8015ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015aec:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015af0:	680b      	ldr	r3, [r1, #0]
 8015af2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015af6:	1b1b      	subs	r3, r3, r4
 8015af8:	ee07 3a10 	vmov	s14, r3
 8015afc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b00:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b04:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015b08:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015b0c:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015b10:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015b12:	698b      	ldr	r3, [r1, #24]
 8015b14:	edd0 5a08 	vldr	s11, [r0, #32]
 8015b18:	1a9b      	subs	r3, r3, r2
 8015b1a:	ee07 3a10 	vmov	s14, r3
 8015b1e:	684b      	ldr	r3, [r1, #4]
 8015b20:	edd0 2a06 	vldr	s5, [r0, #24]
 8015b24:	1a9b      	subs	r3, r3, r2
 8015b26:	ee01 3a90 	vmov	s3, r3
 8015b2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b2e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015b32:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b36:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015b3a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015b3e:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015b42:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015b46:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015b4a:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015b4e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015b52:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015b54:	694a      	ldr	r2, [r1, #20]
 8015b56:	1b13      	subs	r3, r2, r4
 8015b58:	ee03 3a10 	vmov	s6, r3
 8015b5c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015b60:	ee23 3a04 	vmul.f32	s6, s6, s8
 8015b64:	680b      	ldr	r3, [r1, #0]
 8015b66:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8015b6a:	1b1b      	subs	r3, r3, r4
 8015b6c:	ee03 3a10 	vmov	s6, r3
 8015b70:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015b74:	ee23 4a04 	vmul.f32	s8, s6, s8
 8015b78:	eee1 5a04 	vfma.f32	s11, s2, s8
 8015b7c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015b80:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015b84:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015b88:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b90:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8015b94:	dd13      	ble.n	8015bbe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b9a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015b9e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015baa:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015bac:	dd15      	ble.n	8015bda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bb2:	6403      	str	r3, [r0, #64]	; 0x40
 8015bb4:	bd70      	pop	{r4, r5, r6, pc}
 8015bb6:	4623      	mov	r3, r4
 8015bb8:	e6fc      	b.n	80159b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015bba:	462a      	mov	r2, r5
 8015bbc:	e705      	b.n	80159ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015bbe:	d502      	bpl.n	8015bc6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8015bc0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015bc4:	e7e9      	b.n	8015b9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8015bc6:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015bca:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015bce:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd6:	dade      	bge.n	8015b96 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8015bd8:	e7f2      	b.n	8015bc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8015bda:	d502      	bpl.n	8015be2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8015bdc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015be0:	e7e7      	b.n	8015bb2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8015be2:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015be6:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015bea:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf2:	dadc      	bge.n	8015bae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8015bf4:	e7f2      	b.n	8015bdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8015bf6:	bf00      	nop
 8015bf8:	3d800000 	.word	0x3d800000

08015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c00:	2714      	movs	r7, #20
 8015c02:	435f      	muls	r7, r3
 8015c04:	eb02 0c07 	add.w	ip, r2, r7
 8015c08:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015c0c:	f115 0e0f 	adds.w	lr, r5, #15
 8015c10:	f100 80a2 	bmi.w	8015d58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015c14:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015c18:	2614      	movs	r6, #20
 8015c1a:	9c08      	ldr	r4, [sp, #32]
 8015c1c:	f8c0 e014 	str.w	lr, [r0, #20]
 8015c20:	4366      	muls	r6, r4
 8015c22:	eb02 0806 	add.w	r8, r2, r6
 8015c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c2a:	f115 040f 	adds.w	r4, r5, #15
 8015c2e:	f100 809f 	bmi.w	8015d70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015c32:	1124      	asrs	r4, r4, #4
 8015c34:	eba4 040e 	sub.w	r4, r4, lr
 8015c38:	6184      	str	r4, [r0, #24]
 8015c3a:	2c00      	cmp	r4, #0
 8015c3c:	f000 808a 	beq.w	8015d54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8015c40:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015c44:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015c48:	5995      	ldr	r5, [r2, r6]
 8015c4a:	eba4 0809 	sub.w	r8, r4, r9
 8015c4e:	59d4      	ldr	r4, [r2, r7]
 8015c50:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8015c54:	eba5 0a04 	sub.w	sl, r5, r4
 8015c58:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8015c5c:	fb0e fe05 	mul.w	lr, lr, r5
 8015c60:	fb0a ee19 	mls	lr, sl, r9, lr
 8015c64:	fb08 e404 	mla	r4, r8, r4, lr
 8015c68:	3c01      	subs	r4, #1
 8015c6a:	19a4      	adds	r4, r4, r6
 8015c6c:	f100 808c 	bmi.w	8015d88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8015c70:	fb94 fef6 	sdiv	lr, r4, r6
 8015c74:	fb06 441e 	mls	r4, r6, lr, r4
 8015c78:	f8c0 e000 	str.w	lr, [r0]
 8015c7c:	6104      	str	r4, [r0, #16]
 8015c7e:	2d00      	cmp	r5, #0
 8015c80:	f2c0 8095 	blt.w	8015dae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015c84:	fb95 f4f6 	sdiv	r4, r5, r6
 8015c88:	fb06 5514 	mls	r5, r6, r4, r5
 8015c8c:	6044      	str	r4, [r0, #4]
 8015c8e:	6085      	str	r5, [r0, #8]
 8015c90:	60c6      	str	r6, [r0, #12]
 8015c92:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015c96:	6945      	ldr	r5, [r0, #20]
 8015c98:	59d2      	ldr	r2, [r2, r7]
 8015c9a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015c9e:	ee07 4a10 	vmov	s14, r4
 8015ca2:	6804      	ldr	r4, [r0, #0]
 8015ca4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8015dd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8015ca8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015cac:	ee07 2a90 	vmov	s15, r2
 8015cb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cb8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015cbc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015cc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015cc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015cc8:	edd3 6a00 	vldr	s13, [r3]
 8015ccc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015cd0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8015cd4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015cd8:	edc0 6a07 	vstr	s13, [r0, #28]
 8015cdc:	edd0 6a01 	vldr	s13, [r0, #4]
 8015ce0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8015ce4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015ce8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015cec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015cf0:	ed80 6a08 	vstr	s12, [r0, #32]
 8015cf4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8015cf6:	6242      	str	r2, [r0, #36]	; 0x24
 8015cf8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8015cfc:	ed93 6a03 	vldr	s12, [r3, #12]
 8015d00:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d04:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d08:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015d0c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8015d10:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d14:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8015d18:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015d1c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8015d20:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015d22:	6302      	str	r2, [r0, #48]	; 0x30
 8015d24:	ed93 6a06 	vldr	s12, [r3, #24]
 8015d28:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8015d2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d30:	eeb0 7a46 	vmov.f32	s14, s12
 8015d34:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8015d38:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015d3c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015d40:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8015d44:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8015d48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015d4c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8015d50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8015d52:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d58:	2410      	movs	r4, #16
 8015d5a:	f1c5 0501 	rsb	r5, r5, #1
 8015d5e:	f015 050f 	ands.w	r5, r5, #15
 8015d62:	fb9e fef4 	sdiv	lr, lr, r4
 8015d66:	bf18      	it	ne
 8015d68:	2501      	movne	r5, #1
 8015d6a:	ebae 0e05 	sub.w	lr, lr, r5
 8015d6e:	e753      	b.n	8015c18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015d70:	f04f 0910 	mov.w	r9, #16
 8015d74:	f1c5 0501 	rsb	r5, r5, #1
 8015d78:	f015 050f 	ands.w	r5, r5, #15
 8015d7c:	fb94 f4f9 	sdiv	r4, r4, r9
 8015d80:	bf18      	it	ne
 8015d82:	2501      	movne	r5, #1
 8015d84:	1b64      	subs	r4, r4, r5
 8015d86:	e755      	b.n	8015c34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015d88:	4264      	negs	r4, r4
 8015d8a:	fb94 fef6 	sdiv	lr, r4, r6
 8015d8e:	fb06 441e 	mls	r4, r6, lr, r4
 8015d92:	f1ce 0800 	rsb	r8, lr, #0
 8015d96:	f8c0 8000 	str.w	r8, [r0]
 8015d9a:	6104      	str	r4, [r0, #16]
 8015d9c:	2c00      	cmp	r4, #0
 8015d9e:	f43f af6e 	beq.w	8015c7e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015da2:	ea6f 0e0e 	mvn.w	lr, lr
 8015da6:	1b34      	subs	r4, r6, r4
 8015da8:	f8c0 e000 	str.w	lr, [r0]
 8015dac:	e766      	b.n	8015c7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8015dae:	426d      	negs	r5, r5
 8015db0:	fb95 f4f6 	sdiv	r4, r5, r6
 8015db4:	fb06 5514 	mls	r5, r6, r4, r5
 8015db8:	f1c4 0e00 	rsb	lr, r4, #0
 8015dbc:	f8c0 e004 	str.w	lr, [r0, #4]
 8015dc0:	6085      	str	r5, [r0, #8]
 8015dc2:	2d00      	cmp	r5, #0
 8015dc4:	f43f af64 	beq.w	8015c90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015dc8:	43e4      	mvns	r4, r4
 8015dca:	1b75      	subs	r5, r6, r5
 8015dcc:	6044      	str	r4, [r0, #4]
 8015dce:	e75e      	b.n	8015c8e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015dd0:	3d800000 	.word	0x3d800000

08015dd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015dd4:	4b01      	ldr	r3, [pc, #4]	; (8015ddc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015dd6:	6018      	str	r0, [r3, #0]
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop
 8015ddc:	2001fe04 	.word	0x2001fe04

08015de0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015de0:	4b06      	ldr	r3, [pc, #24]	; (8015dfc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015de2:	881a      	ldrh	r2, [r3, #0]
 8015de4:	4282      	cmp	r2, r0
 8015de6:	d807      	bhi.n	8015df8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015de8:	4b05      	ldr	r3, [pc, #20]	; (8015e00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015dea:	881b      	ldrh	r3, [r3, #0]
 8015dec:	4413      	add	r3, r2
 8015dee:	4298      	cmp	r0, r3
 8015df0:	bfac      	ite	ge
 8015df2:	2000      	movge	r0, #0
 8015df4:	2001      	movlt	r0, #1
 8015df6:	4770      	bx	lr
 8015df8:	2000      	movs	r0, #0
 8015dfa:	4770      	bx	lr
 8015dfc:	2001fe24 	.word	0x2001fe24
 8015e00:	2001fe28 	.word	0x2001fe28

08015e04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015e04:	b508      	push	{r3, lr}
 8015e06:	4601      	mov	r1, r0
 8015e08:	f7ff ffea 	bl	8015de0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015e0c:	b118      	cbz	r0, 8015e16 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8015e0e:	4b02      	ldr	r3, [pc, #8]	; (8015e18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015e16:	bd08      	pop	{r3, pc}
 8015e18:	2001fe08 	.word	0x2001fe08

08015e1c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e1e:	4c24      	ldr	r4, [pc, #144]	; (8015eb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015e20:	6823      	ldr	r3, [r4, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d042      	beq.n	8015eac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015e26:	4a23      	ldr	r2, [pc, #140]	; (8015eb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015e28:	4d23      	ldr	r5, [pc, #140]	; (8015eb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015e2a:	8811      	ldrh	r1, [r2, #0]
 8015e2c:	f8b5 c000 	ldrh.w	ip, [r5]
 8015e30:	4822      	ldr	r0, [pc, #136]	; (8015ebc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8015e32:	4461      	add	r1, ip
 8015e34:	1c4a      	adds	r2, r1, #1
 8015e36:	f022 0201 	bic.w	r2, r2, #1
 8015e3a:	008f      	lsls	r7, r1, #2
 8015e3c:	0412      	lsls	r2, r2, #16
 8015e3e:	19de      	adds	r6, r3, r7
 8015e40:	0c12      	lsrs	r2, r2, #16
 8015e42:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015e46:	6006      	str	r6, [r0, #0]
 8015e48:	4e1d      	ldr	r6, [pc, #116]	; (8015ec0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015e4a:	19da      	adds	r2, r3, r7
 8015e4c:	6032      	str	r2, [r6, #0]
 8015e4e:	220e      	movs	r2, #14
 8015e50:	fb02 f20c 	mul.w	r2, r2, ip
 8015e54:	3203      	adds	r2, #3
 8015e56:	f022 0203 	bic.w	r2, r2, #3
 8015e5a:	443a      	add	r2, r7
 8015e5c:	4f19      	ldr	r7, [pc, #100]	; (8015ec4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015e5e:	4413      	add	r3, r2
 8015e60:	603b      	str	r3, [r7, #0]
 8015e62:	2300      	movs	r3, #0
 8015e64:	4f18      	ldr	r7, [pc, #96]	; (8015ec8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015e66:	469c      	mov	ip, r3
 8015e68:	803b      	strh	r3, [r7, #0]
 8015e6a:	4f18      	ldr	r7, [pc, #96]	; (8015ecc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015e6c:	683f      	ldr	r7, [r7, #0]
 8015e6e:	1aba      	subs	r2, r7, r2
 8015e70:	4f17      	ldr	r7, [pc, #92]	; (8015ed0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015e72:	603a      	str	r2, [r7, #0]
 8015e74:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015e78:	4a16      	ldr	r2, [pc, #88]	; (8015ed4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015e7a:	8013      	strh	r3, [r2, #0]
 8015e7c:	428b      	cmp	r3, r1
 8015e7e:	d10d      	bne.n	8015e9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015e80:	2300      	movs	r3, #0
 8015e82:	240e      	movs	r4, #14
 8015e84:	882d      	ldrh	r5, [r5, #0]
 8015e86:	6830      	ldr	r0, [r6, #0]
 8015e88:	429d      	cmp	r5, r3
 8015e8a:	d90f      	bls.n	8015eac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015e8c:	fb04 0203 	mla	r2, r4, r3, r0
 8015e90:	7b11      	ldrb	r1, [r2, #12]
 8015e92:	3301      	adds	r3, #1
 8015e94:	f36f 1145 	bfc	r1, #5, #1
 8015e98:	7311      	strb	r1, [r2, #12]
 8015e9a:	e7f5      	b.n	8015e88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8015e9c:	6822      	ldr	r2, [r4, #0]
 8015e9e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015ea2:	6802      	ldr	r2, [r0, #0]
 8015ea4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	e7e7      	b.n	8015e7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8015eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	2001fe08 	.word	0x2001fe08
 8015eb4:	2001fe24 	.word	0x2001fe24
 8015eb8:	2001fe28 	.word	0x2001fe28
 8015ebc:	2001fe1c 	.word	0x2001fe1c
 8015ec0:	2001fe0c 	.word	0x2001fe0c
 8015ec4:	2001fe14 	.word	0x2001fe14
 8015ec8:	2001fe26 	.word	0x2001fe26
 8015ecc:	2001fe10 	.word	0x2001fe10
 8015ed0:	2001fe20 	.word	0x2001fe20
 8015ed4:	2001fe18 	.word	0x2001fe18

08015ed8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015ed8:	4b06      	ldr	r3, [pc, #24]	; (8015ef4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	b943      	cbnz	r3, 8015ef0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015ede:	b139      	cbz	r1, 8015ef0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015ee0:	4b05      	ldr	r3, [pc, #20]	; (8015ef8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015ee2:	801a      	strh	r2, [r3, #0]
 8015ee4:	4b05      	ldr	r3, [pc, #20]	; (8015efc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015ee6:	6019      	str	r1, [r3, #0]
 8015ee8:	4b05      	ldr	r3, [pc, #20]	; (8015f00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015eea:	6018      	str	r0, [r3, #0]
 8015eec:	f7ff bf96 	b.w	8015e1c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015ef0:	4770      	bx	lr
 8015ef2:	bf00      	nop
 8015ef4:	2001fe14 	.word	0x2001fe14
 8015ef8:	2001fe28 	.word	0x2001fe28
 8015efc:	2001fe10 	.word	0x2001fe10
 8015f00:	2001fe08 	.word	0x2001fe08

08015f04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015f04:	b470      	push	{r4, r5, r6}
 8015f06:	4c07      	ldr	r4, [pc, #28]	; (8015f24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015f08:	4605      	mov	r5, r0
 8015f0a:	6826      	ldr	r6, [r4, #0]
 8015f0c:	4610      	mov	r0, r2
 8015f0e:	9a03      	ldr	r2, [sp, #12]
 8015f10:	b936      	cbnz	r6, 8015f20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015f12:	6025      	str	r5, [r4, #0]
 8015f14:	4c04      	ldr	r4, [pc, #16]	; (8015f28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015f16:	8021      	strh	r1, [r4, #0]
 8015f18:	bc70      	pop	{r4, r5, r6}
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	f7ff bfdc 	b.w	8015ed8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015f20:	bc70      	pop	{r4, r5, r6}
 8015f22:	4770      	bx	lr
 8015f24:	2001fe2c 	.word	0x2001fe2c
 8015f28:	2001fe24 	.word	0x2001fe24

08015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015f2c:	4a12      	ldr	r2, [pc, #72]	; (8015f78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015f2e:	8803      	ldrh	r3, [r0, #0]
 8015f30:	8812      	ldrh	r2, [r2, #0]
 8015f32:	4293      	cmp	r3, r2
 8015f34:	d207      	bcs.n	8015f46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015f36:	2114      	movs	r1, #20
 8015f38:	4a10      	ldr	r2, [pc, #64]	; (8015f7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015f3a:	6812      	ldr	r2, [r2, #0]
 8015f3c:	fb01 2303 	mla	r3, r1, r3, r2
 8015f40:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015f44:	4770      	bx	lr
 8015f46:	490e      	ldr	r1, [pc, #56]	; (8015f80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015f48:	8809      	ldrh	r1, [r1, #0]
 8015f4a:	4411      	add	r1, r2
 8015f4c:	428b      	cmp	r3, r1
 8015f4e:	da04      	bge.n	8015f5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015f50:	1a9b      	subs	r3, r3, r2
 8015f52:	4a0c      	ldr	r2, [pc, #48]	; (8015f84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015f54:	210e      	movs	r1, #14
 8015f56:	6812      	ldr	r2, [r2, #0]
 8015f58:	e7f0      	b.n	8015f3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015f5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015f5e:	4293      	cmp	r3, r2
 8015f60:	d108      	bne.n	8015f74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015f62:	4b09      	ldr	r3, [pc, #36]	; (8015f88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	b91b      	cbnz	r3, 8015f70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015f68:	4b08      	ldr	r3, [pc, #32]	; (8015f8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015f6a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015f6e:	4770      	bx	lr
 8015f70:	4b07      	ldr	r3, [pc, #28]	; (8015f90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015f72:	e7fa      	b.n	8015f6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015f74:	2000      	movs	r0, #0
 8015f76:	4770      	bx	lr
 8015f78:	2001fe24 	.word	0x2001fe24
 8015f7c:	2001fe2c 	.word	0x2001fe2c
 8015f80:	2001fe28 	.word	0x2001fe28
 8015f84:	2001fe0c 	.word	0x2001fe0c
 8015f88:	2001fd9c 	.word	0x2001fd9c
 8015f8c:	2001fd9e 	.word	0x2001fd9e
 8015f90:	2001fda0 	.word	0x2001fda0

08015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015f94:	4a12      	ldr	r2, [pc, #72]	; (8015fe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015f96:	8803      	ldrh	r3, [r0, #0]
 8015f98:	8812      	ldrh	r2, [r2, #0]
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	d207      	bcs.n	8015fae <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015f9e:	2114      	movs	r1, #20
 8015fa0:	4a10      	ldr	r2, [pc, #64]	; (8015fe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015fa2:	6812      	ldr	r2, [r2, #0]
 8015fa4:	fb01 2303 	mla	r3, r1, r3, r2
 8015fa8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015fac:	4770      	bx	lr
 8015fae:	490e      	ldr	r1, [pc, #56]	; (8015fe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015fb0:	8809      	ldrh	r1, [r1, #0]
 8015fb2:	4411      	add	r1, r2
 8015fb4:	428b      	cmp	r3, r1
 8015fb6:	da04      	bge.n	8015fc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015fb8:	1a9b      	subs	r3, r3, r2
 8015fba:	4a0c      	ldr	r2, [pc, #48]	; (8015fec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015fbc:	210e      	movs	r1, #14
 8015fbe:	6812      	ldr	r2, [r2, #0]
 8015fc0:	e7f0      	b.n	8015fa4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015fc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d108      	bne.n	8015fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015fca:	4b09      	ldr	r3, [pc, #36]	; (8015ff0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	b91b      	cbnz	r3, 8015fd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015fd0:	4b08      	ldr	r3, [pc, #32]	; (8015ff4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015fd2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015fd6:	4770      	bx	lr
 8015fd8:	4b07      	ldr	r3, [pc, #28]	; (8015ff8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015fda:	e7fa      	b.n	8015fd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8015fdc:	2000      	movs	r0, #0
 8015fde:	4770      	bx	lr
 8015fe0:	2001fe24 	.word	0x2001fe24
 8015fe4:	2001fe2c 	.word	0x2001fe2c
 8015fe8:	2001fe28 	.word	0x2001fe28
 8015fec:	2001fe0c 	.word	0x2001fe0c
 8015ff0:	2001fd9c 	.word	0x2001fd9c
 8015ff4:	2001fda0 	.word	0x2001fda0
 8015ff8:	2001fd9e 	.word	0x2001fd9e

08015ffc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015ffc:	b510      	push	{r4, lr}
 8015ffe:	4a1f      	ldr	r2, [pc, #124]	; (801607c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8016000:	880b      	ldrh	r3, [r1, #0]
 8016002:	8812      	ldrh	r2, [r2, #0]
 8016004:	4293      	cmp	r3, r2
 8016006:	d213      	bcs.n	8016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8016008:	2114      	movs	r1, #20
 801600a:	4a1d      	ldr	r2, [pc, #116]	; (8016080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801600c:	6812      	ldr	r2, [r2, #0]
 801600e:	fb01 2303 	mla	r3, r1, r3, r2
 8016012:	8a1a      	ldrh	r2, [r3, #16]
 8016014:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8016018:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801601c:	8a5b      	ldrh	r3, [r3, #18]
 801601e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016026:	8004      	strh	r4, [r0, #0]
 8016028:	8041      	strh	r1, [r0, #2]
 801602a:	8082      	strh	r2, [r0, #4]
 801602c:	80c3      	strh	r3, [r0, #6]
 801602e:	e00e      	b.n	801604e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016030:	4914      	ldr	r1, [pc, #80]	; (8016084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8016032:	8809      	ldrh	r1, [r1, #0]
 8016034:	4411      	add	r1, r2
 8016036:	428b      	cmp	r3, r1
 8016038:	da0a      	bge.n	8016050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801603a:	210e      	movs	r1, #14
 801603c:	1a9b      	subs	r3, r3, r2
 801603e:	4a12      	ldr	r2, [pc, #72]	; (8016088 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8016040:	6812      	ldr	r2, [r2, #0]
 8016042:	fb01 2303 	mla	r3, r1, r3, r2
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	6002      	str	r2, [r0, #0]
 801604a:	685a      	ldr	r2, [r3, #4]
 801604c:	6042      	str	r2, [r0, #4]
 801604e:	bd10      	pop	{r4, pc}
 8016050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016054:	4293      	cmp	r3, r2
 8016056:	d10b      	bne.n	8016070 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8016058:	4b0c      	ldr	r3, [pc, #48]	; (801608c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801605a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801605e:	4b0c      	ldr	r3, [pc, #48]	; (8016090 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016060:	8081      	strh	r1, [r0, #4]
 8016062:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016066:	2300      	movs	r3, #0
 8016068:	80c2      	strh	r2, [r0, #6]
 801606a:	8003      	strh	r3, [r0, #0]
 801606c:	8043      	strh	r3, [r0, #2]
 801606e:	e7ee      	b.n	801604e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016070:	2300      	movs	r3, #0
 8016072:	8003      	strh	r3, [r0, #0]
 8016074:	8043      	strh	r3, [r0, #2]
 8016076:	8083      	strh	r3, [r0, #4]
 8016078:	e7d8      	b.n	801602c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801607a:	bf00      	nop
 801607c:	2001fe24 	.word	0x2001fe24
 8016080:	2001fe2c 	.word	0x2001fe2c
 8016084:	2001fe28 	.word	0x2001fe28
 8016088:	2001fe0c 	.word	0x2001fe0c
 801608c:	2001fd98 	.word	0x2001fd98
 8016090:	2001fd9a 	.word	0x2001fd9a

08016094 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8016094:	4a17      	ldr	r2, [pc, #92]	; (80160f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8016096:	8803      	ldrh	r3, [r0, #0]
 8016098:	8812      	ldrh	r2, [r2, #0]
 801609a:	4293      	cmp	r3, r2
 801609c:	d213      	bcs.n	80160c6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801609e:	2114      	movs	r1, #20
 80160a0:	4a15      	ldr	r2, [pc, #84]	; (80160f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80160a2:	6812      	ldr	r2, [r2, #0]
 80160a4:	fb01 2303 	mla	r3, r1, r3, r2
 80160a8:	8a1a      	ldrh	r2, [r3, #16]
 80160aa:	8919      	ldrh	r1, [r3, #8]
 80160ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80160b0:	428a      	cmp	r2, r1
 80160b2:	db1d      	blt.n	80160f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80160b4:	8a58      	ldrh	r0, [r3, #18]
 80160b6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80160ba:	895b      	ldrh	r3, [r3, #10]
 80160bc:	4298      	cmp	r0, r3
 80160be:	bfac      	ite	ge
 80160c0:	2000      	movge	r0, #0
 80160c2:	2001      	movlt	r0, #1
 80160c4:	4770      	bx	lr
 80160c6:	490d      	ldr	r1, [pc, #52]	; (80160fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80160c8:	8809      	ldrh	r1, [r1, #0]
 80160ca:	4411      	add	r1, r2
 80160cc:	428b      	cmp	r3, r1
 80160ce:	da0d      	bge.n	80160ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80160d0:	210e      	movs	r1, #14
 80160d2:	1a9b      	subs	r3, r3, r2
 80160d4:	4a0a      	ldr	r2, [pc, #40]	; (8016100 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80160d6:	6812      	ldr	r2, [r2, #0]
 80160d8:	fb01 2303 	mla	r3, r1, r3, r2
 80160dc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80160e0:	891a      	ldrh	r2, [r3, #8]
 80160e2:	4291      	cmp	r1, r2
 80160e4:	db04      	blt.n	80160f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80160e6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80160ea:	e7e6      	b.n	80160ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80160ec:	2000      	movs	r0, #0
 80160ee:	4770      	bx	lr
 80160f0:	2001      	movs	r0, #1
 80160f2:	4770      	bx	lr
 80160f4:	2001fe24 	.word	0x2001fe24
 80160f8:	2001fe2c 	.word	0x2001fe2c
 80160fc:	2001fe28 	.word	0x2001fe28
 8016100:	2001fe0c 	.word	0x2001fe0c

08016104 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016104:	4a12      	ldr	r2, [pc, #72]	; (8016150 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8016106:	8803      	ldrh	r3, [r0, #0]
 8016108:	8811      	ldrh	r1, [r2, #0]
 801610a:	428b      	cmp	r3, r1
 801610c:	d20b      	bcs.n	8016126 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801610e:	4a11      	ldr	r2, [pc, #68]	; (8016154 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016110:	6812      	ldr	r2, [r2, #0]
 8016112:	b112      	cbz	r2, 801611a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016114:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016118:	b9c0      	cbnz	r0, 801614c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801611a:	4a0f      	ldr	r2, [pc, #60]	; (8016158 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801611c:	6811      	ldr	r1, [r2, #0]
 801611e:	2214      	movs	r2, #20
 8016120:	4353      	muls	r3, r2
 8016122:	58c8      	ldr	r0, [r1, r3]
 8016124:	4770      	bx	lr
 8016126:	4a0d      	ldr	r2, [pc, #52]	; (801615c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016128:	8812      	ldrh	r2, [r2, #0]
 801612a:	440a      	add	r2, r1
 801612c:	4293      	cmp	r3, r2
 801612e:	da04      	bge.n	801613a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016130:	4a08      	ldr	r2, [pc, #32]	; (8016154 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016132:	6812      	ldr	r2, [r2, #0]
 8016134:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016138:	4770      	bx	lr
 801613a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801613e:	4293      	cmp	r3, r2
 8016140:	d103      	bne.n	801614a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016142:	4b07      	ldr	r3, [pc, #28]	; (8016160 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8016148:	4770      	bx	lr
 801614a:	2000      	movs	r0, #0
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	2001fe24 	.word	0x2001fe24
 8016154:	2001fe08 	.word	0x2001fe08
 8016158:	2001fe2c 	.word	0x2001fe2c
 801615c:	2001fe28 	.word	0x2001fe28
 8016160:	2001fda4 	.word	0x2001fda4

08016164 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016164:	4b24      	ldr	r3, [pc, #144]	; (80161f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8016166:	8802      	ldrh	r2, [r0, #0]
 8016168:	8818      	ldrh	r0, [r3, #0]
 801616a:	4282      	cmp	r2, r0
 801616c:	d221      	bcs.n	80161b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801616e:	4b23      	ldr	r3, [pc, #140]	; (80161fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016170:	6819      	ldr	r1, [r3, #0]
 8016172:	2314      	movs	r3, #20
 8016174:	fb03 1302 	mla	r3, r3, r2, r1
 8016178:	6858      	ldr	r0, [r3, #4]
 801617a:	2800      	cmp	r0, #0
 801617c:	d03a      	beq.n	80161f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801617e:	4920      	ldr	r1, [pc, #128]	; (8016200 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016180:	6809      	ldr	r1, [r1, #0]
 8016182:	2900      	cmp	r1, #0
 8016184:	d036      	beq.n	80161f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016186:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801618a:	2900      	cmp	r1, #0
 801618c:	d032      	beq.n	80161f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801618e:	891a      	ldrh	r2, [r3, #8]
 8016190:	8958      	ldrh	r0, [r3, #10]
 8016192:	4350      	muls	r0, r2
 8016194:	7c5a      	ldrb	r2, [r3, #17]
 8016196:	7cdb      	ldrb	r3, [r3, #19]
 8016198:	0952      	lsrs	r2, r2, #5
 801619a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801619e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80161a2:	2b0b      	cmp	r3, #11
 80161a4:	bf18      	it	ne
 80161a6:	0040      	lslne	r0, r0, #1
 80161a8:	3003      	adds	r0, #3
 80161aa:	f020 0003 	bic.w	r0, r0, #3
 80161ae:	4408      	add	r0, r1
 80161b0:	4770      	bx	lr
 80161b2:	4b14      	ldr	r3, [pc, #80]	; (8016204 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	4403      	add	r3, r0
 80161b8:	429a      	cmp	r2, r3
 80161ba:	da1a      	bge.n	80161f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80161bc:	210e      	movs	r1, #14
 80161be:	4b12      	ldr	r3, [pc, #72]	; (8016208 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80161c0:	1a10      	subs	r0, r2, r0
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	fb01 3000 	mla	r0, r1, r0, r3
 80161c8:	7b03      	ldrb	r3, [r0, #12]
 80161ca:	f003 031f 	and.w	r3, r3, #31
 80161ce:	2b0b      	cmp	r3, #11
 80161d0:	d10b      	bne.n	80161ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80161d2:	8903      	ldrh	r3, [r0, #8]
 80161d4:	8940      	ldrh	r0, [r0, #10]
 80161d6:	4358      	muls	r0, r3
 80161d8:	4b09      	ldr	r3, [pc, #36]	; (8016200 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80161da:	3003      	adds	r0, #3
 80161dc:	6819      	ldr	r1, [r3, #0]
 80161de:	f020 0303 	bic.w	r3, r0, #3
 80161e2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80161e6:	4418      	add	r0, r3
 80161e8:	4770      	bx	lr
 80161ea:	2b0d      	cmp	r3, #13
 80161ec:	d101      	bne.n	80161f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80161ee:	300d      	adds	r0, #13
 80161f0:	4770      	bx	lr
 80161f2:	2000      	movs	r0, #0
 80161f4:	4770      	bx	lr
 80161f6:	bf00      	nop
 80161f8:	2001fe24 	.word	0x2001fe24
 80161fc:	2001fe2c 	.word	0x2001fe2c
 8016200:	2001fe08 	.word	0x2001fe08
 8016204:	2001fe28 	.word	0x2001fe28
 8016208:	2001fe0c 	.word	0x2001fe0c

0801620c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801620c:	b510      	push	{r4, lr}
 801620e:	4a17      	ldr	r2, [pc, #92]	; (801626c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8016210:	8803      	ldrh	r3, [r0, #0]
 8016212:	8812      	ldrh	r2, [r2, #0]
 8016214:	4293      	cmp	r3, r2
 8016216:	d20c      	bcs.n	8016232 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016218:	2114      	movs	r1, #20
 801621a:	4a15      	ldr	r2, [pc, #84]	; (8016270 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801621c:	6812      	ldr	r2, [r2, #0]
 801621e:	fb01 2303 	mla	r3, r1, r3, r2
 8016222:	7c58      	ldrb	r0, [r3, #17]
 8016224:	0942      	lsrs	r2, r0, #5
 8016226:	7cd8      	ldrb	r0, [r3, #19]
 8016228:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801622c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016230:	bd10      	pop	{r4, pc}
 8016232:	4910      	ldr	r1, [pc, #64]	; (8016274 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016234:	8809      	ldrh	r1, [r1, #0]
 8016236:	4411      	add	r1, r2
 8016238:	428b      	cmp	r3, r1
 801623a:	da09      	bge.n	8016250 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801623c:	210e      	movs	r1, #14
 801623e:	1a9b      	subs	r3, r3, r2
 8016240:	4a0d      	ldr	r2, [pc, #52]	; (8016278 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016242:	6812      	ldr	r2, [r2, #0]
 8016244:	fb01 2303 	mla	r3, r1, r3, r2
 8016248:	7b18      	ldrb	r0, [r3, #12]
 801624a:	f000 001f 	and.w	r0, r0, #31
 801624e:	e7ef      	b.n	8016230 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016254:	4293      	cmp	r3, r2
 8016256:	d106      	bne.n	8016266 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8016258:	f7f6 ffbc 	bl	800d1d4 <_ZN8touchgfx3HAL3lcdEv>
 801625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016260:	6803      	ldr	r3, [r0, #0]
 8016262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016264:	4718      	bx	r3
 8016266:	2000      	movs	r0, #0
 8016268:	e7e2      	b.n	8016230 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801626a:	bf00      	nop
 801626c:	2001fe24 	.word	0x2001fe24
 8016270:	2001fe2c 	.word	0x2001fe2c
 8016274:	2001fe28 	.word	0x2001fe28
 8016278:	2001fe0c 	.word	0x2001fe0c

0801627c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801627c:	2010      	movs	r0, #16
 801627e:	4770      	bx	lr

08016280 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8016280:	2000      	movs	r0, #0
 8016282:	4770      	bx	lr

08016284 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8016284:	4b02      	ldr	r3, [pc, #8]	; (8016290 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8016286:	8818      	ldrh	r0, [r3, #0]
 8016288:	0040      	lsls	r0, r0, #1
 801628a:	b280      	uxth	r0, r0
 801628c:	4770      	bx	lr
 801628e:	bf00      	nop
 8016290:	2001fd9e 	.word	0x2001fd9e

08016294 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016294:	2bff      	cmp	r3, #255	; 0xff
 8016296:	d050      	beq.n	801633a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8016298:	2a0b      	cmp	r2, #11
 801629a:	d04a      	beq.n	8016332 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801629c:	d80e      	bhi.n	80162bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801629e:	2a03      	cmp	r2, #3
 80162a0:	d03f      	beq.n	8016322 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80162a2:	d804      	bhi.n	80162ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80162a4:	2a01      	cmp	r2, #1
 80162a6:	d03e      	beq.n	8016326 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80162a8:	d93f      	bls.n	801632a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80162aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80162ac:	4770      	bx	lr
 80162ae:	2a09      	cmp	r2, #9
 80162b0:	d03f      	beq.n	8016332 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80162b2:	d83c      	bhi.n	801632e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80162b4:	2a08      	cmp	r2, #8
 80162b6:	d03a      	beq.n	801632e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80162b8:	2000      	movs	r0, #0
 80162ba:	4770      	bx	lr
 80162bc:	2a2f      	cmp	r2, #47	; 0x2f
 80162be:	d024      	beq.n	801630a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80162c0:	d80d      	bhi.n	80162de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80162c2:	2a2d      	cmp	r2, #45	; 0x2d
 80162c4:	d014      	beq.n	80162f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80162c6:	d826      	bhi.n	8016316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80162c8:	2a2c      	cmp	r2, #44	; 0x2c
 80162ca:	d1f5      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80162cc:	684b      	ldr	r3, [r1, #4]
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d018      	beq.n	8016306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80162d4:	d323      	bcc.n	801631e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80162d6:	2b02      	cmp	r3, #2
 80162d8:	d1ee      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80162da:	6880      	ldr	r0, [r0, #8]
 80162dc:	4770      	bx	lr
 80162de:	2a31      	cmp	r2, #49	; 0x31
 80162e0:	d004      	beq.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80162e2:	d328      	bcc.n	8016336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80162e4:	2a32      	cmp	r2, #50	; 0x32
 80162e6:	d026      	beq.n	8016336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80162e8:	2a33      	cmp	r2, #51	; 0x33
 80162ea:	d1e5      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80162ec:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80162ee:	4770      	bx	lr
 80162f0:	684b      	ldr	r3, [r1, #4]
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	2b01      	cmp	r3, #1
 80162f6:	d004      	beq.n	8016302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80162f8:	d30b      	bcc.n	8016312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d1dc      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80162fe:	6900      	ldr	r0, [r0, #16]
 8016300:	4770      	bx	lr
 8016302:	6a00      	ldr	r0, [r0, #32]
 8016304:	4770      	bx	lr
 8016306:	6980      	ldr	r0, [r0, #24]
 8016308:	4770      	bx	lr
 801630a:	684b      	ldr	r3, [r1, #4]
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d1d2      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016312:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016314:	4770      	bx	lr
 8016316:	684b      	ldr	r3, [r1, #4]
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1cc      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801631e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016320:	4770      	bx	lr
 8016322:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016324:	4770      	bx	lr
 8016326:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016328:	4770      	bx	lr
 801632a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801632c:	4770      	bx	lr
 801632e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8016330:	4770      	bx	lr
 8016332:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016334:	4770      	bx	lr
 8016336:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016338:	4770      	bx	lr
 801633a:	2a0b      	cmp	r2, #11
 801633c:	d049      	beq.n	80163d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801633e:	d80e      	bhi.n	801635e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8016340:	2a03      	cmp	r2, #3
 8016342:	d040      	beq.n	80163c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016344:	d804      	bhi.n	8016350 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8016346:	2a01      	cmp	r2, #1
 8016348:	d03f      	beq.n	80163ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801634a:	d940      	bls.n	80163ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801634c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801634e:	4770      	bx	lr
 8016350:	2a09      	cmp	r2, #9
 8016352:	d03e      	beq.n	80163d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016354:	d801      	bhi.n	801635a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8016356:	2a08      	cmp	r2, #8
 8016358:	d1ae      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801635a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801635c:	4770      	bx	lr
 801635e:	2a2f      	cmp	r2, #47	; 0x2f
 8016360:	d024      	beq.n	80163ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016362:	d80d      	bhi.n	8016380 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016364:	2a2d      	cmp	r2, #45	; 0x2d
 8016366:	d014      	beq.n	8016392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8016368:	d826      	bhi.n	80163b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801636a:	2a2c      	cmp	r2, #44	; 0x2c
 801636c:	d1a4      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801636e:	684b      	ldr	r3, [r1, #4]
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d018      	beq.n	80163a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8016376:	d324      	bcc.n	80163c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016378:	2b02      	cmp	r3, #2
 801637a:	d19d      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801637c:	68c0      	ldr	r0, [r0, #12]
 801637e:	4770      	bx	lr
 8016380:	2a31      	cmp	r2, #49	; 0x31
 8016382:	d004      	beq.n	801638e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8016384:	d327      	bcc.n	80163d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016386:	2a32      	cmp	r2, #50	; 0x32
 8016388:	d025      	beq.n	80163d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801638a:	2a33      	cmp	r2, #51	; 0x33
 801638c:	d194      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801638e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016390:	4770      	bx	lr
 8016392:	684b      	ldr	r3, [r1, #4]
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b01      	cmp	r3, #1
 8016398:	d004      	beq.n	80163a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801639a:	d30b      	bcc.n	80163b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801639c:	2b02      	cmp	r3, #2
 801639e:	d18b      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163a0:	6940      	ldr	r0, [r0, #20]
 80163a2:	4770      	bx	lr
 80163a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80163a6:	4770      	bx	lr
 80163a8:	69c0      	ldr	r0, [r0, #28]
 80163aa:	4770      	bx	lr
 80163ac:	684b      	ldr	r3, [r1, #4]
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d181      	bne.n	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163b4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80163b6:	4770      	bx	lr
 80163b8:	684b      	ldr	r3, [r1, #4]
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f47f af7b 	bne.w	80162b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80163c4:	4770      	bx	lr
 80163c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80163c8:	4770      	bx	lr
 80163ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80163cc:	4770      	bx	lr
 80163ce:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80163d0:	4770      	bx	lr
 80163d2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80163d4:	4770      	bx	lr
 80163d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80163d8:	4770      	bx	lr

080163da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80163da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163de:	b087      	sub	sp, #28
 80163e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80163e2:	9101      	str	r1, [sp, #4]
 80163e4:	9205      	str	r2, [sp, #20]
 80163e6:	6841      	ldr	r1, [r0, #4]
 80163e8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80163ec:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80163f0:	9202      	str	r2, [sp, #8]
 80163f2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80163f6:	fb01 2404 	mla	r4, r1, r4, r2
 80163fa:	6802      	ldr	r2, [r0, #0]
 80163fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016400:	f8de 2000 	ldr.w	r2, [lr]
 8016404:	9203      	str	r2, [sp, #12]
 8016406:	f8de 2004 	ldr.w	r2, [lr, #4]
 801640a:	3204      	adds	r2, #4
 801640c:	9204      	str	r2, [sp, #16]
 801640e:	9a02      	ldr	r2, [sp, #8]
 8016410:	43d6      	mvns	r6, r2
 8016412:	b2f6      	uxtb	r6, r6
 8016414:	9a01      	ldr	r2, [sp, #4]
 8016416:	2a00      	cmp	r2, #0
 8016418:	dc03      	bgt.n	8016422 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801641a:	9a05      	ldr	r2, [sp, #20]
 801641c:	2a00      	cmp	r2, #0
 801641e:	f340 8129 	ble.w	8016674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016424:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016428:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801642c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801642e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016432:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016436:	2b00      	cmp	r3, #0
 8016438:	dd0e      	ble.n	8016458 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801643a:	1408      	asrs	r0, r1, #16
 801643c:	d405      	bmi.n	801644a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801643e:	4560      	cmp	r0, ip
 8016440:	da03      	bge.n	801644a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016442:	1410      	asrs	r0, r2, #16
 8016444:	d401      	bmi.n	801644a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016446:	42b8      	cmp	r0, r7
 8016448:	db07      	blt.n	801645a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801644a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801644c:	3b01      	subs	r3, #1
 801644e:	4401      	add	r1, r0
 8016450:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016452:	3402      	adds	r4, #2
 8016454:	4402      	add	r2, r0
 8016456:	e7ee      	b.n	8016436 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016458:	d071      	beq.n	801653e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801645a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801645c:	1e58      	subs	r0, r3, #1
 801645e:	fb05 1500 	mla	r5, r5, r0, r1
 8016462:	142d      	asrs	r5, r5, #16
 8016464:	d45f      	bmi.n	8016526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016466:	4565      	cmp	r5, ip
 8016468:	da5d      	bge.n	8016526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801646a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801646c:	fb05 2000 	mla	r0, r5, r0, r2
 8016470:	1400      	asrs	r0, r0, #16
 8016472:	d458      	bmi.n	8016526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016474:	42b8      	cmp	r0, r7
 8016476:	da56      	bge.n	8016526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016478:	4699      	mov	r9, r3
 801647a:	46a2      	mov	sl, r4
 801647c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8016480:	f1b9 0f00 	cmp.w	r9, #0
 8016484:	dd57      	ble.n	8016536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016486:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801648a:	9803      	ldr	r0, [sp, #12]
 801648c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016490:	fb07 000c 	mla	r0, r7, ip, r0
 8016494:	140d      	asrs	r5, r1, #16
 8016496:	5d40      	ldrb	r0, [r0, r5]
 8016498:	9d04      	ldr	r5, [sp, #16]
 801649a:	f109 39ff 	add.w	r9, r9, #4294967295
 801649e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80164a2:	f8ba 5000 	ldrh.w	r5, [sl]
 80164a6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80164aa:	122f      	asrs	r7, r5, #8
 80164ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80164b0:	fb17 f706 	smulbb	r7, r7, r6
 80164b4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80164b8:	00ed      	lsls	r5, r5, #3
 80164ba:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80164be:	b2ed      	uxtb	r5, r5
 80164c0:	fb18 f806 	smulbb	r8, r8, r6
 80164c4:	fb15 f506 	smulbb	r5, r5, r6
 80164c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80164cc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80164d0:	10c7      	asrs	r7, r0, #3
 80164d2:	00c0      	lsls	r0, r0, #3
 80164d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80164d8:	b2c0      	uxtb	r0, r0
 80164da:	fb07 870b 	mla	r7, r7, fp, r8
 80164de:	fb00 500b 	mla	r0, r0, fp, r5
 80164e2:	fa1f fc8c 	uxth.w	ip, ip
 80164e6:	b280      	uxth	r0, r0
 80164e8:	b2bf      	uxth	r7, r7
 80164ea:	f10c 0501 	add.w	r5, ip, #1
 80164ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80164f2:	f107 0801 	add.w	r8, r7, #1
 80164f6:	1c45      	adds	r5, r0, #1
 80164f8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80164fc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016500:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016502:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016506:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801650a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801650e:	ea45 0c0c 	orr.w	ip, r5, ip
 8016512:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016516:	4401      	add	r1, r0
 8016518:	9814      	ldr	r0, [sp, #80]	; 0x50
 801651a:	ea4c 0c08 	orr.w	ip, ip, r8
 801651e:	f82a cb02 	strh.w	ip, [sl], #2
 8016522:	4402      	add	r2, r0
 8016524:	e7ac      	b.n	8016480 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016526:	f04f 0800 	mov.w	r8, #0
 801652a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801652e:	eb03 0008 	add.w	r0, r3, r8
 8016532:	2800      	cmp	r0, #0
 8016534:	dc41      	bgt.n	80165ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8016536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801653a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801653e:	9b01      	ldr	r3, [sp, #4]
 8016540:	2b00      	cmp	r3, #0
 8016542:	f340 8097 	ble.w	8016674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801654a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801654e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016552:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016556:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801655a:	eef0 6a62 	vmov.f32	s13, s5
 801655e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016562:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016566:	ee61 7a27 	vmul.f32	s15, s2, s15
 801656a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801656e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016572:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8016576:	eef0 6a43 	vmov.f32	s13, s6
 801657a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801657e:	ee12 2a90 	vmov	r2, s5
 8016582:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016586:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801658c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016590:	ee13 2a10 	vmov	r2, s6
 8016594:	9313      	str	r3, [sp, #76]	; 0x4c
 8016596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016598:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801659c:	fb92 f3f3 	sdiv	r3, r2, r3
 80165a0:	9314      	str	r3, [sp, #80]	; 0x50
 80165a2:	9b01      	ldr	r3, [sp, #4]
 80165a4:	9a05      	ldr	r2, [sp, #20]
 80165a6:	3b01      	subs	r3, #1
 80165a8:	9301      	str	r3, [sp, #4]
 80165aa:	eeb0 3a67 	vmov.f32	s6, s15
 80165ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165b0:	eef0 2a47 	vmov.f32	s5, s14
 80165b4:	bf08      	it	eq
 80165b6:	4613      	moveq	r3, r2
 80165b8:	e72c      	b.n	8016414 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80165ba:	140f      	asrs	r7, r1, #16
 80165bc:	d453      	bmi.n	8016666 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165be:	f8de 5008 	ldr.w	r5, [lr, #8]
 80165c2:	42bd      	cmp	r5, r7
 80165c4:	dd4f      	ble.n	8016666 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80165ca:	d44c      	bmi.n	8016666 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165cc:	f8de 000c 	ldr.w	r0, [lr, #12]
 80165d0:	4560      	cmp	r0, ip
 80165d2:	dd48      	ble.n	8016666 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165d4:	9803      	ldr	r0, [sp, #12]
 80165d6:	b22d      	sxth	r5, r5
 80165d8:	fb0c 0505 	mla	r5, ip, r5, r0
 80165dc:	5de8      	ldrb	r0, [r5, r7]
 80165de:	9d04      	ldr	r5, [sp, #16]
 80165e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80165e4:	f06f 0501 	mvn.w	r5, #1
 80165e8:	fb05 fb08 	mul.w	fp, r5, r8
 80165ec:	f834 500b 	ldrh.w	r5, [r4, fp]
 80165f0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80165f4:	122f      	asrs	r7, r5, #8
 80165f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80165fa:	fb17 f706 	smulbb	r7, r7, r6
 80165fe:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016602:	00ed      	lsls	r5, r5, #3
 8016604:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8016608:	b2ed      	uxtb	r5, r5
 801660a:	fb19 f906 	smulbb	r9, r9, r6
 801660e:	fb15 f506 	smulbb	r5, r5, r6
 8016612:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016616:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801661a:	10c7      	asrs	r7, r0, #3
 801661c:	00c0      	lsls	r0, r0, #3
 801661e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016622:	b2c0      	uxtb	r0, r0
 8016624:	fb07 970a 	mla	r7, r7, sl, r9
 8016628:	fb00 500a 	mla	r0, r0, sl, r5
 801662c:	fa1f fc8c 	uxth.w	ip, ip
 8016630:	b2bf      	uxth	r7, r7
 8016632:	b280      	uxth	r0, r0
 8016634:	f10c 0501 	add.w	r5, ip, #1
 8016638:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801663c:	f107 0901 	add.w	r9, r7, #1
 8016640:	1c45      	adds	r5, r0, #1
 8016642:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016646:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801664a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801664e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016652:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8016656:	ea45 0c0c 	orr.w	ip, r5, ip
 801665a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801665e:	ea4c 0c09 	orr.w	ip, ip, r9
 8016662:	f824 c00b 	strh.w	ip, [r4, fp]
 8016666:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016668:	f108 38ff 	add.w	r8, r8, #4294967295
 801666c:	4401      	add	r1, r0
 801666e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016670:	4402      	add	r2, r0
 8016672:	e75c      	b.n	801652e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016674:	b007      	add	sp, #28
 8016676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801667a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801667a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801667e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016682:	b085      	sub	sp, #20
 8016684:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016686:	4693      	mov	fp, r2
 8016688:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801668c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8016690:	6870      	ldr	r0, [r6, #4]
 8016692:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016694:	fb00 2404 	mla	r4, r0, r4, r2
 8016698:	6832      	ldr	r2, [r6, #0]
 801669a:	9100      	str	r1, [sp, #0]
 801669c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80166a0:	682a      	ldr	r2, [r5, #0]
 80166a2:	9201      	str	r2, [sp, #4]
 80166a4:	686a      	ldr	r2, [r5, #4]
 80166a6:	3204      	adds	r2, #4
 80166a8:	9202      	str	r2, [sp, #8]
 80166aa:	9a00      	ldr	r2, [sp, #0]
 80166ac:	2a00      	cmp	r2, #0
 80166ae:	dc03      	bgt.n	80166b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80166b0:	f1bb 0f00 	cmp.w	fp, #0
 80166b4:	f340 80a0 	ble.w	80167f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80166b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166ba:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80166be:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80166c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80166c4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80166c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	dd0c      	ble.n	80166ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80166d0:	1406      	asrs	r6, r0, #16
 80166d2:	d405      	bmi.n	80166e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80166d4:	454e      	cmp	r6, r9
 80166d6:	da03      	bge.n	80166e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80166d8:	1416      	asrs	r6, r2, #16
 80166da:	d401      	bmi.n	80166e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80166dc:	4546      	cmp	r6, r8
 80166de:	db05      	blt.n	80166ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80166e0:	4470      	add	r0, lr
 80166e2:	4462      	add	r2, ip
 80166e4:	3b01      	subs	r3, #1
 80166e6:	3402      	adds	r4, #2
 80166e8:	e7f0      	b.n	80166cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80166ea:	d00f      	beq.n	801670c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80166ec:	1e5e      	subs	r6, r3, #1
 80166ee:	fb0e 0706 	mla	r7, lr, r6, r0
 80166f2:	143f      	asrs	r7, r7, #16
 80166f4:	d541      	bpl.n	801677a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80166f6:	4698      	mov	r8, r3
 80166f8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80166fc:	9603      	str	r6, [sp, #12]
 80166fe:	f1b8 0f00 	cmp.w	r8, #0
 8016702:	dc59      	bgt.n	80167b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016708:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801670c:	9b00      	ldr	r3, [sp, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	dd72      	ble.n	80167f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8016712:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016716:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801671a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801671e:	eeb0 6a62 	vmov.f32	s12, s5
 8016722:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016726:	ee31 1a05 	vadd.f32	s2, s2, s10
 801672a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801672e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016732:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016736:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801673a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801673e:	eeb0 6a43 	vmov.f32	s12, s6
 8016742:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016746:	ee12 2a90 	vmov	r2, s5
 801674a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801674e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016754:	fb92 fef3 	sdiv	lr, r2, r3
 8016758:	ee13 2a10 	vmov	r2, s6
 801675c:	fb92 fcf3 	sdiv	ip, r2, r3
 8016760:	9b00      	ldr	r3, [sp, #0]
 8016762:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016766:	3b01      	subs	r3, #1
 8016768:	9300      	str	r3, [sp, #0]
 801676a:	eeb0 3a67 	vmov.f32	s6, s15
 801676e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016770:	eef0 2a47 	vmov.f32	s5, s14
 8016774:	bf08      	it	eq
 8016776:	465b      	moveq	r3, fp
 8016778:	e797      	b.n	80166aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801677a:	454f      	cmp	r7, r9
 801677c:	dabb      	bge.n	80166f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801677e:	fb0c 2606 	mla	r6, ip, r6, r2
 8016782:	1436      	asrs	r6, r6, #16
 8016784:	d4b7      	bmi.n	80166f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016786:	4546      	cmp	r6, r8
 8016788:	dab5      	bge.n	80166f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801678a:	461e      	mov	r6, r3
 801678c:	46a0      	mov	r8, r4
 801678e:	2e00      	cmp	r6, #0
 8016790:	ddb8      	ble.n	8016704 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8016792:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8016796:	9901      	ldr	r1, [sp, #4]
 8016798:	1417      	asrs	r7, r2, #16
 801679a:	fb0a 1707 	mla	r7, sl, r7, r1
 801679e:	ea4f 4920 	mov.w	r9, r0, asr #16
 80167a2:	f817 7009 	ldrb.w	r7, [r7, r9]
 80167a6:	9902      	ldr	r1, [sp, #8]
 80167a8:	4470      	add	r0, lr
 80167aa:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80167ae:	4462      	add	r2, ip
 80167b0:	f828 7b02 	strh.w	r7, [r8], #2
 80167b4:	3e01      	subs	r6, #1
 80167b6:	e7ea      	b.n	801678e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80167b8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80167bc:	d417      	bmi.n	80167ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167be:	68ae      	ldr	r6, [r5, #8]
 80167c0:	454e      	cmp	r6, r9
 80167c2:	dd14      	ble.n	80167ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80167c8:	d411      	bmi.n	80167ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167ca:	68ef      	ldr	r7, [r5, #12]
 80167cc:	4557      	cmp	r7, sl
 80167ce:	dd0e      	ble.n	80167ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167d0:	f06f 0101 	mvn.w	r1, #1
 80167d4:	9f01      	ldr	r7, [sp, #4]
 80167d6:	b236      	sxth	r6, r6
 80167d8:	fb0a 7606 	mla	r6, sl, r6, r7
 80167dc:	9f02      	ldr	r7, [sp, #8]
 80167de:	f816 6009 	ldrb.w	r6, [r6, r9]
 80167e2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80167e6:	fb01 f608 	mul.w	r6, r1, r8
 80167ea:	9903      	ldr	r1, [sp, #12]
 80167ec:	538f      	strh	r7, [r1, r6]
 80167ee:	4470      	add	r0, lr
 80167f0:	4462      	add	r2, ip
 80167f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80167f6:	e782      	b.n	80166fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80167f8:	b005      	add	sp, #20
 80167fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80167fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016802:	b087      	sub	sp, #28
 8016804:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016806:	9102      	str	r1, [sp, #8]
 8016808:	9205      	str	r2, [sp, #20]
 801680a:	6861      	ldr	r1, [r4, #4]
 801680c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016810:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016814:	9203      	str	r2, [sp, #12]
 8016816:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801681a:	fb01 2000 	mla	r0, r1, r0, r2
 801681e:	6822      	ldr	r2, [r4, #0]
 8016820:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016824:	9200      	str	r2, [sp, #0]
 8016826:	f8dc 2000 	ldr.w	r2, [ip]
 801682a:	9204      	str	r2, [sp, #16]
 801682c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016830:	3204      	adds	r2, #4
 8016832:	9201      	str	r2, [sp, #4]
 8016834:	9a03      	ldr	r2, [sp, #12]
 8016836:	43d5      	mvns	r5, r2
 8016838:	b2ed      	uxtb	r5, r5
 801683a:	9a02      	ldr	r2, [sp, #8]
 801683c:	2a00      	cmp	r2, #0
 801683e:	dc03      	bgt.n	8016848 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016840:	9a05      	ldr	r2, [sp, #20]
 8016842:	2a00      	cmp	r2, #0
 8016844:	f340 812c 	ble.w	8016aa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016848:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801684a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801684e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016852:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016854:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016858:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801685c:	2b00      	cmp	r3, #0
 801685e:	dd10      	ble.n	8016882 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016860:	140c      	asrs	r4, r1, #16
 8016862:	d405      	bmi.n	8016870 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016864:	4574      	cmp	r4, lr
 8016866:	da03      	bge.n	8016870 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016868:	1414      	asrs	r4, r2, #16
 801686a:	d401      	bmi.n	8016870 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801686c:	42bc      	cmp	r4, r7
 801686e:	db09      	blt.n	8016884 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016870:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016872:	9800      	ldr	r0, [sp, #0]
 8016874:	4421      	add	r1, r4
 8016876:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016878:	3002      	adds	r0, #2
 801687a:	4422      	add	r2, r4
 801687c:	3b01      	subs	r3, #1
 801687e:	9000      	str	r0, [sp, #0]
 8016880:	e7ec      	b.n	801685c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016882:	d071      	beq.n	8016968 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8016884:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016886:	1e5c      	subs	r4, r3, #1
 8016888:	fb06 1604 	mla	r6, r6, r4, r1
 801688c:	1436      	asrs	r6, r6, #16
 801688e:	d45d      	bmi.n	801694c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016890:	4576      	cmp	r6, lr
 8016892:	da5b      	bge.n	801694c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016894:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016896:	fb06 2404 	mla	r4, r6, r4, r2
 801689a:	1424      	asrs	r4, r4, #16
 801689c:	d456      	bmi.n	801694c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801689e:	42bc      	cmp	r4, r7
 80168a0:	da54      	bge.n	801694c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80168a2:	4698      	mov	r8, r3
 80168a4:	f8dd 9000 	ldr.w	r9, [sp]
 80168a8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80168ac:	f1b8 0f00 	cmp.w	r8, #0
 80168b0:	dd54      	ble.n	801695c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80168b2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80168b6:	9804      	ldr	r0, [sp, #16]
 80168b8:	1414      	asrs	r4, r2, #16
 80168ba:	fb07 0404 	mla	r4, r7, r4, r0
 80168be:	140e      	asrs	r6, r1, #16
 80168c0:	f814 e006 	ldrb.w	lr, [r4, r6]
 80168c4:	9801      	ldr	r0, [sp, #4]
 80168c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80168ca:	eb00 0b0e 	add.w	fp, r0, lr
 80168ce:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80168d2:	f8b9 4000 	ldrh.w	r4, [r9]
 80168d6:	fb16 f60a 	smulbb	r6, r6, sl
 80168da:	1227      	asrs	r7, r4, #8
 80168dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80168e0:	fb07 6705 	mla	r7, r7, r5, r6
 80168e4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80168e8:	10e6      	asrs	r6, r4, #3
 80168ea:	00e4      	lsls	r4, r4, #3
 80168ec:	b2e4      	uxtb	r4, r4
 80168ee:	fb1b fb0a 	smulbb	fp, fp, sl
 80168f2:	fb14 f405 	smulbb	r4, r4, r5
 80168f6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80168fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80168fe:	fb06 b605 	mla	r6, r6, r5, fp
 8016902:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8016906:	b2bf      	uxth	r7, r7
 8016908:	b2b6      	uxth	r6, r6
 801690a:	fa1f fe8e 	uxth.w	lr, lr
 801690e:	1c7c      	adds	r4, r7, #1
 8016910:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8016914:	f106 0b01 	add.w	fp, r6, #1
 8016918:	f10e 0401 	add.w	r4, lr, #1
 801691c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801691e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8016922:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8016926:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801692a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801692e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016932:	4327      	orrs	r7, r4
 8016934:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016938:	4401      	add	r1, r0
 801693a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801693c:	ea47 070b 	orr.w	r7, r7, fp
 8016940:	f829 7b02 	strh.w	r7, [r9], #2
 8016944:	4402      	add	r2, r0
 8016946:	f108 38ff 	add.w	r8, r8, #4294967295
 801694a:	e7af      	b.n	80168ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801694c:	f04f 0e00 	mov.w	lr, #0
 8016950:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8016954:	eb03 040e 	add.w	r4, r3, lr
 8016958:	2c00      	cmp	r4, #0
 801695a:	dc43      	bgt.n	80169e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801695c:	9a00      	ldr	r2, [sp, #0]
 801695e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016962:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	9b02      	ldr	r3, [sp, #8]
 801696a:	2b00      	cmp	r3, #0
 801696c:	f340 8098 	ble.w	8016aa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016974:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016978:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801697c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016980:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016984:	eef0 6a62 	vmov.f32	s13, s5
 8016988:	ee31 1a05 	vadd.f32	s2, s2, s10
 801698c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016990:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016994:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016998:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801699c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80169a0:	eef0 6a43 	vmov.f32	s13, s6
 80169a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80169a8:	ee12 2a90 	vmov	r2, s5
 80169ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80169b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80169ba:	ee13 2a10 	vmov	r2, s6
 80169be:	9313      	str	r3, [sp, #76]	; 0x4c
 80169c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169c2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80169c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80169ca:	9314      	str	r3, [sp, #80]	; 0x50
 80169cc:	9b02      	ldr	r3, [sp, #8]
 80169ce:	9a05      	ldr	r2, [sp, #20]
 80169d0:	3b01      	subs	r3, #1
 80169d2:	9302      	str	r3, [sp, #8]
 80169d4:	eeb0 3a67 	vmov.f32	s6, s15
 80169d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169da:	eef0 2a47 	vmov.f32	s5, s14
 80169de:	bf08      	it	eq
 80169e0:	4613      	moveq	r3, r2
 80169e2:	e72a      	b.n	801683a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80169e4:	140f      	asrs	r7, r1, #16
 80169e6:	d454      	bmi.n	8016a92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80169e8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80169ec:	42be      	cmp	r6, r7
 80169ee:	dd50      	ble.n	8016a92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80169f0:	ea5f 4822 	movs.w	r8, r2, asr #16
 80169f4:	d44d      	bmi.n	8016a92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80169f6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80169fa:	4544      	cmp	r4, r8
 80169fc:	dd49      	ble.n	8016a92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80169fe:	f06f 0001 	mvn.w	r0, #1
 8016a02:	9c04      	ldr	r4, [sp, #16]
 8016a04:	b236      	sxth	r6, r6
 8016a06:	fb08 4606 	mla	r6, r8, r6, r4
 8016a0a:	f816 8007 	ldrb.w	r8, [r6, r7]
 8016a0e:	9c01      	ldr	r4, [sp, #4]
 8016a10:	fb00 fa0e 	mul.w	sl, r0, lr
 8016a14:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016a18:	eb04 0b08 	add.w	fp, r4, r8
 8016a1c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8016a20:	9800      	ldr	r0, [sp, #0]
 8016a22:	fb16 f609 	smulbb	r6, r6, r9
 8016a26:	f830 400a 	ldrh.w	r4, [r0, sl]
 8016a2a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8016a2e:	1227      	asrs	r7, r4, #8
 8016a30:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016a34:	fb07 6705 	mla	r7, r7, r5, r6
 8016a38:	10e6      	asrs	r6, r4, #3
 8016a3a:	00e4      	lsls	r4, r4, #3
 8016a3c:	b2e4      	uxtb	r4, r4
 8016a3e:	fb1b fb09 	smulbb	fp, fp, r9
 8016a42:	9801      	ldr	r0, [sp, #4]
 8016a44:	fb14 f405 	smulbb	r4, r4, r5
 8016a48:	f810 8008 	ldrb.w	r8, [r0, r8]
 8016a4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016a50:	fb06 b605 	mla	r6, r6, r5, fp
 8016a54:	fb08 4809 	mla	r8, r8, r9, r4
 8016a58:	b2bf      	uxth	r7, r7
 8016a5a:	b2b6      	uxth	r6, r6
 8016a5c:	fa1f f888 	uxth.w	r8, r8
 8016a60:	1c7c      	adds	r4, r7, #1
 8016a62:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8016a66:	f106 0b01 	add.w	fp, r6, #1
 8016a6a:	f108 0401 	add.w	r4, r8, #1
 8016a6e:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8016a72:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8016a76:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016a7a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8016a7e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016a82:	4327      	orrs	r7, r4
 8016a84:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016a88:	9800      	ldr	r0, [sp, #0]
 8016a8a:	ea47 070b 	orr.w	r7, r7, fp
 8016a8e:	f820 700a 	strh.w	r7, [r0, sl]
 8016a92:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016a94:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016a98:	4401      	add	r1, r0
 8016a9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016a9c:	4402      	add	r2, r0
 8016a9e:	e759      	b.n	8016954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016aa0:	b007      	add	sp, #28
 8016aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016aa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab0:	b085      	sub	sp, #20
 8016ab2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016ab4:	9203      	str	r2, [sp, #12]
 8016ab6:	6870      	ldr	r0, [r6, #4]
 8016ab8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016abc:	fb00 2404 	mla	r4, r0, r4, r2
 8016ac0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016ac2:	6832      	ldr	r2, [r6, #0]
 8016ac4:	686f      	ldr	r7, [r5, #4]
 8016ac6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016aca:	682a      	ldr	r2, [r5, #0]
 8016acc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8016ad0:	9101      	str	r1, [sp, #4]
 8016ad2:	9202      	str	r2, [sp, #8]
 8016ad4:	3704      	adds	r7, #4
 8016ad6:	9a01      	ldr	r2, [sp, #4]
 8016ad8:	2a00      	cmp	r2, #0
 8016ada:	dc03      	bgt.n	8016ae4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016adc:	9a03      	ldr	r2, [sp, #12]
 8016ade:	2a00      	cmp	r2, #0
 8016ae0:	f340 80cc 	ble.w	8016c7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8016ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ae6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016aea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016aee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016af0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8016af4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	dd0d      	ble.n	8016b18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016afc:	1406      	asrs	r6, r0, #16
 8016afe:	d405      	bmi.n	8016b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b00:	454e      	cmp	r6, r9
 8016b02:	da03      	bge.n	8016b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b04:	1416      	asrs	r6, r2, #16
 8016b06:	d401      	bmi.n	8016b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b08:	4546      	cmp	r6, r8
 8016b0a:	db06      	blt.n	8016b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016b0c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016b0e:	4460      	add	r0, ip
 8016b10:	4432      	add	r2, r6
 8016b12:	3b01      	subs	r3, #1
 8016b14:	3402      	adds	r4, #2
 8016b16:	e7ef      	b.n	8016af8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016b18:	d00f      	beq.n	8016b3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016b1a:	1e5e      	subs	r6, r3, #1
 8016b1c:	fb0c 0e06 	mla	lr, ip, r6, r0
 8016b20:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8016b24:	d543      	bpl.n	8016bae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8016b26:	4698      	mov	r8, r3
 8016b28:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8016b2c:	f1b8 0f00 	cmp.w	r8, #0
 8016b30:	dc71      	bgt.n	8016c16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8016b32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016b3a:	9b01      	ldr	r3, [sp, #4]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	f340 809d 	ble.w	8016c7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8016b42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b4e:	eeb0 6a62 	vmov.f32	s12, s5
 8016b52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b66:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016b6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b6e:	eeb0 6a43 	vmov.f32	s12, s6
 8016b72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b76:	ee12 2a90 	vmov	r2, s5
 8016b7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b84:	fb92 fcf3 	sdiv	ip, r2, r3
 8016b88:	ee13 2a10 	vmov	r2, s6
 8016b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b90:	9312      	str	r3, [sp, #72]	; 0x48
 8016b92:	9b01      	ldr	r3, [sp, #4]
 8016b94:	9a03      	ldr	r2, [sp, #12]
 8016b96:	3b01      	subs	r3, #1
 8016b98:	9301      	str	r3, [sp, #4]
 8016b9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ba0:	eeb0 3a67 	vmov.f32	s6, s15
 8016ba4:	bf08      	it	eq
 8016ba6:	4613      	moveq	r3, r2
 8016ba8:	eef0 2a47 	vmov.f32	s5, s14
 8016bac:	e793      	b.n	8016ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016bae:	45ce      	cmp	lr, r9
 8016bb0:	dab9      	bge.n	8016b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016bb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016bb4:	fb01 2606 	mla	r6, r1, r6, r2
 8016bb8:	1436      	asrs	r6, r6, #16
 8016bba:	d4b4      	bmi.n	8016b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016bbc:	4546      	cmp	r6, r8
 8016bbe:	dab2      	bge.n	8016b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016bc0:	4698      	mov	r8, r3
 8016bc2:	46a2      	mov	sl, r4
 8016bc4:	f1b8 0f00 	cmp.w	r8, #0
 8016bc8:	ddb3      	ble.n	8016b32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8016bca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016bce:	9902      	ldr	r1, [sp, #8]
 8016bd0:	1416      	asrs	r6, r2, #16
 8016bd2:	fb09 1606 	mla	r6, r9, r6, r1
 8016bd6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8016bda:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8016bde:	4929      	ldr	r1, [pc, #164]	; (8016c84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8016be0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016be4:	eb07 0b0e 	add.w	fp, r7, lr
 8016be8:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8016bec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016bf0:	00f6      	lsls	r6, r6, #3
 8016bf2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8016bf6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016bfa:	ea49 0606 	orr.w	r6, r9, r6
 8016bfe:	f817 900e 	ldrb.w	r9, [r7, lr]
 8016c02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c04:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8016c08:	f82a 6b02 	strh.w	r6, [sl], #2
 8016c0c:	4460      	add	r0, ip
 8016c0e:	440a      	add	r2, r1
 8016c10:	f108 38ff 	add.w	r8, r8, #4294967295
 8016c14:	e7d6      	b.n	8016bc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016c16:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016c1a:	d429      	bmi.n	8016c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c1c:	68ae      	ldr	r6, [r5, #8]
 8016c1e:	454e      	cmp	r6, r9
 8016c20:	dd26      	ble.n	8016c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c22:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016c26:	d423      	bmi.n	8016c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c28:	68e9      	ldr	r1, [r5, #12]
 8016c2a:	4559      	cmp	r1, fp
 8016c2c:	dd20      	ble.n	8016c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c2e:	9902      	ldr	r1, [sp, #8]
 8016c30:	fa0f fe86 	sxth.w	lr, r6
 8016c34:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8016c38:	f06f 0101 	mvn.w	r1, #1
 8016c3c:	f81e e009 	ldrb.w	lr, [lr, r9]
 8016c40:	fb01 f908 	mul.w	r9, r1, r8
 8016c44:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016c48:	eb07 060e 	add.w	r6, r7, lr
 8016c4c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8016c50:	7876      	ldrb	r6, [r6, #1]
 8016c52:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8016c56:	00f6      	lsls	r6, r6, #3
 8016c58:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8016c5c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016c60:	ea4b 0606 	orr.w	r6, fp, r6
 8016c64:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8016c68:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8016c6c:	f82a 6009 	strh.w	r6, [sl, r9]
 8016c70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c72:	4460      	add	r0, ip
 8016c74:	440a      	add	r2, r1
 8016c76:	f108 38ff 	add.w	r8, r8, #4294967295
 8016c7a:	e757      	b.n	8016b2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016c7c:	b005      	add	sp, #20
 8016c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c82:	bf00      	nop
 8016c84:	fffff800 	.word	0xfffff800

08016c88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c90:	b087      	sub	sp, #28
 8016c92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016c94:	468b      	mov	fp, r1
 8016c96:	9204      	str	r2, [sp, #16]
 8016c98:	6841      	ldr	r1, [r0, #4]
 8016c9a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016c9e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016ca2:	9205      	str	r2, [sp, #20]
 8016ca4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8016ca8:	fb01 2404 	mla	r4, r1, r4, r2
 8016cac:	6802      	ldr	r2, [r0, #0]
 8016cae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016cb2:	f8dc 2000 	ldr.w	r2, [ip]
 8016cb6:	9201      	str	r2, [sp, #4]
 8016cb8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016cbc:	3204      	adds	r2, #4
 8016cbe:	9202      	str	r2, [sp, #8]
 8016cc0:	f1bb 0f00 	cmp.w	fp, #0
 8016cc4:	dc03      	bgt.n	8016cce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016cc6:	9a04      	ldr	r2, [sp, #16]
 8016cc8:	2a00      	cmp	r2, #0
 8016cca:	f340 8138 	ble.w	8016f3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cd0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8016cd4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016cd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cda:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8016cde:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	dd0e      	ble.n	8016d04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ce6:	1402      	asrs	r2, r0, #16
 8016ce8:	d405      	bmi.n	8016cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016cea:	42ba      	cmp	r2, r7
 8016cec:	da03      	bge.n	8016cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016cee:	140a      	asrs	r2, r1, #16
 8016cf0:	d401      	bmi.n	8016cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016cf2:	42b2      	cmp	r2, r6
 8016cf4:	db07      	blt.n	8016d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016cf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	4410      	add	r0, r2
 8016cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016cfe:	3402      	adds	r4, #2
 8016d00:	4411      	add	r1, r2
 8016d02:	e7ee      	b.n	8016ce2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016d04:	d019      	beq.n	8016d3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016d06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016d08:	1e5a      	subs	r2, r3, #1
 8016d0a:	fb05 0502 	mla	r5, r5, r2, r0
 8016d0e:	142d      	asrs	r5, r5, #16
 8016d10:	d409      	bmi.n	8016d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d12:	42bd      	cmp	r5, r7
 8016d14:	da07      	bge.n	8016d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016d18:	fb05 1202 	mla	r2, r5, r2, r1
 8016d1c:	1412      	asrs	r2, r2, #16
 8016d1e:	d402      	bmi.n	8016d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d20:	42b2      	cmp	r2, r6
 8016d22:	f2c0 80ac 	blt.w	8016e7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8016d26:	f04f 0e00 	mov.w	lr, #0
 8016d2a:	eb03 020e 	add.w	r2, r3, lr
 8016d2e:	2a00      	cmp	r2, #0
 8016d30:	dc3e      	bgt.n	8016db0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8016d32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016d3a:	f1bb 0f00 	cmp.w	fp, #0
 8016d3e:	f340 80fe 	ble.w	8016f3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016d42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d52:	eeb0 6a62 	vmov.f32	s12, s5
 8016d56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d6a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016d6e:	eeb0 6a43 	vmov.f32	s12, s6
 8016d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016d76:	ee12 2a90 	vmov	r2, s5
 8016d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d88:	ee13 2a10 	vmov	r2, s6
 8016d8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d90:	f1bb 0b01 	subs.w	fp, fp, #1
 8016d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d98:	9a04      	ldr	r2, [sp, #16]
 8016d9a:	9314      	str	r3, [sp, #80]	; 0x50
 8016d9c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016da2:	eeb0 3a67 	vmov.f32	s6, s15
 8016da6:	bf08      	it	eq
 8016da8:	4613      	moveq	r3, r2
 8016daa:	eef0 2a47 	vmov.f32	s5, s14
 8016dae:	e787      	b.n	8016cc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016db0:	1406      	asrs	r6, r0, #16
 8016db2:	d45d      	bmi.n	8016e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016db4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8016db8:	42b5      	cmp	r5, r6
 8016dba:	dd59      	ble.n	8016e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016dbc:	140f      	asrs	r7, r1, #16
 8016dbe:	d457      	bmi.n	8016e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016dc0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016dc4:	42ba      	cmp	r2, r7
 8016dc6:	dd53      	ble.n	8016e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016dc8:	9a01      	ldr	r2, [sp, #4]
 8016dca:	b22d      	sxth	r5, r5
 8016dcc:	fb07 2505 	mla	r5, r7, r5, r2
 8016dd0:	5daa      	ldrb	r2, [r5, r6]
 8016dd2:	9d02      	ldr	r5, [sp, #8]
 8016dd4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016dd8:	0e2e      	lsrs	r6, r5, #24
 8016dda:	d049      	beq.n	8016e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016ddc:	f06f 0201 	mvn.w	r2, #1
 8016de0:	fb02 f20e 	mul.w	r2, r2, lr
 8016de4:	f834 8002 	ldrh.w	r8, [r4, r2]
 8016de8:	9203      	str	r2, [sp, #12]
 8016dea:	9a05      	ldr	r2, [sp, #20]
 8016dec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016df0:	4356      	muls	r6, r2
 8016df2:	1c72      	adds	r2, r6, #1
 8016df4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016df8:	1212      	asrs	r2, r2, #8
 8016dfa:	fa1f f982 	uxth.w	r9, r2
 8016dfe:	43d2      	mvns	r2, r2
 8016e00:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016e04:	fb16 f609 	smulbb	r6, r6, r9
 8016e08:	b2ed      	uxtb	r5, r5
 8016e0a:	ea4f 2728 	mov.w	r7, r8, asr #8
 8016e0e:	fb15 f509 	smulbb	r5, r5, r9
 8016e12:	b2d2      	uxtb	r2, r2
 8016e14:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016e18:	fb07 6702 	mla	r7, r7, r2, r6
 8016e1c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8016e20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016e24:	fb1a fa09 	smulbb	sl, sl, r9
 8016e28:	fa5f f888 	uxtb.w	r8, r8
 8016e2c:	fb08 5502 	mla	r5, r8, r2, r5
 8016e30:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016e34:	fb06 a602 	mla	r6, r6, r2, sl
 8016e38:	b2bf      	uxth	r7, r7
 8016e3a:	b2ad      	uxth	r5, r5
 8016e3c:	1c7a      	adds	r2, r7, #1
 8016e3e:	f105 0a01 	add.w	sl, r5, #1
 8016e42:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016e46:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016e4a:	b2b6      	uxth	r6, r6
 8016e4c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016e50:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016e54:	ea4a 0707 	orr.w	r7, sl, r7
 8016e58:	f106 0a01 	add.w	sl, r6, #1
 8016e5c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016e60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016e64:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016e68:	9a03      	ldr	r2, [sp, #12]
 8016e6a:	ea47 070a 	orr.w	r7, r7, sl
 8016e6e:	52a7      	strh	r7, [r4, r2]
 8016e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016e72:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016e76:	4410      	add	r0, r2
 8016e78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e7a:	4411      	add	r1, r2
 8016e7c:	e755      	b.n	8016d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016e7e:	f04f 0800 	mov.w	r8, #0
 8016e82:	eba3 0208 	sub.w	r2, r3, r8
 8016e86:	2a00      	cmp	r2, #0
 8016e88:	f77f af53 	ble.w	8016d32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016e8c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8016e90:	9f01      	ldr	r7, [sp, #4]
 8016e92:	140a      	asrs	r2, r1, #16
 8016e94:	fb06 7202 	mla	r2, r6, r2, r7
 8016e98:	1405      	asrs	r5, r0, #16
 8016e9a:	5d52      	ldrb	r2, [r2, r5]
 8016e9c:	9d02      	ldr	r5, [sp, #8]
 8016e9e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016ea2:	0e2e      	lsrs	r6, r5, #24
 8016ea4:	d044      	beq.n	8016f30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8016ea6:	9a05      	ldr	r2, [sp, #20]
 8016ea8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8016eac:	4356      	muls	r6, r2
 8016eae:	1c72      	adds	r2, r6, #1
 8016eb0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016eb4:	1212      	asrs	r2, r2, #8
 8016eb6:	fa1f f982 	uxth.w	r9, r2
 8016eba:	43d2      	mvns	r2, r2
 8016ebc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016ec0:	fb16 f609 	smulbb	r6, r6, r9
 8016ec4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016ec8:	b2ed      	uxtb	r5, r5
 8016eca:	ea4f 272e 	mov.w	r7, lr, asr #8
 8016ece:	fb15 f509 	smulbb	r5, r5, r9
 8016ed2:	b2d2      	uxtb	r2, r2
 8016ed4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016ed8:	fb07 6702 	mla	r7, r7, r2, r6
 8016edc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016ee0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016ee4:	fb1a fa09 	smulbb	sl, sl, r9
 8016ee8:	fa5f fe8e 	uxtb.w	lr, lr
 8016eec:	fb0e 5502 	mla	r5, lr, r2, r5
 8016ef0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016ef4:	fb06 a602 	mla	r6, r6, r2, sl
 8016ef8:	b2bf      	uxth	r7, r7
 8016efa:	b2ad      	uxth	r5, r5
 8016efc:	1c7a      	adds	r2, r7, #1
 8016efe:	f105 0a01 	add.w	sl, r5, #1
 8016f02:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016f06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016f0a:	b2b6      	uxth	r6, r6
 8016f0c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016f10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016f14:	ea4a 0707 	orr.w	r7, sl, r7
 8016f18:	f106 0a01 	add.w	sl, r6, #1
 8016f1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016f20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016f24:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016f28:	ea47 070a 	orr.w	r7, r7, sl
 8016f2c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8016f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016f32:	f108 0801 	add.w	r8, r8, #1
 8016f36:	4410      	add	r0, r2
 8016f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f3a:	4411      	add	r1, r2
 8016f3c:	e7a1      	b.n	8016e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8016f3e:	b007      	add	sp, #28
 8016f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f4c:	b085      	sub	sp, #20
 8016f4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016f50:	468b      	mov	fp, r1
 8016f52:	6841      	ldr	r1, [r0, #4]
 8016f54:	9203      	str	r2, [sp, #12]
 8016f56:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016f5a:	fb01 2404 	mla	r4, r1, r4, r2
 8016f5e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8016f62:	6802      	ldr	r2, [r0, #0]
 8016f64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016f68:	f8de 2000 	ldr.w	r2, [lr]
 8016f6c:	9200      	str	r2, [sp, #0]
 8016f6e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016f72:	3204      	adds	r2, #4
 8016f74:	9201      	str	r2, [sp, #4]
 8016f76:	f1bb 0f00 	cmp.w	fp, #0
 8016f7a:	dc03      	bgt.n	8016f84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016f7c:	9a03      	ldr	r2, [sp, #12]
 8016f7e:	2a00      	cmp	r2, #0
 8016f80:	f340 8153 	ble.w	801722a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8016f84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f86:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016f8a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016f8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f90:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8016f94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	dd0e      	ble.n	8016fba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016f9c:	1408      	asrs	r0, r1, #16
 8016f9e:	d405      	bmi.n	8016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fa0:	42b8      	cmp	r0, r7
 8016fa2:	da03      	bge.n	8016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fa4:	1410      	asrs	r0, r2, #16
 8016fa6:	d401      	bmi.n	8016fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fa8:	42b0      	cmp	r0, r6
 8016faa:	db07      	blt.n	8016fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016fac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016fae:	3b01      	subs	r3, #1
 8016fb0:	4401      	add	r1, r0
 8016fb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016fb4:	3402      	adds	r4, #2
 8016fb6:	4402      	add	r2, r0
 8016fb8:	e7ee      	b.n	8016f98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016fba:	d017      	beq.n	8016fec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8016fbc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016fbe:	1e58      	subs	r0, r3, #1
 8016fc0:	fb05 1500 	mla	r5, r5, r0, r1
 8016fc4:	142d      	asrs	r5, r5, #16
 8016fc6:	d409      	bmi.n	8016fdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016fc8:	42bd      	cmp	r5, r7
 8016fca:	da07      	bge.n	8016fdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016fcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016fce:	fb05 2000 	mla	r0, r5, r0, r2
 8016fd2:	1400      	asrs	r0, r0, #16
 8016fd4:	d402      	bmi.n	8016fdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016fd6:	42b0      	cmp	r0, r6
 8016fd8:	f2c0 80bc 	blt.w	8017154 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8016fdc:	2600      	movs	r6, #0
 8016fde:	1998      	adds	r0, r3, r6
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	dc3e      	bgt.n	8017062 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8016fe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016fe8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016fec:	f1bb 0f00 	cmp.w	fp, #0
 8016ff0:	f340 811b 	ble.w	801722a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8016ff4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016ff8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ffc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017000:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017004:	eeb0 6a62 	vmov.f32	s12, s5
 8017008:	ee31 1a05 	vadd.f32	s2, s2, s10
 801700c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017010:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017014:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017018:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801701c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017020:	eeb0 6a43 	vmov.f32	s12, s6
 8017024:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017028:	ee12 2a90 	vmov	r2, s5
 801702c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017032:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017036:	fb92 f3f3 	sdiv	r3, r2, r3
 801703a:	ee13 2a10 	vmov	r2, s6
 801703e:	9311      	str	r3, [sp, #68]	; 0x44
 8017040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017042:	f1bb 0b01 	subs.w	fp, fp, #1
 8017046:	fb92 f3f3 	sdiv	r3, r2, r3
 801704a:	9a03      	ldr	r2, [sp, #12]
 801704c:	9312      	str	r3, [sp, #72]	; 0x48
 801704e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017054:	eeb0 3a67 	vmov.f32	s6, s15
 8017058:	bf08      	it	eq
 801705a:	4613      	moveq	r3, r2
 801705c:	eef0 2a47 	vmov.f32	s5, s14
 8017060:	e789      	b.n	8016f76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017062:	140f      	asrs	r7, r1, #16
 8017064:	d426      	bmi.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017066:	f8de 5008 	ldr.w	r5, [lr, #8]
 801706a:	42bd      	cmp	r5, r7
 801706c:	dd22      	ble.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801706e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017072:	d41f      	bmi.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017074:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017078:	4560      	cmp	r0, ip
 801707a:	dd1b      	ble.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801707c:	9800      	ldr	r0, [sp, #0]
 801707e:	b22d      	sxth	r5, r5
 8017080:	fb0c 0505 	mla	r5, ip, r5, r0
 8017084:	5de8      	ldrb	r0, [r5, r7]
 8017086:	9d01      	ldr	r5, [sp, #4]
 8017088:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801708c:	0e07      	lsrs	r7, r0, #24
 801708e:	2fff      	cmp	r7, #255	; 0xff
 8017090:	d116      	bne.n	80170c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017092:	f06f 0501 	mvn.w	r5, #1
 8017096:	fb05 f706 	mul.w	r7, r5, r6
 801709a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801709e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80170a2:	0945      	lsrs	r5, r0, #5
 80170a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80170a8:	ea4c 0505 	orr.w	r5, ip, r5
 80170ac:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80170b0:	4305      	orrs	r5, r0
 80170b2:	53e5      	strh	r5, [r4, r7]
 80170b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80170b6:	3e01      	subs	r6, #1
 80170b8:	4401      	add	r1, r0
 80170ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80170bc:	4402      	add	r2, r0
 80170be:	e78e      	b.n	8016fde <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80170c0:	b2fd      	uxtb	r5, r7
 80170c2:	2f00      	cmp	r7, #0
 80170c4:	d0f6      	beq.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80170c6:	f06f 0701 	mvn.w	r7, #1
 80170ca:	fa1f f985 	uxth.w	r9, r5
 80170ce:	43ed      	mvns	r5, r5
 80170d0:	4377      	muls	r7, r6
 80170d2:	f834 8007 	ldrh.w	r8, [r4, r7]
 80170d6:	9702      	str	r7, [sp, #8]
 80170d8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80170dc:	fb17 f709 	smulbb	r7, r7, r9
 80170e0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80170e4:	b2c0      	uxtb	r0, r0
 80170e6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80170ea:	fb10 f009 	smulbb	r0, r0, r9
 80170ee:	b2ed      	uxtb	r5, r5
 80170f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80170f4:	fb0c 7c05 	mla	ip, ip, r5, r7
 80170f8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80170fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017100:	fb1a fa09 	smulbb	sl, sl, r9
 8017104:	fa5f f888 	uxtb.w	r8, r8
 8017108:	fb08 0005 	mla	r0, r8, r5, r0
 801710c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017110:	fb07 a705 	mla	r7, r7, r5, sl
 8017114:	b280      	uxth	r0, r0
 8017116:	fa1f fc8c 	uxth.w	ip, ip
 801711a:	f100 0a01 	add.w	sl, r0, #1
 801711e:	f10c 0501 	add.w	r5, ip, #1
 8017122:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8017126:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801712a:	b2bf      	uxth	r7, r7
 801712c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017130:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017134:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017138:	f107 0a01 	add.w	sl, r7, #1
 801713c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017140:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017144:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017148:	9802      	ldr	r0, [sp, #8]
 801714a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801714e:	f824 c000 	strh.w	ip, [r4, r0]
 8017152:	e7af      	b.n	80170b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017154:	f04f 0800 	mov.w	r8, #0
 8017158:	eba3 0008 	sub.w	r0, r3, r8
 801715c:	2800      	cmp	r0, #0
 801715e:	f77f af41 	ble.w	8016fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017162:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017166:	9f00      	ldr	r7, [sp, #0]
 8017168:	1410      	asrs	r0, r2, #16
 801716a:	fb06 7000 	mla	r0, r6, r0, r7
 801716e:	140d      	asrs	r5, r1, #16
 8017170:	5d40      	ldrb	r0, [r0, r5]
 8017172:	9d01      	ldr	r5, [sp, #4]
 8017174:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017178:	0e2e      	lsrs	r6, r5, #24
 801717a:	2eff      	cmp	r6, #255	; 0xff
 801717c:	d112      	bne.n	80171a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801717e:	482c      	ldr	r0, [pc, #176]	; (8017230 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8017180:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017184:	0968      	lsrs	r0, r5, #5
 8017186:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801718a:	4330      	orrs	r0, r6
 801718c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017190:	4328      	orrs	r0, r5
 8017192:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8017196:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017198:	f108 0801 	add.w	r8, r8, #1
 801719c:	4401      	add	r1, r0
 801719e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80171a0:	4402      	add	r2, r0
 80171a2:	e7d9      	b.n	8017158 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80171a4:	b2f0      	uxtb	r0, r6
 80171a6:	2e00      	cmp	r6, #0
 80171a8:	d0f5      	beq.n	8017196 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80171aa:	fa1f f980 	uxth.w	r9, r0
 80171ae:	43c0      	mvns	r0, r0
 80171b0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80171b4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80171b8:	fb16 f609 	smulbb	r6, r6, r9
 80171bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80171c0:	b2ed      	uxtb	r5, r5
 80171c2:	ea4f 272c 	mov.w	r7, ip, asr #8
 80171c6:	fb15 f509 	smulbb	r5, r5, r9
 80171ca:	b2c0      	uxtb	r0, r0
 80171cc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80171d0:	fb07 6700 	mla	r7, r7, r0, r6
 80171d4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80171d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80171dc:	fb1a fa09 	smulbb	sl, sl, r9
 80171e0:	fa5f fc8c 	uxtb.w	ip, ip
 80171e4:	fb0c 5500 	mla	r5, ip, r0, r5
 80171e8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80171ec:	fb06 a600 	mla	r6, r6, r0, sl
 80171f0:	b2bf      	uxth	r7, r7
 80171f2:	b2ad      	uxth	r5, r5
 80171f4:	1c78      	adds	r0, r7, #1
 80171f6:	f105 0a01 	add.w	sl, r5, #1
 80171fa:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80171fe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017202:	b2b6      	uxth	r6, r6
 8017204:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017208:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801720c:	ea4a 0707 	orr.w	r7, sl, r7
 8017210:	f106 0a01 	add.w	sl, r6, #1
 8017214:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017218:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801721c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017220:	ea47 070a 	orr.w	r7, r7, sl
 8017224:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017228:	e7b5      	b.n	8017196 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801722a:	b005      	add	sp, #20
 801722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017230:	fffff800 	.word	0xfffff800

08017234 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	b087      	sub	sp, #28
 801723e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017240:	468b      	mov	fp, r1
 8017242:	9204      	str	r2, [sp, #16]
 8017244:	6861      	ldr	r1, [r4, #4]
 8017246:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801724a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801724e:	9205      	str	r2, [sp, #20]
 8017250:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017254:	fb01 2000 	mla	r0, r1, r0, r2
 8017258:	6822      	ldr	r2, [r4, #0]
 801725a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801725e:	f8de 2000 	ldr.w	r2, [lr]
 8017262:	9201      	str	r2, [sp, #4]
 8017264:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017268:	9202      	str	r2, [sp, #8]
 801726a:	f1bb 0f00 	cmp.w	fp, #0
 801726e:	dc03      	bgt.n	8017278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017270:	9a04      	ldr	r2, [sp, #16]
 8017272:	2a00      	cmp	r2, #0
 8017274:	f340 8142 	ble.w	80174fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801727a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801727e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017284:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017288:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801728c:	2b00      	cmp	r3, #0
 801728e:	dd0e      	ble.n	80172ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017290:	140c      	asrs	r4, r1, #16
 8017292:	d405      	bmi.n	80172a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017294:	42bc      	cmp	r4, r7
 8017296:	da03      	bge.n	80172a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017298:	1414      	asrs	r4, r2, #16
 801729a:	d401      	bmi.n	80172a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801729c:	42b4      	cmp	r4, r6
 801729e:	db07      	blt.n	80172b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80172a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80172a2:	3b01      	subs	r3, #1
 80172a4:	4421      	add	r1, r4
 80172a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172a8:	3002      	adds	r0, #2
 80172aa:	4422      	add	r2, r4
 80172ac:	e7ee      	b.n	801728c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80172ae:	d019      	beq.n	80172e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80172b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80172b2:	1e5c      	subs	r4, r3, #1
 80172b4:	fb05 1504 	mla	r5, r5, r4, r1
 80172b8:	142d      	asrs	r5, r5, #16
 80172ba:	d409      	bmi.n	80172d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172bc:	42bd      	cmp	r5, r7
 80172be:	da07      	bge.n	80172d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80172c2:	fb05 2404 	mla	r4, r5, r4, r2
 80172c6:	1424      	asrs	r4, r4, #16
 80172c8:	d402      	bmi.n	80172d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172ca:	42b4      	cmp	r4, r6
 80172cc:	f2c0 80b1 	blt.w	8017432 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80172d0:	f04f 0800 	mov.w	r8, #0
 80172d4:	eb03 0408 	add.w	r4, r3, r8
 80172d8:	2c00      	cmp	r4, #0
 80172da:	dc3e      	bgt.n	801735a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80172dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80172e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80172e4:	f1bb 0f00 	cmp.w	fp, #0
 80172e8:	f340 8108 	ble.w	80174fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80172ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80172f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80172f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80172f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80172fc:	eeb0 6a62 	vmov.f32	s12, s5
 8017300:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017304:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017308:	ee61 7a27 	vmul.f32	s15, s2, s15
 801730c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017310:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017314:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017318:	eeb0 6a43 	vmov.f32	s12, s6
 801731c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017320:	ee12 2a90 	vmov	r2, s5
 8017324:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801732a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801732e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017332:	ee13 2a10 	vmov	r2, s6
 8017336:	9313      	str	r3, [sp, #76]	; 0x4c
 8017338:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801733a:	f1bb 0b01 	subs.w	fp, fp, #1
 801733e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017342:	9a04      	ldr	r2, [sp, #16]
 8017344:	9314      	str	r3, [sp, #80]	; 0x50
 8017346:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801734a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801734c:	eeb0 3a67 	vmov.f32	s6, s15
 8017350:	bf08      	it	eq
 8017352:	4613      	moveq	r3, r2
 8017354:	eef0 2a47 	vmov.f32	s5, s14
 8017358:	e787      	b.n	801726a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801735a:	140e      	asrs	r6, r1, #16
 801735c:	d462      	bmi.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801735e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017362:	42b5      	cmp	r5, r6
 8017364:	dd5e      	ble.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017366:	1417      	asrs	r7, r2, #16
 8017368:	d45c      	bmi.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801736a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801736e:	42bc      	cmp	r4, r7
 8017370:	dd58      	ble.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017372:	b22d      	sxth	r5, r5
 8017374:	fb07 6505 	mla	r5, r7, r5, r6
 8017378:	9c02      	ldr	r4, [sp, #8]
 801737a:	5d66      	ldrb	r6, [r4, r5]
 801737c:	2e00      	cmp	r6, #0
 801737e:	d051      	beq.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017380:	9c01      	ldr	r4, [sp, #4]
 8017382:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8017386:	f06f 0401 	mvn.w	r4, #1
 801738a:	fb04 f408 	mul.w	r4, r4, r8
 801738e:	5b05      	ldrh	r5, [r0, r4]
 8017390:	9403      	str	r4, [sp, #12]
 8017392:	9c05      	ldr	r4, [sp, #20]
 8017394:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017398:	4366      	muls	r6, r4
 801739a:	1c74      	adds	r4, r6, #1
 801739c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80173a0:	1224      	asrs	r4, r4, #8
 80173a2:	b2a7      	uxth	r7, r4
 80173a4:	43e4      	mvns	r4, r4
 80173a6:	122e      	asrs	r6, r5, #8
 80173a8:	b2e4      	uxtb	r4, r4
 80173aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80173ae:	fb16 f604 	smulbb	r6, r6, r4
 80173b2:	00ed      	lsls	r5, r5, #3
 80173b4:	b2ed      	uxtb	r5, r5
 80173b6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80173ba:	fb15 f504 	smulbb	r5, r5, r4
 80173be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80173c2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80173c6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80173ca:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80173ce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80173d2:	fb1a fa04 	smulbb	sl, sl, r4
 80173d6:	fa5f f989 	uxtb.w	r9, r9
 80173da:	fb09 5507 	mla	r5, r9, r7, r5
 80173de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80173e2:	fb06 a607 	mla	r6, r6, r7, sl
 80173e6:	fa1f fc8c 	uxth.w	ip, ip
 80173ea:	b2ad      	uxth	r5, r5
 80173ec:	f10c 0401 	add.w	r4, ip, #1
 80173f0:	f105 0a01 	add.w	sl, r5, #1
 80173f4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80173f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80173fc:	b2b6      	uxth	r6, r6
 80173fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017402:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017406:	ea4a 0c0c 	orr.w	ip, sl, ip
 801740a:	f106 0a01 	add.w	sl, r6, #1
 801740e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017412:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017416:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801741a:	9c03      	ldr	r4, [sp, #12]
 801741c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017420:	f820 c004 	strh.w	ip, [r0, r4]
 8017424:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017426:	f108 38ff 	add.w	r8, r8, #4294967295
 801742a:	4421      	add	r1, r4
 801742c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801742e:	4422      	add	r2, r4
 8017430:	e750      	b.n	80172d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017432:	f04f 0900 	mov.w	r9, #0
 8017436:	eba3 0409 	sub.w	r4, r3, r9
 801743a:	2c00      	cmp	r4, #0
 801743c:	f77f af4e 	ble.w	80172dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017440:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017444:	140d      	asrs	r5, r1, #16
 8017446:	1414      	asrs	r4, r2, #16
 8017448:	fb06 5404 	mla	r4, r6, r4, r5
 801744c:	9d02      	ldr	r5, [sp, #8]
 801744e:	5d2e      	ldrb	r6, [r5, r4]
 8017450:	2e00      	cmp	r6, #0
 8017452:	d04c      	beq.n	80174ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017454:	9d01      	ldr	r5, [sp, #4]
 8017456:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801745a:	9c05      	ldr	r4, [sp, #20]
 801745c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017460:	4366      	muls	r6, r4
 8017462:	1c74      	adds	r4, r6, #1
 8017464:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017468:	1224      	asrs	r4, r4, #8
 801746a:	b2a7      	uxth	r7, r4
 801746c:	43e4      	mvns	r4, r4
 801746e:	122e      	asrs	r6, r5, #8
 8017470:	b2e4      	uxtb	r4, r4
 8017472:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017476:	fb16 f604 	smulbb	r6, r6, r4
 801747a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801747e:	00ed      	lsls	r5, r5, #3
 8017480:	b2ed      	uxtb	r5, r5
 8017482:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017486:	fb15 f504 	smulbb	r5, r5, r4
 801748a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801748e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017492:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017496:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801749a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801749e:	fb1a fa04 	smulbb	sl, sl, r4
 80174a2:	fa5f f888 	uxtb.w	r8, r8
 80174a6:	fb08 5507 	mla	r5, r8, r7, r5
 80174aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80174ae:	fb06 a607 	mla	r6, r6, r7, sl
 80174b2:	fa1f fc8c 	uxth.w	ip, ip
 80174b6:	b2ad      	uxth	r5, r5
 80174b8:	f10c 0401 	add.w	r4, ip, #1
 80174bc:	f105 0a01 	add.w	sl, r5, #1
 80174c0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80174c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80174c8:	b2b6      	uxth	r6, r6
 80174ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80174ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80174d2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80174d6:	f106 0a01 	add.w	sl, r6, #1
 80174da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80174de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80174e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80174e6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80174ea:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80174ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80174f0:	f109 0901 	add.w	r9, r9, #1
 80174f4:	4421      	add	r1, r4
 80174f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80174f8:	4422      	add	r2, r4
 80174fa:	e79c      	b.n	8017436 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80174fc:	b007      	add	sp, #28
 80174fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017502 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801750a:	b085      	sub	sp, #20
 801750c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801750e:	468b      	mov	fp, r1
 8017510:	6861      	ldr	r1, [r4, #4]
 8017512:	9203      	str	r2, [sp, #12]
 8017514:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8017518:	fb01 2000 	mla	r0, r1, r0, r2
 801751c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017520:	6822      	ldr	r2, [r4, #0]
 8017522:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017526:	f8d8 2000 	ldr.w	r2, [r8]
 801752a:	9200      	str	r2, [sp, #0]
 801752c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017530:	9201      	str	r2, [sp, #4]
 8017532:	f1bb 0f00 	cmp.w	fp, #0
 8017536:	dc03      	bgt.n	8017540 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017538:	9a03      	ldr	r2, [sp, #12]
 801753a:	2a00      	cmp	r2, #0
 801753c:	f340 8146 	ble.w	80177cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017542:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017546:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801754a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801754c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017550:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017554:	2b00      	cmp	r3, #0
 8017556:	dd0e      	ble.n	8017576 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017558:	140c      	asrs	r4, r1, #16
 801755a:	d405      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801755c:	42bc      	cmp	r4, r7
 801755e:	da03      	bge.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017560:	1414      	asrs	r4, r2, #16
 8017562:	d401      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017564:	42b4      	cmp	r4, r6
 8017566:	db07      	blt.n	8017578 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017568:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801756a:	3b01      	subs	r3, #1
 801756c:	4421      	add	r1, r4
 801756e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017570:	3002      	adds	r0, #2
 8017572:	4422      	add	r2, r4
 8017574:	e7ee      	b.n	8017554 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017576:	d017      	beq.n	80175a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017578:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801757a:	1e5c      	subs	r4, r3, #1
 801757c:	fb05 1504 	mla	r5, r5, r4, r1
 8017580:	142d      	asrs	r5, r5, #16
 8017582:	d409      	bmi.n	8017598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017584:	42bd      	cmp	r5, r7
 8017586:	da07      	bge.n	8017598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017588:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801758a:	fb05 2404 	mla	r4, r5, r4, r2
 801758e:	1424      	asrs	r4, r4, #16
 8017590:	d402      	bmi.n	8017598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017592:	42b4      	cmp	r4, r6
 8017594:	f2c0 80b3 	blt.w	80176fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8017598:	2600      	movs	r6, #0
 801759a:	199c      	adds	r4, r3, r6
 801759c:	2c00      	cmp	r4, #0
 801759e:	dc3e      	bgt.n	801761e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80175a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80175a8:	f1bb 0f00 	cmp.w	fp, #0
 80175ac:	f340 810e 	ble.w	80177cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80175b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80175b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80175bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80175c0:	eeb0 6a62 	vmov.f32	s12, s5
 80175c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80175c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80175cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80175d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80175d8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80175dc:	eeb0 6a43 	vmov.f32	s12, s6
 80175e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80175e4:	ee12 2a90 	vmov	r2, s5
 80175e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80175ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80175f6:	ee13 2a10 	vmov	r2, s6
 80175fa:	9311      	str	r3, [sp, #68]	; 0x44
 80175fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175fe:	f1bb 0b01 	subs.w	fp, fp, #1
 8017602:	fb92 f3f3 	sdiv	r3, r2, r3
 8017606:	9a03      	ldr	r2, [sp, #12]
 8017608:	9312      	str	r3, [sp, #72]	; 0x48
 801760a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017610:	eeb0 3a67 	vmov.f32	s6, s15
 8017614:	bf08      	it	eq
 8017616:	4613      	moveq	r3, r2
 8017618:	eef0 2a47 	vmov.f32	s5, s14
 801761c:	e789      	b.n	8017532 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801761e:	140f      	asrs	r7, r1, #16
 8017620:	d418      	bmi.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017622:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017626:	42bd      	cmp	r5, r7
 8017628:	dd14      	ble.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801762a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801762e:	d411      	bmi.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017630:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8017634:	4564      	cmp	r4, ip
 8017636:	dd0d      	ble.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017638:	b22d      	sxth	r5, r5
 801763a:	fb0c 7505 	mla	r5, ip, r5, r7
 801763e:	9c01      	ldr	r4, [sp, #4]
 8017640:	5d64      	ldrb	r4, [r4, r5]
 8017642:	2cff      	cmp	r4, #255	; 0xff
 8017644:	d10c      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017646:	9c00      	ldr	r4, [sp, #0]
 8017648:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801764c:	f06f 0401 	mvn.w	r4, #1
 8017650:	4374      	muls	r4, r6
 8017652:	5305      	strh	r5, [r0, r4]
 8017654:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017656:	3e01      	subs	r6, #1
 8017658:	4421      	add	r1, r4
 801765a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801765c:	4422      	add	r2, r4
 801765e:	e79c      	b.n	801759a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017660:	2c00      	cmp	r4, #0
 8017662:	d0f7      	beq.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017664:	9f00      	ldr	r7, [sp, #0]
 8017666:	fa1f fc84 	uxth.w	ip, r4
 801766a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801766e:	f06f 0501 	mvn.w	r5, #1
 8017672:	43e4      	mvns	r4, r4
 8017674:	4375      	muls	r5, r6
 8017676:	9502      	str	r5, [sp, #8]
 8017678:	5b45      	ldrh	r5, [r0, r5]
 801767a:	b2e4      	uxtb	r4, r4
 801767c:	122f      	asrs	r7, r5, #8
 801767e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017682:	fb17 f704 	smulbb	r7, r7, r4
 8017686:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801768a:	00ed      	lsls	r5, r5, #3
 801768c:	b2ed      	uxtb	r5, r5
 801768e:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8017692:	fb15 f504 	smulbb	r5, r5, r4
 8017696:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801769a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801769e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80176a2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80176a6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80176aa:	fb1a fa04 	smulbb	sl, sl, r4
 80176ae:	fa5f f989 	uxtb.w	r9, r9
 80176b2:	fb09 550c 	mla	r5, r9, ip, r5
 80176b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80176ba:	fb07 a70c 	mla	r7, r7, ip, sl
 80176be:	fa1f fe8e 	uxth.w	lr, lr
 80176c2:	b2ad      	uxth	r5, r5
 80176c4:	f10e 0401 	add.w	r4, lr, #1
 80176c8:	f105 0a01 	add.w	sl, r5, #1
 80176cc:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80176d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80176d4:	b2bf      	uxth	r7, r7
 80176d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80176da:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80176de:	ea4a 0e0e 	orr.w	lr, sl, lr
 80176e2:	f107 0a01 	add.w	sl, r7, #1
 80176e6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80176ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80176ee:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80176f2:	9c02      	ldr	r4, [sp, #8]
 80176f4:	ea4e 0e0a 	orr.w	lr, lr, sl
 80176f8:	f820 e004 	strh.w	lr, [r0, r4]
 80176fc:	e7aa      	b.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80176fe:	f04f 0900 	mov.w	r9, #0
 8017702:	eba3 0409 	sub.w	r4, r3, r9
 8017706:	2c00      	cmp	r4, #0
 8017708:	f77f af4a 	ble.w	80175a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801770c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8017710:	1414      	asrs	r4, r2, #16
 8017712:	140d      	asrs	r5, r1, #16
 8017714:	fb06 5504 	mla	r5, r6, r4, r5
 8017718:	9c01      	ldr	r4, [sp, #4]
 801771a:	5d64      	ldrb	r4, [r4, r5]
 801771c:	2cff      	cmp	r4, #255	; 0xff
 801771e:	d10b      	bne.n	8017738 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8017720:	9c00      	ldr	r4, [sp, #0]
 8017722:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8017726:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801772a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801772c:	f109 0901 	add.w	r9, r9, #1
 8017730:	4421      	add	r1, r4
 8017732:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017734:	4422      	add	r2, r4
 8017736:	e7e4      	b.n	8017702 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8017738:	2c00      	cmp	r4, #0
 801773a:	d0f6      	beq.n	801772a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801773c:	b2a7      	uxth	r7, r4
 801773e:	43e4      	mvns	r4, r4
 8017740:	9e00      	ldr	r6, [sp, #0]
 8017742:	b2e4      	uxtb	r4, r4
 8017744:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8017748:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801774c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017750:	122e      	asrs	r6, r5, #8
 8017752:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017756:	fb16 f604 	smulbb	r6, r6, r4
 801775a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801775e:	00ed      	lsls	r5, r5, #3
 8017760:	b2ed      	uxtb	r5, r5
 8017762:	fb15 f504 	smulbb	r5, r5, r4
 8017766:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801776a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801776e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017772:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8017776:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801777a:	fb1a fa04 	smulbb	sl, sl, r4
 801777e:	fa5f fe8e 	uxtb.w	lr, lr
 8017782:	fb0e 5507 	mla	r5, lr, r7, r5
 8017786:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801778a:	fb06 a607 	mla	r6, r6, r7, sl
 801778e:	fa1f fc8c 	uxth.w	ip, ip
 8017792:	b2ad      	uxth	r5, r5
 8017794:	f10c 0401 	add.w	r4, ip, #1
 8017798:	f105 0a01 	add.w	sl, r5, #1
 801779c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80177a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80177a4:	b2b6      	uxth	r6, r6
 80177a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80177aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80177ae:	ea4a 0c0c 	orr.w	ip, sl, ip
 80177b2:	f106 0a01 	add.w	sl, r6, #1
 80177b6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80177ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80177be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80177c2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80177c6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80177ca:	e7ae      	b.n	801772a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80177cc:	b005      	add	sp, #20
 80177ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80177d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d6:	b085      	sub	sp, #20
 80177d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80177da:	9100      	str	r1, [sp, #0]
 80177dc:	9203      	str	r2, [sp, #12]
 80177de:	6841      	ldr	r1, [r0, #4]
 80177e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80177e4:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80177e8:	9201      	str	r2, [sp, #4]
 80177ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80177ee:	fb01 2404 	mla	r4, r1, r4, r2
 80177f2:	6802      	ldr	r2, [r0, #0]
 80177f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80177f8:	f8de 2000 	ldr.w	r2, [lr]
 80177fc:	9202      	str	r2, [sp, #8]
 80177fe:	9a01      	ldr	r2, [sp, #4]
 8017800:	43d6      	mvns	r6, r2
 8017802:	b2f6      	uxtb	r6, r6
 8017804:	9a00      	ldr	r2, [sp, #0]
 8017806:	2a00      	cmp	r2, #0
 8017808:	dc03      	bgt.n	8017812 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801780a:	9a03      	ldr	r2, [sp, #12]
 801780c:	2a00      	cmp	r2, #0
 801780e:	f340 8124 	ble.w	8017a5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017812:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017814:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017818:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801781c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801781e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017822:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017826:	2b00      	cmp	r3, #0
 8017828:	dd0e      	ble.n	8017848 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801782a:	1408      	asrs	r0, r1, #16
 801782c:	d405      	bmi.n	801783a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801782e:	4560      	cmp	r0, ip
 8017830:	da03      	bge.n	801783a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017832:	1410      	asrs	r0, r2, #16
 8017834:	d401      	bmi.n	801783a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017836:	42b8      	cmp	r0, r7
 8017838:	db07      	blt.n	801784a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801783a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801783c:	3b01      	subs	r3, #1
 801783e:	4401      	add	r1, r0
 8017840:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017842:	3402      	adds	r4, #2
 8017844:	4402      	add	r2, r0
 8017846:	e7ee      	b.n	8017826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8017848:	d06e      	beq.n	8017928 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801784a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801784c:	1e58      	subs	r0, r3, #1
 801784e:	fb05 1500 	mla	r5, r5, r0, r1
 8017852:	142d      	asrs	r5, r5, #16
 8017854:	d45c      	bmi.n	8017910 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017856:	4565      	cmp	r5, ip
 8017858:	da5a      	bge.n	8017910 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801785a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801785c:	fb05 2000 	mla	r0, r5, r0, r2
 8017860:	1400      	asrs	r0, r0, #16
 8017862:	d455      	bmi.n	8017910 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017864:	42b8      	cmp	r0, r7
 8017866:	da53      	bge.n	8017910 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017868:	4699      	mov	r9, r3
 801786a:	46a2      	mov	sl, r4
 801786c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8017870:	f1b9 0f00 	cmp.w	r9, #0
 8017874:	dd54      	ble.n	8017920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017876:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801787a:	140d      	asrs	r5, r1, #16
 801787c:	1410      	asrs	r0, r2, #16
 801787e:	fb07 5000 	mla	r0, r7, r0, r5
 8017882:	9d02      	ldr	r5, [sp, #8]
 8017884:	f109 39ff 	add.w	r9, r9, #4294967295
 8017888:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801788c:	f8ba 5000 	ldrh.w	r5, [sl]
 8017890:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017894:	122f      	asrs	r7, r5, #8
 8017896:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801789a:	fb17 f706 	smulbb	r7, r7, r6
 801789e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80178a2:	00ed      	lsls	r5, r5, #3
 80178a4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80178a8:	b2ed      	uxtb	r5, r5
 80178aa:	fb18 f806 	smulbb	r8, r8, r6
 80178ae:	fb15 f506 	smulbb	r5, r5, r6
 80178b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80178b6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80178ba:	10c7      	asrs	r7, r0, #3
 80178bc:	00c0      	lsls	r0, r0, #3
 80178be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80178c2:	b2c0      	uxtb	r0, r0
 80178c4:	fb07 870b 	mla	r7, r7, fp, r8
 80178c8:	fb00 500b 	mla	r0, r0, fp, r5
 80178cc:	fa1f fc8c 	uxth.w	ip, ip
 80178d0:	b280      	uxth	r0, r0
 80178d2:	b2bf      	uxth	r7, r7
 80178d4:	f10c 0501 	add.w	r5, ip, #1
 80178d8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80178dc:	f107 0801 	add.w	r8, r7, #1
 80178e0:	1c45      	adds	r5, r0, #1
 80178e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80178e6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80178ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80178ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80178f0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80178f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80178f8:	ea45 0c0c 	orr.w	ip, r5, ip
 80178fc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017900:	4401      	add	r1, r0
 8017902:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017904:	ea4c 0c08 	orr.w	ip, ip, r8
 8017908:	f82a cb02 	strh.w	ip, [sl], #2
 801790c:	4402      	add	r2, r0
 801790e:	e7af      	b.n	8017870 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017910:	f04f 0800 	mov.w	r8, #0
 8017914:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8017918:	eb03 0008 	add.w	r0, r3, r8
 801791c:	2800      	cmp	r0, #0
 801791e:	dc41      	bgt.n	80179a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8017920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017924:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017928:	9b00      	ldr	r3, [sp, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	f340 8095 	ble.w	8017a5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017934:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017938:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801793c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017940:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017944:	eef0 6a62 	vmov.f32	s13, s5
 8017948:	ee31 1a05 	vadd.f32	s2, s2, s10
 801794c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017950:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017958:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801795c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8017960:	eef0 6a43 	vmov.f32	s13, s6
 8017964:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017968:	ee12 2a90 	vmov	r2, s5
 801796c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017972:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017976:	fb92 f3f3 	sdiv	r3, r2, r3
 801797a:	ee13 2a10 	vmov	r2, s6
 801797e:	9311      	str	r3, [sp, #68]	; 0x44
 8017980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017982:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8017986:	fb92 f3f3 	sdiv	r3, r2, r3
 801798a:	9312      	str	r3, [sp, #72]	; 0x48
 801798c:	9b00      	ldr	r3, [sp, #0]
 801798e:	9a03      	ldr	r2, [sp, #12]
 8017990:	3b01      	subs	r3, #1
 8017992:	9300      	str	r3, [sp, #0]
 8017994:	eeb0 3a67 	vmov.f32	s6, s15
 8017998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801799a:	eef0 2a47 	vmov.f32	s5, s14
 801799e:	bf08      	it	eq
 80179a0:	4613      	moveq	r3, r2
 80179a2:	e72f      	b.n	8017804 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80179a4:	140f      	asrs	r7, r1, #16
 80179a6:	d451      	bmi.n	8017a4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179a8:	f8de 5008 	ldr.w	r5, [lr, #8]
 80179ac:	42bd      	cmp	r5, r7
 80179ae:	dd4d      	ble.n	8017a4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179b0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80179b4:	d44a      	bmi.n	8017a4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179b6:	f8de 000c 	ldr.w	r0, [lr, #12]
 80179ba:	4560      	cmp	r0, ip
 80179bc:	dd46      	ble.n	8017a4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179be:	b22d      	sxth	r5, r5
 80179c0:	fb0c 7505 	mla	r5, ip, r5, r7
 80179c4:	9802      	ldr	r0, [sp, #8]
 80179c6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80179ca:	f06f 0501 	mvn.w	r5, #1
 80179ce:	fb05 fb08 	mul.w	fp, r5, r8
 80179d2:	f834 500b 	ldrh.w	r5, [r4, fp]
 80179d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80179da:	122f      	asrs	r7, r5, #8
 80179dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80179e0:	fb17 f706 	smulbb	r7, r7, r6
 80179e4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80179e8:	00ed      	lsls	r5, r5, #3
 80179ea:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80179ee:	b2ed      	uxtb	r5, r5
 80179f0:	fb19 f906 	smulbb	r9, r9, r6
 80179f4:	fb15 f506 	smulbb	r5, r5, r6
 80179f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80179fc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017a00:	10c7      	asrs	r7, r0, #3
 8017a02:	00c0      	lsls	r0, r0, #3
 8017a04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017a08:	b2c0      	uxtb	r0, r0
 8017a0a:	fb07 970a 	mla	r7, r7, sl, r9
 8017a0e:	fb00 500a 	mla	r0, r0, sl, r5
 8017a12:	fa1f fc8c 	uxth.w	ip, ip
 8017a16:	b2bf      	uxth	r7, r7
 8017a18:	b280      	uxth	r0, r0
 8017a1a:	f10c 0501 	add.w	r5, ip, #1
 8017a1e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017a22:	f107 0901 	add.w	r9, r7, #1
 8017a26:	1c45      	adds	r5, r0, #1
 8017a28:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017a2c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017a30:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017a34:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017a38:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017a3c:	ea45 0c0c 	orr.w	ip, r5, ip
 8017a40:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017a44:	ea4c 0c09 	orr.w	ip, ip, r9
 8017a48:	f824 c00b 	strh.w	ip, [r4, fp]
 8017a4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017a4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a52:	4401      	add	r1, r0
 8017a54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a56:	4402      	add	r2, r0
 8017a58:	e75e      	b.n	8017918 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017a5a:	b005      	add	sp, #20
 8017a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	b085      	sub	sp, #20
 8017a6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017a6c:	4693      	mov	fp, r2
 8017a6e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017a72:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017a76:	6870      	ldr	r0, [r6, #4]
 8017a78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017a7a:	fb00 2404 	mla	r4, r0, r4, r2
 8017a7e:	6832      	ldr	r2, [r6, #0]
 8017a80:	9101      	str	r1, [sp, #4]
 8017a82:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017a86:	682a      	ldr	r2, [r5, #0]
 8017a88:	9202      	str	r2, [sp, #8]
 8017a8a:	9a01      	ldr	r2, [sp, #4]
 8017a8c:	2a00      	cmp	r2, #0
 8017a8e:	dc03      	bgt.n	8017a98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017a90:	f1bb 0f00 	cmp.w	fp, #0
 8017a94:	f340 809a 	ble.w	8017bcc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017a9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017aa4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017aa8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	dd0c      	ble.n	8017aca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017ab0:	1406      	asrs	r6, r0, #16
 8017ab2:	d405      	bmi.n	8017ac0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017ab4:	454e      	cmp	r6, r9
 8017ab6:	da03      	bge.n	8017ac0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017ab8:	1416      	asrs	r6, r2, #16
 8017aba:	d401      	bmi.n	8017ac0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017abc:	4546      	cmp	r6, r8
 8017abe:	db05      	blt.n	8017acc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017ac0:	4470      	add	r0, lr
 8017ac2:	4462      	add	r2, ip
 8017ac4:	3b01      	subs	r3, #1
 8017ac6:	3402      	adds	r4, #2
 8017ac8:	e7f0      	b.n	8017aac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017aca:	d00f      	beq.n	8017aec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8017acc:	1e5e      	subs	r6, r3, #1
 8017ace:	fb0e 0706 	mla	r7, lr, r6, r0
 8017ad2:	143f      	asrs	r7, r7, #16
 8017ad4:	d541      	bpl.n	8017b5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8017ad6:	4698      	mov	r8, r3
 8017ad8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017adc:	9603      	str	r6, [sp, #12]
 8017ade:	f1b8 0f00 	cmp.w	r8, #0
 8017ae2:	dc56      	bgt.n	8017b92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8017ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ae8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017aec:	9b01      	ldr	r3, [sp, #4]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	dd6c      	ble.n	8017bcc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017af2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017af6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017afa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017afe:	eeb0 6a62 	vmov.f32	s12, s5
 8017b02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b06:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017b1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b1e:	eeb0 6a43 	vmov.f32	s12, s6
 8017b22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b26:	ee12 2a90 	vmov	r2, s5
 8017b2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b34:	fb92 fef3 	sdiv	lr, r2, r3
 8017b38:	ee13 2a10 	vmov	r2, s6
 8017b3c:	fb92 fcf3 	sdiv	ip, r2, r3
 8017b40:	9b01      	ldr	r3, [sp, #4]
 8017b42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017b46:	3b01      	subs	r3, #1
 8017b48:	9301      	str	r3, [sp, #4]
 8017b4a:	eeb0 3a67 	vmov.f32	s6, s15
 8017b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b50:	eef0 2a47 	vmov.f32	s5, s14
 8017b54:	bf08      	it	eq
 8017b56:	465b      	moveq	r3, fp
 8017b58:	e797      	b.n	8017a8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8017b5a:	454f      	cmp	r7, r9
 8017b5c:	dabb      	bge.n	8017ad6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b5e:	fb0c 2606 	mla	r6, ip, r6, r2
 8017b62:	1436      	asrs	r6, r6, #16
 8017b64:	d4b7      	bmi.n	8017ad6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b66:	4546      	cmp	r6, r8
 8017b68:	dab5      	bge.n	8017ad6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b6a:	461e      	mov	r6, r3
 8017b6c:	46a0      	mov	r8, r4
 8017b6e:	2e00      	cmp	r6, #0
 8017b70:	ddb8      	ble.n	8017ae4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017b72:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017b76:	1417      	asrs	r7, r2, #16
 8017b78:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017b7c:	fb0a 9707 	mla	r7, sl, r7, r9
 8017b80:	9902      	ldr	r1, [sp, #8]
 8017b82:	4470      	add	r0, lr
 8017b84:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8017b88:	4462      	add	r2, ip
 8017b8a:	f828 7b02 	strh.w	r7, [r8], #2
 8017b8e:	3e01      	subs	r6, #1
 8017b90:	e7ed      	b.n	8017b6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8017b92:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017b96:	d414      	bmi.n	8017bc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017b98:	68ae      	ldr	r6, [r5, #8]
 8017b9a:	454e      	cmp	r6, r9
 8017b9c:	dd11      	ble.n	8017bc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017b9e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017ba2:	d40e      	bmi.n	8017bc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017ba4:	68ef      	ldr	r7, [r5, #12]
 8017ba6:	4557      	cmp	r7, sl
 8017ba8:	dd0b      	ble.n	8017bc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017baa:	f06f 0101 	mvn.w	r1, #1
 8017bae:	b236      	sxth	r6, r6
 8017bb0:	fb0a 9606 	mla	r6, sl, r6, r9
 8017bb4:	9f02      	ldr	r7, [sp, #8]
 8017bb6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017bba:	fb01 f608 	mul.w	r6, r1, r8
 8017bbe:	9903      	ldr	r1, [sp, #12]
 8017bc0:	538f      	strh	r7, [r1, r6]
 8017bc2:	4470      	add	r0, lr
 8017bc4:	4462      	add	r2, ip
 8017bc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bca:	e788      	b.n	8017ade <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017bcc:	b005      	add	sp, #20
 8017bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017bd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bda:	b087      	sub	sp, #28
 8017bdc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017bde:	468b      	mov	fp, r1
 8017be0:	9203      	str	r2, [sp, #12]
 8017be2:	6841      	ldr	r1, [r0, #4]
 8017be4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017be8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8017bec:	9204      	str	r2, [sp, #16]
 8017bee:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8017bf2:	fb01 2505 	mla	r5, r1, r5, r2
 8017bf6:	6802      	ldr	r2, [r0, #0]
 8017bf8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8017bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8017c00:	9201      	str	r2, [sp, #4]
 8017c02:	f1bb 0f00 	cmp.w	fp, #0
 8017c06:	dc03      	bgt.n	8017c10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017c08:	9a03      	ldr	r2, [sp, #12]
 8017c0a:	2a00      	cmp	r2, #0
 8017c0c:	f340 8159 	ble.w	8017ec2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8017c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c12:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8017c16:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017c1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c1c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8017c20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	dd0e      	ble.n	8017c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017c28:	1402      	asrs	r2, r0, #16
 8017c2a:	d405      	bmi.n	8017c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c2c:	42ba      	cmp	r2, r7
 8017c2e:	da03      	bge.n	8017c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c30:	140a      	asrs	r2, r1, #16
 8017c32:	d401      	bmi.n	8017c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c34:	42b2      	cmp	r2, r6
 8017c36:	db07      	blt.n	8017c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c3a:	3b01      	subs	r3, #1
 8017c3c:	4410      	add	r0, r2
 8017c3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c40:	3502      	adds	r5, #2
 8017c42:	4411      	add	r1, r2
 8017c44:	e7ee      	b.n	8017c24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017c46:	d017      	beq.n	8017c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017c48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c4a:	1e5a      	subs	r2, r3, #1
 8017c4c:	fb04 0402 	mla	r4, r4, r2, r0
 8017c50:	1424      	asrs	r4, r4, #16
 8017c52:	d409      	bmi.n	8017c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c54:	42bc      	cmp	r4, r7
 8017c56:	da07      	bge.n	8017c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c58:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017c5a:	fb04 1202 	mla	r2, r4, r2, r1
 8017c5e:	1412      	asrs	r2, r2, #16
 8017c60:	d402      	bmi.n	8017c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c62:	42b2      	cmp	r2, r6
 8017c64:	f2c0 80bf 	blt.w	8017de6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017c68:	2700      	movs	r7, #0
 8017c6a:	19da      	adds	r2, r3, r7
 8017c6c:	2a00      	cmp	r2, #0
 8017c6e:	dc3e      	bgt.n	8017cee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c74:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8017c78:	f1bb 0f00 	cmp.w	fp, #0
 8017c7c:	f340 8121 	ble.w	8017ec2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8017c80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017c84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017c88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017c8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017c90:	eeb0 6a62 	vmov.f32	s12, s5
 8017c94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017c98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017c9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017ca0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ca4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ca8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017cac:	eeb0 6a43 	vmov.f32	s12, s6
 8017cb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017cb4:	ee12 2a90 	vmov	r2, s5
 8017cb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017cc6:	ee13 2a10 	vmov	r2, s6
 8017cca:	9313      	str	r3, [sp, #76]	; 0x4c
 8017ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cce:	f1bb 0b01 	subs.w	fp, fp, #1
 8017cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017cd6:	9a03      	ldr	r2, [sp, #12]
 8017cd8:	9314      	str	r3, [sp, #80]	; 0x50
 8017cda:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ce0:	eeb0 3a67 	vmov.f32	s6, s15
 8017ce4:	bf08      	it	eq
 8017ce6:	4613      	moveq	r3, r2
 8017ce8:	eef0 2a47 	vmov.f32	s5, s14
 8017cec:	e789      	b.n	8017c02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017cee:	1406      	asrs	r6, r0, #16
 8017cf0:	d42d      	bmi.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017cf2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8017cf6:	42b4      	cmp	r4, r6
 8017cf8:	dd29      	ble.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017cfa:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8017cfe:	d426      	bmi.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d00:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017d04:	4562      	cmp	r2, ip
 8017d06:	dd22      	ble.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d08:	b224      	sxth	r4, r4
 8017d0a:	fb0c 6404 	mla	r4, ip, r4, r6
 8017d0e:	9a01      	ldr	r2, [sp, #4]
 8017d10:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8017d14:	0e22      	lsrs	r2, r4, #24
 8017d16:	d01a      	beq.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d18:	9e04      	ldr	r6, [sp, #16]
 8017d1a:	4372      	muls	r2, r6
 8017d1c:	1c56      	adds	r6, r2, #1
 8017d1e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017d22:	1212      	asrs	r2, r2, #8
 8017d24:	0a26      	lsrs	r6, r4, #8
 8017d26:	2aff      	cmp	r2, #255	; 0xff
 8017d28:	9605      	str	r6, [sp, #20]
 8017d2a:	d116      	bne.n	8017d5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8017d2c:	f06f 0201 	mvn.w	r2, #1
 8017d30:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017d34:	fb02 fc07 	mul.w	ip, r2, r7
 8017d38:	0962      	lsrs	r2, r4, #5
 8017d3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017d3e:	f026 0607 	bic.w	r6, r6, #7
 8017d42:	4316      	orrs	r6, r2
 8017d44:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017d48:	4326      	orrs	r6, r4
 8017d4a:	f825 600c 	strh.w	r6, [r5, ip]
 8017d4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d50:	3f01      	subs	r7, #1
 8017d52:	4410      	add	r0, r2
 8017d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d56:	4411      	add	r1, r2
 8017d58:	e787      	b.n	8017c6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017d5a:	f06f 0601 	mvn.w	r6, #1
 8017d5e:	fa1f fa82 	uxth.w	sl, r2
 8017d62:	43d2      	mvns	r2, r2
 8017d64:	437e      	muls	r6, r7
 8017d66:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8017d6a:	f835 8006 	ldrh.w	r8, [r5, r6]
 8017d6e:	fb1c fc0a 	smulbb	ip, ip, sl
 8017d72:	b2e4      	uxtb	r4, r4
 8017d74:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8017d78:	fb14 f40a 	smulbb	r4, r4, sl
 8017d7c:	b2d2      	uxtb	r2, r2
 8017d7e:	9602      	str	r6, [sp, #8]
 8017d80:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8017d84:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8017d88:	fb0e ce02 	mla	lr, lr, r2, ip
 8017d8c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8017d90:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017d94:	fb16 f60a 	smulbb	r6, r6, sl
 8017d98:	fa5f f888 	uxtb.w	r8, r8
 8017d9c:	fb08 4402 	mla	r4, r8, r2, r4
 8017da0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8017da4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8017da8:	fa1f fe8e 	uxth.w	lr, lr
 8017dac:	b2a4      	uxth	r4, r4
 8017dae:	f10e 0201 	add.w	r2, lr, #1
 8017db2:	1c66      	adds	r6, r4, #1
 8017db4:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8017db8:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8017dbc:	fa1f fc8c 	uxth.w	ip, ip
 8017dc0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017dc4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8017dc8:	ea46 0e0e 	orr.w	lr, r6, lr
 8017dcc:	f10c 0601 	add.w	r6, ip, #1
 8017dd0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8017dd4:	0976      	lsrs	r6, r6, #5
 8017dd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017dda:	9a02      	ldr	r2, [sp, #8]
 8017ddc:	ea4e 0e06 	orr.w	lr, lr, r6
 8017de0:	f825 e002 	strh.w	lr, [r5, r2]
 8017de4:	e7b3      	b.n	8017d4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017de6:	f04f 0800 	mov.w	r8, #0
 8017dea:	eba3 0208 	sub.w	r2, r3, r8
 8017dee:	2a00      	cmp	r2, #0
 8017df0:	f77f af3e 	ble.w	8017c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017df4:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8017df8:	1404      	asrs	r4, r0, #16
 8017dfa:	140a      	asrs	r2, r1, #16
 8017dfc:	fb06 4202 	mla	r2, r6, r2, r4
 8017e00:	9c01      	ldr	r4, [sp, #4]
 8017e02:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8017e06:	0e22      	lsrs	r2, r4, #24
 8017e08:	d016      	beq.n	8017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8017e0a:	9e04      	ldr	r6, [sp, #16]
 8017e0c:	4372      	muls	r2, r6
 8017e0e:	1c56      	adds	r6, r2, #1
 8017e10:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017e14:	1212      	asrs	r2, r2, #8
 8017e16:	2aff      	cmp	r2, #255	; 0xff
 8017e18:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8017e1c:	d113      	bne.n	8017e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8017e1e:	0962      	lsrs	r2, r4, #5
 8017e20:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017e24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017e28:	f026 0607 	bic.w	r6, r6, #7
 8017e2c:	4316      	orrs	r6, r2
 8017e2e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017e32:	4326      	orrs	r6, r4
 8017e34:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8017e38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e3a:	f108 0801 	add.w	r8, r8, #1
 8017e3e:	4410      	add	r0, r2
 8017e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e42:	4411      	add	r1, r2
 8017e44:	e7d1      	b.n	8017dea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8017e46:	fa1f fa82 	uxth.w	sl, r2
 8017e4a:	43d2      	mvns	r2, r2
 8017e4c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8017e50:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8017e54:	fb17 f70a 	smulbb	r7, r7, sl
 8017e58:	b2e4      	uxtb	r4, r4
 8017e5a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017e5e:	fb14 f40a 	smulbb	r4, r4, sl
 8017e62:	b2d2      	uxtb	r2, r2
 8017e64:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017e68:	fb0c 7c02 	mla	ip, ip, r2, r7
 8017e6c:	b2f6      	uxtb	r6, r6
 8017e6e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8017e72:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017e76:	fb16 f60a 	smulbb	r6, r6, sl
 8017e7a:	fa5f fe8e 	uxtb.w	lr, lr
 8017e7e:	fb0e 4402 	mla	r4, lr, r2, r4
 8017e82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017e86:	fb07 6702 	mla	r7, r7, r2, r6
 8017e8a:	fa1f fc8c 	uxth.w	ip, ip
 8017e8e:	b2a4      	uxth	r4, r4
 8017e90:	f10c 0201 	add.w	r2, ip, #1
 8017e94:	1c66      	adds	r6, r4, #1
 8017e96:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8017e9a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8017e9e:	b2bf      	uxth	r7, r7
 8017ea0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017ea4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017ea8:	ea46 0c0c 	orr.w	ip, r6, ip
 8017eac:	1c7e      	adds	r6, r7, #1
 8017eae:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8017eb2:	0976      	lsrs	r6, r6, #5
 8017eb4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017eb8:	ea4c 0c06 	orr.w	ip, ip, r6
 8017ebc:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8017ec0:	e7ba      	b.n	8017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8017ec2:	b007      	add	sp, #28
 8017ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ec8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed0:	b085      	sub	sp, #20
 8017ed2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017ed4:	468b      	mov	fp, r1
 8017ed6:	6841      	ldr	r1, [r0, #4]
 8017ed8:	9203      	str	r2, [sp, #12]
 8017eda:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017ede:	fb01 2404 	mla	r4, r1, r4, r2
 8017ee2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017ee6:	6802      	ldr	r2, [r0, #0]
 8017ee8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017eec:	f8d8 2000 	ldr.w	r2, [r8]
 8017ef0:	9201      	str	r2, [sp, #4]
 8017ef2:	f1bb 0f00 	cmp.w	fp, #0
 8017ef6:	dc03      	bgt.n	8017f00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017ef8:	9a03      	ldr	r2, [sp, #12]
 8017efa:	2a00      	cmp	r2, #0
 8017efc:	f340 814f 	ble.w	801819e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8017f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f02:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017f06:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017f0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f0c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017f10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	dd0e      	ble.n	8017f36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f18:	1408      	asrs	r0, r1, #16
 8017f1a:	d405      	bmi.n	8017f28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f1c:	42b8      	cmp	r0, r7
 8017f1e:	da03      	bge.n	8017f28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f20:	1410      	asrs	r0, r2, #16
 8017f22:	d401      	bmi.n	8017f28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f24:	42b0      	cmp	r0, r6
 8017f26:	db07      	blt.n	8017f38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017f28:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017f2a:	3b01      	subs	r3, #1
 8017f2c:	4401      	add	r1, r0
 8017f2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017f30:	3402      	adds	r4, #2
 8017f32:	4402      	add	r2, r0
 8017f34:	e7ee      	b.n	8017f14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017f36:	d017      	beq.n	8017f68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017f38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017f3a:	1e58      	subs	r0, r3, #1
 8017f3c:	fb05 1500 	mla	r5, r5, r0, r1
 8017f40:	142d      	asrs	r5, r5, #16
 8017f42:	d409      	bmi.n	8017f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f44:	42bd      	cmp	r5, r7
 8017f46:	da07      	bge.n	8017f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017f4a:	fb05 2000 	mla	r0, r5, r0, r2
 8017f4e:	1400      	asrs	r0, r0, #16
 8017f50:	d402      	bmi.n	8017f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f52:	42b0      	cmp	r0, r6
 8017f54:	f2c0 80ba 	blt.w	80180cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8017f58:	2600      	movs	r6, #0
 8017f5a:	1998      	adds	r0, r3, r6
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	dc3e      	bgt.n	8017fde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8017f60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017f68:	f1bb 0f00 	cmp.w	fp, #0
 8017f6c:	f340 8117 	ble.w	801819e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8017f70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017f7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f80:	eeb0 6a62 	vmov.f32	s12, s5
 8017f84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017f90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017f98:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017f9c:	eeb0 6a43 	vmov.f32	s12, s6
 8017fa0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fa4:	ee12 2a90 	vmov	r2, s5
 8017fa8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fb6:	ee13 2a10 	vmov	r2, s6
 8017fba:	9311      	str	r3, [sp, #68]	; 0x44
 8017fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fbe:	f1bb 0b01 	subs.w	fp, fp, #1
 8017fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fc6:	9a03      	ldr	r2, [sp, #12]
 8017fc8:	9312      	str	r3, [sp, #72]	; 0x48
 8017fca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fd0:	eeb0 3a67 	vmov.f32	s6, s15
 8017fd4:	bf08      	it	eq
 8017fd6:	4613      	moveq	r3, r2
 8017fd8:	eef0 2a47 	vmov.f32	s5, s14
 8017fdc:	e789      	b.n	8017ef2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8017fde:	140f      	asrs	r7, r1, #16
 8017fe0:	d424      	bmi.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017fe2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017fe6:	42bd      	cmp	r5, r7
 8017fe8:	dd20      	ble.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017fea:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017fee:	d41d      	bmi.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017ff0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8017ff4:	4560      	cmp	r0, ip
 8017ff6:	dd19      	ble.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017ff8:	b22d      	sxth	r5, r5
 8017ffa:	fb0c 7505 	mla	r5, ip, r5, r7
 8017ffe:	9801      	ldr	r0, [sp, #4]
 8018000:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018004:	0e07      	lsrs	r7, r0, #24
 8018006:	2fff      	cmp	r7, #255	; 0xff
 8018008:	d116      	bne.n	8018038 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801800a:	f06f 0501 	mvn.w	r5, #1
 801800e:	fb05 f706 	mul.w	r7, r5, r6
 8018012:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018016:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801801a:	0945      	lsrs	r5, r0, #5
 801801c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018020:	ea4c 0505 	orr.w	r5, ip, r5
 8018024:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018028:	4305      	orrs	r5, r0
 801802a:	53e5      	strh	r5, [r4, r7]
 801802c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801802e:	3e01      	subs	r6, #1
 8018030:	4401      	add	r1, r0
 8018032:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018034:	4402      	add	r2, r0
 8018036:	e790      	b.n	8017f5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018038:	b2fd      	uxtb	r5, r7
 801803a:	2f00      	cmp	r7, #0
 801803c:	d0f6      	beq.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801803e:	f06f 0701 	mvn.w	r7, #1
 8018042:	fa1f f985 	uxth.w	r9, r5
 8018046:	43ed      	mvns	r5, r5
 8018048:	4377      	muls	r7, r6
 801804a:	f834 e007 	ldrh.w	lr, [r4, r7]
 801804e:	9702      	str	r7, [sp, #8]
 8018050:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018054:	fb17 f709 	smulbb	r7, r7, r9
 8018058:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801805c:	b2c0      	uxtb	r0, r0
 801805e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018062:	fb10 f009 	smulbb	r0, r0, r9
 8018066:	b2ed      	uxtb	r5, r5
 8018068:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801806c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018070:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018074:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018078:	fb1a fa09 	smulbb	sl, sl, r9
 801807c:	fa5f fe8e 	uxtb.w	lr, lr
 8018080:	fb0e 0005 	mla	r0, lr, r5, r0
 8018084:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018088:	fb07 a705 	mla	r7, r7, r5, sl
 801808c:	b280      	uxth	r0, r0
 801808e:	fa1f fc8c 	uxth.w	ip, ip
 8018092:	f100 0a01 	add.w	sl, r0, #1
 8018096:	f10c 0501 	add.w	r5, ip, #1
 801809a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801809e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80180a2:	b2bf      	uxth	r7, r7
 80180a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80180a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80180ac:	ea4a 0c0c 	orr.w	ip, sl, ip
 80180b0:	f107 0a01 	add.w	sl, r7, #1
 80180b4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80180b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80180bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80180c0:	9802      	ldr	r0, [sp, #8]
 80180c2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80180c6:	f824 c000 	strh.w	ip, [r4, r0]
 80180ca:	e7af      	b.n	801802c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80180cc:	f04f 0e00 	mov.w	lr, #0
 80180d0:	eba3 000e 	sub.w	r0, r3, lr
 80180d4:	2800      	cmp	r0, #0
 80180d6:	f77f af43 	ble.w	8017f60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80180da:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80180de:	140d      	asrs	r5, r1, #16
 80180e0:	1410      	asrs	r0, r2, #16
 80180e2:	fb06 5000 	mla	r0, r6, r0, r5
 80180e6:	9d01      	ldr	r5, [sp, #4]
 80180e8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80180ec:	0e2e      	lsrs	r6, r5, #24
 80180ee:	2eff      	cmp	r6, #255	; 0xff
 80180f0:	d112      	bne.n	8018118 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80180f2:	482c      	ldr	r0, [pc, #176]	; (80181a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80180f4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80180f8:	0968      	lsrs	r0, r5, #5
 80180fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80180fe:	4330      	orrs	r0, r6
 8018100:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018104:	4328      	orrs	r0, r5
 8018106:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801810a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801810c:	f10e 0e01 	add.w	lr, lr, #1
 8018110:	4401      	add	r1, r0
 8018112:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018114:	4402      	add	r2, r0
 8018116:	e7db      	b.n	80180d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018118:	b2f0      	uxtb	r0, r6
 801811a:	2e00      	cmp	r6, #0
 801811c:	d0f5      	beq.n	801810a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801811e:	fa1f f980 	uxth.w	r9, r0
 8018122:	43c0      	mvns	r0, r0
 8018124:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018128:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801812c:	fb16 f609 	smulbb	r6, r6, r9
 8018130:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018134:	b2ed      	uxtb	r5, r5
 8018136:	ea4f 272c 	mov.w	r7, ip, asr #8
 801813a:	fb15 f509 	smulbb	r5, r5, r9
 801813e:	b2c0      	uxtb	r0, r0
 8018140:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018144:	fb07 6700 	mla	r7, r7, r0, r6
 8018148:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801814c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018150:	fb1a fa09 	smulbb	sl, sl, r9
 8018154:	fa5f fc8c 	uxtb.w	ip, ip
 8018158:	fb0c 5500 	mla	r5, ip, r0, r5
 801815c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018160:	fb06 a600 	mla	r6, r6, r0, sl
 8018164:	b2bf      	uxth	r7, r7
 8018166:	b2ad      	uxth	r5, r5
 8018168:	1c78      	adds	r0, r7, #1
 801816a:	f105 0a01 	add.w	sl, r5, #1
 801816e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018172:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018176:	b2b6      	uxth	r6, r6
 8018178:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801817c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018180:	ea4a 0707 	orr.w	r7, sl, r7
 8018184:	f106 0a01 	add.w	sl, r6, #1
 8018188:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801818c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018190:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018194:	ea47 070a 	orr.w	r7, r7, sl
 8018198:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801819c:	e7b5      	b.n	801810a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801819e:	b005      	add	sp, #20
 80181a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a4:	fffff800 	.word	0xfffff800

080181a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80181a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80181ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b0:	b087      	sub	sp, #28
 80181b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80181b4:	468b      	mov	fp, r1
 80181b6:	9203      	str	r2, [sp, #12]
 80181b8:	6841      	ldr	r1, [r0, #4]
 80181ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80181be:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80181c2:	9204      	str	r2, [sp, #16]
 80181c4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80181c8:	fb01 2404 	mla	r4, r1, r4, r2
 80181cc:	6802      	ldr	r2, [r0, #0]
 80181ce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80181d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80181d6:	3201      	adds	r2, #1
 80181d8:	f022 0201 	bic.w	r2, r2, #1
 80181dc:	9200      	str	r2, [sp, #0]
 80181de:	f8d9 2000 	ldr.w	r2, [r9]
 80181e2:	9201      	str	r2, [sp, #4]
 80181e4:	f1bb 0f00 	cmp.w	fp, #0
 80181e8:	dc03      	bgt.n	80181f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80181ea:	9a03      	ldr	r2, [sp, #12]
 80181ec:	2a00      	cmp	r2, #0
 80181ee:	f340 816a 	ble.w	80184c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80181f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80181f4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80181f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80181fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80181fe:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018202:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018206:	2b00      	cmp	r3, #0
 8018208:	dd0e      	ble.n	8018228 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801820a:	1402      	asrs	r2, r0, #16
 801820c:	d405      	bmi.n	801821a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801820e:	42ba      	cmp	r2, r7
 8018210:	da03      	bge.n	801821a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018212:	140a      	asrs	r2, r1, #16
 8018214:	d401      	bmi.n	801821a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018216:	42b2      	cmp	r2, r6
 8018218:	db07      	blt.n	801822a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801821a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801821c:	3b01      	subs	r3, #1
 801821e:	4410      	add	r0, r2
 8018220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018222:	3402      	adds	r4, #2
 8018224:	4411      	add	r1, r2
 8018226:	e7ee      	b.n	8018206 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018228:	d017      	beq.n	801825a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801822a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801822c:	1e5a      	subs	r2, r3, #1
 801822e:	fb05 0502 	mla	r5, r5, r2, r0
 8018232:	142d      	asrs	r5, r5, #16
 8018234:	d409      	bmi.n	801824a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018236:	42bd      	cmp	r5, r7
 8018238:	da07      	bge.n	801824a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801823a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801823c:	fb05 1202 	mla	r2, r5, r2, r1
 8018240:	1412      	asrs	r2, r2, #16
 8018242:	d402      	bmi.n	801824a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018244:	42b2      	cmp	r2, r6
 8018246:	f2c0 80c8 	blt.w	80183da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801824a:	2700      	movs	r7, #0
 801824c:	19da      	adds	r2, r3, r7
 801824e:	2a00      	cmp	r2, #0
 8018250:	dc3e      	bgt.n	80182d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018256:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801825a:	f1bb 0f00 	cmp.w	fp, #0
 801825e:	f340 8132 	ble.w	80184c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018262:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018266:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801826a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801826e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018272:	eeb0 6a62 	vmov.f32	s12, s5
 8018276:	ee31 1a05 	vadd.f32	s2, s2, s10
 801827a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801827e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018282:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018286:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801828a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801828e:	eeb0 6a43 	vmov.f32	s12, s6
 8018292:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018296:	ee12 2a90 	vmov	r2, s5
 801829a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801829e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80182a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80182a8:	ee13 2a10 	vmov	r2, s6
 80182ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80182ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182b0:	f1bb 0b01 	subs.w	fp, fp, #1
 80182b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80182b8:	9a03      	ldr	r2, [sp, #12]
 80182ba:	9314      	str	r3, [sp, #80]	; 0x50
 80182bc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80182c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182c2:	eeb0 3a67 	vmov.f32	s6, s15
 80182c6:	bf08      	it	eq
 80182c8:	4613      	moveq	r3, r2
 80182ca:	eef0 2a47 	vmov.f32	s5, s14
 80182ce:	e789      	b.n	80181e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80182d0:	1405      	asrs	r5, r0, #16
 80182d2:	d436      	bmi.n	8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80182d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80182d8:	42aa      	cmp	r2, r5
 80182da:	dd32      	ble.n	8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80182dc:	140e      	asrs	r6, r1, #16
 80182de:	d430      	bmi.n	8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80182e0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80182e4:	42b2      	cmp	r2, r6
 80182e6:	dd2c      	ble.n	8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80182e8:	9a00      	ldr	r2, [sp, #0]
 80182ea:	fb06 5502 	mla	r5, r6, r2, r5
 80182ee:	9e01      	ldr	r6, [sp, #4]
 80182f0:	086a      	lsrs	r2, r5, #1
 80182f2:	5cb2      	ldrb	r2, [r6, r2]
 80182f4:	07ee      	lsls	r6, r5, #31
 80182f6:	bf54      	ite	pl
 80182f8:	f002 020f 	andpl.w	r2, r2, #15
 80182fc:	1112      	asrmi	r2, r2, #4
 80182fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018302:	b2d2      	uxtb	r2, r2
 8018304:	b1ea      	cbz	r2, 8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018306:	9d04      	ldr	r5, [sp, #16]
 8018308:	436a      	muls	r2, r5
 801830a:	1c55      	adds	r5, r2, #1
 801830c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018310:	4d6e      	ldr	r5, [pc, #440]	; (80184cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018312:	1212      	asrs	r2, r2, #8
 8018314:	682d      	ldr	r5, [r5, #0]
 8018316:	2aff      	cmp	r2, #255	; 0xff
 8018318:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801831c:	9605      	str	r6, [sp, #20]
 801831e:	d116      	bne.n	801834e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018320:	f06f 0201 	mvn.w	r2, #1
 8018324:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018328:	fb02 fc07 	mul.w	ip, r2, r7
 801832c:	096a      	lsrs	r2, r5, #5
 801832e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018332:	f026 0607 	bic.w	r6, r6, #7
 8018336:	4316      	orrs	r6, r2
 8018338:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801833c:	432e      	orrs	r6, r5
 801833e:	f824 600c 	strh.w	r6, [r4, ip]
 8018342:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018344:	3f01      	subs	r7, #1
 8018346:	4410      	add	r0, r2
 8018348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801834a:	4411      	add	r1, r2
 801834c:	e77e      	b.n	801824c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801834e:	f06f 0601 	mvn.w	r6, #1
 8018352:	fa1f fa82 	uxth.w	sl, r2
 8018356:	43d2      	mvns	r2, r2
 8018358:	437e      	muls	r6, r7
 801835a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801835e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8018362:	fb1c fc0a 	smulbb	ip, ip, sl
 8018366:	b2ed      	uxtb	r5, r5
 8018368:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801836c:	fb15 f50a 	smulbb	r5, r5, sl
 8018370:	b2d2      	uxtb	r2, r2
 8018372:	9602      	str	r6, [sp, #8]
 8018374:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018378:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801837c:	fb0e ce02 	mla	lr, lr, r2, ip
 8018380:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018384:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018388:	fb16 f60a 	smulbb	r6, r6, sl
 801838c:	fa5f f888 	uxtb.w	r8, r8
 8018390:	fb08 5502 	mla	r5, r8, r2, r5
 8018394:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018398:	fb0c 6c02 	mla	ip, ip, r2, r6
 801839c:	fa1f fe8e 	uxth.w	lr, lr
 80183a0:	b2ad      	uxth	r5, r5
 80183a2:	f10e 0201 	add.w	r2, lr, #1
 80183a6:	1c6e      	adds	r6, r5, #1
 80183a8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80183ac:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80183b0:	fa1f fc8c 	uxth.w	ip, ip
 80183b4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80183b8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80183bc:	ea46 0e0e 	orr.w	lr, r6, lr
 80183c0:	f10c 0601 	add.w	r6, ip, #1
 80183c4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80183c8:	0976      	lsrs	r6, r6, #5
 80183ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80183ce:	9a02      	ldr	r2, [sp, #8]
 80183d0:	ea4e 0e06 	orr.w	lr, lr, r6
 80183d4:	f824 e002 	strh.w	lr, [r4, r2]
 80183d8:	e7b3      	b.n	8018342 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80183da:	f04f 0800 	mov.w	r8, #0
 80183de:	eba3 0208 	sub.w	r2, r3, r8
 80183e2:	2a00      	cmp	r2, #0
 80183e4:	f77f af35 	ble.w	8018252 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80183e8:	9e00      	ldr	r6, [sp, #0]
 80183ea:	1402      	asrs	r2, r0, #16
 80183ec:	140d      	asrs	r5, r1, #16
 80183ee:	fb06 2505 	mla	r5, r6, r5, r2
 80183f2:	9e01      	ldr	r6, [sp, #4]
 80183f4:	086a      	lsrs	r2, r5, #1
 80183f6:	5cb2      	ldrb	r2, [r6, r2]
 80183f8:	07ed      	lsls	r5, r5, #31
 80183fa:	bf54      	ite	pl
 80183fc:	f002 020f 	andpl.w	r2, r2, #15
 8018400:	1112      	asrmi	r2, r2, #4
 8018402:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018406:	b2d2      	uxtb	r2, r2
 8018408:	b1c2      	cbz	r2, 801843c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801840a:	9d04      	ldr	r5, [sp, #16]
 801840c:	436a      	muls	r2, r5
 801840e:	1c55      	adds	r5, r2, #1
 8018410:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018414:	4d2d      	ldr	r5, [pc, #180]	; (80184cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018416:	1212      	asrs	r2, r2, #8
 8018418:	682e      	ldr	r6, [r5, #0]
 801841a:	2aff      	cmp	r2, #255	; 0xff
 801841c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8018420:	d113      	bne.n	801844a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018422:	0972      	lsrs	r2, r6, #5
 8018424:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8018428:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801842c:	f025 0507 	bic.w	r5, r5, #7
 8018430:	4315      	orrs	r5, r2
 8018432:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8018436:	4335      	orrs	r5, r6
 8018438:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801843c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801843e:	f108 0801 	add.w	r8, r8, #1
 8018442:	4410      	add	r0, r2
 8018444:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018446:	4411      	add	r1, r2
 8018448:	e7c9      	b.n	80183de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801844a:	fa1f fa82 	uxth.w	sl, r2
 801844e:	43d2      	mvns	r2, r2
 8018450:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018454:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018458:	fb17 f70a 	smulbb	r7, r7, sl
 801845c:	b2f6      	uxtb	r6, r6
 801845e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018462:	fb16 f60a 	smulbb	r6, r6, sl
 8018466:	b2d2      	uxtb	r2, r2
 8018468:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801846c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8018470:	b2ed      	uxtb	r5, r5
 8018472:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018476:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801847a:	fb15 f50a 	smulbb	r5, r5, sl
 801847e:	fa5f fe8e 	uxtb.w	lr, lr
 8018482:	fb0e 6602 	mla	r6, lr, r2, r6
 8018486:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801848a:	fb07 5702 	mla	r7, r7, r2, r5
 801848e:	fa1f fc8c 	uxth.w	ip, ip
 8018492:	b2b6      	uxth	r6, r6
 8018494:	f10c 0201 	add.w	r2, ip, #1
 8018498:	1c75      	adds	r5, r6, #1
 801849a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801849e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80184a2:	b2bf      	uxth	r7, r7
 80184a4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80184a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80184ac:	ea45 0c0c 	orr.w	ip, r5, ip
 80184b0:	1c7d      	adds	r5, r7, #1
 80184b2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80184b6:	096d      	lsrs	r5, r5, #5
 80184b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80184bc:	ea4c 0c05 	orr.w	ip, ip, r5
 80184c0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80184c4:	e7ba      	b.n	801843c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80184c6:	b007      	add	sp, #28
 80184c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184cc:	2001fdac 	.word	0x2001fdac

080184d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80184d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d8:	b087      	sub	sp, #28
 80184da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80184dc:	9101      	str	r1, [sp, #4]
 80184de:	6841      	ldr	r1, [r0, #4]
 80184e0:	9205      	str	r2, [sp, #20]
 80184e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80184e6:	fb01 2404 	mla	r4, r1, r4, r2
 80184ea:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80184ee:	6802      	ldr	r2, [r0, #0]
 80184f0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80187e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80184f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80184f8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80184fc:	3201      	adds	r2, #1
 80184fe:	f022 0201 	bic.w	r2, r2, #1
 8018502:	9202      	str	r2, [sp, #8]
 8018504:	f8db 2000 	ldr.w	r2, [fp]
 8018508:	9203      	str	r2, [sp, #12]
 801850a:	9a01      	ldr	r2, [sp, #4]
 801850c:	2a00      	cmp	r2, #0
 801850e:	dc03      	bgt.n	8018518 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018510:	9a05      	ldr	r2, [sp, #20]
 8018512:	2a00      	cmp	r2, #0
 8018514:	f340 8162 	ble.w	80187dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018518:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801851a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801851e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018522:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018524:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8018528:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801852c:	2b00      	cmp	r3, #0
 801852e:	dd0e      	ble.n	801854e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018530:	1402      	asrs	r2, r0, #16
 8018532:	d405      	bmi.n	8018540 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018534:	42ba      	cmp	r2, r7
 8018536:	da03      	bge.n	8018540 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018538:	140a      	asrs	r2, r1, #16
 801853a:	d401      	bmi.n	8018540 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801853c:	42b2      	cmp	r2, r6
 801853e:	db07      	blt.n	8018550 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018542:	3b01      	subs	r3, #1
 8018544:	4410      	add	r0, r2
 8018546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018548:	3402      	adds	r4, #2
 801854a:	4411      	add	r1, r2
 801854c:	e7ee      	b.n	801852c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801854e:	d017      	beq.n	8018580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018550:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018552:	1e5a      	subs	r2, r3, #1
 8018554:	fb05 0502 	mla	r5, r5, r2, r0
 8018558:	142d      	asrs	r5, r5, #16
 801855a:	d409      	bmi.n	8018570 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801855c:	42bd      	cmp	r5, r7
 801855e:	da07      	bge.n	8018570 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018560:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018562:	fb05 1202 	mla	r2, r5, r2, r1
 8018566:	1412      	asrs	r2, r2, #16
 8018568:	d402      	bmi.n	8018570 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801856a:	42b2      	cmp	r2, r6
 801856c:	f2c0 80c3 	blt.w	80186f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8018570:	2500      	movs	r5, #0
 8018572:	195a      	adds	r2, r3, r5
 8018574:	2a00      	cmp	r2, #0
 8018576:	dc3f      	bgt.n	80185f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018578:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801857c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018580:	9b01      	ldr	r3, [sp, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	f340 812a 	ble.w	80187dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018588:	ee30 0a04 	vadd.f32	s0, s0, s8
 801858c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018590:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018594:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018598:	eeb0 6a62 	vmov.f32	s12, s5
 801859c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185b0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80185b4:	eeb0 6a43 	vmov.f32	s12, s6
 80185b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185bc:	ee12 2a90 	vmov	r2, s5
 80185c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80185c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80185ce:	ee13 2a10 	vmov	r2, s6
 80185d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80185d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185d6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80185da:	fb92 f3f3 	sdiv	r3, r2, r3
 80185de:	9314      	str	r3, [sp, #80]	; 0x50
 80185e0:	9b01      	ldr	r3, [sp, #4]
 80185e2:	9a05      	ldr	r2, [sp, #20]
 80185e4:	3b01      	subs	r3, #1
 80185e6:	9301      	str	r3, [sp, #4]
 80185e8:	eeb0 3a67 	vmov.f32	s6, s15
 80185ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185ee:	eef0 2a47 	vmov.f32	s5, s14
 80185f2:	bf08      	it	eq
 80185f4:	4613      	moveq	r3, r2
 80185f6:	e788      	b.n	801850a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80185f8:	1406      	asrs	r6, r0, #16
 80185fa:	d42c      	bmi.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80185fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018600:	42b2      	cmp	r2, r6
 8018602:	dd28      	ble.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018604:	140f      	asrs	r7, r1, #16
 8018606:	d426      	bmi.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018608:	f8db 200c 	ldr.w	r2, [fp, #12]
 801860c:	42ba      	cmp	r2, r7
 801860e:	dd22      	ble.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018610:	9a02      	ldr	r2, [sp, #8]
 8018612:	fb07 6602 	mla	r6, r7, r2, r6
 8018616:	9f03      	ldr	r7, [sp, #12]
 8018618:	0872      	lsrs	r2, r6, #1
 801861a:	5cba      	ldrb	r2, [r7, r2]
 801861c:	07f6      	lsls	r6, r6, #31
 801861e:	bf54      	ite	pl
 8018620:	f002 020f 	andpl.w	r2, r2, #15
 8018624:	1112      	asrmi	r2, r2, #4
 8018626:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801862a:	b2d2      	uxtb	r2, r2
 801862c:	2aff      	cmp	r2, #255	; 0xff
 801862e:	d118      	bne.n	8018662 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018630:	f06f 0601 	mvn.w	r6, #1
 8018634:	f8d8 2000 	ldr.w	r2, [r8]
 8018638:	fb06 f705 	mul.w	r7, r6, r5
 801863c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8018640:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8018644:	0956      	lsrs	r6, r2, #5
 8018646:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801864a:	ea4c 0606 	orr.w	r6, ip, r6
 801864e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8018652:	4316      	orrs	r6, r2
 8018654:	53e6      	strh	r6, [r4, r7]
 8018656:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018658:	3d01      	subs	r5, #1
 801865a:	4410      	add	r0, r2
 801865c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801865e:	4411      	add	r1, r2
 8018660:	e787      	b.n	8018572 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018662:	2a00      	cmp	r2, #0
 8018664:	d0f7      	beq.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018666:	f06f 0601 	mvn.w	r6, #1
 801866a:	fa1f f982 	uxth.w	r9, r2
 801866e:	43d2      	mvns	r2, r2
 8018670:	436e      	muls	r6, r5
 8018672:	f8d8 c000 	ldr.w	ip, [r8]
 8018676:	f834 e006 	ldrh.w	lr, [r4, r6]
 801867a:	9604      	str	r6, [sp, #16]
 801867c:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8018680:	fb16 f609 	smulbb	r6, r6, r9
 8018684:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8018688:	fa5f fc8c 	uxtb.w	ip, ip
 801868c:	ea4f 272e 	mov.w	r7, lr, asr #8
 8018690:	fb1c fc09 	smulbb	ip, ip, r9
 8018694:	b2d2      	uxtb	r2, r2
 8018696:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801869a:	fb07 6702 	mla	r7, r7, r2, r6
 801869e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80186a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80186a6:	fb1a fa09 	smulbb	sl, sl, r9
 80186aa:	fa5f fe8e 	uxtb.w	lr, lr
 80186ae:	fb0e cc02 	mla	ip, lr, r2, ip
 80186b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80186b6:	fb06 a602 	mla	r6, r6, r2, sl
 80186ba:	b2bf      	uxth	r7, r7
 80186bc:	fa1f fc8c 	uxth.w	ip, ip
 80186c0:	1c7a      	adds	r2, r7, #1
 80186c2:	f10c 0a01 	add.w	sl, ip, #1
 80186c6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80186ca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80186ce:	b2b6      	uxth	r6, r6
 80186d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80186d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80186d8:	ea4a 0707 	orr.w	r7, sl, r7
 80186dc:	f106 0a01 	add.w	sl, r6, #1
 80186e0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80186e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80186e8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80186ec:	9a04      	ldr	r2, [sp, #16]
 80186ee:	ea47 070a 	orr.w	r7, r7, sl
 80186f2:	52a7      	strh	r7, [r4, r2]
 80186f4:	e7af      	b.n	8018656 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80186f6:	f04f 0e00 	mov.w	lr, #0
 80186fa:	eba3 020e 	sub.w	r2, r3, lr
 80186fe:	2a00      	cmp	r2, #0
 8018700:	f77f af3a 	ble.w	8018578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018704:	9e02      	ldr	r6, [sp, #8]
 8018706:	1402      	asrs	r2, r0, #16
 8018708:	140d      	asrs	r5, r1, #16
 801870a:	fb06 2505 	mla	r5, r6, r5, r2
 801870e:	9e03      	ldr	r6, [sp, #12]
 8018710:	086a      	lsrs	r2, r5, #1
 8018712:	5cb2      	ldrb	r2, [r6, r2]
 8018714:	07ed      	lsls	r5, r5, #31
 8018716:	bf54      	ite	pl
 8018718:	f002 020f 	andpl.w	r2, r2, #15
 801871c:	1112      	asrmi	r2, r2, #4
 801871e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018722:	b2d2      	uxtb	r2, r2
 8018724:	2aff      	cmp	r2, #255	; 0xff
 8018726:	d115      	bne.n	8018754 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018728:	f8d8 5000 	ldr.w	r5, [r8]
 801872c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8018730:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8018734:	096a      	lsrs	r2, r5, #5
 8018736:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801873a:	4332      	orrs	r2, r6
 801873c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018740:	432a      	orrs	r2, r5
 8018742:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8018746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018748:	f10e 0e01 	add.w	lr, lr, #1
 801874c:	4410      	add	r0, r2
 801874e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018750:	4411      	add	r1, r2
 8018752:	e7d2      	b.n	80186fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8018754:	2a00      	cmp	r2, #0
 8018756:	d0f6      	beq.n	8018746 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018758:	fa1f f982 	uxth.w	r9, r2
 801875c:	43d2      	mvns	r2, r2
 801875e:	f8d8 7000 	ldr.w	r7, [r8]
 8018762:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018766:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801876a:	fb15 f509 	smulbb	r5, r5, r9
 801876e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8018772:	b2ff      	uxtb	r7, r7
 8018774:	ea4f 262c 	mov.w	r6, ip, asr #8
 8018778:	fb17 f709 	smulbb	r7, r7, r9
 801877c:	b2d2      	uxtb	r2, r2
 801877e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018782:	fb06 5602 	mla	r6, r6, r2, r5
 8018786:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801878a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801878e:	fb1a fa09 	smulbb	sl, sl, r9
 8018792:	fa5f fc8c 	uxtb.w	ip, ip
 8018796:	fb0c 7702 	mla	r7, ip, r2, r7
 801879a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801879e:	fb05 a502 	mla	r5, r5, r2, sl
 80187a2:	b2b6      	uxth	r6, r6
 80187a4:	b2bf      	uxth	r7, r7
 80187a6:	1c72      	adds	r2, r6, #1
 80187a8:	f107 0a01 	add.w	sl, r7, #1
 80187ac:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80187b0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80187b4:	b2ad      	uxth	r5, r5
 80187b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80187ba:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80187be:	ea4a 0606 	orr.w	r6, sl, r6
 80187c2:	f105 0a01 	add.w	sl, r5, #1
 80187c6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80187ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80187ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80187d2:	ea46 060a 	orr.w	r6, r6, sl
 80187d6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80187da:	e7b4      	b.n	8018746 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80187dc:	b007      	add	sp, #28
 80187de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e2:	bf00      	nop
 80187e4:	2001fdac 	.word	0x2001fdac

080187e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80187e8:	4770      	bx	lr

080187ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80187ea:	4770      	bx	lr

080187ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80187ec:	4770      	bx	lr

080187ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80187ee:	4770      	bx	lr

080187f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80187f0:	4770      	bx	lr

080187f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80187f2:	4770      	bx	lr

080187f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80187f4:	4770      	bx	lr

080187f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80187f6:	4770      	bx	lr

080187f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80187f8:	4770      	bx	lr

080187fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80187fa:	4770      	bx	lr

080187fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80187fc:	4770      	bx	lr

080187fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80187fe:	4770      	bx	lr

08018800 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018800:	4770      	bx	lr

08018802 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8018802:	4770      	bx	lr

08018804 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018804:	4770      	bx	lr

08018806 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018806:	4770      	bx	lr

08018808 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018808:	4770      	bx	lr

0801880a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801880a:	4770      	bx	lr

0801880c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801880c:	4770      	bx	lr

0801880e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801880e:	4770      	bx	lr

08018810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018810:	4770      	bx	lr

08018812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018812:	4770      	bx	lr

08018814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018814:	4770      	bx	lr

08018816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018816:	4770      	bx	lr

08018818 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018818:	4770      	bx	lr

0801881a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801881a:	4770      	bx	lr

0801881c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801881c:	4770      	bx	lr

0801881e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801881e:	4770      	bx	lr

08018820 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8018820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018824:	b088      	sub	sp, #32
 8018826:	ac08      	add	r4, sp, #32
 8018828:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801882c:	4606      	mov	r6, r0
 801882e:	4620      	mov	r0, r4
 8018830:	4688      	mov	r8, r1
 8018832:	4691      	mov	r9, r2
 8018834:	f7fd fc66 	bl	8016104 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018838:	6833      	ldr	r3, [r6, #0]
 801883a:	4605      	mov	r5, r0
 801883c:	4620      	mov	r0, r4
 801883e:	699f      	ldr	r7, [r3, #24]
 8018840:	f7fd fb74 	bl	8015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018844:	4682      	mov	sl, r0
 8018846:	4620      	mov	r0, r4
 8018848:	f7fd fba4 	bl	8015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801884c:	9500      	str	r5, [sp, #0]
 801884e:	e9cd a001 	strd	sl, r0, [sp, #4]
 8018852:	464b      	mov	r3, r9
 8018854:	a806      	add	r0, sp, #24
 8018856:	4642      	mov	r2, r8
 8018858:	4631      	mov	r1, r6
 801885a:	47b8      	blx	r7
 801885c:	4628      	mov	r0, r5
 801885e:	b008      	add	sp, #32
 8018860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8018864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018868:	2300      	movs	r3, #0
 801886a:	9300      	str	r3, [sp, #0]
 801886c:	4b3d      	ldr	r3, [pc, #244]	; (8018964 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d137      	bne.n	80188e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8018874:	4a3c      	ldr	r2, [pc, #240]	; (8018968 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8018876:	f9b2 2000 	ldrsh.w	r2, [r2]
 801887a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d132      	bne.n	80188e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8018882:	4b3a      	ldr	r3, [pc, #232]	; (801896c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8018884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018888:	6808      	ldr	r0, [r1, #0]
 801888a:	6849      	ldr	r1, [r1, #4]
 801888c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018890:	ac02      	add	r4, sp, #8
 8018892:	ab02      	add	r3, sp, #8
 8018894:	c303      	stmia	r3!, {r0, r1}
 8018896:	4669      	mov	r1, sp
 8018898:	4620      	mov	r0, r4
 801889a:	f7fa fd6d 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801889e:	4668      	mov	r0, sp
 80188a0:	f7fa fd42 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80188a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80188a8:	f8bd 2000 	ldrh.w	r2, [sp]
 80188ac:	4d30      	ldr	r5, [pc, #192]	; (8018970 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80188ae:	4413      	add	r3, r2
 80188b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80188b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80188b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80188bc:	6828      	ldr	r0, [r5, #0]
 80188be:	4413      	add	r3, r2
 80188c0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80188c4:	6803      	ldr	r3, [r0, #0]
 80188c6:	462f      	mov	r7, r5
 80188c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188ca:	4798      	blx	r3
 80188cc:	f010 0f01 	tst.w	r0, #1
 80188d0:	d00c      	beq.n	80188ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80188d2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80188d6:	6828      	ldr	r0, [r5, #0]
 80188d8:	6803      	ldr	r3, [r0, #0]
 80188da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188dc:	4798      	blx	r3
 80188de:	b004      	add	sp, #16
 80188e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188e4:	4a21      	ldr	r2, [pc, #132]	; (801896c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80188e6:	e7c6      	b.n	8018876 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80188e8:	4b1f      	ldr	r3, [pc, #124]	; (8018968 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80188ea:	e7cb      	b.n	8018884 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80188ec:	6838      	ldr	r0, [r7, #0]
 80188ee:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80188f2:	6803      	ldr	r3, [r0, #0]
 80188f4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80188f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188fa:	4798      	blx	r3
 80188fc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8018900:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018904:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8018908:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801890c:	fb16 3602 	smlabb	r6, r6, r2, r3
 8018910:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018914:	6838      	ldr	r0, [r7, #0]
 8018916:	6803      	ldr	r3, [r0, #0]
 8018918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801891a:	4798      	blx	r3
 801891c:	4a12      	ldr	r2, [pc, #72]	; (8018968 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801891e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8018922:	4691      	mov	r9, r2
 8018924:	8813      	ldrh	r3, [r2, #0]
 8018926:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801892a:	435d      	muls	r5, r3
 801892c:	fb03 1404 	mla	r4, r3, r4, r1
 8018930:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018934:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018938:	6838      	ldr	r0, [r7, #0]
 801893a:	42ac      	cmp	r4, r5
 801893c:	6803      	ldr	r3, [r0, #0]
 801893e:	d20e      	bcs.n	801895e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8018940:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8018944:	4632      	mov	r2, r6
 8018946:	4643      	mov	r3, r8
 8018948:	4621      	mov	r1, r4
 801894a:	47d0      	blx	sl
 801894c:	f8b9 3000 	ldrh.w	r3, [r9]
 8018950:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018954:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8018958:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801895c:	e7ec      	b.n	8018938 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018960:	4798      	blx	r3
 8018962:	e7bc      	b.n	80188de <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8018964:	2001fd9c 	.word	0x2001fd9c
 8018968:	2001fd9e 	.word	0x2001fd9e
 801896c:	2001fda0 	.word	0x2001fda0
 8018970:	2001fda4 	.word	0x2001fda4

08018974 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018978:	b08b      	sub	sp, #44	; 0x2c
 801897a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801897e:	460f      	mov	r7, r1
 8018980:	4616      	mov	r6, r2
 8018982:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018986:	f1bb 0f00 	cmp.w	fp, #0
 801898a:	d049      	beq.n	8018a20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801898c:	6810      	ldr	r0, [r2, #0]
 801898e:	6851      	ldr	r1, [r2, #4]
 8018990:	ad06      	add	r5, sp, #24
 8018992:	c503      	stmia	r5!, {r0, r1}
 8018994:	6818      	ldr	r0, [r3, #0]
 8018996:	6859      	ldr	r1, [r3, #4]
 8018998:	ad08      	add	r5, sp, #32
 801899a:	c503      	stmia	r5!, {r0, r1}
 801899c:	a806      	add	r0, sp, #24
 801899e:	f7fa fcc3 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80189a2:	4631      	mov	r1, r6
 80189a4:	a808      	add	r0, sp, #32
 80189a6:	f7fa fce7 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80189aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80189ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80189b2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80189b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80189ba:	fb16 2103 	smlabb	r1, r6, r3, r2
 80189be:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80189c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80189c6:	4f60      	ldr	r7, [pc, #384]	; (8018b48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80189c8:	440a      	add	r2, r1
 80189ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80189ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80189d2:	6838      	ldr	r0, [r7, #0]
 80189d4:	4413      	add	r3, r2
 80189d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80189da:	6803      	ldr	r3, [r0, #0]
 80189dc:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80189e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189e2:	4798      	blx	r3
 80189e4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80189e8:	46b9      	mov	r9, r7
 80189ea:	d01c      	beq.n	8018a26 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80189ec:	f010 0f04 	tst.w	r0, #4
 80189f0:	d01d      	beq.n	8018a2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80189f2:	2700      	movs	r7, #0
 80189f4:	f8d9 0000 	ldr.w	r0, [r9]
 80189f8:	b2ad      	uxth	r5, r5
 80189fa:	6801      	ldr	r1, [r0, #0]
 80189fc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8018a00:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8018a04:	f8cd b00c 	str.w	fp, [sp, #12]
 8018a08:	9402      	str	r4, [sp, #8]
 8018a0a:	fa1f f488 	uxth.w	r4, r8
 8018a0e:	9501      	str	r5, [sp, #4]
 8018a10:	9400      	str	r4, [sp, #0]
 8018a12:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8018a14:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018a18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018a1c:	4631      	mov	r1, r6
 8018a1e:	47a0      	blx	r4
 8018a20:	b00b      	add	sp, #44	; 0x2c
 8018a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a26:	b914      	cbnz	r4, 8018a2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8018a28:	f010 0f01 	tst.w	r0, #1
 8018a2c:	e7e0      	b.n	80189f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8018a2e:	f8d9 0000 	ldr.w	r0, [r9]
 8018a32:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8018a36:	6803      	ldr	r3, [r0, #0]
 8018a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a3a:	4798      	blx	r3
 8018a3c:	4b43      	ldr	r3, [pc, #268]	; (8018b4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8018a3e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8018a42:	881a      	ldrh	r2, [r3, #0]
 8018a44:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8018a48:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018a4c:	fb02 1404 	mla	r4, r2, r4, r1
 8018a50:	469a      	mov	sl, r3
 8018a52:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018a56:	fb05 f502 	mul.w	r5, r5, r2
 8018a5a:	d059      	beq.n	8018b10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8018a5c:	469e      	mov	lr, r3
 8018a5e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8018a62:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018a66:	fa1f f28b 	uxth.w	r2, fp
 8018a6a:	fa1f f989 	uxth.w	r9, r9
 8018a6e:	42ac      	cmp	r4, r5
 8018a70:	d264      	bcs.n	8018b3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8018a72:	eb04 0a07 	add.w	sl, r4, r7
 8018a76:	4554      	cmp	r4, sl
 8018a78:	d23d      	bcs.n	8018af6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8018a7a:	8821      	ldrh	r1, [r4, #0]
 8018a7c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8018a80:	1208      	asrs	r0, r1, #8
 8018a82:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018a86:	fb10 f009 	smulbb	r0, r0, r9
 8018a8a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8018a8e:	00c9      	lsls	r1, r1, #3
 8018a90:	b2c9      	uxtb	r1, r1
 8018a92:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8018a96:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018a9a:	fb11 f109 	smulbb	r1, r1, r9
 8018a9e:	fb1b fb09 	smulbb	fp, fp, r9
 8018aa2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018aa6:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018aaa:	10d8      	asrs	r0, r3, #3
 8018aac:	00db      	lsls	r3, r3, #3
 8018aae:	b2db      	uxtb	r3, r3
 8018ab0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018ab4:	fb03 1302 	mla	r3, r3, r2, r1
 8018ab8:	fb00 b002 	mla	r0, r0, r2, fp
 8018abc:	fa1f fc8c 	uxth.w	ip, ip
 8018ac0:	f10c 0b01 	add.w	fp, ip, #1
 8018ac4:	b29b      	uxth	r3, r3
 8018ac6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018aca:	b280      	uxth	r0, r0
 8018acc:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8018ad0:	f103 0c01 	add.w	ip, r3, #1
 8018ad4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018ad8:	1c43      	adds	r3, r0, #1
 8018ada:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8018ade:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018ae2:	0940      	lsrs	r0, r0, #5
 8018ae4:	ea4c 0c0b 	orr.w	ip, ip, fp
 8018ae8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018aec:	ea4c 0c00 	orr.w	ip, ip, r0
 8018af0:	f824 cb02 	strh.w	ip, [r4], #2
 8018af4:	e7bf      	b.n	8018a76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8018af6:	f8be 3000 	ldrh.w	r3, [lr]
 8018afa:	eba3 0308 	sub.w	r3, r3, r8
 8018afe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018b02:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018b06:	eba3 0308 	sub.w	r3, r3, r8
 8018b0a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018b0e:	e7ae      	b.n	8018a6e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8018b10:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018b14:	f8d9 0000 	ldr.w	r0, [r9]
 8018b18:	42ac      	cmp	r4, r5
 8018b1a:	6803      	ldr	r3, [r0, #0]
 8018b1c:	d20e      	bcs.n	8018b3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8018b1e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8018b22:	4632      	mov	r2, r6
 8018b24:	463b      	mov	r3, r7
 8018b26:	4621      	mov	r1, r4
 8018b28:	47c0      	blx	r8
 8018b2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018b32:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018b36:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018b3a:	e7eb      	b.n	8018b14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8018b3c:	4b02      	ldr	r3, [pc, #8]	; (8018b48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8018b3e:	6818      	ldr	r0, [r3, #0]
 8018b40:	6803      	ldr	r3, [r0, #0]
 8018b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b44:	4798      	blx	r3
 8018b46:	e76b      	b.n	8018a20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8018b48:	2001fda4 	.word	0x2001fda4
 8018b4c:	2001fd9e 	.word	0x2001fd9e

08018b50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018b50:	b510      	push	{r4, lr}
 8018b52:	4604      	mov	r4, r0
 8018b54:	2104      	movs	r1, #4
 8018b56:	f008 ff9a 	bl	8021a8e <_ZdlPvj>
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	bd10      	pop	{r4, pc}

08018b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8018b5e:	b510      	push	{r4, lr}
 8018b60:	4604      	mov	r4, r0
 8018b62:	2104      	movs	r1, #4
 8018b64:	f008 ff93 	bl	8021a8e <_ZdlPvj>
 8018b68:	4620      	mov	r0, r4
 8018b6a:	bd10      	pop	{r4, pc}

08018b6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018b6c:	b510      	push	{r4, lr}
 8018b6e:	4604      	mov	r4, r0
 8018b70:	2104      	movs	r1, #4
 8018b72:	f008 ff8c 	bl	8021a8e <_ZdlPvj>
 8018b76:	4620      	mov	r0, r4
 8018b78:	bd10      	pop	{r4, pc}

08018b7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8018b7a:	b510      	push	{r4, lr}
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	2104      	movs	r1, #4
 8018b80:	f008 ff85 	bl	8021a8e <_ZdlPvj>
 8018b84:	4620      	mov	r0, r4
 8018b86:	bd10      	pop	{r4, pc}

08018b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018b88:	b510      	push	{r4, lr}
 8018b8a:	4604      	mov	r4, r0
 8018b8c:	2104      	movs	r1, #4
 8018b8e:	f008 ff7e 	bl	8021a8e <_ZdlPvj>
 8018b92:	4620      	mov	r0, r4
 8018b94:	bd10      	pop	{r4, pc}

08018b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8018b96:	b510      	push	{r4, lr}
 8018b98:	4604      	mov	r4, r0
 8018b9a:	2104      	movs	r1, #4
 8018b9c:	f008 ff77 	bl	8021a8e <_ZdlPvj>
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	bd10      	pop	{r4, pc}

08018ba4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018ba4:	b510      	push	{r4, lr}
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	2104      	movs	r1, #4
 8018baa:	f008 ff70 	bl	8021a8e <_ZdlPvj>
 8018bae:	4620      	mov	r0, r4
 8018bb0:	bd10      	pop	{r4, pc}

08018bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8018bb2:	b510      	push	{r4, lr}
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	2104      	movs	r1, #4
 8018bb8:	f008 ff69 	bl	8021a8e <_ZdlPvj>
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	bd10      	pop	{r4, pc}

08018bc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018bc0:	b510      	push	{r4, lr}
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	2104      	movs	r1, #4
 8018bc6:	f008 ff62 	bl	8021a8e <_ZdlPvj>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	bd10      	pop	{r4, pc}

08018bce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018bce:	b510      	push	{r4, lr}
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	2104      	movs	r1, #4
 8018bd4:	f008 ff5b 	bl	8021a8e <_ZdlPvj>
 8018bd8:	4620      	mov	r0, r4
 8018bda:	bd10      	pop	{r4, pc}

08018bdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018bdc:	b510      	push	{r4, lr}
 8018bde:	4604      	mov	r4, r0
 8018be0:	2104      	movs	r1, #4
 8018be2:	f008 ff54 	bl	8021a8e <_ZdlPvj>
 8018be6:	4620      	mov	r0, r4
 8018be8:	bd10      	pop	{r4, pc}

08018bea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018bea:	b510      	push	{r4, lr}
 8018bec:	4604      	mov	r4, r0
 8018bee:	2104      	movs	r1, #4
 8018bf0:	f008 ff4d 	bl	8021a8e <_ZdlPvj>
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	bd10      	pop	{r4, pc}

08018bf8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018bf8:	b510      	push	{r4, lr}
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	2104      	movs	r1, #4
 8018bfe:	f008 ff46 	bl	8021a8e <_ZdlPvj>
 8018c02:	4620      	mov	r0, r4
 8018c04:	bd10      	pop	{r4, pc}

08018c06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8018c06:	b510      	push	{r4, lr}
 8018c08:	4604      	mov	r4, r0
 8018c0a:	2104      	movs	r1, #4
 8018c0c:	f008 ff3f 	bl	8021a8e <_ZdlPvj>
 8018c10:	4620      	mov	r0, r4
 8018c12:	bd10      	pop	{r4, pc}

08018c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018c14:	b510      	push	{r4, lr}
 8018c16:	4604      	mov	r4, r0
 8018c18:	2104      	movs	r1, #4
 8018c1a:	f008 ff38 	bl	8021a8e <_ZdlPvj>
 8018c1e:	4620      	mov	r0, r4
 8018c20:	bd10      	pop	{r4, pc}

08018c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018c22:	b510      	push	{r4, lr}
 8018c24:	4604      	mov	r4, r0
 8018c26:	2104      	movs	r1, #4
 8018c28:	f008 ff31 	bl	8021a8e <_ZdlPvj>
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	bd10      	pop	{r4, pc}

08018c30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018c30:	b510      	push	{r4, lr}
 8018c32:	4604      	mov	r4, r0
 8018c34:	2104      	movs	r1, #4
 8018c36:	f008 ff2a 	bl	8021a8e <_ZdlPvj>
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	bd10      	pop	{r4, pc}

08018c3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8018c3e:	b510      	push	{r4, lr}
 8018c40:	4604      	mov	r4, r0
 8018c42:	2104      	movs	r1, #4
 8018c44:	f008 ff23 	bl	8021a8e <_ZdlPvj>
 8018c48:	4620      	mov	r0, r4
 8018c4a:	bd10      	pop	{r4, pc}

08018c4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018c4c:	b510      	push	{r4, lr}
 8018c4e:	4604      	mov	r4, r0
 8018c50:	2104      	movs	r1, #4
 8018c52:	f008 ff1c 	bl	8021a8e <_ZdlPvj>
 8018c56:	4620      	mov	r0, r4
 8018c58:	bd10      	pop	{r4, pc}

08018c5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018c5a:	b510      	push	{r4, lr}
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	2104      	movs	r1, #4
 8018c60:	f008 ff15 	bl	8021a8e <_ZdlPvj>
 8018c64:	4620      	mov	r0, r4
 8018c66:	bd10      	pop	{r4, pc}

08018c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018c68:	b510      	push	{r4, lr}
 8018c6a:	4604      	mov	r4, r0
 8018c6c:	2104      	movs	r1, #4
 8018c6e:	f008 ff0e 	bl	8021a8e <_ZdlPvj>
 8018c72:	4620      	mov	r0, r4
 8018c74:	bd10      	pop	{r4, pc}

08018c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018c76:	b510      	push	{r4, lr}
 8018c78:	4604      	mov	r4, r0
 8018c7a:	2104      	movs	r1, #4
 8018c7c:	f008 ff07 	bl	8021a8e <_ZdlPvj>
 8018c80:	4620      	mov	r0, r4
 8018c82:	bd10      	pop	{r4, pc}

08018c84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018c84:	b510      	push	{r4, lr}
 8018c86:	4604      	mov	r4, r0
 8018c88:	2104      	movs	r1, #4
 8018c8a:	f008 ff00 	bl	8021a8e <_ZdlPvj>
 8018c8e:	4620      	mov	r0, r4
 8018c90:	bd10      	pop	{r4, pc}

08018c92 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018c92:	b510      	push	{r4, lr}
 8018c94:	4604      	mov	r4, r0
 8018c96:	2104      	movs	r1, #4
 8018c98:	f008 fef9 	bl	8021a8e <_ZdlPvj>
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	bd10      	pop	{r4, pc}

08018ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8018ca0:	b510      	push	{r4, lr}
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	2104      	movs	r1, #4
 8018ca6:	f008 fef2 	bl	8021a8e <_ZdlPvj>
 8018caa:	4620      	mov	r0, r4
 8018cac:	bd10      	pop	{r4, pc}

08018cae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8018cae:	b510      	push	{r4, lr}
 8018cb0:	4604      	mov	r4, r0
 8018cb2:	2104      	movs	r1, #4
 8018cb4:	f008 feeb 	bl	8021a8e <_ZdlPvj>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	bd10      	pop	{r4, pc}

08018cbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8018cbc:	b510      	push	{r4, lr}
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	2104      	movs	r1, #4
 8018cc2:	f008 fee4 	bl	8021a8e <_ZdlPvj>
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	bd10      	pop	{r4, pc}

08018cca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8018cca:	b510      	push	{r4, lr}
 8018ccc:	4604      	mov	r4, r0
 8018cce:	2104      	movs	r1, #4
 8018cd0:	f008 fedd 	bl	8021a8e <_ZdlPvj>
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	bd10      	pop	{r4, pc}

08018cd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cdc:	469b      	mov	fp, r3
 8018cde:	4616      	mov	r6, r2
 8018ce0:	b091      	sub	sp, #68	; 0x44
 8018ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ce6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8018cea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018cee:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8018cf2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	460d      	mov	r5, r1
 8018cfa:	4640      	mov	r0, r8
 8018cfc:	4659      	mov	r1, fp
 8018cfe:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018d02:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018d06:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8018d0a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8018d0e:	f7f7 fe23 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8018d12:	4631      	mov	r1, r6
 8018d14:	4640      	mov	r0, r8
 8018d16:	f7f7 fe1f 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8018d1a:	4b74      	ldr	r3, [pc, #464]	; (8018eec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8018d1c:	8818      	ldrh	r0, [r3, #0]
 8018d1e:	4b74      	ldr	r3, [pc, #464]	; (8018ef0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8018d20:	b202      	sxth	r2, r0
 8018d22:	8819      	ldrh	r1, [r3, #0]
 8018d24:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018d28:	b20e      	sxth	r6, r1
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	da07      	bge.n	8018d3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8018d2e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018d32:	4463      	add	r3, ip
 8018d34:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018d38:	2300      	movs	r3, #0
 8018d3a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018d3e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018d42:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8018d46:	1ad2      	subs	r2, r2, r3
 8018d48:	4594      	cmp	ip, r2
 8018d4a:	bfc4      	itt	gt
 8018d4c:	1ac2      	subgt	r2, r0, r3
 8018d4e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8018d52:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018d56:	2a00      	cmp	r2, #0
 8018d58:	da07      	bge.n	8018d6a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8018d5a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8018d5e:	4462      	add	r2, ip
 8018d60:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018d64:	2200      	movs	r2, #0
 8018d66:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018d6a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018d6e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018d72:	eba6 060a 	sub.w	r6, r6, sl
 8018d76:	42b2      	cmp	r2, r6
 8018d78:	bfc4      	itt	gt
 8018d7a:	eba1 020a 	subgt.w	r2, r1, sl
 8018d7e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8018d82:	4a5c      	ldr	r2, [pc, #368]	; (8018ef4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8018d84:	7812      	ldrb	r2, [r2, #0]
 8018d86:	b9a2      	cbnz	r2, 8018db2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8018d88:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8018d8c:	4286      	cmp	r6, r0
 8018d8e:	4640      	mov	r0, r8
 8018d90:	9303      	str	r3, [sp, #12]
 8018d92:	bf14      	ite	ne
 8018d94:	2600      	movne	r6, #0
 8018d96:	2601      	moveq	r6, #1
 8018d98:	f7f7 fe21 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d9c:	9b03      	ldr	r3, [sp, #12]
 8018d9e:	b160      	cbz	r0, 8018dba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8018da0:	2300      	movs	r3, #0
 8018da2:	8023      	strh	r3, [r4, #0]
 8018da4:	8063      	strh	r3, [r4, #2]
 8018da6:	80a3      	strh	r3, [r4, #4]
 8018da8:	4620      	mov	r0, r4
 8018daa:	80e3      	strh	r3, [r4, #6]
 8018dac:	b011      	add	sp, #68	; 0x44
 8018dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018db2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8018db6:	428e      	cmp	r6, r1
 8018db8:	e7e9      	b.n	8018d8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8018dba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8018dbe:	a90e      	add	r1, sp, #56	; 0x38
 8018dc0:	9205      	str	r2, [sp, #20]
 8018dc2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018dc6:	900e      	str	r0, [sp, #56]	; 0x38
 8018dc8:	9206      	str	r2, [sp, #24]
 8018dca:	f8bb 2000 	ldrh.w	r2, [fp]
 8018dce:	a80c      	add	r0, sp, #48	; 0x30
 8018dd0:	1a9b      	subs	r3, r3, r2
 8018dd2:	b21b      	sxth	r3, r3
 8018dd4:	9303      	str	r3, [sp, #12]
 8018dd6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018dda:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8018dde:	ebaa 0a03 	sub.w	sl, sl, r3
 8018de2:	fa0f f38a 	sxth.w	r3, sl
 8018de6:	9304      	str	r3, [sp, #16]
 8018de8:	9b03      	ldr	r3, [sp, #12]
 8018dea:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8018dee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018df2:	9b04      	ldr	r3, [sp, #16]
 8018df4:	f8df b104 	ldr.w	fp, [pc, #260]	; 8018efc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018df8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018dfc:	9b05      	ldr	r3, [sp, #20]
 8018dfe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8018e02:	9b06      	ldr	r3, [sp, #24]
 8018e04:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018e08:	f7fa fab6 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018e0c:	4640      	mov	r0, r8
 8018e0e:	f7fa fa8b 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e12:	a80e      	add	r0, sp, #56	; 0x38
 8018e14:	f7fa fa88 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e18:	4b37      	ldr	r3, [pc, #220]	; (8018ef8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018e1a:	4628      	mov	r0, r5
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8018e22:	9307      	str	r3, [sp, #28]
 8018e24:	682b      	ldr	r3, [r5, #0]
 8018e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e28:	4798      	blx	r3
 8018e2a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8018e2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018e32:	4681      	mov	r9, r0
 8018e34:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8018e38:	f8db 0000 	ldr.w	r0, [fp]
 8018e3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8018e3e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8018e42:	6803      	ldr	r3, [r0, #0]
 8018e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e46:	4798      	blx	r3
 8018e48:	4607      	mov	r7, r0
 8018e4a:	f8db 0000 	ldr.w	r0, [fp]
 8018e4e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8018e52:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018e56:	6803      	ldr	r3, [r0, #0]
 8018e58:	9109      	str	r1, [sp, #36]	; 0x24
 8018e5a:	9208      	str	r2, [sp, #32]
 8018e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e5e:	4798      	blx	r3
 8018e60:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018e64:	f010 0f01 	tst.w	r0, #1
 8018e68:	d012      	beq.n	8018e90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8018e6a:	f8db 0000 	ldr.w	r0, [fp]
 8018e6e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018e72:	6803      	ldr	r3, [r0, #0]
 8018e74:	9200      	str	r2, [sp, #0]
 8018e76:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8018e78:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018e7c:	462b      	mov	r3, r5
 8018e7e:	47b0      	blx	r6
 8018e80:	9b03      	ldr	r3, [sp, #12]
 8018e82:	8023      	strh	r3, [r4, #0]
 8018e84:	9b04      	ldr	r3, [sp, #16]
 8018e86:	8063      	strh	r3, [r4, #2]
 8018e88:	9b05      	ldr	r3, [sp, #20]
 8018e8a:	80a3      	strh	r3, [r4, #4]
 8018e8c:	9b06      	ldr	r3, [sp, #24]
 8018e8e:	e78b      	b.n	8018da8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8018e90:	fb09 f202 	mul.w	r2, r9, r2
 8018e94:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018e98:	440f      	add	r7, r1
 8018e9a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018e9e:	b166      	cbz	r6, 8018eba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018ea0:	9a07      	ldr	r2, [sp, #28]
 8018ea2:	4592      	cmp	sl, r2
 8018ea4:	d109      	bne.n	8018eba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018ea6:	f8db 0000 	ldr.w	r0, [fp]
 8018eaa:	fb09 f303 	mul.w	r3, r9, r3
 8018eae:	6802      	ldr	r2, [r0, #0]
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8018eb4:	463a      	mov	r2, r7
 8018eb6:	47b0      	blx	r6
 8018eb8:	e7e2      	b.n	8018e80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018eba:	fb0a f303 	mul.w	r3, sl, r3
 8018ebe:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8018efc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018ec2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8018ec6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8018eca:	4545      	cmp	r5, r8
 8018ecc:	d2d8      	bcs.n	8018e80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018ece:	f8db 0000 	ldr.w	r0, [fp]
 8018ed2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018ed6:	6802      	ldr	r2, [r0, #0]
 8018ed8:	4629      	mov	r1, r5
 8018eda:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8018ede:	005b      	lsls	r3, r3, #1
 8018ee0:	463a      	mov	r2, r7
 8018ee2:	47d0      	blx	sl
 8018ee4:	444f      	add	r7, r9
 8018ee6:	4435      	add	r5, r6
 8018ee8:	e7ef      	b.n	8018eca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8018eea:	bf00      	nop
 8018eec:	2001fd98 	.word	0x2001fd98
 8018ef0:	2001fd9a 	.word	0x2001fd9a
 8018ef4:	2001fd9c 	.word	0x2001fd9c
 8018ef8:	2001fd9e 	.word	0x2001fd9e
 8018efc:	2001fda4 	.word	0x2001fda4

08018f00 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f02:	4606      	mov	r6, r0
 8018f04:	b087      	sub	sp, #28
 8018f06:	460c      	mov	r4, r1
 8018f08:	4617      	mov	r7, r2
 8018f0a:	461d      	mov	r5, r3
 8018f0c:	b333      	cbz	r3, 8018f5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018f0e:	4608      	mov	r0, r1
 8018f10:	f7f7 fd65 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f14:	bb10      	cbnz	r0, 8018f5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018f16:	6820      	ldr	r0, [r4, #0]
 8018f18:	6861      	ldr	r1, [r4, #4]
 8018f1a:	ab04      	add	r3, sp, #16
 8018f1c:	4c1b      	ldr	r4, [pc, #108]	; (8018f8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8018f1e:	c303      	stmia	r3!, {r0, r1}
 8018f20:	a804      	add	r0, sp, #16
 8018f22:	f7fa fa01 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f26:	6820      	ldr	r0, [r4, #0]
 8018f28:	6803      	ldr	r3, [r0, #0]
 8018f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f2c:	4798      	blx	r3
 8018f2e:	2dff      	cmp	r5, #255	; 0xff
 8018f30:	d016      	beq.n	8018f60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8018f32:	f010 0f08 	tst.w	r0, #8
 8018f36:	6820      	ldr	r0, [r4, #0]
 8018f38:	d015      	beq.n	8018f66 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018f3a:	2400      	movs	r4, #0
 8018f3c:	6801      	ldr	r1, [r0, #0]
 8018f3e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8018f42:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018f46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f4a:	9401      	str	r4, [sp, #4]
 8018f4c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018f50:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018f54:	9400      	str	r4, [sp, #0]
 8018f56:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8018f58:	4639      	mov	r1, r7
 8018f5a:	47a0      	blx	r4
 8018f5c:	b007      	add	sp, #28
 8018f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f60:	f010 0f02 	tst.w	r0, #2
 8018f64:	e7e7      	b.n	8018f36 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8018f66:	6803      	ldr	r3, [r0, #0]
 8018f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f6a:	4798      	blx	r3
 8018f6c:	4b08      	ldr	r3, [pc, #32]	; (8018f90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018f6e:	4601      	mov	r1, r0
 8018f70:	881a      	ldrh	r2, [r3, #0]
 8018f72:	e9cd 7500 	strd	r7, r5, [sp]
 8018f76:	6833      	ldr	r3, [r6, #0]
 8018f78:	4630      	mov	r0, r6
 8018f7a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8018f7c:	ab04      	add	r3, sp, #16
 8018f7e:	47a8      	blx	r5
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	6803      	ldr	r3, [r0, #0]
 8018f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f86:	4798      	blx	r3
 8018f88:	e7e8      	b.n	8018f5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018f8a:	bf00      	nop
 8018f8c:	2001fda4 	.word	0x2001fda4
 8018f90:	2001fd9e 	.word	0x2001fd9e

08018f94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f98:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8018f9c:	4688      	mov	r8, r1
 8018f9e:	4614      	mov	r4, r2
 8018fa0:	461d      	mov	r5, r3
 8018fa2:	9e08      	ldr	r6, [sp, #32]
 8018fa4:	2f00      	cmp	r7, #0
 8018fa6:	f000 80a9 	beq.w	80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7f7 fd17 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	f040 80a3 	bne.w	80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018fb6:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018fba:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018fbe:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8018fc2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8018fc6:	fb04 1303 	mla	r3, r4, r3, r1
 8018fca:	4365      	muls	r5, r4
 8018fcc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8018fd0:	2fff      	cmp	r7, #255	; 0xff
 8018fd2:	eba4 0200 	sub.w	r2, r4, r0
 8018fd6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8018fda:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8018fde:	d04a      	beq.n	8019076 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8018fe0:	b2bc      	uxth	r4, r7
 8018fe2:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8018fe6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8018fea:	fa5f f788 	uxtb.w	r7, r8
 8018fee:	b2f3      	uxtb	r3, r6
 8018ff0:	fb0e fe04 	mul.w	lr, lr, r4
 8018ff4:	4367      	muls	r7, r4
 8018ff6:	4363      	muls	r3, r4
 8018ff8:	0040      	lsls	r0, r0, #1
 8018ffa:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8018ffe:	fa1f fc8c 	uxth.w	ip, ip
 8019002:	42a9      	cmp	r1, r5
 8019004:	d27a      	bcs.n	80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019006:	eb01 0900 	add.w	r9, r1, r0
 801900a:	4549      	cmp	r1, r9
 801900c:	d231      	bcs.n	8019072 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801900e:	880a      	ldrh	r2, [r1, #0]
 8019010:	1214      	asrs	r4, r2, #8
 8019012:	10d6      	asrs	r6, r2, #3
 8019014:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8019018:	00d2      	lsls	r2, r2, #3
 801901a:	b2d2      	uxtb	r2, r2
 801901c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8019020:	fb14 f40c 	smulbb	r4, r4, ip
 8019024:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019028:	fb12 f20c 	smulbb	r2, r2, ip
 801902c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019030:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019034:	4474      	add	r4, lr
 8019036:	fb16 f60c 	smulbb	r6, r6, ip
 801903a:	b2a4      	uxth	r4, r4
 801903c:	441a      	add	r2, r3
 801903e:	b292      	uxth	r2, r2
 8019040:	f104 0a01 	add.w	sl, r4, #1
 8019044:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019048:	f102 0a01 	add.w	sl, r2, #1
 801904c:	443e      	add	r6, r7
 801904e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019052:	b2b6      	uxth	r6, r6
 8019054:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8019058:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801905c:	4322      	orrs	r2, r4
 801905e:	1c74      	adds	r4, r6, #1
 8019060:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019064:	0976      	lsrs	r6, r6, #5
 8019066:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801906a:	4332      	orrs	r2, r6
 801906c:	f821 2b02 	strh.w	r2, [r1], #2
 8019070:	e7cb      	b.n	801900a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8019072:	4441      	add	r1, r8
 8019074:	e7c5      	b.n	8019002 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8019076:	4f22      	ldr	r7, [pc, #136]	; (8019100 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8019078:	0973      	lsrs	r3, r6, #5
 801907a:	ea08 0707 	and.w	r7, r8, r7
 801907e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019082:	433b      	orrs	r3, r7
 8019084:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019088:	4333      	orrs	r3, r6
 801908a:	07e7      	lsls	r7, r4, #31
 801908c:	b29b      	uxth	r3, r3
 801908e:	d50b      	bpl.n	80190a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8019090:	0040      	lsls	r0, r0, #1
 8019092:	0052      	lsls	r2, r2, #1
 8019094:	42a9      	cmp	r1, r5
 8019096:	d231      	bcs.n	80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019098:	180c      	adds	r4, r1, r0
 801909a:	42a1      	cmp	r1, r4
 801909c:	d202      	bcs.n	80190a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801909e:	f821 3b02 	strh.w	r3, [r1], #2
 80190a2:	e7fa      	b.n	801909a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80190a4:	4411      	add	r1, r2
 80190a6:	e7f5      	b.n	8019094 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80190a8:	078e      	lsls	r6, r1, #30
 80190aa:	d008      	beq.n	80190be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80190ac:	460a      	mov	r2, r1
 80190ae:	0066      	lsls	r6, r4, #1
 80190b0:	42aa      	cmp	r2, r5
 80190b2:	d202      	bcs.n	80190ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80190b4:	8013      	strh	r3, [r2, #0]
 80190b6:	4432      	add	r2, r6
 80190b8:	e7fa      	b.n	80190b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80190ba:	3102      	adds	r1, #2
 80190bc:	3801      	subs	r0, #1
 80190be:	07c2      	lsls	r2, r0, #31
 80190c0:	d50b      	bpl.n	80190da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80190c2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80190c6:	3a01      	subs	r2, #1
 80190c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80190cc:	0066      	lsls	r6, r4, #1
 80190ce:	42aa      	cmp	r2, r5
 80190d0:	d202      	bcs.n	80190d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80190d2:	8013      	strh	r3, [r2, #0]
 80190d4:	4432      	add	r2, r6
 80190d6:	e7fa      	b.n	80190ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 80190d8:	3801      	subs	r0, #1
 80190da:	b178      	cbz	r0, 80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80190dc:	1040      	asrs	r0, r0, #1
 80190de:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80190e2:	0080      	lsls	r0, r0, #2
 80190e4:	0064      	lsls	r4, r4, #1
 80190e6:	42a9      	cmp	r1, r5
 80190e8:	d208      	bcs.n	80190fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80190ea:	460a      	mov	r2, r1
 80190ec:	180e      	adds	r6, r1, r0
 80190ee:	42b2      	cmp	r2, r6
 80190f0:	d202      	bcs.n	80190f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80190f2:	f842 3b04 	str.w	r3, [r2], #4
 80190f6:	e7fa      	b.n	80190ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80190f8:	4421      	add	r1, r4
 80190fa:	e7f4      	b.n	80190e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80190fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019100:	00fff800 	.word	0x00fff800

08019104 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019104:	2200      	movs	r2, #0
 8019106:	4910      	ldr	r1, [pc, #64]	; (8019148 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8019108:	6042      	str	r2, [r0, #4]
 801910a:	6001      	str	r1, [r0, #0]
 801910c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019110:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019114:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019118:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801911c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019120:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019124:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8019128:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801912c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019130:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019134:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019138:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801913c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019140:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019144:	4770      	bx	lr
 8019146:	bf00      	nop
 8019148:	080247cc 	.word	0x080247cc

0801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019150:	460d      	mov	r5, r1
 8019152:	4604      	mov	r4, r0
 8019154:	4699      	mov	r9, r3
 8019156:	b08d      	sub	sp, #52	; 0x34
 8019158:	6808      	ldr	r0, [r1, #0]
 801915a:	6849      	ldr	r1, [r1, #4]
 801915c:	ab08      	add	r3, sp, #32
 801915e:	c303      	stmia	r3!, {r0, r1}
 8019160:	6810      	ldr	r0, [r2, #0]
 8019162:	6851      	ldr	r1, [r2, #4]
 8019164:	ab0a      	add	r3, sp, #40	; 0x28
 8019166:	c303      	stmia	r3!, {r0, r1}
 8019168:	a808      	add	r0, sp, #32
 801916a:	f7fa f8dd 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801916e:	4629      	mov	r1, r5
 8019170:	a80a      	add	r0, sp, #40	; 0x28
 8019172:	f7fa f901 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019176:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801917a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801917e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019182:	4d63      	ldr	r5, [pc, #396]	; (8019310 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019184:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019188:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801918c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019190:	6828      	ldr	r0, [r5, #0]
 8019192:	440a      	add	r2, r1
 8019194:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019198:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801919c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80191a0:	4413      	add	r3, r2
 80191a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80191a6:	6803      	ldr	r3, [r0, #0]
 80191a8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80191ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191ae:	4798      	blx	r3
 80191b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80191b4:	d119      	bne.n	80191ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80191b6:	f010 0f20 	tst.w	r0, #32
 80191ba:	6828      	ldr	r0, [r5, #0]
 80191bc:	d018      	beq.n	80191f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80191be:	2500      	movs	r5, #0
 80191c0:	6801      	ldr	r1, [r0, #0]
 80191c2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80191c6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80191ca:	b2b6      	uxth	r6, r6
 80191cc:	9502      	str	r5, [sp, #8]
 80191ce:	fa1f f588 	uxth.w	r5, r8
 80191d2:	9601      	str	r6, [sp, #4]
 80191d4:	9500      	str	r5, [sp, #0]
 80191d6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80191d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80191dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80191e0:	4621      	mov	r1, r4
 80191e2:	47a8      	blx	r5
 80191e4:	b00d      	add	sp, #52	; 0x34
 80191e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80191ee:	e7e4      	b.n	80191ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80191f0:	6803      	ldr	r3, [r0, #0]
 80191f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191f4:	4798      	blx	r3
 80191f6:	4947      	ldr	r1, [pc, #284]	; (8019314 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80191f8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80191fc:	468a      	mov	sl, r1
 80191fe:	880b      	ldrh	r3, [r1, #0]
 8019200:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019204:	fb03 5202 	mla	r2, r3, r2, r5
 8019208:	4373      	muls	r3, r6
 801920a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801920e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019212:	9307      	str	r3, [sp, #28]
 8019214:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019218:	9306      	str	r3, [sp, #24]
 801921a:	9b07      	ldr	r3, [sp, #28]
 801921c:	4298      	cmp	r0, r3
 801921e:	d270      	bcs.n	8019302 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019220:	4621      	mov	r1, r4
 8019222:	9b06      	ldr	r3, [sp, #24]
 8019224:	eb00 0b03 	add.w	fp, r0, r3
 8019228:	4558      	cmp	r0, fp
 801922a:	d25d      	bcs.n	80192e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801922c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019230:	0e23      	lsrs	r3, r4, #24
 8019232:	d014      	beq.n	801925e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019234:	2bff      	cmp	r3, #255	; 0xff
 8019236:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801923a:	d112      	bne.n	8019262 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801923c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019240:	d10f      	bne.n	8019262 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019242:	0963      	lsrs	r3, r4, #5
 8019244:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8019248:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801924c:	f02c 0c07 	bic.w	ip, ip, #7
 8019250:	ea43 0c0c 	orr.w	ip, r3, ip
 8019254:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019258:	ea4c 0404 	orr.w	r4, ip, r4
 801925c:	8004      	strh	r4, [r0, #0]
 801925e:	3002      	adds	r0, #2
 8019260:	e7e2      	b.n	8019228 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019262:	fb09 f303 	mul.w	r3, r9, r3
 8019266:	1c5a      	adds	r2, r3, #1
 8019268:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801926c:	1212      	asrs	r2, r2, #8
 801926e:	b293      	uxth	r3, r2
 8019270:	43d2      	mvns	r2, r2
 8019272:	8807      	ldrh	r7, [r0, #0]
 8019274:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8019278:	fb1e fe03 	smulbb	lr, lr, r3
 801927c:	123e      	asrs	r6, r7, #8
 801927e:	fa5f fc8c 	uxtb.w	ip, ip
 8019282:	b2e4      	uxtb	r4, r4
 8019284:	fb1c fc03 	smulbb	ip, ip, r3
 8019288:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801928c:	fb14 f403 	smulbb	r4, r4, r3
 8019290:	b2d2      	uxtb	r2, r2
 8019292:	10fd      	asrs	r5, r7, #3
 8019294:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019298:	00ff      	lsls	r7, r7, #3
 801929a:	fb06 e602 	mla	r6, r6, r2, lr
 801929e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80192a2:	b2ff      	uxtb	r7, r7
 80192a4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80192a8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80192ac:	fb05 c502 	mla	r5, r5, r2, ip
 80192b0:	fb07 4702 	mla	r7, r7, r2, r4
 80192b4:	b2b6      	uxth	r6, r6
 80192b6:	f106 0e01 	add.w	lr, r6, #1
 80192ba:	b2ad      	uxth	r5, r5
 80192bc:	b2bf      	uxth	r7, r7
 80192be:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80192c2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80192c6:	f105 0c01 	add.w	ip, r5, #1
 80192ca:	1c7e      	adds	r6, r7, #1
 80192cc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80192d0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80192d4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80192d8:	096d      	lsrs	r5, r5, #5
 80192da:	ea46 060e 	orr.w	r6, r6, lr
 80192de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80192e2:	432e      	orrs	r6, r5
 80192e4:	8006      	strh	r6, [r0, #0]
 80192e6:	e7ba      	b.n	801925e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80192e8:	f8ba 3000 	ldrh.w	r3, [sl]
 80192ec:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80192f0:	eba3 0308 	sub.w	r3, r3, r8
 80192f4:	eba4 0408 	sub.w	r4, r4, r8
 80192f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80192fc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019300:	e78b      	b.n	801921a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019302:	4b03      	ldr	r3, [pc, #12]	; (8019310 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019304:	6818      	ldr	r0, [r3, #0]
 8019306:	6803      	ldr	r3, [r0, #0]
 8019308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801930a:	4798      	blx	r3
 801930c:	e76a      	b.n	80191e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801930e:	bf00      	nop
 8019310:	2001fda4 	.word	0x2001fda4
 8019314:	2001fd9e 	.word	0x2001fd9e

08019318 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801931c:	b085      	sub	sp, #20
 801931e:	466d      	mov	r5, sp
 8019320:	4616      	mov	r6, r2
 8019322:	460c      	mov	r4, r1
 8019324:	6810      	ldr	r0, [r2, #0]
 8019326:	6851      	ldr	r1, [r2, #4]
 8019328:	c503      	stmia	r5!, {r0, r1}
 801932a:	6818      	ldr	r0, [r3, #0]
 801932c:	6859      	ldr	r1, [r3, #4]
 801932e:	c503      	stmia	r5!, {r0, r1}
 8019330:	4668      	mov	r0, sp
 8019332:	f7f9 fff9 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019336:	4631      	mov	r1, r6
 8019338:	a802      	add	r0, sp, #8
 801933a:	f7fa f81d 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801933e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019342:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019346:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801934a:	4d28      	ldr	r5, [pc, #160]	; (80193ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801934c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019350:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019354:	f8bd 1000 	ldrh.w	r1, [sp]
 8019358:	6828      	ldr	r0, [r5, #0]
 801935a:	440a      	add	r2, r1
 801935c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019360:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019364:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019368:	4413      	add	r3, r2
 801936a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801936e:	6803      	ldr	r3, [r0, #0]
 8019370:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019376:	4798      	blx	r3
 8019378:	4e1d      	ldr	r6, [pc, #116]	; (80193f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801937a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801937e:	8833      	ldrh	r3, [r6, #0]
 8019380:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019384:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80193f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019388:	fb03 1202 	mla	r2, r3, r2, r1
 801938c:	fb08 f303 	mul.w	r3, r8, r3
 8019390:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019394:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019398:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801939c:	4298      	cmp	r0, r3
 801939e:	d21d      	bcs.n	80193dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80193a0:	eb00 080c 	add.w	r8, r0, ip
 80193a4:	4540      	cmp	r0, r8
 80193a6:	d20f      	bcs.n	80193c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80193a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80193ac:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80193b0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80193b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80193b8:	ea42 0209 	orr.w	r2, r2, r9
 80193bc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80193c0:	430a      	orrs	r2, r1
 80193c2:	f820 2b02 	strh.w	r2, [r0], #2
 80193c6:	e7ed      	b.n	80193a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80193c8:	8832      	ldrh	r2, [r6, #0]
 80193ca:	1bd2      	subs	r2, r2, r7
 80193cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80193d0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80193d4:	1bd2      	subs	r2, r2, r7
 80193d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80193da:	e7df      	b.n	801939c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80193dc:	6828      	ldr	r0, [r5, #0]
 80193de:	6803      	ldr	r3, [r0, #0]
 80193e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193e2:	4798      	blx	r3
 80193e4:	b005      	add	sp, #20
 80193e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193ea:	bf00      	nop
 80193ec:	2001fda4 	.word	0x2001fda4
 80193f0:	2001fd9e 	.word	0x2001fd9e
 80193f4:	fffff800 	.word	0xfffff800

080193f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80193f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193fc:	460e      	mov	r6, r1
 80193fe:	4604      	mov	r4, r0
 8019400:	461d      	mov	r5, r3
 8019402:	b08e      	sub	sp, #56	; 0x38
 8019404:	6808      	ldr	r0, [r1, #0]
 8019406:	6849      	ldr	r1, [r1, #4]
 8019408:	ab0a      	add	r3, sp, #40	; 0x28
 801940a:	c303      	stmia	r3!, {r0, r1}
 801940c:	6810      	ldr	r0, [r2, #0]
 801940e:	6851      	ldr	r1, [r2, #4]
 8019410:	ab0c      	add	r3, sp, #48	; 0x30
 8019412:	c303      	stmia	r3!, {r0, r1}
 8019414:	a80a      	add	r0, sp, #40	; 0x28
 8019416:	f7f9 ff87 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801941a:	4631      	mov	r1, r6
 801941c:	a80c      	add	r0, sp, #48	; 0x30
 801941e:	f7f9 ffab 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019422:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019426:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801942a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801942e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80195e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019432:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019436:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801943a:	440c      	add	r4, r1
 801943c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019440:	f8d8 0000 	ldr.w	r0, [r8]
 8019444:	440a      	add	r2, r1
 8019446:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801944a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801944e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8019452:	4413      	add	r3, r2
 8019454:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019458:	6803      	ldr	r3, [r0, #0]
 801945a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019460:	4798      	blx	r3
 8019462:	2dff      	cmp	r5, #255	; 0xff
 8019464:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80195e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8019468:	d124      	bne.n	80194b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801946a:	f010 0f01 	tst.w	r0, #1
 801946e:	f8d8 0000 	ldr.w	r0, [r8]
 8019472:	d022      	beq.n	80194ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8019474:	2100      	movs	r1, #0
 8019476:	f04f 0e01 	mov.w	lr, #1
 801947a:	f8d0 c000 	ldr.w	ip, [r0]
 801947e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8019482:	f8cd e018 	str.w	lr, [sp, #24]
 8019486:	f8b9 e000 	ldrh.w	lr, [r9]
 801948a:	b2b6      	uxth	r6, r6
 801948c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019490:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019494:	b2bf      	uxth	r7, r7
 8019496:	9102      	str	r1, [sp, #8]
 8019498:	9503      	str	r5, [sp, #12]
 801949a:	9601      	str	r6, [sp, #4]
 801949c:	9700      	str	r7, [sp, #0]
 801949e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80194a2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80194a6:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80194aa:	4621      	mov	r1, r4
 80194ac:	47a8      	blx	r5
 80194ae:	b00e      	add	sp, #56	; 0x38
 80194b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194b4:	f010 0f04 	tst.w	r0, #4
 80194b8:	e7d9      	b.n	801946e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194be:	4798      	blx	r3
 80194c0:	f8b9 3000 	ldrh.w	r3, [r9]
 80194c4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80194c8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80194cc:	435e      	muls	r6, r3
 80194ce:	fb03 1202 	mla	r2, r3, r2, r1
 80194d2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80194d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80194da:	ebac 0c07 	sub.w	ip, ip, r7
 80194de:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80194e2:	2dff      	cmp	r5, #255	; 0xff
 80194e4:	eba3 0707 	sub.w	r7, r3, r7
 80194e8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80194ec:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80194f0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80194f4:	d049      	beq.n	801958a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80194f6:	43eb      	mvns	r3, r5
 80194f8:	fa1f f985 	uxth.w	r9, r5
 80194fc:	b2db      	uxtb	r3, r3
 80194fe:	42b0      	cmp	r0, r6
 8019500:	d266      	bcs.n	80195d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019502:	eb00 0a0e 	add.w	sl, r0, lr
 8019506:	4550      	cmp	r0, sl
 8019508:	4621      	mov	r1, r4
 801950a:	f104 0403 	add.w	r4, r4, #3
 801950e:	d25b      	bcs.n	80195c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019510:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019514:	8802      	ldrh	r2, [r0, #0]
 8019516:	fb11 f109 	smulbb	r1, r1, r9
 801951a:	ea4f 2822 	mov.w	r8, r2, asr #8
 801951e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8019522:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8019526:	fb08 1803 	mla	r8, r8, r3, r1
 801952a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801952e:	10d5      	asrs	r5, r2, #3
 8019530:	fb11 f109 	smulbb	r1, r1, r9
 8019534:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019538:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801953c:	fb05 1503 	mla	r5, r5, r3, r1
 8019540:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019544:	00d2      	lsls	r2, r2, #3
 8019546:	fb11 f109 	smulbb	r1, r1, r9
 801954a:	b2d2      	uxtb	r2, r2
 801954c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019550:	fb02 1203 	mla	r2, r2, r3, r1
 8019554:	fa1f f888 	uxth.w	r8, r8
 8019558:	b292      	uxth	r2, r2
 801955a:	f108 0101 	add.w	r1, r8, #1
 801955e:	b2ad      	uxth	r5, r5
 8019560:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019564:	1c51      	adds	r1, r2, #1
 8019566:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801956a:	1c69      	adds	r1, r5, #1
 801956c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8019570:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8019574:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019578:	096d      	lsrs	r5, r5, #5
 801957a:	ea42 0208 	orr.w	r2, r2, r8
 801957e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019582:	432a      	orrs	r2, r5
 8019584:	f820 2b02 	strh.w	r2, [r0], #2
 8019588:	e7bd      	b.n	8019506 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801958a:	4a14      	ldr	r2, [pc, #80]	; (80195dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801958c:	42b0      	cmp	r0, r6
 801958e:	d21f      	bcs.n	80195d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019590:	eb00 050e 	add.w	r5, r0, lr
 8019594:	42a8      	cmp	r0, r5
 8019596:	4621      	mov	r1, r4
 8019598:	f104 0403 	add.w	r4, r4, #3
 801959c:	d210      	bcs.n	80195c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801959e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80195a2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80195a6:	00db      	lsls	r3, r3, #3
 80195a8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80195ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80195b0:	430b      	orrs	r3, r1
 80195b2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80195b6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80195ba:	f820 3b02 	strh.w	r3, [r0], #2
 80195be:	e7e9      	b.n	8019594 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80195c0:	4438      	add	r0, r7
 80195c2:	eb01 040c 	add.w	r4, r1, ip
 80195c6:	e7e1      	b.n	801958c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80195c8:	4438      	add	r0, r7
 80195ca:	eb01 040c 	add.w	r4, r1, ip
 80195ce:	e796      	b.n	80194fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80195d0:	4b03      	ldr	r3, [pc, #12]	; (80195e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80195d2:	6818      	ldr	r0, [r3, #0]
 80195d4:	6803      	ldr	r3, [r0, #0]
 80195d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195d8:	4798      	blx	r3
 80195da:	e768      	b.n	80194ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80195dc:	fffff800 	.word	0xfffff800
 80195e0:	2001fda4 	.word	0x2001fda4
 80195e4:	2001fd9e 	.word	0x2001fd9e

080195e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80195e8:	b4f0      	push	{r4, r5, r6, r7}
 80195ea:	4616      	mov	r6, r2
 80195ec:	2e01      	cmp	r6, #1
 80195ee:	461c      	mov	r4, r3
 80195f0:	460d      	mov	r5, r1
 80195f2:	9a04      	ldr	r2, [sp, #16]
 80195f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80195f8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80195fc:	d012      	beq.n	8019624 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80195fe:	d303      	bcc.n	8019608 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8019600:	2e02      	cmp	r6, #2
 8019602:	d00a      	beq.n	801961a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8019604:	bcf0      	pop	{r4, r5, r6, r7}
 8019606:	4770      	bx	lr
 8019608:	6805      	ldr	r5, [r0, #0]
 801960a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801960e:	68ed      	ldr	r5, [r5, #12]
 8019610:	4613      	mov	r3, r2
 8019612:	46ac      	mov	ip, r5
 8019614:	4622      	mov	r2, r4
 8019616:	bcf0      	pop	{r4, r5, r6, r7}
 8019618:	4760      	bx	ip
 801961a:	4621      	mov	r1, r4
 801961c:	4628      	mov	r0, r5
 801961e:	bcf0      	pop	{r4, r5, r6, r7}
 8019620:	f7ff bd94 	b.w	801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019624:	4621      	mov	r1, r4
 8019626:	4628      	mov	r0, r5
 8019628:	bcf0      	pop	{r4, r5, r6, r7}
 801962a:	f7ff bee5 	b.w	80193f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08019630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019634:	4616      	mov	r6, r2
 8019636:	4681      	mov	r9, r0
 8019638:	b093      	sub	sp, #76	; 0x4c
 801963a:	6810      	ldr	r0, [r2, #0]
 801963c:	4688      	mov	r8, r1
 801963e:	6851      	ldr	r1, [r2, #4]
 8019640:	ac0e      	add	r4, sp, #56	; 0x38
 8019642:	c403      	stmia	r4!, {r0, r1}
 8019644:	6818      	ldr	r0, [r3, #0]
 8019646:	6859      	ldr	r1, [r3, #4]
 8019648:	ac10      	add	r4, sp, #64	; 0x40
 801964a:	c403      	stmia	r4!, {r0, r1}
 801964c:	a80e      	add	r0, sp, #56	; 0x38
 801964e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8019652:	f7f9 fe69 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019656:	4631      	mov	r1, r6
 8019658:	a810      	add	r0, sp, #64	; 0x40
 801965a:	f7f9 fe8d 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801965e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8019662:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8019666:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801966a:	4e62      	ldr	r6, [pc, #392]	; (80197f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801966c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019670:	4489      	add	r9, r1
 8019672:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8019676:	6830      	ldr	r0, [r6, #0]
 8019678:	440a      	add	r2, r1
 801967a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801967e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019682:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8019686:	4413      	add	r3, r2
 8019688:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801968c:	6803      	ldr	r3, [r0, #0]
 801968e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8019692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019694:	4798      	blx	r3
 8019696:	f010 0f80 	tst.w	r0, #128	; 0x80
 801969a:	4f57      	ldr	r7, [pc, #348]	; (80197f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801969c:	6830      	ldr	r0, [r6, #0]
 801969e:	d01d      	beq.n	80196dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80196a0:	2200      	movs	r2, #0
 80196a2:	6801      	ldr	r1, [r0, #0]
 80196a4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80196a8:	220b      	movs	r2, #11
 80196aa:	9207      	str	r2, [sp, #28]
 80196ac:	883a      	ldrh	r2, [r7, #0]
 80196ae:	b2a4      	uxth	r4, r4
 80196b0:	9206      	str	r2, [sp, #24]
 80196b2:	2201      	movs	r2, #1
 80196b4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80196b8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80196bc:	b2ad      	uxth	r5, r5
 80196be:	9203      	str	r2, [sp, #12]
 80196c0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80196c4:	9502      	str	r5, [sp, #8]
 80196c6:	9200      	str	r2, [sp, #0]
 80196c8:	9401      	str	r4, [sp, #4]
 80196ca:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80196cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80196d0:	4642      	mov	r2, r8
 80196d2:	4649      	mov	r1, r9
 80196d4:	47a0      	blx	r4
 80196d6:	b013      	add	sp, #76	; 0x4c
 80196d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196dc:	6803      	ldr	r3, [r0, #0]
 80196de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196e0:	4798      	blx	r3
 80196e2:	f04f 0e04 	mov.w	lr, #4
 80196e6:	883b      	ldrh	r3, [r7, #0]
 80196e8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80196ec:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80196f0:	435d      	muls	r5, r3
 80196f2:	fb03 1202 	mla	r2, r3, r2, r1
 80196f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80196fa:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80196fe:	920c      	str	r2, [sp, #48]	; 0x30
 8019700:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8019704:	1b12      	subs	r2, r2, r4
 8019706:	920d      	str	r2, [sp, #52]	; 0x34
 8019708:	0062      	lsls	r2, r4, #1
 801970a:	1b1c      	subs	r4, r3, r4
 801970c:	0063      	lsls	r3, r4, #1
 801970e:	920a      	str	r2, [sp, #40]	; 0x28
 8019710:	930b      	str	r3, [sp, #44]	; 0x2c
 8019712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019714:	4298      	cmp	r0, r3
 8019716:	d266      	bcs.n	80197e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8019718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801971a:	eb00 0b03 	add.w	fp, r0, r3
 801971e:	4558      	cmp	r0, fp
 8019720:	d25c      	bcs.n	80197dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8019722:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019726:	fb1e e303 	smlabb	r3, lr, r3, lr
 801972a:	f858 2003 	ldr.w	r2, [r8, r3]
 801972e:	0e11      	lsrs	r1, r2, #24
 8019730:	d012      	beq.n	8019758 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8019732:	29ff      	cmp	r1, #255	; 0xff
 8019734:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8019738:	d110      	bne.n	801975c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801973a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801973e:	d10d      	bne.n	801975c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019740:	0953      	lsrs	r3, r2, #5
 8019742:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8019746:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801974a:	f027 0707 	bic.w	r7, r7, #7
 801974e:	431f      	orrs	r7, r3
 8019750:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019754:	433a      	orrs	r2, r7
 8019756:	8002      	strh	r2, [r0, #0]
 8019758:	3002      	adds	r0, #2
 801975a:	e7e0      	b.n	801971e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801975c:	fb0a f101 	mul.w	r1, sl, r1
 8019760:	1c4b      	adds	r3, r1, #1
 8019762:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8019766:	121b      	asrs	r3, r3, #8
 8019768:	b299      	uxth	r1, r3
 801976a:	43db      	mvns	r3, r3
 801976c:	8806      	ldrh	r6, [r0, #0]
 801976e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019772:	b2d2      	uxtb	r2, r2
 8019774:	fb1c fc01 	smulbb	ip, ip, r1
 8019778:	fb12 f201 	smulbb	r2, r2, r1
 801977c:	1235      	asrs	r5, r6, #8
 801977e:	10f4      	asrs	r4, r6, #3
 8019780:	00f6      	lsls	r6, r6, #3
 8019782:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019786:	b2f6      	uxtb	r6, r6
 8019788:	b2ff      	uxtb	r7, r7
 801978a:	b2db      	uxtb	r3, r3
 801978c:	fb17 f701 	smulbb	r7, r7, r1
 8019790:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8019794:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019798:	fb05 c503 	mla	r5, r5, r3, ip
 801979c:	fb06 2203 	mla	r2, r6, r3, r2
 80197a0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80197a4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80197a8:	fb04 7403 	mla	r4, r4, r3, r7
 80197ac:	b2ad      	uxth	r5, r5
 80197ae:	b292      	uxth	r2, r2
 80197b0:	f105 0c01 	add.w	ip, r5, #1
 80197b4:	1c57      	adds	r7, r2, #1
 80197b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80197ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80197be:	b2a4      	uxth	r4, r4
 80197c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80197c4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80197c8:	433d      	orrs	r5, r7
 80197ca:	1c67      	adds	r7, r4, #1
 80197cc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80197d0:	0964      	lsrs	r4, r4, #5
 80197d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80197d6:	4325      	orrs	r5, r4
 80197d8:	8005      	strh	r5, [r0, #0]
 80197da:	e7bd      	b.n	8019758 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80197dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197de:	4418      	add	r0, r3
 80197e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197e2:	4499      	add	r9, r3
 80197e4:	e795      	b.n	8019712 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80197e6:	4b03      	ldr	r3, [pc, #12]	; (80197f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80197e8:	6818      	ldr	r0, [r3, #0]
 80197ea:	6803      	ldr	r3, [r0, #0]
 80197ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197ee:	4798      	blx	r3
 80197f0:	e771      	b.n	80196d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80197f2:	bf00      	nop
 80197f4:	2001fda4 	.word	0x2001fda4
 80197f8:	2001fd9e 	.word	0x2001fd9e

080197fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80197fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019800:	b087      	sub	sp, #28
 8019802:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8019806:	4680      	mov	r8, r0
 8019808:	460d      	mov	r5, r1
 801980a:	4614      	mov	r4, r2
 801980c:	2e00      	cmp	r6, #0
 801980e:	f000 80b9 	beq.w	8019984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8019812:	6810      	ldr	r0, [r2, #0]
 8019814:	6851      	ldr	r1, [r2, #4]
 8019816:	af02      	add	r7, sp, #8
 8019818:	c703      	stmia	r7!, {r0, r1}
 801981a:	6818      	ldr	r0, [r3, #0]
 801981c:	6859      	ldr	r1, [r3, #4]
 801981e:	af04      	add	r7, sp, #16
 8019820:	c703      	stmia	r7!, {r0, r1}
 8019822:	a802      	add	r0, sp, #8
 8019824:	f7f9 fd80 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019828:	4621      	mov	r1, r4
 801982a:	a804      	add	r0, sp, #16
 801982c:	f7f9 fda4 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019830:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019834:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019838:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801983c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8019840:	fb14 2103 	smlabb	r1, r4, r3, r2
 8019844:	eb08 0401 	add.w	r4, r8, r1
 8019848:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801984c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019850:	440a      	add	r2, r1
 8019852:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019856:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801985a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801985e:	4413      	add	r3, r2
 8019860:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019864:	4b49      	ldr	r3, [pc, #292]	; (801998c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8019866:	6818      	ldr	r0, [r3, #0]
 8019868:	6803      	ldr	r3, [r0, #0]
 801986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801986c:	4798      	blx	r3
 801986e:	4b48      	ldr	r3, [pc, #288]	; (8019990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8019870:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8019874:	881a      	ldrh	r2, [r3, #0]
 8019876:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801987a:	2eff      	cmp	r6, #255	; 0xff
 801987c:	fb02 c101 	mla	r1, r2, r1, ip
 8019880:	fb02 f207 	mul.w	r2, r2, r7
 8019884:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019888:	f105 0104 	add.w	r1, r5, #4
 801988c:	461d      	mov	r5, r3
 801988e:	d05a      	beq.n	8019946 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8019890:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8019894:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019898:	b2b6      	uxth	r6, r6
 801989a:	fa1f fe8e 	uxth.w	lr, lr
 801989e:	9301      	str	r3, [sp, #4]
 80198a0:	4282      	cmp	r2, r0
 80198a2:	d96a      	bls.n	801997a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80198a4:	eb00 0b0a 	add.w	fp, r0, sl
 80198a8:	4583      	cmp	fp, r0
 80198aa:	d940      	bls.n	801992e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80198ac:	8805      	ldrh	r5, [r0, #0]
 80198ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 80198b2:	122f      	asrs	r7, r5, #8
 80198b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80198b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80198bc:	fb17 f70e 	smulbb	r7, r7, lr
 80198c0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80198c4:	00ed      	lsls	r5, r5, #3
 80198c6:	b2ed      	uxtb	r5, r5
 80198c8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80198cc:	fb15 f50e 	smulbb	r5, r5, lr
 80198d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80198d4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80198d8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80198dc:	10df      	asrs	r7, r3, #3
 80198de:	00db      	lsls	r3, r3, #3
 80198e0:	fb19 f90e 	smulbb	r9, r9, lr
 80198e4:	b2db      	uxtb	r3, r3
 80198e6:	fb03 5306 	mla	r3, r3, r6, r5
 80198ea:	fa1f fc8c 	uxth.w	ip, ip
 80198ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80198f2:	fb07 9706 	mla	r7, r7, r6, r9
 80198f6:	f10c 0901 	add.w	r9, ip, #1
 80198fa:	b29b      	uxth	r3, r3
 80198fc:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8019900:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8019904:	f103 0c01 	add.w	ip, r3, #1
 8019908:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801990c:	b2bf      	uxth	r7, r7
 801990e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019912:	ea4c 0c09 	orr.w	ip, ip, r9
 8019916:	f107 0901 	add.w	r9, r7, #1
 801991a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801991e:	097f      	lsrs	r7, r7, #5
 8019920:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019924:	ea4c 0c07 	orr.w	ip, ip, r7
 8019928:	f820 cb02 	strh.w	ip, [r0], #2
 801992c:	e7bc      	b.n	80198a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801992e:	9b01      	ldr	r3, [sp, #4]
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	eba3 0308 	sub.w	r3, r3, r8
 8019936:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801993a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801993e:	eba3 0308 	sub.w	r3, r3, r8
 8019942:	441c      	add	r4, r3
 8019944:	e7ac      	b.n	80198a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8019946:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801994a:	4282      	cmp	r2, r0
 801994c:	d915      	bls.n	801997a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801994e:	eb00 060a 	add.w	r6, r0, sl
 8019952:	4286      	cmp	r6, r0
 8019954:	d906      	bls.n	8019964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8019956:	f814 3b01 	ldrb.w	r3, [r4], #1
 801995a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801995e:	f820 3b02 	strh.w	r3, [r0], #2
 8019962:	e7f6      	b.n	8019952 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8019964:	882b      	ldrh	r3, [r5, #0]
 8019966:	eba3 0308 	sub.w	r3, r3, r8
 801996a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801996e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019972:	eba3 0308 	sub.w	r3, r3, r8
 8019976:	441c      	add	r4, r3
 8019978:	e7e7      	b.n	801994a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801997a:	4b04      	ldr	r3, [pc, #16]	; (801998c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801997c:	6818      	ldr	r0, [r3, #0]
 801997e:	6803      	ldr	r3, [r0, #0]
 8019980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019982:	4798      	blx	r3
 8019984:	b007      	add	sp, #28
 8019986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998a:	bf00      	nop
 801998c:	2001fda4 	.word	0x2001fda4
 8019990:	2001fd9e 	.word	0x2001fd9e

08019994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8019994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019998:	b091      	sub	sp, #68	; 0x44
 801999a:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801999e:	4680      	mov	r8, r0
 80199a0:	460f      	mov	r7, r1
 80199a2:	4614      	mov	r4, r2
 80199a4:	2d00      	cmp	r5, #0
 80199a6:	d051      	beq.n	8019a4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80199a8:	6810      	ldr	r0, [r2, #0]
 80199aa:	6851      	ldr	r1, [r2, #4]
 80199ac:	ae0c      	add	r6, sp, #48	; 0x30
 80199ae:	c603      	stmia	r6!, {r0, r1}
 80199b0:	6818      	ldr	r0, [r3, #0]
 80199b2:	6859      	ldr	r1, [r3, #4]
 80199b4:	ae0e      	add	r6, sp, #56	; 0x38
 80199b6:	c603      	stmia	r6!, {r0, r1}
 80199b8:	a80c      	add	r0, sp, #48	; 0x30
 80199ba:	f7f9 fcb5 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199be:	4621      	mov	r1, r4
 80199c0:	a80e      	add	r0, sp, #56	; 0x38
 80199c2:	f7f9 fcd9 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80199c6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80199ca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80199ce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80199d2:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8019bb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80199d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80199da:	eb08 0401 	add.w	r4, r8, r1
 80199de:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80199e2:	f8d9 0000 	ldr.w	r0, [r9]
 80199e6:	440a      	add	r2, r1
 80199e8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80199ec:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80199f0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80199f4:	4413      	add	r3, r2
 80199f6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80199fa:	6803      	ldr	r3, [r0, #0]
 80199fc:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8019a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a02:	4798      	blx	r3
 8019a04:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019a08:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019bb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8019a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8019a10:	d01f      	beq.n	8019a52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8019a12:	2200      	movs	r2, #0
 8019a14:	6801      	ldr	r1, [r0, #0]
 8019a16:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8019a1a:	220b      	movs	r2, #11
 8019a1c:	9207      	str	r2, [sp, #28]
 8019a1e:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a22:	b2b6      	uxth	r6, r6
 8019a24:	9206      	str	r2, [sp, #24]
 8019a26:	2201      	movs	r2, #1
 8019a28:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8019a2c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019a30:	9601      	str	r6, [sp, #4]
 8019a32:	9203      	str	r2, [sp, #12]
 8019a34:	fa1f f28a 	uxth.w	r2, sl
 8019a38:	9202      	str	r2, [sp, #8]
 8019a3a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019a3e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019a42:	9200      	str	r2, [sp, #0]
 8019a44:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8019a46:	463a      	mov	r2, r7
 8019a48:	4621      	mov	r1, r4
 8019a4a:	47a8      	blx	r5
 8019a4c:	b011      	add	sp, #68	; 0x44
 8019a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a52:	6803      	ldr	r3, [r0, #0]
 8019a54:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8019a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a5a:	4798      	blx	r3
 8019a5c:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a60:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019a64:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8019a68:	2dff      	cmp	r5, #255	; 0xff
 8019a6a:	fb02 1303 	mla	r3, r2, r3, r1
 8019a6e:	fb0a fa02 	mul.w	sl, sl, r2
 8019a72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019a76:	d062      	beq.n	8019b3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8019a78:	ea6f 0c05 	mvn.w	ip, r5
 8019a7c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8019a80:	930a      	str	r3, [sp, #40]	; 0x28
 8019a82:	b2ad      	uxth	r5, r5
 8019a84:	fa5f fc8c 	uxtb.w	ip, ip
 8019a88:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8019a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a8e:	4298      	cmp	r0, r3
 8019a90:	f080 8085 	bcs.w	8019b9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019a94:	eb00 0b09 	add.w	fp, r0, r9
 8019a98:	4558      	cmp	r0, fp
 8019a9a:	d246      	bcs.n	8019b2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8019a9c:	2303      	movs	r3, #3
 8019a9e:	2204      	movs	r2, #4
 8019aa0:	f814 eb01 	ldrb.w	lr, [r4], #1
 8019aa4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8019aa8:	eb07 0a0e 	add.w	sl, r7, lr
 8019aac:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8019ab0:	8803      	ldrh	r3, [r0, #0]
 8019ab2:	fb18 f805 	smulbb	r8, r8, r5
 8019ab6:	1219      	asrs	r1, r3, #8
 8019ab8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019abc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8019ac0:	fb01 810c 	mla	r1, r1, ip, r8
 8019ac4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019ac8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019acc:	fb1e fe05 	smulbb	lr, lr, r5
 8019ad0:	fb18 f805 	smulbb	r8, r8, r5
 8019ad4:	10da      	asrs	r2, r3, #3
 8019ad6:	00db      	lsls	r3, r3, #3
 8019ad8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019adc:	b2db      	uxtb	r3, r3
 8019ade:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019ae2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8019ae6:	fb02 820c 	mla	r2, r2, ip, r8
 8019aea:	fb03 e30c 	mla	r3, r3, ip, lr
 8019aee:	b289      	uxth	r1, r1
 8019af0:	b292      	uxth	r2, r2
 8019af2:	b29b      	uxth	r3, r3
 8019af4:	f101 0801 	add.w	r8, r1, #1
 8019af8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019afc:	f103 0e01 	add.w	lr, r3, #1
 8019b00:	f102 0801 	add.w	r8, r2, #1
 8019b04:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8019b08:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8019b0c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019b10:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019b14:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019b18:	ea4e 0101 	orr.w	r1, lr, r1
 8019b1c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019b20:	ea41 0108 	orr.w	r1, r1, r8
 8019b24:	f820 1b02 	strh.w	r1, [r0], #2
 8019b28:	e7b6      	b.n	8019a98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8019b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b2c:	881b      	ldrh	r3, [r3, #0]
 8019b2e:	1b9b      	subs	r3, r3, r6
 8019b30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019b34:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019b38:	1b9b      	subs	r3, r3, r6
 8019b3a:	441c      	add	r4, r3
 8019b3c:	e7a6      	b.n	8019a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8019b3e:	2203      	movs	r2, #3
 8019b40:	2504      	movs	r5, #4
 8019b42:	491a      	ldr	r1, [pc, #104]	; (8019bac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8019b44:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8019b48:	4550      	cmp	r0, sl
 8019b4a:	d228      	bcs.n	8019b9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019b4c:	eb00 0c09 	add.w	ip, r0, r9
 8019b50:	4560      	cmp	r0, ip
 8019b52:	4623      	mov	r3, r4
 8019b54:	d219      	bcs.n	8019b8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8019b56:	f893 e000 	ldrb.w	lr, [r3]
 8019b5a:	3401      	adds	r4, #1
 8019b5c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8019b60:	eb07 0b0e 	add.w	fp, r7, lr
 8019b64:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019b68:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019b6c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019b70:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019b74:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8019b78:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019b7c:	ea43 030b 	orr.w	r3, r3, fp
 8019b80:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8019b84:	f820 3b02 	strh.w	r3, [r0], #2
 8019b88:	e7e2      	b.n	8019b50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8019b8a:	f8b8 3000 	ldrh.w	r3, [r8]
 8019b8e:	1b9b      	subs	r3, r3, r6
 8019b90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019b94:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019b98:	1b9b      	subs	r3, r3, r6
 8019b9a:	441c      	add	r4, r3
 8019b9c:	e7d4      	b.n	8019b48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8019b9e:	4b04      	ldr	r3, [pc, #16]	; (8019bb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8019ba0:	6818      	ldr	r0, [r3, #0]
 8019ba2:	6803      	ldr	r3, [r0, #0]
 8019ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ba6:	4798      	blx	r3
 8019ba8:	e750      	b.n	8019a4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8019baa:	bf00      	nop
 8019bac:	fffff800 	.word	0xfffff800
 8019bb0:	2001fda4 	.word	0x2001fda4
 8019bb4:	2001fd9e 	.word	0x2001fd9e

08019bb8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8019bb8:	b430      	push	{r4, r5}
 8019bba:	780d      	ldrb	r5, [r1, #0]
 8019bbc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8019bc0:	2d01      	cmp	r5, #1
 8019bc2:	d00a      	beq.n	8019bda <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8019bc4:	d305      	bcc.n	8019bd2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8019bc6:	2d02      	cmp	r5, #2
 8019bc8:	d10b      	bne.n	8019be2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8019bca:	9402      	str	r4, [sp, #8]
 8019bcc:	bc30      	pop	{r4, r5}
 8019bce:	f7ff be15 	b.w	80197fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8019bd2:	9402      	str	r4, [sp, #8]
 8019bd4:	bc30      	pop	{r4, r5}
 8019bd6:	f7ff bd2b 	b.w	8019630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8019bda:	9402      	str	r4, [sp, #8]
 8019bdc:	bc30      	pop	{r4, r5}
 8019bde:	f7ff bed9 	b.w	8019994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8019be2:	bc30      	pop	{r4, r5}
 8019be4:	4770      	bx	lr
	...

08019be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8019be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bec:	4617      	mov	r7, r2
 8019bee:	4604      	mov	r4, r0
 8019bf0:	460e      	mov	r6, r1
 8019bf2:	b087      	sub	sp, #28
 8019bf4:	6810      	ldr	r0, [r2, #0]
 8019bf6:	6851      	ldr	r1, [r2, #4]
 8019bf8:	ad02      	add	r5, sp, #8
 8019bfa:	c503      	stmia	r5!, {r0, r1}
 8019bfc:	6818      	ldr	r0, [r3, #0]
 8019bfe:	6859      	ldr	r1, [r3, #4]
 8019c00:	ad04      	add	r5, sp, #16
 8019c02:	c503      	stmia	r5!, {r0, r1}
 8019c04:	a802      	add	r0, sp, #8
 8019c06:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8019c0a:	f7f9 fb8d 	bl	8013328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c0e:	4639      	mov	r1, r7
 8019c10:	a804      	add	r0, sp, #16
 8019c12:	f7f9 fbb1 	bl	8013378 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c16:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019c1a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019c22:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019c26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019c2a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8019c2e:	440e      	add	r6, r1
 8019c30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019c34:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8019c38:	440a      	add	r2, r1
 8019c3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019c3e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019c42:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8019e30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8019c46:	4413      	add	r3, r2
 8019c48:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019c4c:	4b77      	ldr	r3, [pc, #476]	; (8019e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019c4e:	6818      	ldr	r0, [r3, #0]
 8019c50:	6803      	ldr	r3, [r0, #0]
 8019c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c54:	4798      	blx	r3
 8019c56:	f8b9 b000 	ldrh.w	fp, [r9]
 8019c5a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c5e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019c62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019c66:	fb0b 2303 	mla	r3, fp, r3, r2
 8019c6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019c6e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019c72:	fb05 f50b 	mul.w	r5, r5, fp
 8019c76:	9300      	str	r3, [sp, #0]
 8019c78:	d069      	beq.n	8019d4e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8019c7a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8019c7e:	4558      	cmp	r0, fp
 8019c80:	f080 80cc 	bcs.w	8019e1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019c84:	4631      	mov	r1, r6
 8019c86:	9b00      	ldr	r3, [sp, #0]
 8019c88:	18c3      	adds	r3, r0, r3
 8019c8a:	9301      	str	r3, [sp, #4]
 8019c8c:	9b01      	ldr	r3, [sp, #4]
 8019c8e:	4298      	cmp	r0, r3
 8019c90:	d24f      	bcs.n	8019d32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8019c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c96:	2a00      	cmp	r2, #0
 8019c98:	d048      	beq.n	8019d2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8019c9a:	fb0a f202 	mul.w	r2, sl, r2
 8019c9e:	1c53      	adds	r3, r2, #1
 8019ca0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019ca4:	121b      	asrs	r3, r3, #8
 8019ca6:	d041      	beq.n	8019d2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8019ca8:	b29e      	uxth	r6, r3
 8019caa:	43db      	mvns	r3, r3
 8019cac:	8802      	ldrh	r2, [r0, #0]
 8019cae:	b2db      	uxtb	r3, r3
 8019cb0:	1215      	asrs	r5, r2, #8
 8019cb2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019cb6:	f8b4 c000 	ldrh.w	ip, [r4]
 8019cba:	fb15 f503 	smulbb	r5, r5, r3
 8019cbe:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8019cc2:	00d2      	lsls	r2, r2, #3
 8019cc4:	b2d2      	uxtb	r2, r2
 8019cc6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019cca:	fb12 f203 	smulbb	r2, r2, r3
 8019cce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019cd2:	fb07 5706 	mla	r7, r7, r6, r5
 8019cd6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019cda:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019cde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019ce2:	fb1e fe03 	smulbb	lr, lr, r3
 8019ce6:	fa5f fc8c 	uxtb.w	ip, ip
 8019cea:	fb0c 2c06 	mla	ip, ip, r6, r2
 8019cee:	b2bf      	uxth	r7, r7
 8019cf0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019cf4:	fb05 e506 	mla	r5, r5, r6, lr
 8019cf8:	f107 0e01 	add.w	lr, r7, #1
 8019cfc:	fa1f fc8c 	uxth.w	ip, ip
 8019d00:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019d04:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8019d08:	f10c 0701 	add.w	r7, ip, #1
 8019d0c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019d10:	b2ad      	uxth	r5, r5
 8019d12:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019d16:	ea47 070e 	orr.w	r7, r7, lr
 8019d1a:	f105 0e01 	add.w	lr, r5, #1
 8019d1e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8019d22:	096d      	lsrs	r5, r5, #5
 8019d24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019d28:	432f      	orrs	r7, r5
 8019d2a:	8007      	strh	r7, [r0, #0]
 8019d2c:	3002      	adds	r0, #2
 8019d2e:	3402      	adds	r4, #2
 8019d30:	e7ac      	b.n	8019c8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8019d32:	f8b9 3000 	ldrh.w	r3, [r9]
 8019d36:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019d3a:	eba3 0308 	sub.w	r3, r3, r8
 8019d3e:	eba6 0608 	sub.w	r6, r6, r8
 8019d42:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019d46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019d4a:	440e      	add	r6, r1
 8019d4c:	e797      	b.n	8019c7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8019d4e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019d52:	42a8      	cmp	r0, r5
 8019d54:	d262      	bcs.n	8019e1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019d56:	4631      	mov	r1, r6
 8019d58:	9b00      	ldr	r3, [sp, #0]
 8019d5a:	eb00 0b03 	add.w	fp, r0, r3
 8019d5e:	4558      	cmp	r0, fp
 8019d60:	d24e      	bcs.n	8019e00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8019d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d66:	b12b      	cbz	r3, 8019d74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019d68:	2bff      	cmp	r3, #255	; 0xff
 8019d6a:	f8b4 e000 	ldrh.w	lr, [r4]
 8019d6e:	d104      	bne.n	8019d7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8019d70:	f8a0 e000 	strh.w	lr, [r0]
 8019d74:	3002      	adds	r0, #2
 8019d76:	3402      	adds	r4, #2
 8019d78:	e7f1      	b.n	8019d5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8019d7a:	b29f      	uxth	r7, r3
 8019d7c:	43db      	mvns	r3, r3
 8019d7e:	8802      	ldrh	r2, [r0, #0]
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	1216      	asrs	r6, r2, #8
 8019d84:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019d88:	fb16 f603 	smulbb	r6, r6, r3
 8019d8c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8019d90:	00d2      	lsls	r2, r2, #3
 8019d92:	b2d2      	uxtb	r2, r2
 8019d94:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019d98:	fb1a fa03 	smulbb	sl, sl, r3
 8019d9c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019da0:	fb12 f303 	smulbb	r3, r2, r3
 8019da4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019da8:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019dac:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019db0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019db4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019db8:	fa5f fe8e 	uxtb.w	lr, lr
 8019dbc:	fb06 a607 	mla	r6, r6, r7, sl
 8019dc0:	fb0e 3307 	mla	r3, lr, r7, r3
 8019dc4:	fa1f fc8c 	uxth.w	ip, ip
 8019dc8:	f10c 0201 	add.w	r2, ip, #1
 8019dcc:	b2b6      	uxth	r6, r6
 8019dce:	b29b      	uxth	r3, r3
 8019dd0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019dd4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8019dd8:	f106 0a01 	add.w	sl, r6, #1
 8019ddc:	f103 0c01 	add.w	ip, r3, #1
 8019de0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019de4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019de8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019dec:	0976      	lsrs	r6, r6, #5
 8019dee:	ea4c 0c02 	orr.w	ip, ip, r2
 8019df2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019df6:	ea4c 0c06 	orr.w	ip, ip, r6
 8019dfa:	f8a0 c000 	strh.w	ip, [r0]
 8019dfe:	e7b9      	b.n	8019d74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019e00:	f8b9 3000 	ldrh.w	r3, [r9]
 8019e04:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019e08:	eba3 0308 	sub.w	r3, r3, r8
 8019e0c:	eba6 0608 	sub.w	r6, r6, r8
 8019e10:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019e14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019e18:	440e      	add	r6, r1
 8019e1a:	e79a      	b.n	8019d52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8019e1c:	4b03      	ldr	r3, [pc, #12]	; (8019e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019e1e:	6818      	ldr	r0, [r3, #0]
 8019e20:	6803      	ldr	r3, [r0, #0]
 8019e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e24:	4798      	blx	r3
 8019e26:	b007      	add	sp, #28
 8019e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e2c:	2001fda4 	.word	0x2001fda4
 8019e30:	2001fd9e 	.word	0x2001fd9e

08019e34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e38:	b089      	sub	sp, #36	; 0x24
 8019e3a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8019e3e:	4682      	mov	sl, r0
 8019e40:	460f      	mov	r7, r1
 8019e42:	4691      	mov	r9, r2
 8019e44:	4698      	mov	r8, r3
 8019e46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e48:	2e00      	cmp	r6, #0
 8019e4a:	d036      	beq.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019e4c:	4608      	mov	r0, r1
 8019e4e:	f7fc f86d 	bl	8015f2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e52:	4605      	mov	r5, r0
 8019e54:	4638      	mov	r0, r7
 8019e56:	f7fc f89d 	bl	8015f94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e5a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8019e5e:	4638      	mov	r0, r7
 8019e60:	f8ad 9008 	strh.w	r9, [sp, #8]
 8019e64:	f8ad 500c 	strh.w	r5, [sp, #12]
 8019e68:	f8ad 800a 	strh.w	r8, [sp, #10]
 8019e6c:	f7fc f94a 	bl	8016104 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019e70:	4605      	mov	r5, r0
 8019e72:	4638      	mov	r0, r7
 8019e74:	f7fc f976 	bl	8016164 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019e78:	4681      	mov	r9, r0
 8019e7a:	4638      	mov	r0, r7
 8019e7c:	f7fc f9c6 	bl	801620c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019e80:	280b      	cmp	r0, #11
 8019e82:	d81a      	bhi.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019e84:	e8df f000 	tbb	[pc, r0]
 8019e88:	1906aebd 	.word	0x1906aebd
 8019e8c:	19191919 	.word	0x19191919
 8019e90:	b5191919 	.word	0xb5191919
 8019e94:	4bb0      	ldr	r3, [pc, #704]	; (801a158 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8019e96:	6818      	ldr	r0, [r3, #0]
 8019e98:	6803      	ldr	r3, [r0, #0]
 8019e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e9c:	4798      	blx	r3
 8019e9e:	2eff      	cmp	r6, #255	; 0xff
 8019ea0:	d121      	bne.n	8019ee6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019ea2:	0683      	lsls	r3, r0, #26
 8019ea4:	d41f      	bmi.n	8019ee6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019ea6:	4638      	mov	r0, r7
 8019ea8:	f7fc f8f4 	bl	8016094 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019eac:	b940      	cbnz	r0, 8019ec0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8019eae:	4623      	mov	r3, r4
 8019eb0:	aa02      	add	r2, sp, #8
 8019eb2:	4629      	mov	r1, r5
 8019eb4:	4650      	mov	r0, sl
 8019eb6:	f7ff fa2f 	bl	8019318 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019eba:	b009      	add	sp, #36	; 0x24
 8019ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec0:	f10d 0818 	add.w	r8, sp, #24
 8019ec4:	4639      	mov	r1, r7
 8019ec6:	4640      	mov	r0, r8
 8019ec8:	af04      	add	r7, sp, #16
 8019eca:	f7fc f897 	bl	8015ffc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019ece:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019ed2:	e887 0003 	stmia.w	r7, {r0, r1}
 8019ed6:	4638      	mov	r0, r7
 8019ed8:	4621      	mov	r1, r4
 8019eda:	f7f6 fd3d 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 8019ede:	4638      	mov	r0, r7
 8019ee0:	f7f6 fd7d 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ee4:	b130      	cbz	r0, 8019ef4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8019ee6:	4633      	mov	r3, r6
 8019ee8:	4622      	mov	r2, r4
 8019eea:	a902      	add	r1, sp, #8
 8019eec:	4628      	mov	r0, r5
 8019eee:	f7ff f92d 	bl	801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019ef2:	e7e2      	b.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019ef4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019ef8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019efc:	4293      	cmp	r3, r2
 8019efe:	dd12      	ble.n	8019f26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8019f00:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019f04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019f08:	1a9b      	subs	r3, r3, r2
 8019f0a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8019f0e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8019f12:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019f16:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019f1a:	4642      	mov	r2, r8
 8019f1c:	4633      	mov	r3, r6
 8019f1e:	a902      	add	r1, sp, #8
 8019f20:	4628      	mov	r0, r5
 8019f22:	f7ff f913 	bl	801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019f26:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019f2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f2e:	4293      	cmp	r3, r2
 8019f30:	dd12      	ble.n	8019f58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8019f32:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019f36:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8019f3a:	1a9b      	subs	r3, r3, r2
 8019f3c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019f40:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019f44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f48:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019f4c:	23ff      	movs	r3, #255	; 0xff
 8019f4e:	4642      	mov	r2, r8
 8019f50:	a902      	add	r1, sp, #8
 8019f52:	4628      	mov	r0, r5
 8019f54:	f7ff f8fa 	bl	801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019f58:	463b      	mov	r3, r7
 8019f5a:	aa02      	add	r2, sp, #8
 8019f5c:	4629      	mov	r1, r5
 8019f5e:	4650      	mov	r0, sl
 8019f60:	f7ff f9da 	bl	8019318 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019f64:	88a2      	ldrh	r2, [r4, #4]
 8019f66:	8823      	ldrh	r3, [r4, #0]
 8019f68:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019f6c:	4413      	add	r3, r2
 8019f6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019f72:	b29b      	uxth	r3, r3
 8019f74:	440a      	add	r2, r1
 8019f76:	b292      	uxth	r2, r2
 8019f78:	b211      	sxth	r1, r2
 8019f7a:	b218      	sxth	r0, r3
 8019f7c:	4288      	cmp	r0, r1
 8019f7e:	dd12      	ble.n	8019fa6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8019f80:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8019f84:	1a9b      	subs	r3, r3, r2
 8019f86:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8019f8a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019f8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f92:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019f96:	23ff      	movs	r3, #255	; 0xff
 8019f98:	4642      	mov	r2, r8
 8019f9a:	a902      	add	r1, sp, #8
 8019f9c:	4628      	mov	r0, r5
 8019f9e:	f8ad 601a 	strh.w	r6, [sp, #26]
 8019fa2:	f7ff f8d3 	bl	801914c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019fa6:	88e2      	ldrh	r2, [r4, #6]
 8019fa8:	8863      	ldrh	r3, [r4, #2]
 8019faa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019fae:	4413      	add	r3, r2
 8019fb0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	440a      	add	r2, r1
 8019fb8:	b292      	uxth	r2, r2
 8019fba:	b211      	sxth	r1, r2
 8019fbc:	b218      	sxth	r0, r3
 8019fbe:	4288      	cmp	r0, r1
 8019fc0:	f77f af7b 	ble.w	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019fc4:	f9b4 6000 	ldrsh.w	r6, [r4]
 8019fc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019fcc:	1a9b      	subs	r3, r3, r2
 8019fce:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019fd2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019fd6:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019fda:	f8ad 001c 	strh.w	r0, [sp, #28]
 8019fde:	23ff      	movs	r3, #255	; 0xff
 8019fe0:	4642      	mov	r2, r8
 8019fe2:	e782      	b.n	8019eea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8019fe4:	4633      	mov	r3, r6
 8019fe6:	4622      	mov	r2, r4
 8019fe8:	a902      	add	r1, sp, #8
 8019fea:	4628      	mov	r0, r5
 8019fec:	f7ff fa04 	bl	80193f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8019ff0:	e763      	b.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019ff2:	9600      	str	r6, [sp, #0]
 8019ff4:	4623      	mov	r3, r4
 8019ff6:	aa02      	add	r2, sp, #8
 8019ff8:	4649      	mov	r1, r9
 8019ffa:	4628      	mov	r0, r5
 8019ffc:	f7ff fddc 	bl	8019bb8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a000:	e75b      	b.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a002:	4638      	mov	r0, r7
 801a004:	f7fc f846 	bl	8016094 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a008:	b950      	cbnz	r0, 801a020 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801a00a:	e9cd 6000 	strd	r6, r0, [sp]
 801a00e:	f8da 3000 	ldr.w	r3, [sl]
 801a012:	aa02      	add	r2, sp, #8
 801a014:	68de      	ldr	r6, [r3, #12]
 801a016:	4629      	mov	r1, r5
 801a018:	4623      	mov	r3, r4
 801a01a:	4650      	mov	r0, sl
 801a01c:	47b0      	blx	r6
 801a01e:	e74c      	b.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a020:	f10d 0818 	add.w	r8, sp, #24
 801a024:	4639      	mov	r1, r7
 801a026:	4640      	mov	r0, r8
 801a028:	af04      	add	r7, sp, #16
 801a02a:	f7fb ffe7 	bl	8015ffc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a02e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a032:	e887 0003 	stmia.w	r7, {r0, r1}
 801a036:	4638      	mov	r0, r7
 801a038:	4621      	mov	r1, r4
 801a03a:	f7f6 fc8d 	bl	8010958 <_ZN8touchgfx4RectaNERKS0_>
 801a03e:	4638      	mov	r0, r7
 801a040:	f7f6 fccd 	bl	80109de <_ZNK8touchgfx4Rect7isEmptyEv>
 801a044:	b138      	cbz	r0, 801a056 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801a046:	4623      	mov	r3, r4
 801a048:	9600      	str	r6, [sp, #0]
 801a04a:	aa02      	add	r2, sp, #8
 801a04c:	4649      	mov	r1, r9
 801a04e:	4628      	mov	r0, r5
 801a050:	f7ff fdca 	bl	8019be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a054:	e731      	b.n	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a056:	e9cd 6000 	strd	r6, r0, [sp]
 801a05a:	f8da 3000 	ldr.w	r3, [sl]
 801a05e:	aa02      	add	r2, sp, #8
 801a060:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801a064:	4629      	mov	r1, r5
 801a066:	463b      	mov	r3, r7
 801a068:	4650      	mov	r0, sl
 801a06a:	47d8      	blx	fp
 801a06c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a070:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a074:	4293      	cmp	r3, r2
 801a076:	dd13      	ble.n	801a0a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801a078:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a07c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a080:	1a9b      	subs	r3, r3, r2
 801a082:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a086:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a08a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a08e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a092:	9600      	str	r6, [sp, #0]
 801a094:	4643      	mov	r3, r8
 801a096:	aa02      	add	r2, sp, #8
 801a098:	4649      	mov	r1, r9
 801a09a:	4628      	mov	r0, r5
 801a09c:	f7ff fda4 	bl	8019be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a0a0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a0a4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a0a8:	4293      	cmp	r3, r2
 801a0aa:	dd13      	ble.n	801a0d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801a0ac:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a0b0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a0b4:	1a9b      	subs	r3, r3, r2
 801a0b6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a0ba:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a0be:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0c2:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a0c6:	9600      	str	r6, [sp, #0]
 801a0c8:	4643      	mov	r3, r8
 801a0ca:	aa02      	add	r2, sp, #8
 801a0cc:	4649      	mov	r1, r9
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f7ff fd8a 	bl	8019be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a0d4:	88a2      	ldrh	r2, [r4, #4]
 801a0d6:	8823      	ldrh	r3, [r4, #0]
 801a0d8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a0dc:	4413      	add	r3, r2
 801a0de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	440a      	add	r2, r1
 801a0e6:	b292      	uxth	r2, r2
 801a0e8:	b211      	sxth	r1, r2
 801a0ea:	b218      	sxth	r0, r3
 801a0ec:	4288      	cmp	r0, r1
 801a0ee:	dd13      	ble.n	801a118 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801a0f0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a0f4:	1a9b      	subs	r3, r3, r2
 801a0f6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801a0fa:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a0fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a102:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a106:	9600      	str	r6, [sp, #0]
 801a108:	4643      	mov	r3, r8
 801a10a:	aa02      	add	r2, sp, #8
 801a10c:	4649      	mov	r1, r9
 801a10e:	4628      	mov	r0, r5
 801a110:	f8ad 701a 	strh.w	r7, [sp, #26]
 801a114:	f7ff fd68 	bl	8019be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a118:	88e2      	ldrh	r2, [r4, #6]
 801a11a:	8863      	ldrh	r3, [r4, #2]
 801a11c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801a120:	4413      	add	r3, r2
 801a122:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801a126:	b29b      	uxth	r3, r3
 801a128:	440a      	add	r2, r1
 801a12a:	b292      	uxth	r2, r2
 801a12c:	b211      	sxth	r1, r2
 801a12e:	b218      	sxth	r0, r3
 801a130:	4288      	cmp	r0, r1
 801a132:	f77f aec2 	ble.w	8019eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a136:	f9b4 7000 	ldrsh.w	r7, [r4]
 801a13a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a13e:	1a9b      	subs	r3, r3, r2
 801a140:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a144:	f8ad 7018 	strh.w	r7, [sp, #24]
 801a148:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a14c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801a150:	9600      	str	r6, [sp, #0]
 801a152:	4643      	mov	r3, r8
 801a154:	e779      	b.n	801a04a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801a156:	bf00      	nop
 801a158:	2001fda4 	.word	0x2001fda4

0801a15c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801a15c:	b180      	cbz	r0, 801a180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801a15e:	2903      	cmp	r1, #3
 801a160:	d81c      	bhi.n	801a19c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801a162:	e8df f001 	tbb	[pc, r1]
 801a166:	1d02      	.short	0x1d02
 801a168:	1f08      	.short	0x1f08
 801a16a:	4b10      	ldr	r3, [pc, #64]	; (801a1ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801a16c:	8818      	ldrh	r0, [r3, #0]
 801a16e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a172:	4240      	negs	r0, r0
 801a174:	4770      	bx	lr
 801a176:	4b0d      	ldr	r3, [pc, #52]	; (801a1ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801a178:	8818      	ldrh	r0, [r3, #0]
 801a17a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a17e:	4770      	bx	lr
 801a180:	2903      	cmp	r1, #3
 801a182:	d80b      	bhi.n	801a19c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801a184:	a301      	add	r3, pc, #4	; (adr r3, 801a18c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801a186:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801a18a:	bf00      	nop
 801a18c:	0801a1a1 	.word	0x0801a1a1
 801a190:	0801a177 	.word	0x0801a177
 801a194:	0801a1a5 	.word	0x0801a1a5
 801a198:	0801a16b 	.word	0x0801a16b
 801a19c:	2000      	movs	r0, #0
 801a19e:	4770      	bx	lr
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	4770      	bx	lr
 801a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1a8:	4770      	bx	lr
 801a1aa:	bf00      	nop
 801a1ac:	2001fd9e 	.word	0x2001fd9e

0801a1b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801a1b0:	b180      	cbz	r0, 801a1d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801a1b2:	2903      	cmp	r1, #3
 801a1b4:	d81c      	bhi.n	801a1f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801a1b6:	e8df f001 	tbb	[pc, r1]
 801a1ba:	021d      	.short	0x021d
 801a1bc:	071f      	.short	0x071f
 801a1be:	4b10      	ldr	r3, [pc, #64]	; (801a200 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801a1c0:	8818      	ldrh	r0, [r3, #0]
 801a1c2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a1c6:	4770      	bx	lr
 801a1c8:	4b0d      	ldr	r3, [pc, #52]	; (801a200 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801a1ca:	8818      	ldrh	r0, [r3, #0]
 801a1cc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a1d0:	4240      	negs	r0, r0
 801a1d2:	4770      	bx	lr
 801a1d4:	2903      	cmp	r1, #3
 801a1d6:	d80b      	bhi.n	801a1f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801a1d8:	a301      	add	r3, pc, #4	; (adr r3, 801a1e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801a1da:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801a1de:	bf00      	nop
 801a1e0:	0801a1bf 	.word	0x0801a1bf
 801a1e4:	0801a1f9 	.word	0x0801a1f9
 801a1e8:	0801a1c9 	.word	0x0801a1c9
 801a1ec:	0801a1f5 	.word	0x0801a1f5
 801a1f0:	2000      	movs	r0, #0
 801a1f2:	4770      	bx	lr
 801a1f4:	2001      	movs	r0, #1
 801a1f6:	4770      	bx	lr
 801a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop
 801a200:	2001fd9e 	.word	0x2001fd9e

0801a204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a208:	b099      	sub	sp, #100	; 0x64
 801a20a:	910b      	str	r1, [sp, #44]	; 0x2c
 801a20c:	a914      	add	r1, sp, #80	; 0x50
 801a20e:	e881 000c 	stmia.w	r1, {r2, r3}
 801a212:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801a216:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801a21a:	f891 900d 	ldrb.w	r9, [r1, #13]
 801a21e:	9309      	str	r3, [sp, #36]	; 0x24
 801a220:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801a224:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801a228:	9310      	str	r3, [sp, #64]	; 0x40
 801a22a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801a22e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801a232:	930c      	str	r3, [sp, #48]	; 0x30
 801a234:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801a238:	798f      	ldrb	r7, [r1, #6]
 801a23a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801a23e:	431f      	orrs	r7, r3
 801a240:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801a244:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801a248:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801a24c:	f000 8194 	beq.w	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a250:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801a254:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a258:	f891 9007 	ldrb.w	r9, [r1, #7]
 801a25c:	ea59 0903 	orrs.w	r9, r9, r3
 801a260:	f000 818a 	beq.w	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a264:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801a268:	b29b      	uxth	r3, r3
 801a26a:	2d00      	cmp	r5, #0
 801a26c:	f000 812f 	beq.w	801a4ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801a270:	1aed      	subs	r5, r5, r3
 801a272:	b2ad      	uxth	r5, r5
 801a274:	042b      	lsls	r3, r5, #16
 801a276:	d502      	bpl.n	801a27e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801a278:	1b64      	subs	r4, r4, r5
 801a27a:	2500      	movs	r5, #0
 801a27c:	b224      	sxth	r4, r4
 801a27e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a282:	a814      	add	r0, sp, #80	; 0x50
 801a284:	428c      	cmp	r4, r1
 801a286:	b28b      	uxth	r3, r1
 801a288:	bfbf      	itttt	lt
 801a28a:	18ed      	addlt	r5, r5, r3
 801a28c:	1b2c      	sublt	r4, r5, r4
 801a28e:	b2a5      	uxthlt	r5, r4
 801a290:	460c      	movlt	r4, r1
 801a292:	8891      	ldrh	r1, [r2, #4]
 801a294:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801a298:	440b      	add	r3, r1
 801a29a:	b21b      	sxth	r3, r3
 801a29c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a29e:	88d3      	ldrh	r3, [r2, #6]
 801a2a0:	8852      	ldrh	r2, [r2, #2]
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	4413      	add	r3, r2
 801a2a6:	b21b      	sxth	r3, r3
 801a2a8:	930d      	str	r3, [sp, #52]	; 0x34
 801a2aa:	4bbd      	ldr	r3, [pc, #756]	; (801a5a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801a2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2ae:	f893 b000 	ldrb.w	fp, [r3]
 801a2b2:	f10b 3cff 	add.w	ip, fp, #4294967295
 801a2b6:	f1dc 0300 	rsbs	r3, ip, #0
 801a2ba:	eb43 030c 	adc.w	r3, r3, ip
 801a2be:	930e      	str	r3, [sp, #56]	; 0x38
 801a2c0:	4653      	mov	r3, sl
 801a2c2:	f7f8 feab 	bl	801301c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801a2c6:	4621      	mov	r1, r4
 801a2c8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801a2cc:	4653      	mov	r3, sl
 801a2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2d0:	a814      	add	r0, sp, #80	; 0x50
 801a2d2:	f7f8 fec0 	bl	8013056 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801a2d6:	a918      	add	r1, sp, #96	; 0x60
 801a2d8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801a2dc:	a817      	add	r0, sp, #92	; 0x5c
 801a2de:	f7f8 ffe1 	bl	80132a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801a2e2:	f1ba 0f00 	cmp.w	sl, #0
 801a2e6:	f040 80f5 	bne.w	801a4d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801a2ea:	f1bb 0f01 	cmp.w	fp, #1
 801a2ee:	f040 80f9 	bne.w	801a4e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801a2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	f040 8144 	bne.w	801a582 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801a2fa:	b2ba      	uxth	r2, r7
 801a2fc:	b905      	cbnz	r5, 801a300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801a2fe:	b16e      	cbz	r6, 801a31c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801a300:	4631      	mov	r1, r6
 801a302:	fb06 5302 	mla	r3, r6, r2, r5
 801a306:	fb08 f303 	mul.w	r3, r8, r3
 801a30a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801a30c:	f003 0607 	and.w	r6, r3, #7
 801a310:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801a314:	9328      	str	r3, [sp, #160]	; 0xa0
 801a316:	eba9 0301 	sub.w	r3, r9, r1
 801a31a:	930a      	str	r3, [sp, #40]	; 0x28
 801a31c:	4651      	mov	r1, sl
 801a31e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a320:	f7ff ff1c 	bl	801a15c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801a324:	4681      	mov	r9, r0
 801a326:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a328:	f7ff ff42 	bl	801a1b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801a32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a330:	4683      	mov	fp, r0
 801a332:	eba3 0a01 	sub.w	sl, r3, r1
 801a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a338:	459a      	cmp	sl, r3
 801a33a:	bfa8      	it	ge
 801a33c:	469a      	movge	sl, r3
 801a33e:	f1ba 0f00 	cmp.w	sl, #0
 801a342:	f340 8119 	ble.w	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a348:	1b64      	subs	r4, r4, r5
 801a34a:	1b1c      	subs	r4, r3, r4
 801a34c:	42bc      	cmp	r4, r7
 801a34e:	bfd4      	ite	le
 801a350:	ebc5 0504 	rsble	r5, r5, r4
 801a354:	ebc5 0507 	rsbgt	r5, r5, r7
 801a358:	2d00      	cmp	r5, #0
 801a35a:	f340 810d 	ble.w	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a35e:	1b52      	subs	r2, r2, r5
 801a360:	fb08 f302 	mul.w	r3, r8, r2
 801a364:	930f      	str	r3, [sp, #60]	; 0x3c
 801a366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a368:	2b00      	cmp	r3, #0
 801a36a:	f040 8115 	bne.w	801a598 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801a36e:	4b8d      	ldr	r3, [pc, #564]	; (801a5a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801a370:	6818      	ldr	r0, [r3, #0]
 801a372:	6803      	ldr	r3, [r0, #0]
 801a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a376:	4798      	blx	r3
 801a378:	2301      	movs	r3, #1
 801a37a:	fa03 f308 	lsl.w	r3, r3, r8
 801a37e:	4a8a      	ldr	r2, [pc, #552]	; (801a5a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801a380:	3b01      	subs	r3, #1
 801a382:	b2db      	uxtb	r3, r3
 801a384:	8811      	ldrh	r1, [r2, #0]
 801a386:	930e      	str	r3, [sp, #56]	; 0x38
 801a388:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a38c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a390:	fb01 2303 	mla	r3, r1, r3, r2
 801a394:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a398:	930a      	str	r3, [sp, #40]	; 0x28
 801a39a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a39c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801a3a0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a3a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3a4:	0a19      	lsrs	r1, r3, #8
 801a3a6:	b2cb      	uxtb	r3, r1
 801a3a8:	9312      	str	r3, [sp, #72]	; 0x48
 801a3aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	9311      	str	r3, [sp, #68]	; 0x44
 801a3b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3b2:	095a      	lsrs	r2, r3, #5
 801a3b4:	4b7d      	ldr	r3, [pc, #500]	; (801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801a3b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a3ba:	400b      	ands	r3, r1
 801a3bc:	4313      	orrs	r3, r2
 801a3be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a3c0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a3c4:	4313      	orrs	r3, r2
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	9310      	str	r3, [sp, #64]	; 0x40
 801a3ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a3cc:	781a      	ldrb	r2, [r3, #0]
 801a3ce:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801a3d2:	fb05 b919 	mls	r9, r5, r9, fp
 801a3d6:	fb03 fb05 	mul.w	fp, r3, r5
 801a3da:	4132      	asrs	r2, r6
 801a3dc:	b2d2      	uxtb	r2, r2
 801a3de:	930d      	str	r3, [sp, #52]	; 0x34
 801a3e0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801a3e4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801a3e8:	f0c0 80f3 	bcc.w	801a5d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801a3ec:	46ae      	mov	lr, r5
 801a3ee:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801a3f2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801a3f6:	f0c0 80db 	bcc.w	801a5b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801a3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3fc:	4013      	ands	r3, r2
 801a3fe:	d055      	beq.n	801a4ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801a400:	20ff      	movs	r0, #255	; 0xff
 801a402:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a404:	fb90 f1f1 	sdiv	r1, r0, r1
 801a408:	434b      	muls	r3, r1
 801a40a:	2bfe      	cmp	r3, #254	; 0xfe
 801a40c:	dd03      	ble.n	801a416 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801a40e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a410:	4281      	cmp	r1, r0
 801a412:	f000 80c3 	beq.w	801a59c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801a416:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a418:	f8bc 4000 	ldrh.w	r4, [ip]
 801a41c:	fb11 f303 	smulbb	r3, r1, r3
 801a420:	b29b      	uxth	r3, r3
 801a422:	1c59      	adds	r1, r3, #1
 801a424:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a428:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a42c:	b29f      	uxth	r7, r3
 801a42e:	43db      	mvns	r3, r3
 801a430:	b2db      	uxtb	r3, r3
 801a432:	9309      	str	r3, [sp, #36]	; 0x24
 801a434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a436:	1220      	asrs	r0, r4, #8
 801a438:	fb13 f907 	smulbb	r9, r3, r7
 801a43c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a442:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a446:	fb00 9003 	mla	r0, r0, r3, r9
 801a44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a44c:	10e1      	asrs	r1, r4, #3
 801a44e:	fb13 f907 	smulbb	r9, r3, r7
 801a452:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a458:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801a45c:	fb01 9103 	mla	r1, r1, r3, r9
 801a460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a462:	00e4      	lsls	r4, r4, #3
 801a464:	fb13 f707 	smulbb	r7, r3, r7
 801a468:	b2e4      	uxtb	r4, r4
 801a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a46c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a470:	fb04 7403 	mla	r4, r4, r3, r7
 801a474:	b280      	uxth	r0, r0
 801a476:	b2a4      	uxth	r4, r4
 801a478:	1c43      	adds	r3, r0, #1
 801a47a:	f104 0901 	add.w	r9, r4, #1
 801a47e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a482:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801a486:	b289      	uxth	r1, r1
 801a488:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801a48c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a490:	ea49 0000 	orr.w	r0, r9, r0
 801a494:	f101 0901 	add.w	r9, r1, #1
 801a498:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801a49c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a4a0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a4a4:	ea40 0009 	orr.w	r0, r0, r9
 801a4a8:	f8ac 0000 	strh.w	r0, [ip]
 801a4ac:	4446      	add	r6, r8
 801a4ae:	b2b6      	uxth	r6, r6
 801a4b0:	2e07      	cmp	r6, #7
 801a4b2:	bf89      	itett	hi
 801a4b4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801a4b6:	fa42 f208 	asrls.w	r2, r2, r8
 801a4ba:	785a      	ldrbhi	r2, [r3, #1]
 801a4bc:	3301      	addhi	r3, #1
 801a4be:	bf88      	it	hi
 801a4c0:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801a4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4c4:	bf94      	ite	ls
 801a4c6:	b2d2      	uxtbls	r2, r2
 801a4c8:	2600      	movhi	r6, #0
 801a4ca:	449c      	add	ip, r3
 801a4cc:	e791      	b.n	801a3f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801a4ce:	441c      	add	r4, r3
 801a4d0:	b224      	sxth	r4, r4
 801a4d2:	e6d4      	b.n	801a27e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801a4d4:	f1ba 0f01 	cmp.w	sl, #1
 801a4d8:	f47f af0b 	bne.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a4dc:	f1bb 0f01 	cmp.w	fp, #1
 801a4e0:	f47f af07 	bne.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a4e4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801a5a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801a4e8:	f8db 0000 	ldr.w	r0, [fp]
 801a4ec:	6803      	ldr	r3, [r0, #0]
 801a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4f0:	4798      	blx	r3
 801a4f2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801a4f6:	465a      	mov	r2, fp
 801a4f8:	d006      	beq.n	801a508 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801a4fa:	f1b8 0f04 	cmp.w	r8, #4
 801a4fe:	d13e      	bne.n	801a57e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801a500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a502:	3300      	adds	r3, #0
 801a504:	bf18      	it	ne
 801a506:	2301      	movne	r3, #1
 801a508:	0580      	lsls	r0, r0, #22
 801a50a:	d56b      	bpl.n	801a5e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801a50c:	f1b8 0f08 	cmp.w	r8, #8
 801a510:	d168      	bne.n	801a5e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801a512:	2b00      	cmp	r3, #0
 801a514:	bf0c      	ite	eq
 801a516:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801a51a:	f44f 7180 	movne.w	r1, #256	; 0x100
 801a51e:	2d00      	cmp	r5, #0
 801a520:	f47f aee7 	bne.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a524:	2e00      	cmp	r6, #0
 801a526:	f47f aee4 	bne.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a52a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a52c:	19e3      	adds	r3, r4, r7
 801a52e:	4283      	cmp	r3, r0
 801a530:	f73f aedf 	bgt.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a536:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a538:	444b      	add	r3, r9
 801a53a:	4283      	cmp	r3, r0
 801a53c:	f73f aed9 	bgt.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a540:	2500      	movs	r5, #0
 801a542:	6810      	ldr	r0, [r2, #0]
 801a544:	b2bf      	uxth	r7, r7
 801a546:	6804      	ldr	r4, [r0, #0]
 801a548:	f1b8 0f08 	cmp.w	r8, #8
 801a54c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801a550:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a552:	bf1c      	itt	ne
 801a554:	3701      	addne	r7, #1
 801a556:	f027 0701 	bicne.w	r7, r7, #1
 801a55a:	9104      	str	r1, [sp, #16]
 801a55c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a55e:	bf18      	it	ne
 801a560:	b2bf      	uxthne	r7, r7
 801a562:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801a566:	e9cd 7900 	strd	r7, r9, [sp]
 801a56a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801a56e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801a572:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801a574:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a576:	47a0      	blx	r4
 801a578:	b019      	add	sp, #100	; 0x64
 801a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a57e:	2300      	movs	r3, #0
 801a580:	e7c2      	b.n	801a508 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801a582:	2208      	movs	r2, #8
 801a584:	fb92 f3f8 	sdiv	r3, r2, r8
 801a588:	1e5a      	subs	r2, r3, #1
 801a58a:	443a      	add	r2, r7
 801a58c:	fb92 f2f3 	sdiv	r2, r2, r3
 801a590:	fb12 f203 	smulbb	r2, r2, r3
 801a594:	b292      	uxth	r2, r2
 801a596:	e6b1      	b.n	801a2fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801a598:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a59a:	e6ed      	b.n	801a378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801a59c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a59e:	e783      	b.n	801a4a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801a5a0:	2001fd9c 	.word	0x2001fd9c
 801a5a4:	2001fda4 	.word	0x2001fda4
 801a5a8:	2001fd9e 	.word	0x2001fd9e
 801a5ac:	00fff800 	.word	0x00fff800
 801a5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5b2:	b153      	cbz	r3, 801a5ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801a5b4:	441e      	add	r6, r3
 801a5b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5b8:	b2b6      	uxth	r6, r6
 801a5ba:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801a5be:	781a      	ldrb	r2, [r3, #0]
 801a5c0:	f006 0607 	and.w	r6, r6, #7
 801a5c4:	4132      	asrs	r2, r6
 801a5c6:	9328      	str	r3, [sp, #160]	; 0xa0
 801a5c8:	b2d2      	uxtb	r2, r2
 801a5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5cc:	445b      	add	r3, fp
 801a5ce:	930a      	str	r3, [sp, #40]	; 0x28
 801a5d0:	e708      	b.n	801a3e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801a5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d1cf      	bne.n	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a5d8:	4b05      	ldr	r3, [pc, #20]	; (801a5f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801a5da:	6818      	ldr	r0, [r3, #0]
 801a5dc:	6803      	ldr	r3, [r0, #0]
 801a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5e0:	4798      	blx	r3
 801a5e2:	e7c9      	b.n	801a578 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	f43f ae84 	beq.w	801a2f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a5ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a5ee:	e796      	b.n	801a51e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801a5f0:	2001fda4 	.word	0x2001fda4

0801a5f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801a5f4:	b538      	push	{r3, r4, r5, lr}
 801a5f6:	4605      	mov	r5, r0
 801a5f8:	4c13      	ldr	r4, [pc, #76]	; (801a648 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801a5fa:	e8d4 3f8f 	ldab	r3, [r4]
 801a5fe:	07da      	lsls	r2, r3, #31
 801a600:	d40b      	bmi.n	801a61a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801a602:	4620      	mov	r0, r4
 801a604:	f007 fa45 	bl	8021a92 <__cxa_guard_acquire>
 801a608:	b138      	cbz	r0, 801a61a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801a60a:	4620      	mov	r0, r4
 801a60c:	f007 fa4d 	bl	8021aaa <__cxa_guard_release>
 801a610:	4a0e      	ldr	r2, [pc, #56]	; (801a64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801a612:	490f      	ldr	r1, [pc, #60]	; (801a650 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801a614:	480f      	ldr	r0, [pc, #60]	; (801a654 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801a616:	f007 fa35 	bl	8021a84 <__aeabi_atexit>
 801a61a:	4c0f      	ldr	r4, [pc, #60]	; (801a658 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801a61c:	e8d4 3f8f 	ldab	r3, [r4]
 801a620:	07db      	lsls	r3, r3, #31
 801a622:	d40b      	bmi.n	801a63c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801a624:	4620      	mov	r0, r4
 801a626:	f007 fa34 	bl	8021a92 <__cxa_guard_acquire>
 801a62a:	b138      	cbz	r0, 801a63c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801a62c:	4620      	mov	r0, r4
 801a62e:	f007 fa3c 	bl	8021aaa <__cxa_guard_release>
 801a632:	4a06      	ldr	r2, [pc, #24]	; (801a64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801a634:	4909      	ldr	r1, [pc, #36]	; (801a65c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801a636:	480a      	ldr	r0, [pc, #40]	; (801a660 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801a638:	f007 fa24 	bl	8021a84 <__aeabi_atexit>
 801a63c:	4b05      	ldr	r3, [pc, #20]	; (801a654 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801a63e:	612b      	str	r3, [r5, #16]
 801a640:	4b07      	ldr	r3, [pc, #28]	; (801a660 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801a642:	616b      	str	r3, [r5, #20]
 801a644:	bd38      	pop	{r3, r4, r5, pc}
 801a646:	bf00      	nop
 801a648:	2001fe70 	.word	0x2001fe70
 801a64c:	20000000 	.word	0x20000000
 801a650:	0801881b 	.word	0x0801881b
 801a654:	20000060 	.word	0x20000060
 801a658:	2001fe74 	.word	0x2001fe74
 801a65c:	08018819 	.word	0x08018819
 801a660:	20000064 	.word	0x20000064

0801a664 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801a664:	b538      	push	{r3, r4, r5, lr}
 801a666:	4605      	mov	r5, r0
 801a668:	4c13      	ldr	r4, [pc, #76]	; (801a6b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801a66a:	e8d4 3f8f 	ldab	r3, [r4]
 801a66e:	07da      	lsls	r2, r3, #31
 801a670:	d40b      	bmi.n	801a68a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801a672:	4620      	mov	r0, r4
 801a674:	f007 fa0d 	bl	8021a92 <__cxa_guard_acquire>
 801a678:	b138      	cbz	r0, 801a68a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801a67a:	4620      	mov	r0, r4
 801a67c:	f007 fa15 	bl	8021aaa <__cxa_guard_release>
 801a680:	4a0e      	ldr	r2, [pc, #56]	; (801a6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801a682:	490f      	ldr	r1, [pc, #60]	; (801a6c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801a684:	480f      	ldr	r0, [pc, #60]	; (801a6c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801a686:	f007 f9fd 	bl	8021a84 <__aeabi_atexit>
 801a68a:	4c0f      	ldr	r4, [pc, #60]	; (801a6c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801a68c:	e8d4 3f8f 	ldab	r3, [r4]
 801a690:	07db      	lsls	r3, r3, #31
 801a692:	d40b      	bmi.n	801a6ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801a694:	4620      	mov	r0, r4
 801a696:	f007 f9fc 	bl	8021a92 <__cxa_guard_acquire>
 801a69a:	b138      	cbz	r0, 801a6ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801a69c:	4620      	mov	r0, r4
 801a69e:	f007 fa04 	bl	8021aaa <__cxa_guard_release>
 801a6a2:	4a06      	ldr	r2, [pc, #24]	; (801a6bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801a6a4:	4909      	ldr	r1, [pc, #36]	; (801a6cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801a6a6:	480a      	ldr	r0, [pc, #40]	; (801a6d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801a6a8:	f007 f9ec 	bl	8021a84 <__aeabi_atexit>
 801a6ac:	4b05      	ldr	r3, [pc, #20]	; (801a6c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801a6ae:	60ab      	str	r3, [r5, #8]
 801a6b0:	4b07      	ldr	r3, [pc, #28]	; (801a6d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801a6b2:	60eb      	str	r3, [r5, #12]
 801a6b4:	bd38      	pop	{r3, r4, r5, pc}
 801a6b6:	bf00      	nop
 801a6b8:	2001fe48 	.word	0x2001fe48
 801a6bc:	20000000 	.word	0x20000000
 801a6c0:	0801881f 	.word	0x0801881f
 801a6c4:	20000038 	.word	0x20000038
 801a6c8:	2001fe4c 	.word	0x2001fe4c
 801a6cc:	0801881d 	.word	0x0801881d
 801a6d0:	2000003c 	.word	0x2000003c

0801a6d4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801a6d4:	b510      	push	{r4, lr}
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	f7ff ff8c 	bl	801a5f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801a6dc:	4620      	mov	r0, r4
 801a6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6e2:	f7ff bfbf 	b.w	801a664 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801a6e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801a6e8:	b538      	push	{r3, r4, r5, lr}
 801a6ea:	4605      	mov	r5, r0
 801a6ec:	4c13      	ldr	r4, [pc, #76]	; (801a73c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801a6ee:	e8d4 3f8f 	ldab	r3, [r4]
 801a6f2:	07da      	lsls	r2, r3, #31
 801a6f4:	d40b      	bmi.n	801a70e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801a6f6:	4620      	mov	r0, r4
 801a6f8:	f007 f9cb 	bl	8021a92 <__cxa_guard_acquire>
 801a6fc:	b138      	cbz	r0, 801a70e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801a6fe:	4620      	mov	r0, r4
 801a700:	f007 f9d3 	bl	8021aaa <__cxa_guard_release>
 801a704:	4a0e      	ldr	r2, [pc, #56]	; (801a740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801a706:	490f      	ldr	r1, [pc, #60]	; (801a744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801a708:	480f      	ldr	r0, [pc, #60]	; (801a748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801a70a:	f007 f9bb 	bl	8021a84 <__aeabi_atexit>
 801a70e:	4c0f      	ldr	r4, [pc, #60]	; (801a74c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801a710:	e8d4 3f8f 	ldab	r3, [r4]
 801a714:	07db      	lsls	r3, r3, #31
 801a716:	d40b      	bmi.n	801a730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801a718:	4620      	mov	r0, r4
 801a71a:	f007 f9ba 	bl	8021a92 <__cxa_guard_acquire>
 801a71e:	b138      	cbz	r0, 801a730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801a720:	4620      	mov	r0, r4
 801a722:	f007 f9c2 	bl	8021aaa <__cxa_guard_release>
 801a726:	4a06      	ldr	r2, [pc, #24]	; (801a740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801a728:	4909      	ldr	r1, [pc, #36]	; (801a750 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801a72a:	480a      	ldr	r0, [pc, #40]	; (801a754 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801a72c:	f007 f9aa 	bl	8021a84 <__aeabi_atexit>
 801a730:	4b05      	ldr	r3, [pc, #20]	; (801a748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801a732:	622b      	str	r3, [r5, #32]
 801a734:	4b07      	ldr	r3, [pc, #28]	; (801a754 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801a736:	626b      	str	r3, [r5, #36]	; 0x24
 801a738:	bd38      	pop	{r3, r4, r5, pc}
 801a73a:	bf00      	nop
 801a73c:	2001fe78 	.word	0x2001fe78
 801a740:	20000000 	.word	0x20000000
 801a744:	08018813 	.word	0x08018813
 801a748:	20000068 	.word	0x20000068
 801a74c:	2001fe7c 	.word	0x2001fe7c
 801a750:	08018811 	.word	0x08018811
 801a754:	2000006c 	.word	0x2000006c

0801a758 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801a758:	b538      	push	{r3, r4, r5, lr}
 801a75a:	4605      	mov	r5, r0
 801a75c:	4c13      	ldr	r4, [pc, #76]	; (801a7ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801a75e:	e8d4 3f8f 	ldab	r3, [r4]
 801a762:	07da      	lsls	r2, r3, #31
 801a764:	d40b      	bmi.n	801a77e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801a766:	4620      	mov	r0, r4
 801a768:	f007 f993 	bl	8021a92 <__cxa_guard_acquire>
 801a76c:	b138      	cbz	r0, 801a77e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801a76e:	4620      	mov	r0, r4
 801a770:	f007 f99b 	bl	8021aaa <__cxa_guard_release>
 801a774:	4a0e      	ldr	r2, [pc, #56]	; (801a7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801a776:	490f      	ldr	r1, [pc, #60]	; (801a7b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801a778:	480f      	ldr	r0, [pc, #60]	; (801a7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801a77a:	f007 f983 	bl	8021a84 <__aeabi_atexit>
 801a77e:	4c0f      	ldr	r4, [pc, #60]	; (801a7bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801a780:	e8d4 3f8f 	ldab	r3, [r4]
 801a784:	07db      	lsls	r3, r3, #31
 801a786:	d40b      	bmi.n	801a7a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801a788:	4620      	mov	r0, r4
 801a78a:	f007 f982 	bl	8021a92 <__cxa_guard_acquire>
 801a78e:	b138      	cbz	r0, 801a7a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801a790:	4620      	mov	r0, r4
 801a792:	f007 f98a 	bl	8021aaa <__cxa_guard_release>
 801a796:	4a06      	ldr	r2, [pc, #24]	; (801a7b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801a798:	4909      	ldr	r1, [pc, #36]	; (801a7c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801a79a:	480a      	ldr	r0, [pc, #40]	; (801a7c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801a79c:	f007 f972 	bl	8021a84 <__aeabi_atexit>
 801a7a0:	4b05      	ldr	r3, [pc, #20]	; (801a7b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801a7a2:	61ab      	str	r3, [r5, #24]
 801a7a4:	4b07      	ldr	r3, [pc, #28]	; (801a7c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801a7a6:	61eb      	str	r3, [r5, #28]
 801a7a8:	bd38      	pop	{r3, r4, r5, pc}
 801a7aa:	bf00      	nop
 801a7ac:	2001fe50 	.word	0x2001fe50
 801a7b0:	20000000 	.word	0x20000000
 801a7b4:	08018817 	.word	0x08018817
 801a7b8:	20000040 	.word	0x20000040
 801a7bc:	2001fe54 	.word	0x2001fe54
 801a7c0:	08018815 	.word	0x08018815
 801a7c4:	20000044 	.word	0x20000044

0801a7c8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801a7c8:	b510      	push	{r4, lr}
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	f7ff ff8c 	bl	801a6e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7d6:	f7ff bfbf 	b.w	801a758 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801a7dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801a7dc:	b538      	push	{r3, r4, r5, lr}
 801a7de:	4605      	mov	r5, r0
 801a7e0:	4c13      	ldr	r4, [pc, #76]	; (801a830 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801a7e2:	e8d4 3f8f 	ldab	r3, [r4]
 801a7e6:	07da      	lsls	r2, r3, #31
 801a7e8:	d40b      	bmi.n	801a802 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	f007 f951 	bl	8021a92 <__cxa_guard_acquire>
 801a7f0:	b138      	cbz	r0, 801a802 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801a7f2:	4620      	mov	r0, r4
 801a7f4:	f007 f959 	bl	8021aaa <__cxa_guard_release>
 801a7f8:	4a0e      	ldr	r2, [pc, #56]	; (801a834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a7fa:	490f      	ldr	r1, [pc, #60]	; (801a838 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a7fc:	480f      	ldr	r0, [pc, #60]	; (801a83c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a7fe:	f007 f941 	bl	8021a84 <__aeabi_atexit>
 801a802:	4c0f      	ldr	r4, [pc, #60]	; (801a840 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a804:	e8d4 3f8f 	ldab	r3, [r4]
 801a808:	07db      	lsls	r3, r3, #31
 801a80a:	d40b      	bmi.n	801a824 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801a80c:	4620      	mov	r0, r4
 801a80e:	f007 f940 	bl	8021a92 <__cxa_guard_acquire>
 801a812:	b138      	cbz	r0, 801a824 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801a814:	4620      	mov	r0, r4
 801a816:	f007 f948 	bl	8021aaa <__cxa_guard_release>
 801a81a:	4a06      	ldr	r2, [pc, #24]	; (801a834 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a81c:	4909      	ldr	r1, [pc, #36]	; (801a844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801a81e:	480a      	ldr	r0, [pc, #40]	; (801a848 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a820:	f007 f930 	bl	8021a84 <__aeabi_atexit>
 801a824:	4b05      	ldr	r3, [pc, #20]	; (801a83c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a826:	632b      	str	r3, [r5, #48]	; 0x30
 801a828:	4b07      	ldr	r3, [pc, #28]	; (801a848 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a82a:	636b      	str	r3, [r5, #52]	; 0x34
 801a82c:	bd38      	pop	{r3, r4, r5, pc}
 801a82e:	bf00      	nop
 801a830:	2001fe88 	.word	0x2001fe88
 801a834:	20000000 	.word	0x20000000
 801a838:	0801880b 	.word	0x0801880b
 801a83c:	20000078 	.word	0x20000078
 801a840:	2001fe8c 	.word	0x2001fe8c
 801a844:	08018809 	.word	0x08018809
 801a848:	2000007c 	.word	0x2000007c

0801a84c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801a84c:	b538      	push	{r3, r4, r5, lr}
 801a84e:	4605      	mov	r5, r0
 801a850:	4c13      	ldr	r4, [pc, #76]	; (801a8a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801a852:	e8d4 3f8f 	ldab	r3, [r4]
 801a856:	07da      	lsls	r2, r3, #31
 801a858:	d40b      	bmi.n	801a872 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801a85a:	4620      	mov	r0, r4
 801a85c:	f007 f919 	bl	8021a92 <__cxa_guard_acquire>
 801a860:	b138      	cbz	r0, 801a872 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801a862:	4620      	mov	r0, r4
 801a864:	f007 f921 	bl	8021aaa <__cxa_guard_release>
 801a868:	4a0e      	ldr	r2, [pc, #56]	; (801a8a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a86a:	490f      	ldr	r1, [pc, #60]	; (801a8a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a86c:	480f      	ldr	r0, [pc, #60]	; (801a8ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a86e:	f007 f909 	bl	8021a84 <__aeabi_atexit>
 801a872:	4c0f      	ldr	r4, [pc, #60]	; (801a8b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a874:	e8d4 3f8f 	ldab	r3, [r4]
 801a878:	07db      	lsls	r3, r3, #31
 801a87a:	d40b      	bmi.n	801a894 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801a87c:	4620      	mov	r0, r4
 801a87e:	f007 f908 	bl	8021a92 <__cxa_guard_acquire>
 801a882:	b138      	cbz	r0, 801a894 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801a884:	4620      	mov	r0, r4
 801a886:	f007 f910 	bl	8021aaa <__cxa_guard_release>
 801a88a:	4a06      	ldr	r2, [pc, #24]	; (801a8a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a88c:	4909      	ldr	r1, [pc, #36]	; (801a8b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801a88e:	480a      	ldr	r0, [pc, #40]	; (801a8b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a890:	f007 f8f8 	bl	8021a84 <__aeabi_atexit>
 801a894:	4b05      	ldr	r3, [pc, #20]	; (801a8ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a896:	62ab      	str	r3, [r5, #40]	; 0x28
 801a898:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a89a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801a89c:	bd38      	pop	{r3, r4, r5, pc}
 801a89e:	bf00      	nop
 801a8a0:	2001fe58 	.word	0x2001fe58
 801a8a4:	20000000 	.word	0x20000000
 801a8a8:	0801880f 	.word	0x0801880f
 801a8ac:	20000048 	.word	0x20000048
 801a8b0:	2001fe5c 	.word	0x2001fe5c
 801a8b4:	0801880d 	.word	0x0801880d
 801a8b8:	2000004c 	.word	0x2000004c

0801a8bc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801a8bc:	b510      	push	{r4, lr}
 801a8be:	4604      	mov	r4, r0
 801a8c0:	f7ff ff8c 	bl	801a7dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8ca:	f7ff bfbf 	b.w	801a84c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801a8d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801a8d0:	b538      	push	{r3, r4, r5, lr}
 801a8d2:	4605      	mov	r5, r0
 801a8d4:	4c13      	ldr	r4, [pc, #76]	; (801a924 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801a8d6:	e8d4 3f8f 	ldab	r3, [r4]
 801a8da:	07da      	lsls	r2, r3, #31
 801a8dc:	d40b      	bmi.n	801a8f6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f007 f8d7 	bl	8021a92 <__cxa_guard_acquire>
 801a8e4:	b138      	cbz	r0, 801a8f6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801a8e6:	4620      	mov	r0, r4
 801a8e8:	f007 f8df 	bl	8021aaa <__cxa_guard_release>
 801a8ec:	4a0e      	ldr	r2, [pc, #56]	; (801a928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801a8ee:	490f      	ldr	r1, [pc, #60]	; (801a92c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801a8f0:	480f      	ldr	r0, [pc, #60]	; (801a930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801a8f2:	f007 f8c7 	bl	8021a84 <__aeabi_atexit>
 801a8f6:	4c0f      	ldr	r4, [pc, #60]	; (801a934 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801a8f8:	e8d4 3f8f 	ldab	r3, [r4]
 801a8fc:	07db      	lsls	r3, r3, #31
 801a8fe:	d40b      	bmi.n	801a918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801a900:	4620      	mov	r0, r4
 801a902:	f007 f8c6 	bl	8021a92 <__cxa_guard_acquire>
 801a906:	b138      	cbz	r0, 801a918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801a908:	4620      	mov	r0, r4
 801a90a:	f007 f8ce 	bl	8021aaa <__cxa_guard_release>
 801a90e:	4a06      	ldr	r2, [pc, #24]	; (801a928 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801a910:	4909      	ldr	r1, [pc, #36]	; (801a938 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801a912:	480a      	ldr	r0, [pc, #40]	; (801a93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801a914:	f007 f8b6 	bl	8021a84 <__aeabi_atexit>
 801a918:	4b05      	ldr	r3, [pc, #20]	; (801a930 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801a91a:	652b      	str	r3, [r5, #80]	; 0x50
 801a91c:	4b07      	ldr	r3, [pc, #28]	; (801a93c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801a91e:	656b      	str	r3, [r5, #84]	; 0x54
 801a920:	bd38      	pop	{r3, r4, r5, pc}
 801a922:	bf00      	nop
 801a924:	2001fe90 	.word	0x2001fe90
 801a928:	20000000 	.word	0x20000000
 801a92c:	080187fb 	.word	0x080187fb
 801a930:	20000080 	.word	0x20000080
 801a934:	2001fe94 	.word	0x2001fe94
 801a938:	080187f9 	.word	0x080187f9
 801a93c:	20000084 	.word	0x20000084

0801a940 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801a940:	b538      	push	{r3, r4, r5, lr}
 801a942:	4605      	mov	r5, r0
 801a944:	4c13      	ldr	r4, [pc, #76]	; (801a994 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801a946:	e8d4 3f8f 	ldab	r3, [r4]
 801a94a:	07da      	lsls	r2, r3, #31
 801a94c:	d40b      	bmi.n	801a966 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801a94e:	4620      	mov	r0, r4
 801a950:	f007 f89f 	bl	8021a92 <__cxa_guard_acquire>
 801a954:	b138      	cbz	r0, 801a966 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801a956:	4620      	mov	r0, r4
 801a958:	f007 f8a7 	bl	8021aaa <__cxa_guard_release>
 801a95c:	4a0e      	ldr	r2, [pc, #56]	; (801a998 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801a95e:	490f      	ldr	r1, [pc, #60]	; (801a99c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801a960:	480f      	ldr	r0, [pc, #60]	; (801a9a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801a962:	f007 f88f 	bl	8021a84 <__aeabi_atexit>
 801a966:	4c0f      	ldr	r4, [pc, #60]	; (801a9a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801a968:	e8d4 3f8f 	ldab	r3, [r4]
 801a96c:	07db      	lsls	r3, r3, #31
 801a96e:	d40b      	bmi.n	801a988 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801a970:	4620      	mov	r0, r4
 801a972:	f007 f88e 	bl	8021a92 <__cxa_guard_acquire>
 801a976:	b138      	cbz	r0, 801a988 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801a978:	4620      	mov	r0, r4
 801a97a:	f007 f896 	bl	8021aaa <__cxa_guard_release>
 801a97e:	4a06      	ldr	r2, [pc, #24]	; (801a998 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801a980:	4909      	ldr	r1, [pc, #36]	; (801a9a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801a982:	480a      	ldr	r0, [pc, #40]	; (801a9ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801a984:	f007 f87e 	bl	8021a84 <__aeabi_atexit>
 801a988:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801a98a:	64ab      	str	r3, [r5, #72]	; 0x48
 801a98c:	4b07      	ldr	r3, [pc, #28]	; (801a9ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801a98e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801a990:	bd38      	pop	{r3, r4, r5, pc}
 801a992:	bf00      	nop
 801a994:	2001fe98 	.word	0x2001fe98
 801a998:	20000000 	.word	0x20000000
 801a99c:	080187ff 	.word	0x080187ff
 801a9a0:	20000088 	.word	0x20000088
 801a9a4:	2001fe9c 	.word	0x2001fe9c
 801a9a8:	080187fd 	.word	0x080187fd
 801a9ac:	2000008c 	.word	0x2000008c

0801a9b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801a9b0:	b538      	push	{r3, r4, r5, lr}
 801a9b2:	4605      	mov	r5, r0
 801a9b4:	4c13      	ldr	r4, [pc, #76]	; (801aa04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801a9b6:	e8d4 3f8f 	ldab	r3, [r4]
 801a9ba:	07da      	lsls	r2, r3, #31
 801a9bc:	d40b      	bmi.n	801a9d6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f007 f867 	bl	8021a92 <__cxa_guard_acquire>
 801a9c4:	b138      	cbz	r0, 801a9d6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	f007 f86f 	bl	8021aaa <__cxa_guard_release>
 801a9cc:	4a0e      	ldr	r2, [pc, #56]	; (801aa08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801a9ce:	490f      	ldr	r1, [pc, #60]	; (801aa0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801a9d0:	480f      	ldr	r0, [pc, #60]	; (801aa10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801a9d2:	f007 f857 	bl	8021a84 <__aeabi_atexit>
 801a9d6:	4c0f      	ldr	r4, [pc, #60]	; (801aa14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801a9d8:	e8d4 3f8f 	ldab	r3, [r4]
 801a9dc:	07db      	lsls	r3, r3, #31
 801a9de:	d40b      	bmi.n	801a9f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	f007 f856 	bl	8021a92 <__cxa_guard_acquire>
 801a9e6:	b138      	cbz	r0, 801a9f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f007 f85e 	bl	8021aaa <__cxa_guard_release>
 801a9ee:	4a06      	ldr	r2, [pc, #24]	; (801aa08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801a9f0:	4909      	ldr	r1, [pc, #36]	; (801aa18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801a9f2:	480a      	ldr	r0, [pc, #40]	; (801aa1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801a9f4:	f007 f846 	bl	8021a84 <__aeabi_atexit>
 801a9f8:	4b05      	ldr	r3, [pc, #20]	; (801aa10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801a9fa:	642b      	str	r3, [r5, #64]	; 0x40
 801a9fc:	4b07      	ldr	r3, [pc, #28]	; (801aa1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801a9fe:	646b      	str	r3, [r5, #68]	; 0x44
 801aa00:	bd38      	pop	{r3, r4, r5, pc}
 801aa02:	bf00      	nop
 801aa04:	2001fe60 	.word	0x2001fe60
 801aa08:	20000000 	.word	0x20000000
 801aa0c:	08018803 	.word	0x08018803
 801aa10:	20000050 	.word	0x20000050
 801aa14:	2001fe64 	.word	0x2001fe64
 801aa18:	08018801 	.word	0x08018801
 801aa1c:	20000054 	.word	0x20000054

0801aa20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801aa20:	b538      	push	{r3, r4, r5, lr}
 801aa22:	4605      	mov	r5, r0
 801aa24:	4c13      	ldr	r4, [pc, #76]	; (801aa74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801aa26:	e8d4 3f8f 	ldab	r3, [r4]
 801aa2a:	07da      	lsls	r2, r3, #31
 801aa2c:	d40b      	bmi.n	801aa46 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801aa2e:	4620      	mov	r0, r4
 801aa30:	f007 f82f 	bl	8021a92 <__cxa_guard_acquire>
 801aa34:	b138      	cbz	r0, 801aa46 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801aa36:	4620      	mov	r0, r4
 801aa38:	f007 f837 	bl	8021aaa <__cxa_guard_release>
 801aa3c:	4a0e      	ldr	r2, [pc, #56]	; (801aa78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801aa3e:	490f      	ldr	r1, [pc, #60]	; (801aa7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801aa40:	480f      	ldr	r0, [pc, #60]	; (801aa80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801aa42:	f007 f81f 	bl	8021a84 <__aeabi_atexit>
 801aa46:	4c0f      	ldr	r4, [pc, #60]	; (801aa84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801aa48:	e8d4 3f8f 	ldab	r3, [r4]
 801aa4c:	07db      	lsls	r3, r3, #31
 801aa4e:	d40b      	bmi.n	801aa68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801aa50:	4620      	mov	r0, r4
 801aa52:	f007 f81e 	bl	8021a92 <__cxa_guard_acquire>
 801aa56:	b138      	cbz	r0, 801aa68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801aa58:	4620      	mov	r0, r4
 801aa5a:	f007 f826 	bl	8021aaa <__cxa_guard_release>
 801aa5e:	4a06      	ldr	r2, [pc, #24]	; (801aa78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801aa60:	4909      	ldr	r1, [pc, #36]	; (801aa88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801aa62:	480a      	ldr	r0, [pc, #40]	; (801aa8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801aa64:	f007 f80e 	bl	8021a84 <__aeabi_atexit>
 801aa68:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801aa6a:	63ab      	str	r3, [r5, #56]	; 0x38
 801aa6c:	4b07      	ldr	r3, [pc, #28]	; (801aa8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801aa6e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801aa70:	bd38      	pop	{r3, r4, r5, pc}
 801aa72:	bf00      	nop
 801aa74:	2001fe80 	.word	0x2001fe80
 801aa78:	20000000 	.word	0x20000000
 801aa7c:	08018807 	.word	0x08018807
 801aa80:	20000070 	.word	0x20000070
 801aa84:	2001fe84 	.word	0x2001fe84
 801aa88:	08018805 	.word	0x08018805
 801aa8c:	20000074 	.word	0x20000074

0801aa90 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801aa90:	b510      	push	{r4, lr}
 801aa92:	4604      	mov	r4, r0
 801aa94:	f7ff ff1c 	bl	801a8d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801aa98:	4620      	mov	r0, r4
 801aa9a:	f7ff ff89 	bl	801a9b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	f7ff ff4e 	bl	801a940 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801aaa4:	4620      	mov	r0, r4
 801aaa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaaa:	f7ff bfb9 	b.w	801aa20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801aab0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801aab0:	b538      	push	{r3, r4, r5, lr}
 801aab2:	4605      	mov	r5, r0
 801aab4:	4c13      	ldr	r4, [pc, #76]	; (801ab04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801aab6:	e8d4 3f8f 	ldab	r3, [r4]
 801aaba:	07da      	lsls	r2, r3, #31
 801aabc:	d40b      	bmi.n	801aad6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801aabe:	4620      	mov	r0, r4
 801aac0:	f006 ffe7 	bl	8021a92 <__cxa_guard_acquire>
 801aac4:	b138      	cbz	r0, 801aad6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801aac6:	4620      	mov	r0, r4
 801aac8:	f006 ffef 	bl	8021aaa <__cxa_guard_release>
 801aacc:	4a0e      	ldr	r2, [pc, #56]	; (801ab08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801aace:	490f      	ldr	r1, [pc, #60]	; (801ab0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801aad0:	480f      	ldr	r0, [pc, #60]	; (801ab10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801aad2:	f006 ffd7 	bl	8021a84 <__aeabi_atexit>
 801aad6:	4c0f      	ldr	r4, [pc, #60]	; (801ab14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801aad8:	e8d4 3f8f 	ldab	r3, [r4]
 801aadc:	07db      	lsls	r3, r3, #31
 801aade:	d40b      	bmi.n	801aaf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801aae0:	4620      	mov	r0, r4
 801aae2:	f006 ffd6 	bl	8021a92 <__cxa_guard_acquire>
 801aae6:	b138      	cbz	r0, 801aaf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801aae8:	4620      	mov	r0, r4
 801aaea:	f006 ffde 	bl	8021aaa <__cxa_guard_release>
 801aaee:	4a06      	ldr	r2, [pc, #24]	; (801ab08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801aaf0:	4909      	ldr	r1, [pc, #36]	; (801ab18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801aaf2:	480a      	ldr	r0, [pc, #40]	; (801ab1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801aaf4:	f006 ffc6 	bl	8021a84 <__aeabi_atexit>
 801aaf8:	4b05      	ldr	r3, [pc, #20]	; (801ab10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801aafa:	662b      	str	r3, [r5, #96]	; 0x60
 801aafc:	4b07      	ldr	r3, [pc, #28]	; (801ab1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801aafe:	666b      	str	r3, [r5, #100]	; 0x64
 801ab00:	bd38      	pop	{r3, r4, r5, pc}
 801ab02:	bf00      	nop
 801ab04:	2001fe68 	.word	0x2001fe68
 801ab08:	20000000 	.word	0x20000000
 801ab0c:	080187f3 	.word	0x080187f3
 801ab10:	20000058 	.word	0x20000058
 801ab14:	2001fe6c 	.word	0x2001fe6c
 801ab18:	080187f1 	.word	0x080187f1
 801ab1c:	2000005c 	.word	0x2000005c

0801ab20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ab20:	b538      	push	{r3, r4, r5, lr}
 801ab22:	4605      	mov	r5, r0
 801ab24:	4c13      	ldr	r4, [pc, #76]	; (801ab74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801ab26:	e8d4 3f8f 	ldab	r3, [r4]
 801ab2a:	07da      	lsls	r2, r3, #31
 801ab2c:	d40b      	bmi.n	801ab46 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f006 ffaf 	bl	8021a92 <__cxa_guard_acquire>
 801ab34:	b138      	cbz	r0, 801ab46 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ab36:	4620      	mov	r0, r4
 801ab38:	f006 ffb7 	bl	8021aaa <__cxa_guard_release>
 801ab3c:	4a0e      	ldr	r2, [pc, #56]	; (801ab78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ab3e:	490f      	ldr	r1, [pc, #60]	; (801ab7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ab40:	480f      	ldr	r0, [pc, #60]	; (801ab80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ab42:	f006 ff9f 	bl	8021a84 <__aeabi_atexit>
 801ab46:	4c0f      	ldr	r4, [pc, #60]	; (801ab84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ab48:	e8d4 3f8f 	ldab	r3, [r4]
 801ab4c:	07db      	lsls	r3, r3, #31
 801ab4e:	d40b      	bmi.n	801ab68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ab50:	4620      	mov	r0, r4
 801ab52:	f006 ff9e 	bl	8021a92 <__cxa_guard_acquire>
 801ab56:	b138      	cbz	r0, 801ab68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ab58:	4620      	mov	r0, r4
 801ab5a:	f006 ffa6 	bl	8021aaa <__cxa_guard_release>
 801ab5e:	4a06      	ldr	r2, [pc, #24]	; (801ab78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ab60:	4909      	ldr	r1, [pc, #36]	; (801ab88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ab62:	480a      	ldr	r0, [pc, #40]	; (801ab8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ab64:	f006 ff8e 	bl	8021a84 <__aeabi_atexit>
 801ab68:	4b05      	ldr	r3, [pc, #20]	; (801ab80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ab6a:	65ab      	str	r3, [r5, #88]	; 0x58
 801ab6c:	4b07      	ldr	r3, [pc, #28]	; (801ab8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ab6e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ab70:	bd38      	pop	{r3, r4, r5, pc}
 801ab72:	bf00      	nop
 801ab74:	2001fe40 	.word	0x2001fe40
 801ab78:	20000000 	.word	0x20000000
 801ab7c:	080187f7 	.word	0x080187f7
 801ab80:	20000030 	.word	0x20000030
 801ab84:	2001fe44 	.word	0x2001fe44
 801ab88:	080187f5 	.word	0x080187f5
 801ab8c:	20000034 	.word	0x20000034

0801ab90 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ab90:	b510      	push	{r4, lr}
 801ab92:	4604      	mov	r4, r0
 801ab94:	f7ff ff8c 	bl	801aab0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ab98:	4620      	mov	r0, r4
 801ab9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab9e:	f7ff bfbf 	b.w	801ab20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801aba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801aba4:	b538      	push	{r3, r4, r5, lr}
 801aba6:	4605      	mov	r5, r0
 801aba8:	4c13      	ldr	r4, [pc, #76]	; (801abf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801abaa:	e8d4 3f8f 	ldab	r3, [r4]
 801abae:	07da      	lsls	r2, r3, #31
 801abb0:	d40b      	bmi.n	801abca <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801abb2:	4620      	mov	r0, r4
 801abb4:	f006 ff6d 	bl	8021a92 <__cxa_guard_acquire>
 801abb8:	b138      	cbz	r0, 801abca <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801abba:	4620      	mov	r0, r4
 801abbc:	f006 ff75 	bl	8021aaa <__cxa_guard_release>
 801abc0:	4a0e      	ldr	r2, [pc, #56]	; (801abfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801abc2:	490f      	ldr	r1, [pc, #60]	; (801ac00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801abc4:	480f      	ldr	r0, [pc, #60]	; (801ac04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801abc6:	f006 ff5d 	bl	8021a84 <__aeabi_atexit>
 801abca:	4c0f      	ldr	r4, [pc, #60]	; (801ac08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801abcc:	e8d4 3f8f 	ldab	r3, [r4]
 801abd0:	07db      	lsls	r3, r3, #31
 801abd2:	d40b      	bmi.n	801abec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801abd4:	4620      	mov	r0, r4
 801abd6:	f006 ff5c 	bl	8021a92 <__cxa_guard_acquire>
 801abda:	b138      	cbz	r0, 801abec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801abdc:	4620      	mov	r0, r4
 801abde:	f006 ff64 	bl	8021aaa <__cxa_guard_release>
 801abe2:	4a06      	ldr	r2, [pc, #24]	; (801abfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801abe4:	4909      	ldr	r1, [pc, #36]	; (801ac0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801abe6:	480a      	ldr	r0, [pc, #40]	; (801ac10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801abe8:	f006 ff4c 	bl	8021a84 <__aeabi_atexit>
 801abec:	4b05      	ldr	r3, [pc, #20]	; (801ac04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801abee:	672b      	str	r3, [r5, #112]	; 0x70
 801abf0:	4b07      	ldr	r3, [pc, #28]	; (801ac10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801abf2:	676b      	str	r3, [r5, #116]	; 0x74
 801abf4:	bd38      	pop	{r3, r4, r5, pc}
 801abf6:	bf00      	nop
 801abf8:	2001fe38 	.word	0x2001fe38
 801abfc:	20000000 	.word	0x20000000
 801ac00:	080187eb 	.word	0x080187eb
 801ac04:	20000028 	.word	0x20000028
 801ac08:	2001fe3c 	.word	0x2001fe3c
 801ac0c:	080187e9 	.word	0x080187e9
 801ac10:	2000002c 	.word	0x2000002c

0801ac14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ac14:	b538      	push	{r3, r4, r5, lr}
 801ac16:	4605      	mov	r5, r0
 801ac18:	4c13      	ldr	r4, [pc, #76]	; (801ac68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801ac1a:	e8d4 3f8f 	ldab	r3, [r4]
 801ac1e:	07da      	lsls	r2, r3, #31
 801ac20:	d40b      	bmi.n	801ac3a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ac22:	4620      	mov	r0, r4
 801ac24:	f006 ff35 	bl	8021a92 <__cxa_guard_acquire>
 801ac28:	b138      	cbz	r0, 801ac3a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	f006 ff3d 	bl	8021aaa <__cxa_guard_release>
 801ac30:	4a0e      	ldr	r2, [pc, #56]	; (801ac6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ac32:	490f      	ldr	r1, [pc, #60]	; (801ac70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ac34:	480f      	ldr	r0, [pc, #60]	; (801ac74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ac36:	f006 ff25 	bl	8021a84 <__aeabi_atexit>
 801ac3a:	4c0f      	ldr	r4, [pc, #60]	; (801ac78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ac3c:	e8d4 3f8f 	ldab	r3, [r4]
 801ac40:	07db      	lsls	r3, r3, #31
 801ac42:	d40b      	bmi.n	801ac5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ac44:	4620      	mov	r0, r4
 801ac46:	f006 ff24 	bl	8021a92 <__cxa_guard_acquire>
 801ac4a:	b138      	cbz	r0, 801ac5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f006 ff2c 	bl	8021aaa <__cxa_guard_release>
 801ac52:	4a06      	ldr	r2, [pc, #24]	; (801ac6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ac54:	4909      	ldr	r1, [pc, #36]	; (801ac7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ac56:	480a      	ldr	r0, [pc, #40]	; (801ac80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ac58:	f006 ff14 	bl	8021a84 <__aeabi_atexit>
 801ac5c:	4b05      	ldr	r3, [pc, #20]	; (801ac74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ac5e:	66ab      	str	r3, [r5, #104]	; 0x68
 801ac60:	4b07      	ldr	r3, [pc, #28]	; (801ac80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ac62:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ac64:	bd38      	pop	{r3, r4, r5, pc}
 801ac66:	bf00      	nop
 801ac68:	2001fe30 	.word	0x2001fe30
 801ac6c:	20000000 	.word	0x20000000
 801ac70:	080187ef 	.word	0x080187ef
 801ac74:	20000020 	.word	0x20000020
 801ac78:	2001fe34 	.word	0x2001fe34
 801ac7c:	080187ed 	.word	0x080187ed
 801ac80:	20000024 	.word	0x20000024

0801ac84 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ac84:	b510      	push	{r4, lr}
 801ac86:	4604      	mov	r4, r0
 801ac88:	f7ff ff8c 	bl	801aba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ac8c:	4620      	mov	r0, r4
 801ac8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac92:	f7ff bfbf 	b.w	801ac14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ac96 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ac96:	b510      	push	{r4, lr}
 801ac98:	4604      	mov	r4, r0
 801ac9a:	f7ff fff3 	bl	801ac84 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f7ff ff76 	bl	801ab90 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801aca4:	4620      	mov	r0, r4
 801aca6:	f7ff fe09 	bl	801a8bc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801acaa:	4620      	mov	r0, r4
 801acac:	f7ff fd12 	bl	801a6d4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801acb0:	4620      	mov	r0, r4
 801acb2:	f7ff fd89 	bl	801a7c8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801acb6:	4620      	mov	r0, r4
 801acb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acbc:	f7ff bee8 	b.w	801aa90 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801acc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc4:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801acc8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801accc:	fb05 4c0e 	mla	ip, r5, lr, r4
 801acd0:	2d00      	cmp	r5, #0
 801acd2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801acd6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801acda:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801acde:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ace2:	eb02 0a0c 	add.w	sl, r2, ip
 801ace6:	8808      	ldrh	r0, [r1, #0]
 801ace8:	f2c0 80b0 	blt.w	801ae4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801acec:	45ab      	cmp	fp, r5
 801acee:	f340 80ad 	ble.w	801ae4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801acf2:	2c00      	cmp	r4, #0
 801acf4:	f2c0 80a8 	blt.w	801ae48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801acf8:	45a6      	cmp	lr, r4
 801acfa:	f340 80a5 	ble.w	801ae48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801acfe:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ad02:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801ad06:	1c62      	adds	r2, r4, #1
 801ad08:	f100 80a3 	bmi.w	801ae52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad0c:	4596      	cmp	lr, r2
 801ad0e:	f340 80a0 	ble.w	801ae52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad12:	f1b9 0f00 	cmp.w	r9, #0
 801ad16:	f000 809c 	beq.w	801ae52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad1a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ad1e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ad22:	3501      	adds	r5, #1
 801ad24:	f100 8099 	bmi.w	801ae5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad28:	45ab      	cmp	fp, r5
 801ad2a:	f340 8096 	ble.w	801ae5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad2e:	2f00      	cmp	r7, #0
 801ad30:	f000 8093 	beq.w	801ae5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad34:	2c00      	cmp	r4, #0
 801ad36:	f2c0 808e 	blt.w	801ae56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ad3a:	45a6      	cmp	lr, r4
 801ad3c:	f340 808b 	ble.w	801ae56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ad40:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801ad44:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801ad48:	3401      	adds	r4, #1
 801ad4a:	f100 8089 	bmi.w	801ae60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad4e:	45a6      	cmp	lr, r4
 801ad50:	f340 8086 	ble.w	801ae60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad54:	f1b9 0f00 	cmp.w	r9, #0
 801ad58:	f000 8082 	beq.w	801ae60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad5c:	44d6      	add	lr, sl
 801ad5e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ad62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ad66:	fb19 fe07 	smulbb	lr, r9, r7
 801ad6a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801ad6e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ad72:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801ad76:	ea44 0808 	orr.w	r8, r4, r8
 801ad7a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801ad7e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801ad82:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ad86:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ad8a:	ea44 0c0c 	orr.w	ip, r4, ip
 801ad8e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801ad92:	fb04 f40c 	mul.w	r4, r4, ip
 801ad96:	f1c7 0210 	rsb	r2, r7, #16
 801ad9a:	eba2 0209 	sub.w	r2, r2, r9
 801ad9e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801ada2:	fb02 4808 	mla	r8, r2, r8, r4
 801ada6:	b2b4      	uxth	r4, r6
 801ada8:	43f6      	mvns	r6, r6
 801adaa:	041a      	lsls	r2, r3, #16
 801adac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801adb0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801adb4:	4313      	orrs	r3, r2
 801adb6:	fb0e 8303 	mla	r3, lr, r3, r8
 801adba:	042a      	lsls	r2, r5, #16
 801adbc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801adc0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801adc4:	432a      	orrs	r2, r5
 801adc6:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801adca:	fb07 3202 	mla	r2, r7, r2, r3
 801adce:	0d53      	lsrs	r3, r2, #21
 801add0:	0952      	lsrs	r2, r2, #5
 801add2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801add6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801adda:	431a      	orrs	r2, r3
 801addc:	b293      	uxth	r3, r2
 801adde:	1202      	asrs	r2, r0, #8
 801ade0:	b2f6      	uxtb	r6, r6
 801ade2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ade6:	fb12 f206 	smulbb	r2, r2, r6
 801adea:	10c7      	asrs	r7, r0, #3
 801adec:	00c0      	lsls	r0, r0, #3
 801adee:	b2c0      	uxtb	r0, r0
 801adf0:	121d      	asrs	r5, r3, #8
 801adf2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801adf6:	fb10 f006 	smulbb	r0, r0, r6
 801adfa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801adfe:	fb17 f706 	smulbb	r7, r7, r6
 801ae02:	fb05 2504 	mla	r5, r5, r4, r2
 801ae06:	10da      	asrs	r2, r3, #3
 801ae08:	00db      	lsls	r3, r3, #3
 801ae0a:	b2db      	uxtb	r3, r3
 801ae0c:	fb03 0004 	mla	r0, r3, r4, r0
 801ae10:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ae14:	fb02 7204 	mla	r2, r2, r4, r7
 801ae18:	b2ad      	uxth	r5, r5
 801ae1a:	b280      	uxth	r0, r0
 801ae1c:	1c6b      	adds	r3, r5, #1
 801ae1e:	b292      	uxth	r2, r2
 801ae20:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ae24:	1c43      	adds	r3, r0, #1
 801ae26:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ae2a:	1c50      	adds	r0, r2, #1
 801ae2c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ae30:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ae34:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ae38:	0952      	lsrs	r2, r2, #5
 801ae3a:	432b      	orrs	r3, r5
 801ae3c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ae40:	4313      	orrs	r3, r2
 801ae42:	800b      	strh	r3, [r1, #0]
 801ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae48:	4680      	mov	r8, r0
 801ae4a:	e75c      	b.n	801ad06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801ae4c:	4684      	mov	ip, r0
 801ae4e:	4680      	mov	r8, r0
 801ae50:	e767      	b.n	801ad22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ae52:	4684      	mov	ip, r0
 801ae54:	e765      	b.n	801ad22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ae56:	4605      	mov	r5, r0
 801ae58:	e776      	b.n	801ad48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	4605      	mov	r5, r0
 801ae5e:	e782      	b.n	801ad66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ae60:	4603      	mov	r3, r0
 801ae62:	e780      	b.n	801ad66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801ae64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae68:	b099      	sub	sp, #100	; 0x64
 801ae6a:	9215      	str	r2, [sp, #84]	; 0x54
 801ae6c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ae6e:	9016      	str	r0, [sp, #88]	; 0x58
 801ae70:	9309      	str	r3, [sp, #36]	; 0x24
 801ae72:	6850      	ldr	r0, [r2, #4]
 801ae74:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801ae78:	910c      	str	r1, [sp, #48]	; 0x30
 801ae7a:	930d      	str	r3, [sp, #52]	; 0x34
 801ae7c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ae80:	fb00 1303 	mla	r3, r0, r3, r1
 801ae84:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801ae88:	6812      	ldr	r2, [r2, #0]
 801ae8a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801ae8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae96:	685e      	ldr	r6, [r3, #4]
 801ae98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae9a:	3604      	adds	r6, #4
 801ae9c:	43db      	mvns	r3, r3
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	930a      	str	r3, [sp, #40]	; 0x28
 801aea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	dc03      	bgt.n	801aeb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801aea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	f340 8225 	ble.w	801b2fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801aeb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aeb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aeb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aeba:	1e48      	subs	r0, r1, #1
 801aebc:	1e57      	subs	r7, r2, #1
 801aebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	f340 80e3 	ble.w	801b08c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aec6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801aeca:	ea4f 4325 	mov.w	r3, r5, asr #16
 801aece:	d406      	bmi.n	801aede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aed0:	4584      	cmp	ip, r0
 801aed2:	da04      	bge.n	801aede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	db02      	blt.n	801aede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801aed8:	42bb      	cmp	r3, r7
 801aeda:	f2c0 80d8 	blt.w	801b08e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801aede:	f11c 0c01 	adds.w	ip, ip, #1
 801aee2:	f100 80c9 	bmi.w	801b078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aee6:	4561      	cmp	r1, ip
 801aee8:	f2c0 80c6 	blt.w	801b078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aeec:	3301      	adds	r3, #1
 801aeee:	f100 80c3 	bmi.w	801b078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aef2:	429a      	cmp	r2, r3
 801aef4:	f2c0 80c0 	blt.w	801b078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aef8:	4647      	mov	r7, r8
 801aefa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801aefe:	f1bb 0f00 	cmp.w	fp, #0
 801af02:	f340 80e3 	ble.w	801b0cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801af06:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801af08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801af0a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801af0e:	ea5f 422a 	movs.w	r2, sl, asr #16
 801af12:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801af16:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801af1a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801af1e:	689b      	ldr	r3, [r3, #8]
 801af20:	f100 8121 	bmi.w	801b166 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af24:	f103 39ff 	add.w	r9, r3, #4294967295
 801af28:	454a      	cmp	r2, r9
 801af2a:	f280 811c 	bge.w	801b166 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af2e:	f1bc 0f00 	cmp.w	ip, #0
 801af32:	f2c0 8118 	blt.w	801b166 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af36:	f10e 39ff 	add.w	r9, lr, #4294967295
 801af3a:	45cc      	cmp	ip, r9
 801af3c:	f280 8113 	bge.w	801b166 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af40:	b21b      	sxth	r3, r3
 801af42:	fb0c 2203 	mla	r2, ip, r3, r2
 801af46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af48:	eb04 0902 	add.w	r9, r4, r2
 801af4c:	5ca2      	ldrb	r2, [r4, r2]
 801af4e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801af52:	2800      	cmp	r0, #0
 801af54:	f000 80fe 	beq.w	801b154 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801af58:	f899 2001 	ldrb.w	r2, [r9, #1]
 801af5c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801af60:	9211      	str	r2, [sp, #68]	; 0x44
 801af62:	b151      	cbz	r1, 801af7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801af64:	eb09 0203 	add.w	r2, r9, r3
 801af68:	f819 3003 	ldrb.w	r3, [r9, r3]
 801af6c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801af70:	930f      	str	r3, [sp, #60]	; 0x3c
 801af72:	7853      	ldrb	r3, [r2, #1]
 801af74:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801af78:	9312      	str	r3, [sp, #72]	; 0x48
 801af7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af7c:	fb10 f201 	smulbb	r2, r0, r1
 801af80:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801af84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801af88:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801af8c:	ea4c 0c03 	orr.w	ip, ip, r3
 801af90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af92:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801af94:	041b      	lsls	r3, r3, #16
 801af96:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801af9a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801af9e:	10d2      	asrs	r2, r2, #3
 801afa0:	4323      	orrs	r3, r4
 801afa2:	4353      	muls	r3, r2
 801afa4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801afa8:	fb09 330c 	mla	r3, r9, ip, r3
 801afac:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801afb0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801afb4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801afb8:	ea4c 0e0e 	orr.w	lr, ip, lr
 801afbc:	f1c1 0c10 	rsb	ip, r1, #16
 801afc0:	ebac 0c00 	sub.w	ip, ip, r0
 801afc4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801afc8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801afcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801afce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801afd2:	0418      	lsls	r0, r3, #16
 801afd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801afd8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801afdc:	4318      	orrs	r0, r3
 801afde:	fb02 c200 	mla	r2, r2, r0, ip
 801afe2:	8838      	ldrh	r0, [r7, #0]
 801afe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801afe6:	0d53      	lsrs	r3, r2, #21
 801afe8:	1201      	asrs	r1, r0, #8
 801afea:	0952      	lsrs	r2, r2, #5
 801afec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aff0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801aff4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801aff8:	431a      	orrs	r2, r3
 801affa:	fb11 f104 	smulbb	r1, r1, r4
 801affe:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801b002:	00c0      	lsls	r0, r0, #3
 801b004:	b292      	uxth	r2, r2
 801b006:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b00a:	b2c0      	uxtb	r0, r0
 801b00c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801b010:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801b014:	fb1e fe04 	smulbb	lr, lr, r4
 801b018:	fb10 f004 	smulbb	r0, r0, r4
 801b01c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b020:	fb0c 1c03 	mla	ip, ip, r3, r1
 801b024:	10d1      	asrs	r1, r2, #3
 801b026:	00d2      	lsls	r2, r2, #3
 801b028:	b2d2      	uxtb	r2, r2
 801b02a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b02e:	fb01 e103 	mla	r1, r1, r3, lr
 801b032:	fb02 0303 	mla	r3, r2, r3, r0
 801b036:	fa1f fc8c 	uxth.w	ip, ip
 801b03a:	b29a      	uxth	r2, r3
 801b03c:	f10c 0301 	add.w	r3, ip, #1
 801b040:	b289      	uxth	r1, r1
 801b042:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b046:	1c53      	adds	r3, r2, #1
 801b048:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b04c:	1c4a      	adds	r2, r1, #1
 801b04e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b052:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b056:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b05a:	0949      	lsrs	r1, r1, #5
 801b05c:	ea43 030c 	orr.w	r3, r3, ip
 801b060:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b064:	430b      	orrs	r3, r1
 801b066:	803b      	strh	r3, [r7, #0]
 801b068:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b06a:	3702      	adds	r7, #2
 801b06c:	449a      	add	sl, r3
 801b06e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b070:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b074:	441d      	add	r5, r3
 801b076:	e742      	b.n	801aefe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b078:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b07a:	f108 0802 	add.w	r8, r8, #2
 801b07e:	449a      	add	sl, r3
 801b080:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b082:	441d      	add	r5, r3
 801b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b086:	3b01      	subs	r3, #1
 801b088:	9309      	str	r3, [sp, #36]	; 0x24
 801b08a:	e718      	b.n	801aebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b08c:	d023      	beq.n	801b0d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b090:	9825      	ldr	r0, [sp, #148]	; 0x94
 801b092:	3b01      	subs	r3, #1
 801b094:	fb00 a003 	mla	r0, r0, r3, sl
 801b098:	1400      	asrs	r0, r0, #16
 801b09a:	f53f af2d 	bmi.w	801aef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b09e:	3901      	subs	r1, #1
 801b0a0:	4288      	cmp	r0, r1
 801b0a2:	f6bf af29 	bge.w	801aef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0a6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b0a8:	fb01 5303 	mla	r3, r1, r3, r5
 801b0ac:	141b      	asrs	r3, r3, #16
 801b0ae:	f53f af23 	bmi.w	801aef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0b2:	3a01      	subs	r2, #1
 801b0b4:	4293      	cmp	r3, r2
 801b0b6:	f6bf af1f 	bge.w	801aef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0ba:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801b0be:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801b0c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b0c6:	f1be 0f00 	cmp.w	lr, #0
 801b0ca:	dc6c      	bgt.n	801b1a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801b0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b0d2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801b0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	f340 810e 	ble.w	801b2fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801b0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b0e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0f2:	eef0 6a62 	vmov.f32	s13, s5
 801b0f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b102:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b106:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b10a:	ee16 aa90 	vmov	sl, s13
 801b10e:	eef0 6a43 	vmov.f32	s13, s6
 801b112:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b116:	ee12 2a90 	vmov	r2, s5
 801b11a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b11e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b120:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b124:	fb92 f3f3 	sdiv	r3, r2, r3
 801b128:	ee13 2a10 	vmov	r2, s6
 801b12c:	9325      	str	r3, [sp, #148]	; 0x94
 801b12e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b130:	ee16 5a90 	vmov	r5, s13
 801b134:	fb92 f3f3 	sdiv	r3, r2, r3
 801b138:	9326      	str	r3, [sp, #152]	; 0x98
 801b13a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b13c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b13e:	3b01      	subs	r3, #1
 801b140:	930c      	str	r3, [sp, #48]	; 0x30
 801b142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b144:	bf08      	it	eq
 801b146:	4613      	moveq	r3, r2
 801b148:	eeb0 3a67 	vmov.f32	s6, s15
 801b14c:	9309      	str	r3, [sp, #36]	; 0x24
 801b14e:	eef0 2a47 	vmov.f32	s5, s14
 801b152:	e6a6      	b.n	801aea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b154:	2900      	cmp	r1, #0
 801b156:	f43f af10 	beq.w	801af7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b15a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b15e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b162:	930f      	str	r3, [sp, #60]	; 0x3c
 801b164:	e709      	b.n	801af7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b166:	f112 0901 	adds.w	r9, r2, #1
 801b16a:	f53f af7d 	bmi.w	801b068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b16e:	454b      	cmp	r3, r9
 801b170:	f6ff af7a 	blt.w	801b068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b174:	f11c 0901 	adds.w	r9, ip, #1
 801b178:	f53f af76 	bmi.w	801b068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b17c:	45ce      	cmp	lr, r9
 801b17e:	f6ff af73 	blt.w	801b068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b182:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b184:	9202      	str	r2, [sp, #8]
 801b186:	b21b      	sxth	r3, r3
 801b188:	fa0f f28e 	sxth.w	r2, lr
 801b18c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b190:	e9cd c003 	strd	ip, r0, [sp, #12]
 801b194:	9201      	str	r2, [sp, #4]
 801b196:	9300      	str	r3, [sp, #0]
 801b198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b19a:	4633      	mov	r3, r6
 801b19c:	4639      	mov	r1, r7
 801b19e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b1a0:	f7ff fd8e 	bl	801acc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801b1a4:	e760      	b.n	801b068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b1a8:	ea4f 422a 	mov.w	r2, sl, asr #16
 801b1ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b1b0:	1429      	asrs	r1, r5, #16
 801b1b2:	fb03 2101 	mla	r1, r3, r1, r2
 801b1b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b1b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1ba:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801b1be:	440a      	add	r2, r1
 801b1c0:	5c61      	ldrb	r1, [r4, r1]
 801b1c2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b1c6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801b1ca:	f1bc 0f00 	cmp.w	ip, #0
 801b1ce:	f000 808c 	beq.w	801b2ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801b1d2:	7857      	ldrb	r7, [r2, #1]
 801b1d4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801b1d8:	9413      	str	r4, [sp, #76]	; 0x4c
 801b1da:	b140      	cbz	r0, 801b1ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b1dc:	18d7      	adds	r7, r2, r3
 801b1de:	5cd3      	ldrb	r3, [r2, r3]
 801b1e0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b1e4:	9310      	str	r3, [sp, #64]	; 0x40
 801b1e6:	787b      	ldrb	r3, [r7, #1]
 801b1e8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b1ec:	9314      	str	r3, [sp, #80]	; 0x50
 801b1ee:	fb1c f200 	smulbb	r2, ip, r0
 801b1f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b1f4:	10d2      	asrs	r2, r2, #3
 801b1f6:	041f      	lsls	r7, r3, #16
 801b1f8:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801b1fc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b200:	431f      	orrs	r7, r3
 801b202:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801b206:	9317      	str	r3, [sp, #92]	; 0x5c
 801b208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b20a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b20c:	041b      	lsls	r3, r3, #16
 801b20e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801b212:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b216:	ea43 030b 	orr.w	r3, r3, fp
 801b21a:	4353      	muls	r3, r2
 801b21c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801b21e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b222:	fb04 3707 	mla	r7, r4, r7, r3
 801b226:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b22a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801b22e:	ea43 0b01 	orr.w	fp, r3, r1
 801b232:	f1c0 0110 	rsb	r1, r0, #16
 801b236:	eba1 0c0c 	sub.w	ip, r1, ip
 801b23a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b23e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b240:	fb0c 770b 	mla	r7, ip, fp, r7
 801b244:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b248:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801b24c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b250:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b254:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b258:	fb02 770c 	mla	r7, r2, ip, r7
 801b25c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b25e:	0d79      	lsrs	r1, r7, #21
 801b260:	8812      	ldrh	r2, [r2, #0]
 801b262:	097f      	lsrs	r7, r7, #5
 801b264:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b268:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b26c:	430f      	orrs	r7, r1
 801b26e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b270:	1211      	asrs	r1, r2, #8
 801b272:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b276:	b2bb      	uxth	r3, r7
 801b278:	fb11 f104 	smulbb	r1, r1, r4
 801b27c:	10d7      	asrs	r7, r2, #3
 801b27e:	00d2      	lsls	r2, r2, #3
 801b280:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b284:	b2d2      	uxtb	r2, r2
 801b286:	1218      	asrs	r0, r3, #8
 801b288:	fb17 f704 	smulbb	r7, r7, r4
 801b28c:	fb12 f204 	smulbb	r2, r2, r4
 801b290:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b294:	fb00 1009 	mla	r0, r0, r9, r1
 801b298:	10d9      	asrs	r1, r3, #3
 801b29a:	00db      	lsls	r3, r3, #3
 801b29c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b2a0:	b2db      	uxtb	r3, r3
 801b2a2:	fb01 7109 	mla	r1, r1, r9, r7
 801b2a6:	fb03 2309 	mla	r3, r3, r9, r2
 801b2aa:	b280      	uxth	r0, r0
 801b2ac:	b29b      	uxth	r3, r3
 801b2ae:	b289      	uxth	r1, r1
 801b2b0:	1c42      	adds	r2, r0, #1
 801b2b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b2b6:	1c4f      	adds	r7, r1, #1
 801b2b8:	1c5a      	adds	r2, r3, #1
 801b2ba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b2be:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801b2c2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801b2c6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b2ca:	0949      	lsrs	r1, r1, #5
 801b2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2ce:	4310      	orrs	r0, r2
 801b2d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b2d4:	4308      	orrs	r0, r1
 801b2d6:	f823 0b02 	strh.w	r0, [r3], #2
 801b2da:	930e      	str	r3, [sp, #56]	; 0x38
 801b2dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b2de:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b2e2:	449a      	add	sl, r3
 801b2e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b2e6:	441d      	add	r5, r3
 801b2e8:	e6ed      	b.n	801b0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801b2ea:	2800      	cmp	r0, #0
 801b2ec:	f43f af7f 	beq.w	801b1ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b2f0:	5cd3      	ldrb	r3, [r2, r3]
 801b2f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b2f6:	9310      	str	r3, [sp, #64]	; 0x40
 801b2f8:	e779      	b.n	801b1ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b2fa:	b019      	add	sp, #100	; 0x64
 801b2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b300 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b304:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b308:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801b30c:	fb08 470e 	mla	r7, r8, lr, r4
 801b310:	f1b8 0f00 	cmp.w	r8, #0
 801b314:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801b318:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801b31c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801b320:	eb02 0907 	add.w	r9, r2, r7
 801b324:	8808      	ldrh	r0, [r1, #0]
 801b326:	db67      	blt.n	801b3f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801b328:	45c2      	cmp	sl, r8
 801b32a:	dd65      	ble.n	801b3f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801b32c:	2c00      	cmp	r4, #0
 801b32e:	db61      	blt.n	801b3f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801b330:	45a6      	cmp	lr, r4
 801b332:	dd5f      	ble.n	801b3f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801b334:	5dd2      	ldrb	r2, [r2, r7]
 801b336:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801b33a:	1c62      	adds	r2, r4, #1
 801b33c:	d45f      	bmi.n	801b3fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b33e:	4596      	cmp	lr, r2
 801b340:	dd5d      	ble.n	801b3fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b342:	2d00      	cmp	r5, #0
 801b344:	d05b      	beq.n	801b3fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b346:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b34a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801b34e:	f118 0801 	adds.w	r8, r8, #1
 801b352:	d458      	bmi.n	801b406 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b354:	45c2      	cmp	sl, r8
 801b356:	dd56      	ble.n	801b406 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b358:	2e00      	cmp	r6, #0
 801b35a:	d054      	beq.n	801b406 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b35c:	2c00      	cmp	r4, #0
 801b35e:	db50      	blt.n	801b402 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801b360:	45a6      	cmp	lr, r4
 801b362:	dd4e      	ble.n	801b402 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801b364:	f819 200e 	ldrb.w	r2, [r9, lr]
 801b368:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801b36c:	3401      	adds	r4, #1
 801b36e:	d407      	bmi.n	801b380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b370:	45a6      	cmp	lr, r4
 801b372:	dd05      	ble.n	801b380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b374:	b125      	cbz	r5, 801b380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b376:	44ce      	add	lr, r9
 801b378:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801b37c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b380:	fb15 f406 	smulbb	r4, r5, r6
 801b384:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801b388:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b38c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801b390:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b394:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801b398:	ea43 0c0c 	orr.w	ip, r3, ip
 801b39c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b3a0:	f1c6 0310 	rsb	r3, r6, #16
 801b3a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b3a8:	1b5b      	subs	r3, r3, r5
 801b3aa:	ea4e 0707 	orr.w	r7, lr, r7
 801b3ae:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801b3b2:	437d      	muls	r5, r7
 801b3b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b3b8:	fb03 5c0c 	mla	ip, r3, ip, r5
 801b3bc:	0403      	lsls	r3, r0, #16
 801b3be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b3c2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b3c6:	4318      	orrs	r0, r3
 801b3c8:	fb04 c000 	mla	r0, r4, r0, ip
 801b3cc:	0413      	lsls	r3, r2, #16
 801b3ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b3d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b3d6:	4313      	orrs	r3, r2
 801b3d8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801b3dc:	fb06 0003 	mla	r0, r6, r3, r0
 801b3e0:	0d43      	lsrs	r3, r0, #21
 801b3e2:	0940      	lsrs	r0, r0, #5
 801b3e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b3e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b3ec:	4318      	orrs	r0, r3
 801b3ee:	8008      	strh	r0, [r1, #0]
 801b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3f4:	4684      	mov	ip, r0
 801b3f6:	e7a0      	b.n	801b33a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801b3f8:	4607      	mov	r7, r0
 801b3fa:	4684      	mov	ip, r0
 801b3fc:	e7a7      	b.n	801b34e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801b3fe:	4607      	mov	r7, r0
 801b400:	e7a5      	b.n	801b34e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801b402:	4602      	mov	r2, r0
 801b404:	e7b2      	b.n	801b36c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801b406:	4602      	mov	r2, r0
 801b408:	e7ba      	b.n	801b380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801b40a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b40e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b412:	b093      	sub	sp, #76	; 0x4c
 801b414:	920f      	str	r2, [sp, #60]	; 0x3c
 801b416:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b418:	9010      	str	r0, [sp, #64]	; 0x40
 801b41a:	6850      	ldr	r0, [r2, #4]
 801b41c:	9108      	str	r1, [sp, #32]
 801b41e:	9306      	str	r3, [sp, #24]
 801b420:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801b424:	fb00 1303 	mla	r3, r0, r3, r1
 801b428:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801b42c:	6812      	ldr	r2, [r2, #0]
 801b42e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801b432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	9307      	str	r3, [sp, #28]
 801b438:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b43a:	685f      	ldr	r7, [r3, #4]
 801b43c:	3704      	adds	r7, #4
 801b43e:	9b08      	ldr	r3, [sp, #32]
 801b440:	2b00      	cmp	r3, #0
 801b442:	dc03      	bgt.n	801b44c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b446:	2b00      	cmp	r3, #0
 801b448:	f340 81b2 	ble.w	801b7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801b44c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b44e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b452:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b456:	1e48      	subs	r0, r1, #1
 801b458:	f102 3cff 	add.w	ip, r2, #4294967295
 801b45c:	9b06      	ldr	r3, [sp, #24]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	f340 80a9 	ble.w	801b5b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b464:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b468:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b46c:	d406      	bmi.n	801b47c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b46e:	4586      	cmp	lr, r0
 801b470:	da04      	bge.n	801b47c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b472:	2b00      	cmp	r3, #0
 801b474:	db02      	blt.n	801b47c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b476:	4563      	cmp	r3, ip
 801b478:	f2c0 809e 	blt.w	801b5b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b47c:	f11e 0e01 	adds.w	lr, lr, #1
 801b480:	f100 808f 	bmi.w	801b5a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b484:	4571      	cmp	r1, lr
 801b486:	f2c0 808c 	blt.w	801b5a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b48a:	3301      	adds	r3, #1
 801b48c:	f100 8089 	bmi.w	801b5a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b490:	429a      	cmp	r2, r3
 801b492:	f2c0 8086 	blt.w	801b5a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b496:	46c8      	mov	r8, r9
 801b498:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b49c:	f1bb 0f00 	cmp.w	fp, #0
 801b4a0:	f340 80a6 	ble.w	801b5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b4a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801b4a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b4a8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b4ac:	1422      	asrs	r2, r4, #16
 801b4ae:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801b4b2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801b4b6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b4ba:	689b      	ldr	r3, [r3, #8]
 801b4bc:	f100 80e3 	bmi.w	801b686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4c0:	f103 3aff 	add.w	sl, r3, #4294967295
 801b4c4:	4552      	cmp	r2, sl
 801b4c6:	f280 80de 	bge.w	801b686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4ca:	f1bc 0f00 	cmp.w	ip, #0
 801b4ce:	f2c0 80da 	blt.w	801b686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 801b4d6:	45d4      	cmp	ip, sl
 801b4d8:	f280 80d5 	bge.w	801b686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4dc:	b21b      	sxth	r3, r3
 801b4de:	fb0c 2203 	mla	r2, ip, r3, r2
 801b4e2:	9d07      	ldr	r5, [sp, #28]
 801b4e4:	eb05 0a02 	add.w	sl, r5, r2
 801b4e8:	5caa      	ldrb	r2, [r5, r2]
 801b4ea:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801b4ee:	2800      	cmp	r0, #0
 801b4f0:	f000 80c0 	beq.w	801b674 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b4f4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b4f8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801b4fc:	920b      	str	r2, [sp, #44]	; 0x2c
 801b4fe:	b151      	cbz	r1, 801b516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b500:	eb0a 0203 	add.w	r2, sl, r3
 801b504:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801b508:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b50c:	9309      	str	r3, [sp, #36]	; 0x24
 801b50e:	7853      	ldrb	r3, [r2, #1]
 801b510:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b514:	930c      	str	r3, [sp, #48]	; 0x30
 801b516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b518:	fb10 f201 	smulbb	r2, r0, r1
 801b51c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b520:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b524:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b528:	ea4c 0c03 	orr.w	ip, ip, r3
 801b52c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b52e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b530:	041b      	lsls	r3, r3, #16
 801b532:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b536:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b53a:	10d2      	asrs	r2, r2, #3
 801b53c:	432b      	orrs	r3, r5
 801b53e:	4353      	muls	r3, r2
 801b540:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801b544:	fb0a 330c 	mla	r3, sl, ip, r3
 801b548:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801b54c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b550:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b554:	ea4c 0e0e 	orr.w	lr, ip, lr
 801b558:	f1c1 0c10 	rsb	ip, r1, #16
 801b55c:	ebac 0c00 	sub.w	ip, ip, r0
 801b560:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b564:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b56a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801b56e:	0418      	lsls	r0, r3, #16
 801b570:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b574:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b578:	4318      	orrs	r0, r3
 801b57a:	fb02 c200 	mla	r2, r2, r0, ip
 801b57e:	0d53      	lsrs	r3, r2, #21
 801b580:	0952      	lsrs	r2, r2, #5
 801b582:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b586:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b58a:	431a      	orrs	r2, r3
 801b58c:	f8a8 2000 	strh.w	r2, [r8]
 801b590:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b592:	f108 0802 	add.w	r8, r8, #2
 801b596:	441c      	add	r4, r3
 801b598:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b59a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b59e:	441e      	add	r6, r3
 801b5a0:	e77c      	b.n	801b49c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b5a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b5a4:	f109 0902 	add.w	r9, r9, #2
 801b5a8:	441c      	add	r4, r3
 801b5aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5ac:	441e      	add	r6, r3
 801b5ae:	9b06      	ldr	r3, [sp, #24]
 801b5b0:	3b01      	subs	r3, #1
 801b5b2:	9306      	str	r3, [sp, #24]
 801b5b4:	e752      	b.n	801b45c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b5b6:	d020      	beq.n	801b5fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b5b8:	9b06      	ldr	r3, [sp, #24]
 801b5ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b5bc:	3b01      	subs	r3, #1
 801b5be:	fb00 4003 	mla	r0, r0, r3, r4
 801b5c2:	1400      	asrs	r0, r0, #16
 801b5c4:	f53f af67 	bmi.w	801b496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b5c8:	3901      	subs	r1, #1
 801b5ca:	4288      	cmp	r0, r1
 801b5cc:	f6bf af63 	bge.w	801b496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b5d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b5d2:	fb01 6303 	mla	r3, r1, r3, r6
 801b5d6:	141b      	asrs	r3, r3, #16
 801b5d8:	f53f af5d 	bmi.w	801b496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b5dc:	3a01      	subs	r2, #1
 801b5de:	4293      	cmp	r3, r2
 801b5e0:	f6bf af59 	bge.w	801b496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b5e4:	46ca      	mov	sl, r9
 801b5e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b5ea:	f1b8 0f00 	cmp.w	r8, #0
 801b5ee:	dc67      	bgt.n	801b6c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b5f0:	9b06      	ldr	r3, [sp, #24]
 801b5f2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801b5f6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801b5fa:	9b08      	ldr	r3, [sp, #32]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	f340 80d7 	ble.w	801b7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801b602:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b606:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b60a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b60e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b612:	eeb0 6a62 	vmov.f32	s12, s5
 801b616:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b61a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b61e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b626:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b62a:	ee16 4a10 	vmov	r4, s12
 801b62e:	eeb0 6a43 	vmov.f32	s12, s6
 801b632:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b636:	ee12 2a90 	vmov	r2, s5
 801b63a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b63e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b640:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b644:	fb92 f3f3 	sdiv	r3, r2, r3
 801b648:	ee13 2a10 	vmov	r2, s6
 801b64c:	931f      	str	r3, [sp, #124]	; 0x7c
 801b64e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b650:	ee16 6a10 	vmov	r6, s12
 801b654:	fb92 f3f3 	sdiv	r3, r2, r3
 801b658:	9320      	str	r3, [sp, #128]	; 0x80
 801b65a:	9b08      	ldr	r3, [sp, #32]
 801b65c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b65e:	3b01      	subs	r3, #1
 801b660:	9308      	str	r3, [sp, #32]
 801b662:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b664:	bf08      	it	eq
 801b666:	4613      	moveq	r3, r2
 801b668:	eeb0 3a67 	vmov.f32	s6, s15
 801b66c:	9306      	str	r3, [sp, #24]
 801b66e:	eef0 2a47 	vmov.f32	s5, s14
 801b672:	e6e4      	b.n	801b43e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b674:	2900      	cmp	r1, #0
 801b676:	f43f af4e 	beq.w	801b516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b67a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801b67e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b682:	9309      	str	r3, [sp, #36]	; 0x24
 801b684:	e747      	b.n	801b516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b686:	f112 0a01 	adds.w	sl, r2, #1
 801b68a:	d481      	bmi.n	801b590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b68c:	4553      	cmp	r3, sl
 801b68e:	f6ff af7f 	blt.w	801b590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b692:	f11c 0a01 	adds.w	sl, ip, #1
 801b696:	f53f af7b 	bmi.w	801b590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b69a:	45d6      	cmp	lr, sl
 801b69c:	f6ff af78 	blt.w	801b590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6a0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801b6a4:	b21b      	sxth	r3, r3
 801b6a6:	fa0f f28e 	sxth.w	r2, lr
 801b6aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b6ae:	9201      	str	r2, [sp, #4]
 801b6b0:	9300      	str	r3, [sp, #0]
 801b6b2:	9a07      	ldr	r2, [sp, #28]
 801b6b4:	463b      	mov	r3, r7
 801b6b6:	4641      	mov	r1, r8
 801b6b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b6ba:	f7ff fe21 	bl	801b300 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801b6be:	e767      	b.n	801b590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b6c2:	1422      	asrs	r2, r4, #16
 801b6c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b6c8:	1431      	asrs	r1, r6, #16
 801b6ca:	fb03 2101 	mla	r1, r3, r1, r2
 801b6ce:	9d07      	ldr	r5, [sp, #28]
 801b6d0:	9a07      	ldr	r2, [sp, #28]
 801b6d2:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801b6d6:	440a      	add	r2, r1
 801b6d8:	5c69      	ldrb	r1, [r5, r1]
 801b6da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b6de:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801b6e2:	f1be 0f00 	cmp.w	lr, #0
 801b6e6:	d05c      	beq.n	801b7a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801b6e8:	f892 c001 	ldrb.w	ip, [r2, #1]
 801b6ec:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801b6f0:	950d      	str	r5, [sp, #52]	; 0x34
 801b6f2:	b150      	cbz	r0, 801b70a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b6f4:	eb02 0c03 	add.w	ip, r2, r3
 801b6f8:	5cd3      	ldrb	r3, [r2, r3]
 801b6fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b6fe:	930a      	str	r3, [sp, #40]	; 0x28
 801b700:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b704:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b708:	930e      	str	r3, [sp, #56]	; 0x38
 801b70a:	fb1e f200 	smulbb	r2, lr, r0
 801b70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b710:	10d2      	asrs	r2, r2, #3
 801b712:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b716:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b71a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b71e:	ea4c 0c03 	orr.w	ip, ip, r3
 801b722:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801b726:	9311      	str	r3, [sp, #68]	; 0x44
 801b728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b72a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b72c:	041b      	lsls	r3, r3, #16
 801b72e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801b732:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b736:	ea43 030b 	orr.w	r3, r3, fp
 801b73a:	4353      	muls	r3, r2
 801b73c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b73e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b742:	fb05 3c0c 	mla	ip, r5, ip, r3
 801b746:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b74a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801b74e:	ea43 0b01 	orr.w	fp, r3, r1
 801b752:	f1c0 0110 	rsb	r1, r0, #16
 801b756:	eba1 0e0e 	sub.w	lr, r1, lr
 801b75a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801b75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b760:	fb0e cc0b 	mla	ip, lr, fp, ip
 801b764:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801b768:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801b76c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b770:	ea4b 0e0e 	orr.w	lr, fp, lr
 801b774:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b778:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b77c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801b780:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b784:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b788:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b78c:	ea43 0c0c 	orr.w	ip, r3, ip
 801b790:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b792:	f82a cb02 	strh.w	ip, [sl], #2
 801b796:	441c      	add	r4, r3
 801b798:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b79a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b79e:	441e      	add	r6, r3
 801b7a0:	e723      	b.n	801b5ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b7a2:	2800      	cmp	r0, #0
 801b7a4:	d0b1      	beq.n	801b70a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b7a6:	5cd3      	ldrb	r3, [r2, r3]
 801b7a8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b7ac:	930a      	str	r3, [sp, #40]	; 0x28
 801b7ae:	e7ac      	b.n	801b70a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b7b0:	b013      	add	sp, #76	; 0x4c
 801b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801b7b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ba:	880d      	ldrh	r5, [r1, #0]
 801b7bc:	b087      	sub	sp, #28
 801b7be:	10ef      	asrs	r7, r5, #3
 801b7c0:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801b7c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7c8:	00ed      	lsls	r5, r5, #3
 801b7ca:	9701      	str	r7, [sp, #4]
 801b7cc:	b2ed      	uxtb	r5, r5
 801b7ce:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801b7d2:	9502      	str	r5, [sp, #8]
 801b7d4:	9d01      	ldr	r5, [sp, #4]
 801b7d6:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801b7da:	fb06 0709 	mla	r7, r6, r9, r0
 801b7de:	9103      	str	r1, [sp, #12]
 801b7e0:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801b7e4:	022d      	lsls	r5, r5, #8
 801b7e6:	9902      	ldr	r1, [sp, #8]
 801b7e8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801b7ec:	430d      	orrs	r5, r1
 801b7ee:	2e00      	cmp	r6, #0
 801b7f0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801b7f4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801b7f8:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801b7fc:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801b800:	eb02 0c07 	add.w	ip, r2, r7
 801b804:	9505      	str	r5, [sp, #20]
 801b806:	f2c0 80b6 	blt.w	801b976 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801b80a:	45b3      	cmp	fp, r6
 801b80c:	f340 80b3 	ble.w	801b976 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801b810:	2800      	cmp	r0, #0
 801b812:	f2c0 80ae 	blt.w	801b972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801b816:	4581      	cmp	r9, r0
 801b818:	f340 80ab 	ble.w	801b972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801b81c:	5dd7      	ldrb	r7, [r2, r7]
 801b81e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b822:	441f      	add	r7, r3
 801b824:	1c42      	adds	r2, r0, #1
 801b826:	f100 80a9 	bmi.w	801b97c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b82a:	4591      	cmp	r9, r2
 801b82c:	f340 80a6 	ble.w	801b97c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b830:	2c00      	cmp	r4, #0
 801b832:	f000 80a3 	beq.w	801b97c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b836:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801b83a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b83e:	441d      	add	r5, r3
 801b840:	3601      	adds	r6, #1
 801b842:	f100 809f 	bmi.w	801b984 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b846:	45b3      	cmp	fp, r6
 801b848:	f340 809c 	ble.w	801b984 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b84c:	f1be 0f00 	cmp.w	lr, #0
 801b850:	f000 8098 	beq.w	801b984 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b854:	2800      	cmp	r0, #0
 801b856:	f2c0 8093 	blt.w	801b980 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801b85a:	4581      	cmp	r9, r0
 801b85c:	f340 8090 	ble.w	801b980 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801b860:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801b864:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b868:	441e      	add	r6, r3
 801b86a:	3001      	adds	r0, #1
 801b86c:	f100 808d 	bmi.w	801b98a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b870:	4581      	cmp	r9, r0
 801b872:	f340 808a 	ble.w	801b98a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b876:	2c00      	cmp	r4, #0
 801b878:	f000 8087 	beq.w	801b98a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b87c:	44e1      	add	r9, ip
 801b87e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b882:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b886:	4413      	add	r3, r2
 801b888:	b2a4      	uxth	r4, r4
 801b88a:	fa1f fe8e 	uxth.w	lr, lr
 801b88e:	fb04 fb0e 	mul.w	fp, r4, lr
 801b892:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801b896:	fa1f f08e 	uxth.w	r0, lr
 801b89a:	fa1f fe88 	uxth.w	lr, r8
 801b89e:	ea6f 0808 	mvn.w	r8, r8
 801b8a2:	0124      	lsls	r4, r4, #4
 801b8a4:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801b8a8:	eba4 040b 	sub.w	r4, r4, fp
 801b8ac:	b2a2      	uxth	r2, r4
 801b8ae:	78ac      	ldrb	r4, [r5, #2]
 801b8b0:	f897 c002 	ldrb.w	ip, [r7, #2]
 801b8b4:	4354      	muls	r4, r2
 801b8b6:	eba9 0900 	sub.w	r9, r9, r0
 801b8ba:	fa1f f989 	uxth.w	r9, r9
 801b8be:	fb09 440c 	mla	r4, r9, ip, r4
 801b8c2:	f896 c002 	ldrb.w	ip, [r6, #2]
 801b8c6:	fa5f f888 	uxtb.w	r8, r8
 801b8ca:	fb00 440c 	mla	r4, r0, ip, r4
 801b8ce:	f893 c002 	ldrb.w	ip, [r3, #2]
 801b8d2:	fb1a fa08 	smulbb	sl, sl, r8
 801b8d6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801b8da:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b8de:	fb0c ac0e 	mla	ip, ip, lr, sl
 801b8e2:	f895 a001 	ldrb.w	sl, [r5, #1]
 801b8e6:	782d      	ldrb	r5, [r5, #0]
 801b8e8:	fb02 fa0a 	mul.w	sl, r2, sl
 801b8ec:	436a      	muls	r2, r5
 801b8ee:	787c      	ldrb	r4, [r7, #1]
 801b8f0:	783f      	ldrb	r7, [r7, #0]
 801b8f2:	fb09 aa04 	mla	sl, r9, r4, sl
 801b8f6:	fb09 2207 	mla	r2, r9, r7, r2
 801b8fa:	7874      	ldrb	r4, [r6, #1]
 801b8fc:	7835      	ldrb	r5, [r6, #0]
 801b8fe:	fb00 aa04 	mla	sl, r0, r4, sl
 801b902:	fb00 2005 	mla	r0, r0, r5, r2
 801b906:	785c      	ldrb	r4, [r3, #1]
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	fb0b a404 	mla	r4, fp, r4, sl
 801b90e:	9901      	ldr	r1, [sp, #4]
 801b910:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b914:	9b02      	ldr	r3, [sp, #8]
 801b916:	fb11 fa08 	smulbb	sl, r1, r8
 801b91a:	fb13 f808 	smulbb	r8, r3, r8
 801b91e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b922:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b926:	fb04 a40e 	mla	r4, r4, lr, sl
 801b92a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801b92e:	fa1f fc8c 	uxth.w	ip, ip
 801b932:	f10c 0301 	add.w	r3, ip, #1
 801b936:	fa1f fe8e 	uxth.w	lr, lr
 801b93a:	b2a4      	uxth	r4, r4
 801b93c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b940:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801b944:	f104 0a01 	add.w	sl, r4, #1
 801b948:	f10e 0c01 	add.w	ip, lr, #1
 801b94c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b950:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b954:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b958:	0964      	lsrs	r4, r4, #5
 801b95a:	ea4c 0c03 	orr.w	ip, ip, r3
 801b95e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b962:	9b03      	ldr	r3, [sp, #12]
 801b964:	ea4c 0c04 	orr.w	ip, ip, r4
 801b968:	f8a3 c000 	strh.w	ip, [r3]
 801b96c:	b007      	add	sp, #28
 801b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b972:	af05      	add	r7, sp, #20
 801b974:	e756      	b.n	801b824 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801b976:	ad05      	add	r5, sp, #20
 801b978:	462f      	mov	r7, r5
 801b97a:	e761      	b.n	801b840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801b97c:	ad05      	add	r5, sp, #20
 801b97e:	e75f      	b.n	801b840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801b980:	ae05      	add	r6, sp, #20
 801b982:	e772      	b.n	801b86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801b984:	ab05      	add	r3, sp, #20
 801b986:	461e      	mov	r6, r3
 801b988:	e77e      	b.n	801b888 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801b98a:	ab05      	add	r3, sp, #20
 801b98c:	e77c      	b.n	801b888 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801b98e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b98e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b992:	b095      	sub	sp, #84	; 0x54
 801b994:	9212      	str	r2, [sp, #72]	; 0x48
 801b996:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801b998:	9013      	str	r0, [sp, #76]	; 0x4c
 801b99a:	9309      	str	r3, [sp, #36]	; 0x24
 801b99c:	6850      	ldr	r0, [r2, #4]
 801b99e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b9a2:	910e      	str	r1, [sp, #56]	; 0x38
 801b9a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9a6:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801b9aa:	fb00 1303 	mla	r3, r0, r3, r1
 801b9ae:	6812      	ldr	r2, [r2, #0]
 801b9b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b9b4:	930a      	str	r3, [sp, #40]	; 0x28
 801b9b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	930d      	str	r3, [sp, #52]	; 0x34
 801b9bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9be:	685c      	ldr	r4, [r3, #4]
 801b9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9c2:	3404      	adds	r4, #4
 801b9c4:	43db      	mvns	r3, r3
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	dc03      	bgt.n	801b9d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b9d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	f340 8255 	ble.w	801be82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801b9d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9e2:	1e48      	subs	r0, r1, #1
 801b9e4:	1e55      	subs	r5, r2, #1
 801b9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	f340 80f9 	ble.w	801bbe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b9ee:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801b9f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b9f2:	1436      	asrs	r6, r6, #16
 801b9f4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b9f8:	d406      	bmi.n	801ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b9fa:	4286      	cmp	r6, r0
 801b9fc:	da04      	bge.n	801ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	db02      	blt.n	801ba08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba02:	42ab      	cmp	r3, r5
 801ba04:	f2c0 80ed 	blt.w	801bbe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ba08:	3601      	adds	r6, #1
 801ba0a:	f100 80da 	bmi.w	801bbc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba0e:	42b1      	cmp	r1, r6
 801ba10:	f2c0 80d7 	blt.w	801bbc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba14:	3301      	adds	r3, #1
 801ba16:	f100 80d4 	bmi.w	801bbc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	f2c0 80d1 	blt.w	801bbc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba22:	9311      	str	r3, [sp, #68]	; 0x44
 801ba24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba26:	930c      	str	r3, [sp, #48]	; 0x30
 801ba28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	f340 80fa 	ble.w	801bc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ba30:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ba32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ba36:	68c6      	ldr	r6, [r0, #12]
 801ba38:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ba3a:	141d      	asrs	r5, r3, #16
 801ba3c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ba40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ba42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ba44:	1400      	asrs	r0, r0, #16
 801ba46:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ba4a:	6892      	ldr	r2, [r2, #8]
 801ba4c:	f100 813e 	bmi.w	801bccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba50:	1e57      	subs	r7, r2, #1
 801ba52:	42b8      	cmp	r0, r7
 801ba54:	f280 813a 	bge.w	801bccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba58:	2d00      	cmp	r5, #0
 801ba5a:	f2c0 8137 	blt.w	801bccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba5e:	1e77      	subs	r7, r6, #1
 801ba60:	42bd      	cmp	r5, r7
 801ba62:	f280 8133 	bge.w	801bccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba66:	b212      	sxth	r2, r2
 801ba68:	fb05 0002 	mla	r0, r5, r2, r0
 801ba6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ba6e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801ba72:	182e      	adds	r6, r5, r0
 801ba74:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801ba78:	eb04 050a 	add.w	r5, r4, sl
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	f000 8117 	beq.w	801bcb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba82:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ba86:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ba8a:	44a4      	add	ip, r4
 801ba8c:	2900      	cmp	r1, #0
 801ba8e:	f000 8117 	beq.w	801bcc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ba92:	18b0      	adds	r0, r6, r2
 801ba94:	7840      	ldrb	r0, [r0, #1]
 801ba96:	5cb2      	ldrb	r2, [r6, r2]
 801ba98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ba9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801baa0:	4422      	add	r2, r4
 801baa2:	4420      	add	r0, r4
 801baa4:	b29b      	uxth	r3, r3
 801baa6:	b289      	uxth	r1, r1
 801baa8:	fb03 f901 	mul.w	r9, r3, r1
 801baac:	011b      	lsls	r3, r3, #4
 801baae:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801bab2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801bab6:	eba3 0309 	sub.w	r3, r3, r9
 801baba:	b29b      	uxth	r3, r3
 801babc:	435f      	muls	r7, r3
 801babe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bac2:	b289      	uxth	r1, r1
 801bac4:	f895 b002 	ldrb.w	fp, [r5, #2]
 801bac8:	eba8 0801 	sub.w	r8, r8, r1
 801bacc:	fa1f f888 	uxth.w	r8, r8
 801bad0:	fb08 770b 	mla	r7, r8, fp, r7
 801bad4:	f892 b002 	ldrb.w	fp, [r2, #2]
 801bad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bada:	fb01 770b 	mla	r7, r1, fp, r7
 801bade:	f8b6 e000 	ldrh.w	lr, [r6]
 801bae2:	f890 b002 	ldrb.w	fp, [r0, #2]
 801bae6:	9310      	str	r3, [sp, #64]	; 0x40
 801bae8:	fb09 770b 	mla	r7, r9, fp, r7
 801baec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baee:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801baf2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801baf6:	fb1b fb03 	smulbb	fp, fp, r3
 801bafa:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801bafe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801bb02:	fb07 b706 	mla	r7, r7, r6, fp
 801bb06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb08:	f895 b001 	ldrb.w	fp, [r5, #1]
 801bb0c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801bb10:	f89c c000 	ldrb.w	ip, [ip]
 801bb14:	435d      	muls	r5, r3
 801bb16:	fb08 550b 	mla	r5, r8, fp, r5
 801bb1a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb20:	fb01 550b 	mla	r5, r1, fp, r5
 801bb24:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bb28:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801bb2c:	fb09 550b 	mla	r5, r9, fp, r5
 801bb30:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801bb34:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bb38:	fb1b fb03 	smulbb	fp, fp, r3
 801bb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb3e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bb42:	fb03 f30c 	mul.w	r3, r3, ip
 801bb46:	fb08 330a 	mla	r3, r8, sl, r3
 801bb4a:	f892 c000 	ldrb.w	ip, [r2]
 801bb4e:	fa5f fe8e 	uxtb.w	lr, lr
 801bb52:	fb01 330c 	mla	r3, r1, ip, r3
 801bb56:	f890 c000 	ldrb.w	ip, [r0]
 801bb5a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801bb5e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb64:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bb68:	fb1e fe03 	smulbb	lr, lr, r3
 801bb6c:	fb05 b506 	mla	r5, r5, r6, fp
 801bb70:	fb0c e606 	mla	r6, ip, r6, lr
 801bb74:	b2bf      	uxth	r7, r7
 801bb76:	1c7b      	adds	r3, r7, #1
 801bb78:	b2ad      	uxth	r5, r5
 801bb7a:	b2b6      	uxth	r6, r6
 801bb7c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801bb80:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801bb84:	f105 0b01 	add.w	fp, r5, #1
 801bb88:	1c77      	adds	r7, r6, #1
 801bb8a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801bb8e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801bb92:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bb96:	096d      	lsrs	r5, r5, #5
 801bb98:	431f      	orrs	r7, r3
 801bb9a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bb9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bba0:	433d      	orrs	r5, r7
 801bba2:	801d      	strh	r5, [r3, #0]
 801bba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bba6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bba8:	3302      	adds	r3, #2
 801bbaa:	930c      	str	r3, [sp, #48]	; 0x30
 801bbac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbae:	4413      	add	r3, r2
 801bbb0:	931f      	str	r3, [sp, #124]	; 0x7c
 801bbb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bbb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbb6:	4413      	add	r3, r2
 801bbb8:	9320      	str	r3, [sp, #128]	; 0x80
 801bbba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bbbc:	3b01      	subs	r3, #1
 801bbbe:	9311      	str	r3, [sp, #68]	; 0x44
 801bbc0:	e732      	b.n	801ba28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bbc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbc4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801bbc6:	4433      	add	r3, r6
 801bbc8:	931f      	str	r3, [sp, #124]	; 0x7c
 801bbca:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801bbcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbce:	4433      	add	r3, r6
 801bbd0:	9320      	str	r3, [sp, #128]	; 0x80
 801bbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbd4:	3b01      	subs	r3, #1
 801bbd6:	9309      	str	r3, [sp, #36]	; 0x24
 801bbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbda:	3302      	adds	r3, #2
 801bbdc:	930a      	str	r3, [sp, #40]	; 0x28
 801bbde:	e702      	b.n	801b9e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bbe0:	d027      	beq.n	801bc32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbe4:	9821      	ldr	r0, [sp, #132]	; 0x84
 801bbe6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801bbe8:	3b01      	subs	r3, #1
 801bbea:	fb00 5003 	mla	r0, r0, r3, r5
 801bbee:	1400      	asrs	r0, r0, #16
 801bbf0:	f53f af16 	bmi.w	801ba20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bbf4:	3901      	subs	r1, #1
 801bbf6:	4288      	cmp	r0, r1
 801bbf8:	f6bf af12 	bge.w	801ba20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bbfc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801bbfe:	9820      	ldr	r0, [sp, #128]	; 0x80
 801bc00:	fb01 0303 	mla	r3, r1, r3, r0
 801bc04:	141b      	asrs	r3, r3, #16
 801bc06:	f53f af0b 	bmi.w	801ba20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc0a:	3a01      	subs	r2, #1
 801bc0c:	4293      	cmp	r3, r2
 801bc0e:	f6bf af07 	bge.w	801ba20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc14:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801bc18:	9311      	str	r3, [sp, #68]	; 0x44
 801bc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc1c:	930c      	str	r3, [sp, #48]	; 0x30
 801bc1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	dc70      	bgt.n	801bd06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bc30:	930a      	str	r3, [sp, #40]	; 0x28
 801bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	f340 8124 	ble.w	801be82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801bc3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc4e:	eef0 6a62 	vmov.f32	s13, s5
 801bc52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc66:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801bc6a:	eef0 6a43 	vmov.f32	s13, s6
 801bc6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc72:	ee12 2a90 	vmov	r2, s5
 801bc76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bc7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bc7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc80:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc84:	ee13 2a10 	vmov	r2, s6
 801bc88:	9321      	str	r3, [sp, #132]	; 0x84
 801bc8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bc8c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801bc90:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc94:	9322      	str	r3, [sp, #136]	; 0x88
 801bc96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc9a:	3b01      	subs	r3, #1
 801bc9c:	930e      	str	r3, [sp, #56]	; 0x38
 801bc9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bca0:	bf08      	it	eq
 801bca2:	4613      	moveq	r3, r2
 801bca4:	eeb0 3a67 	vmov.f32	s6, s15
 801bca8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcaa:	eef0 2a47 	vmov.f32	s5, s14
 801bcae:	e68c      	b.n	801b9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bcb0:	b149      	cbz	r1, 801bcc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801bcb2:	4628      	mov	r0, r5
 801bcb4:	5cb2      	ldrb	r2, [r6, r2]
 801bcb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bcba:	4422      	add	r2, r4
 801bcbc:	46ac      	mov	ip, r5
 801bcbe:	e6f1      	b.n	801baa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcc0:	4628      	mov	r0, r5
 801bcc2:	462a      	mov	r2, r5
 801bcc4:	e6ee      	b.n	801baa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcc6:	4628      	mov	r0, r5
 801bcc8:	462a      	mov	r2, r5
 801bcca:	e7f7      	b.n	801bcbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801bccc:	1c47      	adds	r7, r0, #1
 801bcce:	f53f af69 	bmi.w	801bba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bcd2:	42ba      	cmp	r2, r7
 801bcd4:	f6ff af66 	blt.w	801bba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bcd8:	1c6f      	adds	r7, r5, #1
 801bcda:	f53f af63 	bmi.w	801bba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bcde:	42be      	cmp	r6, r7
 801bce0:	f6ff af60 	blt.w	801bba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bce4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bce6:	b236      	sxth	r6, r6
 801bce8:	b212      	sxth	r2, r2
 801bcea:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801bcee:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801bcf2:	9002      	str	r0, [sp, #8]
 801bcf4:	9200      	str	r2, [sp, #0]
 801bcf6:	9601      	str	r6, [sp, #4]
 801bcf8:	4623      	mov	r3, r4
 801bcfa:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801bcfe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bd00:	f7ff fd59 	bl	801b7b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801bd04:	e74e      	b.n	801bba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bd08:	9820      	ldr	r0, [sp, #128]	; 0x80
 801bd0a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bd0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bd10:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801bd12:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801bd16:	142d      	asrs	r5, r5, #16
 801bd18:	1400      	asrs	r0, r0, #16
 801bd1a:	fb02 5000 	mla	r0, r2, r0, r5
 801bd1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bd20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bd22:	f815 9000 	ldrb.w	r9, [r5, r0]
 801bd26:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bd2a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bd2e:	182e      	adds	r6, r5, r0
 801bd30:	eb04 0509 	add.w	r5, r4, r9
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	f000 8096 	beq.w	801be66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801bd3a:	7877      	ldrb	r7, [r6, #1]
 801bd3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bd40:	4427      	add	r7, r4
 801bd42:	2900      	cmp	r1, #0
 801bd44:	f000 8097 	beq.w	801be76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801bd48:	18b0      	adds	r0, r6, r2
 801bd4a:	7840      	ldrb	r0, [r0, #1]
 801bd4c:	5cb2      	ldrb	r2, [r6, r2]
 801bd4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd56:	4422      	add	r2, r4
 801bd58:	4420      	add	r0, r4
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	b289      	uxth	r1, r1
 801bd5e:	fb03 f801 	mul.w	r8, r3, r1
 801bd62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bd64:	011b      	lsls	r3, r3, #4
 801bd66:	f8b6 c000 	ldrh.w	ip, [r6]
 801bd6a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801bd6e:	78be      	ldrb	r6, [r7, #2]
 801bd70:	eba3 0308 	sub.w	r3, r3, r8
 801bd74:	b29b      	uxth	r3, r3
 801bd76:	435e      	muls	r6, r3
 801bd78:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801bd7c:	b289      	uxth	r1, r1
 801bd7e:	f895 b002 	ldrb.w	fp, [r5, #2]
 801bd82:	ebae 0e01 	sub.w	lr, lr, r1
 801bd86:	fa1f fe8e 	uxth.w	lr, lr
 801bd8a:	fb0e 660b 	mla	r6, lr, fp, r6
 801bd8e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801bd92:	9310      	str	r3, [sp, #64]	; 0x40
 801bd94:	fb01 660b 	mla	r6, r1, fp, r6
 801bd98:	f890 b002 	ldrb.w	fp, [r0, #2]
 801bd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd9e:	fb08 660b 	mla	r6, r8, fp, r6
 801bda2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801bda6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801bdaa:	fb1b fb03 	smulbb	fp, fp, r3
 801bdae:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801bdb2:	fb06 b60a 	mla	r6, r6, sl, fp
 801bdb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdb8:	f895 b001 	ldrb.w	fp, [r5, #1]
 801bdbc:	787d      	ldrb	r5, [r7, #1]
 801bdbe:	783f      	ldrb	r7, [r7, #0]
 801bdc0:	435d      	muls	r5, r3
 801bdc2:	fb0e 550b 	mla	r5, lr, fp, r5
 801bdc6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdcc:	fb01 550b 	mla	r5, r1, fp, r5
 801bdd0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bdd4:	f814 9009 	ldrb.w	r9, [r4, r9]
 801bdd8:	fb08 550b 	mla	r5, r8, fp, r5
 801bddc:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801bde0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bde4:	fb1b fb03 	smulbb	fp, fp, r3
 801bde8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bdee:	437b      	muls	r3, r7
 801bdf0:	fb0e 3309 	mla	r3, lr, r9, r3
 801bdf4:	7817      	ldrb	r7, [r2, #0]
 801bdf6:	fa5f fc8c 	uxtb.w	ip, ip
 801bdfa:	fb01 3307 	mla	r3, r1, r7, r3
 801bdfe:	7807      	ldrb	r7, [r0, #0]
 801be00:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801be04:	fb08 3707 	mla	r7, r8, r7, r3
 801be08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be0a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801be0e:	fb1c fc03 	smulbb	ip, ip, r3
 801be12:	fb05 b50a 	mla	r5, r5, sl, fp
 801be16:	fb07 c70a 	mla	r7, r7, sl, ip
 801be1a:	b2b6      	uxth	r6, r6
 801be1c:	b2ad      	uxth	r5, r5
 801be1e:	b2bf      	uxth	r7, r7
 801be20:	1c73      	adds	r3, r6, #1
 801be22:	1c7a      	adds	r2, r7, #1
 801be24:	f105 0b01 	add.w	fp, r5, #1
 801be28:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801be2c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801be30:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801be34:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801be38:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801be3c:	096d      	lsrs	r5, r5, #5
 801be3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be40:	4316      	orrs	r6, r2
 801be42:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801be46:	432e      	orrs	r6, r5
 801be48:	f823 6b02 	strh.w	r6, [r3], #2
 801be4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801be4e:	930c      	str	r3, [sp, #48]	; 0x30
 801be50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801be52:	4413      	add	r3, r2
 801be54:	931f      	str	r3, [sp, #124]	; 0x7c
 801be56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801be58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be5a:	4413      	add	r3, r2
 801be5c:	9320      	str	r3, [sp, #128]	; 0x80
 801be5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be60:	3b01      	subs	r3, #1
 801be62:	9311      	str	r3, [sp, #68]	; 0x44
 801be64:	e6db      	b.n	801bc1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801be66:	b149      	cbz	r1, 801be7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801be68:	4628      	mov	r0, r5
 801be6a:	5cb2      	ldrb	r2, [r6, r2]
 801be6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be70:	4422      	add	r2, r4
 801be72:	462f      	mov	r7, r5
 801be74:	e771      	b.n	801bd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801be76:	4628      	mov	r0, r5
 801be78:	462a      	mov	r2, r5
 801be7a:	e76e      	b.n	801bd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801be7c:	4628      	mov	r0, r5
 801be7e:	462a      	mov	r2, r5
 801be80:	e7f7      	b.n	801be72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801be82:	b015      	add	sp, #84	; 0x54
 801be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801be88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be8c:	880f      	ldrh	r7, [r1, #0]
 801be8e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801be92:	023c      	lsls	r4, r7, #8
 801be94:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801be98:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801be9c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801bea0:	017c      	lsls	r4, r7, #5
 801bea2:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801bea6:	00ff      	lsls	r7, r7, #3
 801bea8:	ea4b 0404 	orr.w	r4, fp, r4
 801beac:	b2ff      	uxtb	r7, r7
 801beae:	4327      	orrs	r7, r4
 801beb0:	2d00      	cmp	r5, #0
 801beb2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801beb6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801beba:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801bebe:	eb02 080a 	add.w	r8, r2, sl
 801bec2:	9701      	str	r7, [sp, #4]
 801bec4:	db7e      	blt.n	801bfc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801bec6:	45a9      	cmp	r9, r5
 801bec8:	dd7c      	ble.n	801bfc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801beca:	f1bc 0f00 	cmp.w	ip, #0
 801bece:	db77      	blt.n	801bfc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801bed0:	45e6      	cmp	lr, ip
 801bed2:	dd75      	ble.n	801bfc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801bed4:	f812 700a 	ldrb.w	r7, [r2, sl]
 801bed8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bedc:	441f      	add	r7, r3
 801bede:	f11c 0201 	adds.w	r2, ip, #1
 801bee2:	d472      	bmi.n	801bfca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801bee4:	4596      	cmp	lr, r2
 801bee6:	dd70      	ble.n	801bfca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801bee8:	2800      	cmp	r0, #0
 801beea:	d06e      	beq.n	801bfca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801beec:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bef0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bef4:	441c      	add	r4, r3
 801bef6:	3501      	adds	r5, #1
 801bef8:	d46b      	bmi.n	801bfd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801befa:	45a9      	cmp	r9, r5
 801befc:	dd69      	ble.n	801bfd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801befe:	2e00      	cmp	r6, #0
 801bf00:	d067      	beq.n	801bfd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801bf02:	f1bc 0f00 	cmp.w	ip, #0
 801bf06:	db62      	blt.n	801bfce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801bf08:	45e6      	cmp	lr, ip
 801bf0a:	dd60      	ble.n	801bfce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801bf0c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801bf10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf14:	441d      	add	r5, r3
 801bf16:	f11c 0201 	adds.w	r2, ip, #1
 801bf1a:	d45d      	bmi.n	801bfd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf1c:	4596      	cmp	lr, r2
 801bf1e:	dd5b      	ble.n	801bfd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf20:	2800      	cmp	r0, #0
 801bf22:	d059      	beq.n	801bfd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf24:	44c6      	add	lr, r8
 801bf26:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bf2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf2e:	4413      	add	r3, r2
 801bf30:	b280      	uxth	r0, r0
 801bf32:	b2b2      	uxth	r2, r6
 801bf34:	fb00 f602 	mul.w	r6, r0, r2
 801bf38:	0100      	lsls	r0, r0, #4
 801bf3a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801bf3e:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801bf42:	1b80      	subs	r0, r0, r6
 801bf44:	fa1f fc82 	uxth.w	ip, r2
 801bf48:	b282      	uxth	r2, r0
 801bf4a:	78a0      	ldrb	r0, [r4, #2]
 801bf4c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801bf50:	4350      	muls	r0, r2
 801bf52:	eba8 080c 	sub.w	r8, r8, ip
 801bf56:	fa1f f888 	uxth.w	r8, r8
 801bf5a:	fb08 0e0e 	mla	lr, r8, lr, r0
 801bf5e:	78a8      	ldrb	r0, [r5, #2]
 801bf60:	f897 9000 	ldrb.w	r9, [r7]
 801bf64:	fb0c e000 	mla	r0, ip, r0, lr
 801bf68:	f893 e002 	ldrb.w	lr, [r3, #2]
 801bf6c:	787f      	ldrb	r7, [r7, #1]
 801bf6e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801bf72:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801bf76:	f894 e000 	ldrb.w	lr, [r4]
 801bf7a:	fb02 fe0e 	mul.w	lr, r2, lr
 801bf7e:	fb08 e909 	mla	r9, r8, r9, lr
 801bf82:	f895 e000 	ldrb.w	lr, [r5]
 801bf86:	fb0c 990e 	mla	r9, ip, lr, r9
 801bf8a:	f893 e000 	ldrb.w	lr, [r3]
 801bf8e:	785b      	ldrb	r3, [r3, #1]
 801bf90:	fb06 9e0e 	mla	lr, r6, lr, r9
 801bf94:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801bf98:	ea4e 0e00 	orr.w	lr, lr, r0
 801bf9c:	7860      	ldrb	r0, [r4, #1]
 801bf9e:	4350      	muls	r0, r2
 801bfa0:	fb08 0007 	mla	r0, r8, r7, r0
 801bfa4:	786a      	ldrb	r2, [r5, #1]
 801bfa6:	fb0c 0202 	mla	r2, ip, r2, r0
 801bfaa:	fb06 2303 	mla	r3, r6, r3, r2
 801bfae:	095b      	lsrs	r3, r3, #5
 801bfb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bfb4:	ea4e 0303 	orr.w	r3, lr, r3
 801bfb8:	800b      	strh	r3, [r1, #0]
 801bfba:	b003      	add	sp, #12
 801bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc0:	af01      	add	r7, sp, #4
 801bfc2:	e78c      	b.n	801bede <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801bfc4:	ac01      	add	r4, sp, #4
 801bfc6:	4627      	mov	r7, r4
 801bfc8:	e795      	b.n	801bef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801bfca:	ac01      	add	r4, sp, #4
 801bfcc:	e793      	b.n	801bef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801bfce:	ad01      	add	r5, sp, #4
 801bfd0:	e7a1      	b.n	801bf16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801bfd2:	ab01      	add	r3, sp, #4
 801bfd4:	461d      	mov	r5, r3
 801bfd6:	e7ab      	b.n	801bf30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801bfd8:	ab01      	add	r3, sp, #4
 801bfda:	e7a9      	b.n	801bf30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801bfdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe0:	b08f      	sub	sp, #60	; 0x3c
 801bfe2:	920c      	str	r2, [sp, #48]	; 0x30
 801bfe4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bfe6:	900d      	str	r0, [sp, #52]	; 0x34
 801bfe8:	6850      	ldr	r0, [r2, #4]
 801bfea:	910a      	str	r1, [sp, #40]	; 0x28
 801bfec:	9306      	str	r3, [sp, #24]
 801bfee:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801bff2:	fb00 1303 	mla	r3, r0, r3, r1
 801bff6:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801bffa:	6812      	ldr	r2, [r2, #0]
 801bffc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c000:	9307      	str	r3, [sp, #28]
 801c002:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	9308      	str	r3, [sp, #32]
 801c008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c00a:	685c      	ldr	r4, [r3, #4]
 801c00c:	3404      	adds	r4, #4
 801c00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c010:	2b00      	cmp	r3, #0
 801c012:	dc03      	bgt.n	801c01c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c016:	2b00      	cmp	r3, #0
 801c018:	f340 81d6 	ble.w	801c3c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801c01c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c01e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c022:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c026:	1e48      	subs	r0, r1, #1
 801c028:	1e56      	subs	r6, r2, #1
 801c02a:	9b06      	ldr	r3, [sp, #24]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	f340 80b7 	ble.w	801c1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801c032:	ea5f 472b 	movs.w	r7, fp, asr #16
 801c036:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c03a:	d406      	bmi.n	801c04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c03c:	4287      	cmp	r7, r0
 801c03e:	da04      	bge.n	801c04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c040:	2b00      	cmp	r3, #0
 801c042:	db02      	blt.n	801c04a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c044:	42b3      	cmp	r3, r6
 801c046:	f2c0 80ac 	blt.w	801c1a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c04a:	3701      	adds	r7, #1
 801c04c:	f100 809d 	bmi.w	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c050:	42b9      	cmp	r1, r7
 801c052:	f2c0 809a 	blt.w	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c056:	3301      	adds	r3, #1
 801c058:	f100 8097 	bmi.w	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c05c:	429a      	cmp	r2, r3
 801c05e:	f2c0 8094 	blt.w	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c062:	9b06      	ldr	r3, [sp, #24]
 801c064:	930b      	str	r3, [sp, #44]	; 0x2c
 801c066:	9b07      	ldr	r3, [sp, #28]
 801c068:	9309      	str	r3, [sp, #36]	; 0x24
 801c06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	f340 80b5 	ble.w	801c1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c072:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c076:	68c7      	ldr	r7, [r0, #12]
 801c078:	ea5f 402b 	movs.w	r0, fp, asr #16
 801c07c:	ea4f 4625 	mov.w	r6, r5, asr #16
 801c080:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c084:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c088:	6892      	ldr	r2, [r2, #8]
 801c08a:	f100 80fb 	bmi.w	801c284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c08e:	f102 3cff 	add.w	ip, r2, #4294967295
 801c092:	4560      	cmp	r0, ip
 801c094:	f280 80f6 	bge.w	801c284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c098:	2e00      	cmp	r6, #0
 801c09a:	f2c0 80f3 	blt.w	801c284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c09e:	f107 3cff 	add.w	ip, r7, #4294967295
 801c0a2:	4566      	cmp	r6, ip
 801c0a4:	f280 80ee 	bge.w	801c284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c0a8:	b212      	sxth	r2, r2
 801c0aa:	fb06 0002 	mla	r0, r6, r2, r0
 801c0ae:	9e08      	ldr	r6, [sp, #32]
 801c0b0:	1837      	adds	r7, r6, r0
 801c0b2:	5c30      	ldrb	r0, [r6, r0]
 801c0b4:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801c0b8:	eb04 0c08 	add.w	ip, r4, r8
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	f000 80d3 	beq.w	801c268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0c2:	787e      	ldrb	r6, [r7, #1]
 801c0c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c0c8:	4426      	add	r6, r4
 801c0ca:	2900      	cmp	r1, #0
 801c0cc:	f000 80d4 	beq.w	801c278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801c0d0:	18b8      	adds	r0, r7, r2
 801c0d2:	7840      	ldrb	r0, [r0, #1]
 801c0d4:	5cba      	ldrb	r2, [r7, r2]
 801c0d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c0da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c0de:	4422      	add	r2, r4
 801c0e0:	4420      	add	r0, r4
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	b289      	uxth	r1, r1
 801c0e6:	fb03 f901 	mul.w	r9, r3, r1
 801c0ea:	011b      	lsls	r3, r3, #4
 801c0ec:	78b7      	ldrb	r7, [r6, #2]
 801c0ee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c0f2:	eba3 0309 	sub.w	r3, r3, r9
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	435f      	muls	r7, r3
 801c0fa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c0fe:	b289      	uxth	r1, r1
 801c100:	f89c a002 	ldrb.w	sl, [ip, #2]
 801c104:	ebae 0e01 	sub.w	lr, lr, r1
 801c108:	fa1f fe8e 	uxth.w	lr, lr
 801c10c:	fb0e 770a 	mla	r7, lr, sl, r7
 801c110:	f892 a002 	ldrb.w	sl, [r2, #2]
 801c114:	f89c c001 	ldrb.w	ip, [ip, #1]
 801c118:	fb01 770a 	mla	r7, r1, sl, r7
 801c11c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c120:	fb09 7a0a 	mla	sl, r9, sl, r7
 801c124:	f814 7008 	ldrb.w	r7, [r4, r8]
 801c128:	f896 8000 	ldrb.w	r8, [r6]
 801c12c:	7876      	ldrb	r6, [r6, #1]
 801c12e:	fb03 f808 	mul.w	r8, r3, r8
 801c132:	fb0e 8807 	mla	r8, lr, r7, r8
 801c136:	7817      	ldrb	r7, [r2, #0]
 801c138:	4373      	muls	r3, r6
 801c13a:	fb01 8807 	mla	r8, r1, r7, r8
 801c13e:	7807      	ldrb	r7, [r0, #0]
 801c140:	fb0e 330c 	mla	r3, lr, ip, r3
 801c144:	fb09 8707 	mla	r7, r9, r7, r8
 801c148:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801c14c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c150:	ea47 070a 	orr.w	r7, r7, sl
 801c154:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c158:	fb01 310a 	mla	r1, r1, sl, r3
 801c15c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c162:	fb09 1a0a 	mla	sl, r9, sl, r1
 801c166:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c16a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c16e:	ea47 070a 	orr.w	r7, r7, sl
 801c172:	801f      	strh	r7, [r3, #0]
 801c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c176:	3302      	adds	r3, #2
 801c178:	9309      	str	r3, [sp, #36]	; 0x24
 801c17a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c17c:	449b      	add	fp, r3
 801c17e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c180:	441d      	add	r5, r3
 801c182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c184:	3b01      	subs	r3, #1
 801c186:	930b      	str	r3, [sp, #44]	; 0x2c
 801c188:	e76f      	b.n	801c06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c18a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c18c:	449b      	add	fp, r3
 801c18e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c190:	441d      	add	r5, r3
 801c192:	9b06      	ldr	r3, [sp, #24]
 801c194:	3b01      	subs	r3, #1
 801c196:	9306      	str	r3, [sp, #24]
 801c198:	9b07      	ldr	r3, [sp, #28]
 801c19a:	3302      	adds	r3, #2
 801c19c:	9307      	str	r3, [sp, #28]
 801c19e:	e744      	b.n	801c02a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c1a0:	d023      	beq.n	801c1ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c1a2:	9b06      	ldr	r3, [sp, #24]
 801c1a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c1a6:	3b01      	subs	r3, #1
 801c1a8:	fb00 b003 	mla	r0, r0, r3, fp
 801c1ac:	1400      	asrs	r0, r0, #16
 801c1ae:	f53f af58 	bmi.w	801c062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1b2:	3901      	subs	r1, #1
 801c1b4:	4288      	cmp	r0, r1
 801c1b6:	f6bf af54 	bge.w	801c062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c1bc:	fb01 5303 	mla	r3, r1, r3, r5
 801c1c0:	141b      	asrs	r3, r3, #16
 801c1c2:	f53f af4e 	bmi.w	801c062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1c6:	3a01      	subs	r2, #1
 801c1c8:	4293      	cmp	r3, r2
 801c1ca:	f6bf af4a 	bge.w	801c062 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1ce:	9b06      	ldr	r3, [sp, #24]
 801c1d0:	9309      	str	r3, [sp, #36]	; 0x24
 801c1d2:	9b07      	ldr	r3, [sp, #28]
 801c1d4:	930b      	str	r3, [sp, #44]	; 0x2c
 801c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	dc70      	bgt.n	801c2be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801c1dc:	9b06      	ldr	r3, [sp, #24]
 801c1de:	9a07      	ldr	r2, [sp, #28]
 801c1e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c1e8:	9307      	str	r3, [sp, #28]
 801c1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	f340 80eb 	ble.w	801c3c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801c1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c202:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c206:	eef0 6a62 	vmov.f32	s13, s5
 801c20a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c20e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c212:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c21a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c21e:	ee16 ba90 	vmov	fp, s13
 801c222:	eef0 6a43 	vmov.f32	s13, s6
 801c226:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c22a:	ee12 2a90 	vmov	r2, s5
 801c22e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c238:	fb92 f3f3 	sdiv	r3, r2, r3
 801c23c:	ee13 2a10 	vmov	r2, s6
 801c240:	931b      	str	r3, [sp, #108]	; 0x6c
 801c242:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c244:	ee16 5a90 	vmov	r5, s13
 801c248:	fb92 f3f3 	sdiv	r3, r2, r3
 801c24c:	931c      	str	r3, [sp, #112]	; 0x70
 801c24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c252:	3b01      	subs	r3, #1
 801c254:	930a      	str	r3, [sp, #40]	; 0x28
 801c256:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c258:	bf08      	it	eq
 801c25a:	4613      	moveq	r3, r2
 801c25c:	eeb0 3a67 	vmov.f32	s6, s15
 801c260:	9306      	str	r3, [sp, #24]
 801c262:	eef0 2a47 	vmov.f32	s5, s14
 801c266:	e6d2      	b.n	801c00e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c268:	b149      	cbz	r1, 801c27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c26a:	4660      	mov	r0, ip
 801c26c:	5cba      	ldrb	r2, [r7, r2]
 801c26e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c272:	4422      	add	r2, r4
 801c274:	4666      	mov	r6, ip
 801c276:	e734      	b.n	801c0e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c278:	4660      	mov	r0, ip
 801c27a:	4662      	mov	r2, ip
 801c27c:	e731      	b.n	801c0e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c27e:	4660      	mov	r0, ip
 801c280:	4662      	mov	r2, ip
 801c282:	e7f7      	b.n	801c274 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801c284:	f110 0c01 	adds.w	ip, r0, #1
 801c288:	f53f af74 	bmi.w	801c174 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c28c:	4562      	cmp	r2, ip
 801c28e:	f6ff af71 	blt.w	801c174 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c292:	f116 0c01 	adds.w	ip, r6, #1
 801c296:	f53f af6d 	bmi.w	801c174 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c29a:	4567      	cmp	r7, ip
 801c29c:	f6ff af6a 	blt.w	801c174 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2a0:	b23f      	sxth	r7, r7
 801c2a2:	b212      	sxth	r2, r2
 801c2a4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c2a8:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801c2ac:	9200      	str	r2, [sp, #0]
 801c2ae:	9701      	str	r7, [sp, #4]
 801c2b0:	4623      	mov	r3, r4
 801c2b2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c2b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c2b8:	f7ff fde6 	bl	801be88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801c2bc:	e75a      	b.n	801c174 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c2c0:	ea4f 462b 	mov.w	r6, fp, asr #16
 801c2c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c2c8:	1428      	asrs	r0, r5, #16
 801c2ca:	fb02 6000 	mla	r0, r2, r0, r6
 801c2ce:	9e08      	ldr	r6, [sp, #32]
 801c2d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c2d4:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c2d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c2dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c2e0:	1837      	adds	r7, r6, r0
 801c2e2:	eb04 0c08 	add.w	ip, r4, r8
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d060      	beq.n	801c3ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801c2ea:	787e      	ldrb	r6, [r7, #1]
 801c2ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c2f0:	4426      	add	r6, r4
 801c2f2:	2900      	cmp	r1, #0
 801c2f4:	d062      	beq.n	801c3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801c2f6:	18b8      	adds	r0, r7, r2
 801c2f8:	7840      	ldrb	r0, [r0, #1]
 801c2fa:	5cba      	ldrb	r2, [r7, r2]
 801c2fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c300:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c304:	4422      	add	r2, r4
 801c306:	4420      	add	r0, r4
 801c308:	b29b      	uxth	r3, r3
 801c30a:	b289      	uxth	r1, r1
 801c30c:	fb03 f901 	mul.w	r9, r3, r1
 801c310:	011b      	lsls	r3, r3, #4
 801c312:	78b7      	ldrb	r7, [r6, #2]
 801c314:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c318:	eba3 0309 	sub.w	r3, r3, r9
 801c31c:	b29b      	uxth	r3, r3
 801c31e:	435f      	muls	r7, r3
 801c320:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c324:	b289      	uxth	r1, r1
 801c326:	f89c a002 	ldrb.w	sl, [ip, #2]
 801c32a:	ebae 0e01 	sub.w	lr, lr, r1
 801c32e:	fa1f fe8e 	uxth.w	lr, lr
 801c332:	fb0e 770a 	mla	r7, lr, sl, r7
 801c336:	f892 a002 	ldrb.w	sl, [r2, #2]
 801c33a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801c33e:	fb01 770a 	mla	r7, r1, sl, r7
 801c342:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c346:	fb09 7a0a 	mla	sl, r9, sl, r7
 801c34a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801c34e:	f896 8000 	ldrb.w	r8, [r6]
 801c352:	7876      	ldrb	r6, [r6, #1]
 801c354:	fb03 f808 	mul.w	r8, r3, r8
 801c358:	fb0e 8807 	mla	r8, lr, r7, r8
 801c35c:	7817      	ldrb	r7, [r2, #0]
 801c35e:	4373      	muls	r3, r6
 801c360:	fb01 8807 	mla	r8, r1, r7, r8
 801c364:	7807      	ldrb	r7, [r0, #0]
 801c366:	fb0e 330c 	mla	r3, lr, ip, r3
 801c36a:	fb09 8707 	mla	r7, r9, r7, r8
 801c36e:	7856      	ldrb	r6, [r2, #1]
 801c370:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801c374:	fb01 3306 	mla	r3, r1, r6, r3
 801c378:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c37c:	ea47 070a 	orr.w	r7, r7, sl
 801c380:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c384:	fb09 3a0a 	mla	sl, r9, sl, r3
 801c388:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c38e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c392:	ea47 070a 	orr.w	r7, r7, sl
 801c396:	f823 7b02 	strh.w	r7, [r3], #2
 801c39a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c39e:	449b      	add	fp, r3
 801c3a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c3a2:	441d      	add	r5, r3
 801c3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3a6:	3b01      	subs	r3, #1
 801c3a8:	9309      	str	r3, [sp, #36]	; 0x24
 801c3aa:	e714      	b.n	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c3ac:	b149      	cbz	r1, 801c3c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801c3ae:	4660      	mov	r0, ip
 801c3b0:	5cba      	ldrb	r2, [r7, r2]
 801c3b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3b6:	4422      	add	r2, r4
 801c3b8:	4666      	mov	r6, ip
 801c3ba:	e7a5      	b.n	801c308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3bc:	4660      	mov	r0, ip
 801c3be:	4662      	mov	r2, ip
 801c3c0:	e7a2      	b.n	801c308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3c2:	4660      	mov	r0, ip
 801c3c4:	4662      	mov	r2, ip
 801c3c6:	e7f7      	b.n	801c3b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801c3c8:	b00f      	add	sp, #60	; 0x3c
 801c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801c3ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3d2:	b085      	sub	sp, #20
 801c3d4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801c3d8:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801c3dc:	9102      	str	r1, [sp, #8]
 801c3de:	fb04 710c 	mla	r1, r4, ip, r7
 801c3e2:	2c00      	cmp	r4, #0
 801c3e4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801c3e8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801c3ec:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801c3f0:	eb02 0e01 	add.w	lr, r2, r1
 801c3f4:	f2c0 8122 	blt.w	801c63c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801c3f8:	45a0      	cmp	r8, r4
 801c3fa:	f340 811f 	ble.w	801c63c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801c3fe:	2f00      	cmp	r7, #0
 801c400:	f2c0 811a 	blt.w	801c638 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801c404:	45bc      	cmp	ip, r7
 801c406:	f340 8117 	ble.w	801c638 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801c40a:	5c52      	ldrb	r2, [r2, r1]
 801c40c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c410:	1c7a      	adds	r2, r7, #1
 801c412:	f100 8116 	bmi.w	801c642 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801c416:	4594      	cmp	ip, r2
 801c418:	f340 8113 	ble.w	801c642 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801c41c:	2e00      	cmp	r6, #0
 801c41e:	f000 8112 	beq.w	801c646 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801c422:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c42a:	3401      	adds	r4, #1
 801c42c:	f100 810f 	bmi.w	801c64e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801c430:	45a0      	cmp	r8, r4
 801c432:	f340 810c 	ble.w	801c64e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801c436:	2800      	cmp	r0, #0
 801c438:	f000 810c 	beq.w	801c654 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801c43c:	2f00      	cmp	r7, #0
 801c43e:	f2c0 8104 	blt.w	801c64a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801c442:	45bc      	cmp	ip, r7
 801c444:	f340 8101 	ble.w	801c64a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801c448:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801c44c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801c450:	3701      	adds	r7, #1
 801c452:	f100 8102 	bmi.w	801c65a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801c456:	45bc      	cmp	ip, r7
 801c458:	f340 80ff 	ble.w	801c65a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801c45c:	2e00      	cmp	r6, #0
 801c45e:	f000 80fe 	beq.w	801c65e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801c462:	44f4      	add	ip, lr
 801c464:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c46c:	b2b6      	uxth	r6, r6
 801c46e:	b280      	uxth	r0, r0
 801c470:	fb00 fe06 	mul.w	lr, r0, r6
 801c474:	0136      	lsls	r6, r6, #4
 801c476:	eba6 070e 	sub.w	r7, r6, lr
 801c47a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801c47e:	b2bf      	uxth	r7, r7
 801c480:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801c484:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801c488:	fb0a f607 	mul.w	r6, sl, r7
 801c48c:	b280      	uxth	r0, r0
 801c48e:	1a1b      	subs	r3, r3, r0
 801c490:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801c494:	b29b      	uxth	r3, r3
 801c496:	fb0b 6603 	mla	r6, fp, r3, r6
 801c49a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c49e:	fb00 6609 	mla	r6, r0, r9, r6
 801c4a2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c4a6:	fb0e 6608 	mla	r6, lr, r8, r6
 801c4aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c4ae:	9600      	str	r6, [sp, #0]
 801c4b0:	2e00      	cmp	r6, #0
 801c4b2:	f000 80be 	beq.w	801c632 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801c4b6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801c4ba:	fb0b fc0c 	mul.w	ip, fp, ip
 801c4be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c4c2:	fb0b f505 	mul.w	r5, fp, r5
 801c4c6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c4ca:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c4ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c4d2:	44dc      	add	ip, fp
 801c4d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c4d8:	9501      	str	r5, [sp, #4]
 801c4da:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801c4de:	9503      	str	r5, [sp, #12]
 801c4e0:	9d01      	ldr	r5, [sp, #4]
 801c4e2:	9e02      	ldr	r6, [sp, #8]
 801c4e4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801c4e8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c4ec:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801c4f0:	fb0a fc0c 	mul.w	ip, sl, ip
 801c4f4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801c4f8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801c4fc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c500:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c504:	4465      	add	r5, ip
 801c506:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c50a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c50e:	fb09 fc0c 	mul.w	ip, r9, ip
 801c512:	fb09 f904 	mul.w	r9, r9, r4
 801c516:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801c51a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c51e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801c522:	fb08 f404 	mul.w	r4, r8, r4
 801c526:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c52a:	fb08 f802 	mul.w	r8, r8, r2
 801c52e:	0a2d      	lsrs	r5, r5, #8
 801c530:	0a22      	lsrs	r2, r4, #8
 801c532:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c536:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c53a:	437d      	muls	r5, r7
 801c53c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801c540:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c544:	4414      	add	r4, r2
 801c546:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801c54a:	fb0a fa01 	mul.w	sl, sl, r1
 801c54e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c552:	9a03      	ldr	r2, [sp, #12]
 801c554:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801c558:	fb02 5503 	mla	r5, r2, r3, r5
 801c55c:	0a24      	lsrs	r4, r4, #8
 801c55e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801c562:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c566:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801c56a:	fb04 540e 	mla	r4, r4, lr, r5
 801c56e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c572:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c576:	4461      	add	r1, ip
 801c578:	0a09      	lsrs	r1, r1, #8
 801c57a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c57e:	fb01 4100 	mla	r1, r1, r0, r4
 801c582:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c586:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c58a:	fb07 f70a 	mul.w	r7, r7, sl
 801c58e:	0a09      	lsrs	r1, r1, #8
 801c590:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801c594:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801c598:	fb03 7101 	mla	r1, r3, r1, r7
 801c59c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c5a0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c5a4:	fb0e 1e08 	mla	lr, lr, r8, r1
 801c5a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c5ac:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801c5b0:	fb00 e101 	mla	r1, r0, r1, lr
 801c5b4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801c5b8:	9a00      	ldr	r2, [sp, #0]
 801c5ba:	b287      	uxth	r7, r0
 801c5bc:	437a      	muls	r2, r7
 801c5be:	1c53      	adds	r3, r2, #1
 801c5c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c5c4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801c5c8:	0a09      	lsrs	r1, r1, #8
 801c5ca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c5ce:	4321      	orrs	r1, r4
 801c5d0:	0c0a      	lsrs	r2, r1, #16
 801c5d2:	8836      	ldrh	r6, [r6, #0]
 801c5d4:	fb12 f207 	smulbb	r2, r2, r7
 801c5d8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801c5dc:	b2c8      	uxtb	r0, r1
 801c5de:	1235      	asrs	r5, r6, #8
 801c5e0:	fb14 f407 	smulbb	r4, r4, r7
 801c5e4:	fb10 f007 	smulbb	r0, r0, r7
 801c5e8:	b2db      	uxtb	r3, r3
 801c5ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c5ee:	fb05 2503 	mla	r5, r5, r3, r2
 801c5f2:	10f2      	asrs	r2, r6, #3
 801c5f4:	00f6      	lsls	r6, r6, #3
 801c5f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c5fa:	b2f6      	uxtb	r6, r6
 801c5fc:	fb02 4203 	mla	r2, r2, r3, r4
 801c600:	fb06 0303 	mla	r3, r6, r3, r0
 801c604:	b2ad      	uxth	r5, r5
 801c606:	b299      	uxth	r1, r3
 801c608:	b294      	uxth	r4, r2
 801c60a:	1c6b      	adds	r3, r5, #1
 801c60c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c610:	1c62      	adds	r2, r4, #1
 801c612:	1c4b      	adds	r3, r1, #1
 801c614:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c618:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c61c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c620:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c624:	0952      	lsrs	r2, r2, #5
 801c626:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c62a:	432b      	orrs	r3, r5
 801c62c:	4313      	orrs	r3, r2
 801c62e:	9a02      	ldr	r2, [sp, #8]
 801c630:	8013      	strh	r3, [r2, #0]
 801c632:	b005      	add	sp, #20
 801c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c638:	2500      	movs	r5, #0
 801c63a:	e6e9      	b.n	801c410 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801c63c:	2100      	movs	r1, #0
 801c63e:	460d      	mov	r5, r1
 801c640:	e6f3      	b.n	801c42a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c642:	2100      	movs	r1, #0
 801c644:	e6f1      	b.n	801c42a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c646:	4631      	mov	r1, r6
 801c648:	e6ef      	b.n	801c42a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c64a:	2400      	movs	r4, #0
 801c64c:	e700      	b.n	801c450 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801c64e:	2200      	movs	r2, #0
 801c650:	4614      	mov	r4, r2
 801c652:	e70b      	b.n	801c46c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c654:	4602      	mov	r2, r0
 801c656:	4604      	mov	r4, r0
 801c658:	e708      	b.n	801c46c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c65a:	2200      	movs	r2, #0
 801c65c:	e706      	b.n	801c46c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c65e:	4632      	mov	r2, r6
 801c660:	e704      	b.n	801c46c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801c662 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c666:	b09f      	sub	sp, #124	; 0x7c
 801c668:	921b      	str	r2, [sp, #108]	; 0x6c
 801c66a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c66c:	901d      	str	r0, [sp, #116]	; 0x74
 801c66e:	9309      	str	r3, [sp, #36]	; 0x24
 801c670:	6850      	ldr	r0, [r2, #4]
 801c672:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c676:	9119      	str	r1, [sp, #100]	; 0x64
 801c678:	931c      	str	r3, [sp, #112]	; 0x70
 801c67a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c67e:	fb00 1303 	mla	r3, r0, r3, r1
 801c682:	6812      	ldr	r2, [r2, #0]
 801c684:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801c686:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c68a:	930c      	str	r3, [sp, #48]	; 0x30
 801c68c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	9312      	str	r3, [sp, #72]	; 0x48
 801c692:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c694:	685e      	ldr	r6, [r3, #4]
 801c696:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801c69a:	3604      	adds	r6, #4
 801c69c:	930d      	str	r3, [sp, #52]	; 0x34
 801c69e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	dc03      	bgt.n	801c6ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c6a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	f340 8387 	ble.w	801cdba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801c6ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c6ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c6b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c6b6:	1e48      	subs	r0, r1, #1
 801c6b8:	1e57      	subs	r7, r2, #1
 801c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	f340 8194 	ble.w	801c9ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801c6c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c6c4:	142b      	asrs	r3, r5, #16
 801c6c6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c6ca:	d406      	bmi.n	801c6da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6cc:	4584      	cmp	ip, r0
 801c6ce:	da04      	bge.n	801c6da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	db02      	blt.n	801c6da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6d4:	42bb      	cmp	r3, r7
 801c6d6:	f2c0 8189 	blt.w	801c9ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c6da:	f11c 0c01 	adds.w	ip, ip, #1
 801c6de:	f100 8177 	bmi.w	801c9d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c6e2:	4561      	cmp	r1, ip
 801c6e4:	f2c0 8174 	blt.w	801c9d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c6e8:	3301      	adds	r3, #1
 801c6ea:	f100 8171 	bmi.w	801c9d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c6ee:	429a      	cmp	r2, r3
 801c6f0:	f2c0 816e 	blt.w	801c9d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c6f8:	931a      	str	r3, [sp, #104]	; 0x68
 801c6fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	f340 8193 	ble.w	801ca28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c702:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c704:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c708:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c70c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c70e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c712:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c716:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c718:	141b      	asrs	r3, r3, #16
 801c71a:	f100 81d6 	bmi.w	801caca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c71e:	f100 38ff 	add.w	r8, r0, #4294967295
 801c722:	4543      	cmp	r3, r8
 801c724:	f280 81d1 	bge.w	801caca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c728:	f1bc 0f00 	cmp.w	ip, #0
 801c72c:	f2c0 81cd 	blt.w	801caca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c730:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c734:	45c4      	cmp	ip, r8
 801c736:	f280 81c8 	bge.w	801caca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c73a:	b200      	sxth	r0, r0
 801c73c:	fb0c 3300 	mla	r3, ip, r0, r3
 801c740:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c742:	eb04 0803 	add.w	r8, r4, r3
 801c746:	5ce3      	ldrb	r3, [r4, r3]
 801c748:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c74c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c750:	2a00      	cmp	r2, #0
 801c752:	f000 81af 	beq.w	801cab4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c756:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c75a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c75e:	940e      	str	r4, [sp, #56]	; 0x38
 801c760:	0e24      	lsrs	r4, r4, #24
 801c762:	9415      	str	r4, [sp, #84]	; 0x54
 801c764:	b179      	cbz	r1, 801c786 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c766:	eb08 0c00 	add.w	ip, r8, r0
 801c76a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c76e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c772:	900a      	str	r0, [sp, #40]	; 0x28
 801c774:	0e00      	lsrs	r0, r0, #24
 801c776:	9013      	str	r0, [sp, #76]	; 0x4c
 801c778:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c77c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c780:	900f      	str	r0, [sp, #60]	; 0x3c
 801c782:	0e00      	lsrs	r0, r0, #24
 801c784:	9016      	str	r0, [sp, #88]	; 0x58
 801c786:	b292      	uxth	r2, r2
 801c788:	b289      	uxth	r1, r1
 801c78a:	fb02 f901 	mul.w	r9, r2, r1
 801c78e:	0112      	lsls	r2, r2, #4
 801c790:	eba2 0809 	sub.w	r8, r2, r9
 801c794:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c796:	fa1f f888 	uxth.w	r8, r8
 801c79a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c79e:	fb08 f000 	mul.w	r0, r8, r0
 801c7a2:	b289      	uxth	r1, r1
 801c7a4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c7a8:	1a52      	subs	r2, r2, r1
 801c7aa:	b292      	uxth	r2, r2
 801c7ac:	fb02 000e 	mla	r0, r2, lr, r0
 801c7b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7b2:	fb01 0004 	mla	r0, r1, r4, r0
 801c7b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c7b8:	fb09 0004 	mla	r0, r9, r4, r0
 801c7bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c7c0:	2800      	cmp	r0, #0
 801c7c2:	f000 80fa 	beq.w	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c7c6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c7ca:	d01b      	beq.n	801c804 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c7cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c7d0:	fb0e fa0a 	mul.w	sl, lr, sl
 801c7d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c7d8:	fb0e fe03 	mul.w	lr, lr, r3
 801c7dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c7e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c7e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c7e8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c7ec:	4453      	add	r3, sl
 801c7ee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c7f2:	0a1b      	lsrs	r3, r3, #8
 801c7f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c7f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c7fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c800:	ea43 030c 	orr.w	r3, r3, ip
 801c804:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c806:	2cff      	cmp	r4, #255	; 0xff
 801c808:	d021      	beq.n	801c84e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c80a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c80c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c810:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c812:	fb04 fb0b 	mul.w	fp, r4, fp
 801c816:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c818:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c81c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c820:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c822:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c826:	fb04 fa0a 	mul.w	sl, r4, sl
 801c82a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c82e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c832:	44de      	add	lr, fp
 801c834:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c838:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c83c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c840:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c844:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c848:	ea4e 040a 	orr.w	r4, lr, sl
 801c84c:	940e      	str	r4, [sp, #56]	; 0x38
 801c84e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c850:	2cff      	cmp	r4, #255	; 0xff
 801c852:	d021      	beq.n	801c898 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c854:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c856:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c85a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c85c:	fb04 fb0b 	mul.w	fp, r4, fp
 801c860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c862:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c866:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c86a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c86c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c870:	fb04 fa0a 	mul.w	sl, r4, sl
 801c874:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c878:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c87c:	44de      	add	lr, fp
 801c87e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c882:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c886:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c88a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c88e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c892:	ea4e 040a 	orr.w	r4, lr, sl
 801c896:	940a      	str	r4, [sp, #40]	; 0x28
 801c898:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c89a:	2cff      	cmp	r4, #255	; 0xff
 801c89c:	d021      	beq.n	801c8e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801c89e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c8a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8a6:	fb04 fb0b 	mul.w	fp, r4, fp
 801c8aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c8b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c8b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8ba:	fb04 fa0a 	mul.w	sl, r4, sl
 801c8be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c8c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c8c6:	44de      	add	lr, fp
 801c8c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c8cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c8d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c8dc:	ea4e 040a 	orr.w	r4, lr, sl
 801c8e0:	940f      	str	r4, [sp, #60]	; 0x3c
 801c8e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c8e4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c8e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8ec:	fb08 fc0c 	mul.w	ip, r8, ip
 801c8f0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c8f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c8f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c8fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c8fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c902:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c904:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c908:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c90a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c90e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c912:	fb08 f80e 	mul.w	r8, r8, lr
 801c916:	fb02 8303 	mla	r3, r2, r3, r8
 801c91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c91c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c920:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c926:	fb01 330a 	mla	r3, r1, sl, r3
 801c92a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801c92e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c930:	fb09 3901 	mla	r9, r9, r1, r3
 801c934:	4342      	muls	r2, r0
 801c936:	1c50      	adds	r0, r2, #1
 801c938:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c93c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c940:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c944:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c948:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c94c:	ea4c 0c09 	orr.w	ip, ip, r9
 801c950:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c952:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801c956:	883b      	ldrh	r3, [r7, #0]
 801c958:	fb12 f204 	smulbb	r2, r2, r4
 801c95c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801c960:	fa5f fc8c 	uxtb.w	ip, ip
 801c964:	1219      	asrs	r1, r3, #8
 801c966:	fb1c fc04 	smulbb	ip, ip, r4
 801c96a:	b2c0      	uxtb	r0, r0
 801c96c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c970:	fb01 2100 	mla	r1, r1, r0, r2
 801c974:	10da      	asrs	r2, r3, #3
 801c976:	00db      	lsls	r3, r3, #3
 801c978:	fb1e fe04 	smulbb	lr, lr, r4
 801c97c:	b2db      	uxtb	r3, r3
 801c97e:	fb03 c300 	mla	r3, r3, r0, ip
 801c982:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c986:	b289      	uxth	r1, r1
 801c988:	fb02 e200 	mla	r2, r2, r0, lr
 801c98c:	fa1f fc83 	uxth.w	ip, r3
 801c990:	1c4b      	adds	r3, r1, #1
 801c992:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c996:	f10c 0301 	add.w	r3, ip, #1
 801c99a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801c99e:	b292      	uxth	r2, r2
 801c9a0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801c9a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c9a8:	430b      	orrs	r3, r1
 801c9aa:	1c51      	adds	r1, r2, #1
 801c9ac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c9b0:	0952      	lsrs	r2, r2, #5
 801c9b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c9b6:	4313      	orrs	r3, r2
 801c9b8:	803b      	strh	r3, [r7, #0]
 801c9ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c9bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c9be:	3702      	adds	r7, #2
 801c9c0:	441a      	add	r2, r3
 801c9c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c9c4:	9229      	str	r2, [sp, #164]	; 0xa4
 801c9c6:	441d      	add	r5, r3
 801c9c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c9ca:	3b01      	subs	r3, #1
 801c9cc:	931a      	str	r3, [sp, #104]	; 0x68
 801c9ce:	e694      	b.n	801c6fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c9d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c9d2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c9d4:	441c      	add	r4, r3
 801c9d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c9d8:	9429      	str	r4, [sp, #164]	; 0xa4
 801c9da:	441d      	add	r5, r3
 801c9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	9309      	str	r3, [sp, #36]	; 0x24
 801c9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9e4:	3302      	adds	r3, #2
 801c9e6:	930c      	str	r3, [sp, #48]	; 0x30
 801c9e8:	e667      	b.n	801c6ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c9ea:	d024      	beq.n	801ca36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801c9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9ee:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c9f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c9f2:	3b01      	subs	r3, #1
 801c9f4:	fb00 4003 	mla	r0, r0, r3, r4
 801c9f8:	1400      	asrs	r0, r0, #16
 801c9fa:	f53f ae7b 	bmi.w	801c6f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c9fe:	3901      	subs	r1, #1
 801ca00:	4288      	cmp	r0, r1
 801ca02:	f6bf ae77 	bge.w	801c6f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca06:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ca08:	fb01 5303 	mla	r3, r1, r3, r5
 801ca0c:	141b      	asrs	r3, r3, #16
 801ca0e:	f53f ae71 	bmi.w	801c6f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca12:	3a01      	subs	r2, #1
 801ca14:	4293      	cmp	r3, r2
 801ca16:	f6bf ae6d 	bge.w	801c6f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca1a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ca1e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801ca22:	f1bb 0f00 	cmp.w	fp, #0
 801ca26:	dc70      	bgt.n	801cb0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801ca28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca2a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ca2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca30:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ca34:	930c      	str	r3, [sp, #48]	; 0x30
 801ca36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	f340 81be 	ble.w	801cdba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801ca3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ca4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca52:	eef0 6a62 	vmov.f32	s13, s5
 801ca56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca6a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ca6e:	eef0 6a43 	vmov.f32	s13, s6
 801ca72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca76:	ee12 2a90 	vmov	r2, s5
 801ca7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca84:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca88:	ee13 2a10 	vmov	r2, s6
 801ca8c:	932b      	str	r3, [sp, #172]	; 0xac
 801ca8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca90:	ee16 5a90 	vmov	r5, s13
 801ca94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca98:	932c      	str	r3, [sp, #176]	; 0xb0
 801ca9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ca9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ca9e:	3b01      	subs	r3, #1
 801caa0:	9319      	str	r3, [sp, #100]	; 0x64
 801caa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801caa4:	bf08      	it	eq
 801caa6:	4613      	moveq	r3, r2
 801caa8:	eeb0 3a67 	vmov.f32	s6, s15
 801caac:	9309      	str	r3, [sp, #36]	; 0x24
 801caae:	eef0 2a47 	vmov.f32	s5, s14
 801cab2:	e5f4      	b.n	801c69e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cab4:	2900      	cmp	r1, #0
 801cab6:	f43f ae66 	beq.w	801c786 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801caba:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cabe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801cac2:	900a      	str	r0, [sp, #40]	; 0x28
 801cac4:	0e00      	lsrs	r0, r0, #24
 801cac6:	9013      	str	r0, [sp, #76]	; 0x4c
 801cac8:	e65d      	b.n	801c786 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801caca:	f113 0801 	adds.w	r8, r3, #1
 801cace:	f53f af74 	bmi.w	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cad2:	4540      	cmp	r0, r8
 801cad4:	f6ff af71 	blt.w	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cad8:	f11c 0801 	adds.w	r8, ip, #1
 801cadc:	f53f af6d 	bmi.w	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cae0:	45c6      	cmp	lr, r8
 801cae2:	f6ff af6a 	blt.w	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cae6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801cae8:	9302      	str	r3, [sp, #8]
 801caea:	b200      	sxth	r0, r0
 801caec:	fa0f f38e 	sxth.w	r3, lr
 801caf0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801caf4:	e9cd c203 	strd	ip, r2, [sp, #12]
 801caf8:	9301      	str	r3, [sp, #4]
 801cafa:	9000      	str	r0, [sp, #0]
 801cafc:	4633      	mov	r3, r6
 801cafe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb00:	4639      	mov	r1, r7
 801cb02:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cb04:	f7ff fc63 	bl	801c3ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801cb08:	e757      	b.n	801c9ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cb0c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cb0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cb12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cb14:	1427      	asrs	r7, r4, #16
 801cb16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb1a:	142b      	asrs	r3, r5, #16
 801cb1c:	fb01 7303 	mla	r3, r1, r3, r7
 801cb20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cb22:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cb26:	18e7      	adds	r7, r4, r3
 801cb28:	5ce3      	ldrb	r3, [r4, r3]
 801cb2a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cb2e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cb32:	2a00      	cmp	r2, #0
 801cb34:	f000 8137 	beq.w	801cda6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801cb38:	f897 e001 	ldrb.w	lr, [r7, #1]
 801cb3c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801cb40:	9410      	str	r4, [sp, #64]	; 0x40
 801cb42:	0e24      	lsrs	r4, r4, #24
 801cb44:	9417      	str	r4, [sp, #92]	; 0x5c
 801cb46:	b170      	cbz	r0, 801cb66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cb48:	eb07 0e01 	add.w	lr, r7, r1
 801cb4c:	5c79      	ldrb	r1, [r7, r1]
 801cb4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cb52:	910b      	str	r1, [sp, #44]	; 0x2c
 801cb54:	0e09      	lsrs	r1, r1, #24
 801cb56:	9114      	str	r1, [sp, #80]	; 0x50
 801cb58:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801cb5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cb60:	9111      	str	r1, [sp, #68]	; 0x44
 801cb62:	0e09      	lsrs	r1, r1, #24
 801cb64:	9118      	str	r1, [sp, #96]	; 0x60
 801cb66:	b292      	uxth	r2, r2
 801cb68:	b280      	uxth	r0, r0
 801cb6a:	fb02 f800 	mul.w	r8, r2, r0
 801cb6e:	0112      	lsls	r2, r2, #4
 801cb70:	eba2 0e08 	sub.w	lr, r2, r8
 801cb74:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801cb76:	fa1f fe8e 	uxth.w	lr, lr
 801cb7a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801cb7e:	fb0e f101 	mul.w	r1, lr, r1
 801cb82:	b280      	uxth	r0, r0
 801cb84:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cb88:	1a12      	subs	r2, r2, r0
 801cb8a:	b292      	uxth	r2, r2
 801cb8c:	fb02 110c 	mla	r1, r2, ip, r1
 801cb90:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb92:	fb00 1104 	mla	r1, r0, r4, r1
 801cb96:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cb98:	fb08 1104 	mla	r1, r8, r4, r1
 801cb9c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cba0:	2900      	cmp	r1, #0
 801cba2:	f000 80f5 	beq.w	801cd90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801cba6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cbaa:	d019      	beq.n	801cbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801cbac:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cbb0:	fb0c fa0a 	mul.w	sl, ip, sl
 801cbb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cbb8:	fb0c fc03 	mul.w	ip, ip, r3
 801cbbc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cbc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbc4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cbc8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cbcc:	4453      	add	r3, sl
 801cbce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cbd2:	0a1b      	lsrs	r3, r3, #8
 801cbd4:	0a3f      	lsrs	r7, r7, #8
 801cbd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cbde:	433b      	orrs	r3, r7
 801cbe0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cbe2:	2cff      	cmp	r4, #255	; 0xff
 801cbe4:	d020      	beq.n	801cc28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801cbe6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cbe8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cbec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cbee:	4367      	muls	r7, r4
 801cbf0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cbf2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cbf6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cbfa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cbfc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc00:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc08:	44bc      	add	ip, r7
 801cc0a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc0e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc22:	ea4c 040a 	orr.w	r4, ip, sl
 801cc26:	9410      	str	r4, [sp, #64]	; 0x40
 801cc28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc2a:	2cff      	cmp	r4, #255	; 0xff
 801cc2c:	d020      	beq.n	801cc70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801cc2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc30:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc36:	4367      	muls	r7, r4
 801cc38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc3a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cc3e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc42:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc44:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc48:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc50:	44bc      	add	ip, r7
 801cc52:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc6a:	ea4c 040a 	orr.w	r4, ip, sl
 801cc6e:	940b      	str	r4, [sp, #44]	; 0x2c
 801cc70:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc72:	2cff      	cmp	r4, #255	; 0xff
 801cc74:	d020      	beq.n	801ccb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801cc76:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cc78:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc7c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc7e:	4367      	muls	r7, r4
 801cc80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cc82:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cc86:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc8a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cc8c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc90:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc98:	44bc      	add	ip, r7
 801cc9a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cca2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cca6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ccae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ccb2:	ea4c 040a 	orr.w	r4, ip, sl
 801ccb6:	9411      	str	r4, [sp, #68]	; 0x44
 801ccb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ccba:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ccbe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ccc2:	fb0e f707 	mul.w	r7, lr, r7
 801ccc6:	fb02 770c 	mla	r7, r2, ip, r7
 801ccca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ccd0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ccd4:	fb00 770c 	mla	r7, r0, ip, r7
 801ccd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ccda:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ccde:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cce0:	fb08 770c 	mla	r7, r8, ip, r7
 801cce4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cce8:	fb0e fe0c 	mul.w	lr, lr, ip
 801ccec:	fb02 e303 	mla	r3, r2, r3, lr
 801ccf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ccf2:	0a3f      	lsrs	r7, r7, #8
 801ccf4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ccf8:	fb00 330a 	mla	r3, r0, sl, r3
 801ccfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ccfe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cd02:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801cd06:	fb08 3c0c 	mla	ip, r8, ip, r3
 801cd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd10:	434b      	muls	r3, r1
 801cd12:	1c59      	adds	r1, r3, #1
 801cd14:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cd18:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801cd1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cd20:	ea47 070c 	orr.w	r7, r7, ip
 801cd24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cd26:	0c3b      	lsrs	r3, r7, #16
 801cd28:	f8b9 0000 	ldrh.w	r0, [r9]
 801cd2c:	fb13 f304 	smulbb	r3, r3, r4
 801cd30:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801cd34:	b2ff      	uxtb	r7, r7
 801cd36:	1202      	asrs	r2, r0, #8
 801cd38:	fb17 f704 	smulbb	r7, r7, r4
 801cd3c:	b2c9      	uxtb	r1, r1
 801cd3e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801cd42:	fb02 3201 	mla	r2, r2, r1, r3
 801cd46:	10c3      	asrs	r3, r0, #3
 801cd48:	00c0      	lsls	r0, r0, #3
 801cd4a:	fb1c fc04 	smulbb	ip, ip, r4
 801cd4e:	b2c0      	uxtb	r0, r0
 801cd50:	fb00 7001 	mla	r0, r0, r1, r7
 801cd54:	b292      	uxth	r2, r2
 801cd56:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801cd5a:	fb03 c301 	mla	r3, r3, r1, ip
 801cd5e:	f102 0c01 	add.w	ip, r2, #1
 801cd62:	b280      	uxth	r0, r0
 801cd64:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cd68:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801cd6c:	1c42      	adds	r2, r0, #1
 801cd6e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cd78:	ea42 020c 	orr.w	r2, r2, ip
 801cd7c:	f103 0c01 	add.w	ip, r3, #1
 801cd80:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801cd84:	095b      	lsrs	r3, r3, #5
 801cd86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd8a:	431a      	orrs	r2, r3
 801cd8c:	f8a9 2000 	strh.w	r2, [r9]
 801cd90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cd92:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cd94:	f109 0902 	add.w	r9, r9, #2
 801cd98:	441a      	add	r2, r3
 801cd9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cd9c:	9229      	str	r2, [sp, #164]	; 0xa4
 801cd9e:	441d      	add	r5, r3
 801cda0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cda4:	e63d      	b.n	801ca22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cda6:	2800      	cmp	r0, #0
 801cda8:	f43f aedd 	beq.w	801cb66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cdac:	5c79      	ldrb	r1, [r7, r1]
 801cdae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cdb2:	910b      	str	r1, [sp, #44]	; 0x2c
 801cdb4:	0e09      	lsrs	r1, r1, #24
 801cdb6:	9114      	str	r1, [sp, #80]	; 0x50
 801cdb8:	e6d5      	b.n	801cb66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cdba:	b01f      	add	sp, #124	; 0x7c
 801cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdc0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc4:	b089      	sub	sp, #36	; 0x24
 801cdc6:	9101      	str	r1, [sp, #4]
 801cdc8:	9801      	ldr	r0, [sp, #4]
 801cdca:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801cdce:	8800      	ldrh	r0, [r0, #0]
 801cdd0:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801cdd4:	1206      	asrs	r6, r0, #8
 801cdd6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cdda:	9602      	str	r6, [sp, #8]
 801cddc:	10c6      	asrs	r6, r0, #3
 801cdde:	00c0      	lsls	r0, r0, #3
 801cde0:	b2c0      	uxtb	r0, r0
 801cde2:	9004      	str	r0, [sp, #16]
 801cde4:	fb07 100c 	mla	r0, r7, ip, r1
 801cde8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cdec:	2f00      	cmp	r7, #0
 801cdee:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801cdf2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801cdf6:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801cdfa:	9603      	str	r6, [sp, #12]
 801cdfc:	eb02 0e00 	add.w	lr, r2, r0
 801ce00:	f2c0 810a 	blt.w	801d018 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801ce04:	45b8      	cmp	r8, r7
 801ce06:	f340 8107 	ble.w	801d018 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801ce0a:	2900      	cmp	r1, #0
 801ce0c:	f2c0 8102 	blt.w	801d014 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801ce10:	458c      	cmp	ip, r1
 801ce12:	f340 80ff 	ble.w	801d014 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801ce16:	5c12      	ldrb	r2, [r2, r0]
 801ce18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ce1c:	1c4a      	adds	r2, r1, #1
 801ce1e:	f100 80fe 	bmi.w	801d01e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801ce22:	4594      	cmp	ip, r2
 801ce24:	f340 80fb 	ble.w	801d01e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801ce28:	2d00      	cmp	r5, #0
 801ce2a:	f000 80fa 	beq.w	801d022 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801ce2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ce32:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ce36:	3701      	adds	r7, #1
 801ce38:	f100 80f7 	bmi.w	801d02a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801ce3c:	45b8      	cmp	r8, r7
 801ce3e:	f340 80f4 	ble.w	801d02a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801ce42:	2c00      	cmp	r4, #0
 801ce44:	f000 80f4 	beq.w	801d030 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801ce48:	2900      	cmp	r1, #0
 801ce4a:	eb0e 020c 	add.w	r2, lr, ip
 801ce4e:	f2c0 80ea 	blt.w	801d026 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801ce52:	458c      	cmp	ip, r1
 801ce54:	f340 80e7 	ble.w	801d026 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801ce58:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801ce5c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801ce60:	3101      	adds	r1, #1
 801ce62:	f100 80e8 	bmi.w	801d036 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801ce66:	458c      	cmp	ip, r1
 801ce68:	f340 80e5 	ble.w	801d036 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801ce6c:	2d00      	cmp	r5, #0
 801ce6e:	f000 80e4 	beq.w	801d03a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801ce72:	7852      	ldrb	r2, [r2, #1]
 801ce74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ce78:	0e0b      	lsrs	r3, r1, #24
 801ce7a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801ce7e:	9300      	str	r3, [sp, #0]
 801ce80:	b2a4      	uxth	r4, r4
 801ce82:	b2ab      	uxth	r3, r5
 801ce84:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801ce88:	fb03 f904 	mul.w	r9, r3, r4
 801ce8c:	fb0a f505 	mul.w	r5, sl, r5
 801ce90:	011b      	lsls	r3, r3, #4
 801ce92:	eba3 0e09 	sub.w	lr, r3, r9
 801ce96:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801ce9a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801ce9e:	0a28      	lsrs	r0, r5, #8
 801cea0:	fb0a f303 	mul.w	r3, sl, r3
 801cea4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cea8:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801ceac:	4405      	add	r5, r0
 801ceae:	0a2d      	lsrs	r5, r5, #8
 801ceb0:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801ceb4:	9005      	str	r0, [sp, #20]
 801ceb6:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801ceba:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cebe:	0a1b      	lsrs	r3, r3, #8
 801cec0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cec4:	9306      	str	r3, [sp, #24]
 801cec6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801ceca:	fb0b f303 	mul.w	r3, fp, r3
 801cece:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ced2:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801ced6:	fb0b f606 	mul.w	r6, fp, r6
 801ceda:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801cede:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cee2:	fb08 f707 	mul.w	r7, r8, r7
 801cee6:	0a1d      	lsrs	r5, r3, #8
 801cee8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ceec:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801cef0:	441d      	add	r5, r3
 801cef2:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801cef6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801cefa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cefe:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801cf02:	fb08 fc0c 	mul.w	ip, r8, ip
 801cf06:	0a1b      	lsrs	r3, r3, #8
 801cf08:	9307      	str	r3, [sp, #28]
 801cf0a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801cf0e:	0e0b      	lsrs	r3, r1, #24
 801cf10:	0a2d      	lsrs	r5, r5, #8
 801cf12:	fa1f fe8e 	uxth.w	lr, lr
 801cf16:	435f      	muls	r7, r3
 801cf18:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cf1c:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801cf20:	fb05 f50e 	mul.w	r5, r5, lr
 801cf24:	b2a4      	uxth	r4, r4
 801cf26:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801cf2a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cf2e:	4359      	muls	r1, r3
 801cf30:	1b12      	subs	r2, r2, r4
 801cf32:	9b05      	ldr	r3, [sp, #20]
 801cf34:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf38:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cf3c:	b292      	uxth	r2, r2
 801cf3e:	4460      	add	r0, ip
 801cf40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cf44:	fb03 5502 	mla	r5, r3, r2, r5
 801cf48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cf4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf50:	44bc      	add	ip, r7
 801cf52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf5a:	0a36      	lsrs	r6, r6, #8
 801cf5c:	fb0c 5509 	mla	r5, ip, r9, r5
 801cf60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf64:	fb0e f606 	mul.w	r6, lr, r6
 801cf68:	9b06      	ldr	r3, [sp, #24]
 801cf6a:	0a00      	lsrs	r0, r0, #8
 801cf6c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cf70:	fb00 5504 	mla	r5, r0, r4, r5
 801cf74:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801cf78:	fb02 6000 	mla	r0, r2, r0, r6
 801cf7c:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801cf80:	fb0e fe0b 	mul.w	lr, lr, fp
 801cf84:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801cf88:	0a09      	lsrs	r1, r1, #8
 801cf8a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cf8e:	fb09 0001 	mla	r0, r9, r1, r0
 801cf92:	fb02 e20a 	mla	r2, r2, sl, lr
 801cf96:	9b07      	ldr	r3, [sp, #28]
 801cf98:	0a2d      	lsrs	r5, r5, #8
 801cf9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cf9e:	fb04 0003 	mla	r0, r4, r3, r0
 801cfa2:	fb04 2408 	mla	r4, r4, r8, r2
 801cfa6:	9b00      	ldr	r3, [sp, #0]
 801cfa8:	9a04      	ldr	r2, [sp, #16]
 801cfaa:	fb09 4903 	mla	r9, r9, r3, r4
 801cfae:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801cfb2:	9b02      	ldr	r3, [sp, #8]
 801cfb4:	fa5f f989 	uxtb.w	r9, r9
 801cfb8:	fb03 f109 	mul.w	r1, r3, r9
 801cfbc:	9b03      	ldr	r3, [sp, #12]
 801cfbe:	0a00      	lsrs	r0, r0, #8
 801cfc0:	fb03 f309 	mul.w	r3, r3, r9
 801cfc4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cfc8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cfcc:	4305      	orrs	r5, r0
 801cfce:	fb02 f909 	mul.w	r9, r2, r9
 801cfd2:	1c58      	adds	r0, r3, #1
 801cfd4:	1c4a      	adds	r2, r1, #1
 801cfd6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cfda:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cfde:	0a2b      	lsrs	r3, r5, #8
 801cfe0:	0c2a      	lsrs	r2, r5, #16
 801cfe2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cfe6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801cfea:	00db      	lsls	r3, r3, #3
 801cfec:	0212      	lsls	r2, r2, #8
 801cfee:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801cff2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cff6:	4313      	orrs	r3, r2
 801cff8:	f109 0201 	add.w	r2, r9, #1
 801cffc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d000:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801d004:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d008:	431d      	orrs	r5, r3
 801d00a:	9b01      	ldr	r3, [sp, #4]
 801d00c:	801d      	strh	r5, [r3, #0]
 801d00e:	b009      	add	sp, #36	; 0x24
 801d010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d014:	2000      	movs	r0, #0
 801d016:	e701      	b.n	801ce1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801d018:	2600      	movs	r6, #0
 801d01a:	4630      	mov	r0, r6
 801d01c:	e70b      	b.n	801ce36 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d01e:	2600      	movs	r6, #0
 801d020:	e709      	b.n	801ce36 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d022:	462e      	mov	r6, r5
 801d024:	e707      	b.n	801ce36 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d026:	2700      	movs	r7, #0
 801d028:	e71a      	b.n	801ce60 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801d02a:	2100      	movs	r1, #0
 801d02c:	460f      	mov	r7, r1
 801d02e:	e723      	b.n	801ce78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d030:	4621      	mov	r1, r4
 801d032:	4627      	mov	r7, r4
 801d034:	e720      	b.n	801ce78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d036:	2100      	movs	r1, #0
 801d038:	e71e      	b.n	801ce78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d03a:	4629      	mov	r1, r5
 801d03c:	e71c      	b.n	801ce78 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

0801d040 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d044:	b09b      	sub	sp, #108	; 0x6c
 801d046:	9218      	str	r2, [sp, #96]	; 0x60
 801d048:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d04a:	9019      	str	r0, [sp, #100]	; 0x64
 801d04c:	6850      	ldr	r0, [r2, #4]
 801d04e:	9116      	str	r1, [sp, #88]	; 0x58
 801d050:	9307      	str	r3, [sp, #28]
 801d052:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d056:	fb00 1303 	mla	r3, r0, r3, r1
 801d05a:	6812      	ldr	r2, [r2, #0]
 801d05c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801d05e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d062:	930a      	str	r3, [sp, #40]	; 0x28
 801d064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	930f      	str	r3, [sp, #60]	; 0x3c
 801d06a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d06c:	685e      	ldr	r6, [r3, #4]
 801d06e:	3604      	adds	r6, #4
 801d070:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d072:	2b00      	cmp	r3, #0
 801d074:	dc03      	bgt.n	801d07e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d076:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d078:	2b00      	cmp	r3, #0
 801d07a:	f340 8373 	ble.w	801d764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801d07e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d080:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d084:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d088:	1e48      	subs	r0, r1, #1
 801d08a:	1e57      	subs	r7, r2, #1
 801d08c:	9b07      	ldr	r3, [sp, #28]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	f340 818f 	ble.w	801d3b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801d094:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d096:	142b      	asrs	r3, r5, #16
 801d098:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d09c:	d406      	bmi.n	801d0ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d09e:	4584      	cmp	ip, r0
 801d0a0:	da04      	bge.n	801d0ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	db02      	blt.n	801d0ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0a6:	42bb      	cmp	r3, r7
 801d0a8:	f2c0 8184 	blt.w	801d3b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d0ac:	f11c 0c01 	adds.w	ip, ip, #1
 801d0b0:	f100 8172 	bmi.w	801d398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0b4:	4561      	cmp	r1, ip
 801d0b6:	f2c0 816f 	blt.w	801d398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0ba:	3301      	adds	r3, #1
 801d0bc:	f100 816c 	bmi.w	801d398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0c0:	429a      	cmp	r2, r3
 801d0c2:	f2c0 8169 	blt.w	801d398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0c6:	9b07      	ldr	r3, [sp, #28]
 801d0c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d0ca:	9317      	str	r3, [sp, #92]	; 0x5c
 801d0cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	f340 818e 	ble.w	801d3f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801d0d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d0d6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d0da:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d0de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d0e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d0e4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d0e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d0ea:	141b      	asrs	r3, r3, #16
 801d0ec:	f100 81d1 	bmi.w	801d492 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d0f0:	f101 38ff 	add.w	r8, r1, #4294967295
 801d0f4:	4543      	cmp	r3, r8
 801d0f6:	f280 81cc 	bge.w	801d492 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d0fa:	f1bc 0f00 	cmp.w	ip, #0
 801d0fe:	f2c0 81c8 	blt.w	801d492 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d102:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d106:	45c4      	cmp	ip, r8
 801d108:	f280 81c3 	bge.w	801d492 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d10c:	b209      	sxth	r1, r1
 801d10e:	fb0c 3301 	mla	r3, ip, r1, r3
 801d112:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d114:	eb04 0803 	add.w	r8, r4, r3
 801d118:	5ce3      	ldrb	r3, [r4, r3]
 801d11a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d11e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d122:	2a00      	cmp	r2, #0
 801d124:	f000 81aa 	beq.w	801d47c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801d128:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d12c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d130:	940b      	str	r4, [sp, #44]	; 0x2c
 801d132:	0e24      	lsrs	r4, r4, #24
 801d134:	9412      	str	r4, [sp, #72]	; 0x48
 801d136:	b178      	cbz	r0, 801d158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d138:	eb08 0c01 	add.w	ip, r8, r1
 801d13c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d140:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d144:	9108      	str	r1, [sp, #32]
 801d146:	0e09      	lsrs	r1, r1, #24
 801d148:	9110      	str	r1, [sp, #64]	; 0x40
 801d14a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d14e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d152:	910c      	str	r1, [sp, #48]	; 0x30
 801d154:	0e09      	lsrs	r1, r1, #24
 801d156:	9113      	str	r1, [sp, #76]	; 0x4c
 801d158:	b292      	uxth	r2, r2
 801d15a:	b280      	uxth	r0, r0
 801d15c:	fb02 f900 	mul.w	r9, r2, r0
 801d160:	0112      	lsls	r2, r2, #4
 801d162:	eba2 0809 	sub.w	r8, r2, r9
 801d166:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d168:	fa1f f888 	uxth.w	r8, r8
 801d16c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d170:	fb08 f101 	mul.w	r1, r8, r1
 801d174:	b280      	uxth	r0, r0
 801d176:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d17a:	1a12      	subs	r2, r2, r0
 801d17c:	b292      	uxth	r2, r2
 801d17e:	fb02 110e 	mla	r1, r2, lr, r1
 801d182:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d184:	fb00 1104 	mla	r1, r0, r4, r1
 801d188:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d18a:	fb09 1104 	mla	r1, r9, r4, r1
 801d18e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d192:	2900      	cmp	r1, #0
 801d194:	f000 80f5 	beq.w	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d198:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d19c:	d01b      	beq.n	801d1d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d19e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d1a2:	fb0e fa0a 	mul.w	sl, lr, sl
 801d1a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d1aa:	fb0e fe03 	mul.w	lr, lr, r3
 801d1ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d1b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d1b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d1ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d1be:	4453      	add	r3, sl
 801d1c0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d1c4:	0a1b      	lsrs	r3, r3, #8
 801d1c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d1ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d1d2:	ea43 030c 	orr.w	r3, r3, ip
 801d1d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d1d8:	2cff      	cmp	r4, #255	; 0xff
 801d1da:	d021      	beq.n	801d220 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d1dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d1de:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d1e2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d1e4:	fb04 fb0b 	mul.w	fp, r4, fp
 801d1e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d1ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d1ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d1f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d1f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d200:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d204:	44de      	add	lr, fp
 801d206:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d20a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d20e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d212:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d216:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d21a:	ea4e 040a 	orr.w	r4, lr, sl
 801d21e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d220:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d222:	2cff      	cmp	r4, #255	; 0xff
 801d224:	d021      	beq.n	801d26a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d226:	9c08      	ldr	r4, [sp, #32]
 801d228:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d22c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d22e:	fb04 fb0b 	mul.w	fp, r4, fp
 801d232:	9c08      	ldr	r4, [sp, #32]
 801d234:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d238:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d23c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d23e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d242:	fb04 fa0a 	mul.w	sl, r4, sl
 801d246:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d24a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d24e:	44de      	add	lr, fp
 801d250:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d254:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d258:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d25c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d264:	ea4e 040a 	orr.w	r4, lr, sl
 801d268:	9408      	str	r4, [sp, #32]
 801d26a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d26c:	2cff      	cmp	r4, #255	; 0xff
 801d26e:	d021      	beq.n	801d2b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801d270:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d272:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d276:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d278:	fb04 fb0b 	mul.w	fp, r4, fp
 801d27c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d27e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d282:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d286:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d288:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d28c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d290:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d294:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d298:	44de      	add	lr, fp
 801d29a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d29e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d2ae:	ea4e 040a 	orr.w	r4, lr, sl
 801d2b2:	940c      	str	r4, [sp, #48]	; 0x30
 801d2b4:	43c9      	mvns	r1, r1
 801d2b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d2b8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d2bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d2c0:	fb08 fc0c 	mul.w	ip, r8, ip
 801d2c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d2c8:	9c08      	ldr	r4, [sp, #32]
 801d2ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d2ce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d2d2:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d2d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d2d8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d2dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d2de:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d2e2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d2e6:	fb08 f80e 	mul.w	r8, r8, lr
 801d2ea:	fb02 8303 	mla	r3, r2, r3, r8
 801d2ee:	9a08      	ldr	r2, [sp, #32]
 801d2f0:	f8b7 8000 	ldrh.w	r8, [r7]
 801d2f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d2f8:	fb00 330a 	mla	r3, r0, sl, r3
 801d2fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2fe:	fa5f fe81 	uxtb.w	lr, r1
 801d302:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801d306:	fb09 3900 	mla	r9, r9, r0, r3
 801d30a:	ea4f 2228 	mov.w	r2, r8, asr #8
 801d30e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d312:	fb02 f20e 	mul.w	r2, r2, lr
 801d316:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d31a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d31e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801d322:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d326:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d32a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d32e:	ea4c 0c09 	orr.w	ip, ip, r9
 801d332:	fb00 f00e 	mul.w	r0, r0, lr
 801d336:	1c53      	adds	r3, r2, #1
 801d338:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d33c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801d340:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d344:	4a62      	ldr	r2, [pc, #392]	; (801d4d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801d346:	b2db      	uxtb	r3, r3
 801d348:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801d34c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801d350:	b2c9      	uxtb	r1, r1
 801d352:	1c43      	adds	r3, r0, #1
 801d354:	fb01 f10e 	mul.w	r1, r1, lr
 801d358:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d35c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d360:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d364:	00db      	lsls	r3, r3, #3
 801d366:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d36a:	4313      	orrs	r3, r2
 801d36c:	1c4a      	adds	r2, r1, #1
 801d36e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d372:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d376:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801d37a:	ea4c 0c03 	orr.w	ip, ip, r3
 801d37e:	f8a7 c000 	strh.w	ip, [r7]
 801d382:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d384:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d386:	3702      	adds	r7, #2
 801d388:	441a      	add	r2, r3
 801d38a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d38c:	9225      	str	r2, [sp, #148]	; 0x94
 801d38e:	441d      	add	r5, r3
 801d390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d392:	3b01      	subs	r3, #1
 801d394:	9317      	str	r3, [sp, #92]	; 0x5c
 801d396:	e699      	b.n	801d0cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d398:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d39a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d39c:	441c      	add	r4, r3
 801d39e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3a0:	9425      	str	r4, [sp, #148]	; 0x94
 801d3a2:	441d      	add	r5, r3
 801d3a4:	9b07      	ldr	r3, [sp, #28]
 801d3a6:	3b01      	subs	r3, #1
 801d3a8:	9307      	str	r3, [sp, #28]
 801d3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3ac:	3302      	adds	r3, #2
 801d3ae:	930a      	str	r3, [sp, #40]	; 0x28
 801d3b0:	e66c      	b.n	801d08c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d3b2:	d024      	beq.n	801d3fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801d3b4:	9b07      	ldr	r3, [sp, #28]
 801d3b6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d3b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d3ba:	3b01      	subs	r3, #1
 801d3bc:	fb00 4003 	mla	r0, r0, r3, r4
 801d3c0:	1400      	asrs	r0, r0, #16
 801d3c2:	f53f ae80 	bmi.w	801d0c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3c6:	3901      	subs	r1, #1
 801d3c8:	4288      	cmp	r0, r1
 801d3ca:	f6bf ae7c 	bge.w	801d0c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3ce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d3d0:	fb01 5303 	mla	r3, r1, r3, r5
 801d3d4:	141b      	asrs	r3, r3, #16
 801d3d6:	f53f ae76 	bmi.w	801d0c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3da:	3a01      	subs	r2, #1
 801d3dc:	4293      	cmp	r3, r2
 801d3de:	f6bf ae72 	bge.w	801d0c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d3e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801d3ea:	f1bb 0f00 	cmp.w	fp, #0
 801d3ee:	dc71      	bgt.n	801d4d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801d3f0:	9b07      	ldr	r3, [sp, #28]
 801d3f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3f8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d3fc:	930a      	str	r3, [sp, #40]	; 0x28
 801d3fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d400:	2b00      	cmp	r3, #0
 801d402:	f340 81af 	ble.w	801d764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801d406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d40a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d40e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d412:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d416:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d41a:	eef0 6a62 	vmov.f32	s13, s5
 801d41e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d422:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d426:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d42a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d42e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d432:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801d436:	eef0 6a43 	vmov.f32	s13, s6
 801d43a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d43e:	ee12 2a90 	vmov	r2, s5
 801d442:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d446:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d448:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d44c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d450:	ee13 2a10 	vmov	r2, s6
 801d454:	9327      	str	r3, [sp, #156]	; 0x9c
 801d456:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d458:	ee16 5a90 	vmov	r5, s13
 801d45c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d460:	9328      	str	r3, [sp, #160]	; 0xa0
 801d462:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d464:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d466:	3b01      	subs	r3, #1
 801d468:	9316      	str	r3, [sp, #88]	; 0x58
 801d46a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d46c:	bf08      	it	eq
 801d46e:	4613      	moveq	r3, r2
 801d470:	eeb0 3a67 	vmov.f32	s6, s15
 801d474:	9307      	str	r3, [sp, #28]
 801d476:	eef0 2a47 	vmov.f32	s5, s14
 801d47a:	e5f9      	b.n	801d070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d47c:	2800      	cmp	r0, #0
 801d47e:	f43f ae6b 	beq.w	801d158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d482:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d486:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d48a:	9108      	str	r1, [sp, #32]
 801d48c:	0e09      	lsrs	r1, r1, #24
 801d48e:	9110      	str	r1, [sp, #64]	; 0x40
 801d490:	e662      	b.n	801d158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d492:	f113 0801 	adds.w	r8, r3, #1
 801d496:	f53f af74 	bmi.w	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d49a:	4541      	cmp	r1, r8
 801d49c:	f6ff af71 	blt.w	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4a0:	f11c 0801 	adds.w	r8, ip, #1
 801d4a4:	f53f af6d 	bmi.w	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4a8:	45c6      	cmp	lr, r8
 801d4aa:	f6ff af6a 	blt.w	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4ae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d4b2:	b209      	sxth	r1, r1
 801d4b4:	fa0f f38e 	sxth.w	r3, lr
 801d4b8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d4bc:	9301      	str	r3, [sp, #4]
 801d4be:	9100      	str	r1, [sp, #0]
 801d4c0:	4633      	mov	r3, r6
 801d4c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4c4:	4639      	mov	r1, r7
 801d4c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d4c8:	f7ff fc7a 	bl	801cdc0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801d4cc:	e759      	b.n	801d382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4ce:	bf00      	nop
 801d4d0:	fffff800 	.word	0xfffff800
 801d4d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d4d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d4d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d4dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4de:	1427      	asrs	r7, r4, #16
 801d4e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4e4:	142b      	asrs	r3, r5, #16
 801d4e6:	fb01 7303 	mla	r3, r1, r3, r7
 801d4ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d4ec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d4f0:	18e7      	adds	r7, r4, r3
 801d4f2:	5ce3      	ldrb	r3, [r4, r3]
 801d4f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d4f8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d4fc:	2a00      	cmp	r2, #0
 801d4fe:	f000 8127 	beq.w	801d750 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801d502:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d506:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d50a:	940d      	str	r4, [sp, #52]	; 0x34
 801d50c:	0e24      	lsrs	r4, r4, #24
 801d50e:	9414      	str	r4, [sp, #80]	; 0x50
 801d510:	b170      	cbz	r0, 801d530 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d512:	eb07 0e01 	add.w	lr, r7, r1
 801d516:	5c79      	ldrb	r1, [r7, r1]
 801d518:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d51c:	9109      	str	r1, [sp, #36]	; 0x24
 801d51e:	0e09      	lsrs	r1, r1, #24
 801d520:	9111      	str	r1, [sp, #68]	; 0x44
 801d522:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d526:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d52a:	910e      	str	r1, [sp, #56]	; 0x38
 801d52c:	0e09      	lsrs	r1, r1, #24
 801d52e:	9115      	str	r1, [sp, #84]	; 0x54
 801d530:	b292      	uxth	r2, r2
 801d532:	b280      	uxth	r0, r0
 801d534:	fb02 f800 	mul.w	r8, r2, r0
 801d538:	0112      	lsls	r2, r2, #4
 801d53a:	eba2 0e08 	sub.w	lr, r2, r8
 801d53e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d544:	fa1f fe8e 	uxth.w	lr, lr
 801d548:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d54c:	fb0e f202 	mul.w	r2, lr, r2
 801d550:	b280      	uxth	r0, r0
 801d552:	1a09      	subs	r1, r1, r0
 801d554:	b289      	uxth	r1, r1
 801d556:	fb01 220c 	mla	r2, r1, ip, r2
 801d55a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d55c:	fb00 2204 	mla	r2, r0, r4, r2
 801d560:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d562:	fb08 2204 	mla	r2, r8, r4, r2
 801d566:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d56a:	2a00      	cmp	r2, #0
 801d56c:	f000 80e5 	beq.w	801d73a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801d570:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d574:	d019      	beq.n	801d5aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801d576:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d57a:	fb0c fa0a 	mul.w	sl, ip, sl
 801d57e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d582:	fb0c fc03 	mul.w	ip, ip, r3
 801d586:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d58a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d58e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d592:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d596:	4453      	add	r3, sl
 801d598:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d59c:	0a1b      	lsrs	r3, r3, #8
 801d59e:	0a3f      	lsrs	r7, r7, #8
 801d5a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d5a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d5a8:	433b      	orrs	r3, r7
 801d5aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5ac:	2cff      	cmp	r4, #255	; 0xff
 801d5ae:	d020      	beq.n	801d5f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801d5b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d5b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5b8:	4367      	muls	r7, r4
 801d5ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d5c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d5c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d5ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801d5ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5d2:	44bc      	add	ip, r7
 801d5d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d5d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d5e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d5ec:	ea4c 040a 	orr.w	r4, ip, sl
 801d5f0:	940d      	str	r4, [sp, #52]	; 0x34
 801d5f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d5f4:	2cff      	cmp	r4, #255	; 0xff
 801d5f6:	d020      	beq.n	801d63a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801d5f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d5fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d5fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d600:	4367      	muls	r7, r4
 801d602:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d604:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d608:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d60c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d60e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d612:	fb04 fa0a 	mul.w	sl, r4, sl
 801d616:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d61a:	44bc      	add	ip, r7
 801d61c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d620:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d624:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d628:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d62c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d630:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d634:	ea4c 040a 	orr.w	r4, ip, sl
 801d638:	9409      	str	r4, [sp, #36]	; 0x24
 801d63a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d63c:	2cff      	cmp	r4, #255	; 0xff
 801d63e:	d020      	beq.n	801d682 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801d640:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d642:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d646:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d648:	4367      	muls	r7, r4
 801d64a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d64c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d650:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d654:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d656:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d65a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d65e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d662:	44bc      	add	ip, r7
 801d664:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d668:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d66c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d670:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d674:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d678:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d67c:	ea4c 040a 	orr.w	r4, ip, sl
 801d680:	940e      	str	r4, [sp, #56]	; 0x38
 801d682:	43d2      	mvns	r2, r2
 801d684:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d686:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d68a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d68e:	fb0e f707 	mul.w	r7, lr, r7
 801d692:	fb01 770c 	mla	r7, r1, ip, r7
 801d696:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d69c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6a0:	fb00 770c 	mla	r7, r0, ip, r7
 801d6a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d6a6:	b2d2      	uxtb	r2, r2
 801d6a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d6ae:	fb08 770c 	mla	r7, r8, ip, r7
 801d6b2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d6b6:	fb0e fe0c 	mul.w	lr, lr, ip
 801d6ba:	fb01 e303 	mla	r3, r1, r3, lr
 801d6be:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d6c0:	0a3f      	lsrs	r7, r7, #8
 801d6c2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801d6c6:	fb00 330a 	mla	r3, r0, sl, r3
 801d6ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d6cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d6d0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801d6d4:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d6d8:	f8b9 3000 	ldrh.w	r3, [r9]
 801d6dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6e0:	1218      	asrs	r0, r3, #8
 801d6e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d6e6:	4350      	muls	r0, r2
 801d6e8:	10d9      	asrs	r1, r3, #3
 801d6ea:	00db      	lsls	r3, r3, #3
 801d6ec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d6f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d6f4:	b2db      	uxtb	r3, r3
 801d6f6:	ea47 070c 	orr.w	r7, r7, ip
 801d6fa:	4351      	muls	r1, r2
 801d6fc:	4353      	muls	r3, r2
 801d6fe:	1c42      	adds	r2, r0, #1
 801d700:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d704:	0c3a      	lsrs	r2, r7, #16
 801d706:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d70a:	4a18      	ldr	r2, [pc, #96]	; (801d76c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801d70c:	b2c0      	uxtb	r0, r0
 801d70e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801d712:	1c4a      	adds	r2, r1, #1
 801d714:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d718:	0a3a      	lsrs	r2, r7, #8
 801d71a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d71e:	00c9      	lsls	r1, r1, #3
 801d720:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d724:	4301      	orrs	r1, r0
 801d726:	1c58      	adds	r0, r3, #1
 801d728:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d72c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801d730:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801d734:	4308      	orrs	r0, r1
 801d736:	f8a9 0000 	strh.w	r0, [r9]
 801d73a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d73c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d73e:	f109 0902 	add.w	r9, r9, #2
 801d742:	441a      	add	r2, r3
 801d744:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d746:	9225      	str	r2, [sp, #148]	; 0x94
 801d748:	441d      	add	r5, r3
 801d74a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d74e:	e64c      	b.n	801d3ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801d750:	2800      	cmp	r0, #0
 801d752:	f43f aeed 	beq.w	801d530 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d756:	5c79      	ldrb	r1, [r7, r1]
 801d758:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d75c:	9109      	str	r1, [sp, #36]	; 0x24
 801d75e:	0e09      	lsrs	r1, r1, #24
 801d760:	9111      	str	r1, [sp, #68]	; 0x44
 801d762:	e6e5      	b.n	801d530 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d764:	b01b      	add	sp, #108	; 0x6c
 801d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d76a:	bf00      	nop
 801d76c:	fffff800 	.word	0xfffff800

0801d770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d774:	b085      	sub	sp, #20
 801d776:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801d77a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801d77e:	fb00 7406 	mla	r4, r0, r6, r7
 801d782:	2800      	cmp	r0, #0
 801d784:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801d788:	9103      	str	r1, [sp, #12]
 801d78a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801d78e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801d792:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801d796:	9501      	str	r5, [sp, #4]
 801d798:	eb03 0904 	add.w	r9, r3, r4
 801d79c:	f2c0 8150 	blt.w	801da40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801d7a0:	4583      	cmp	fp, r0
 801d7a2:	f340 814d 	ble.w	801da40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801d7a6:	2f00      	cmp	r7, #0
 801d7a8:	f2c0 8146 	blt.w	801da38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801d7ac:	42be      	cmp	r6, r7
 801d7ae:	f340 8143 	ble.w	801da38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801d7b2:	f813 c004 	ldrb.w	ip, [r3, r4]
 801d7b6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801d7ba:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801d7be:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801d7c2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801d7c6:	4355      	muls	r5, r2
 801d7c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7cc:	fb0c f203 	mul.w	r2, ip, r3
 801d7d0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801d7d4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801d7d8:	441d      	add	r5, r3
 801d7da:	f102 0320 	add.w	r3, r2, #32
 801d7de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d7e2:	0a1b      	lsrs	r3, r3, #8
 801d7e4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801d7e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7ec:	431c      	orrs	r4, r3
 801d7ee:	1c7b      	adds	r3, r7, #1
 801d7f0:	f100 812b 	bmi.w	801da4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801d7f4:	429e      	cmp	r6, r3
 801d7f6:	f340 8128 	ble.w	801da4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801d7fa:	2900      	cmp	r1, #0
 801d7fc:	f000 8128 	beq.w	801da50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801d800:	9a01      	ldr	r2, [sp, #4]
 801d802:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d806:	8855      	ldrh	r5, [r2, #2]
 801d808:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801d80c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801d810:	fb08 f802 	mul.w	r8, r8, r2
 801d814:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801d818:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d81c:	435d      	muls	r5, r3
 801d81e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801d822:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d826:	44d0      	add	r8, sl
 801d828:	f105 0a20 	add.w	sl, r5, #32
 801d82c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d830:	0a2d      	lsrs	r5, r5, #8
 801d832:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801d836:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d83a:	432a      	orrs	r2, r5
 801d83c:	3001      	adds	r0, #1
 801d83e:	f100 810d 	bmi.w	801da5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801d842:	4583      	cmp	fp, r0
 801d844:	f340 810a 	ble.w	801da5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801d848:	f1be 0f00 	cmp.w	lr, #0
 801d84c:	f000 810b 	beq.w	801da66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801d850:	2f00      	cmp	r7, #0
 801d852:	f2c0 8100 	blt.w	801da56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801d856:	42be      	cmp	r6, r7
 801d858:	f340 80fd 	ble.w	801da56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801d85c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801d860:	9801      	ldr	r0, [sp, #4]
 801d862:	f819 5006 	ldrb.w	r5, [r9, r6]
 801d866:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801d86a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d86e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801d872:	fb0a fa00 	mul.w	sl, sl, r0
 801d876:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d87a:	fb05 f808 	mul.w	r8, r5, r8
 801d87e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801d882:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801d886:	4482      	add	sl, r0
 801d888:	f108 0020 	add.w	r0, r8, #32
 801d88c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d890:	0a00      	lsrs	r0, r0, #8
 801d892:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801d896:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d89a:	ea4b 0b00 	orr.w	fp, fp, r0
 801d89e:	3701      	adds	r7, #1
 801d8a0:	f100 80e6 	bmi.w	801da70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801d8a4:	42be      	cmp	r6, r7
 801d8a6:	f340 80e3 	ble.w	801da70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801d8aa:	2900      	cmp	r1, #0
 801d8ac:	f000 80e3 	beq.w	801da76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801d8b0:	9801      	ldr	r0, [sp, #4]
 801d8b2:	3601      	adds	r6, #1
 801d8b4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801d8b8:	f819 7006 	ldrb.w	r7, [r9, r6]
 801d8bc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801d8c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8c4:	fb07 f800 	mul.w	r8, r7, r0
 801d8c8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801d8cc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801d8d0:	fb09 f906 	mul.w	r9, r9, r6
 801d8d4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801d8d8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801d8dc:	44d1      	add	r9, sl
 801d8de:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801d8e2:	f108 0020 	add.w	r0, r8, #32
 801d8e6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d8ea:	0a00      	lsrs	r0, r0, #8
 801d8ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8f0:	4330      	orrs	r0, r6
 801d8f2:	b28e      	uxth	r6, r1
 801d8f4:	fa1f f98e 	uxth.w	r9, lr
 801d8f8:	fb06 f809 	mul.w	r8, r6, r9
 801d8fc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801d900:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801d904:	0136      	lsls	r6, r6, #4
 801d906:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d90a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801d90e:	9601      	str	r6, [sp, #4]
 801d910:	ea4a 0404 	orr.w	r4, sl, r4
 801d914:	fa1f f689 	uxth.w	r6, r9
 801d918:	9602      	str	r6, [sp, #8]
 801d91a:	4626      	mov	r6, r4
 801d91c:	fb11 f90e 	smulbb	r9, r1, lr
 801d920:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d924:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801d928:	f1ce 0410 	rsb	r4, lr, #16
 801d92c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d930:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d934:	1a64      	subs	r4, r4, r1
 801d936:	ea4a 0202 	orr.w	r2, sl, r2
 801d93a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801d93e:	434a      	muls	r2, r1
 801d940:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801d944:	fb04 2406 	mla	r4, r4, r6, r2
 801d948:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d94c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d950:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d954:	ea4a 0000 	orr.w	r0, sl, r0
 801d958:	fb09 4200 	mla	r2, r9, r0, r4
 801d95c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801d960:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d964:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801d968:	ea44 0b0b 	orr.w	fp, r4, fp
 801d96c:	9c01      	ldr	r4, [sp, #4]
 801d96e:	9e02      	ldr	r6, [sp, #8]
 801d970:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801d974:	1ba4      	subs	r4, r4, r6
 801d976:	9e01      	ldr	r6, [sp, #4]
 801d978:	b2a4      	uxth	r4, r4
 801d97a:	eba6 0608 	sub.w	r6, r6, r8
 801d97e:	b2b6      	uxth	r6, r6
 801d980:	4373      	muls	r3, r6
 801d982:	fb0c 3304 	mla	r3, ip, r4, r3
 801d986:	9c02      	ldr	r4, [sp, #8]
 801d988:	9903      	ldr	r1, [sp, #12]
 801d98a:	fb04 3505 	mla	r5, r4, r5, r3
 801d98e:	fb08 5707 	mla	r7, r8, r7, r5
 801d992:	8808      	ldrh	r0, [r1, #0]
 801d994:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801d998:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d99c:	b289      	uxth	r1, r1
 801d99e:	434f      	muls	r7, r1
 801d9a0:	1c7b      	adds	r3, r7, #1
 801d9a2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d9a6:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801d9aa:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801d9ae:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801d9b2:	1203      	asrs	r3, r0, #8
 801d9b4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d9b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d9bc:	b2ff      	uxtb	r7, r7
 801d9be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d9c2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d9c6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d9ca:	fb13 f307 	smulbb	r3, r3, r7
 801d9ce:	ea42 0e0e 	orr.w	lr, r2, lr
 801d9d2:	fa1f f28e 	uxth.w	r2, lr
 801d9d6:	1215      	asrs	r5, r2, #8
 801d9d8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d9dc:	fb05 3501 	mla	r5, r5, r1, r3
 801d9e0:	10c3      	asrs	r3, r0, #3
 801d9e2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d9e6:	fb13 f307 	smulbb	r3, r3, r7
 801d9ea:	10d4      	asrs	r4, r2, #3
 801d9ec:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d9f0:	fb04 3401 	mla	r4, r4, r1, r3
 801d9f4:	00c3      	lsls	r3, r0, #3
 801d9f6:	b2db      	uxtb	r3, r3
 801d9f8:	fb13 f307 	smulbb	r3, r3, r7
 801d9fc:	00d2      	lsls	r2, r2, #3
 801d9fe:	b2d2      	uxtb	r2, r2
 801da00:	fb02 3101 	mla	r1, r2, r1, r3
 801da04:	b2ad      	uxth	r5, r5
 801da06:	b289      	uxth	r1, r1
 801da08:	b2a4      	uxth	r4, r4
 801da0a:	1c6b      	adds	r3, r5, #1
 801da0c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801da10:	1c62      	adds	r2, r4, #1
 801da12:	1c4b      	adds	r3, r1, #1
 801da14:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801da18:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801da1c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801da20:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801da24:	0964      	lsrs	r4, r4, #5
 801da26:	432b      	orrs	r3, r5
 801da28:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801da2c:	9a03      	ldr	r2, [sp, #12]
 801da2e:	4323      	orrs	r3, r4
 801da30:	8013      	strh	r3, [r2, #0]
 801da32:	b005      	add	sp, #20
 801da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da38:	f04f 0c00 	mov.w	ip, #0
 801da3c:	4664      	mov	r4, ip
 801da3e:	e6d6      	b.n	801d7ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801da40:	2300      	movs	r3, #0
 801da42:	469c      	mov	ip, r3
 801da44:	461a      	mov	r2, r3
 801da46:	461c      	mov	r4, r3
 801da48:	e6f8      	b.n	801d83c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da4a:	2300      	movs	r3, #0
 801da4c:	461a      	mov	r2, r3
 801da4e:	e6f5      	b.n	801d83c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da50:	460b      	mov	r3, r1
 801da52:	460a      	mov	r2, r1
 801da54:	e6f2      	b.n	801d83c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da56:	2500      	movs	r5, #0
 801da58:	46ab      	mov	fp, r5
 801da5a:	e720      	b.n	801d89e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801da5c:	2700      	movs	r7, #0
 801da5e:	463d      	mov	r5, r7
 801da60:	4638      	mov	r0, r7
 801da62:	46bb      	mov	fp, r7
 801da64:	e745      	b.n	801d8f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801da66:	4677      	mov	r7, lr
 801da68:	4675      	mov	r5, lr
 801da6a:	4670      	mov	r0, lr
 801da6c:	46f3      	mov	fp, lr
 801da6e:	e740      	b.n	801d8f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801da70:	2700      	movs	r7, #0
 801da72:	4638      	mov	r0, r7
 801da74:	e73d      	b.n	801d8f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801da76:	460f      	mov	r7, r1
 801da78:	4608      	mov	r0, r1
 801da7a:	e73a      	b.n	801d8f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801da7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da80:	b097      	sub	sp, #92	; 0x5c
 801da82:	9214      	str	r2, [sp, #80]	; 0x50
 801da84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801da86:	9015      	str	r0, [sp, #84]	; 0x54
 801da88:	9308      	str	r3, [sp, #32]
 801da8a:	6850      	ldr	r0, [r2, #4]
 801da8c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801da90:	9111      	str	r1, [sp, #68]	; 0x44
 801da92:	9312      	str	r3, [sp, #72]	; 0x48
 801da94:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801da98:	fb00 1303 	mla	r3, r0, r3, r1
 801da9c:	6812      	ldr	r2, [r2, #0]
 801da9e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801daa2:	9309      	str	r3, [sp, #36]	; 0x24
 801daa4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	930b      	str	r3, [sp, #44]	; 0x2c
 801daaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801daac:	685b      	ldr	r3, [r3, #4]
 801daae:	930c      	str	r3, [sp, #48]	; 0x30
 801dab0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801dab4:	930a      	str	r3, [sp, #40]	; 0x28
 801dab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dab8:	2b00      	cmp	r3, #0
 801daba:	dc03      	bgt.n	801dac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dabc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	f340 83cb 	ble.w	801e25a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801dac4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dac6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801daca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dace:	1e48      	subs	r0, r1, #1
 801dad0:	1e55      	subs	r5, r2, #1
 801dad2:	9b08      	ldr	r3, [sp, #32]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	f340 81a3 	ble.w	801de20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801dada:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801dadc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dade:	1436      	asrs	r6, r6, #16
 801dae0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dae4:	d406      	bmi.n	801daf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dae6:	4286      	cmp	r6, r0
 801dae8:	da04      	bge.n	801daf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801daea:	2b00      	cmp	r3, #0
 801daec:	db02      	blt.n	801daf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801daee:	42ab      	cmp	r3, r5
 801daf0:	f2c0 8197 	blt.w	801de22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801daf4:	3601      	adds	r6, #1
 801daf6:	f100 8184 	bmi.w	801de02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801dafa:	42b1      	cmp	r1, r6
 801dafc:	f2c0 8181 	blt.w	801de02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db00:	3301      	adds	r3, #1
 801db02:	f100 817e 	bmi.w	801de02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db06:	429a      	cmp	r2, r3
 801db08:	f2c0 817b 	blt.w	801de02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db0c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801db10:	9b08      	ldr	r3, [sp, #32]
 801db12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801db14:	9313      	str	r3, [sp, #76]	; 0x4c
 801db16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db18:	2b00      	cmp	r3, #0
 801db1a:	f340 81a4 	ble.w	801de66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801db1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801db20:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801db22:	1418      	asrs	r0, r3, #16
 801db24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db26:	142d      	asrs	r5, r5, #16
 801db28:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801db2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801db2e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801db32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801db38:	f100 81f8 	bmi.w	801df2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db3c:	f102 3eff 	add.w	lr, r2, #4294967295
 801db40:	4575      	cmp	r5, lr
 801db42:	f280 81f3 	bge.w	801df2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db46:	2800      	cmp	r0, #0
 801db48:	f2c0 81f0 	blt.w	801df2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db4c:	f103 3eff 	add.w	lr, r3, #4294967295
 801db50:	4570      	cmp	r0, lr
 801db52:	f280 81eb 	bge.w	801df2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db56:	b212      	sxth	r2, r2
 801db58:	fb00 5002 	mla	r0, r0, r2, r5
 801db5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db5e:	fa1f fe81 	uxth.w	lr, r1
 801db62:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801db66:	eb03 0a00 	add.w	sl, r3, r0
 801db6a:	f813 9000 	ldrb.w	r9, [r3, r0]
 801db6e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801db72:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801db76:	b29b      	uxth	r3, r3
 801db78:	f1bc 0f00 	cmp.w	ip, #0
 801db7c:	f000 81b9 	beq.w	801def2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801db80:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801db84:	eb0a 0b02 	add.w	fp, sl, r2
 801db88:	fa1f fa8c 	uxth.w	sl, ip
 801db8c:	fb0a fe0e 	mul.w	lr, sl, lr
 801db90:	eba5 050e 	sub.w	r5, r5, lr
 801db94:	b2ad      	uxth	r5, r5
 801db96:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801db9a:	fb08 f505 	mul.w	r5, r8, r5
 801db9e:	fa1f fa8a 	uxth.w	sl, sl
 801dba2:	eba3 030a 	sub.w	r3, r3, sl
 801dba6:	b29b      	uxth	r3, r3
 801dba8:	940d      	str	r4, [sp, #52]	; 0x34
 801dbaa:	fb09 5303 	mla	r3, r9, r3, r5
 801dbae:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801dbb2:	940e      	str	r4, [sp, #56]	; 0x38
 801dbb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dbb6:	fb0a 3304 	mla	r3, sl, r4, r3
 801dbba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dbbc:	fb0e 3304 	mla	r3, lr, r4, r3
 801dbc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	f000 810f 	beq.w	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801dbca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dbcc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dbd0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801dbd4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801dbd8:	f000 8190 	beq.w	801defc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801dbdc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dbe0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801dbe4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dbe8:	fb09 f000 	mul.w	r0, r9, r0
 801dbec:	fb0a fe0e 	mul.w	lr, sl, lr
 801dbf0:	f100 0b20 	add.w	fp, r0, #32
 801dbf4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801dbf8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dbfc:	44ce      	add	lr, r9
 801dbfe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801dc02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc06:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc0a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dc0e:	ea4e 0909 	orr.w	r9, lr, r9
 801dc12:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc16:	8868      	ldrh	r0, [r5, #2]
 801dc18:	d019      	beq.n	801dc4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801dc1a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dc1e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801dc22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc26:	fb08 f800 	mul.w	r8, r8, r0
 801dc2a:	fb0a fe0e 	mul.w	lr, sl, lr
 801dc2e:	f108 0b20 	add.w	fp, r8, #32
 801dc32:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801dc36:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dc3a:	4486      	add	lr, r0
 801dc3c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801dc40:	0a00      	lsrs	r0, r0, #8
 801dc42:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc4a:	ea4e 0000 	orr.w	r0, lr, r0
 801dc4e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801dc52:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801dc56:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801dc5a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801dc5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dc62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801dc66:	ea4e 0909 	orr.w	r9, lr, r9
 801dc6a:	ea4a 0000 	orr.w	r0, sl, r0
 801dc6e:	f1bc 0f00 	cmp.w	ip, #0
 801dc72:	f000 8145 	beq.w	801df00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801dc76:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801dc7a:	3a01      	subs	r2, #1
 801dc7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dc7e:	0052      	lsls	r2, r2, #1
 801dc80:	3202      	adds	r2, #2
 801dc82:	2cff      	cmp	r4, #255	; 0xff
 801dc84:	eb05 0e02 	add.w	lr, r5, r2
 801dc88:	5aaa      	ldrh	r2, [r5, r2]
 801dc8a:	d018      	beq.n	801dcbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dc8c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801dc90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dc94:	fb04 fa02 	mul.w	sl, r4, r2
 801dc98:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dc9c:	fb08 f805 	mul.w	r8, r8, r5
 801dca0:	f10a 0520 	add.w	r5, sl, #32
 801dca4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801dca8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801dcac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dcb0:	4442      	add	r2, r8
 801dcb2:	0a2d      	lsrs	r5, r5, #8
 801dcb4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801dcb8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcbc:	432a      	orrs	r2, r5
 801dcbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dcc0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801dcc4:	2cff      	cmp	r4, #255	; 0xff
 801dcc6:	d01a      	beq.n	801dcfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dcc8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801dccc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcd0:	fb04 fa05 	mul.w	sl, r4, r5
 801dcd4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dcd8:	fb08 f80e 	mul.w	r8, r8, lr
 801dcdc:	f10a 0e20 	add.w	lr, sl, #32
 801dce0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801dce4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801dce8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dcec:	4445      	add	r5, r8
 801dcee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcf2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801dcf6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801dcfa:	ea45 050e 	orr.w	r5, r5, lr
 801dcfe:	fb1c fe01 	smulbb	lr, ip, r1
 801dd02:	f1cc 0810 	rsb	r8, ip, #16
 801dd06:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801dd0a:	eba8 0801 	sub.w	r8, r8, r1
 801dd0e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801dd12:	4341      	muls	r1, r0
 801dd14:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801dd18:	fb09 1108 	mla	r1, r9, r8, r1
 801dd1c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801dd20:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dd24:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801dd28:	ea4a 0202 	orr.w	r2, sl, r2
 801dd2c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801dd30:	fb0c 1102 	mla	r1, ip, r2, r1
 801dd34:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801dd38:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801dd3c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801dd40:	ea4b 0505 	orr.w	r5, fp, r5
 801dd44:	fb0e 1e05 	mla	lr, lr, r5, r1
 801dd48:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801dd4c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801dd50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dd54:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801dd58:	ea42 0e0e 	orr.w	lr, r2, lr
 801dd5c:	fa1f f28e 	uxth.w	r2, lr
 801dd60:	2bff      	cmp	r3, #255	; 0xff
 801dd62:	d103      	bne.n	801dd6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801dd64:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd66:	29ff      	cmp	r1, #255	; 0xff
 801dd68:	f000 80de 	beq.w	801df28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801dd6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dd6e:	8838      	ldrh	r0, [r7, #0]
 801dd70:	434b      	muls	r3, r1
 801dd72:	f103 0c01 	add.w	ip, r3, #1
 801dd76:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801dd7a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801dd7e:	fa5f fc83 	uxtb.w	ip, r3
 801dd82:	1203      	asrs	r3, r0, #8
 801dd84:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801dd88:	fb13 f30c 	smulbb	r3, r3, ip
 801dd8c:	1215      	asrs	r5, r2, #8
 801dd8e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dd92:	fb05 3501 	mla	r5, r5, r1, r3
 801dd96:	10c3      	asrs	r3, r0, #3
 801dd98:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801dd9c:	fb13 f30c 	smulbb	r3, r3, ip
 801dda0:	10d1      	asrs	r1, r2, #3
 801dda2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dda4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dda8:	fb01 3104 	mla	r1, r1, r4, r3
 801ddac:	00c3      	lsls	r3, r0, #3
 801ddae:	b2db      	uxtb	r3, r3
 801ddb0:	fb13 f30c 	smulbb	r3, r3, ip
 801ddb4:	00d2      	lsls	r2, r2, #3
 801ddb6:	b2d2      	uxtb	r2, r2
 801ddb8:	fb02 3304 	mla	r3, r2, r4, r3
 801ddbc:	b2ad      	uxth	r5, r5
 801ddbe:	b29a      	uxth	r2, r3
 801ddc0:	1c6b      	adds	r3, r5, #1
 801ddc2:	b289      	uxth	r1, r1
 801ddc4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ddc8:	1c53      	adds	r3, r2, #1
 801ddca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ddce:	1c4a      	adds	r2, r1, #1
 801ddd0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ddd4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ddd8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dddc:	0949      	lsrs	r1, r1, #5
 801ddde:	432b      	orrs	r3, r5
 801dde0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801dde4:	430b      	orrs	r3, r1
 801dde6:	803b      	strh	r3, [r7, #0]
 801dde8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ddea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ddec:	3702      	adds	r7, #2
 801ddee:	4413      	add	r3, r2
 801ddf0:	9321      	str	r3, [sp, #132]	; 0x84
 801ddf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ddf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ddf6:	441a      	add	r2, r3
 801ddf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ddfa:	9222      	str	r2, [sp, #136]	; 0x88
 801ddfc:	3b01      	subs	r3, #1
 801ddfe:	9313      	str	r3, [sp, #76]	; 0x4c
 801de00:	e689      	b.n	801db16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801de02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de04:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801de06:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801de08:	4433      	add	r3, r6
 801de0a:	9321      	str	r3, [sp, #132]	; 0x84
 801de0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de0e:	441c      	add	r4, r3
 801de10:	9b08      	ldr	r3, [sp, #32]
 801de12:	9422      	str	r4, [sp, #136]	; 0x88
 801de14:	3b01      	subs	r3, #1
 801de16:	9308      	str	r3, [sp, #32]
 801de18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de1a:	3302      	adds	r3, #2
 801de1c:	9309      	str	r3, [sp, #36]	; 0x24
 801de1e:	e658      	b.n	801dad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801de20:	d028      	beq.n	801de74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801de22:	9b08      	ldr	r3, [sp, #32]
 801de24:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801de26:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801de28:	3b01      	subs	r3, #1
 801de2a:	fb00 5003 	mla	r0, r0, r3, r5
 801de2e:	1400      	asrs	r0, r0, #16
 801de30:	f53f ae6c 	bmi.w	801db0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de34:	3901      	subs	r1, #1
 801de36:	4288      	cmp	r0, r1
 801de38:	f6bf ae68 	bge.w	801db0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de3c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801de3e:	9822      	ldr	r0, [sp, #136]	; 0x88
 801de40:	fb01 0303 	mla	r3, r1, r3, r0
 801de44:	141b      	asrs	r3, r3, #16
 801de46:	f53f ae61 	bmi.w	801db0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de4a:	3a01      	subs	r2, #1
 801de4c:	4293      	cmp	r3, r2
 801de4e:	f6bf ae5d 	bge.w	801db0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de52:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801de56:	9b08      	ldr	r3, [sp, #32]
 801de58:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801de5c:	9313      	str	r3, [sp, #76]	; 0x4c
 801de5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de60:	2b00      	cmp	r3, #0
 801de62:	f300 8082 	bgt.w	801df6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801de66:	9b08      	ldr	r3, [sp, #32]
 801de68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de6e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801de72:	9309      	str	r3, [sp, #36]	; 0x24
 801de74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801de76:	2b00      	cmp	r3, #0
 801de78:	f340 81ef 	ble.w	801e25a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801de7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de90:	eef0 6a62 	vmov.f32	s13, s5
 801de94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de98:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dea4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dea8:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801deac:	eef0 6a43 	vmov.f32	s13, s6
 801deb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801deb4:	ee12 2a90 	vmov	r2, s5
 801deb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801debc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801debe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dec2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dec6:	ee13 2a10 	vmov	r2, s6
 801deca:	9323      	str	r3, [sp, #140]	; 0x8c
 801decc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dece:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801ded2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ded6:	9324      	str	r3, [sp, #144]	; 0x90
 801ded8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dedc:	3b01      	subs	r3, #1
 801dede:	9311      	str	r3, [sp, #68]	; 0x44
 801dee0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dee2:	bf08      	it	eq
 801dee4:	4613      	moveq	r3, r2
 801dee6:	eeb0 3a67 	vmov.f32	s6, s15
 801deea:	9308      	str	r3, [sp, #32]
 801deec:	eef0 2a47 	vmov.f32	s5, s14
 801def0:	e5e1      	b.n	801dab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801def2:	fb08 f505 	mul.w	r5, r8, r5
 801def6:	fb09 5303 	mla	r3, r9, r3, r5
 801defa:	e661      	b.n	801dbc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801defc:	4681      	mov	r9, r0
 801defe:	e688      	b.n	801dc12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801df00:	f1c1 0210 	rsb	r2, r1, #16
 801df04:	4341      	muls	r1, r0
 801df06:	fb09 1902 	mla	r9, r9, r2, r1
 801df0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801df0e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801df12:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801df16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801df1a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801df1e:	ea42 0909 	orr.w	r9, r2, r9
 801df22:	fa1f f289 	uxth.w	r2, r9
 801df26:	e71b      	b.n	801dd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801df28:	803a      	strh	r2, [r7, #0]
 801df2a:	e75d      	b.n	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df2c:	f115 0e01 	adds.w	lr, r5, #1
 801df30:	f53f af5a 	bmi.w	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df34:	4572      	cmp	r2, lr
 801df36:	f6ff af57 	blt.w	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df3a:	f110 0e01 	adds.w	lr, r0, #1
 801df3e:	f53f af53 	bmi.w	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df42:	4573      	cmp	r3, lr
 801df44:	f6ff af50 	blt.w	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df4a:	b21b      	sxth	r3, r3
 801df4c:	b212      	sxth	r2, r2
 801df4e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801df52:	9301      	str	r3, [sp, #4]
 801df54:	9200      	str	r2, [sp, #0]
 801df56:	e9cd c405 	strd	ip, r4, [sp, #20]
 801df5a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801df5e:	9502      	str	r5, [sp, #8]
 801df60:	4639      	mov	r1, r7
 801df62:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df64:	f7ff fc04 	bl	801d770 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801df68:	e73e      	b.n	801dde8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df6c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801df72:	fa1f fc82 	uxth.w	ip, r2
 801df76:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801df7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df7c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801df80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801df86:	141f      	asrs	r7, r3, #16
 801df88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801df8a:	141b      	asrs	r3, r3, #16
 801df8c:	fb01 3707 	mla	r7, r1, r7, r3
 801df90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df92:	eb03 0a07 	add.w	sl, r3, r7
 801df96:	f813 9007 	ldrb.w	r9, [r3, r7]
 801df9a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801df9e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801dfa2:	b29b      	uxth	r3, r3
 801dfa4:	2d00      	cmp	r5, #0
 801dfa6:	f000 813d 	beq.w	801e224 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801dfaa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801dfae:	eb0a 0b01 	add.w	fp, sl, r1
 801dfb2:	fa1f fa85 	uxth.w	sl, r5
 801dfb6:	fb0a fc0c 	mul.w	ip, sl, ip
 801dfba:	eba0 000c 	sub.w	r0, r0, ip
 801dfbe:	b280      	uxth	r0, r0
 801dfc0:	fb08 f000 	mul.w	r0, r8, r0
 801dfc4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801dfc8:	fa1f fa8a 	uxth.w	sl, sl
 801dfcc:	eba3 030a 	sub.w	r3, r3, sl
 801dfd0:	b29b      	uxth	r3, r3
 801dfd2:	fb09 0303 	mla	r3, r9, r3, r0
 801dfd6:	940f      	str	r4, [sp, #60]	; 0x3c
 801dfd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dfda:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801dfde:	fb0a 3300 	mla	r3, sl, r0, r3
 801dfe2:	fb0c 3304 	mla	r3, ip, r4, r3
 801dfe6:	9410      	str	r4, [sp, #64]	; 0x40
 801dfe8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	f000 810b 	beq.w	801e208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801dff2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dff4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dff6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dffa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801dffe:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801e002:	f000 8114 	beq.w	801e22e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 801e006:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e00a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e00e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e012:	fb09 f707 	mul.w	r7, r9, r7
 801e016:	fb0a fc0c 	mul.w	ip, sl, ip
 801e01a:	f107 0b20 	add.w	fp, r7, #32
 801e01e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801e022:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e026:	44cc      	add	ip, r9
 801e028:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801e02c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e030:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e034:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e038:	ea4c 0909 	orr.w	r9, ip, r9
 801e03c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e040:	8847      	ldrh	r7, [r0, #2]
 801e042:	d019      	beq.n	801e078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 801e044:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e048:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e04c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e050:	fb08 f807 	mul.w	r8, r8, r7
 801e054:	fb0a fc0c 	mul.w	ip, sl, ip
 801e058:	f108 0b20 	add.w	fp, r8, #32
 801e05c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801e060:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e064:	44bc      	add	ip, r7
 801e066:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801e06a:	0a3f      	lsrs	r7, r7, #8
 801e06c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e070:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e074:	ea4c 0707 	orr.w	r7, ip, r7
 801e078:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801e07c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801e080:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e084:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e088:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e08c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e090:	ea4c 0909 	orr.w	r9, ip, r9
 801e094:	ea4a 0707 	orr.w	r7, sl, r7
 801e098:	2d00      	cmp	r5, #0
 801e09a:	f000 80ca 	beq.w	801e232 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801e09e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801e0a2:	3901      	subs	r1, #1
 801e0a4:	0049      	lsls	r1, r1, #1
 801e0a6:	3102      	adds	r1, #2
 801e0a8:	eb00 0c01 	add.w	ip, r0, r1
 801e0ac:	5a41      	ldrh	r1, [r0, r1]
 801e0ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e0b0:	28ff      	cmp	r0, #255	; 0xff
 801e0b2:	d019      	beq.n	801e0e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 801e0b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e0b6:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801e0ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e0be:	fb04 fa01 	mul.w	sl, r4, r1
 801e0c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e0c6:	fb08 f800 	mul.w	r8, r8, r0
 801e0ca:	f10a 0020 	add.w	r0, sl, #32
 801e0ce:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801e0d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801e0d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e0da:	4441      	add	r1, r8
 801e0dc:	0a00      	lsrs	r0, r0, #8
 801e0de:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801e0e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e0e6:	4301      	orrs	r1, r0
 801e0e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e0ea:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801e0ee:	2cff      	cmp	r4, #255	; 0xff
 801e0f0:	d01a      	beq.n	801e128 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 801e0f2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801e0f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e0fa:	fb04 fa00 	mul.w	sl, r4, r0
 801e0fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e102:	fb08 f80c 	mul.w	r8, r8, ip
 801e106:	f10a 0c20 	add.w	ip, sl, #32
 801e10a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801e10e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801e112:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e116:	4440      	add	r0, r8
 801e118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e11c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801e120:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e124:	ea40 000c 	orr.w	r0, r0, ip
 801e128:	fb15 fc02 	smulbb	ip, r5, r2
 801e12c:	f1c5 0810 	rsb	r8, r5, #16
 801e130:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801e134:	eba8 0802 	sub.w	r8, r8, r2
 801e138:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801e13c:	437a      	muls	r2, r7
 801e13e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801e142:	fb09 2208 	mla	r2, r9, r8, r2
 801e146:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801e14a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e14e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e152:	ea4a 0101 	orr.w	r1, sl, r1
 801e156:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801e15a:	fb05 2201 	mla	r2, r5, r1, r2
 801e15e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801e162:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e166:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e16a:	ea4b 0000 	orr.w	r0, fp, r0
 801e16e:	fb0c 2200 	mla	r2, ip, r0, r2
 801e172:	0d57      	lsrs	r7, r2, #21
 801e174:	0952      	lsrs	r2, r2, #5
 801e176:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e17a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e17e:	433a      	orrs	r2, r7
 801e180:	2bff      	cmp	r3, #255	; 0xff
 801e182:	b292      	uxth	r2, r2
 801e184:	d102      	bne.n	801e18c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801e186:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e188:	29ff      	cmp	r1, #255	; 0xff
 801e18a:	d063      	beq.n	801e254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 801e18c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e18e:	f8be 1000 	ldrh.w	r1, [lr]
 801e192:	4343      	muls	r3, r0
 801e194:	1c58      	adds	r0, r3, #1
 801e196:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801e19a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801e19e:	1208      	asrs	r0, r1, #8
 801e1a0:	b2db      	uxtb	r3, r3
 801e1a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e1a6:	fb10 f003 	smulbb	r0, r0, r3
 801e1aa:	10cf      	asrs	r7, r1, #3
 801e1ac:	00c9      	lsls	r1, r1, #3
 801e1ae:	b2c9      	uxtb	r1, r1
 801e1b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e1b2:	1215      	asrs	r5, r2, #8
 801e1b4:	fb11 f103 	smulbb	r1, r1, r3
 801e1b8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e1bc:	fb05 0504 	mla	r5, r5, r4, r0
 801e1c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1c4:	10d0      	asrs	r0, r2, #3
 801e1c6:	00d2      	lsls	r2, r2, #3
 801e1c8:	fb17 f703 	smulbb	r7, r7, r3
 801e1cc:	b2d2      	uxtb	r2, r2
 801e1ce:	fb02 1204 	mla	r2, r2, r4, r1
 801e1d2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e1d6:	fb00 7004 	mla	r0, r0, r4, r7
 801e1da:	b2ad      	uxth	r5, r5
 801e1dc:	b292      	uxth	r2, r2
 801e1de:	1c6b      	adds	r3, r5, #1
 801e1e0:	1c57      	adds	r7, r2, #1
 801e1e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e1e6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e1ea:	b280      	uxth	r0, r0
 801e1ec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e1f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e1f4:	433d      	orrs	r5, r7
 801e1f6:	1c47      	adds	r7, r0, #1
 801e1f8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e1fc:	097f      	lsrs	r7, r7, #5
 801e1fe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e202:	433d      	orrs	r5, r7
 801e204:	f8ae 5000 	strh.w	r5, [lr]
 801e208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e20a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e20c:	f10e 0e02 	add.w	lr, lr, #2
 801e210:	4413      	add	r3, r2
 801e212:	9321      	str	r3, [sp, #132]	; 0x84
 801e214:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e216:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e218:	441a      	add	r2, r3
 801e21a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e21c:	9222      	str	r2, [sp, #136]	; 0x88
 801e21e:	3b01      	subs	r3, #1
 801e220:	9313      	str	r3, [sp, #76]	; 0x4c
 801e222:	e61c      	b.n	801de5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801e224:	fb08 f000 	mul.w	r0, r8, r0
 801e228:	fb09 0303 	mla	r3, r9, r3, r0
 801e22c:	e6dc      	b.n	801dfe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 801e22e:	46b9      	mov	r9, r7
 801e230:	e704      	b.n	801e03c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 801e232:	f1c2 0110 	rsb	r1, r2, #16
 801e236:	437a      	muls	r2, r7
 801e238:	fb09 2901 	mla	r9, r9, r1, r2
 801e23c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e240:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801e244:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801e248:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e24c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e250:	4302      	orrs	r2, r0
 801e252:	e795      	b.n	801e180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801e254:	f8ae 2000 	strh.w	r2, [lr]
 801e258:	e7d6      	b.n	801e208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801e25a:	b017      	add	sp, #92	; 0x5c
 801e25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e264:	b085      	sub	sp, #20
 801e266:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801e26a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801e26e:	fb00 7406 	mla	r4, r0, r6, r7
 801e272:	2800      	cmp	r0, #0
 801e274:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801e278:	9103      	str	r1, [sp, #12]
 801e27a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801e27e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801e282:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801e286:	9501      	str	r5, [sp, #4]
 801e288:	eb02 0904 	add.w	r9, r2, r4
 801e28c:	f2c0 8141 	blt.w	801e512 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801e290:	4583      	cmp	fp, r0
 801e292:	f340 813e 	ble.w	801e512 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801e296:	2f00      	cmp	r7, #0
 801e298:	f2c0 8137 	blt.w	801e50a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801e29c:	42be      	cmp	r6, r7
 801e29e:	f340 8134 	ble.w	801e50a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801e2a2:	f812 c004 	ldrb.w	ip, [r2, r4]
 801e2a6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801e2aa:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801e2ae:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e2b2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801e2b6:	4355      	muls	r5, r2
 801e2b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e2bc:	fb0c f203 	mul.w	r2, ip, r3
 801e2c0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801e2c4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801e2c8:	441d      	add	r5, r3
 801e2ca:	f102 0320 	add.w	r3, r2, #32
 801e2ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e2d2:	0a1b      	lsrs	r3, r3, #8
 801e2d4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801e2d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e2dc:	431c      	orrs	r4, r3
 801e2de:	1c7b      	adds	r3, r7, #1
 801e2e0:	f100 811c 	bmi.w	801e51c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801e2e4:	429e      	cmp	r6, r3
 801e2e6:	f340 8119 	ble.w	801e51c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801e2ea:	2900      	cmp	r1, #0
 801e2ec:	f000 8119 	beq.w	801e522 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801e2f0:	9a01      	ldr	r2, [sp, #4]
 801e2f2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e2f6:	8855      	ldrh	r5, [r2, #2]
 801e2f8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801e2fc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801e300:	fb08 f802 	mul.w	r8, r8, r2
 801e304:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801e308:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e30c:	435d      	muls	r5, r3
 801e30e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801e312:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e316:	44d0      	add	r8, sl
 801e318:	f105 0a20 	add.w	sl, r5, #32
 801e31c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e320:	0a2d      	lsrs	r5, r5, #8
 801e322:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e326:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e32a:	432a      	orrs	r2, r5
 801e32c:	3001      	adds	r0, #1
 801e32e:	f100 80fe 	bmi.w	801e52e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801e332:	4583      	cmp	fp, r0
 801e334:	f340 80fb 	ble.w	801e52e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801e338:	f1be 0f00 	cmp.w	lr, #0
 801e33c:	f000 80fc 	beq.w	801e538 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801e340:	2f00      	cmp	r7, #0
 801e342:	f2c0 80f1 	blt.w	801e528 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801e346:	42be      	cmp	r6, r7
 801e348:	f340 80ee 	ble.w	801e528 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801e34c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e350:	9801      	ldr	r0, [sp, #4]
 801e352:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e356:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801e35a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e35e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801e362:	fb0a fa00 	mul.w	sl, sl, r0
 801e366:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e36a:	fb05 f808 	mul.w	r8, r5, r8
 801e36e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801e372:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801e376:	4482      	add	sl, r0
 801e378:	f108 0020 	add.w	r0, r8, #32
 801e37c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e380:	0a00      	lsrs	r0, r0, #8
 801e382:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801e386:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e38a:	ea4b 0b00 	orr.w	fp, fp, r0
 801e38e:	3701      	adds	r7, #1
 801e390:	f100 80d7 	bmi.w	801e542 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801e394:	42be      	cmp	r6, r7
 801e396:	f340 80d4 	ble.w	801e542 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801e39a:	2900      	cmp	r1, #0
 801e39c:	f000 80d4 	beq.w	801e548 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801e3a0:	9801      	ldr	r0, [sp, #4]
 801e3a2:	3601      	adds	r6, #1
 801e3a4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801e3a8:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e3ac:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801e3b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e3b4:	fb07 f800 	mul.w	r8, r7, r0
 801e3b8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801e3bc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801e3c0:	fb09 f906 	mul.w	r9, r9, r6
 801e3c4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801e3c8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801e3cc:	44d1      	add	r9, sl
 801e3ce:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801e3d2:	f108 0020 	add.w	r0, r8, #32
 801e3d6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e3da:	0a00      	lsrs	r0, r0, #8
 801e3dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e3e0:	4330      	orrs	r0, r6
 801e3e2:	b28e      	uxth	r6, r1
 801e3e4:	fa1f f98e 	uxth.w	r9, lr
 801e3e8:	fb06 f809 	mul.w	r8, r6, r9
 801e3ec:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801e3f0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e3f4:	0136      	lsls	r6, r6, #4
 801e3f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e3fa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e3fe:	9601      	str	r6, [sp, #4]
 801e400:	ea4a 0404 	orr.w	r4, sl, r4
 801e404:	fa1f f689 	uxth.w	r6, r9
 801e408:	9602      	str	r6, [sp, #8]
 801e40a:	4626      	mov	r6, r4
 801e40c:	fb11 f90e 	smulbb	r9, r1, lr
 801e410:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e414:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801e418:	f1ce 0410 	rsb	r4, lr, #16
 801e41c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e420:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e424:	1a64      	subs	r4, r4, r1
 801e426:	ea4a 0202 	orr.w	r2, sl, r2
 801e42a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801e42e:	434a      	muls	r2, r1
 801e430:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801e434:	fb04 2406 	mla	r4, r4, r6, r2
 801e438:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e43c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e440:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e444:	ea4a 0000 	orr.w	r0, sl, r0
 801e448:	fb09 4200 	mla	r2, r9, r0, r4
 801e44c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801e450:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e454:	9801      	ldr	r0, [sp, #4]
 801e456:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801e45a:	ea44 0b0b 	orr.w	fp, r4, fp
 801e45e:	9c02      	ldr	r4, [sp, #8]
 801e460:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e464:	1b00      	subs	r0, r0, r4
 801e466:	9c01      	ldr	r4, [sp, #4]
 801e468:	b280      	uxth	r0, r0
 801e46a:	eba4 0608 	sub.w	r6, r4, r8
 801e46e:	b2b6      	uxth	r6, r6
 801e470:	4373      	muls	r3, r6
 801e472:	fb0c 3300 	mla	r3, ip, r0, r3
 801e476:	9802      	ldr	r0, [sp, #8]
 801e478:	9903      	ldr	r1, [sp, #12]
 801e47a:	fb00 3505 	mla	r5, r0, r5, r3
 801e47e:	fb08 5707 	mla	r7, r8, r7, r5
 801e482:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801e486:	8809      	ldrh	r1, [r1, #0]
 801e488:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e48c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801e490:	120b      	asrs	r3, r1, #8
 801e492:	b2ff      	uxtb	r7, r7
 801e494:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e498:	437b      	muls	r3, r7
 801e49a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e49e:	10c8      	asrs	r0, r1, #3
 801e4a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e4a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e4a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e4ac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e4b0:	00c9      	lsls	r1, r1, #3
 801e4b2:	4378      	muls	r0, r7
 801e4b4:	ea42 0e0e 	orr.w	lr, r2, lr
 801e4b8:	b2c9      	uxtb	r1, r1
 801e4ba:	fa1f f28e 	uxth.w	r2, lr
 801e4be:	434f      	muls	r7, r1
 801e4c0:	1c59      	adds	r1, r3, #1
 801e4c2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e4c6:	1213      	asrs	r3, r2, #8
 801e4c8:	f023 0307 	bic.w	r3, r3, #7
 801e4cc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e4d0:	1c41      	adds	r1, r0, #1
 801e4d2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801e4d6:	10d1      	asrs	r1, r2, #3
 801e4d8:	f021 0103 	bic.w	r1, r1, #3
 801e4dc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e4e0:	021b      	lsls	r3, r3, #8
 801e4e2:	00c9      	lsls	r1, r1, #3
 801e4e4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e4e8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e4ec:	430b      	orrs	r3, r1
 801e4ee:	1c79      	adds	r1, r7, #1
 801e4f0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801e4f4:	00d2      	lsls	r2, r2, #3
 801e4f6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801e4fa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e4fe:	431a      	orrs	r2, r3
 801e500:	9b03      	ldr	r3, [sp, #12]
 801e502:	801a      	strh	r2, [r3, #0]
 801e504:	b005      	add	sp, #20
 801e506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e50a:	f04f 0c00 	mov.w	ip, #0
 801e50e:	4664      	mov	r4, ip
 801e510:	e6e5      	b.n	801e2de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801e512:	2300      	movs	r3, #0
 801e514:	469c      	mov	ip, r3
 801e516:	461a      	mov	r2, r3
 801e518:	461c      	mov	r4, r3
 801e51a:	e707      	b.n	801e32c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e51c:	2300      	movs	r3, #0
 801e51e:	461a      	mov	r2, r3
 801e520:	e704      	b.n	801e32c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e522:	460b      	mov	r3, r1
 801e524:	460a      	mov	r2, r1
 801e526:	e701      	b.n	801e32c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e528:	2500      	movs	r5, #0
 801e52a:	46ab      	mov	fp, r5
 801e52c:	e72f      	b.n	801e38e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801e52e:	2700      	movs	r7, #0
 801e530:	463d      	mov	r5, r7
 801e532:	4638      	mov	r0, r7
 801e534:	46bb      	mov	fp, r7
 801e536:	e754      	b.n	801e3e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e538:	4677      	mov	r7, lr
 801e53a:	4675      	mov	r5, lr
 801e53c:	4670      	mov	r0, lr
 801e53e:	46f3      	mov	fp, lr
 801e540:	e74f      	b.n	801e3e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e542:	2700      	movs	r7, #0
 801e544:	4638      	mov	r0, r7
 801e546:	e74c      	b.n	801e3e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e548:	460f      	mov	r7, r1
 801e54a:	4608      	mov	r0, r1
 801e54c:	e749      	b.n	801e3e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801e550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e554:	b093      	sub	sp, #76	; 0x4c
 801e556:	9210      	str	r2, [sp, #64]	; 0x40
 801e558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e55a:	9011      	str	r0, [sp, #68]	; 0x44
 801e55c:	6850      	ldr	r0, [r2, #4]
 801e55e:	910e      	str	r1, [sp, #56]	; 0x38
 801e560:	9306      	str	r3, [sp, #24]
 801e562:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e566:	fb00 1303 	mla	r3, r0, r3, r1
 801e56a:	6812      	ldr	r2, [r2, #0]
 801e56c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e570:	9307      	str	r3, [sp, #28]
 801e572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	9308      	str	r3, [sp, #32]
 801e578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e57a:	685b      	ldr	r3, [r3, #4]
 801e57c:	9309      	str	r3, [sp, #36]	; 0x24
 801e57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e580:	2b00      	cmp	r3, #0
 801e582:	dc03      	bgt.n	801e58c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e586:	2b00      	cmp	r3, #0
 801e588:	f340 83b4 	ble.w	801ecf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801e58c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e58e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e592:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e596:	1e48      	subs	r0, r1, #1
 801e598:	1e55      	subs	r5, r2, #1
 801e59a:	9b06      	ldr	r3, [sp, #24]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	f340 8163 	ble.w	801e868 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801e5a2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e5a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e5a6:	1436      	asrs	r6, r6, #16
 801e5a8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e5ac:	d406      	bmi.n	801e5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5ae:	4286      	cmp	r6, r0
 801e5b0:	da04      	bge.n	801e5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	db02      	blt.n	801e5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5b6:	42ab      	cmp	r3, r5
 801e5b8:	f2c0 8157 	blt.w	801e86a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e5bc:	3601      	adds	r6, #1
 801e5be:	f100 8144 	bmi.w	801e84a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5c2:	42b1      	cmp	r1, r6
 801e5c4:	f2c0 8141 	blt.w	801e84a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5c8:	3301      	adds	r3, #1
 801e5ca:	f100 813e 	bmi.w	801e84a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5ce:	429a      	cmp	r2, r3
 801e5d0:	f2c0 813b 	blt.w	801e84a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5d4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e5d8:	9b06      	ldr	r3, [sp, #24]
 801e5da:	9f07      	ldr	r7, [sp, #28]
 801e5dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	f340 8164 	ble.w	801e8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801e5e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e5e8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e5ea:	1418      	asrs	r0, r3, #16
 801e5ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e5ee:	142d      	asrs	r5, r5, #16
 801e5f0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e5f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e5f6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e5fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e600:	f100 81ee 	bmi.w	801e9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e604:	f102 3eff 	add.w	lr, r2, #4294967295
 801e608:	4575      	cmp	r5, lr
 801e60a:	f280 81e9 	bge.w	801e9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e60e:	2800      	cmp	r0, #0
 801e610:	f2c0 81e6 	blt.w	801e9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e614:	f103 3eff 	add.w	lr, r3, #4294967295
 801e618:	4570      	cmp	r0, lr
 801e61a:	f280 81e1 	bge.w	801e9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e61e:	b212      	sxth	r2, r2
 801e620:	fb00 5002 	mla	r0, r0, r2, r5
 801e624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e626:	fa1f fe81 	uxth.w	lr, r1
 801e62a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e62e:	eb03 0a00 	add.w	sl, r3, r0
 801e632:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e636:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801e63a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e63e:	b29b      	uxth	r3, r3
 801e640:	f1bc 0f00 	cmp.w	ip, #0
 801e644:	f000 8179 	beq.w	801e93a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801e648:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e64c:	eb0a 0b02 	add.w	fp, sl, r2
 801e650:	fa1f fa8c 	uxth.w	sl, ip
 801e654:	fb0a fe0e 	mul.w	lr, sl, lr
 801e658:	eba5 050e 	sub.w	r5, r5, lr
 801e65c:	b2ad      	uxth	r5, r5
 801e65e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e662:	fb08 f505 	mul.w	r5, r8, r5
 801e666:	fa1f fa8a 	uxth.w	sl, sl
 801e66a:	eba3 030a 	sub.w	r3, r3, sl
 801e66e:	b29b      	uxth	r3, r3
 801e670:	940a      	str	r4, [sp, #40]	; 0x28
 801e672:	fb09 5303 	mla	r3, r9, r3, r5
 801e676:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e67a:	940b      	str	r4, [sp, #44]	; 0x2c
 801e67c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e67e:	fb0a 3304 	mla	r3, sl, r4, r3
 801e682:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e684:	fb0e 3304 	mla	r3, lr, r4, r3
 801e688:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	f000 80cf 	beq.w	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e692:	9c08      	ldr	r4, [sp, #32]
 801e694:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e698:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e69c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e6a0:	f000 8150 	beq.w	801e944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801e6a4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e6a8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e6ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e6b0:	fb09 f000 	mul.w	r0, r9, r0
 801e6b4:	fb0a fe0e 	mul.w	lr, sl, lr
 801e6b8:	f100 0b20 	add.w	fp, r0, #32
 801e6bc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e6c0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e6c4:	44ce      	add	lr, r9
 801e6c6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e6ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e6ce:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e6d2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e6d6:	ea4e 0909 	orr.w	r9, lr, r9
 801e6da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e6de:	8868      	ldrh	r0, [r5, #2]
 801e6e0:	d019      	beq.n	801e716 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e6e2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e6e6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e6ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e6ee:	fb08 f800 	mul.w	r8, r8, r0
 801e6f2:	fb0a fe0e 	mul.w	lr, sl, lr
 801e6f6:	f108 0b20 	add.w	fp, r8, #32
 801e6fa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e6fe:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e702:	4486      	add	lr, r0
 801e704:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e708:	0a00      	lsrs	r0, r0, #8
 801e70a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e70e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e712:	ea4e 0000 	orr.w	r0, lr, r0
 801e716:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e71a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e71e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e722:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e726:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e72a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e72e:	ea4e 0909 	orr.w	r9, lr, r9
 801e732:	ea4a 0000 	orr.w	r0, sl, r0
 801e736:	f1bc 0f00 	cmp.w	ip, #0
 801e73a:	f000 8105 	beq.w	801e948 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801e73e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e742:	3a01      	subs	r2, #1
 801e744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e746:	0052      	lsls	r2, r2, #1
 801e748:	3202      	adds	r2, #2
 801e74a:	2cff      	cmp	r4, #255	; 0xff
 801e74c:	eb05 0e02 	add.w	lr, r5, r2
 801e750:	5aaa      	ldrh	r2, [r5, r2]
 801e752:	d018      	beq.n	801e786 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e754:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801e758:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e75c:	fb04 fa02 	mul.w	sl, r4, r2
 801e760:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e764:	fb08 f805 	mul.w	r8, r8, r5
 801e768:	f10a 0520 	add.w	r5, sl, #32
 801e76c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e770:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e774:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e778:	4442      	add	r2, r8
 801e77a:	0a2d      	lsrs	r5, r5, #8
 801e77c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e780:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e784:	432a      	orrs	r2, r5
 801e786:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e788:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e78c:	2cff      	cmp	r4, #255	; 0xff
 801e78e:	d01a      	beq.n	801e7c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e790:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801e794:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e798:	fb04 fa05 	mul.w	sl, r4, r5
 801e79c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e7a0:	fb08 f80e 	mul.w	r8, r8, lr
 801e7a4:	f10a 0e20 	add.w	lr, sl, #32
 801e7a8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e7ac:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e7b0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e7b4:	4445      	add	r5, r8
 801e7b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7ba:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e7be:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e7c2:	ea45 050e 	orr.w	r5, r5, lr
 801e7c6:	fb1c fe01 	smulbb	lr, ip, r1
 801e7ca:	f1cc 0810 	rsb	r8, ip, #16
 801e7ce:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801e7d2:	eba8 0801 	sub.w	r8, r8, r1
 801e7d6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801e7da:	4341      	muls	r1, r0
 801e7dc:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801e7e0:	fb09 1108 	mla	r1, r9, r8, r1
 801e7e4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e7e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e7ec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e7f0:	ea4a 0202 	orr.w	r2, sl, r2
 801e7f4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801e7f8:	fb0c 1102 	mla	r1, ip, r2, r1
 801e7fc:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801e800:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e804:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e808:	ea4b 0505 	orr.w	r5, fp, r5
 801e80c:	fb0e 1e05 	mla	lr, lr, r5, r1
 801e810:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e814:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e818:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e81c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e820:	ea42 0e0e 	orr.w	lr, r2, lr
 801e824:	fa1f f28e 	uxth.w	r2, lr
 801e828:	2bff      	cmp	r3, #255	; 0xff
 801e82a:	f040 80a1 	bne.w	801e970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801e82e:	803a      	strh	r2, [r7, #0]
 801e830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e832:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e834:	3702      	adds	r7, #2
 801e836:	4413      	add	r3, r2
 801e838:	931d      	str	r3, [sp, #116]	; 0x74
 801e83a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e83c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e83e:	441a      	add	r2, r3
 801e840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e842:	921e      	str	r2, [sp, #120]	; 0x78
 801e844:	3b01      	subs	r3, #1
 801e846:	930f      	str	r3, [sp, #60]	; 0x3c
 801e848:	e6c9      	b.n	801e5de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e84a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e84c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801e84e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801e850:	4433      	add	r3, r6
 801e852:	931d      	str	r3, [sp, #116]	; 0x74
 801e854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e856:	441c      	add	r4, r3
 801e858:	9b06      	ldr	r3, [sp, #24]
 801e85a:	941e      	str	r4, [sp, #120]	; 0x78
 801e85c:	3b01      	subs	r3, #1
 801e85e:	9306      	str	r3, [sp, #24]
 801e860:	9b07      	ldr	r3, [sp, #28]
 801e862:	3302      	adds	r3, #2
 801e864:	9307      	str	r3, [sp, #28]
 801e866:	e698      	b.n	801e59a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e868:	d028      	beq.n	801e8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e86a:	9b06      	ldr	r3, [sp, #24]
 801e86c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e86e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e870:	3b01      	subs	r3, #1
 801e872:	fb00 5003 	mla	r0, r0, r3, r5
 801e876:	1400      	asrs	r0, r0, #16
 801e878:	f53f aeac 	bmi.w	801e5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e87c:	3901      	subs	r1, #1
 801e87e:	4288      	cmp	r0, r1
 801e880:	f6bf aea8 	bge.w	801e5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e884:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e886:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e888:	fb01 0303 	mla	r3, r1, r3, r0
 801e88c:	141b      	asrs	r3, r3, #16
 801e88e:	f53f aea1 	bmi.w	801e5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e892:	3a01      	subs	r2, #1
 801e894:	4293      	cmp	r3, r2
 801e896:	f6bf ae9d 	bge.w	801e5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e89a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e89e:	9b06      	ldr	r3, [sp, #24]
 801e8a0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e8a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	f300 80b6 	bgt.w	801ea1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 801e8ae:	9b06      	ldr	r3, [sp, #24]
 801e8b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8b4:	9b07      	ldr	r3, [sp, #28]
 801e8b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e8ba:	9307      	str	r3, [sp, #28]
 801e8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	f340 8218 	ble.w	801ecf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801e8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e8d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8d8:	eef0 6a62 	vmov.f32	s13, s5
 801e8dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8f0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801e8f4:	eef0 6a43 	vmov.f32	s13, s6
 801e8f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8fc:	ee12 2a90 	vmov	r2, s5
 801e900:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e904:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e906:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e90e:	ee13 2a10 	vmov	r2, s6
 801e912:	931f      	str	r3, [sp, #124]	; 0x7c
 801e914:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e916:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801e91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e91e:	9320      	str	r3, [sp, #128]	; 0x80
 801e920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e922:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e924:	3b01      	subs	r3, #1
 801e926:	930e      	str	r3, [sp, #56]	; 0x38
 801e928:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e92a:	bf08      	it	eq
 801e92c:	4613      	moveq	r3, r2
 801e92e:	eeb0 3a67 	vmov.f32	s6, s15
 801e932:	9306      	str	r3, [sp, #24]
 801e934:	eef0 2a47 	vmov.f32	s5, s14
 801e938:	e621      	b.n	801e57e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e93a:	fb08 f505 	mul.w	r5, r8, r5
 801e93e:	fb09 5303 	mla	r3, r9, r3, r5
 801e942:	e6a1      	b.n	801e688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e944:	4681      	mov	r9, r0
 801e946:	e6c8      	b.n	801e6da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e948:	f1c1 0210 	rsb	r2, r1, #16
 801e94c:	4341      	muls	r1, r0
 801e94e:	fb09 1902 	mla	r9, r9, r2, r1
 801e952:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e956:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801e95a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e95e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e962:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e966:	ea42 0909 	orr.w	r9, r2, r9
 801e96a:	fa1f f289 	uxth.w	r2, r9
 801e96e:	e75b      	b.n	801e828 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e970:	43db      	mvns	r3, r3
 801e972:	f8b7 c000 	ldrh.w	ip, [r7]
 801e976:	fa5f fe83 	uxtb.w	lr, r3
 801e97a:	ea4f 202c 	mov.w	r0, ip, asr #8
 801e97e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e982:	fb00 f00e 	mul.w	r0, r0, lr
 801e986:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e98a:	1c41      	adds	r1, r0, #1
 801e98c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e990:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801e994:	fb05 f50e 	mul.w	r5, r5, lr
 801e998:	1211      	asrs	r1, r2, #8
 801e99a:	f021 0107 	bic.w	r1, r1, #7
 801e99e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e9a2:	48d6      	ldr	r0, [pc, #856]	; (801ecfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801e9a4:	b2c9      	uxtb	r1, r1
 801e9a6:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801e9aa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801e9ae:	1c69      	adds	r1, r5, #1
 801e9b0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e9b4:	b2db      	uxtb	r3, r3
 801e9b6:	10d1      	asrs	r1, r2, #3
 801e9b8:	fb03 f30e 	mul.w	r3, r3, lr
 801e9bc:	f021 0103 	bic.w	r1, r1, #3
 801e9c0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e9c4:	00c9      	lsls	r1, r1, #3
 801e9c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9ca:	4301      	orrs	r1, r0
 801e9cc:	1c58      	adds	r0, r3, #1
 801e9ce:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e9d2:	00d2      	lsls	r2, r2, #3
 801e9d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e9d8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e9dc:	430a      	orrs	r2, r1
 801e9de:	e726      	b.n	801e82e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 801e9e0:	f115 0e01 	adds.w	lr, r5, #1
 801e9e4:	f53f af24 	bmi.w	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e9e8:	4572      	cmp	r2, lr
 801e9ea:	f6ff af21 	blt.w	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e9ee:	f110 0e01 	adds.w	lr, r0, #1
 801e9f2:	f53f af1d 	bmi.w	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e9f6:	4573      	cmp	r3, lr
 801e9f8:	f6ff af1a 	blt.w	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e9fc:	b21b      	sxth	r3, r3
 801e9fe:	b212      	sxth	r2, r2
 801ea00:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801ea04:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801ea08:	9301      	str	r3, [sp, #4]
 801ea0a:	9200      	str	r2, [sp, #0]
 801ea0c:	4639      	mov	r1, r7
 801ea0e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801ea12:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ea14:	f7ff fc24 	bl	801e260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ea18:	e70a      	b.n	801e830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ea20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea22:	fa1f fc82 	uxth.w	ip, r2
 801ea26:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801ea2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea2c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ea30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ea34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea36:	141f      	asrs	r7, r3, #16
 801ea38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea3a:	141b      	asrs	r3, r3, #16
 801ea3c:	fb01 3707 	mla	r7, r1, r7, r3
 801ea40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea42:	eb03 0a07 	add.w	sl, r3, r7
 801ea46:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ea4a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ea4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ea52:	b29b      	uxth	r3, r3
 801ea54:	2d00      	cmp	r5, #0
 801ea56:	f000 80fe 	beq.w	801ec56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ea5a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ea5e:	eb0a 0b01 	add.w	fp, sl, r1
 801ea62:	fa1f fa85 	uxth.w	sl, r5
 801ea66:	fb0a fc0c 	mul.w	ip, sl, ip
 801ea6a:	eba0 000c 	sub.w	r0, r0, ip
 801ea6e:	b280      	uxth	r0, r0
 801ea70:	fb08 f000 	mul.w	r0, r8, r0
 801ea74:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ea78:	fa1f fa8a 	uxth.w	sl, sl
 801ea7c:	eba3 030a 	sub.w	r3, r3, sl
 801ea80:	b29b      	uxth	r3, r3
 801ea82:	fb09 0303 	mla	r3, r9, r3, r0
 801ea86:	940c      	str	r4, [sp, #48]	; 0x30
 801ea88:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea8a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ea8e:	fb0a 3300 	mla	r3, sl, r0, r3
 801ea92:	fb0c 3304 	mla	r3, ip, r4, r3
 801ea96:	940d      	str	r4, [sp, #52]	; 0x34
 801ea98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	f000 80cc 	beq.w	801ec3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801eaa2:	9808      	ldr	r0, [sp, #32]
 801eaa4:	9c08      	ldr	r4, [sp, #32]
 801eaa6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801eaaa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801eaae:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801eab2:	f000 80d5 	beq.w	801ec60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801eab6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801eaba:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801eabe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eac2:	fb09 f707 	mul.w	r7, r9, r7
 801eac6:	fb0a fc0c 	mul.w	ip, sl, ip
 801eaca:	f107 0b20 	add.w	fp, r7, #32
 801eace:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801ead2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ead6:	44cc      	add	ip, r9
 801ead8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801eadc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eae0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eae4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eae8:	ea4c 0909 	orr.w	r9, ip, r9
 801eaec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801eaf0:	8847      	ldrh	r7, [r0, #2]
 801eaf2:	d019      	beq.n	801eb28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 801eaf4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801eaf8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801eafc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb00:	fb08 f807 	mul.w	r8, r8, r7
 801eb04:	fb0a fc0c 	mul.w	ip, sl, ip
 801eb08:	f108 0b20 	add.w	fp, r8, #32
 801eb0c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801eb10:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801eb14:	44bc      	add	ip, r7
 801eb16:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801eb1a:	0a3f      	lsrs	r7, r7, #8
 801eb1c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eb20:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb24:	ea4c 0707 	orr.w	r7, ip, r7
 801eb28:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801eb2c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801eb30:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801eb34:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801eb38:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801eb3c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eb40:	ea4c 0909 	orr.w	r9, ip, r9
 801eb44:	ea4a 0707 	orr.w	r7, sl, r7
 801eb48:	2d00      	cmp	r5, #0
 801eb4a:	f000 808b 	beq.w	801ec64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801eb4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801eb52:	3901      	subs	r1, #1
 801eb54:	0049      	lsls	r1, r1, #1
 801eb56:	3102      	adds	r1, #2
 801eb58:	eb00 0c01 	add.w	ip, r0, r1
 801eb5c:	5a41      	ldrh	r1, [r0, r1]
 801eb5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eb60:	28ff      	cmp	r0, #255	; 0xff
 801eb62:	d019      	beq.n	801eb98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 801eb64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb66:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801eb6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eb6e:	fb04 fa01 	mul.w	sl, r4, r1
 801eb72:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801eb76:	fb08 f800 	mul.w	r8, r8, r0
 801eb7a:	f10a 0020 	add.w	r0, sl, #32
 801eb7e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801eb82:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801eb86:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801eb8a:	4441      	add	r1, r8
 801eb8c:	0a00      	lsrs	r0, r0, #8
 801eb8e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801eb92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801eb96:	4301      	orrs	r1, r0
 801eb98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eb9a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801eb9e:	2cff      	cmp	r4, #255	; 0xff
 801eba0:	d01a      	beq.n	801ebd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801eba2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801eba6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ebaa:	fb04 fa00 	mul.w	sl, r4, r0
 801ebae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ebb2:	fb08 f80c 	mul.w	r8, r8, ip
 801ebb6:	f10a 0c20 	add.w	ip, sl, #32
 801ebba:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ebbe:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ebc2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ebc6:	4440      	add	r0, r8
 801ebc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ebcc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801ebd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801ebd4:	ea40 000c 	orr.w	r0, r0, ip
 801ebd8:	fb15 fc02 	smulbb	ip, r5, r2
 801ebdc:	f1c5 0810 	rsb	r8, r5, #16
 801ebe0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ebe4:	eba8 0802 	sub.w	r8, r8, r2
 801ebe8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801ebec:	437a      	muls	r2, r7
 801ebee:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801ebf2:	fb09 2208 	mla	r2, r9, r8, r2
 801ebf6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ebfa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ebfe:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ec02:	ea4a 0101 	orr.w	r1, sl, r1
 801ec06:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801ec0a:	fb05 2201 	mla	r2, r5, r1, r2
 801ec0e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ec12:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ec16:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ec1a:	ea4b 0000 	orr.w	r0, fp, r0
 801ec1e:	fb0c 2200 	mla	r2, ip, r0, r2
 801ec22:	0d57      	lsrs	r7, r2, #21
 801ec24:	0952      	lsrs	r2, r2, #5
 801ec26:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ec2a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec2e:	433a      	orrs	r2, r7
 801ec30:	2bff      	cmp	r3, #255	; 0xff
 801ec32:	b292      	uxth	r2, r2
 801ec34:	d127      	bne.n	801ec86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801ec36:	f8ae 2000 	strh.w	r2, [lr]
 801ec3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ec3e:	f10e 0e02 	add.w	lr, lr, #2
 801ec42:	4413      	add	r3, r2
 801ec44:	931d      	str	r3, [sp, #116]	; 0x74
 801ec46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ec48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ec4a:	441a      	add	r2, r3
 801ec4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec4e:	921e      	str	r2, [sp, #120]	; 0x78
 801ec50:	3b01      	subs	r3, #1
 801ec52:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec54:	e627      	b.n	801e8a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ec56:	fb08 f000 	mul.w	r0, r8, r0
 801ec5a:	fb09 0303 	mla	r3, r9, r3, r0
 801ec5e:	e71b      	b.n	801ea98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 801ec60:	46b9      	mov	r9, r7
 801ec62:	e743      	b.n	801eaec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 801ec64:	f1c2 0110 	rsb	r1, r2, #16
 801ec68:	437a      	muls	r2, r7
 801ec6a:	fb09 2901 	mla	r9, r9, r1, r2
 801ec6e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ec72:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801ec76:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801ec7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec82:	4302      	orrs	r2, r0
 801ec84:	e7d4      	b.n	801ec30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801ec86:	43db      	mvns	r3, r3
 801ec88:	f8be 7000 	ldrh.w	r7, [lr]
 801ec8c:	fa5f fc83 	uxtb.w	ip, r3
 801ec90:	1238      	asrs	r0, r7, #8
 801ec92:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ec96:	fb00 f00c 	mul.w	r0, r0, ip
 801ec9a:	10fd      	asrs	r5, r7, #3
 801ec9c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801eca0:	fb05 f10c 	mul.w	r1, r5, ip
 801eca4:	1c45      	adds	r5, r0, #1
 801eca6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ecaa:	1215      	asrs	r5, r2, #8
 801ecac:	f025 0507 	bic.w	r5, r5, #7
 801ecb0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ecb4:	00fb      	lsls	r3, r7, #3
 801ecb6:	1c4d      	adds	r5, r1, #1
 801ecb8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	10d1      	asrs	r1, r2, #3
 801ecc0:	fb03 f30c 	mul.w	r3, r3, ip
 801ecc4:	f021 0103 	bic.w	r1, r1, #3
 801ecc8:	4c0c      	ldr	r4, [pc, #48]	; (801ecfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801ecca:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801ecce:	b2c0      	uxtb	r0, r0
 801ecd0:	00c9      	lsls	r1, r1, #3
 801ecd2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ecd6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801ecda:	4308      	orrs	r0, r1
 801ecdc:	1c59      	adds	r1, r3, #1
 801ecde:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ece2:	00d2      	lsls	r2, r2, #3
 801ece4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ece8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ecec:	4318      	orrs	r0, r3
 801ecee:	f8ae 0000 	strh.w	r0, [lr]
 801ecf2:	e7a2      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801ecf4:	b013      	add	sp, #76	; 0x4c
 801ecf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecfa:	bf00      	nop
 801ecfc:	fffff800 	.word	0xfffff800

0801ed00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed04:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801ed08:	fb05 4c03 	mla	ip, r5, r3, r4
 801ed0c:	2d00      	cmp	r5, #0
 801ed0e:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801ed12:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801ed16:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801ed1a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ed1e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801ed22:	8808      	ldrh	r0, [r1, #0]
 801ed24:	f2c0 80a7 	blt.w	801ee76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801ed28:	45aa      	cmp	sl, r5
 801ed2a:	f340 80a4 	ble.w	801ee76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801ed2e:	2c00      	cmp	r4, #0
 801ed30:	f2c0 809f 	blt.w	801ee72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801ed34:	42a3      	cmp	r3, r4
 801ed36:	f340 809c 	ble.w	801ee72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801ed3a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801ed3e:	1c62      	adds	r2, r4, #1
 801ed40:	f100 809c 	bmi.w	801ee7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed44:	4293      	cmp	r3, r2
 801ed46:	f340 8099 	ble.w	801ee7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed4a:	f1b9 0f00 	cmp.w	r9, #0
 801ed4e:	f000 8095 	beq.w	801ee7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed52:	f8be c002 	ldrh.w	ip, [lr, #2]
 801ed56:	3501      	adds	r5, #1
 801ed58:	f100 8094 	bmi.w	801ee84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed5c:	45aa      	cmp	sl, r5
 801ed5e:	f340 8091 	ble.w	801ee84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed62:	2f00      	cmp	r7, #0
 801ed64:	f000 808e 	beq.w	801ee84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed68:	2c00      	cmp	r4, #0
 801ed6a:	f2c0 8089 	blt.w	801ee80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801ed6e:	42a3      	cmp	r3, r4
 801ed70:	f340 8086 	ble.w	801ee80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801ed74:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801ed78:	3401      	adds	r4, #1
 801ed7a:	f100 8086 	bmi.w	801ee8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801ed7e:	42a3      	cmp	r3, r4
 801ed80:	f340 8083 	ble.w	801ee8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801ed84:	f1b9 0f00 	cmp.w	r9, #0
 801ed88:	d07f      	beq.n	801ee8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801ed8a:	3301      	adds	r3, #1
 801ed8c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801ed90:	fb19 fe07 	smulbb	lr, r9, r7
 801ed94:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801ed98:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ed9c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801eda0:	ea44 0808 	orr.w	r8, r4, r8
 801eda4:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801eda8:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801edac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801edb0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801edb4:	ea44 0c0c 	orr.w	ip, r4, ip
 801edb8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801edbc:	fb04 f40c 	mul.w	r4, r4, ip
 801edc0:	f1c7 0210 	rsb	r2, r7, #16
 801edc4:	eba2 0209 	sub.w	r2, r2, r9
 801edc8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801edcc:	fb02 4808 	mla	r8, r2, r8, r4
 801edd0:	b2b4      	uxth	r4, r6
 801edd2:	43f6      	mvns	r6, r6
 801edd4:	041a      	lsls	r2, r3, #16
 801edd6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801edda:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801edde:	4313      	orrs	r3, r2
 801ede0:	fb0e 8303 	mla	r3, lr, r3, r8
 801ede4:	042a      	lsls	r2, r5, #16
 801ede6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801edea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801edee:	432a      	orrs	r2, r5
 801edf0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801edf4:	fb07 3202 	mla	r2, r7, r2, r3
 801edf8:	0d53      	lsrs	r3, r2, #21
 801edfa:	0952      	lsrs	r2, r2, #5
 801edfc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee00:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ee04:	431a      	orrs	r2, r3
 801ee06:	b293      	uxth	r3, r2
 801ee08:	1202      	asrs	r2, r0, #8
 801ee0a:	b2f6      	uxtb	r6, r6
 801ee0c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ee10:	fb12 f206 	smulbb	r2, r2, r6
 801ee14:	10c7      	asrs	r7, r0, #3
 801ee16:	00c0      	lsls	r0, r0, #3
 801ee18:	b2c0      	uxtb	r0, r0
 801ee1a:	121d      	asrs	r5, r3, #8
 801ee1c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee20:	fb10 f006 	smulbb	r0, r0, r6
 801ee24:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ee28:	fb17 f706 	smulbb	r7, r7, r6
 801ee2c:	fb05 2504 	mla	r5, r5, r4, r2
 801ee30:	10da      	asrs	r2, r3, #3
 801ee32:	00db      	lsls	r3, r3, #3
 801ee34:	b2db      	uxtb	r3, r3
 801ee36:	fb03 0004 	mla	r0, r3, r4, r0
 801ee3a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ee3e:	fb02 7204 	mla	r2, r2, r4, r7
 801ee42:	b2ad      	uxth	r5, r5
 801ee44:	b280      	uxth	r0, r0
 801ee46:	1c6b      	adds	r3, r5, #1
 801ee48:	b292      	uxth	r2, r2
 801ee4a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ee4e:	1c43      	adds	r3, r0, #1
 801ee50:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ee54:	1c50      	adds	r0, r2, #1
 801ee56:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ee5a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ee5e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee62:	0952      	lsrs	r2, r2, #5
 801ee64:	432b      	orrs	r3, r5
 801ee66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ee6a:	4313      	orrs	r3, r2
 801ee6c:	800b      	strh	r3, [r1, #0]
 801ee6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee72:	4680      	mov	r8, r0
 801ee74:	e763      	b.n	801ed3e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801ee76:	4684      	mov	ip, r0
 801ee78:	4680      	mov	r8, r0
 801ee7a:	e76c      	b.n	801ed56 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801ee7c:	4684      	mov	ip, r0
 801ee7e:	e76a      	b.n	801ed56 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801ee80:	4605      	mov	r5, r0
 801ee82:	e779      	b.n	801ed78 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801ee84:	4603      	mov	r3, r0
 801ee86:	4605      	mov	r5, r0
 801ee88:	e782      	b.n	801ed90 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801ee8a:	4603      	mov	r3, r0
 801ee8c:	e780      	b.n	801ed90 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801ee8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee92:	b093      	sub	sp, #76	; 0x4c
 801ee94:	461d      	mov	r5, r3
 801ee96:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801ee9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee9c:	910a      	str	r1, [sp, #40]	; 0x28
 801ee9e:	9210      	str	r2, [sp, #64]	; 0x40
 801eea0:	6859      	ldr	r1, [r3, #4]
 801eea2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	920b      	str	r2, [sp, #44]	; 0x2c
 801eeaa:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801eeae:	fb01 2707 	mla	r7, r1, r7, r2
 801eeb2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801eeb6:	9307      	str	r3, [sp, #28]
 801eeb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eeba:	9011      	str	r0, [sp, #68]	; 0x44
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	9309      	str	r3, [sp, #36]	; 0x24
 801eec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eec2:	43db      	mvns	r3, r3
 801eec4:	b2db      	uxtb	r3, r3
 801eec6:	9308      	str	r3, [sp, #32]
 801eec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	dc03      	bgt.n	801eed6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	f340 8203 	ble.w	801f2dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801eed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eed8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eedc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eee0:	1e48      	subs	r0, r1, #1
 801eee2:	f102 3cff 	add.w	ip, r2, #4294967295
 801eee6:	2d00      	cmp	r5, #0
 801eee8:	f340 80da 	ble.w	801f0a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801eeec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801eef0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801eef4:	d406      	bmi.n	801ef04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eef6:	4586      	cmp	lr, r0
 801eef8:	da04      	bge.n	801ef04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	db02      	blt.n	801ef04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eefe:	4563      	cmp	r3, ip
 801ef00:	f2c0 80cf 	blt.w	801f0a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef04:	f11e 0e01 	adds.w	lr, lr, #1
 801ef08:	f100 80c1 	bmi.w	801f08e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef0c:	4571      	cmp	r1, lr
 801ef0e:	f2c0 80be 	blt.w	801f08e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef12:	3301      	adds	r3, #1
 801ef14:	f100 80bb 	bmi.w	801f08e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef18:	429a      	cmp	r2, r3
 801ef1a:	f2c0 80b8 	blt.w	801f08e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef1e:	46a9      	mov	r9, r5
 801ef20:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ef24:	f1b9 0f00 	cmp.w	r9, #0
 801ef28:	f340 80d8 	ble.w	801f0dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801ef2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef2e:	1421      	asrs	r1, r4, #16
 801ef30:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ef34:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ef38:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ef3c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ef40:	f100 8111 	bmi.w	801f166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef44:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ef48:	4551      	cmp	r1, sl
 801ef4a:	f280 810c 	bge.w	801f166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef4e:	2800      	cmp	r0, #0
 801ef50:	f2c0 8109 	blt.w	801f166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef54:	f103 3aff 	add.w	sl, r3, #4294967295
 801ef58:	4550      	cmp	r0, sl
 801ef5a:	f280 8104 	bge.w	801f166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef5e:	fa0f f38e 	sxth.w	r3, lr
 801ef62:	fb00 1103 	mla	r1, r0, r3, r1
 801ef66:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef68:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801ef6c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801ef70:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801ef74:	f1bc 0f00 	cmp.w	ip, #0
 801ef78:	d007      	beq.n	801ef8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801ef7a:	005b      	lsls	r3, r3, #1
 801ef7c:	eb0a 0003 	add.w	r0, sl, r3
 801ef80:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801ef84:	930c      	str	r3, [sp, #48]	; 0x30
 801ef86:	8843      	ldrh	r3, [r0, #2]
 801ef88:	930d      	str	r3, [sp, #52]	; 0x34
 801ef8a:	fb12 f30c 	smulbb	r3, r2, ip
 801ef8e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801ef92:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ef96:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ef9a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ef9e:	10db      	asrs	r3, r3, #3
 801efa0:	ea40 000e 	orr.w	r0, r0, lr
 801efa4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801efa8:	f1cc 0e10 	rsb	lr, ip, #16
 801efac:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801efb0:	ebae 0e02 	sub.w	lr, lr, r2
 801efb4:	ea4a 0101 	orr.w	r1, sl, r1
 801efb8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801efbc:	4351      	muls	r1, r2
 801efbe:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801efc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801efc4:	fb0e 1e00 	mla	lr, lr, r0, r1
 801efc8:	0410      	lsls	r0, r2, #16
 801efca:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801efce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801efd2:	4310      	orrs	r0, r2
 801efd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efd6:	fb03 e000 	mla	r0, r3, r0, lr
 801efda:	990c      	ldr	r1, [sp, #48]	; 0x30
 801efdc:	0412      	lsls	r2, r2, #16
 801efde:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801efe2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801efe6:	ea42 020e 	orr.w	r2, r2, lr
 801efea:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801efee:	fb03 0302 	mla	r3, r3, r2, r0
 801eff2:	f8b8 0000 	ldrh.w	r0, [r8]
 801eff6:	9f08      	ldr	r7, [sp, #32]
 801eff8:	0d5a      	lsrs	r2, r3, #21
 801effa:	1201      	asrs	r1, r0, #8
 801effc:	095b      	lsrs	r3, r3, #5
 801effe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f002:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f006:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f00a:	4313      	orrs	r3, r2
 801f00c:	fb11 f107 	smulbb	r1, r1, r7
 801f010:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f014:	00c0      	lsls	r0, r0, #3
 801f016:	b29b      	uxth	r3, r3
 801f018:	b2c0      	uxtb	r0, r0
 801f01a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f01e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f022:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f026:	fb10 f007 	smulbb	r0, r0, r7
 801f02a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f02e:	fb1e fe07 	smulbb	lr, lr, r7
 801f032:	fb0c 1c02 	mla	ip, ip, r2, r1
 801f036:	10d9      	asrs	r1, r3, #3
 801f038:	00db      	lsls	r3, r3, #3
 801f03a:	b2db      	uxtb	r3, r3
 801f03c:	fb03 0302 	mla	r3, r3, r2, r0
 801f040:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f044:	fb01 e102 	mla	r1, r1, r2, lr
 801f048:	fa1f fc8c 	uxth.w	ip, ip
 801f04c:	b29a      	uxth	r2, r3
 801f04e:	f10c 0301 	add.w	r3, ip, #1
 801f052:	b289      	uxth	r1, r1
 801f054:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f058:	1c53      	adds	r3, r2, #1
 801f05a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f05e:	1c4a      	adds	r2, r1, #1
 801f060:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f064:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f068:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f06c:	0949      	lsrs	r1, r1, #5
 801f06e:	ea43 030c 	orr.w	r3, r3, ip
 801f072:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f076:	430b      	orrs	r3, r1
 801f078:	f8a8 3000 	strh.w	r3, [r8]
 801f07c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f07e:	f108 0802 	add.w	r8, r8, #2
 801f082:	441c      	add	r4, r3
 801f084:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f086:	f109 39ff 	add.w	r9, r9, #4294967295
 801f08a:	441e      	add	r6, r3
 801f08c:	e74a      	b.n	801ef24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f08e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f090:	3d01      	subs	r5, #1
 801f092:	441c      	add	r4, r3
 801f094:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f096:	441e      	add	r6, r3
 801f098:	9b07      	ldr	r3, [sp, #28]
 801f09a:	3302      	adds	r3, #2
 801f09c:	9307      	str	r3, [sp, #28]
 801f09e:	e722      	b.n	801eee6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f0a0:	d022      	beq.n	801f0e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801f0a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f0a4:	1e6b      	subs	r3, r5, #1
 801f0a6:	fb00 4003 	mla	r0, r0, r3, r4
 801f0aa:	1400      	asrs	r0, r0, #16
 801f0ac:	f53f af37 	bmi.w	801ef1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0b0:	3901      	subs	r1, #1
 801f0b2:	4288      	cmp	r0, r1
 801f0b4:	f6bf af33 	bge.w	801ef1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f0ba:	fb01 6303 	mla	r3, r1, r3, r6
 801f0be:	141b      	asrs	r3, r3, #16
 801f0c0:	f53f af2d 	bmi.w	801ef1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0c4:	3a01      	subs	r2, #1
 801f0c6:	4293      	cmp	r3, r2
 801f0c8:	f6bf af29 	bge.w	801ef1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0cc:	46a8      	mov	r8, r5
 801f0ce:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801f0d2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801f0d6:	f1b8 0f00 	cmp.w	r8, #0
 801f0da:	dc5e      	bgt.n	801f19a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f0dc:	9b07      	ldr	r3, [sp, #28]
 801f0de:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f0e2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801f0e6:	9307      	str	r3, [sp, #28]
 801f0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	f340 80f6 	ble.w	801f2dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801f0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f0f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f100:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f104:	eef0 6a62 	vmov.f32	s13, s5
 801f108:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f10c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f110:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f114:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f118:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f11c:	ee16 4a90 	vmov	r4, s13
 801f120:	eef0 6a43 	vmov.f32	s13, s6
 801f124:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f128:	ee12 2a90 	vmov	r2, s5
 801f12c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f130:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f132:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f136:	fb92 f3f3 	sdiv	r3, r2, r3
 801f13a:	ee13 2a10 	vmov	r2, s6
 801f13e:	931f      	str	r3, [sp, #124]	; 0x7c
 801f140:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f142:	ee16 6a90 	vmov	r6, s13
 801f146:	fb92 f3f3 	sdiv	r3, r2, r3
 801f14a:	9320      	str	r3, [sp, #128]	; 0x80
 801f14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f14e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f150:	3b01      	subs	r3, #1
 801f152:	930a      	str	r3, [sp, #40]	; 0x28
 801f154:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f156:	bf0c      	ite	eq
 801f158:	4615      	moveq	r5, r2
 801f15a:	461d      	movne	r5, r3
 801f15c:	eeb0 3a67 	vmov.f32	s6, s15
 801f160:	eef0 2a47 	vmov.f32	s5, s14
 801f164:	e6b0      	b.n	801eec8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f166:	f111 0a01 	adds.w	sl, r1, #1
 801f16a:	d487      	bmi.n	801f07c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f16c:	45d6      	cmp	lr, sl
 801f16e:	db85      	blt.n	801f07c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f170:	f110 0a01 	adds.w	sl, r0, #1
 801f174:	d482      	bmi.n	801f07c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f176:	4553      	cmp	r3, sl
 801f178:	db80      	blt.n	801f07c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f17a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f17c:	b21b      	sxth	r3, r3
 801f17e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f182:	9101      	str	r1, [sp, #4]
 801f184:	9300      	str	r3, [sp, #0]
 801f186:	e9cd c704 	strd	ip, r7, [sp, #16]
 801f18a:	fa0f f38e 	sxth.w	r3, lr
 801f18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f190:	4641      	mov	r1, r8
 801f192:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f194:	f7ff fdb4 	bl	801ed00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801f198:	e770      	b.n	801f07c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f19a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f19c:	1430      	asrs	r0, r6, #16
 801f19e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1a2:	1423      	asrs	r3, r4, #16
 801f1a4:	fb01 3000 	mla	r0, r1, r0, r3
 801f1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f1ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801f1b0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801f1b4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801f1b8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f1bc:	8858      	ldrh	r0, [r3, #2]
 801f1be:	f1be 0f00 	cmp.w	lr, #0
 801f1c2:	d00b      	beq.n	801f1dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801f1c4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f1c8:	3901      	subs	r1, #1
 801f1ca:	0049      	lsls	r1, r1, #1
 801f1cc:	3102      	adds	r1, #2
 801f1ce:	eb03 0b01 	add.w	fp, r3, r1
 801f1d2:	5a5b      	ldrh	r3, [r3, r1]
 801f1d4:	930e      	str	r3, [sp, #56]	; 0x38
 801f1d6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f1da:	930f      	str	r3, [sp, #60]	; 0x3c
 801f1dc:	fb12 f30e 	smulbb	r3, r2, lr
 801f1e0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801f1e4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f1e8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f1ec:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801f1f0:	10db      	asrs	r3, r3, #3
 801f1f2:	ea41 010c 	orr.w	r1, r1, ip
 801f1f6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f1fa:	f1ce 0c10 	rsb	ip, lr, #16
 801f1fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f202:	ebac 0c02 	sub.w	ip, ip, r2
 801f206:	ea4b 0000 	orr.w	r0, fp, r0
 801f20a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f20e:	4350      	muls	r0, r2
 801f210:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801f214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f216:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f21a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801f21e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f222:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801f226:	ea4b 0101 	orr.w	r1, fp, r1
 801f22a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f22c:	fb03 c101 	mla	r1, r3, r1, ip
 801f230:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f232:	0412      	lsls	r2, r2, #16
 801f234:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f238:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f23c:	4302      	orrs	r2, r0
 801f23e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801f242:	fb03 1202 	mla	r2, r3, r2, r1
 801f246:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801f24a:	0952      	lsrs	r2, r2, #5
 801f24c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801f250:	f8b9 2000 	ldrh.w	r2, [r9]
 801f254:	9f08      	ldr	r7, [sp, #32]
 801f256:	1211      	asrs	r1, r2, #8
 801f258:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f25c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f260:	fb11 f107 	smulbb	r1, r1, r7
 801f264:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801f268:	ea4b 0303 	orr.w	r3, fp, r3
 801f26c:	00d2      	lsls	r2, r2, #3
 801f26e:	b29b      	uxth	r3, r3
 801f270:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f274:	b2d2      	uxtb	r2, r2
 801f276:	1218      	asrs	r0, r3, #8
 801f278:	fb1c fc07 	smulbb	ip, ip, r7
 801f27c:	fb12 f207 	smulbb	r2, r2, r7
 801f280:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f284:	fb00 100a 	mla	r0, r0, sl, r1
 801f288:	10d9      	asrs	r1, r3, #3
 801f28a:	00db      	lsls	r3, r3, #3
 801f28c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f290:	b2db      	uxtb	r3, r3
 801f292:	fb01 c10a 	mla	r1, r1, sl, ip
 801f296:	fb03 230a 	mla	r3, r3, sl, r2
 801f29a:	b280      	uxth	r0, r0
 801f29c:	b29b      	uxth	r3, r3
 801f29e:	b289      	uxth	r1, r1
 801f2a0:	1c42      	adds	r2, r0, #1
 801f2a2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f2a6:	f101 0c01 	add.w	ip, r1, #1
 801f2aa:	1c5a      	adds	r2, r3, #1
 801f2ac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f2b0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801f2b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f2b6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f2ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f2be:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f2c2:	4310      	orrs	r0, r2
 801f2c4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f2c8:	441c      	add	r4, r3
 801f2ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2cc:	ea40 000c 	orr.w	r0, r0, ip
 801f2d0:	f829 0b02 	strh.w	r0, [r9], #2
 801f2d4:	441e      	add	r6, r3
 801f2d6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2da:	e6fc      	b.n	801f0d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f2dc:	b013      	add	sp, #76	; 0x4c
 801f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801f2e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f2e6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801f2ea:	fb0e 4703 	mla	r7, lr, r3, r4
 801f2ee:	f1be 0f00 	cmp.w	lr, #0
 801f2f2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801f2f6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801f2fa:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801f2fe:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801f302:	8808      	ldrh	r0, [r1, #0]
 801f304:	db60      	blt.n	801f3c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801f306:	45f1      	cmp	r9, lr
 801f308:	dd5e      	ble.n	801f3c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801f30a:	2c00      	cmp	r4, #0
 801f30c:	db5a      	blt.n	801f3c4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801f30e:	42a3      	cmp	r3, r4
 801f310:	dd58      	ble.n	801f3c4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801f312:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801f316:	1c62      	adds	r2, r4, #1
 801f318:	d459      	bmi.n	801f3ce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f31a:	4293      	cmp	r3, r2
 801f31c:	dd57      	ble.n	801f3ce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f31e:	2d00      	cmp	r5, #0
 801f320:	d055      	beq.n	801f3ce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f322:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801f326:	f11e 0e01 	adds.w	lr, lr, #1
 801f32a:	d454      	bmi.n	801f3d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f32c:	45f1      	cmp	r9, lr
 801f32e:	dd52      	ble.n	801f3d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f330:	2e00      	cmp	r6, #0
 801f332:	d050      	beq.n	801f3d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f334:	2c00      	cmp	r4, #0
 801f336:	db4c      	blt.n	801f3d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801f338:	42a3      	cmp	r3, r4
 801f33a:	dd4a      	ble.n	801f3d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801f33c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801f340:	3401      	adds	r4, #1
 801f342:	d405      	bmi.n	801f350 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f344:	42a3      	cmp	r3, r4
 801f346:	dd03      	ble.n	801f350 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f348:	b115      	cbz	r5, 801f350 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f34a:	3301      	adds	r3, #1
 801f34c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801f350:	fb15 f406 	smulbb	r4, r5, r6
 801f354:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f358:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f35c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f360:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f364:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f368:	ea43 0c0c 	orr.w	ip, r3, ip
 801f36c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f370:	f1c6 0310 	rsb	r3, r6, #16
 801f374:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f378:	1b5b      	subs	r3, r3, r5
 801f37a:	ea4e 0707 	orr.w	r7, lr, r7
 801f37e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f382:	437d      	muls	r5, r7
 801f384:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f388:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f38c:	0403      	lsls	r3, r0, #16
 801f38e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f392:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f396:	4318      	orrs	r0, r3
 801f398:	fb04 c000 	mla	r0, r4, r0, ip
 801f39c:	0413      	lsls	r3, r2, #16
 801f39e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f3a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f3a6:	4313      	orrs	r3, r2
 801f3a8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f3ac:	fb06 0003 	mla	r0, r6, r3, r0
 801f3b0:	0d43      	lsrs	r3, r0, #21
 801f3b2:	0940      	lsrs	r0, r0, #5
 801f3b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f3b8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f3bc:	4318      	orrs	r0, r3
 801f3be:	8008      	strh	r0, [r1, #0]
 801f3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f3c4:	4684      	mov	ip, r0
 801f3c6:	e7a6      	b.n	801f316 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801f3c8:	4607      	mov	r7, r0
 801f3ca:	4684      	mov	ip, r0
 801f3cc:	e7ab      	b.n	801f326 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801f3ce:	4607      	mov	r7, r0
 801f3d0:	e7a9      	b.n	801f326 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801f3d2:	4602      	mov	r2, r0
 801f3d4:	e7b4      	b.n	801f340 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	e7ba      	b.n	801f350 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801f3da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3de:	b08f      	sub	sp, #60	; 0x3c
 801f3e0:	461d      	mov	r5, r3
 801f3e2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801f3e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3e8:	9107      	str	r1, [sp, #28]
 801f3ea:	6859      	ldr	r1, [r3, #4]
 801f3ec:	920c      	str	r2, [sp, #48]	; 0x30
 801f3ee:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801f3f2:	fb01 2707 	mla	r7, r1, r7, r2
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	900d      	str	r0, [sp, #52]	; 0x34
 801f3fa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801f3fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f400:	f8d3 8000 	ldr.w	r8, [r3]
 801f404:	9b07      	ldr	r3, [sp, #28]
 801f406:	2b00      	cmp	r3, #0
 801f408:	dc03      	bgt.n	801f412 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	f340 8181 	ble.w	801f714 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801f412:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f414:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f418:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f41c:	1e48      	subs	r0, r1, #1
 801f41e:	f102 3cff 	add.w	ip, r2, #4294967295
 801f422:	2d00      	cmp	r5, #0
 801f424:	f340 809b 	ble.w	801f55e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801f428:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f42c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f430:	d406      	bmi.n	801f440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f432:	4586      	cmp	lr, r0
 801f434:	da04      	bge.n	801f440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f436:	2b00      	cmp	r3, #0
 801f438:	db02      	blt.n	801f440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f43a:	4563      	cmp	r3, ip
 801f43c:	f2c0 8090 	blt.w	801f560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f440:	f11e 0e01 	adds.w	lr, lr, #1
 801f444:	f100 8084 	bmi.w	801f550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f448:	4571      	cmp	r1, lr
 801f44a:	f2c0 8081 	blt.w	801f550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f44e:	3301      	adds	r3, #1
 801f450:	d47e      	bmi.n	801f550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f452:	429a      	cmp	r2, r3
 801f454:	db7c      	blt.n	801f550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f456:	46aa      	mov	sl, r5
 801f458:	46b9      	mov	r9, r7
 801f45a:	f1ba 0f00 	cmp.w	sl, #0
 801f45e:	f340 8099 	ble.w	801f594 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f462:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f464:	1421      	asrs	r1, r4, #16
 801f466:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f46a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f46e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f472:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f476:	f100 80d0 	bmi.w	801f61a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f47a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f47e:	4559      	cmp	r1, fp
 801f480:	f280 80cb 	bge.w	801f61a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f484:	2800      	cmp	r0, #0
 801f486:	f2c0 80c8 	blt.w	801f61a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f48a:	f103 3bff 	add.w	fp, r3, #4294967295
 801f48e:	4558      	cmp	r0, fp
 801f490:	f280 80c3 	bge.w	801f61a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f494:	fa0f fe8e 	sxth.w	lr, lr
 801f498:	fb00 110e 	mla	r1, r0, lr, r1
 801f49c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801f4a0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801f4a4:	8841      	ldrh	r1, [r0, #2]
 801f4a6:	f1bc 0f00 	cmp.w	ip, #0
 801f4aa:	d00b      	beq.n	801f4c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f4ac:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801f4b0:	3b01      	subs	r3, #1
 801f4b2:	005b      	lsls	r3, r3, #1
 801f4b4:	3302      	adds	r3, #2
 801f4b6:	eb00 0e03 	add.w	lr, r0, r3
 801f4ba:	5ac3      	ldrh	r3, [r0, r3]
 801f4bc:	9308      	str	r3, [sp, #32]
 801f4be:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801f4c2:	9309      	str	r3, [sp, #36]	; 0x24
 801f4c4:	fb12 f30c 	smulbb	r3, r2, ip
 801f4c8:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801f4cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f4d0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f4d4:	ea40 000b 	orr.w	r0, r0, fp
 801f4d8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f4dc:	10db      	asrs	r3, r3, #3
 801f4de:	f1cc 0e10 	rsb	lr, ip, #16
 801f4e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f4e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f4ea:	ebae 0e02 	sub.w	lr, lr, r2
 801f4ee:	ea4b 0101 	orr.w	r1, fp, r1
 801f4f2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f4f6:	4351      	muls	r1, r2
 801f4f8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801f4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4fe:	fb0e 1e00 	mla	lr, lr, r0, r1
 801f502:	0410      	lsls	r0, r2, #16
 801f504:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f508:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f50c:	4310      	orrs	r0, r2
 801f50e:	9a08      	ldr	r2, [sp, #32]
 801f510:	fb03 e000 	mla	r0, r3, r0, lr
 801f514:	9908      	ldr	r1, [sp, #32]
 801f516:	0412      	lsls	r2, r2, #16
 801f518:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f51c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f520:	ea42 020e 	orr.w	r2, r2, lr
 801f524:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f528:	fb03 0302 	mla	r3, r3, r2, r0
 801f52c:	0d5a      	lsrs	r2, r3, #21
 801f52e:	095b      	lsrs	r3, r3, #5
 801f530:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f534:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f538:	4313      	orrs	r3, r2
 801f53a:	f8a9 3000 	strh.w	r3, [r9]
 801f53e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f540:	f109 0902 	add.w	r9, r9, #2
 801f544:	441c      	add	r4, r3
 801f546:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f548:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f54c:	441e      	add	r6, r3
 801f54e:	e784      	b.n	801f45a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f550:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f552:	3d01      	subs	r5, #1
 801f554:	441c      	add	r4, r3
 801f556:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f558:	3702      	adds	r7, #2
 801f55a:	441e      	add	r6, r3
 801f55c:	e761      	b.n	801f422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f55e:	d01d      	beq.n	801f59c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f560:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f562:	1e6b      	subs	r3, r5, #1
 801f564:	fb00 4003 	mla	r0, r0, r3, r4
 801f568:	1400      	asrs	r0, r0, #16
 801f56a:	f53f af74 	bmi.w	801f456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f56e:	3901      	subs	r1, #1
 801f570:	4288      	cmp	r0, r1
 801f572:	f6bf af70 	bge.w	801f456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f576:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f578:	fb01 6303 	mla	r3, r1, r3, r6
 801f57c:	141b      	asrs	r3, r3, #16
 801f57e:	f53f af6a 	bmi.w	801f456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f582:	3a01      	subs	r2, #1
 801f584:	4293      	cmp	r3, r2
 801f586:	f6bf af66 	bge.w	801f456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f58a:	46a9      	mov	r9, r5
 801f58c:	46ba      	mov	sl, r7
 801f58e:	f1b9 0f00 	cmp.w	r9, #0
 801f592:	dc5a      	bgt.n	801f64a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801f594:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f598:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801f59c:	9b07      	ldr	r3, [sp, #28]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	f340 80b8 	ble.w	801f714 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801f5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f5a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f5b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5b8:	eef0 6a62 	vmov.f32	s13, s5
 801f5bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5d0:	ee16 4a90 	vmov	r4, s13
 801f5d4:	eef0 6a43 	vmov.f32	s13, s6
 801f5d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5dc:	ee12 2a90 	vmov	r2, s5
 801f5e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f5e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5ee:	ee13 2a10 	vmov	r2, s6
 801f5f2:	931b      	str	r3, [sp, #108]	; 0x6c
 801f5f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f5f6:	ee16 6a90 	vmov	r6, s13
 801f5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5fe:	931c      	str	r3, [sp, #112]	; 0x70
 801f600:	9b07      	ldr	r3, [sp, #28]
 801f602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f604:	3b01      	subs	r3, #1
 801f606:	9307      	str	r3, [sp, #28]
 801f608:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f60a:	bf0c      	ite	eq
 801f60c:	4615      	moveq	r5, r2
 801f60e:	461d      	movne	r5, r3
 801f610:	eeb0 3a67 	vmov.f32	s6, s15
 801f614:	eef0 2a47 	vmov.f32	s5, s14
 801f618:	e6f4      	b.n	801f404 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f61a:	f111 0b01 	adds.w	fp, r1, #1
 801f61e:	d48e      	bmi.n	801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f620:	45de      	cmp	lr, fp
 801f622:	db8c      	blt.n	801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f624:	f110 0b01 	adds.w	fp, r0, #1
 801f628:	d489      	bmi.n	801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f62a:	455b      	cmp	r3, fp
 801f62c:	db87      	blt.n	801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f62e:	b21b      	sxth	r3, r3
 801f630:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801f634:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801f638:	9300      	str	r3, [sp, #0]
 801f63a:	4642      	mov	r2, r8
 801f63c:	fa0f f38e 	sxth.w	r3, lr
 801f640:	4649      	mov	r1, r9
 801f642:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f644:	f7ff fe4d 	bl	801f2e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801f648:	e779      	b.n	801f53e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f64a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f64c:	1420      	asrs	r0, r4, #16
 801f64e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f652:	1431      	asrs	r1, r6, #16
 801f654:	fb03 0101 	mla	r1, r3, r1, r0
 801f658:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801f65c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801f660:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801f664:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f668:	8841      	ldrh	r1, [r0, #2]
 801f66a:	f1be 0f00 	cmp.w	lr, #0
 801f66e:	d00b      	beq.n	801f688 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801f670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f674:	3b01      	subs	r3, #1
 801f676:	005b      	lsls	r3, r3, #1
 801f678:	3302      	adds	r3, #2
 801f67a:	eb00 0b03 	add.w	fp, r0, r3
 801f67e:	5ac3      	ldrh	r3, [r0, r3]
 801f680:	930a      	str	r3, [sp, #40]	; 0x28
 801f682:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f686:	930b      	str	r3, [sp, #44]	; 0x2c
 801f688:	fb12 f30e 	smulbb	r3, r2, lr
 801f68c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801f690:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f694:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f698:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f69c:	10db      	asrs	r3, r3, #3
 801f69e:	ea40 000c 	orr.w	r0, r0, ip
 801f6a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f6a6:	f1ce 0c10 	rsb	ip, lr, #16
 801f6aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f6ae:	ebac 0c02 	sub.w	ip, ip, r2
 801f6b2:	ea4b 0101 	orr.w	r1, fp, r1
 801f6b6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f6ba:	4351      	muls	r1, r2
 801f6bc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801f6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f6c2:	fb0c 1c00 	mla	ip, ip, r0, r1
 801f6c6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801f6ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f6ce:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801f6d2:	ea4b 0000 	orr.w	r0, fp, r0
 801f6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6d8:	fb03 c000 	mla	r0, r3, r0, ip
 801f6dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f6de:	0412      	lsls	r2, r2, #16
 801f6e0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f6e4:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801f6e8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801f6ec:	ea42 0b0b 	orr.w	fp, r2, fp
 801f6f0:	fb03 000b 	mla	r0, r3, fp, r0
 801f6f4:	0d43      	lsrs	r3, r0, #21
 801f6f6:	0940      	lsrs	r0, r0, #5
 801f6f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f700:	4318      	orrs	r0, r3
 801f702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f704:	f82a 0b02 	strh.w	r0, [sl], #2
 801f708:	441c      	add	r4, r3
 801f70a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f70c:	f109 39ff 	add.w	r9, r9, #4294967295
 801f710:	441e      	add	r6, r3
 801f712:	e73c      	b.n	801f58e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f714:	b00f      	add	sp, #60	; 0x3c
 801f716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f71a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801f71a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f71e:	b085      	sub	sp, #20
 801f720:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801f724:	9102      	str	r1, [sp, #8]
 801f726:	fb04 7103 	mla	r1, r4, r3, r7
 801f72a:	2c00      	cmp	r4, #0
 801f72c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801f730:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f734:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f738:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801f73c:	f2c0 811b 	blt.w	801f976 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801f740:	45a6      	cmp	lr, r4
 801f742:	f340 8118 	ble.w	801f976 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801f746:	2f00      	cmp	r7, #0
 801f748:	f2c0 8113 	blt.w	801f972 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801f74c:	42bb      	cmp	r3, r7
 801f74e:	f340 8110 	ble.w	801f972 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801f752:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801f756:	1c7a      	adds	r2, r7, #1
 801f758:	f100 8110 	bmi.w	801f97c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801f75c:	4293      	cmp	r3, r2
 801f75e:	f340 810d 	ble.w	801f97c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801f762:	2e00      	cmp	r6, #0
 801f764:	f000 810c 	beq.w	801f980 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801f768:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f76c:	3401      	adds	r4, #1
 801f76e:	f100 810b 	bmi.w	801f988 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801f772:	45a6      	cmp	lr, r4
 801f774:	f340 8108 	ble.w	801f988 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801f778:	2800      	cmp	r0, #0
 801f77a:	f000 8108 	beq.w	801f98e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801f77e:	2f00      	cmp	r7, #0
 801f780:	f2c0 8100 	blt.w	801f984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801f784:	42bb      	cmp	r3, r7
 801f786:	f340 80fd 	ble.w	801f984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801f78a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801f78e:	3701      	adds	r7, #1
 801f790:	f100 8100 	bmi.w	801f994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801f794:	42bb      	cmp	r3, r7
 801f796:	f340 80fd 	ble.w	801f994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801f79a:	2e00      	cmp	r6, #0
 801f79c:	f000 80fc 	beq.w	801f998 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801f7a0:	3301      	adds	r3, #1
 801f7a2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f7a6:	b2b6      	uxth	r6, r6
 801f7a8:	b280      	uxth	r0, r0
 801f7aa:	fb00 fe06 	mul.w	lr, r0, r6
 801f7ae:	0136      	lsls	r6, r6, #4
 801f7b0:	eba6 070e 	sub.w	r7, r6, lr
 801f7b4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f7b8:	b2bf      	uxth	r7, r7
 801f7ba:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801f7be:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f7c2:	fb0a f607 	mul.w	r6, sl, r7
 801f7c6:	b280      	uxth	r0, r0
 801f7c8:	1a1b      	subs	r3, r3, r0
 801f7ca:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801f7ce:	b29b      	uxth	r3, r3
 801f7d0:	fb0b 6603 	mla	r6, fp, r3, r6
 801f7d4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f7d8:	fb00 6609 	mla	r6, r0, r9, r6
 801f7dc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f7e0:	fb0e 6608 	mla	r6, lr, r8, r6
 801f7e4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f7e8:	9600      	str	r6, [sp, #0]
 801f7ea:	2e00      	cmp	r6, #0
 801f7ec:	f000 80be 	beq.w	801f96c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801f7f0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f7f4:	fb0b fc0c 	mul.w	ip, fp, ip
 801f7f8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f7fc:	fb0b f505 	mul.w	r5, fp, r5
 801f800:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f804:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f808:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f80c:	44dc      	add	ip, fp
 801f80e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f812:	9501      	str	r5, [sp, #4]
 801f814:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f818:	9503      	str	r5, [sp, #12]
 801f81a:	9d01      	ldr	r5, [sp, #4]
 801f81c:	9e02      	ldr	r6, [sp, #8]
 801f81e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f822:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f826:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801f82a:	fb0a fc0c 	mul.w	ip, sl, ip
 801f82e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f832:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f836:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f83a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f83e:	4465      	add	r5, ip
 801f840:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f844:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f848:	fb09 fc0c 	mul.w	ip, r9, ip
 801f84c:	fb09 f904 	mul.w	r9, r9, r4
 801f850:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f854:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f858:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801f85c:	fb08 f404 	mul.w	r4, r8, r4
 801f860:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f864:	fb08 f802 	mul.w	r8, r8, r2
 801f868:	0a2d      	lsrs	r5, r5, #8
 801f86a:	0a22      	lsrs	r2, r4, #8
 801f86c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f870:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f874:	437d      	muls	r5, r7
 801f876:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f87a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f87e:	4414      	add	r4, r2
 801f880:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f884:	fb0a fa01 	mul.w	sl, sl, r1
 801f888:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f88c:	9a03      	ldr	r2, [sp, #12]
 801f88e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801f892:	fb02 5503 	mla	r5, r2, r3, r5
 801f896:	0a24      	lsrs	r4, r4, #8
 801f898:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f89c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f8a0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f8a4:	fb04 540e 	mla	r4, r4, lr, r5
 801f8a8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f8ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f8b0:	4461      	add	r1, ip
 801f8b2:	0a09      	lsrs	r1, r1, #8
 801f8b4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f8b8:	fb01 4100 	mla	r1, r1, r0, r4
 801f8bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f8c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f8c4:	fb07 f70a 	mul.w	r7, r7, sl
 801f8c8:	0a09      	lsrs	r1, r1, #8
 801f8ca:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801f8ce:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801f8d2:	fb03 7101 	mla	r1, r3, r1, r7
 801f8d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f8da:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f8de:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f8e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f8e6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801f8ea:	fb00 e101 	mla	r1, r0, r1, lr
 801f8ee:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801f8f2:	9a00      	ldr	r2, [sp, #0]
 801f8f4:	b287      	uxth	r7, r0
 801f8f6:	437a      	muls	r2, r7
 801f8f8:	1c53      	adds	r3, r2, #1
 801f8fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f8fe:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f902:	0a09      	lsrs	r1, r1, #8
 801f904:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f908:	4321      	orrs	r1, r4
 801f90a:	0c0a      	lsrs	r2, r1, #16
 801f90c:	8836      	ldrh	r6, [r6, #0]
 801f90e:	fb12 f207 	smulbb	r2, r2, r7
 801f912:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801f916:	b2c8      	uxtb	r0, r1
 801f918:	1235      	asrs	r5, r6, #8
 801f91a:	fb14 f407 	smulbb	r4, r4, r7
 801f91e:	fb10 f007 	smulbb	r0, r0, r7
 801f922:	b2db      	uxtb	r3, r3
 801f924:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f928:	fb05 2503 	mla	r5, r5, r3, r2
 801f92c:	10f2      	asrs	r2, r6, #3
 801f92e:	00f6      	lsls	r6, r6, #3
 801f930:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f934:	b2f6      	uxtb	r6, r6
 801f936:	fb02 4203 	mla	r2, r2, r3, r4
 801f93a:	fb06 0303 	mla	r3, r6, r3, r0
 801f93e:	b2ad      	uxth	r5, r5
 801f940:	b299      	uxth	r1, r3
 801f942:	b294      	uxth	r4, r2
 801f944:	1c6b      	adds	r3, r5, #1
 801f946:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f94a:	1c62      	adds	r2, r4, #1
 801f94c:	1c4b      	adds	r3, r1, #1
 801f94e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f952:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f956:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f95a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f95e:	0952      	lsrs	r2, r2, #5
 801f960:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f964:	432b      	orrs	r3, r5
 801f966:	4313      	orrs	r3, r2
 801f968:	9a02      	ldr	r2, [sp, #8]
 801f96a:	8013      	strh	r3, [r2, #0]
 801f96c:	b005      	add	sp, #20
 801f96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f972:	2500      	movs	r5, #0
 801f974:	e6ef      	b.n	801f756 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801f976:	2100      	movs	r1, #0
 801f978:	460d      	mov	r5, r1
 801f97a:	e6f7      	b.n	801f76c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f97c:	2100      	movs	r1, #0
 801f97e:	e6f5      	b.n	801f76c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f980:	4631      	mov	r1, r6
 801f982:	e6f3      	b.n	801f76c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f984:	2400      	movs	r4, #0
 801f986:	e702      	b.n	801f78e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801f988:	2200      	movs	r2, #0
 801f98a:	4614      	mov	r4, r2
 801f98c:	e70b      	b.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f98e:	4602      	mov	r2, r0
 801f990:	4604      	mov	r4, r0
 801f992:	e708      	b.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f994:	2200      	movs	r2, #0
 801f996:	e706      	b.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f998:	4632      	mov	r2, r6
 801f99a:	e704      	b.n	801f7a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801f99c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a0:	b09d      	sub	sp, #116	; 0x74
 801f9a2:	9219      	str	r2, [sp, #100]	; 0x64
 801f9a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f9a6:	901b      	str	r0, [sp, #108]	; 0x6c
 801f9a8:	9307      	str	r3, [sp, #28]
 801f9aa:	6850      	ldr	r0, [r2, #4]
 801f9ac:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801f9b0:	9117      	str	r1, [sp, #92]	; 0x5c
 801f9b2:	931a      	str	r3, [sp, #104]	; 0x68
 801f9b4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f9b8:	fb00 1303 	mla	r3, r0, r3, r1
 801f9bc:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801f9c0:	6812      	ldr	r2, [r2, #0]
 801f9c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9c6:	930a      	str	r3, [sp, #40]	; 0x28
 801f9c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	9310      	str	r3, [sp, #64]	; 0x40
 801f9ce:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f9d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	dc03      	bgt.n	801f9e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f9da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	f340 8375 	ble.w	80200cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801f9e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f9ec:	1e48      	subs	r0, r1, #1
 801f9ee:	1e57      	subs	r7, r2, #1
 801f9f0:	9b07      	ldr	r3, [sp, #28]
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	f340 818e 	ble.w	801fd14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f9f8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f9fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fa00:	d406      	bmi.n	801fa10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa02:	4584      	cmp	ip, r0
 801fa04:	da04      	bge.n	801fa10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	db02      	blt.n	801fa10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa0a:	42bb      	cmp	r3, r7
 801fa0c:	f2c0 8183 	blt.w	801fd16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801fa10:	f11c 0c01 	adds.w	ip, ip, #1
 801fa14:	f100 8173 	bmi.w	801fcfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa18:	4561      	cmp	r1, ip
 801fa1a:	f2c0 8170 	blt.w	801fcfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa1e:	3301      	adds	r3, #1
 801fa20:	f100 816d 	bmi.w	801fcfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa24:	429a      	cmp	r2, r3
 801fa26:	f2c0 816a 	blt.w	801fcfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa2a:	9b07      	ldr	r3, [sp, #28]
 801fa2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fa2e:	9318      	str	r3, [sp, #96]	; 0x60
 801fa30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	f340 818c 	ble.w	801fd50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801fa38:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801fa3a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa3c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fa40:	1422      	asrs	r2, r4, #16
 801fa42:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801fa46:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fa4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fa4e:	689b      	ldr	r3, [r3, #8]
 801fa50:	f100 81cd 	bmi.w	801fdee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa54:	f103 38ff 	add.w	r8, r3, #4294967295
 801fa58:	4542      	cmp	r2, r8
 801fa5a:	f280 81c8 	bge.w	801fdee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa5e:	f1bc 0f00 	cmp.w	ip, #0
 801fa62:	f2c0 81c4 	blt.w	801fdee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa66:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa6a:	45c4      	cmp	ip, r8
 801fa6c:	f280 81bf 	bge.w	801fdee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa70:	b21b      	sxth	r3, r3
 801fa72:	fb0c 2203 	mla	r2, ip, r3, r2
 801fa76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fa78:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801fa7c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fa80:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fa84:	2800      	cmp	r0, #0
 801fa86:	f000 81a9 	beq.w	801fddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801fa8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fa8e:	950c      	str	r5, [sp, #48]	; 0x30
 801fa90:	0e2d      	lsrs	r5, r5, #24
 801fa92:	9513      	str	r5, [sp, #76]	; 0x4c
 801fa94:	b181      	cbz	r1, 801fab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801fa9a:	3b01      	subs	r3, #1
 801fa9c:	009b      	lsls	r3, r3, #2
 801fa9e:	3304      	adds	r3, #4
 801faa0:	eb08 0c03 	add.w	ip, r8, r3
 801faa4:	f858 3003 	ldr.w	r3, [r8, r3]
 801faa8:	9308      	str	r3, [sp, #32]
 801faaa:	0e1b      	lsrs	r3, r3, #24
 801faac:	9311      	str	r3, [sp, #68]	; 0x44
 801faae:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801fab2:	930d      	str	r3, [sp, #52]	; 0x34
 801fab4:	0e1b      	lsrs	r3, r3, #24
 801fab6:	9314      	str	r3, [sp, #80]	; 0x50
 801fab8:	b280      	uxth	r0, r0
 801faba:	b289      	uxth	r1, r1
 801fabc:	fb00 f901 	mul.w	r9, r0, r1
 801fac0:	0100      	lsls	r0, r0, #4
 801fac2:	eba0 0809 	sub.w	r8, r0, r9
 801fac6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801faca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801facc:	fa1f f888 	uxth.w	r8, r8
 801fad0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fad4:	fb08 f000 	mul.w	r0, r8, r0
 801fad8:	b289      	uxth	r1, r1
 801fada:	1a5b      	subs	r3, r3, r1
 801fadc:	b29b      	uxth	r3, r3
 801fade:	fb03 000e 	mla	r0, r3, lr, r0
 801fae2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fae4:	fb01 0005 	mla	r0, r1, r5, r0
 801fae8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801faea:	fb09 0005 	mla	r0, r9, r5, r0
 801faee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801faf2:	2800      	cmp	r0, #0
 801faf4:	f000 80fa 	beq.w	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801faf8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fafc:	d01b      	beq.n	801fb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fafe:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801fb02:	fb0e fa0a 	mul.w	sl, lr, sl
 801fb06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fb0a:	fb0e fe02 	mul.w	lr, lr, r2
 801fb0e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fb12:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fb16:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fb1a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fb1e:	4452      	add	r2, sl
 801fb20:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fb24:	0a12      	lsrs	r2, r2, #8
 801fb26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb2a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fb2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb32:	ea42 020c 	orr.w	r2, r2, ip
 801fb36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb38:	2dff      	cmp	r5, #255	; 0xff
 801fb3a:	d021      	beq.n	801fb80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fb3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb3e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fb42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb44:	fb05 fb0b 	mul.w	fp, r5, fp
 801fb48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb4e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fb52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb58:	fb05 fa0a 	mul.w	sl, r5, sl
 801fb5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb64:	44de      	add	lr, fp
 801fb66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb7a:	ea4e 050a 	orr.w	r5, lr, sl
 801fb7e:	950c      	str	r5, [sp, #48]	; 0x30
 801fb80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb82:	2dff      	cmp	r5, #255	; 0xff
 801fb84:	d021      	beq.n	801fbca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801fb86:	9d08      	ldr	r5, [sp, #32]
 801fb88:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fb8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb8e:	fb05 fb0b 	mul.w	fp, r5, fp
 801fb92:	9d08      	ldr	r5, [sp, #32]
 801fb94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb98:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fb9c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fba2:	fb05 fa0a 	mul.w	sl, r5, sl
 801fba6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbaa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fbae:	44de      	add	lr, fp
 801fbb0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbc4:	ea4e 050a 	orr.w	r5, lr, sl
 801fbc8:	9508      	str	r5, [sp, #32]
 801fbca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbcc:	2dff      	cmp	r5, #255	; 0xff
 801fbce:	d021      	beq.n	801fc14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801fbd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fbd2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fbd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbd8:	fb05 fb0b 	mul.w	fp, r5, fp
 801fbdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fbde:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fbe2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fbe6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbe8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbec:	fb05 fa0a 	mul.w	sl, r5, sl
 801fbf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbf4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fbf8:	44de      	add	lr, fp
 801fbfa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbfe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc0e:	ea4e 050a 	orr.w	r5, lr, sl
 801fc12:	950d      	str	r5, [sp, #52]	; 0x34
 801fc14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc16:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fc1a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fc1e:	fb08 fc0c 	mul.w	ip, r8, ip
 801fc22:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fc26:	9d08      	ldr	r5, [sp, #32]
 801fc28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fc2c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fc30:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fc34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fc36:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fc3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc3c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fc40:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801fc44:	fb08 f80e 	mul.w	r8, r8, lr
 801fc48:	fb03 8202 	mla	r2, r3, r2, r8
 801fc4c:	9b08      	ldr	r3, [sp, #32]
 801fc4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc52:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801fc56:	fb01 220a 	mla	r2, r1, sl, r2
 801fc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc60:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801fc64:	fb09 2901 	mla	r9, r9, r1, r2
 801fc68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fc6a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc6e:	4342      	muls	r2, r0
 801fc70:	1c50      	adds	r0, r2, #1
 801fc72:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801fc76:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fc7a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fc7e:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fc84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801fc88:	883b      	ldrh	r3, [r7, #0]
 801fc8a:	fb12 f205 	smulbb	r2, r2, r5
 801fc8e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801fc92:	fa5f fc8c 	uxtb.w	ip, ip
 801fc96:	1219      	asrs	r1, r3, #8
 801fc98:	fb1c fc05 	smulbb	ip, ip, r5
 801fc9c:	b2c0      	uxtb	r0, r0
 801fc9e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fca2:	fb01 2100 	mla	r1, r1, r0, r2
 801fca6:	10da      	asrs	r2, r3, #3
 801fca8:	00db      	lsls	r3, r3, #3
 801fcaa:	fb1e fe05 	smulbb	lr, lr, r5
 801fcae:	b2db      	uxtb	r3, r3
 801fcb0:	fb03 c300 	mla	r3, r3, r0, ip
 801fcb4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fcb8:	b289      	uxth	r1, r1
 801fcba:	fb02 e200 	mla	r2, r2, r0, lr
 801fcbe:	fa1f fc83 	uxth.w	ip, r3
 801fcc2:	1c4b      	adds	r3, r1, #1
 801fcc4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fcc8:	f10c 0301 	add.w	r3, ip, #1
 801fccc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801fcd0:	b292      	uxth	r2, r2
 801fcd2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801fcd6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fcda:	430b      	orrs	r3, r1
 801fcdc:	1c51      	adds	r1, r2, #1
 801fcde:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fce2:	0952      	lsrs	r2, r2, #5
 801fce4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fce8:	4313      	orrs	r3, r2
 801fcea:	803b      	strh	r3, [r7, #0]
 801fcec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fcee:	3702      	adds	r7, #2
 801fcf0:	441c      	add	r4, r3
 801fcf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fcf4:	441e      	add	r6, r3
 801fcf6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fcf8:	3b01      	subs	r3, #1
 801fcfa:	9318      	str	r3, [sp, #96]	; 0x60
 801fcfc:	e698      	b.n	801fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fcfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd00:	441c      	add	r4, r3
 801fd02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd04:	441e      	add	r6, r3
 801fd06:	9b07      	ldr	r3, [sp, #28]
 801fd08:	3b01      	subs	r3, #1
 801fd0a:	9307      	str	r3, [sp, #28]
 801fd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd0e:	3302      	adds	r3, #2
 801fd10:	930a      	str	r3, [sp, #40]	; 0x28
 801fd12:	e66d      	b.n	801f9f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fd14:	d023      	beq.n	801fd5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801fd16:	9b07      	ldr	r3, [sp, #28]
 801fd18:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801fd1a:	3b01      	subs	r3, #1
 801fd1c:	fb00 4003 	mla	r0, r0, r3, r4
 801fd20:	1400      	asrs	r0, r0, #16
 801fd22:	f53f ae82 	bmi.w	801fa2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd26:	3901      	subs	r1, #1
 801fd28:	4288      	cmp	r0, r1
 801fd2a:	f6bf ae7e 	bge.w	801fa2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd2e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fd30:	fb01 6303 	mla	r3, r1, r3, r6
 801fd34:	141b      	asrs	r3, r3, #16
 801fd36:	f53f ae78 	bmi.w	801fa2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd3a:	3a01      	subs	r2, #1
 801fd3c:	4293      	cmp	r3, r2
 801fd3e:	f6bf ae74 	bge.w	801fa2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd42:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fd46:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801fd4a:	f1bb 0f00 	cmp.w	fp, #0
 801fd4e:	dc6c      	bgt.n	801fe2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801fd50:	9b07      	ldr	r3, [sp, #28]
 801fd52:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801fd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd58:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fd5c:	930a      	str	r3, [sp, #40]	; 0x28
 801fd5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	f340 81b3 	ble.w	80200cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801fd66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd7a:	eef0 6a62 	vmov.f32	s13, s5
 801fd7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd92:	ee16 4a90 	vmov	r4, s13
 801fd96:	eef0 6a43 	vmov.f32	s13, s6
 801fd9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd9e:	ee12 2a90 	vmov	r2, s5
 801fda2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fda6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fda8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdac:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdb0:	ee13 2a10 	vmov	r2, s6
 801fdb4:	9329      	str	r3, [sp, #164]	; 0xa4
 801fdb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdb8:	ee16 6a90 	vmov	r6, s13
 801fdbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdc0:	932a      	str	r3, [sp, #168]	; 0xa8
 801fdc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fdc4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fdc6:	3b01      	subs	r3, #1
 801fdc8:	9317      	str	r3, [sp, #92]	; 0x5c
 801fdca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdcc:	bf08      	it	eq
 801fdce:	4613      	moveq	r3, r2
 801fdd0:	eeb0 3a67 	vmov.f32	s6, s15
 801fdd4:	9307      	str	r3, [sp, #28]
 801fdd6:	eef0 2a47 	vmov.f32	s5, s14
 801fdda:	e5fb      	b.n	801f9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fddc:	2900      	cmp	r1, #0
 801fdde:	f43f ae6b 	beq.w	801fab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fde2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fde6:	9308      	str	r3, [sp, #32]
 801fde8:	0e1b      	lsrs	r3, r3, #24
 801fdea:	9311      	str	r3, [sp, #68]	; 0x44
 801fdec:	e664      	b.n	801fab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fdee:	f112 0801 	adds.w	r8, r2, #1
 801fdf2:	f53f af7b 	bmi.w	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fdf6:	4543      	cmp	r3, r8
 801fdf8:	f6ff af78 	blt.w	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fdfc:	f11c 0801 	adds.w	r8, ip, #1
 801fe00:	f53f af74 	bmi.w	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe04:	45c6      	cmp	lr, r8
 801fe06:	f6ff af71 	blt.w	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe0a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801fe0c:	9201      	str	r2, [sp, #4]
 801fe0e:	fa0f f28e 	sxth.w	r2, lr
 801fe12:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801fe16:	e9cd c002 	strd	ip, r0, [sp, #8]
 801fe1a:	9200      	str	r2, [sp, #0]
 801fe1c:	b21b      	sxth	r3, r3
 801fe1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe20:	4639      	mov	r1, r7
 801fe22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fe24:	f7ff fc79 	bl	801f71a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801fe28:	e760      	b.n	801fcec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fe2c:	1427      	asrs	r7, r4, #16
 801fe2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe32:	1433      	asrs	r3, r6, #16
 801fe34:	fb01 7303 	mla	r3, r1, r3, r7
 801fe38:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fe3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fe3e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801fe42:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fe46:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fe4a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fe4e:	2a00      	cmp	r2, #0
 801fe50:	f000 8133 	beq.w	80200ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801fe54:	687d      	ldr	r5, [r7, #4]
 801fe56:	950e      	str	r5, [sp, #56]	; 0x38
 801fe58:	0e2d      	lsrs	r5, r5, #24
 801fe5a:	9515      	str	r5, [sp, #84]	; 0x54
 801fe5c:	b178      	cbz	r0, 801fe7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801fe5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801fe62:	3901      	subs	r1, #1
 801fe64:	0089      	lsls	r1, r1, #2
 801fe66:	3104      	adds	r1, #4
 801fe68:	eb07 0e01 	add.w	lr, r7, r1
 801fe6c:	5879      	ldr	r1, [r7, r1]
 801fe6e:	9109      	str	r1, [sp, #36]	; 0x24
 801fe70:	0e09      	lsrs	r1, r1, #24
 801fe72:	9112      	str	r1, [sp, #72]	; 0x48
 801fe74:	f8de 1004 	ldr.w	r1, [lr, #4]
 801fe78:	910f      	str	r1, [sp, #60]	; 0x3c
 801fe7a:	0e09      	lsrs	r1, r1, #24
 801fe7c:	9116      	str	r1, [sp, #88]	; 0x58
 801fe7e:	b292      	uxth	r2, r2
 801fe80:	b280      	uxth	r0, r0
 801fe82:	fb02 f800 	mul.w	r8, r2, r0
 801fe86:	0112      	lsls	r2, r2, #4
 801fe88:	eba2 0e08 	sub.w	lr, r2, r8
 801fe8c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fe8e:	fa1f fe8e 	uxth.w	lr, lr
 801fe92:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801fe96:	fb0e f101 	mul.w	r1, lr, r1
 801fe9a:	b280      	uxth	r0, r0
 801fe9c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fea0:	1a12      	subs	r2, r2, r0
 801fea2:	b292      	uxth	r2, r2
 801fea4:	fb02 110c 	mla	r1, r2, ip, r1
 801fea8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801feaa:	fb00 1105 	mla	r1, r0, r5, r1
 801feae:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801feb0:	fb08 1105 	mla	r1, r8, r5, r1
 801feb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801feb8:	2900      	cmp	r1, #0
 801feba:	f000 80f5 	beq.w	80200a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801febe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fec2:	d019      	beq.n	801fef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801fec4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fec8:	fb0c fa0a 	mul.w	sl, ip, sl
 801fecc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fed0:	fb0c fc03 	mul.w	ip, ip, r3
 801fed4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fed8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fedc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fee0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fee4:	4453      	add	r3, sl
 801fee6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801feea:	0a1b      	lsrs	r3, r3, #8
 801feec:	0a3f      	lsrs	r7, r7, #8
 801feee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fef2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fef6:	433b      	orrs	r3, r7
 801fef8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fefa:	2dff      	cmp	r5, #255	; 0xff
 801fefc:	d020      	beq.n	801ff40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801fefe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ff00:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ff04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ff06:	436f      	muls	r7, r5
 801ff08:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ff0a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff0e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ff12:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ff14:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff18:	fb05 fa0a 	mul.w	sl, r5, sl
 801ff1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff20:	44bc      	add	ip, r7
 801ff22:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff3a:	ea4c 050a 	orr.w	r5, ip, sl
 801ff3e:	950e      	str	r5, [sp, #56]	; 0x38
 801ff40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff42:	2dff      	cmp	r5, #255	; 0xff
 801ff44:	d020      	beq.n	801ff88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801ff46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ff48:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ff4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff4e:	436f      	muls	r7, r5
 801ff50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ff52:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff56:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ff5a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff5c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff60:	fb05 fa0a 	mul.w	sl, r5, sl
 801ff64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff68:	44bc      	add	ip, r7
 801ff6a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff6e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff82:	ea4c 050a 	orr.w	r5, ip, sl
 801ff86:	9509      	str	r5, [sp, #36]	; 0x24
 801ff88:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ff8a:	2dff      	cmp	r5, #255	; 0xff
 801ff8c:	d020      	beq.n	801ffd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801ff8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ff90:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ff94:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ff96:	436f      	muls	r7, r5
 801ff98:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ff9a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff9e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ffa2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ffa4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ffa8:	fb05 fa0a 	mul.w	sl, r5, sl
 801ffac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffb0:	44bc      	add	ip, r7
 801ffb2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ffb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ffba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffca:	ea4c 050a 	orr.w	r5, ip, sl
 801ffce:	950f      	str	r5, [sp, #60]	; 0x3c
 801ffd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ffd2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ffd6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ffda:	fb0e f707 	mul.w	r7, lr, r7
 801ffde:	fb02 770c 	mla	r7, r2, ip, r7
 801ffe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ffe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ffe8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801ffec:	fb00 770c 	mla	r7, r0, ip, r7
 801fff0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801fff2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fff6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fff8:	fb08 770c 	mla	r7, r8, ip, r7
 801fffc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8020000:	fb0e fe0c 	mul.w	lr, lr, ip
 8020004:	fb02 e303 	mla	r3, r2, r3, lr
 8020008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802000a:	0a3f      	lsrs	r7, r7, #8
 802000c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020010:	fb00 330a 	mla	r3, r0, sl, r3
 8020014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020016:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802001a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802001e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020024:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020028:	4359      	muls	r1, r3
 802002a:	1c4b      	adds	r3, r1, #1
 802002c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020030:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020034:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020038:	ea47 070c 	orr.w	r7, r7, ip
 802003c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802003e:	0c3b      	lsrs	r3, r7, #16
 8020040:	f8b9 0000 	ldrh.w	r0, [r9]
 8020044:	fb13 f305 	smulbb	r3, r3, r5
 8020048:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802004c:	b2ff      	uxtb	r7, r7
 802004e:	1202      	asrs	r2, r0, #8
 8020050:	fb17 f705 	smulbb	r7, r7, r5
 8020054:	b2c9      	uxtb	r1, r1
 8020056:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802005a:	fb02 3201 	mla	r2, r2, r1, r3
 802005e:	10c3      	asrs	r3, r0, #3
 8020060:	00c0      	lsls	r0, r0, #3
 8020062:	fb1c fc05 	smulbb	ip, ip, r5
 8020066:	b2c0      	uxtb	r0, r0
 8020068:	fb00 7001 	mla	r0, r0, r1, r7
 802006c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020070:	fb03 c301 	mla	r3, r3, r1, ip
 8020074:	b292      	uxth	r2, r2
 8020076:	b280      	uxth	r0, r0
 8020078:	1c51      	adds	r1, r2, #1
 802007a:	f100 0c01 	add.w	ip, r0, #1
 802007e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020082:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8020086:	b29b      	uxth	r3, r3
 8020088:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802008c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020090:	ea4c 0202 	orr.w	r2, ip, r2
 8020094:	f103 0c01 	add.w	ip, r3, #1
 8020098:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802009c:	095b      	lsrs	r3, r3, #5
 802009e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80200a2:	431a      	orrs	r2, r3
 80200a4:	f8a9 2000 	strh.w	r2, [r9]
 80200a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80200aa:	f109 0902 	add.w	r9, r9, #2
 80200ae:	441c      	add	r4, r3
 80200b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80200b6:	441e      	add	r6, r3
 80200b8:	e647      	b.n	801fd4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80200ba:	2800      	cmp	r0, #0
 80200bc:	f43f aedf 	beq.w	801fe7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80200c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80200c4:	9109      	str	r1, [sp, #36]	; 0x24
 80200c6:	0e09      	lsrs	r1, r1, #24
 80200c8:	9112      	str	r1, [sp, #72]	; 0x48
 80200ca:	e6d8      	b.n	801fe7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80200cc:	b01d      	add	sp, #116	; 0x74
 80200ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80200d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200d6:	b085      	sub	sp, #20
 80200d8:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80200dc:	9102      	str	r1, [sp, #8]
 80200de:	fb04 7103 	mla	r1, r4, r3, r7
 80200e2:	2c00      	cmp	r4, #0
 80200e4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80200e8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80200ec:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80200f0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80200f4:	f2c0 810c 	blt.w	8020310 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80200f8:	45a6      	cmp	lr, r4
 80200fa:	f340 8109 	ble.w	8020310 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80200fe:	2f00      	cmp	r7, #0
 8020100:	f2c0 8104 	blt.w	802030c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020104:	42bb      	cmp	r3, r7
 8020106:	f340 8101 	ble.w	802030c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802010a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802010e:	1c7a      	adds	r2, r7, #1
 8020110:	f100 8101 	bmi.w	8020316 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020114:	4293      	cmp	r3, r2
 8020116:	f340 80fe 	ble.w	8020316 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802011a:	2e00      	cmp	r6, #0
 802011c:	f000 80fd 	beq.w	802031a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8020120:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020124:	3401      	adds	r4, #1
 8020126:	f100 80fc 	bmi.w	8020322 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802012a:	45a6      	cmp	lr, r4
 802012c:	f340 80f9 	ble.w	8020322 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020130:	2800      	cmp	r0, #0
 8020132:	f000 80f9 	beq.w	8020328 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8020136:	2f00      	cmp	r7, #0
 8020138:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802013c:	f2c0 80ef 	blt.w	802031e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020140:	42bb      	cmp	r3, r7
 8020142:	f340 80ec 	ble.w	802031e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020146:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802014a:	3701      	adds	r7, #1
 802014c:	f100 80ef 	bmi.w	802032e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020150:	42bb      	cmp	r3, r7
 8020152:	f340 80ec 	ble.w	802032e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020156:	2e00      	cmp	r6, #0
 8020158:	f000 80eb 	beq.w	8020332 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802015c:	6852      	ldr	r2, [r2, #4]
 802015e:	b2b6      	uxth	r6, r6
 8020160:	b280      	uxth	r0, r0
 8020162:	fb00 fe06 	mul.w	lr, r0, r6
 8020166:	0136      	lsls	r6, r6, #4
 8020168:	eba6 070e 	sub.w	r7, r6, lr
 802016c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020170:	b2bf      	uxth	r7, r7
 8020172:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020176:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802017a:	fb07 f60a 	mul.w	r6, r7, sl
 802017e:	b280      	uxth	r0, r0
 8020180:	1a1b      	subs	r3, r3, r0
 8020182:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020186:	b29b      	uxth	r3, r3
 8020188:	fb0b 6603 	mla	r6, fp, r3, r6
 802018c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020190:	fb00 6609 	mla	r6, r0, r9, r6
 8020194:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020198:	fb0e 6608 	mla	r6, lr, r8, r6
 802019c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80201a0:	9600      	str	r6, [sp, #0]
 80201a2:	2e00      	cmp	r6, #0
 80201a4:	f000 80af 	beq.w	8020306 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80201a8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80201ac:	fb0b fc0c 	mul.w	ip, fp, ip
 80201b0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80201b4:	fb0b f505 	mul.w	r5, fp, r5
 80201b8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80201bc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80201c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201c4:	44dc      	add	ip, fp
 80201c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201ca:	9501      	str	r5, [sp, #4]
 80201cc:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80201d0:	9503      	str	r5, [sp, #12]
 80201d2:	9d01      	ldr	r5, [sp, #4]
 80201d4:	9e02      	ldr	r6, [sp, #8]
 80201d6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80201da:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80201de:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80201e2:	fb0a fc0c 	mul.w	ip, sl, ip
 80201e6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80201ea:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80201ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80201f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201f6:	4465      	add	r5, ip
 80201f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80201fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020200:	fb09 fc0c 	mul.w	ip, r9, ip
 8020204:	fb09 f904 	mul.w	r9, r9, r4
 8020208:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802020c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020210:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020214:	fb08 f404 	mul.w	r4, r8, r4
 8020218:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802021c:	fb08 f802 	mul.w	r8, r8, r2
 8020220:	0a2d      	lsrs	r5, r5, #8
 8020222:	0a22      	lsrs	r2, r4, #8
 8020224:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020228:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802022c:	437d      	muls	r5, r7
 802022e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020232:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020236:	4414      	add	r4, r2
 8020238:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802023c:	fb0a fa01 	mul.w	sl, sl, r1
 8020240:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020244:	9a03      	ldr	r2, [sp, #12]
 8020246:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802024a:	fb02 5503 	mla	r5, r2, r3, r5
 802024e:	0a24      	lsrs	r4, r4, #8
 8020250:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020254:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020258:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802025c:	fb04 540e 	mla	r4, r4, lr, r5
 8020260:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020264:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020268:	4461      	add	r1, ip
 802026a:	0a09      	lsrs	r1, r1, #8
 802026c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020270:	fb01 4100 	mla	r1, r1, r0, r4
 8020274:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020278:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802027c:	fb07 f70a 	mul.w	r7, r7, sl
 8020280:	0a09      	lsrs	r1, r1, #8
 8020282:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020286:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802028a:	fb03 7101 	mla	r1, r3, r1, r7
 802028e:	9b00      	ldr	r3, [sp, #0]
 8020290:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020294:	43da      	mvns	r2, r3
 8020296:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802029a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802029e:	8836      	ldrh	r6, [r6, #0]
 80202a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80202a4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80202a8:	fb00 e101 	mla	r1, r0, r1, lr
 80202ac:	1233      	asrs	r3, r6, #8
 80202ae:	b2d2      	uxtb	r2, r2
 80202b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80202b4:	4353      	muls	r3, r2
 80202b6:	10f0      	asrs	r0, r6, #3
 80202b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80202bc:	4350      	muls	r0, r2
 80202be:	0a09      	lsrs	r1, r1, #8
 80202c0:	00f6      	lsls	r6, r6, #3
 80202c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80202c6:	b2f6      	uxtb	r6, r6
 80202c8:	4321      	orrs	r1, r4
 80202ca:	4356      	muls	r6, r2
 80202cc:	1c5a      	adds	r2, r3, #1
 80202ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80202d2:	0c0b      	lsrs	r3, r1, #16
 80202d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80202d8:	1c42      	adds	r2, r0, #1
 80202da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80202de:	0a0a      	lsrs	r2, r1, #8
 80202e0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80202e4:	021b      	lsls	r3, r3, #8
 80202e6:	00d2      	lsls	r2, r2, #3
 80202e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80202ec:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80202f0:	4313      	orrs	r3, r2
 80202f2:	1c72      	adds	r2, r6, #1
 80202f4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80202f8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80202fc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020300:	4319      	orrs	r1, r3
 8020302:	9b02      	ldr	r3, [sp, #8]
 8020304:	8019      	strh	r1, [r3, #0]
 8020306:	b005      	add	sp, #20
 8020308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802030c:	2500      	movs	r5, #0
 802030e:	e6fe      	b.n	802010e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8020310:	2100      	movs	r1, #0
 8020312:	460d      	mov	r5, r1
 8020314:	e706      	b.n	8020124 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020316:	2100      	movs	r1, #0
 8020318:	e704      	b.n	8020124 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802031a:	4631      	mov	r1, r6
 802031c:	e702      	b.n	8020124 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802031e:	2400      	movs	r4, #0
 8020320:	e713      	b.n	802014a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8020322:	2200      	movs	r2, #0
 8020324:	4614      	mov	r4, r2
 8020326:	e71a      	b.n	802015e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020328:	4602      	mov	r2, r0
 802032a:	4604      	mov	r4, r0
 802032c:	e717      	b.n	802015e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802032e:	2200      	movs	r2, #0
 8020330:	e715      	b.n	802015e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020332:	4632      	mov	r2, r6
 8020334:	e713      	b.n	802015e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08020338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802033c:	b09b      	sub	sp, #108	; 0x6c
 802033e:	9218      	str	r2, [sp, #96]	; 0x60
 8020340:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020342:	9019      	str	r0, [sp, #100]	; 0x64
 8020344:	6850      	ldr	r0, [r2, #4]
 8020346:	9116      	str	r1, [sp, #88]	; 0x58
 8020348:	9307      	str	r3, [sp, #28]
 802034a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802034e:	fb00 1303 	mla	r3, r0, r3, r1
 8020352:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8020356:	6812      	ldr	r2, [r2, #0]
 8020358:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802035c:	930a      	str	r3, [sp, #40]	; 0x28
 802035e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	930f      	str	r3, [sp, #60]	; 0x3c
 8020364:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020366:	2b00      	cmp	r3, #0
 8020368:	dc03      	bgt.n	8020372 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802036a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802036c:	2b00      	cmp	r3, #0
 802036e:	f340 8387 	ble.w	8020a80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020372:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020374:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020378:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802037c:	1e48      	subs	r0, r1, #1
 802037e:	1e57      	subs	r7, r2, #1
 8020380:	9b07      	ldr	r3, [sp, #28]
 8020382:	2b00      	cmp	r3, #0
 8020384:	f340 8166 	ble.w	8020654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020388:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802038c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020390:	d406      	bmi.n	80203a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020392:	4584      	cmp	ip, r0
 8020394:	da04      	bge.n	80203a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020396:	2b00      	cmp	r3, #0
 8020398:	db02      	blt.n	80203a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802039a:	42bb      	cmp	r3, r7
 802039c:	f2c0 815b 	blt.w	8020656 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80203a0:	f11c 0c01 	adds.w	ip, ip, #1
 80203a4:	f100 814b 	bmi.w	802063e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203a8:	4561      	cmp	r1, ip
 80203aa:	f2c0 8148 	blt.w	802063e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203ae:	3301      	adds	r3, #1
 80203b0:	f100 8145 	bmi.w	802063e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203b4:	429a      	cmp	r2, r3
 80203b6:	f2c0 8142 	blt.w	802063e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203ba:	9b07      	ldr	r3, [sp, #28]
 80203bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80203be:	9317      	str	r3, [sp, #92]	; 0x5c
 80203c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	f340 8165 	ble.w	8020692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80203c8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80203ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203cc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80203d0:	1422      	asrs	r2, r4, #16
 80203d2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80203d6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80203da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80203de:	689b      	ldr	r3, [r3, #8]
 80203e0:	f100 81d5 	bmi.w	802078e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80203e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e8:	4542      	cmp	r2, r8
 80203ea:	f280 81d0 	bge.w	802078e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80203ee:	f1bc 0f00 	cmp.w	ip, #0
 80203f2:	f2c0 81cc 	blt.w	802078e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80203f6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80203fa:	45c4      	cmp	ip, r8
 80203fc:	f280 81c7 	bge.w	802078e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020400:	b21b      	sxth	r3, r3
 8020402:	fb0c 2203 	mla	r2, ip, r3, r2
 8020406:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020408:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802040c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020410:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020414:	2900      	cmp	r1, #0
 8020416:	f000 8182 	beq.w	802071e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802041a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802041e:	950b      	str	r5, [sp, #44]	; 0x2c
 8020420:	0e2d      	lsrs	r5, r5, #24
 8020422:	9512      	str	r5, [sp, #72]	; 0x48
 8020424:	b180      	cbz	r0, 8020448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802042a:	3b01      	subs	r3, #1
 802042c:	009b      	lsls	r3, r3, #2
 802042e:	3304      	adds	r3, #4
 8020430:	eb08 0c03 	add.w	ip, r8, r3
 8020434:	f858 3003 	ldr.w	r3, [r8, r3]
 8020438:	9308      	str	r3, [sp, #32]
 802043a:	0e1b      	lsrs	r3, r3, #24
 802043c:	9310      	str	r3, [sp, #64]	; 0x40
 802043e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020442:	930c      	str	r3, [sp, #48]	; 0x30
 8020444:	0e1b      	lsrs	r3, r3, #24
 8020446:	9313      	str	r3, [sp, #76]	; 0x4c
 8020448:	b289      	uxth	r1, r1
 802044a:	b280      	uxth	r0, r0
 802044c:	fb01 f900 	mul.w	r9, r1, r0
 8020450:	0109      	lsls	r1, r1, #4
 8020452:	eba1 0809 	sub.w	r8, r1, r9
 8020456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020458:	fa1f f888 	uxth.w	r8, r8
 802045c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020460:	fb08 f303 	mul.w	r3, r8, r3
 8020464:	b280      	uxth	r0, r0
 8020466:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802046a:	1a09      	subs	r1, r1, r0
 802046c:	b289      	uxth	r1, r1
 802046e:	fb01 330e 	mla	r3, r1, lr, r3
 8020472:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020474:	fb00 3305 	mla	r3, r0, r5, r3
 8020478:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802047a:	fb09 3305 	mla	r3, r9, r5, r3
 802047e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020482:	2b00      	cmp	r3, #0
 8020484:	f000 80d2 	beq.w	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020488:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802048c:	d01b      	beq.n	80204c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802048e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020492:	fb0e fa0a 	mul.w	sl, lr, sl
 8020496:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802049a:	fb0e fe02 	mul.w	lr, lr, r2
 802049e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80204a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204aa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80204ae:	4452      	add	r2, sl
 80204b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80204b4:	0a12      	lsrs	r2, r2, #8
 80204b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204c2:	ea42 020c 	orr.w	r2, r2, ip
 80204c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204c8:	2dff      	cmp	r5, #255	; 0xff
 80204ca:	d021      	beq.n	8020510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80204cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80204ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80204d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80204d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80204da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80204e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80204ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80204f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80204f4:	44de      	add	lr, fp
 80204f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80204fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020502:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020506:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802050a:	ea4e 050a 	orr.w	r5, lr, sl
 802050e:	950b      	str	r5, [sp, #44]	; 0x2c
 8020510:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020512:	2dff      	cmp	r5, #255	; 0xff
 8020514:	d021      	beq.n	802055a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8020516:	9d08      	ldr	r5, [sp, #32]
 8020518:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802051c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802051e:	fb05 fb0b 	mul.w	fp, r5, fp
 8020522:	9d08      	ldr	r5, [sp, #32]
 8020524:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020528:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802052a:	fb05 fa0e 	mul.w	sl, r5, lr
 802052e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020536:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802053a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802053e:	44de      	add	lr, fp
 8020540:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020544:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802054c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020554:	ea4e 050a 	orr.w	r5, lr, sl
 8020558:	9508      	str	r5, [sp, #32]
 802055a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802055c:	2dff      	cmp	r5, #255	; 0xff
 802055e:	d021      	beq.n	80205a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020560:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020562:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020566:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020568:	fb05 fb0b 	mul.w	fp, r5, fp
 802056c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802056e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020572:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020576:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020578:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802057c:	fb05 fa0a 	mul.w	sl, r5, sl
 8020580:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020584:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020588:	44de      	add	lr, fp
 802058a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802058e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020592:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020596:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802059a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802059e:	ea4e 050a 	orr.w	r5, lr, sl
 80205a2:	950c      	str	r5, [sp, #48]	; 0x30
 80205a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80205a6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80205aa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80205ae:	fb08 fc0c 	mul.w	ip, r8, ip
 80205b2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80205b6:	9d08      	ldr	r5, [sp, #32]
 80205b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205bc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80205c0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80205c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80205c6:	2bff      	cmp	r3, #255	; 0xff
 80205c8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80205cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80205ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 80205d2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80205d6:	fb08 f80e 	mul.w	r8, r8, lr
 80205da:	fb01 8202 	mla	r2, r1, r2, r8
 80205de:	9908      	ldr	r1, [sp, #32]
 80205e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205e4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80205e8:	fb00 220a 	mla	r2, r0, sl, r2
 80205ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80205ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205f2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80205f6:	fb09 2900 	mla	r9, r9, r0, r2
 80205fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80205fe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020602:	ea4c 0c09 	orr.w	ip, ip, r9
 8020606:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802060a:	f040 8091 	bne.w	8020730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802060e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8020612:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8020616:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802061a:	f022 0207 	bic.w	r2, r2, #7
 802061e:	431a      	orrs	r2, r3
 8020620:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020624:	ea4c 0c02 	orr.w	ip, ip, r2
 8020628:	f8a7 c000 	strh.w	ip, [r7]
 802062c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802062e:	3702      	adds	r7, #2
 8020630:	441c      	add	r4, r3
 8020632:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020634:	441e      	add	r6, r3
 8020636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020638:	3b01      	subs	r3, #1
 802063a:	9317      	str	r3, [sp, #92]	; 0x5c
 802063c:	e6c0      	b.n	80203c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802063e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020640:	441c      	add	r4, r3
 8020642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020644:	441e      	add	r6, r3
 8020646:	9b07      	ldr	r3, [sp, #28]
 8020648:	3b01      	subs	r3, #1
 802064a:	9307      	str	r3, [sp, #28]
 802064c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802064e:	3302      	adds	r3, #2
 8020650:	930a      	str	r3, [sp, #40]	; 0x28
 8020652:	e695      	b.n	8020380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020654:	d024      	beq.n	80206a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020656:	9b07      	ldr	r3, [sp, #28]
 8020658:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802065a:	3b01      	subs	r3, #1
 802065c:	fb00 4003 	mla	r0, r0, r3, r4
 8020660:	1400      	asrs	r0, r0, #16
 8020662:	f53f aeaa 	bmi.w	80203ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020666:	3901      	subs	r1, #1
 8020668:	4288      	cmp	r0, r1
 802066a:	f6bf aea6 	bge.w	80203ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802066e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020670:	fb01 6303 	mla	r3, r1, r3, r6
 8020674:	141b      	asrs	r3, r3, #16
 8020676:	f53f aea0 	bmi.w	80203ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802067a:	3a01      	subs	r2, #1
 802067c:	4293      	cmp	r3, r2
 802067e:	f6bf ae9c 	bge.w	80203ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020682:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020686:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802068a:	f1bb 0f00 	cmp.w	fp, #0
 802068e:	f300 809a 	bgt.w	80207c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8020692:	9b07      	ldr	r3, [sp, #28]
 8020694:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802069a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802069e:	930a      	str	r3, [sp, #40]	; 0x28
 80206a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	f340 81ec 	ble.w	8020a80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80206a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80206ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80206b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80206bc:	eef0 6a62 	vmov.f32	s13, s5
 80206c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80206c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80206cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80206d4:	ee16 4a90 	vmov	r4, s13
 80206d8:	eef0 6a43 	vmov.f32	s13, s6
 80206dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80206e0:	ee12 2a90 	vmov	r2, s5
 80206e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80206f2:	ee13 2a10 	vmov	r2, s6
 80206f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80206f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206fa:	ee16 6a90 	vmov	r6, s13
 80206fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020702:	9328      	str	r3, [sp, #160]	; 0xa0
 8020704:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020706:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020708:	3b01      	subs	r3, #1
 802070a:	9316      	str	r3, [sp, #88]	; 0x58
 802070c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802070e:	bf08      	it	eq
 8020710:	4613      	moveq	r3, r2
 8020712:	eeb0 3a67 	vmov.f32	s6, s15
 8020716:	9307      	str	r3, [sp, #28]
 8020718:	eef0 2a47 	vmov.f32	s5, s14
 802071c:	e622      	b.n	8020364 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802071e:	2800      	cmp	r0, #0
 8020720:	f43f ae92 	beq.w	8020448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020724:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020728:	9308      	str	r3, [sp, #32]
 802072a:	0e1b      	lsrs	r3, r3, #24
 802072c:	9310      	str	r3, [sp, #64]	; 0x40
 802072e:	e68b      	b.n	8020448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020730:	43db      	mvns	r3, r3
 8020732:	8839      	ldrh	r1, [r7, #0]
 8020734:	fa5f f883 	uxtb.w	r8, r3
 8020738:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802073c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020740:	fb0e fe08 	mul.w	lr, lr, r8
 8020744:	10c8      	asrs	r0, r1, #3
 8020746:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802074a:	fb00 f008 	mul.w	r0, r0, r8
 802074e:	00cb      	lsls	r3, r1, #3
 8020750:	f10e 0101 	add.w	r1, lr, #1
 8020754:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8020758:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802075c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8020760:	b2db      	uxtb	r3, r3
 8020762:	f100 0e01 	add.w	lr, r0, #1
 8020766:	fb03 f308 	mul.w	r3, r3, r8
 802076a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802076e:	4dc6      	ldr	r5, [pc, #792]	; (8020a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8020770:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020774:	b2c9      	uxtb	r1, r1
 8020776:	00d2      	lsls	r2, r2, #3
 8020778:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802077c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020780:	430a      	orrs	r2, r1
 8020782:	1c59      	adds	r1, r3, #1
 8020784:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020788:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802078c:	e748      	b.n	8020620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802078e:	f112 0801 	adds.w	r8, r2, #1
 8020792:	f53f af4b 	bmi.w	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020796:	4543      	cmp	r3, r8
 8020798:	f6ff af48 	blt.w	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802079c:	f11c 0801 	adds.w	r8, ip, #1
 80207a0:	f53f af44 	bmi.w	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207a4:	45c6      	cmp	lr, r8
 80207a6:	f6ff af41 	blt.w	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207aa:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80207ae:	fa0f f28e 	sxth.w	r2, lr
 80207b2:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80207b6:	9200      	str	r2, [sp, #0]
 80207b8:	b21b      	sxth	r3, r3
 80207ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207bc:	4639      	mov	r1, r7
 80207be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80207c0:	f7ff fc87 	bl	80200d2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80207c4:	e732      	b.n	802062c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207c8:	1421      	asrs	r1, r4, #16
 80207ca:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80207ce:	1433      	asrs	r3, r6, #16
 80207d0:	fb07 1303 	mla	r3, r7, r3, r1
 80207d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80207d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80207d8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80207dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80207e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80207e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80207e8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80207ec:	2a00      	cmp	r2, #0
 80207ee:	f000 8108 	beq.w	8020a02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80207f2:	684d      	ldr	r5, [r1, #4]
 80207f4:	950d      	str	r5, [sp, #52]	; 0x34
 80207f6:	0e2d      	lsrs	r5, r5, #24
 80207f8:	9514      	str	r5, [sp, #80]	; 0x50
 80207fa:	b178      	cbz	r0, 802081c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80207fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8020800:	3f01      	subs	r7, #1
 8020802:	00bf      	lsls	r7, r7, #2
 8020804:	3704      	adds	r7, #4
 8020806:	eb01 0e07 	add.w	lr, r1, r7
 802080a:	59c9      	ldr	r1, [r1, r7]
 802080c:	9109      	str	r1, [sp, #36]	; 0x24
 802080e:	0e09      	lsrs	r1, r1, #24
 8020810:	9111      	str	r1, [sp, #68]	; 0x44
 8020812:	f8de 1004 	ldr.w	r1, [lr, #4]
 8020816:	910e      	str	r1, [sp, #56]	; 0x38
 8020818:	0e09      	lsrs	r1, r1, #24
 802081a:	9115      	str	r1, [sp, #84]	; 0x54
 802081c:	b292      	uxth	r2, r2
 802081e:	b280      	uxth	r0, r0
 8020820:	fb02 f900 	mul.w	r9, r2, r0
 8020824:	0112      	lsls	r2, r2, #4
 8020826:	eba2 0e09 	sub.w	lr, r2, r9
 802082a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802082e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020830:	fa1f fe8e 	uxth.w	lr, lr
 8020834:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020838:	fb0e f202 	mul.w	r2, lr, r2
 802083c:	b280      	uxth	r0, r0
 802083e:	1a09      	subs	r1, r1, r0
 8020840:	b289      	uxth	r1, r1
 8020842:	fb01 220c 	mla	r2, r1, ip, r2
 8020846:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020848:	fb00 2205 	mla	r2, r0, r5, r2
 802084c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802084e:	fb09 2205 	mla	r2, r9, r5, r2
 8020852:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020856:	2a00      	cmp	r2, #0
 8020858:	f000 80ca 	beq.w	80209f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802085c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020860:	d019      	beq.n	8020896 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8020862:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020866:	fb0c fa0a 	mul.w	sl, ip, sl
 802086a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802086e:	fb0c fc03 	mul.w	ip, ip, r3
 8020872:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020876:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802087a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802087e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020882:	4453      	add	r3, sl
 8020884:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020888:	0a1b      	lsrs	r3, r3, #8
 802088a:	0a3f      	lsrs	r7, r7, #8
 802088c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020890:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020894:	433b      	orrs	r3, r7
 8020896:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020898:	2dff      	cmp	r5, #255	; 0xff
 802089a:	d020      	beq.n	80208de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802089c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802089e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80208a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80208a4:	436f      	muls	r7, r5
 80208a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80208a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208ac:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80208b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80208b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80208b6:	fb05 fa0a 	mul.w	sl, r5, sl
 80208ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208be:	44bc      	add	ip, r7
 80208c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208d8:	ea4c 050a 	orr.w	r5, ip, sl
 80208dc:	950d      	str	r5, [sp, #52]	; 0x34
 80208de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80208e0:	2dff      	cmp	r5, #255	; 0xff
 80208e2:	d020      	beq.n	8020926 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80208e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80208e6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80208ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80208ec:	436f      	muls	r7, r5
 80208ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80208f0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80208f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80208f6:	fb05 fa0c 	mul.w	sl, r5, ip
 80208fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020902:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020906:	44bc      	add	ip, r7
 8020908:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802090c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020910:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020918:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802091c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020920:	ea4c 050a 	orr.w	r5, ip, sl
 8020924:	9509      	str	r5, [sp, #36]	; 0x24
 8020926:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020928:	2dff      	cmp	r5, #255	; 0xff
 802092a:	d020      	beq.n	802096e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802092c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802092e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020934:	436f      	muls	r7, r5
 8020936:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020938:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802093c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020940:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020942:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020946:	fb05 fa0a 	mul.w	sl, r5, sl
 802094a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802094e:	44bc      	add	ip, r7
 8020950:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020954:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020958:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802095c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020960:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020964:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020968:	ea4c 050a 	orr.w	r5, ip, sl
 802096c:	950e      	str	r5, [sp, #56]	; 0x38
 802096e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020970:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020974:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020978:	fb0e f707 	mul.w	r7, lr, r7
 802097c:	fb01 770c 	mla	r7, r1, ip, r7
 8020980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020986:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802098a:	fb00 770c 	mla	r7, r0, ip, r7
 802098e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020990:	2aff      	cmp	r2, #255	; 0xff
 8020992:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020996:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020998:	fb09 770c 	mla	r7, r9, ip, r7
 802099c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80209a0:	fb0e fe0c 	mul.w	lr, lr, ip
 80209a4:	fb01 e303 	mla	r3, r1, r3, lr
 80209a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80209aa:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80209ae:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80209b2:	fb00 330a 	mla	r3, r0, sl, r3
 80209b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80209b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80209bc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80209c0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80209c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80209cc:	ea47 070c 	orr.w	r7, r7, ip
 80209d0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80209d4:	d11e      	bne.n	8020a14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80209d6:	097a      	lsrs	r2, r7, #5
 80209d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80209dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80209e0:	f023 0307 	bic.w	r3, r3, #7
 80209e4:	4313      	orrs	r3, r2
 80209e6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80209ea:	431f      	orrs	r7, r3
 80209ec:	f8a8 7000 	strh.w	r7, [r8]
 80209f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80209f2:	f108 0802 	add.w	r8, r8, #2
 80209f6:	441c      	add	r4, r3
 80209f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80209fe:	441e      	add	r6, r3
 8020a00:	e643      	b.n	802068a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	f43f af0a 	beq.w	802081c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020a08:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8020a0e:	0e09      	lsrs	r1, r1, #24
 8020a10:	9111      	str	r1, [sp, #68]	; 0x44
 8020a12:	e703      	b.n	802081c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020a14:	43d2      	mvns	r2, r2
 8020a16:	f8b8 1000 	ldrh.w	r1, [r8]
 8020a1a:	fa5f fe82 	uxtb.w	lr, r2
 8020a1e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8020a22:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a26:	fb0c fc0e 	mul.w	ip, ip, lr
 8020a2a:	10c8      	asrs	r0, r1, #3
 8020a2c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020a30:	fb00 f00e 	mul.w	r0, r0, lr
 8020a34:	00ca      	lsls	r2, r1, #3
 8020a36:	f10c 0101 	add.w	r1, ip, #1
 8020a3a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020a3e:	b2d2      	uxtb	r2, r2
 8020a40:	0c39      	lsrs	r1, r7, #16
 8020a42:	fb02 f20e 	mul.w	r2, r2, lr
 8020a46:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020a4a:	490f      	ldr	r1, [pc, #60]	; (8020a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8020a4c:	fa5f fc8c 	uxtb.w	ip, ip
 8020a50:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8020a54:	1c41      	adds	r1, r0, #1
 8020a56:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8020a5a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020a5e:	1c51      	adds	r1, r2, #1
 8020a60:	00c0      	lsls	r0, r0, #3
 8020a62:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020a66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020a6a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020a6e:	ea4c 0c00 	orr.w	ip, ip, r0
 8020a72:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8020a76:	ea47 0c0c 	orr.w	ip, r7, ip
 8020a7a:	f8a8 c000 	strh.w	ip, [r8]
 8020a7e:	e7b7      	b.n	80209f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020a80:	b01b      	add	sp, #108	; 0x6c
 8020a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a86:	bf00      	nop
 8020a88:	fffff800 	.word	0xfffff800

08020a8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8020a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a90:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8020a94:	2d00      	cmp	r5, #0
 8020a96:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8020a9a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020a9e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8020aa2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8020aa6:	fb05 0e03 	mla	lr, r5, r3, r0
 8020aaa:	f2c0 808c 	blt.w	8020bc6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8020aae:	45a9      	cmp	r9, r5
 8020ab0:	f340 8089 	ble.w	8020bc6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8020ab4:	2800      	cmp	r0, #0
 8020ab6:	f2c0 8084 	blt.w	8020bc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8020aba:	4580      	cmp	r8, r0
 8020abc:	f340 8081 	ble.w	8020bc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8020ac0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020ac4:	5d16      	ldrb	r6, [r2, r4]
 8020ac6:	f01e 0f01 	tst.w	lr, #1
 8020aca:	bf0c      	ite	eq
 8020acc:	f006 060f 	andeq.w	r6, r6, #15
 8020ad0:	1136      	asrne	r6, r6, #4
 8020ad2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020ad6:	b2f6      	uxtb	r6, r6
 8020ad8:	1c44      	adds	r4, r0, #1
 8020ada:	d477      	bmi.n	8020bcc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8020adc:	45a0      	cmp	r8, r4
 8020ade:	dd75      	ble.n	8020bcc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8020ae0:	2f00      	cmp	r7, #0
 8020ae2:	d075      	beq.n	8020bd0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8020ae4:	f10e 0a01 	add.w	sl, lr, #1
 8020ae8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8020aec:	5d14      	ldrb	r4, [r2, r4]
 8020aee:	f01a 0f01 	tst.w	sl, #1
 8020af2:	bf0c      	ite	eq
 8020af4:	f004 040f 	andeq.w	r4, r4, #15
 8020af8:	1124      	asrne	r4, r4, #4
 8020afa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020afe:	b2e4      	uxtb	r4, r4
 8020b00:	3501      	adds	r5, #1
 8020b02:	d469      	bmi.n	8020bd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020b04:	45a9      	cmp	r9, r5
 8020b06:	dd67      	ble.n	8020bd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020b08:	f1bc 0f00 	cmp.w	ip, #0
 8020b0c:	d067      	beq.n	8020bde <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8020b0e:	2800      	cmp	r0, #0
 8020b10:	db60      	blt.n	8020bd4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8020b12:	4580      	cmp	r8, r0
 8020b14:	dd5e      	ble.n	8020bd4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8020b16:	eb03 090e 	add.w	r9, r3, lr
 8020b1a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8020b1e:	5d55      	ldrb	r5, [r2, r5]
 8020b20:	f019 0f01 	tst.w	r9, #1
 8020b24:	bf0c      	ite	eq
 8020b26:	f005 050f 	andeq.w	r5, r5, #15
 8020b2a:	112d      	asrne	r5, r5, #4
 8020b2c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020b30:	b2ed      	uxtb	r5, r5
 8020b32:	3001      	adds	r0, #1
 8020b34:	d456      	bmi.n	8020be4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020b36:	4580      	cmp	r8, r0
 8020b38:	dd54      	ble.n	8020be4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020b3a:	2f00      	cmp	r7, #0
 8020b3c:	d054      	beq.n	8020be8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8020b3e:	3301      	adds	r3, #1
 8020b40:	449e      	add	lr, r3
 8020b42:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020b46:	5cd0      	ldrb	r0, [r2, r3]
 8020b48:	f01e 0f01 	tst.w	lr, #1
 8020b4c:	bf0c      	ite	eq
 8020b4e:	f000 000f 	andeq.w	r0, r0, #15
 8020b52:	1100      	asrne	r0, r0, #4
 8020b54:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020b58:	b2c3      	uxtb	r3, r0
 8020b5a:	b2ba      	uxth	r2, r7
 8020b5c:	fa1f fc8c 	uxth.w	ip, ip
 8020b60:	fb02 f00c 	mul.w	r0, r2, ip
 8020b64:	0112      	lsls	r2, r2, #4
 8020b66:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020b6a:	1a12      	subs	r2, r2, r0
 8020b6c:	b292      	uxth	r2, r2
 8020b6e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020b72:	4362      	muls	r2, r4
 8020b74:	fa1f fc8c 	uxth.w	ip, ip
 8020b78:	eba7 070c 	sub.w	r7, r7, ip
 8020b7c:	b2bf      	uxth	r7, r7
 8020b7e:	fb06 2207 	mla	r2, r6, r7, r2
 8020b82:	fb0c 2505 	mla	r5, ip, r5, r2
 8020b86:	fb00 5303 	mla	r3, r0, r3, r5
 8020b8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020b8e:	b1b3      	cbz	r3, 8020bbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8020b90:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8020b94:	435a      	muls	r2, r3
 8020b96:	1c53      	adds	r3, r2, #1
 8020b98:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020b9c:	4a2d      	ldr	r2, [pc, #180]	; (8020c54 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8020b9e:	121b      	asrs	r3, r3, #8
 8020ba0:	6812      	ldr	r2, [r2, #0]
 8020ba2:	2bff      	cmp	r3, #255	; 0xff
 8020ba4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020ba8:	d120      	bne.n	8020bec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8020baa:	4b2b      	ldr	r3, [pc, #172]	; (8020c58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8020bac:	0950      	lsrs	r0, r2, #5
 8020bae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020bb2:	4033      	ands	r3, r6
 8020bb4:	4318      	orrs	r0, r3
 8020bb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020bba:	4302      	orrs	r2, r0
 8020bbc:	800a      	strh	r2, [r1, #0]
 8020bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bc2:	2600      	movs	r6, #0
 8020bc4:	e788      	b.n	8020ad8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8020bc6:	2400      	movs	r4, #0
 8020bc8:	4626      	mov	r6, r4
 8020bca:	e799      	b.n	8020b00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020bcc:	2400      	movs	r4, #0
 8020bce:	e797      	b.n	8020b00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020bd0:	463c      	mov	r4, r7
 8020bd2:	e795      	b.n	8020b00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020bd4:	2500      	movs	r5, #0
 8020bd6:	e7ac      	b.n	8020b32 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8020bd8:	2300      	movs	r3, #0
 8020bda:	461d      	mov	r5, r3
 8020bdc:	e7bd      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020bde:	4663      	mov	r3, ip
 8020be0:	4665      	mov	r5, ip
 8020be2:	e7ba      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020be4:	2300      	movs	r3, #0
 8020be6:	e7b8      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020be8:	463b      	mov	r3, r7
 8020bea:	e7b6      	b.n	8020b5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020bec:	b29f      	uxth	r7, r3
 8020bee:	43db      	mvns	r3, r3
 8020bf0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8020bf4:	880d      	ldrh	r5, [r1, #0]
 8020bf6:	fb10 f007 	smulbb	r0, r0, r7
 8020bfa:	b2f6      	uxtb	r6, r6
 8020bfc:	b2d2      	uxtb	r2, r2
 8020bfe:	122c      	asrs	r4, r5, #8
 8020c00:	fb12 f207 	smulbb	r2, r2, r7
 8020c04:	fb16 f607 	smulbb	r6, r6, r7
 8020c08:	b2db      	uxtb	r3, r3
 8020c0a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020c0e:	fb04 0403 	mla	r4, r4, r3, r0
 8020c12:	10e8      	asrs	r0, r5, #3
 8020c14:	00ed      	lsls	r5, r5, #3
 8020c16:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c1a:	b2ed      	uxtb	r5, r5
 8020c1c:	fb00 6603 	mla	r6, r0, r3, r6
 8020c20:	fb05 2303 	mla	r3, r5, r3, r2
 8020c24:	b2a4      	uxth	r4, r4
 8020c26:	b29a      	uxth	r2, r3
 8020c28:	1c63      	adds	r3, r4, #1
 8020c2a:	b2b0      	uxth	r0, r6
 8020c2c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020c30:	1c53      	adds	r3, r2, #1
 8020c32:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020c36:	1c42      	adds	r2, r0, #1
 8020c38:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020c3c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020c40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020c44:	0940      	lsrs	r0, r0, #5
 8020c46:	4323      	orrs	r3, r4
 8020c48:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020c4c:	4303      	orrs	r3, r0
 8020c4e:	800b      	strh	r3, [r1, #0]
 8020c50:	e7b5      	b.n	8020bbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8020c52:	bf00      	nop
 8020c54:	2001fdac 	.word	0x2001fdac
 8020c58:	00fff800 	.word	0x00fff800

08020c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c60:	b097      	sub	sp, #92	; 0x5c
 8020c62:	9214      	str	r2, [sp, #80]	; 0x50
 8020c64:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c66:	9015      	str	r0, [sp, #84]	; 0x54
 8020c68:	9309      	str	r3, [sp, #36]	; 0x24
 8020c6a:	6850      	ldr	r0, [r2, #4]
 8020c6c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020c70:	910d      	str	r1, [sp, #52]	; 0x34
 8020c72:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c74:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020c78:	fb00 1303 	mla	r3, r0, r3, r1
 8020c7c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8020c80:	6812      	ldr	r2, [r2, #0]
 8020c82:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c88:	689b      	ldr	r3, [r3, #8]
 8020c8a:	3301      	adds	r3, #1
 8020c8c:	f023 0301 	bic.w	r3, r3, #1
 8020c90:	930a      	str	r3, [sp, #40]	; 0x28
 8020c92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c94:	681f      	ldr	r7, [r3, #0]
 8020c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	dc03      	bgt.n	8020ca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020c9e:	2b00      	cmp	r3, #0
 8020ca0:	f340 8287 	ble.w	80211b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020ca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ca6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020caa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020cae:	1e48      	subs	r0, r1, #1
 8020cb0:	f102 3cff 	add.w	ip, r2, #4294967295
 8020cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	f340 80c3 	ble.w	8020e42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020cbc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020cc0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020cc4:	d406      	bmi.n	8020cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020cc6:	4586      	cmp	lr, r0
 8020cc8:	da04      	bge.n	8020cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	db02      	blt.n	8020cd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020cce:	4563      	cmp	r3, ip
 8020cd0:	f2c0 80b8 	blt.w	8020e44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020cd4:	f11e 0e01 	adds.w	lr, lr, #1
 8020cd8:	f100 80a9 	bmi.w	8020e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020cdc:	4571      	cmp	r1, lr
 8020cde:	f2c0 80a6 	blt.w	8020e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020ce2:	3301      	adds	r3, #1
 8020ce4:	f100 80a3 	bmi.w	8020e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020ce8:	429a      	cmp	r2, r3
 8020cea:	f2c0 80a0 	blt.w	8020e2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020cee:	46c8      	mov	r8, r9
 8020cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cf2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8020cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8020cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	f340 80c2 	ble.w	8020e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020d00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d02:	1430      	asrs	r0, r6, #16
 8020d04:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020d08:	1423      	asrs	r3, r4, #16
 8020d0a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020d0e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020d12:	f100 814d 	bmi.w	8020fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d16:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020d1a:	455b      	cmp	r3, fp
 8020d1c:	f280 8148 	bge.w	8020fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d20:	2800      	cmp	r0, #0
 8020d22:	f2c0 8145 	blt.w	8020fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d26:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020d2a:	4558      	cmp	r0, fp
 8020d2c:	f280 8140 	bge.w	8020fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020d32:	fb00 3305 	mla	r3, r0, r5, r3
 8020d36:	0858      	lsrs	r0, r3, #1
 8020d38:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020d3c:	07dd      	lsls	r5, r3, #31
 8020d3e:	bf54      	ite	pl
 8020d40:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020d44:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020d48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020d4c:	fa5f fc8c 	uxtb.w	ip, ip
 8020d50:	2a00      	cmp	r2, #0
 8020d52:	f000 80db 	beq.w	8020f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d56:	1c58      	adds	r0, r3, #1
 8020d58:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020d5c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020d60:	07c0      	lsls	r0, r0, #31
 8020d62:	bf54      	ite	pl
 8020d64:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020d68:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020d6c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020d70:	fa5f f08e 	uxtb.w	r0, lr
 8020d74:	9010      	str	r0, [sp, #64]	; 0x40
 8020d76:	b1c9      	cbz	r1, 8020dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020d78:	4453      	add	r3, sl
 8020d7a:	0858      	lsrs	r0, r3, #1
 8020d7c:	5c38      	ldrb	r0, [r7, r0]
 8020d7e:	07dd      	lsls	r5, r3, #31
 8020d80:	bf54      	ite	pl
 8020d82:	f000 000f 	andpl.w	r0, r0, #15
 8020d86:	1100      	asrmi	r0, r0, #4
 8020d88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020d8c:	3301      	adds	r3, #1
 8020d8e:	b2c0      	uxtb	r0, r0
 8020d90:	900b      	str	r0, [sp, #44]	; 0x2c
 8020d92:	0858      	lsrs	r0, r3, #1
 8020d94:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020d98:	07dd      	lsls	r5, r3, #31
 8020d9a:	bf54      	ite	pl
 8020d9c:	f00e 030f 	andpl.w	r3, lr, #15
 8020da0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020da4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020da8:	b2db      	uxtb	r3, r3
 8020daa:	9311      	str	r3, [sp, #68]	; 0x44
 8020dac:	b292      	uxth	r2, r2
 8020dae:	b289      	uxth	r1, r1
 8020db0:	fb02 f301 	mul.w	r3, r2, r1
 8020db4:	0112      	lsls	r2, r2, #4
 8020db6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8020dba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020dbc:	1ad2      	subs	r2, r2, r3
 8020dbe:	b292      	uxth	r2, r2
 8020dc0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020dc4:	436a      	muls	r2, r5
 8020dc6:	b289      	uxth	r1, r1
 8020dc8:	1a40      	subs	r0, r0, r1
 8020dca:	b280      	uxth	r0, r0
 8020dcc:	fb0c 2c00 	mla	ip, ip, r0, r2
 8020dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020dd2:	fb01 c102 	mla	r1, r1, r2, ip
 8020dd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020dd8:	fb03 1302 	mla	r3, r3, r2, r1
 8020ddc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020de0:	b1db      	cbz	r3, 8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020de2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020de4:	4353      	muls	r3, r2
 8020de6:	1c5a      	adds	r2, r3, #1
 8020de8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020dec:	4ac6      	ldr	r2, [pc, #792]	; (8021108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8020dee:	121b      	asrs	r3, r3, #8
 8020df0:	6812      	ldr	r2, [r2, #0]
 8020df2:	2bff      	cmp	r3, #255	; 0xff
 8020df4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020df8:	f040 8099 	bne.w	8020f2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8020dfc:	0953      	lsrs	r3, r2, #5
 8020dfe:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020e02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e06:	f02c 0c07 	bic.w	ip, ip, #7
 8020e0a:	ea43 0c0c 	orr.w	ip, r3, ip
 8020e0e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020e12:	ea4c 0202 	orr.w	r2, ip, r2
 8020e16:	f8a8 2000 	strh.w	r2, [r8]
 8020e1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e1c:	f108 0802 	add.w	r8, r8, #2
 8020e20:	441c      	add	r4, r3
 8020e22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e24:	441e      	add	r6, r3
 8020e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e28:	3b01      	subs	r3, #1
 8020e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8020e2c:	e764      	b.n	8020cf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020e2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e30:	f109 0902 	add.w	r9, r9, #2
 8020e34:	441c      	add	r4, r3
 8020e36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e38:	441e      	add	r6, r3
 8020e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e3c:	3b01      	subs	r3, #1
 8020e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8020e40:	e738      	b.n	8020cb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020e42:	d024      	beq.n	8020e8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e46:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020e48:	3b01      	subs	r3, #1
 8020e4a:	fb00 4003 	mla	r0, r0, r3, r4
 8020e4e:	1400      	asrs	r0, r0, #16
 8020e50:	f53f af4d 	bmi.w	8020cee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e54:	3901      	subs	r1, #1
 8020e56:	4288      	cmp	r0, r1
 8020e58:	f6bf af49 	bge.w	8020cee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e5c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020e5e:	fb01 6303 	mla	r3, r1, r3, r6
 8020e62:	141b      	asrs	r3, r3, #16
 8020e64:	f53f af43 	bmi.w	8020cee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e68:	3a01      	subs	r2, #1
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	f6bf af3f 	bge.w	8020cee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e70:	46c8      	mov	r8, r9
 8020e72:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020e76:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8020e7c:	f1bb 0f00 	cmp.w	fp, #0
 8020e80:	f300 80b7 	bgt.w	8020ff2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8020e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e86:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020e8a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	f340 818e 	ble.w	80211b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ea6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020eaa:	eef0 6a62 	vmov.f32	s13, s5
 8020eae:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020eb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020eb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020eba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ebe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ec2:	ee16 4a90 	vmov	r4, s13
 8020ec6:	eef0 6a43 	vmov.f32	s13, s6
 8020eca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ece:	ee12 2a90 	vmov	r2, s5
 8020ed2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ed8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ee0:	ee13 2a10 	vmov	r2, s6
 8020ee4:	9323      	str	r3, [sp, #140]	; 0x8c
 8020ee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ee8:	ee16 6a90 	vmov	r6, s13
 8020eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ef0:	9324      	str	r3, [sp, #144]	; 0x90
 8020ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ef6:	3b01      	subs	r3, #1
 8020ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8020efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020efc:	bf08      	it	eq
 8020efe:	4613      	moveq	r3, r2
 8020f00:	eeb0 3a67 	vmov.f32	s6, s15
 8020f04:	9309      	str	r3, [sp, #36]	; 0x24
 8020f06:	eef0 2a47 	vmov.f32	s5, s14
 8020f0a:	e6c4      	b.n	8020c96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020f0c:	2900      	cmp	r1, #0
 8020f0e:	f43f af4d 	beq.w	8020dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020f12:	eb0a 0003 	add.w	r0, sl, r3
 8020f16:	0843      	lsrs	r3, r0, #1
 8020f18:	5cfb      	ldrb	r3, [r7, r3]
 8020f1a:	07c0      	lsls	r0, r0, #31
 8020f1c:	bf54      	ite	pl
 8020f1e:	f003 030f 	andpl.w	r3, r3, #15
 8020f22:	111b      	asrmi	r3, r3, #4
 8020f24:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020f28:	b2db      	uxtb	r3, r3
 8020f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f2c:	e73e      	b.n	8020dac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020f2e:	fa1f fb83 	uxth.w	fp, r3
 8020f32:	43db      	mvns	r3, r3
 8020f34:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020f38:	f8b8 e000 	ldrh.w	lr, [r8]
 8020f3c:	fb11 f10b 	smulbb	r1, r1, fp
 8020f40:	fa5f fc8c 	uxtb.w	ip, ip
 8020f44:	b2d2      	uxtb	r2, r2
 8020f46:	ea4f 202e 	mov.w	r0, lr, asr #8
 8020f4a:	fb1c fc0b 	smulbb	ip, ip, fp
 8020f4e:	fb12 fb0b 	smulbb	fp, r2, fp
 8020f52:	b2db      	uxtb	r3, r3
 8020f54:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020f58:	fb00 1003 	mla	r0, r0, r3, r1
 8020f5c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8020f60:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020f64:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020f68:	fa5f fe8e 	uxtb.w	lr, lr
 8020f6c:	fb01 cc03 	mla	ip, r1, r3, ip
 8020f70:	fb0e bb03 	mla	fp, lr, r3, fp
 8020f74:	b280      	uxth	r0, r0
 8020f76:	1c43      	adds	r3, r0, #1
 8020f78:	fa1f fc8c 	uxth.w	ip, ip
 8020f7c:	fa1f fb8b 	uxth.w	fp, fp
 8020f80:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020f84:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8020f88:	f10c 0101 	add.w	r1, ip, #1
 8020f8c:	f10b 0001 	add.w	r0, fp, #1
 8020f90:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020f94:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020f98:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020f9c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020fa0:	4318      	orrs	r0, r3
 8020fa2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020fa6:	ea40 000c 	orr.w	r0, r0, ip
 8020faa:	f8a8 0000 	strh.w	r0, [r8]
 8020fae:	e734      	b.n	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fb0:	f113 0b01 	adds.w	fp, r3, #1
 8020fb4:	f53f af31 	bmi.w	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fb8:	45dc      	cmp	ip, fp
 8020fba:	f6ff af2e 	blt.w	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fbe:	f110 0b01 	adds.w	fp, r0, #1
 8020fc2:	f53f af2a 	bmi.w	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fc6:	45de      	cmp	lr, fp
 8020fc8:	f6ff af27 	blt.w	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020fce:	9302      	str	r3, [sp, #8]
 8020fd0:	fa0f f38e 	sxth.w	r3, lr
 8020fd4:	9301      	str	r3, [sp, #4]
 8020fd6:	fa0f f38c 	sxth.w	r3, ip
 8020fda:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020fde:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8020fe2:	9300      	str	r3, [sp, #0]
 8020fe4:	463a      	mov	r2, r7
 8020fe6:	4653      	mov	r3, sl
 8020fe8:	4641      	mov	r1, r8
 8020fea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020fec:	f7ff fd4e 	bl	8020a8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8020ff0:	e713      	b.n	8020e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020ff2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020ff4:	1422      	asrs	r2, r4, #16
 8020ff6:	1433      	asrs	r3, r6, #16
 8020ff8:	fb05 2303 	mla	r3, r5, r3, r2
 8020ffc:	085a      	lsrs	r2, r3, #1
 8020ffe:	5cba      	ldrb	r2, [r7, r2]
 8021000:	07dd      	lsls	r5, r3, #31
 8021002:	bf54      	ite	pl
 8021004:	f002 020f 	andpl.w	r2, r2, #15
 8021008:	1112      	asrmi	r2, r2, #4
 802100a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802100e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021012:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021016:	b2d2      	uxtb	r2, r2
 8021018:	2900      	cmp	r1, #0
 802101a:	d077      	beq.n	802110c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802101c:	f103 0e01 	add.w	lr, r3, #1
 8021020:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021024:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021028:	f01e 0f01 	tst.w	lr, #1
 802102c:	bf0c      	ite	eq
 802102e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021032:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021036:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802103a:	fa5f f58c 	uxtb.w	r5, ip
 802103e:	9512      	str	r5, [sp, #72]	; 0x48
 8021040:	b300      	cbz	r0, 8021084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021042:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021044:	442b      	add	r3, r5
 8021046:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802104a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802104e:	07dd      	lsls	r5, r3, #31
 8021050:	bf54      	ite	pl
 8021052:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021056:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802105a:	3301      	adds	r3, #1
 802105c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021060:	fa5f f58c 	uxtb.w	r5, ip
 8021064:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021068:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802106c:	950c      	str	r5, [sp, #48]	; 0x30
 802106e:	07dd      	lsls	r5, r3, #31
 8021070:	bf54      	ite	pl
 8021072:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021076:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802107a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802107e:	fa5f f38c 	uxtb.w	r3, ip
 8021082:	9313      	str	r3, [sp, #76]	; 0x4c
 8021084:	b289      	uxth	r1, r1
 8021086:	b280      	uxth	r0, r0
 8021088:	fb01 f300 	mul.w	r3, r1, r0
 802108c:	0109      	lsls	r1, r1, #4
 802108e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021092:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021094:	1ac9      	subs	r1, r1, r3
 8021096:	b289      	uxth	r1, r1
 8021098:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802109c:	4369      	muls	r1, r5
 802109e:	b280      	uxth	r0, r0
 80210a0:	ebac 0c00 	sub.w	ip, ip, r0
 80210a4:	fa1f fc8c 	uxth.w	ip, ip
 80210a8:	fb02 120c 	mla	r2, r2, ip, r1
 80210ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80210ae:	fb00 2001 	mla	r0, r0, r1, r2
 80210b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80210b4:	fb03 0302 	mla	r3, r3, r2, r0
 80210b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80210bc:	b1d3      	cbz	r3, 80210f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80210be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210c0:	4353      	muls	r3, r2
 80210c2:	1c5a      	adds	r2, r3, #1
 80210c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210c8:	4a0f      	ldr	r2, [pc, #60]	; (8021108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80210ca:	121b      	asrs	r3, r3, #8
 80210cc:	6812      	ldr	r2, [r2, #0]
 80210ce:	2bff      	cmp	r3, #255	; 0xff
 80210d0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80210d4:	d12e      	bne.n	8021134 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80210d6:	0953      	lsrs	r3, r2, #5
 80210d8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80210dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80210e0:	f02c 0c07 	bic.w	ip, ip, #7
 80210e4:	ea43 0c0c 	orr.w	ip, r3, ip
 80210e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80210ec:	ea4c 0202 	orr.w	r2, ip, r2
 80210f0:	f8a8 2000 	strh.w	r2, [r8]
 80210f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80210f6:	f108 0802 	add.w	r8, r8, #2
 80210fa:	441c      	add	r4, r3
 80210fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021102:	441e      	add	r6, r3
 8021104:	e6ba      	b.n	8020e7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021106:	bf00      	nop
 8021108:	2001fdac 	.word	0x2001fdac
 802110c:	2800      	cmp	r0, #0
 802110e:	d0b9      	beq.n	8021084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021110:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021112:	442b      	add	r3, r5
 8021114:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021118:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802111c:	07db      	lsls	r3, r3, #31
 802111e:	bf54      	ite	pl
 8021120:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021124:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021128:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802112c:	fa5f f38c 	uxtb.w	r3, ip
 8021130:	930c      	str	r3, [sp, #48]	; 0x30
 8021132:	e7a7      	b.n	8021084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021134:	fa1f fa83 	uxth.w	sl, r3
 8021138:	43db      	mvns	r3, r3
 802113a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802113e:	f8b8 e000 	ldrh.w	lr, [r8]
 8021142:	fb11 f10a 	smulbb	r1, r1, sl
 8021146:	b2d2      	uxtb	r2, r2
 8021148:	ea4f 202e 	mov.w	r0, lr, asr #8
 802114c:	fb12 f20a 	smulbb	r2, r2, sl
 8021150:	b2db      	uxtb	r3, r3
 8021152:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021156:	fb00 1003 	mla	r0, r0, r3, r1
 802115a:	fa5f fc8c 	uxtb.w	ip, ip
 802115e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021162:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021166:	fb1c fc0a 	smulbb	ip, ip, sl
 802116a:	fa5f fe8e 	uxtb.w	lr, lr
 802116e:	fb0e 2203 	mla	r2, lr, r3, r2
 8021172:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021176:	fb01 cc03 	mla	ip, r1, r3, ip
 802117a:	b280      	uxth	r0, r0
 802117c:	b292      	uxth	r2, r2
 802117e:	1c43      	adds	r3, r0, #1
 8021180:	1c51      	adds	r1, r2, #1
 8021182:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021186:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802118a:	fa1f fc8c 	uxth.w	ip, ip
 802118e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021192:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021196:	4308      	orrs	r0, r1
 8021198:	f10c 0101 	add.w	r1, ip, #1
 802119c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80211a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80211a4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80211a8:	ea40 000c 	orr.w	r0, r0, ip
 80211ac:	f8a8 0000 	strh.w	r0, [r8]
 80211b0:	e7a0      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80211b2:	b017      	add	sp, #92	; 0x5c
 80211b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80211b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211bc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80211c0:	2d00      	cmp	r5, #0
 80211c2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80211c6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80211ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80211ce:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80211d2:	fb05 0e03 	mla	lr, r5, r3, r0
 80211d6:	f2c0 80b0 	blt.w	802133a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80211da:	45a9      	cmp	r9, r5
 80211dc:	f340 80ad 	ble.w	802133a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80211e0:	2800      	cmp	r0, #0
 80211e2:	f2c0 80a8 	blt.w	8021336 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80211e6:	4580      	cmp	r8, r0
 80211e8:	f340 80a5 	ble.w	8021336 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80211ec:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80211f0:	5d16      	ldrb	r6, [r2, r4]
 80211f2:	f01e 0f01 	tst.w	lr, #1
 80211f6:	bf0c      	ite	eq
 80211f8:	f006 060f 	andeq.w	r6, r6, #15
 80211fc:	1136      	asrne	r6, r6, #4
 80211fe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021202:	b2f6      	uxtb	r6, r6
 8021204:	1c44      	adds	r4, r0, #1
 8021206:	f100 809b 	bmi.w	8021340 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802120a:	45a0      	cmp	r8, r4
 802120c:	f340 8098 	ble.w	8021340 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021210:	2f00      	cmp	r7, #0
 8021212:	f000 8097 	beq.w	8021344 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8021216:	f10e 0a01 	add.w	sl, lr, #1
 802121a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802121e:	5d14      	ldrb	r4, [r2, r4]
 8021220:	f01a 0f01 	tst.w	sl, #1
 8021224:	bf0c      	ite	eq
 8021226:	f004 040f 	andeq.w	r4, r4, #15
 802122a:	1124      	asrne	r4, r4, #4
 802122c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021230:	b2e4      	uxtb	r4, r4
 8021232:	3501      	adds	r5, #1
 8021234:	f100 808a 	bmi.w	802134c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021238:	45a9      	cmp	r9, r5
 802123a:	f340 8087 	ble.w	802134c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802123e:	f1bc 0f00 	cmp.w	ip, #0
 8021242:	f000 8086 	beq.w	8021352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8021246:	2800      	cmp	r0, #0
 8021248:	db7e      	blt.n	8021348 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802124a:	4580      	cmp	r8, r0
 802124c:	dd7c      	ble.n	8021348 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802124e:	eb03 090e 	add.w	r9, r3, lr
 8021252:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8021256:	5d55      	ldrb	r5, [r2, r5]
 8021258:	f019 0f01 	tst.w	r9, #1
 802125c:	bf0c      	ite	eq
 802125e:	f005 050f 	andeq.w	r5, r5, #15
 8021262:	112d      	asrne	r5, r5, #4
 8021264:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021268:	b2ed      	uxtb	r5, r5
 802126a:	3001      	adds	r0, #1
 802126c:	d474      	bmi.n	8021358 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802126e:	4580      	cmp	r8, r0
 8021270:	dd72      	ble.n	8021358 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021272:	2f00      	cmp	r7, #0
 8021274:	d072      	beq.n	802135c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8021276:	3301      	adds	r3, #1
 8021278:	449e      	add	lr, r3
 802127a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802127e:	5cd0      	ldrb	r0, [r2, r3]
 8021280:	f01e 0f01 	tst.w	lr, #1
 8021284:	bf0c      	ite	eq
 8021286:	f000 000f 	andeq.w	r0, r0, #15
 802128a:	1100      	asrne	r0, r0, #4
 802128c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021290:	b2c3      	uxtb	r3, r0
 8021292:	b2ba      	uxth	r2, r7
 8021294:	fa1f fc8c 	uxth.w	ip, ip
 8021298:	fb02 f00c 	mul.w	r0, r2, ip
 802129c:	0112      	lsls	r2, r2, #4
 802129e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80212a2:	1a12      	subs	r2, r2, r0
 80212a4:	b292      	uxth	r2, r2
 80212a6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80212aa:	4362      	muls	r2, r4
 80212ac:	fa1f fc8c 	uxth.w	ip, ip
 80212b0:	eba7 070c 	sub.w	r7, r7, ip
 80212b4:	b2bf      	uxth	r7, r7
 80212b6:	fb06 2207 	mla	r2, r6, r7, r2
 80212ba:	fb0c 2505 	mla	r5, ip, r5, r2
 80212be:	fb00 5303 	mla	r3, r0, r3, r5
 80212c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80212c6:	b3a3      	cbz	r3, 8021332 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80212c8:	4a25      	ldr	r2, [pc, #148]	; (8021360 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80212ca:	880e      	ldrh	r6, [r1, #0]
 80212cc:	6815      	ldr	r5, [r2, #0]
 80212ce:	b29a      	uxth	r2, r3
 80212d0:	43db      	mvns	r3, r3
 80212d2:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80212d6:	fb10 f002 	smulbb	r0, r0, r2
 80212da:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80212de:	b2ed      	uxtb	r5, r5
 80212e0:	1234      	asrs	r4, r6, #8
 80212e2:	fb17 f702 	smulbb	r7, r7, r2
 80212e6:	fb15 f202 	smulbb	r2, r5, r2
 80212ea:	b2db      	uxtb	r3, r3
 80212ec:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80212f0:	fb04 0403 	mla	r4, r4, r3, r0
 80212f4:	10f0      	asrs	r0, r6, #3
 80212f6:	00f6      	lsls	r6, r6, #3
 80212f8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80212fc:	b2f6      	uxtb	r6, r6
 80212fe:	fb00 7003 	mla	r0, r0, r3, r7
 8021302:	fb06 2303 	mla	r3, r6, r3, r2
 8021306:	b2a4      	uxth	r4, r4
 8021308:	b29a      	uxth	r2, r3
 802130a:	1c63      	adds	r3, r4, #1
 802130c:	b280      	uxth	r0, r0
 802130e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021312:	1c53      	adds	r3, r2, #1
 8021314:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021318:	1c42      	adds	r2, r0, #1
 802131a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802131e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021322:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021326:	0940      	lsrs	r0, r0, #5
 8021328:	4323      	orrs	r3, r4
 802132a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802132e:	4303      	orrs	r3, r0
 8021330:	800b      	strh	r3, [r1, #0]
 8021332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021336:	2600      	movs	r6, #0
 8021338:	e764      	b.n	8021204 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802133a:	2400      	movs	r4, #0
 802133c:	4626      	mov	r6, r4
 802133e:	e778      	b.n	8021232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021340:	2400      	movs	r4, #0
 8021342:	e776      	b.n	8021232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021344:	463c      	mov	r4, r7
 8021346:	e774      	b.n	8021232 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021348:	2500      	movs	r5, #0
 802134a:	e78e      	b.n	802126a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802134c:	2300      	movs	r3, #0
 802134e:	461d      	mov	r5, r3
 8021350:	e79f      	b.n	8021292 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021352:	4663      	mov	r3, ip
 8021354:	4665      	mov	r5, ip
 8021356:	e79c      	b.n	8021292 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021358:	2300      	movs	r3, #0
 802135a:	e79a      	b.n	8021292 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802135c:	463b      	mov	r3, r7
 802135e:	e798      	b.n	8021292 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021360:	2001fdac 	.word	0x2001fdac

08021364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021368:	b093      	sub	sp, #76	; 0x4c
 802136a:	920c      	str	r2, [sp, #48]	; 0x30
 802136c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802136e:	9011      	str	r0, [sp, #68]	; 0x44
 8021370:	6850      	ldr	r0, [r2, #4]
 8021372:	9107      	str	r1, [sp, #28]
 8021374:	461d      	mov	r5, r3
 8021376:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802137a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802137e:	fb00 1303 	mla	r3, r0, r3, r1
 8021382:	6812      	ldr	r2, [r2, #0]
 8021384:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802138a:	689b      	ldr	r3, [r3, #8]
 802138c:	3301      	adds	r3, #1
 802138e:	f023 0301 	bic.w	r3, r3, #1
 8021392:	9306      	str	r3, [sp, #24]
 8021394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021396:	681f      	ldr	r7, [r3, #0]
 8021398:	9b07      	ldr	r3, [sp, #28]
 802139a:	2b00      	cmp	r3, #0
 802139c:	dc03      	bgt.n	80213a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802139e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	f340 8265 	ble.w	8021870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80213a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80213b0:	1e48      	subs	r0, r1, #1
 80213b2:	f102 3cff 	add.w	ip, r2, #4294967295
 80213b6:	2d00      	cmp	r5, #0
 80213b8:	f340 80b7 	ble.w	802152a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80213bc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80213c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80213c4:	d406      	bmi.n	80213d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213c6:	4586      	cmp	lr, r0
 80213c8:	da04      	bge.n	80213d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	db02      	blt.n	80213d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213ce:	4563      	cmp	r3, ip
 80213d0:	f2c0 80ac 	blt.w	802152c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80213d4:	f11e 0e01 	adds.w	lr, lr, #1
 80213d8:	f100 809f 	bmi.w	802151a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80213dc:	4571      	cmp	r1, lr
 80213de:	f2c0 809c 	blt.w	802151a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80213e2:	3301      	adds	r3, #1
 80213e4:	f100 8099 	bmi.w	802151a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80213e8:	429a      	cmp	r2, r3
 80213ea:	f2c0 8096 	blt.w	802151a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80213ee:	46c8      	mov	r8, r9
 80213f0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80213f4:	9509      	str	r5, [sp, #36]	; 0x24
 80213f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	f340 80b5 	ble.w	8021568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80213fe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021402:	9308      	str	r3, [sp, #32]
 8021404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021406:	1430      	asrs	r0, r6, #16
 8021408:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802140c:	1423      	asrs	r3, r4, #16
 802140e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021412:	f100 813e 	bmi.w	8021692 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021416:	f10c 3bff 	add.w	fp, ip, #4294967295
 802141a:	455b      	cmp	r3, fp
 802141c:	f280 8139 	bge.w	8021692 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021420:	2800      	cmp	r0, #0
 8021422:	f2c0 8136 	blt.w	8021692 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021426:	f10e 3bff 	add.w	fp, lr, #4294967295
 802142a:	4558      	cmp	r0, fp
 802142c:	f280 8131 	bge.w	8021692 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021430:	9a06      	ldr	r2, [sp, #24]
 8021432:	fb00 3302 	mla	r3, r0, r2, r3
 8021436:	0858      	lsrs	r0, r3, #1
 8021438:	f817 c000 	ldrb.w	ip, [r7, r0]
 802143c:	07da      	lsls	r2, r3, #31
 802143e:	bf54      	ite	pl
 8021440:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021444:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021448:	9a08      	ldr	r2, [sp, #32]
 802144a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802144e:	fa5f fc8c 	uxtb.w	ip, ip
 8021452:	2a00      	cmp	r2, #0
 8021454:	f000 80cb 	beq.w	80215ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021458:	1c58      	adds	r0, r3, #1
 802145a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802145e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021462:	07c0      	lsls	r0, r0, #31
 8021464:	bf54      	ite	pl
 8021466:	f00e 0e0f 	andpl.w	lr, lr, #15
 802146a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802146e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021472:	fa5f fe8e 	uxtb.w	lr, lr
 8021476:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802147a:	b1b9      	cbz	r1, 80214ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802147c:	4453      	add	r3, sl
 802147e:	0858      	lsrs	r0, r3, #1
 8021480:	5c38      	ldrb	r0, [r7, r0]
 8021482:	07da      	lsls	r2, r3, #31
 8021484:	bf54      	ite	pl
 8021486:	f000 000f 	andpl.w	r0, r0, #15
 802148a:	1100      	asrmi	r0, r0, #4
 802148c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021490:	b2c0      	uxtb	r0, r0
 8021492:	900a      	str	r0, [sp, #40]	; 0x28
 8021494:	1c58      	adds	r0, r3, #1
 8021496:	0843      	lsrs	r3, r0, #1
 8021498:	5cfb      	ldrb	r3, [r7, r3]
 802149a:	07c2      	lsls	r2, r0, #31
 802149c:	bf54      	ite	pl
 802149e:	f003 030f 	andpl.w	r3, r3, #15
 80214a2:	111b      	asrmi	r3, r3, #4
 80214a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214a8:	b2db      	uxtb	r3, r3
 80214aa:	930e      	str	r3, [sp, #56]	; 0x38
 80214ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80214b0:	b289      	uxth	r1, r1
 80214b2:	fb02 f301 	mul.w	r3, r2, r1
 80214b6:	0112      	lsls	r2, r2, #4
 80214b8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80214bc:	b289      	uxth	r1, r1
 80214be:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80214c2:	1a40      	subs	r0, r0, r1
 80214c4:	fa1f fe80 	uxth.w	lr, r0
 80214c8:	1ad2      	subs	r2, r2, r3
 80214ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80214cc:	b292      	uxth	r2, r2
 80214ce:	4342      	muls	r2, r0
 80214d0:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80214d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214d6:	fb01 c102 	mla	r1, r1, r2, ip
 80214da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214dc:	fb03 1302 	mla	r3, r3, r2, r1
 80214e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80214e4:	2bff      	cmp	r3, #255	; 0xff
 80214e6:	f040 8093 	bne.w	8021610 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80214ea:	4bbe      	ldr	r3, [pc, #760]	; (80217e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80214ec:	681a      	ldr	r2, [r3, #0]
 80214ee:	4bbe      	ldr	r3, [pc, #760]	; (80217e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80214f0:	0951      	lsrs	r1, r2, #5
 80214f2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80214f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80214fa:	430b      	orrs	r3, r1
 80214fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021500:	4313      	orrs	r3, r2
 8021502:	f8a8 3000 	strh.w	r3, [r8]
 8021506:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021508:	f108 0802 	add.w	r8, r8, #2
 802150c:	441c      	add	r4, r3
 802150e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021510:	441e      	add	r6, r3
 8021512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021514:	3b01      	subs	r3, #1
 8021516:	9309      	str	r3, [sp, #36]	; 0x24
 8021518:	e76d      	b.n	80213f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802151a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802151c:	3d01      	subs	r5, #1
 802151e:	441c      	add	r4, r3
 8021520:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021522:	f109 0902 	add.w	r9, r9, #2
 8021526:	441e      	add	r6, r3
 8021528:	e745      	b.n	80213b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802152a:	d021      	beq.n	8021570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802152c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802152e:	1e6b      	subs	r3, r5, #1
 8021530:	fb00 4003 	mla	r0, r0, r3, r4
 8021534:	1400      	asrs	r0, r0, #16
 8021536:	f53f af5a 	bmi.w	80213ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802153a:	3901      	subs	r1, #1
 802153c:	4288      	cmp	r0, r1
 802153e:	f6bf af56 	bge.w	80213ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021542:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021544:	fb01 6303 	mla	r3, r1, r3, r6
 8021548:	141b      	asrs	r3, r3, #16
 802154a:	f53f af50 	bmi.w	80213ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802154e:	3a01      	subs	r2, #1
 8021550:	4293      	cmp	r3, r2
 8021552:	f6bf af4c 	bge.w	80213ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021556:	46a8      	mov	r8, r5
 8021558:	46ce      	mov	lr, r9
 802155a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802155e:	9308      	str	r3, [sp, #32]
 8021560:	f1b8 0f00 	cmp.w	r8, #0
 8021564:	f300 80b5 	bgt.w	80216d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021568:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802156c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021570:	9b07      	ldr	r3, [sp, #28]
 8021572:	2b00      	cmp	r3, #0
 8021574:	f340 817c 	ble.w	8021870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8021578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802157c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021580:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021584:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021588:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802158c:	eef0 6a62 	vmov.f32	s13, s5
 8021590:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021594:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021598:	ee61 7a27 	vmul.f32	s15, s2, s15
 802159c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215a4:	ee16 4a90 	vmov	r4, s13
 80215a8:	eef0 6a43 	vmov.f32	s13, s6
 80215ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215b0:	ee12 2a90 	vmov	r2, s5
 80215b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215be:	fb92 f3f3 	sdiv	r3, r2, r3
 80215c2:	ee13 2a10 	vmov	r2, s6
 80215c6:	931f      	str	r3, [sp, #124]	; 0x7c
 80215c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215ca:	ee16 6a90 	vmov	r6, s13
 80215ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80215d2:	9320      	str	r3, [sp, #128]	; 0x80
 80215d4:	9b07      	ldr	r3, [sp, #28]
 80215d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215d8:	3b01      	subs	r3, #1
 80215da:	9307      	str	r3, [sp, #28]
 80215dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215de:	bf0c      	ite	eq
 80215e0:	4615      	moveq	r5, r2
 80215e2:	461d      	movne	r5, r3
 80215e4:	eeb0 3a67 	vmov.f32	s6, s15
 80215e8:	eef0 2a47 	vmov.f32	s5, s14
 80215ec:	e6d4      	b.n	8021398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80215ee:	2900      	cmp	r1, #0
 80215f0:	f43f af5c 	beq.w	80214ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80215f4:	eb0a 0003 	add.w	r0, sl, r3
 80215f8:	0843      	lsrs	r3, r0, #1
 80215fa:	5cfb      	ldrb	r3, [r7, r3]
 80215fc:	07c0      	lsls	r0, r0, #31
 80215fe:	bf54      	ite	pl
 8021600:	f003 030f 	andpl.w	r3, r3, #15
 8021604:	111b      	asrmi	r3, r3, #4
 8021606:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802160a:	b2db      	uxtb	r3, r3
 802160c:	930a      	str	r3, [sp, #40]	; 0x28
 802160e:	e74d      	b.n	80214ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021610:	2b00      	cmp	r3, #0
 8021612:	f43f af78 	beq.w	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8021616:	fa1f fe83 	uxth.w	lr, r3
 802161a:	43db      	mvns	r3, r3
 802161c:	4a71      	ldr	r2, [pc, #452]	; (80217e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802161e:	f8b8 c000 	ldrh.w	ip, [r8]
 8021622:	6810      	ldr	r0, [r2, #0]
 8021624:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021628:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802162c:	fb12 f20e 	smulbb	r2, r2, lr
 8021630:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8021634:	b2c0      	uxtb	r0, r0
 8021636:	fb1b fb0e 	smulbb	fp, fp, lr
 802163a:	fb10 fe0e 	smulbb	lr, r0, lr
 802163e:	b2db      	uxtb	r3, r3
 8021640:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021644:	fb01 2103 	mla	r1, r1, r3, r2
 8021648:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802164c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021650:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021654:	fa5f fc8c 	uxtb.w	ip, ip
 8021658:	fb02 b203 	mla	r2, r2, r3, fp
 802165c:	fb0c e303 	mla	r3, ip, r3, lr
 8021660:	b289      	uxth	r1, r1
 8021662:	1c48      	adds	r0, r1, #1
 8021664:	b292      	uxth	r2, r2
 8021666:	b29b      	uxth	r3, r3
 8021668:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802166c:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8021670:	f102 0b01 	add.w	fp, r2, #1
 8021674:	1c59      	adds	r1, r3, #1
 8021676:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802167a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802167e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021682:	0952      	lsrs	r2, r2, #5
 8021684:	4301      	orrs	r1, r0
 8021686:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802168a:	4311      	orrs	r1, r2
 802168c:	f8a8 1000 	strh.w	r1, [r8]
 8021690:	e739      	b.n	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8021692:	f113 0b01 	adds.w	fp, r3, #1
 8021696:	f53f af36 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802169a:	45dc      	cmp	ip, fp
 802169c:	f6ff af33 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216a0:	f110 0b01 	adds.w	fp, r0, #1
 80216a4:	f53f af2f 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216a8:	45de      	cmp	lr, fp
 80216aa:	f6ff af2c 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216ae:	9a08      	ldr	r2, [sp, #32]
 80216b0:	9302      	str	r3, [sp, #8]
 80216b2:	fa0f f38e 	sxth.w	r3, lr
 80216b6:	9301      	str	r3, [sp, #4]
 80216b8:	fa0f f38c 	sxth.w	r3, ip
 80216bc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80216c0:	9105      	str	r1, [sp, #20]
 80216c2:	9300      	str	r3, [sp, #0]
 80216c4:	463a      	mov	r2, r7
 80216c6:	4653      	mov	r3, sl
 80216c8:	4641      	mov	r1, r8
 80216ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 80216cc:	f7ff fd74 	bl	80211b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80216d0:	e719      	b.n	8021506 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216d2:	9906      	ldr	r1, [sp, #24]
 80216d4:	1422      	asrs	r2, r4, #16
 80216d6:	1433      	asrs	r3, r6, #16
 80216d8:	fb01 2303 	mla	r3, r1, r3, r2
 80216dc:	085a      	lsrs	r2, r3, #1
 80216de:	5cba      	ldrb	r2, [r7, r2]
 80216e0:	07d9      	lsls	r1, r3, #31
 80216e2:	bf54      	ite	pl
 80216e4:	f002 020f 	andpl.w	r2, r2, #15
 80216e8:	1112      	asrmi	r2, r2, #4
 80216ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80216ee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80216f2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80216f6:	b2d2      	uxtb	r2, r2
 80216f8:	2800      	cmp	r0, #0
 80216fa:	d062      	beq.n	80217c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80216fc:	f103 0a01 	add.w	sl, r3, #1
 8021700:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8021704:	5c79      	ldrb	r1, [r7, r1]
 8021706:	f01a 0f01 	tst.w	sl, #1
 802170a:	bf0c      	ite	eq
 802170c:	f001 010f 	andeq.w	r1, r1, #15
 8021710:	1109      	asrne	r1, r1, #4
 8021712:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021716:	b2c9      	uxtb	r1, r1
 8021718:	910f      	str	r1, [sp, #60]	; 0x3c
 802171a:	f1bc 0f00 	cmp.w	ip, #0
 802171e:	d019      	beq.n	8021754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021720:	9908      	ldr	r1, [sp, #32]
 8021722:	440b      	add	r3, r1
 8021724:	0859      	lsrs	r1, r3, #1
 8021726:	5c79      	ldrb	r1, [r7, r1]
 8021728:	f013 0f01 	tst.w	r3, #1
 802172c:	bf0c      	ite	eq
 802172e:	f001 010f 	andeq.w	r1, r1, #15
 8021732:	1109      	asrne	r1, r1, #4
 8021734:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021738:	b2c9      	uxtb	r1, r1
 802173a:	3301      	adds	r3, #1
 802173c:	910b      	str	r1, [sp, #44]	; 0x2c
 802173e:	0859      	lsrs	r1, r3, #1
 8021740:	5c79      	ldrb	r1, [r7, r1]
 8021742:	07db      	lsls	r3, r3, #31
 8021744:	bf54      	ite	pl
 8021746:	f001 010f 	andpl.w	r1, r1, #15
 802174a:	1109      	asrmi	r1, r1, #4
 802174c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021750:	b2c9      	uxtb	r1, r1
 8021752:	9110      	str	r1, [sp, #64]	; 0x40
 8021754:	b280      	uxth	r0, r0
 8021756:	fa1f fc8c 	uxth.w	ip, ip
 802175a:	fb00 f30c 	mul.w	r3, r0, ip
 802175e:	0100      	lsls	r0, r0, #4
 8021760:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8021764:	fa1f fc8c 	uxth.w	ip, ip
 8021768:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802176c:	eba1 010c 	sub.w	r1, r1, ip
 8021770:	fa1f fa81 	uxth.w	sl, r1
 8021774:	1ac0      	subs	r0, r0, r3
 8021776:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021778:	b280      	uxth	r0, r0
 802177a:	4348      	muls	r0, r1
 802177c:	fb02 020a 	mla	r2, r2, sl, r0
 8021780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021782:	fb0c 2c01 	mla	ip, ip, r1, r2
 8021786:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021788:	fb03 c302 	mla	r3, r3, r2, ip
 802178c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021790:	2bff      	cmp	r3, #255	; 0xff
 8021792:	d12b      	bne.n	80217ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8021794:	4b13      	ldr	r3, [pc, #76]	; (80217e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8021796:	681a      	ldr	r2, [r3, #0]
 8021798:	4b13      	ldr	r3, [pc, #76]	; (80217e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802179a:	0951      	lsrs	r1, r2, #5
 802179c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80217a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217a4:	430b      	orrs	r3, r1
 80217a6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80217aa:	4313      	orrs	r3, r2
 80217ac:	f8ae 3000 	strh.w	r3, [lr]
 80217b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80217b2:	f10e 0e02 	add.w	lr, lr, #2
 80217b6:	441c      	add	r4, r3
 80217b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80217be:	441e      	add	r6, r3
 80217c0:	e6ce      	b.n	8021560 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80217c2:	f1bc 0f00 	cmp.w	ip, #0
 80217c6:	d0c5      	beq.n	8021754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80217c8:	9908      	ldr	r1, [sp, #32]
 80217ca:	440b      	add	r3, r1
 80217cc:	0859      	lsrs	r1, r3, #1
 80217ce:	5c79      	ldrb	r1, [r7, r1]
 80217d0:	07db      	lsls	r3, r3, #31
 80217d2:	bf54      	ite	pl
 80217d4:	f001 010f 	andpl.w	r1, r1, #15
 80217d8:	1109      	asrmi	r1, r1, #4
 80217da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80217de:	b2c9      	uxtb	r1, r1
 80217e0:	910b      	str	r1, [sp, #44]	; 0x2c
 80217e2:	e7b7      	b.n	8021754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80217e4:	2001fdac 	.word	0x2001fdac
 80217e8:	fffff800 	.word	0xfffff800
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d0df      	beq.n	80217b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80217f0:	fa1f fa83 	uxth.w	sl, r3
 80217f4:	43db      	mvns	r3, r3
 80217f6:	4a20      	ldr	r2, [pc, #128]	; (8021878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 80217f8:	f8be c000 	ldrh.w	ip, [lr]
 80217fc:	6810      	ldr	r0, [r2, #0]
 80217fe:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021802:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021806:	fb12 f20a 	smulbb	r2, r2, sl
 802180a:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802180e:	b2c0      	uxtb	r0, r0
 8021810:	fb10 f00a 	smulbb	r0, r0, sl
 8021814:	b2db      	uxtb	r3, r3
 8021816:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802181a:	fb01 2103 	mla	r1, r1, r3, r2
 802181e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021822:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021826:	fb1b fb0a 	smulbb	fp, fp, sl
 802182a:	fa5f fc8c 	uxtb.w	ip, ip
 802182e:	fb0c 0003 	mla	r0, ip, r3, r0
 8021832:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021836:	fb02 b203 	mla	r2, r2, r3, fp
 802183a:	b289      	uxth	r1, r1
 802183c:	b280      	uxth	r0, r0
 802183e:	1c4b      	adds	r3, r1, #1
 8021840:	f100 0b01 	add.w	fp, r0, #1
 8021844:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021848:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802184c:	b292      	uxth	r2, r2
 802184e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8021852:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021856:	ea4b 0101 	orr.w	r1, fp, r1
 802185a:	f102 0b01 	add.w	fp, r2, #1
 802185e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021862:	0952      	lsrs	r2, r2, #5
 8021864:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021868:	4311      	orrs	r1, r2
 802186a:	f8ae 1000 	strh.w	r1, [lr]
 802186e:	e79f      	b.n	80217b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021870:	b013      	add	sp, #76	; 0x4c
 8021872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021876:	bf00      	nop
 8021878:	2001fdac 	.word	0x2001fdac

0802187c <CRC_Lock>:
 802187c:	b530      	push	{r4, r5, lr}
 802187e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8021882:	f24c 2540 	movw	r5, #49728	; 0xc240
 8021886:	4a1e      	ldr	r2, [pc, #120]	; (8021900 <CRC_Lock+0x84>)
 8021888:	6813      	ldr	r3, [r2, #0]
 802188a:	f023 0301 	bic.w	r3, r3, #1
 802188e:	6013      	str	r3, [r2, #0]
 8021890:	4b1c      	ldr	r3, [pc, #112]	; (8021904 <CRC_Lock+0x88>)
 8021892:	681a      	ldr	r2, [r3, #0]
 8021894:	4022      	ands	r2, r4
 8021896:	42aa      	cmp	r2, r5
 8021898:	d005      	beq.n	80218a6 <CRC_Lock+0x2a>
 802189a:	f24c 2270 	movw	r2, #49776	; 0xc270
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	4023      	ands	r3, r4
 80218a2:	4293      	cmp	r3, r2
 80218a4:	d124      	bne.n	80218f0 <CRC_Lock+0x74>
 80218a6:	4b18      	ldr	r3, [pc, #96]	; (8021908 <CRC_Lock+0x8c>)
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	bb0b      	cbnz	r3, 80218f0 <CRC_Lock+0x74>
 80218ac:	4b17      	ldr	r3, [pc, #92]	; (802190c <CRC_Lock+0x90>)
 80218ae:	681a      	ldr	r2, [r3, #0]
 80218b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80218b4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80218b8:	d00d      	beq.n	80218d6 <CRC_Lock+0x5a>
 80218ba:	f240 4483 	movw	r4, #1155	; 0x483
 80218be:	681a      	ldr	r2, [r3, #0]
 80218c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80218c4:	42a2      	cmp	r2, r4
 80218c6:	d006      	beq.n	80218d6 <CRC_Lock+0x5a>
 80218c8:	f240 4285 	movw	r2, #1157	; 0x485
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80218d2:	4293      	cmp	r3, r2
 80218d4:	d10c      	bne.n	80218f0 <CRC_Lock+0x74>
 80218d6:	2201      	movs	r2, #1
 80218d8:	4b0d      	ldr	r3, [pc, #52]	; (8021910 <CRC_Lock+0x94>)
 80218da:	601a      	str	r2, [r3, #0]
 80218dc:	681a      	ldr	r2, [r3, #0]
 80218de:	2a00      	cmp	r2, #0
 80218e0:	d1fc      	bne.n	80218dc <CRC_Lock+0x60>
 80218e2:	4b0c      	ldr	r3, [pc, #48]	; (8021914 <CRC_Lock+0x98>)
 80218e4:	6018      	str	r0, [r3, #0]
 80218e6:	6818      	ldr	r0, [r3, #0]
 80218e8:	1a43      	subs	r3, r0, r1
 80218ea:	4258      	negs	r0, r3
 80218ec:	4158      	adcs	r0, r3
 80218ee:	bd30      	pop	{r4, r5, pc}
 80218f0:	2201      	movs	r2, #1
 80218f2:	4b09      	ldr	r3, [pc, #36]	; (8021918 <CRC_Lock+0x9c>)
 80218f4:	601a      	str	r2, [r3, #0]
 80218f6:	681a      	ldr	r2, [r3, #0]
 80218f8:	2a00      	cmp	r2, #0
 80218fa:	d1fc      	bne.n	80218f6 <CRC_Lock+0x7a>
 80218fc:	4b07      	ldr	r3, [pc, #28]	; (802191c <CRC_Lock+0xa0>)
 80218fe:	e7f1      	b.n	80218e4 <CRC_Lock+0x68>
 8021900:	e0002000 	.word	0xe0002000
 8021904:	e000ed00 	.word	0xe000ed00
 8021908:	e0042000 	.word	0xe0042000
 802190c:	5c001000 	.word	0x5c001000
 8021910:	58024c08 	.word	0x58024c08
 8021914:	58024c00 	.word	0x58024c00
 8021918:	40023008 	.word	0x40023008
 802191c:	40023000 	.word	0x40023000

08021920 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021920:	6101      	str	r1, [r0, #16]
 8021922:	4770      	bx	lr

08021924 <_ZN8touchgfx8Gestures4tickEv>:
 8021924:	7b83      	ldrb	r3, [r0, #14]
 8021926:	b14b      	cbz	r3, 802193c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021928:	8903      	ldrh	r3, [r0, #8]
 802192a:	3301      	adds	r3, #1
 802192c:	b29b      	uxth	r3, r3
 802192e:	2b07      	cmp	r3, #7
 8021930:	8103      	strh	r3, [r0, #8]
 8021932:	bf81      	itttt	hi
 8021934:	2300      	movhi	r3, #0
 8021936:	8143      	strhhi	r3, [r0, #10]
 8021938:	8183      	strhhi	r3, [r0, #12]
 802193a:	7383      	strbhi	r3, [r0, #14]
 802193c:	4770      	bx	lr
	...

08021940 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021944:	4698      	mov	r8, r3
 8021946:	4604      	mov	r4, r0
 8021948:	8883      	ldrh	r3, [r0, #4]
 802194a:	460e      	mov	r6, r1
 802194c:	88c1      	ldrh	r1, [r0, #6]
 802194e:	2000      	movs	r0, #0
 8021950:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021954:	eba8 0303 	sub.w	r3, r8, r3
 8021958:	b21b      	sxth	r3, r3
 802195a:	4617      	mov	r7, r2
 802195c:	4a17      	ldr	r2, [pc, #92]	; (80219bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802195e:	2b00      	cmp	r3, #0
 8021960:	bfb8      	it	lt
 8021962:	425b      	neglt	r3, r3
 8021964:	9200      	str	r2, [sp, #0]
 8021966:	8aa2      	ldrh	r2, [r4, #20]
 8021968:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802196c:	b21b      	sxth	r3, r3
 802196e:	4293      	cmp	r3, r2
 8021970:	f88d 0004 	strb.w	r0, [sp, #4]
 8021974:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021978:	f8ad 800a 	strh.w	r8, [sp, #10]
 802197c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021980:	dc07      	bgt.n	8021992 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021982:	1a69      	subs	r1, r5, r1
 8021984:	b209      	sxth	r1, r1
 8021986:	2900      	cmp	r1, #0
 8021988:	bfb8      	it	lt
 802198a:	4249      	neglt	r1, r1
 802198c:	b209      	sxth	r1, r1
 802198e:	428a      	cmp	r2, r1
 8021990:	da10      	bge.n	80219b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021992:	6920      	ldr	r0, [r4, #16]
 8021994:	4669      	mov	r1, sp
 8021996:	6803      	ldr	r3, [r0, #0]
 8021998:	eba8 0606 	sub.w	r6, r8, r6
 802199c:	685b      	ldr	r3, [r3, #4]
 802199e:	4798      	blx	r3
 80219a0:	2300      	movs	r3, #0
 80219a2:	2001      	movs	r0, #1
 80219a4:	1bef      	subs	r7, r5, r7
 80219a6:	8123      	strh	r3, [r4, #8]
 80219a8:	8166      	strh	r6, [r4, #10]
 80219aa:	81a7      	strh	r7, [r4, #12]
 80219ac:	f8a4 8004 	strh.w	r8, [r4, #4]
 80219b0:	80e5      	strh	r5, [r4, #6]
 80219b2:	73a0      	strb	r0, [r4, #14]
 80219b4:	b004      	add	sp, #16
 80219b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219ba:	bf00      	nop
 80219bc:	08024540 	.word	0x08024540

080219c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80219c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219c2:	461e      	mov	r6, r3
 80219c4:	1e4b      	subs	r3, r1, #1
 80219c6:	2b01      	cmp	r3, #1
 80219c8:	b085      	sub	sp, #20
 80219ca:	4604      	mov	r4, r0
 80219cc:	460d      	mov	r5, r1
 80219ce:	4617      	mov	r7, r2
 80219d0:	d84b      	bhi.n	8021a6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80219d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80219d6:	1cd3      	adds	r3, r2, #3
 80219d8:	b29b      	uxth	r3, r3
 80219da:	2b06      	cmp	r3, #6
 80219dc:	d916      	bls.n	8021a0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80219de:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8021a80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80219e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80219e6:	f8cd c004 	str.w	ip, [sp, #4]
 80219ea:	f04f 0c00 	mov.w	ip, #0
 80219ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80219f2:	6900      	ldr	r0, [r0, #16]
 80219f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80219f8:	f88d c008 	strb.w	ip, [sp, #8]
 80219fc:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021a00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a04:	6803      	ldr	r3, [r0, #0]
 8021a06:	a901      	add	r1, sp, #4
 8021a08:	689b      	ldr	r3, [r3, #8]
 8021a0a:	4798      	blx	r3
 8021a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021a10:	1cd3      	adds	r3, r2, #3
 8021a12:	b29b      	uxth	r3, r3
 8021a14:	2b06      	cmp	r3, #6
 8021a16:	d916      	bls.n	8021a46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021a18:	f8df c064 	ldr.w	ip, [pc, #100]	; 8021a80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021a1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021a20:	f8cd c004 	str.w	ip, [sp, #4]
 8021a24:	f04f 0c01 	mov.w	ip, #1
 8021a28:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021a2c:	6920      	ldr	r0, [r4, #16]
 8021a2e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021a32:	f88d c008 	strb.w	ip, [sp, #8]
 8021a36:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021a3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a3e:	6803      	ldr	r3, [r0, #0]
 8021a40:	a901      	add	r1, sp, #4
 8021a42:	689b      	ldr	r3, [r3, #8]
 8021a44:	4798      	blx	r3
 8021a46:	4b0d      	ldr	r3, [pc, #52]	; (8021a7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021a48:	6920      	ldr	r0, [r4, #16]
 8021a4a:	9301      	str	r3, [sp, #4]
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	f88d 5008 	strb.w	r5, [sp, #8]
 8021a52:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021a56:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021a5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a5e:	6803      	ldr	r3, [r0, #0]
 8021a60:	a901      	add	r1, sp, #4
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	4798      	blx	r3
 8021a66:	b005      	add	sp, #20
 8021a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a6a:	2900      	cmp	r1, #0
 8021a6c:	d1eb      	bne.n	8021a46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021a6e:	80a2      	strh	r2, [r4, #4]
 8021a70:	80c6      	strh	r6, [r0, #6]
 8021a72:	60a1      	str	r1, [r4, #8]
 8021a74:	81a1      	strh	r1, [r4, #12]
 8021a76:	73a1      	strb	r1, [r4, #14]
 8021a78:	e7e5      	b.n	8021a46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021a7a:	bf00      	nop
 8021a7c:	0802452c 	.word	0x0802452c
 8021a80:	08024554 	.word	0x08024554

08021a84 <__aeabi_atexit>:
 8021a84:	460b      	mov	r3, r1
 8021a86:	4601      	mov	r1, r0
 8021a88:	4618      	mov	r0, r3
 8021a8a:	f000 b851 	b.w	8021b30 <__cxa_atexit>

08021a8e <_ZdlPvj>:
 8021a8e:	f000 b812 	b.w	8021ab6 <_ZdlPv>

08021a92 <__cxa_guard_acquire>:
 8021a92:	6803      	ldr	r3, [r0, #0]
 8021a94:	07db      	lsls	r3, r3, #31
 8021a96:	d406      	bmi.n	8021aa6 <__cxa_guard_acquire+0x14>
 8021a98:	7843      	ldrb	r3, [r0, #1]
 8021a9a:	b103      	cbz	r3, 8021a9e <__cxa_guard_acquire+0xc>
 8021a9c:	deff      	udf	#255	; 0xff
 8021a9e:	2301      	movs	r3, #1
 8021aa0:	7043      	strb	r3, [r0, #1]
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	4770      	bx	lr
 8021aa6:	2000      	movs	r0, #0
 8021aa8:	4770      	bx	lr

08021aaa <__cxa_guard_release>:
 8021aaa:	2301      	movs	r3, #1
 8021aac:	6003      	str	r3, [r0, #0]
 8021aae:	4770      	bx	lr

08021ab0 <__cxa_pure_virtual>:
 8021ab0:	b508      	push	{r3, lr}
 8021ab2:	f000 f80d 	bl	8021ad0 <_ZSt9terminatev>

08021ab6 <_ZdlPv>:
 8021ab6:	f000 b987 	b.w	8021dc8 <free>

08021aba <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021aba:	b508      	push	{r3, lr}
 8021abc:	4780      	blx	r0
 8021abe:	f000 f80c 	bl	8021ada <abort>
	...

08021ac4 <_ZSt13get_terminatev>:
 8021ac4:	4b01      	ldr	r3, [pc, #4]	; (8021acc <_ZSt13get_terminatev+0x8>)
 8021ac6:	e8d3 0faf 	lda	r0, [r3]
 8021aca:	4770      	bx	lr
 8021acc:	20000090 	.word	0x20000090

08021ad0 <_ZSt9terminatev>:
 8021ad0:	b508      	push	{r3, lr}
 8021ad2:	f7ff fff7 	bl	8021ac4 <_ZSt13get_terminatev>
 8021ad6:	f7ff fff0 	bl	8021aba <_ZN10__cxxabiv111__terminateEPFvvE>

08021ada <abort>:
 8021ada:	2006      	movs	r0, #6
 8021adc:	b508      	push	{r3, lr}
 8021ade:	f000 fe03 	bl	80226e8 <raise>
 8021ae2:	2001      	movs	r0, #1
 8021ae4:	f7e0 f8a6 	bl	8001c34 <_exit>

08021ae8 <__assert_func>:
 8021ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021aea:	4614      	mov	r4, r2
 8021aec:	461a      	mov	r2, r3
 8021aee:	4b09      	ldr	r3, [pc, #36]	; (8021b14 <__assert_func+0x2c>)
 8021af0:	4605      	mov	r5, r0
 8021af2:	681b      	ldr	r3, [r3, #0]
 8021af4:	68d8      	ldr	r0, [r3, #12]
 8021af6:	b14c      	cbz	r4, 8021b0c <__assert_func+0x24>
 8021af8:	4b07      	ldr	r3, [pc, #28]	; (8021b18 <__assert_func+0x30>)
 8021afa:	9100      	str	r1, [sp, #0]
 8021afc:	4907      	ldr	r1, [pc, #28]	; (8021b1c <__assert_func+0x34>)
 8021afe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021b02:	462b      	mov	r3, r5
 8021b04:	f000 f8fe 	bl	8021d04 <fiprintf>
 8021b08:	f7ff ffe7 	bl	8021ada <abort>
 8021b0c:	4b04      	ldr	r3, [pc, #16]	; (8021b20 <__assert_func+0x38>)
 8021b0e:	461c      	mov	r4, r3
 8021b10:	e7f3      	b.n	8021afa <__assert_func+0x12>
 8021b12:	bf00      	nop
 8021b14:	20000094 	.word	0x20000094
 8021b18:	0802481c 	.word	0x0802481c
 8021b1c:	08024829 	.word	0x08024829
 8021b20:	08024857 	.word	0x08024857

08021b24 <atexit>:
 8021b24:	2300      	movs	r3, #0
 8021b26:	4601      	mov	r1, r0
 8021b28:	461a      	mov	r2, r3
 8021b2a:	4618      	mov	r0, r3
 8021b2c:	f000 bf0e 	b.w	802294c <__register_exitproc>

08021b30 <__cxa_atexit>:
 8021b30:	b510      	push	{r4, lr}
 8021b32:	4c05      	ldr	r4, [pc, #20]	; (8021b48 <__cxa_atexit+0x18>)
 8021b34:	4613      	mov	r3, r2
 8021b36:	b12c      	cbz	r4, 8021b44 <__cxa_atexit+0x14>
 8021b38:	460a      	mov	r2, r1
 8021b3a:	4601      	mov	r1, r0
 8021b3c:	2002      	movs	r0, #2
 8021b3e:	f000 ff05 	bl	802294c <__register_exitproc>
 8021b42:	bd10      	pop	{r4, pc}
 8021b44:	4620      	mov	r0, r4
 8021b46:	e7fc      	b.n	8021b42 <__cxa_atexit+0x12>
 8021b48:	0802294d 	.word	0x0802294d

08021b4c <__errno>:
 8021b4c:	4b01      	ldr	r3, [pc, #4]	; (8021b54 <__errno+0x8>)
 8021b4e:	6818      	ldr	r0, [r3, #0]
 8021b50:	4770      	bx	lr
 8021b52:	bf00      	nop
 8021b54:	20000094 	.word	0x20000094

08021b58 <std>:
 8021b58:	2300      	movs	r3, #0
 8021b5a:	b510      	push	{r4, lr}
 8021b5c:	4604      	mov	r4, r0
 8021b5e:	6083      	str	r3, [r0, #8]
 8021b60:	8181      	strh	r1, [r0, #12]
 8021b62:	4619      	mov	r1, r3
 8021b64:	6643      	str	r3, [r0, #100]	; 0x64
 8021b66:	81c2      	strh	r2, [r0, #14]
 8021b68:	2208      	movs	r2, #8
 8021b6a:	6183      	str	r3, [r0, #24]
 8021b6c:	e9c0 3300 	strd	r3, r3, [r0]
 8021b70:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021b74:	305c      	adds	r0, #92	; 0x5c
 8021b76:	f000 f93c 	bl	8021df2 <memset>
 8021b7a:	4b05      	ldr	r3, [pc, #20]	; (8021b90 <std+0x38>)
 8021b7c:	6224      	str	r4, [r4, #32]
 8021b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8021b80:	4b04      	ldr	r3, [pc, #16]	; (8021b94 <std+0x3c>)
 8021b82:	62a3      	str	r3, [r4, #40]	; 0x28
 8021b84:	4b04      	ldr	r3, [pc, #16]	; (8021b98 <std+0x40>)
 8021b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021b88:	4b04      	ldr	r3, [pc, #16]	; (8021b9c <std+0x44>)
 8021b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8021b8c:	bd10      	pop	{r4, pc}
 8021b8e:	bf00      	nop
 8021b90:	08022721 	.word	0x08022721
 8021b94:	08022743 	.word	0x08022743
 8021b98:	0802277b 	.word	0x0802277b
 8021b9c:	0802279f 	.word	0x0802279f

08021ba0 <_cleanup_r>:
 8021ba0:	4901      	ldr	r1, [pc, #4]	; (8021ba8 <_cleanup_r+0x8>)
 8021ba2:	f000 b8c1 	b.w	8021d28 <_fwalk_reent>
 8021ba6:	bf00      	nop
 8021ba8:	08022b3d 	.word	0x08022b3d

08021bac <__sfmoreglue>:
 8021bac:	b570      	push	{r4, r5, r6, lr}
 8021bae:	2268      	movs	r2, #104	; 0x68
 8021bb0:	1e4d      	subs	r5, r1, #1
 8021bb2:	460e      	mov	r6, r1
 8021bb4:	4355      	muls	r5, r2
 8021bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021bba:	f000 f98f 	bl	8021edc <_malloc_r>
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	b140      	cbz	r0, 8021bd4 <__sfmoreglue+0x28>
 8021bc2:	2100      	movs	r1, #0
 8021bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8021bcc:	300c      	adds	r0, #12
 8021bce:	60a0      	str	r0, [r4, #8]
 8021bd0:	f000 f90f 	bl	8021df2 <memset>
 8021bd4:	4620      	mov	r0, r4
 8021bd6:	bd70      	pop	{r4, r5, r6, pc}

08021bd8 <__sfp_lock_acquire>:
 8021bd8:	4801      	ldr	r0, [pc, #4]	; (8021be0 <__sfp_lock_acquire+0x8>)
 8021bda:	f000 b8ea 	b.w	8021db2 <__retarget_lock_acquire_recursive>
 8021bde:	bf00      	nop
 8021be0:	2001fea2 	.word	0x2001fea2

08021be4 <__sfp_lock_release>:
 8021be4:	4801      	ldr	r0, [pc, #4]	; (8021bec <__sfp_lock_release+0x8>)
 8021be6:	f000 b8e6 	b.w	8021db6 <__retarget_lock_release_recursive>
 8021bea:	bf00      	nop
 8021bec:	2001fea2 	.word	0x2001fea2

08021bf0 <__sinit_lock_acquire>:
 8021bf0:	4801      	ldr	r0, [pc, #4]	; (8021bf8 <__sinit_lock_acquire+0x8>)
 8021bf2:	f000 b8de 	b.w	8021db2 <__retarget_lock_acquire_recursive>
 8021bf6:	bf00      	nop
 8021bf8:	2001fea3 	.word	0x2001fea3

08021bfc <__sinit_lock_release>:
 8021bfc:	4801      	ldr	r0, [pc, #4]	; (8021c04 <__sinit_lock_release+0x8>)
 8021bfe:	f000 b8da 	b.w	8021db6 <__retarget_lock_release_recursive>
 8021c02:	bf00      	nop
 8021c04:	2001fea3 	.word	0x2001fea3

08021c08 <__sinit>:
 8021c08:	b510      	push	{r4, lr}
 8021c0a:	4604      	mov	r4, r0
 8021c0c:	f7ff fff0 	bl	8021bf0 <__sinit_lock_acquire>
 8021c10:	69a3      	ldr	r3, [r4, #24]
 8021c12:	b11b      	cbz	r3, 8021c1c <__sinit+0x14>
 8021c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c18:	f7ff bff0 	b.w	8021bfc <__sinit_lock_release>
 8021c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021c20:	6523      	str	r3, [r4, #80]	; 0x50
 8021c22:	4620      	mov	r0, r4
 8021c24:	4b12      	ldr	r3, [pc, #72]	; (8021c70 <__sinit+0x68>)
 8021c26:	4a13      	ldr	r2, [pc, #76]	; (8021c74 <__sinit+0x6c>)
 8021c28:	681b      	ldr	r3, [r3, #0]
 8021c2a:	62a2      	str	r2, [r4, #40]	; 0x28
 8021c2c:	42a3      	cmp	r3, r4
 8021c2e:	bf04      	itt	eq
 8021c30:	2301      	moveq	r3, #1
 8021c32:	61a3      	streq	r3, [r4, #24]
 8021c34:	f000 f820 	bl	8021c78 <__sfp>
 8021c38:	6060      	str	r0, [r4, #4]
 8021c3a:	4620      	mov	r0, r4
 8021c3c:	f000 f81c 	bl	8021c78 <__sfp>
 8021c40:	60a0      	str	r0, [r4, #8]
 8021c42:	4620      	mov	r0, r4
 8021c44:	f000 f818 	bl	8021c78 <__sfp>
 8021c48:	2200      	movs	r2, #0
 8021c4a:	2104      	movs	r1, #4
 8021c4c:	60e0      	str	r0, [r4, #12]
 8021c4e:	6860      	ldr	r0, [r4, #4]
 8021c50:	f7ff ff82 	bl	8021b58 <std>
 8021c54:	2201      	movs	r2, #1
 8021c56:	2109      	movs	r1, #9
 8021c58:	68a0      	ldr	r0, [r4, #8]
 8021c5a:	f7ff ff7d 	bl	8021b58 <std>
 8021c5e:	2202      	movs	r2, #2
 8021c60:	2112      	movs	r1, #18
 8021c62:	68e0      	ldr	r0, [r4, #12]
 8021c64:	f7ff ff78 	bl	8021b58 <std>
 8021c68:	2301      	movs	r3, #1
 8021c6a:	61a3      	str	r3, [r4, #24]
 8021c6c:	e7d2      	b.n	8021c14 <__sinit+0xc>
 8021c6e:	bf00      	nop
 8021c70:	080248b8 	.word	0x080248b8
 8021c74:	08021ba1 	.word	0x08021ba1

08021c78 <__sfp>:
 8021c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c7a:	4607      	mov	r7, r0
 8021c7c:	f7ff ffac 	bl	8021bd8 <__sfp_lock_acquire>
 8021c80:	4b1e      	ldr	r3, [pc, #120]	; (8021cfc <__sfp+0x84>)
 8021c82:	681e      	ldr	r6, [r3, #0]
 8021c84:	69b3      	ldr	r3, [r6, #24]
 8021c86:	b913      	cbnz	r3, 8021c8e <__sfp+0x16>
 8021c88:	4630      	mov	r0, r6
 8021c8a:	f7ff ffbd 	bl	8021c08 <__sinit>
 8021c8e:	3648      	adds	r6, #72	; 0x48
 8021c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021c94:	3b01      	subs	r3, #1
 8021c96:	d503      	bpl.n	8021ca0 <__sfp+0x28>
 8021c98:	6833      	ldr	r3, [r6, #0]
 8021c9a:	b30b      	cbz	r3, 8021ce0 <__sfp+0x68>
 8021c9c:	6836      	ldr	r6, [r6, #0]
 8021c9e:	e7f7      	b.n	8021c90 <__sfp+0x18>
 8021ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021ca4:	b9d5      	cbnz	r5, 8021cdc <__sfp+0x64>
 8021ca6:	4b16      	ldr	r3, [pc, #88]	; (8021d00 <__sfp+0x88>)
 8021ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021cac:	6665      	str	r5, [r4, #100]	; 0x64
 8021cae:	60e3      	str	r3, [r4, #12]
 8021cb0:	f000 f87e 	bl	8021db0 <__retarget_lock_init_recursive>
 8021cb4:	f7ff ff96 	bl	8021be4 <__sfp_lock_release>
 8021cb8:	2208      	movs	r2, #8
 8021cba:	4629      	mov	r1, r5
 8021cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021cc0:	6025      	str	r5, [r4, #0]
 8021cc2:	61a5      	str	r5, [r4, #24]
 8021cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021ccc:	f000 f891 	bl	8021df2 <memset>
 8021cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021cd8:	4620      	mov	r0, r4
 8021cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021cdc:	3468      	adds	r4, #104	; 0x68
 8021cde:	e7d9      	b.n	8021c94 <__sfp+0x1c>
 8021ce0:	2104      	movs	r1, #4
 8021ce2:	4638      	mov	r0, r7
 8021ce4:	f7ff ff62 	bl	8021bac <__sfmoreglue>
 8021ce8:	4604      	mov	r4, r0
 8021cea:	6030      	str	r0, [r6, #0]
 8021cec:	2800      	cmp	r0, #0
 8021cee:	d1d5      	bne.n	8021c9c <__sfp+0x24>
 8021cf0:	f7ff ff78 	bl	8021be4 <__sfp_lock_release>
 8021cf4:	230c      	movs	r3, #12
 8021cf6:	603b      	str	r3, [r7, #0]
 8021cf8:	e7ee      	b.n	8021cd8 <__sfp+0x60>
 8021cfa:	bf00      	nop
 8021cfc:	080248b8 	.word	0x080248b8
 8021d00:	ffff0001 	.word	0xffff0001

08021d04 <fiprintf>:
 8021d04:	b40e      	push	{r1, r2, r3}
 8021d06:	b503      	push	{r0, r1, lr}
 8021d08:	ab03      	add	r3, sp, #12
 8021d0a:	4601      	mov	r1, r0
 8021d0c:	4805      	ldr	r0, [pc, #20]	; (8021d24 <fiprintf+0x20>)
 8021d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d12:	6800      	ldr	r0, [r0, #0]
 8021d14:	9301      	str	r3, [sp, #4]
 8021d16:	f000 f97f 	bl	8022018 <_vfiprintf_r>
 8021d1a:	b002      	add	sp, #8
 8021d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021d20:	b003      	add	sp, #12
 8021d22:	4770      	bx	lr
 8021d24:	20000094 	.word	0x20000094

08021d28 <_fwalk_reent>:
 8021d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d2c:	4606      	mov	r6, r0
 8021d2e:	4688      	mov	r8, r1
 8021d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021d34:	2700      	movs	r7, #0
 8021d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8021d3e:	d505      	bpl.n	8021d4c <_fwalk_reent+0x24>
 8021d40:	6824      	ldr	r4, [r4, #0]
 8021d42:	2c00      	cmp	r4, #0
 8021d44:	d1f7      	bne.n	8021d36 <_fwalk_reent+0xe>
 8021d46:	4638      	mov	r0, r7
 8021d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d4c:	89ab      	ldrh	r3, [r5, #12]
 8021d4e:	2b01      	cmp	r3, #1
 8021d50:	d907      	bls.n	8021d62 <_fwalk_reent+0x3a>
 8021d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021d56:	3301      	adds	r3, #1
 8021d58:	d003      	beq.n	8021d62 <_fwalk_reent+0x3a>
 8021d5a:	4629      	mov	r1, r5
 8021d5c:	4630      	mov	r0, r6
 8021d5e:	47c0      	blx	r8
 8021d60:	4307      	orrs	r7, r0
 8021d62:	3568      	adds	r5, #104	; 0x68
 8021d64:	e7e9      	b.n	8021d3a <_fwalk_reent+0x12>
	...

08021d68 <__libc_init_array>:
 8021d68:	b570      	push	{r4, r5, r6, lr}
 8021d6a:	4d0d      	ldr	r5, [pc, #52]	; (8021da0 <__libc_init_array+0x38>)
 8021d6c:	2600      	movs	r6, #0
 8021d6e:	4c0d      	ldr	r4, [pc, #52]	; (8021da4 <__libc_init_array+0x3c>)
 8021d70:	1b64      	subs	r4, r4, r5
 8021d72:	10a4      	asrs	r4, r4, #2
 8021d74:	42a6      	cmp	r6, r4
 8021d76:	d109      	bne.n	8021d8c <__libc_init_array+0x24>
 8021d78:	4d0b      	ldr	r5, [pc, #44]	; (8021da8 <__libc_init_array+0x40>)
 8021d7a:	2600      	movs	r6, #0
 8021d7c:	4c0b      	ldr	r4, [pc, #44]	; (8021dac <__libc_init_array+0x44>)
 8021d7e:	f000 ffdf 	bl	8022d40 <_init>
 8021d82:	1b64      	subs	r4, r4, r5
 8021d84:	10a4      	asrs	r4, r4, #2
 8021d86:	42a6      	cmp	r6, r4
 8021d88:	d105      	bne.n	8021d96 <__libc_init_array+0x2e>
 8021d8a:	bd70      	pop	{r4, r5, r6, pc}
 8021d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d90:	3601      	adds	r6, #1
 8021d92:	4798      	blx	r3
 8021d94:	e7ee      	b.n	8021d74 <__libc_init_array+0xc>
 8021d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d9a:	3601      	adds	r6, #1
 8021d9c:	4798      	blx	r3
 8021d9e:	e7f2      	b.n	8021d86 <__libc_init_array+0x1e>
 8021da0:	0803c414 	.word	0x0803c414
 8021da4:	0803c414 	.word	0x0803c414
 8021da8:	0803c414 	.word	0x0803c414
 8021dac:	0803c428 	.word	0x0803c428

08021db0 <__retarget_lock_init_recursive>:
 8021db0:	4770      	bx	lr

08021db2 <__retarget_lock_acquire_recursive>:
 8021db2:	4770      	bx	lr

08021db4 <__retarget_lock_release>:
 8021db4:	4770      	bx	lr

08021db6 <__retarget_lock_release_recursive>:
 8021db6:	4770      	bx	lr

08021db8 <malloc>:
 8021db8:	4b02      	ldr	r3, [pc, #8]	; (8021dc4 <malloc+0xc>)
 8021dba:	4601      	mov	r1, r0
 8021dbc:	6818      	ldr	r0, [r3, #0]
 8021dbe:	f000 b88d 	b.w	8021edc <_malloc_r>
 8021dc2:	bf00      	nop
 8021dc4:	20000094 	.word	0x20000094

08021dc8 <free>:
 8021dc8:	4b02      	ldr	r3, [pc, #8]	; (8021dd4 <free+0xc>)
 8021dca:	4601      	mov	r1, r0
 8021dcc:	6818      	ldr	r0, [r3, #0]
 8021dce:	f000 b819 	b.w	8021e04 <_free_r>
 8021dd2:	bf00      	nop
 8021dd4:	20000094 	.word	0x20000094

08021dd8 <memcpy>:
 8021dd8:	440a      	add	r2, r1
 8021dda:	1e43      	subs	r3, r0, #1
 8021ddc:	4291      	cmp	r1, r2
 8021dde:	d100      	bne.n	8021de2 <memcpy+0xa>
 8021de0:	4770      	bx	lr
 8021de2:	b510      	push	{r4, lr}
 8021de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021de8:	4291      	cmp	r1, r2
 8021dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021dee:	d1f9      	bne.n	8021de4 <memcpy+0xc>
 8021df0:	bd10      	pop	{r4, pc}

08021df2 <memset>:
 8021df2:	4402      	add	r2, r0
 8021df4:	4603      	mov	r3, r0
 8021df6:	4293      	cmp	r3, r2
 8021df8:	d100      	bne.n	8021dfc <memset+0xa>
 8021dfa:	4770      	bx	lr
 8021dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8021e00:	e7f9      	b.n	8021df6 <memset+0x4>
	...

08021e04 <_free_r>:
 8021e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e06:	2900      	cmp	r1, #0
 8021e08:	d043      	beq.n	8021e92 <_free_r+0x8e>
 8021e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e0e:	1f0c      	subs	r4, r1, #4
 8021e10:	9001      	str	r0, [sp, #4]
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	bfb8      	it	lt
 8021e16:	18e4      	addlt	r4, r4, r3
 8021e18:	f000 ff52 	bl	8022cc0 <__malloc_lock>
 8021e1c:	4a1e      	ldr	r2, [pc, #120]	; (8021e98 <_free_r+0x94>)
 8021e1e:	9801      	ldr	r0, [sp, #4]
 8021e20:	6813      	ldr	r3, [r2, #0]
 8021e22:	b933      	cbnz	r3, 8021e32 <_free_r+0x2e>
 8021e24:	6063      	str	r3, [r4, #4]
 8021e26:	6014      	str	r4, [r2, #0]
 8021e28:	b003      	add	sp, #12
 8021e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e2e:	f000 bf4d 	b.w	8022ccc <__malloc_unlock>
 8021e32:	42a3      	cmp	r3, r4
 8021e34:	d908      	bls.n	8021e48 <_free_r+0x44>
 8021e36:	6825      	ldr	r5, [r4, #0]
 8021e38:	1961      	adds	r1, r4, r5
 8021e3a:	428b      	cmp	r3, r1
 8021e3c:	bf01      	itttt	eq
 8021e3e:	6819      	ldreq	r1, [r3, #0]
 8021e40:	685b      	ldreq	r3, [r3, #4]
 8021e42:	1949      	addeq	r1, r1, r5
 8021e44:	6021      	streq	r1, [r4, #0]
 8021e46:	e7ed      	b.n	8021e24 <_free_r+0x20>
 8021e48:	461a      	mov	r2, r3
 8021e4a:	685b      	ldr	r3, [r3, #4]
 8021e4c:	b10b      	cbz	r3, 8021e52 <_free_r+0x4e>
 8021e4e:	42a3      	cmp	r3, r4
 8021e50:	d9fa      	bls.n	8021e48 <_free_r+0x44>
 8021e52:	6811      	ldr	r1, [r2, #0]
 8021e54:	1855      	adds	r5, r2, r1
 8021e56:	42a5      	cmp	r5, r4
 8021e58:	d10b      	bne.n	8021e72 <_free_r+0x6e>
 8021e5a:	6824      	ldr	r4, [r4, #0]
 8021e5c:	4421      	add	r1, r4
 8021e5e:	1854      	adds	r4, r2, r1
 8021e60:	6011      	str	r1, [r2, #0]
 8021e62:	42a3      	cmp	r3, r4
 8021e64:	d1e0      	bne.n	8021e28 <_free_r+0x24>
 8021e66:	681c      	ldr	r4, [r3, #0]
 8021e68:	685b      	ldr	r3, [r3, #4]
 8021e6a:	4421      	add	r1, r4
 8021e6c:	6053      	str	r3, [r2, #4]
 8021e6e:	6011      	str	r1, [r2, #0]
 8021e70:	e7da      	b.n	8021e28 <_free_r+0x24>
 8021e72:	d902      	bls.n	8021e7a <_free_r+0x76>
 8021e74:	230c      	movs	r3, #12
 8021e76:	6003      	str	r3, [r0, #0]
 8021e78:	e7d6      	b.n	8021e28 <_free_r+0x24>
 8021e7a:	6825      	ldr	r5, [r4, #0]
 8021e7c:	1961      	adds	r1, r4, r5
 8021e7e:	428b      	cmp	r3, r1
 8021e80:	bf02      	ittt	eq
 8021e82:	6819      	ldreq	r1, [r3, #0]
 8021e84:	685b      	ldreq	r3, [r3, #4]
 8021e86:	1949      	addeq	r1, r1, r5
 8021e88:	6063      	str	r3, [r4, #4]
 8021e8a:	bf08      	it	eq
 8021e8c:	6021      	streq	r1, [r4, #0]
 8021e8e:	6054      	str	r4, [r2, #4]
 8021e90:	e7ca      	b.n	8021e28 <_free_r+0x24>
 8021e92:	b003      	add	sp, #12
 8021e94:	bd30      	pop	{r4, r5, pc}
 8021e96:	bf00      	nop
 8021e98:	2001fea4 	.word	0x2001fea4

08021e9c <sbrk_aligned>:
 8021e9c:	b570      	push	{r4, r5, r6, lr}
 8021e9e:	4e0e      	ldr	r6, [pc, #56]	; (8021ed8 <sbrk_aligned+0x3c>)
 8021ea0:	460c      	mov	r4, r1
 8021ea2:	4605      	mov	r5, r0
 8021ea4:	6831      	ldr	r1, [r6, #0]
 8021ea6:	b911      	cbnz	r1, 8021eae <sbrk_aligned+0x12>
 8021ea8:	f000 fbe6 	bl	8022678 <_sbrk_r>
 8021eac:	6030      	str	r0, [r6, #0]
 8021eae:	4621      	mov	r1, r4
 8021eb0:	4628      	mov	r0, r5
 8021eb2:	f000 fbe1 	bl	8022678 <_sbrk_r>
 8021eb6:	1c43      	adds	r3, r0, #1
 8021eb8:	d00a      	beq.n	8021ed0 <sbrk_aligned+0x34>
 8021eba:	1cc4      	adds	r4, r0, #3
 8021ebc:	f024 0403 	bic.w	r4, r4, #3
 8021ec0:	42a0      	cmp	r0, r4
 8021ec2:	d007      	beq.n	8021ed4 <sbrk_aligned+0x38>
 8021ec4:	1a21      	subs	r1, r4, r0
 8021ec6:	4628      	mov	r0, r5
 8021ec8:	f000 fbd6 	bl	8022678 <_sbrk_r>
 8021ecc:	3001      	adds	r0, #1
 8021ece:	d101      	bne.n	8021ed4 <sbrk_aligned+0x38>
 8021ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8021ed4:	4620      	mov	r0, r4
 8021ed6:	bd70      	pop	{r4, r5, r6, pc}
 8021ed8:	2001fea8 	.word	0x2001fea8

08021edc <_malloc_r>:
 8021edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ee0:	1ccd      	adds	r5, r1, #3
 8021ee2:	4607      	mov	r7, r0
 8021ee4:	f025 0503 	bic.w	r5, r5, #3
 8021ee8:	3508      	adds	r5, #8
 8021eea:	2d0c      	cmp	r5, #12
 8021eec:	bf38      	it	cc
 8021eee:	250c      	movcc	r5, #12
 8021ef0:	2d00      	cmp	r5, #0
 8021ef2:	db01      	blt.n	8021ef8 <_malloc_r+0x1c>
 8021ef4:	42a9      	cmp	r1, r5
 8021ef6:	d905      	bls.n	8021f04 <_malloc_r+0x28>
 8021ef8:	230c      	movs	r3, #12
 8021efa:	2600      	movs	r6, #0
 8021efc:	603b      	str	r3, [r7, #0]
 8021efe:	4630      	mov	r0, r6
 8021f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f04:	4e2e      	ldr	r6, [pc, #184]	; (8021fc0 <_malloc_r+0xe4>)
 8021f06:	f000 fedb 	bl	8022cc0 <__malloc_lock>
 8021f0a:	6833      	ldr	r3, [r6, #0]
 8021f0c:	461c      	mov	r4, r3
 8021f0e:	bb34      	cbnz	r4, 8021f5e <_malloc_r+0x82>
 8021f10:	4629      	mov	r1, r5
 8021f12:	4638      	mov	r0, r7
 8021f14:	f7ff ffc2 	bl	8021e9c <sbrk_aligned>
 8021f18:	1c43      	adds	r3, r0, #1
 8021f1a:	4604      	mov	r4, r0
 8021f1c:	d14d      	bne.n	8021fba <_malloc_r+0xde>
 8021f1e:	6834      	ldr	r4, [r6, #0]
 8021f20:	4626      	mov	r6, r4
 8021f22:	2e00      	cmp	r6, #0
 8021f24:	d140      	bne.n	8021fa8 <_malloc_r+0xcc>
 8021f26:	6823      	ldr	r3, [r4, #0]
 8021f28:	4631      	mov	r1, r6
 8021f2a:	4638      	mov	r0, r7
 8021f2c:	eb04 0803 	add.w	r8, r4, r3
 8021f30:	f000 fba2 	bl	8022678 <_sbrk_r>
 8021f34:	4580      	cmp	r8, r0
 8021f36:	d13a      	bne.n	8021fae <_malloc_r+0xd2>
 8021f38:	6821      	ldr	r1, [r4, #0]
 8021f3a:	3503      	adds	r5, #3
 8021f3c:	4638      	mov	r0, r7
 8021f3e:	1a6d      	subs	r5, r5, r1
 8021f40:	f025 0503 	bic.w	r5, r5, #3
 8021f44:	3508      	adds	r5, #8
 8021f46:	2d0c      	cmp	r5, #12
 8021f48:	bf38      	it	cc
 8021f4a:	250c      	movcc	r5, #12
 8021f4c:	4629      	mov	r1, r5
 8021f4e:	f7ff ffa5 	bl	8021e9c <sbrk_aligned>
 8021f52:	3001      	adds	r0, #1
 8021f54:	d02b      	beq.n	8021fae <_malloc_r+0xd2>
 8021f56:	6823      	ldr	r3, [r4, #0]
 8021f58:	442b      	add	r3, r5
 8021f5a:	6023      	str	r3, [r4, #0]
 8021f5c:	e00e      	b.n	8021f7c <_malloc_r+0xa0>
 8021f5e:	6822      	ldr	r2, [r4, #0]
 8021f60:	1b52      	subs	r2, r2, r5
 8021f62:	d41e      	bmi.n	8021fa2 <_malloc_r+0xc6>
 8021f64:	2a0b      	cmp	r2, #11
 8021f66:	d916      	bls.n	8021f96 <_malloc_r+0xba>
 8021f68:	1961      	adds	r1, r4, r5
 8021f6a:	42a3      	cmp	r3, r4
 8021f6c:	6025      	str	r5, [r4, #0]
 8021f6e:	bf18      	it	ne
 8021f70:	6059      	strne	r1, [r3, #4]
 8021f72:	6863      	ldr	r3, [r4, #4]
 8021f74:	bf08      	it	eq
 8021f76:	6031      	streq	r1, [r6, #0]
 8021f78:	5162      	str	r2, [r4, r5]
 8021f7a:	604b      	str	r3, [r1, #4]
 8021f7c:	f104 060b 	add.w	r6, r4, #11
 8021f80:	4638      	mov	r0, r7
 8021f82:	f000 fea3 	bl	8022ccc <__malloc_unlock>
 8021f86:	1d23      	adds	r3, r4, #4
 8021f88:	f026 0607 	bic.w	r6, r6, #7
 8021f8c:	1af2      	subs	r2, r6, r3
 8021f8e:	d0b6      	beq.n	8021efe <_malloc_r+0x22>
 8021f90:	1b9b      	subs	r3, r3, r6
 8021f92:	50a3      	str	r3, [r4, r2]
 8021f94:	e7b3      	b.n	8021efe <_malloc_r+0x22>
 8021f96:	6862      	ldr	r2, [r4, #4]
 8021f98:	42a3      	cmp	r3, r4
 8021f9a:	bf0c      	ite	eq
 8021f9c:	6032      	streq	r2, [r6, #0]
 8021f9e:	605a      	strne	r2, [r3, #4]
 8021fa0:	e7ec      	b.n	8021f7c <_malloc_r+0xa0>
 8021fa2:	4623      	mov	r3, r4
 8021fa4:	6864      	ldr	r4, [r4, #4]
 8021fa6:	e7b2      	b.n	8021f0e <_malloc_r+0x32>
 8021fa8:	4634      	mov	r4, r6
 8021faa:	6876      	ldr	r6, [r6, #4]
 8021fac:	e7b9      	b.n	8021f22 <_malloc_r+0x46>
 8021fae:	230c      	movs	r3, #12
 8021fb0:	4638      	mov	r0, r7
 8021fb2:	603b      	str	r3, [r7, #0]
 8021fb4:	f000 fe8a 	bl	8022ccc <__malloc_unlock>
 8021fb8:	e7a1      	b.n	8021efe <_malloc_r+0x22>
 8021fba:	6025      	str	r5, [r4, #0]
 8021fbc:	e7de      	b.n	8021f7c <_malloc_r+0xa0>
 8021fbe:	bf00      	nop
 8021fc0:	2001fea4 	.word	0x2001fea4

08021fc4 <__sfputc_r>:
 8021fc4:	6893      	ldr	r3, [r2, #8]
 8021fc6:	3b01      	subs	r3, #1
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	6093      	str	r3, [r2, #8]
 8021fcc:	b410      	push	{r4}
 8021fce:	da08      	bge.n	8021fe2 <__sfputc_r+0x1e>
 8021fd0:	6994      	ldr	r4, [r2, #24]
 8021fd2:	42a3      	cmp	r3, r4
 8021fd4:	db01      	blt.n	8021fda <__sfputc_r+0x16>
 8021fd6:	290a      	cmp	r1, #10
 8021fd8:	d103      	bne.n	8021fe2 <__sfputc_r+0x1e>
 8021fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021fde:	f000 bbe3 	b.w	80227a8 <__swbuf_r>
 8021fe2:	6813      	ldr	r3, [r2, #0]
 8021fe4:	1c58      	adds	r0, r3, #1
 8021fe6:	6010      	str	r0, [r2, #0]
 8021fe8:	4608      	mov	r0, r1
 8021fea:	7019      	strb	r1, [r3, #0]
 8021fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021ff0:	4770      	bx	lr

08021ff2 <__sfputs_r>:
 8021ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ff4:	4606      	mov	r6, r0
 8021ff6:	460f      	mov	r7, r1
 8021ff8:	4614      	mov	r4, r2
 8021ffa:	18d5      	adds	r5, r2, r3
 8021ffc:	42ac      	cmp	r4, r5
 8021ffe:	d101      	bne.n	8022004 <__sfputs_r+0x12>
 8022000:	2000      	movs	r0, #0
 8022002:	e007      	b.n	8022014 <__sfputs_r+0x22>
 8022004:	463a      	mov	r2, r7
 8022006:	f814 1b01 	ldrb.w	r1, [r4], #1
 802200a:	4630      	mov	r0, r6
 802200c:	f7ff ffda 	bl	8021fc4 <__sfputc_r>
 8022010:	1c43      	adds	r3, r0, #1
 8022012:	d1f3      	bne.n	8021ffc <__sfputs_r+0xa>
 8022014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022018 <_vfiprintf_r>:
 8022018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802201c:	460d      	mov	r5, r1
 802201e:	b09d      	sub	sp, #116	; 0x74
 8022020:	4614      	mov	r4, r2
 8022022:	4698      	mov	r8, r3
 8022024:	4606      	mov	r6, r0
 8022026:	b118      	cbz	r0, 8022030 <_vfiprintf_r+0x18>
 8022028:	6983      	ldr	r3, [r0, #24]
 802202a:	b90b      	cbnz	r3, 8022030 <_vfiprintf_r+0x18>
 802202c:	f7ff fdec 	bl	8021c08 <__sinit>
 8022030:	4b89      	ldr	r3, [pc, #548]	; (8022258 <_vfiprintf_r+0x240>)
 8022032:	429d      	cmp	r5, r3
 8022034:	d11b      	bne.n	802206e <_vfiprintf_r+0x56>
 8022036:	6875      	ldr	r5, [r6, #4]
 8022038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802203a:	07d9      	lsls	r1, r3, #31
 802203c:	d405      	bmi.n	802204a <_vfiprintf_r+0x32>
 802203e:	89ab      	ldrh	r3, [r5, #12]
 8022040:	059a      	lsls	r2, r3, #22
 8022042:	d402      	bmi.n	802204a <_vfiprintf_r+0x32>
 8022044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022046:	f7ff feb4 	bl	8021db2 <__retarget_lock_acquire_recursive>
 802204a:	89ab      	ldrh	r3, [r5, #12]
 802204c:	071b      	lsls	r3, r3, #28
 802204e:	d501      	bpl.n	8022054 <_vfiprintf_r+0x3c>
 8022050:	692b      	ldr	r3, [r5, #16]
 8022052:	b9eb      	cbnz	r3, 8022090 <_vfiprintf_r+0x78>
 8022054:	4629      	mov	r1, r5
 8022056:	4630      	mov	r0, r6
 8022058:	f000 fc0a 	bl	8022870 <__swsetup_r>
 802205c:	b1c0      	cbz	r0, 8022090 <_vfiprintf_r+0x78>
 802205e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022060:	07dc      	lsls	r4, r3, #31
 8022062:	d50e      	bpl.n	8022082 <_vfiprintf_r+0x6a>
 8022064:	f04f 30ff 	mov.w	r0, #4294967295
 8022068:	b01d      	add	sp, #116	; 0x74
 802206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802206e:	4b7b      	ldr	r3, [pc, #492]	; (802225c <_vfiprintf_r+0x244>)
 8022070:	429d      	cmp	r5, r3
 8022072:	d101      	bne.n	8022078 <_vfiprintf_r+0x60>
 8022074:	68b5      	ldr	r5, [r6, #8]
 8022076:	e7df      	b.n	8022038 <_vfiprintf_r+0x20>
 8022078:	4b79      	ldr	r3, [pc, #484]	; (8022260 <_vfiprintf_r+0x248>)
 802207a:	429d      	cmp	r5, r3
 802207c:	bf08      	it	eq
 802207e:	68f5      	ldreq	r5, [r6, #12]
 8022080:	e7da      	b.n	8022038 <_vfiprintf_r+0x20>
 8022082:	89ab      	ldrh	r3, [r5, #12]
 8022084:	0598      	lsls	r0, r3, #22
 8022086:	d4ed      	bmi.n	8022064 <_vfiprintf_r+0x4c>
 8022088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802208a:	f7ff fe94 	bl	8021db6 <__retarget_lock_release_recursive>
 802208e:	e7e9      	b.n	8022064 <_vfiprintf_r+0x4c>
 8022090:	2300      	movs	r3, #0
 8022092:	f8cd 800c 	str.w	r8, [sp, #12]
 8022096:	f04f 0901 	mov.w	r9, #1
 802209a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022264 <_vfiprintf_r+0x24c>
 802209e:	9309      	str	r3, [sp, #36]	; 0x24
 80220a0:	2320      	movs	r3, #32
 80220a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80220a6:	2330      	movs	r3, #48	; 0x30
 80220a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80220ac:	4623      	mov	r3, r4
 80220ae:	469a      	mov	sl, r3
 80220b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220b4:	b10a      	cbz	r2, 80220ba <_vfiprintf_r+0xa2>
 80220b6:	2a25      	cmp	r2, #37	; 0x25
 80220b8:	d1f9      	bne.n	80220ae <_vfiprintf_r+0x96>
 80220ba:	ebba 0b04 	subs.w	fp, sl, r4
 80220be:	d00b      	beq.n	80220d8 <_vfiprintf_r+0xc0>
 80220c0:	465b      	mov	r3, fp
 80220c2:	4622      	mov	r2, r4
 80220c4:	4629      	mov	r1, r5
 80220c6:	4630      	mov	r0, r6
 80220c8:	f7ff ff93 	bl	8021ff2 <__sfputs_r>
 80220cc:	3001      	adds	r0, #1
 80220ce:	f000 80aa 	beq.w	8022226 <_vfiprintf_r+0x20e>
 80220d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220d4:	445a      	add	r2, fp
 80220d6:	9209      	str	r2, [sp, #36]	; 0x24
 80220d8:	f89a 3000 	ldrb.w	r3, [sl]
 80220dc:	2b00      	cmp	r3, #0
 80220de:	f000 80a2 	beq.w	8022226 <_vfiprintf_r+0x20e>
 80220e2:	2300      	movs	r3, #0
 80220e4:	f04f 32ff 	mov.w	r2, #4294967295
 80220e8:	f10a 0a01 	add.w	sl, sl, #1
 80220ec:	9304      	str	r3, [sp, #16]
 80220ee:	9307      	str	r3, [sp, #28]
 80220f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80220f4:	931a      	str	r3, [sp, #104]	; 0x68
 80220f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80220fa:	4654      	mov	r4, sl
 80220fc:	2205      	movs	r2, #5
 80220fe:	4859      	ldr	r0, [pc, #356]	; (8022264 <_vfiprintf_r+0x24c>)
 8022100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022104:	f000 fdce 	bl	8022ca4 <memchr>
 8022108:	9a04      	ldr	r2, [sp, #16]
 802210a:	b9d8      	cbnz	r0, 8022144 <_vfiprintf_r+0x12c>
 802210c:	06d1      	lsls	r1, r2, #27
 802210e:	bf44      	itt	mi
 8022110:	2320      	movmi	r3, #32
 8022112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022116:	0713      	lsls	r3, r2, #28
 8022118:	bf44      	itt	mi
 802211a:	232b      	movmi	r3, #43	; 0x2b
 802211c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022120:	f89a 3000 	ldrb.w	r3, [sl]
 8022124:	2b2a      	cmp	r3, #42	; 0x2a
 8022126:	d015      	beq.n	8022154 <_vfiprintf_r+0x13c>
 8022128:	9a07      	ldr	r2, [sp, #28]
 802212a:	4654      	mov	r4, sl
 802212c:	2000      	movs	r0, #0
 802212e:	f04f 0c0a 	mov.w	ip, #10
 8022132:	4621      	mov	r1, r4
 8022134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022138:	3b30      	subs	r3, #48	; 0x30
 802213a:	2b09      	cmp	r3, #9
 802213c:	d94e      	bls.n	80221dc <_vfiprintf_r+0x1c4>
 802213e:	b1b0      	cbz	r0, 802216e <_vfiprintf_r+0x156>
 8022140:	9207      	str	r2, [sp, #28]
 8022142:	e014      	b.n	802216e <_vfiprintf_r+0x156>
 8022144:	eba0 0308 	sub.w	r3, r0, r8
 8022148:	46a2      	mov	sl, r4
 802214a:	fa09 f303 	lsl.w	r3, r9, r3
 802214e:	4313      	orrs	r3, r2
 8022150:	9304      	str	r3, [sp, #16]
 8022152:	e7d2      	b.n	80220fa <_vfiprintf_r+0xe2>
 8022154:	9b03      	ldr	r3, [sp, #12]
 8022156:	1d19      	adds	r1, r3, #4
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	2b00      	cmp	r3, #0
 802215c:	9103      	str	r1, [sp, #12]
 802215e:	bfbb      	ittet	lt
 8022160:	425b      	neglt	r3, r3
 8022162:	f042 0202 	orrlt.w	r2, r2, #2
 8022166:	9307      	strge	r3, [sp, #28]
 8022168:	9307      	strlt	r3, [sp, #28]
 802216a:	bfb8      	it	lt
 802216c:	9204      	strlt	r2, [sp, #16]
 802216e:	7823      	ldrb	r3, [r4, #0]
 8022170:	2b2e      	cmp	r3, #46	; 0x2e
 8022172:	d10c      	bne.n	802218e <_vfiprintf_r+0x176>
 8022174:	7863      	ldrb	r3, [r4, #1]
 8022176:	2b2a      	cmp	r3, #42	; 0x2a
 8022178:	d135      	bne.n	80221e6 <_vfiprintf_r+0x1ce>
 802217a:	9b03      	ldr	r3, [sp, #12]
 802217c:	3402      	adds	r4, #2
 802217e:	1d1a      	adds	r2, r3, #4
 8022180:	681b      	ldr	r3, [r3, #0]
 8022182:	2b00      	cmp	r3, #0
 8022184:	9203      	str	r2, [sp, #12]
 8022186:	bfb8      	it	lt
 8022188:	f04f 33ff 	movlt.w	r3, #4294967295
 802218c:	9305      	str	r3, [sp, #20]
 802218e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022274 <_vfiprintf_r+0x25c>
 8022192:	2203      	movs	r2, #3
 8022194:	7821      	ldrb	r1, [r4, #0]
 8022196:	4650      	mov	r0, sl
 8022198:	f000 fd84 	bl	8022ca4 <memchr>
 802219c:	b140      	cbz	r0, 80221b0 <_vfiprintf_r+0x198>
 802219e:	2340      	movs	r3, #64	; 0x40
 80221a0:	eba0 000a 	sub.w	r0, r0, sl
 80221a4:	3401      	adds	r4, #1
 80221a6:	fa03 f000 	lsl.w	r0, r3, r0
 80221aa:	9b04      	ldr	r3, [sp, #16]
 80221ac:	4303      	orrs	r3, r0
 80221ae:	9304      	str	r3, [sp, #16]
 80221b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221b4:	2206      	movs	r2, #6
 80221b6:	482c      	ldr	r0, [pc, #176]	; (8022268 <_vfiprintf_r+0x250>)
 80221b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80221bc:	f000 fd72 	bl	8022ca4 <memchr>
 80221c0:	2800      	cmp	r0, #0
 80221c2:	d03f      	beq.n	8022244 <_vfiprintf_r+0x22c>
 80221c4:	4b29      	ldr	r3, [pc, #164]	; (802226c <_vfiprintf_r+0x254>)
 80221c6:	bb1b      	cbnz	r3, 8022210 <_vfiprintf_r+0x1f8>
 80221c8:	9b03      	ldr	r3, [sp, #12]
 80221ca:	3307      	adds	r3, #7
 80221cc:	f023 0307 	bic.w	r3, r3, #7
 80221d0:	3308      	adds	r3, #8
 80221d2:	9303      	str	r3, [sp, #12]
 80221d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221d6:	443b      	add	r3, r7
 80221d8:	9309      	str	r3, [sp, #36]	; 0x24
 80221da:	e767      	b.n	80220ac <_vfiprintf_r+0x94>
 80221dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80221e0:	460c      	mov	r4, r1
 80221e2:	2001      	movs	r0, #1
 80221e4:	e7a5      	b.n	8022132 <_vfiprintf_r+0x11a>
 80221e6:	2300      	movs	r3, #0
 80221e8:	3401      	adds	r4, #1
 80221ea:	f04f 0c0a 	mov.w	ip, #10
 80221ee:	4619      	mov	r1, r3
 80221f0:	9305      	str	r3, [sp, #20]
 80221f2:	4620      	mov	r0, r4
 80221f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80221f8:	3a30      	subs	r2, #48	; 0x30
 80221fa:	2a09      	cmp	r2, #9
 80221fc:	d903      	bls.n	8022206 <_vfiprintf_r+0x1ee>
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d0c5      	beq.n	802218e <_vfiprintf_r+0x176>
 8022202:	9105      	str	r1, [sp, #20]
 8022204:	e7c3      	b.n	802218e <_vfiprintf_r+0x176>
 8022206:	fb0c 2101 	mla	r1, ip, r1, r2
 802220a:	4604      	mov	r4, r0
 802220c:	2301      	movs	r3, #1
 802220e:	e7f0      	b.n	80221f2 <_vfiprintf_r+0x1da>
 8022210:	ab03      	add	r3, sp, #12
 8022212:	462a      	mov	r2, r5
 8022214:	a904      	add	r1, sp, #16
 8022216:	4630      	mov	r0, r6
 8022218:	9300      	str	r3, [sp, #0]
 802221a:	4b15      	ldr	r3, [pc, #84]	; (8022270 <_vfiprintf_r+0x258>)
 802221c:	e000      	b.n	8022220 <_vfiprintf_r+0x208>
 802221e:	bf00      	nop
 8022220:	4607      	mov	r7, r0
 8022222:	1c78      	adds	r0, r7, #1
 8022224:	d1d6      	bne.n	80221d4 <_vfiprintf_r+0x1bc>
 8022226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022228:	07d9      	lsls	r1, r3, #31
 802222a:	d405      	bmi.n	8022238 <_vfiprintf_r+0x220>
 802222c:	89ab      	ldrh	r3, [r5, #12]
 802222e:	059a      	lsls	r2, r3, #22
 8022230:	d402      	bmi.n	8022238 <_vfiprintf_r+0x220>
 8022232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022234:	f7ff fdbf 	bl	8021db6 <__retarget_lock_release_recursive>
 8022238:	89ab      	ldrh	r3, [r5, #12]
 802223a:	065b      	lsls	r3, r3, #25
 802223c:	f53f af12 	bmi.w	8022064 <_vfiprintf_r+0x4c>
 8022240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022242:	e711      	b.n	8022068 <_vfiprintf_r+0x50>
 8022244:	ab03      	add	r3, sp, #12
 8022246:	462a      	mov	r2, r5
 8022248:	a904      	add	r1, sp, #16
 802224a:	4630      	mov	r0, r6
 802224c:	9300      	str	r3, [sp, #0]
 802224e:	4b08      	ldr	r3, [pc, #32]	; (8022270 <_vfiprintf_r+0x258>)
 8022250:	f000 f882 	bl	8022358 <_printf_i>
 8022254:	e7e4      	b.n	8022220 <_vfiprintf_r+0x208>
 8022256:	bf00      	nop
 8022258:	08024878 	.word	0x08024878
 802225c:	08024898 	.word	0x08024898
 8022260:	08024858 	.word	0x08024858
 8022264:	080248bc 	.word	0x080248bc
 8022268:	080248c6 	.word	0x080248c6
 802226c:	00000000 	.word	0x00000000
 8022270:	08021ff3 	.word	0x08021ff3
 8022274:	080248c2 	.word	0x080248c2

08022278 <_printf_common>:
 8022278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802227c:	4616      	mov	r6, r2
 802227e:	4699      	mov	r9, r3
 8022280:	688a      	ldr	r2, [r1, #8]
 8022282:	4607      	mov	r7, r0
 8022284:	690b      	ldr	r3, [r1, #16]
 8022286:	460c      	mov	r4, r1
 8022288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802228c:	4293      	cmp	r3, r2
 802228e:	bfb8      	it	lt
 8022290:	4613      	movlt	r3, r2
 8022292:	6033      	str	r3, [r6, #0]
 8022294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022298:	b10a      	cbz	r2, 802229e <_printf_common+0x26>
 802229a:	3301      	adds	r3, #1
 802229c:	6033      	str	r3, [r6, #0]
 802229e:	6823      	ldr	r3, [r4, #0]
 80222a0:	0699      	lsls	r1, r3, #26
 80222a2:	bf42      	ittt	mi
 80222a4:	6833      	ldrmi	r3, [r6, #0]
 80222a6:	3302      	addmi	r3, #2
 80222a8:	6033      	strmi	r3, [r6, #0]
 80222aa:	6825      	ldr	r5, [r4, #0]
 80222ac:	f015 0506 	ands.w	r5, r5, #6
 80222b0:	d106      	bne.n	80222c0 <_printf_common+0x48>
 80222b2:	f104 0a19 	add.w	sl, r4, #25
 80222b6:	68e3      	ldr	r3, [r4, #12]
 80222b8:	6832      	ldr	r2, [r6, #0]
 80222ba:	1a9b      	subs	r3, r3, r2
 80222bc:	42ab      	cmp	r3, r5
 80222be:	dc29      	bgt.n	8022314 <_printf_common+0x9c>
 80222c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80222c4:	1e13      	subs	r3, r2, #0
 80222c6:	6822      	ldr	r2, [r4, #0]
 80222c8:	bf18      	it	ne
 80222ca:	2301      	movne	r3, #1
 80222cc:	0692      	lsls	r2, r2, #26
 80222ce:	d42e      	bmi.n	802232e <_printf_common+0xb6>
 80222d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80222d4:	4649      	mov	r1, r9
 80222d6:	4638      	mov	r0, r7
 80222d8:	47c0      	blx	r8
 80222da:	3001      	adds	r0, #1
 80222dc:	d021      	beq.n	8022322 <_printf_common+0xaa>
 80222de:	6823      	ldr	r3, [r4, #0]
 80222e0:	341a      	adds	r4, #26
 80222e2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80222e6:	f003 0306 	and.w	r3, r3, #6
 80222ea:	6832      	ldr	r2, [r6, #0]
 80222ec:	2600      	movs	r6, #0
 80222ee:	2b04      	cmp	r3, #4
 80222f0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80222f4:	bf08      	it	eq
 80222f6:	1aad      	subeq	r5, r5, r2
 80222f8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80222fc:	bf14      	ite	ne
 80222fe:	2500      	movne	r5, #0
 8022300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022304:	4293      	cmp	r3, r2
 8022306:	bfc4      	itt	gt
 8022308:	1a9b      	subgt	r3, r3, r2
 802230a:	18ed      	addgt	r5, r5, r3
 802230c:	42b5      	cmp	r5, r6
 802230e:	d11a      	bne.n	8022346 <_printf_common+0xce>
 8022310:	2000      	movs	r0, #0
 8022312:	e008      	b.n	8022326 <_printf_common+0xae>
 8022314:	2301      	movs	r3, #1
 8022316:	4652      	mov	r2, sl
 8022318:	4649      	mov	r1, r9
 802231a:	4638      	mov	r0, r7
 802231c:	47c0      	blx	r8
 802231e:	3001      	adds	r0, #1
 8022320:	d103      	bne.n	802232a <_printf_common+0xb2>
 8022322:	f04f 30ff 	mov.w	r0, #4294967295
 8022326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802232a:	3501      	adds	r5, #1
 802232c:	e7c3      	b.n	80222b6 <_printf_common+0x3e>
 802232e:	18e1      	adds	r1, r4, r3
 8022330:	1c5a      	adds	r2, r3, #1
 8022332:	2030      	movs	r0, #48	; 0x30
 8022334:	3302      	adds	r3, #2
 8022336:	4422      	add	r2, r4
 8022338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802233c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022344:	e7c4      	b.n	80222d0 <_printf_common+0x58>
 8022346:	2301      	movs	r3, #1
 8022348:	4622      	mov	r2, r4
 802234a:	4649      	mov	r1, r9
 802234c:	4638      	mov	r0, r7
 802234e:	47c0      	blx	r8
 8022350:	3001      	adds	r0, #1
 8022352:	d0e6      	beq.n	8022322 <_printf_common+0xaa>
 8022354:	3601      	adds	r6, #1
 8022356:	e7d9      	b.n	802230c <_printf_common+0x94>

08022358 <_printf_i>:
 8022358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802235c:	7e0f      	ldrb	r7, [r1, #24]
 802235e:	4691      	mov	r9, r2
 8022360:	4680      	mov	r8, r0
 8022362:	460c      	mov	r4, r1
 8022364:	2f78      	cmp	r7, #120	; 0x78
 8022366:	469a      	mov	sl, r3
 8022368:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802236a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802236e:	d807      	bhi.n	8022380 <_printf_i+0x28>
 8022370:	2f62      	cmp	r7, #98	; 0x62
 8022372:	d80a      	bhi.n	802238a <_printf_i+0x32>
 8022374:	2f00      	cmp	r7, #0
 8022376:	f000 80d8 	beq.w	802252a <_printf_i+0x1d2>
 802237a:	2f58      	cmp	r7, #88	; 0x58
 802237c:	f000 80a3 	beq.w	80224c6 <_printf_i+0x16e>
 8022380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022388:	e03a      	b.n	8022400 <_printf_i+0xa8>
 802238a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802238e:	2b15      	cmp	r3, #21
 8022390:	d8f6      	bhi.n	8022380 <_printf_i+0x28>
 8022392:	a101      	add	r1, pc, #4	; (adr r1, 8022398 <_printf_i+0x40>)
 8022394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022398:	080223f1 	.word	0x080223f1
 802239c:	08022405 	.word	0x08022405
 80223a0:	08022381 	.word	0x08022381
 80223a4:	08022381 	.word	0x08022381
 80223a8:	08022381 	.word	0x08022381
 80223ac:	08022381 	.word	0x08022381
 80223b0:	08022405 	.word	0x08022405
 80223b4:	08022381 	.word	0x08022381
 80223b8:	08022381 	.word	0x08022381
 80223bc:	08022381 	.word	0x08022381
 80223c0:	08022381 	.word	0x08022381
 80223c4:	08022511 	.word	0x08022511
 80223c8:	08022435 	.word	0x08022435
 80223cc:	080224f3 	.word	0x080224f3
 80223d0:	08022381 	.word	0x08022381
 80223d4:	08022381 	.word	0x08022381
 80223d8:	08022533 	.word	0x08022533
 80223dc:	08022381 	.word	0x08022381
 80223e0:	08022435 	.word	0x08022435
 80223e4:	08022381 	.word	0x08022381
 80223e8:	08022381 	.word	0x08022381
 80223ec:	080224fb 	.word	0x080224fb
 80223f0:	682b      	ldr	r3, [r5, #0]
 80223f2:	1d1a      	adds	r2, r3, #4
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	602a      	str	r2, [r5, #0]
 80223f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80223fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022400:	2301      	movs	r3, #1
 8022402:	e0a3      	b.n	802254c <_printf_i+0x1f4>
 8022404:	6820      	ldr	r0, [r4, #0]
 8022406:	6829      	ldr	r1, [r5, #0]
 8022408:	0606      	lsls	r6, r0, #24
 802240a:	f101 0304 	add.w	r3, r1, #4
 802240e:	d50a      	bpl.n	8022426 <_printf_i+0xce>
 8022410:	680e      	ldr	r6, [r1, #0]
 8022412:	602b      	str	r3, [r5, #0]
 8022414:	2e00      	cmp	r6, #0
 8022416:	da03      	bge.n	8022420 <_printf_i+0xc8>
 8022418:	232d      	movs	r3, #45	; 0x2d
 802241a:	4276      	negs	r6, r6
 802241c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022420:	485e      	ldr	r0, [pc, #376]	; (802259c <_printf_i+0x244>)
 8022422:	230a      	movs	r3, #10
 8022424:	e019      	b.n	802245a <_printf_i+0x102>
 8022426:	680e      	ldr	r6, [r1, #0]
 8022428:	f010 0f40 	tst.w	r0, #64	; 0x40
 802242c:	602b      	str	r3, [r5, #0]
 802242e:	bf18      	it	ne
 8022430:	b236      	sxthne	r6, r6
 8022432:	e7ef      	b.n	8022414 <_printf_i+0xbc>
 8022434:	682b      	ldr	r3, [r5, #0]
 8022436:	6820      	ldr	r0, [r4, #0]
 8022438:	1d19      	adds	r1, r3, #4
 802243a:	6029      	str	r1, [r5, #0]
 802243c:	0601      	lsls	r1, r0, #24
 802243e:	d501      	bpl.n	8022444 <_printf_i+0xec>
 8022440:	681e      	ldr	r6, [r3, #0]
 8022442:	e002      	b.n	802244a <_printf_i+0xf2>
 8022444:	0646      	lsls	r6, r0, #25
 8022446:	d5fb      	bpl.n	8022440 <_printf_i+0xe8>
 8022448:	881e      	ldrh	r6, [r3, #0]
 802244a:	2f6f      	cmp	r7, #111	; 0x6f
 802244c:	4853      	ldr	r0, [pc, #332]	; (802259c <_printf_i+0x244>)
 802244e:	bf0c      	ite	eq
 8022450:	2308      	moveq	r3, #8
 8022452:	230a      	movne	r3, #10
 8022454:	2100      	movs	r1, #0
 8022456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802245a:	6865      	ldr	r5, [r4, #4]
 802245c:	2d00      	cmp	r5, #0
 802245e:	60a5      	str	r5, [r4, #8]
 8022460:	bfa2      	ittt	ge
 8022462:	6821      	ldrge	r1, [r4, #0]
 8022464:	f021 0104 	bicge.w	r1, r1, #4
 8022468:	6021      	strge	r1, [r4, #0]
 802246a:	b90e      	cbnz	r6, 8022470 <_printf_i+0x118>
 802246c:	2d00      	cmp	r5, #0
 802246e:	d04d      	beq.n	802250c <_printf_i+0x1b4>
 8022470:	4615      	mov	r5, r2
 8022472:	fbb6 f1f3 	udiv	r1, r6, r3
 8022476:	fb03 6711 	mls	r7, r3, r1, r6
 802247a:	5dc7      	ldrb	r7, [r0, r7]
 802247c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022480:	4637      	mov	r7, r6
 8022482:	460e      	mov	r6, r1
 8022484:	42bb      	cmp	r3, r7
 8022486:	d9f4      	bls.n	8022472 <_printf_i+0x11a>
 8022488:	2b08      	cmp	r3, #8
 802248a:	d10b      	bne.n	80224a4 <_printf_i+0x14c>
 802248c:	6823      	ldr	r3, [r4, #0]
 802248e:	07de      	lsls	r6, r3, #31
 8022490:	d508      	bpl.n	80224a4 <_printf_i+0x14c>
 8022492:	6923      	ldr	r3, [r4, #16]
 8022494:	6861      	ldr	r1, [r4, #4]
 8022496:	4299      	cmp	r1, r3
 8022498:	bfde      	ittt	le
 802249a:	2330      	movle	r3, #48	; 0x30
 802249c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80224a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80224a4:	1b52      	subs	r2, r2, r5
 80224a6:	6122      	str	r2, [r4, #16]
 80224a8:	464b      	mov	r3, r9
 80224aa:	aa03      	add	r2, sp, #12
 80224ac:	4621      	mov	r1, r4
 80224ae:	4640      	mov	r0, r8
 80224b0:	f8cd a000 	str.w	sl, [sp]
 80224b4:	f7ff fee0 	bl	8022278 <_printf_common>
 80224b8:	3001      	adds	r0, #1
 80224ba:	d14c      	bne.n	8022556 <_printf_i+0x1fe>
 80224bc:	f04f 30ff 	mov.w	r0, #4294967295
 80224c0:	b004      	add	sp, #16
 80224c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224c6:	4835      	ldr	r0, [pc, #212]	; (802259c <_printf_i+0x244>)
 80224c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80224cc:	6829      	ldr	r1, [r5, #0]
 80224ce:	6823      	ldr	r3, [r4, #0]
 80224d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80224d4:	6029      	str	r1, [r5, #0]
 80224d6:	061d      	lsls	r5, r3, #24
 80224d8:	d514      	bpl.n	8022504 <_printf_i+0x1ac>
 80224da:	07df      	lsls	r7, r3, #31
 80224dc:	bf44      	itt	mi
 80224de:	f043 0320 	orrmi.w	r3, r3, #32
 80224e2:	6023      	strmi	r3, [r4, #0]
 80224e4:	b91e      	cbnz	r6, 80224ee <_printf_i+0x196>
 80224e6:	6823      	ldr	r3, [r4, #0]
 80224e8:	f023 0320 	bic.w	r3, r3, #32
 80224ec:	6023      	str	r3, [r4, #0]
 80224ee:	2310      	movs	r3, #16
 80224f0:	e7b0      	b.n	8022454 <_printf_i+0xfc>
 80224f2:	6823      	ldr	r3, [r4, #0]
 80224f4:	f043 0320 	orr.w	r3, r3, #32
 80224f8:	6023      	str	r3, [r4, #0]
 80224fa:	2378      	movs	r3, #120	; 0x78
 80224fc:	4828      	ldr	r0, [pc, #160]	; (80225a0 <_printf_i+0x248>)
 80224fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022502:	e7e3      	b.n	80224cc <_printf_i+0x174>
 8022504:	0659      	lsls	r1, r3, #25
 8022506:	bf48      	it	mi
 8022508:	b2b6      	uxthmi	r6, r6
 802250a:	e7e6      	b.n	80224da <_printf_i+0x182>
 802250c:	4615      	mov	r5, r2
 802250e:	e7bb      	b.n	8022488 <_printf_i+0x130>
 8022510:	682b      	ldr	r3, [r5, #0]
 8022512:	6826      	ldr	r6, [r4, #0]
 8022514:	1d18      	adds	r0, r3, #4
 8022516:	6961      	ldr	r1, [r4, #20]
 8022518:	6028      	str	r0, [r5, #0]
 802251a:	0635      	lsls	r5, r6, #24
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	d501      	bpl.n	8022524 <_printf_i+0x1cc>
 8022520:	6019      	str	r1, [r3, #0]
 8022522:	e002      	b.n	802252a <_printf_i+0x1d2>
 8022524:	0670      	lsls	r0, r6, #25
 8022526:	d5fb      	bpl.n	8022520 <_printf_i+0x1c8>
 8022528:	8019      	strh	r1, [r3, #0]
 802252a:	2300      	movs	r3, #0
 802252c:	4615      	mov	r5, r2
 802252e:	6123      	str	r3, [r4, #16]
 8022530:	e7ba      	b.n	80224a8 <_printf_i+0x150>
 8022532:	682b      	ldr	r3, [r5, #0]
 8022534:	2100      	movs	r1, #0
 8022536:	1d1a      	adds	r2, r3, #4
 8022538:	602a      	str	r2, [r5, #0]
 802253a:	681d      	ldr	r5, [r3, #0]
 802253c:	6862      	ldr	r2, [r4, #4]
 802253e:	4628      	mov	r0, r5
 8022540:	f000 fbb0 	bl	8022ca4 <memchr>
 8022544:	b108      	cbz	r0, 802254a <_printf_i+0x1f2>
 8022546:	1b40      	subs	r0, r0, r5
 8022548:	6060      	str	r0, [r4, #4]
 802254a:	6863      	ldr	r3, [r4, #4]
 802254c:	6123      	str	r3, [r4, #16]
 802254e:	2300      	movs	r3, #0
 8022550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022554:	e7a8      	b.n	80224a8 <_printf_i+0x150>
 8022556:	6923      	ldr	r3, [r4, #16]
 8022558:	462a      	mov	r2, r5
 802255a:	4649      	mov	r1, r9
 802255c:	4640      	mov	r0, r8
 802255e:	47d0      	blx	sl
 8022560:	3001      	adds	r0, #1
 8022562:	d0ab      	beq.n	80224bc <_printf_i+0x164>
 8022564:	6823      	ldr	r3, [r4, #0]
 8022566:	079b      	lsls	r3, r3, #30
 8022568:	d413      	bmi.n	8022592 <_printf_i+0x23a>
 802256a:	68e0      	ldr	r0, [r4, #12]
 802256c:	9b03      	ldr	r3, [sp, #12]
 802256e:	4298      	cmp	r0, r3
 8022570:	bfb8      	it	lt
 8022572:	4618      	movlt	r0, r3
 8022574:	e7a4      	b.n	80224c0 <_printf_i+0x168>
 8022576:	2301      	movs	r3, #1
 8022578:	4632      	mov	r2, r6
 802257a:	4649      	mov	r1, r9
 802257c:	4640      	mov	r0, r8
 802257e:	47d0      	blx	sl
 8022580:	3001      	adds	r0, #1
 8022582:	d09b      	beq.n	80224bc <_printf_i+0x164>
 8022584:	3501      	adds	r5, #1
 8022586:	68e3      	ldr	r3, [r4, #12]
 8022588:	9903      	ldr	r1, [sp, #12]
 802258a:	1a5b      	subs	r3, r3, r1
 802258c:	42ab      	cmp	r3, r5
 802258e:	dcf2      	bgt.n	8022576 <_printf_i+0x21e>
 8022590:	e7eb      	b.n	802256a <_printf_i+0x212>
 8022592:	2500      	movs	r5, #0
 8022594:	f104 0619 	add.w	r6, r4, #25
 8022598:	e7f5      	b.n	8022586 <_printf_i+0x22e>
 802259a:	bf00      	nop
 802259c:	080248cd 	.word	0x080248cd
 80225a0:	080248de 	.word	0x080248de

080225a4 <cleanup_glue>:
 80225a4:	b538      	push	{r3, r4, r5, lr}
 80225a6:	460c      	mov	r4, r1
 80225a8:	6809      	ldr	r1, [r1, #0]
 80225aa:	4605      	mov	r5, r0
 80225ac:	b109      	cbz	r1, 80225b2 <cleanup_glue+0xe>
 80225ae:	f7ff fff9 	bl	80225a4 <cleanup_glue>
 80225b2:	4621      	mov	r1, r4
 80225b4:	4628      	mov	r0, r5
 80225b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225ba:	f7ff bc23 	b.w	8021e04 <_free_r>
	...

080225c0 <_reclaim_reent>:
 80225c0:	4b2c      	ldr	r3, [pc, #176]	; (8022674 <_reclaim_reent+0xb4>)
 80225c2:	681b      	ldr	r3, [r3, #0]
 80225c4:	4283      	cmp	r3, r0
 80225c6:	b570      	push	{r4, r5, r6, lr}
 80225c8:	4604      	mov	r4, r0
 80225ca:	d051      	beq.n	8022670 <_reclaim_reent+0xb0>
 80225cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80225ce:	b143      	cbz	r3, 80225e2 <_reclaim_reent+0x22>
 80225d0:	68db      	ldr	r3, [r3, #12]
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d14a      	bne.n	802266c <_reclaim_reent+0xac>
 80225d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80225d8:	6819      	ldr	r1, [r3, #0]
 80225da:	b111      	cbz	r1, 80225e2 <_reclaim_reent+0x22>
 80225dc:	4620      	mov	r0, r4
 80225de:	f7ff fc11 	bl	8021e04 <_free_r>
 80225e2:	6961      	ldr	r1, [r4, #20]
 80225e4:	b111      	cbz	r1, 80225ec <_reclaim_reent+0x2c>
 80225e6:	4620      	mov	r0, r4
 80225e8:	f7ff fc0c 	bl	8021e04 <_free_r>
 80225ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80225ee:	b111      	cbz	r1, 80225f6 <_reclaim_reent+0x36>
 80225f0:	4620      	mov	r0, r4
 80225f2:	f7ff fc07 	bl	8021e04 <_free_r>
 80225f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80225f8:	b111      	cbz	r1, 8022600 <_reclaim_reent+0x40>
 80225fa:	4620      	mov	r0, r4
 80225fc:	f7ff fc02 	bl	8021e04 <_free_r>
 8022600:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8022602:	b111      	cbz	r1, 802260a <_reclaim_reent+0x4a>
 8022604:	4620      	mov	r0, r4
 8022606:	f7ff fbfd 	bl	8021e04 <_free_r>
 802260a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802260c:	b111      	cbz	r1, 8022614 <_reclaim_reent+0x54>
 802260e:	4620      	mov	r0, r4
 8022610:	f7ff fbf8 	bl	8021e04 <_free_r>
 8022614:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8022616:	b111      	cbz	r1, 802261e <_reclaim_reent+0x5e>
 8022618:	4620      	mov	r0, r4
 802261a:	f7ff fbf3 	bl	8021e04 <_free_r>
 802261e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8022620:	b111      	cbz	r1, 8022628 <_reclaim_reent+0x68>
 8022622:	4620      	mov	r0, r4
 8022624:	f7ff fbee 	bl	8021e04 <_free_r>
 8022628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802262a:	b111      	cbz	r1, 8022632 <_reclaim_reent+0x72>
 802262c:	4620      	mov	r0, r4
 802262e:	f7ff fbe9 	bl	8021e04 <_free_r>
 8022632:	69a3      	ldr	r3, [r4, #24]
 8022634:	b1e3      	cbz	r3, 8022670 <_reclaim_reent+0xb0>
 8022636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022638:	4620      	mov	r0, r4
 802263a:	4798      	blx	r3
 802263c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802263e:	b1b9      	cbz	r1, 8022670 <_reclaim_reent+0xb0>
 8022640:	4620      	mov	r0, r4
 8022642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022646:	f7ff bfad 	b.w	80225a4 <cleanup_glue>
 802264a:	5949      	ldr	r1, [r1, r5]
 802264c:	b941      	cbnz	r1, 8022660 <_reclaim_reent+0xa0>
 802264e:	3504      	adds	r5, #4
 8022650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022652:	2d80      	cmp	r5, #128	; 0x80
 8022654:	68d9      	ldr	r1, [r3, #12]
 8022656:	d1f8      	bne.n	802264a <_reclaim_reent+0x8a>
 8022658:	4620      	mov	r0, r4
 802265a:	f7ff fbd3 	bl	8021e04 <_free_r>
 802265e:	e7ba      	b.n	80225d6 <_reclaim_reent+0x16>
 8022660:	680e      	ldr	r6, [r1, #0]
 8022662:	4620      	mov	r0, r4
 8022664:	f7ff fbce 	bl	8021e04 <_free_r>
 8022668:	4631      	mov	r1, r6
 802266a:	e7ef      	b.n	802264c <_reclaim_reent+0x8c>
 802266c:	2500      	movs	r5, #0
 802266e:	e7ef      	b.n	8022650 <_reclaim_reent+0x90>
 8022670:	bd70      	pop	{r4, r5, r6, pc}
 8022672:	bf00      	nop
 8022674:	20000094 	.word	0x20000094

08022678 <_sbrk_r>:
 8022678:	b538      	push	{r3, r4, r5, lr}
 802267a:	2300      	movs	r3, #0
 802267c:	4d05      	ldr	r5, [pc, #20]	; (8022694 <_sbrk_r+0x1c>)
 802267e:	4604      	mov	r4, r0
 8022680:	4608      	mov	r0, r1
 8022682:	602b      	str	r3, [r5, #0]
 8022684:	f7df fb4e 	bl	8001d24 <_sbrk>
 8022688:	1c43      	adds	r3, r0, #1
 802268a:	d102      	bne.n	8022692 <_sbrk_r+0x1a>
 802268c:	682b      	ldr	r3, [r5, #0]
 802268e:	b103      	cbz	r3, 8022692 <_sbrk_r+0x1a>
 8022690:	6023      	str	r3, [r4, #0]
 8022692:	bd38      	pop	{r3, r4, r5, pc}
 8022694:	2001ffb4 	.word	0x2001ffb4

08022698 <_raise_r>:
 8022698:	291f      	cmp	r1, #31
 802269a:	b538      	push	{r3, r4, r5, lr}
 802269c:	4604      	mov	r4, r0
 802269e:	460d      	mov	r5, r1
 80226a0:	d904      	bls.n	80226ac <_raise_r+0x14>
 80226a2:	2316      	movs	r3, #22
 80226a4:	6003      	str	r3, [r0, #0]
 80226a6:	f04f 30ff 	mov.w	r0, #4294967295
 80226aa:	bd38      	pop	{r3, r4, r5, pc}
 80226ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80226ae:	b112      	cbz	r2, 80226b6 <_raise_r+0x1e>
 80226b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80226b4:	b94b      	cbnz	r3, 80226ca <_raise_r+0x32>
 80226b6:	4620      	mov	r0, r4
 80226b8:	f000 f830 	bl	802271c <_getpid_r>
 80226bc:	462a      	mov	r2, r5
 80226be:	4601      	mov	r1, r0
 80226c0:	4620      	mov	r0, r4
 80226c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226c6:	f000 b817 	b.w	80226f8 <_kill_r>
 80226ca:	2b01      	cmp	r3, #1
 80226cc:	d00a      	beq.n	80226e4 <_raise_r+0x4c>
 80226ce:	1c59      	adds	r1, r3, #1
 80226d0:	d103      	bne.n	80226da <_raise_r+0x42>
 80226d2:	2316      	movs	r3, #22
 80226d4:	6003      	str	r3, [r0, #0]
 80226d6:	2001      	movs	r0, #1
 80226d8:	e7e7      	b.n	80226aa <_raise_r+0x12>
 80226da:	2400      	movs	r4, #0
 80226dc:	4628      	mov	r0, r5
 80226de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80226e2:	4798      	blx	r3
 80226e4:	2000      	movs	r0, #0
 80226e6:	e7e0      	b.n	80226aa <_raise_r+0x12>

080226e8 <raise>:
 80226e8:	4b02      	ldr	r3, [pc, #8]	; (80226f4 <raise+0xc>)
 80226ea:	4601      	mov	r1, r0
 80226ec:	6818      	ldr	r0, [r3, #0]
 80226ee:	f7ff bfd3 	b.w	8022698 <_raise_r>
 80226f2:	bf00      	nop
 80226f4:	20000094 	.word	0x20000094

080226f8 <_kill_r>:
 80226f8:	b538      	push	{r3, r4, r5, lr}
 80226fa:	2300      	movs	r3, #0
 80226fc:	4d06      	ldr	r5, [pc, #24]	; (8022718 <_kill_r+0x20>)
 80226fe:	4604      	mov	r4, r0
 8022700:	4608      	mov	r0, r1
 8022702:	4611      	mov	r1, r2
 8022704:	602b      	str	r3, [r5, #0]
 8022706:	f7df fa85 	bl	8001c14 <_kill>
 802270a:	1c43      	adds	r3, r0, #1
 802270c:	d102      	bne.n	8022714 <_kill_r+0x1c>
 802270e:	682b      	ldr	r3, [r5, #0]
 8022710:	b103      	cbz	r3, 8022714 <_kill_r+0x1c>
 8022712:	6023      	str	r3, [r4, #0]
 8022714:	bd38      	pop	{r3, r4, r5, pc}
 8022716:	bf00      	nop
 8022718:	2001ffb4 	.word	0x2001ffb4

0802271c <_getpid_r>:
 802271c:	f7df ba72 	b.w	8001c04 <_getpid>

08022720 <__sread>:
 8022720:	b510      	push	{r4, lr}
 8022722:	460c      	mov	r4, r1
 8022724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022728:	f000 fad6 	bl	8022cd8 <_read_r>
 802272c:	2800      	cmp	r0, #0
 802272e:	bfab      	itete	ge
 8022730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022732:	89a3      	ldrhlt	r3, [r4, #12]
 8022734:	181b      	addge	r3, r3, r0
 8022736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802273a:	bfac      	ite	ge
 802273c:	6563      	strge	r3, [r4, #84]	; 0x54
 802273e:	81a3      	strhlt	r3, [r4, #12]
 8022740:	bd10      	pop	{r4, pc}

08022742 <__swrite>:
 8022742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022746:	461f      	mov	r7, r3
 8022748:	898b      	ldrh	r3, [r1, #12]
 802274a:	4605      	mov	r5, r0
 802274c:	460c      	mov	r4, r1
 802274e:	05db      	lsls	r3, r3, #23
 8022750:	4616      	mov	r6, r2
 8022752:	d505      	bpl.n	8022760 <__swrite+0x1e>
 8022754:	2302      	movs	r3, #2
 8022756:	2200      	movs	r2, #0
 8022758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802275c:	f000 fa2a 	bl	8022bb4 <_lseek_r>
 8022760:	89a3      	ldrh	r3, [r4, #12]
 8022762:	4632      	mov	r2, r6
 8022764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022768:	4628      	mov	r0, r5
 802276a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802276e:	81a3      	strh	r3, [r4, #12]
 8022770:	463b      	mov	r3, r7
 8022772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022776:	f000 b869 	b.w	802284c <_write_r>

0802277a <__sseek>:
 802277a:	b510      	push	{r4, lr}
 802277c:	460c      	mov	r4, r1
 802277e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022782:	f000 fa17 	bl	8022bb4 <_lseek_r>
 8022786:	1c43      	adds	r3, r0, #1
 8022788:	89a3      	ldrh	r3, [r4, #12]
 802278a:	bf15      	itete	ne
 802278c:	6560      	strne	r0, [r4, #84]	; 0x54
 802278e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022796:	81a3      	strheq	r3, [r4, #12]
 8022798:	bf18      	it	ne
 802279a:	81a3      	strhne	r3, [r4, #12]
 802279c:	bd10      	pop	{r4, pc}

0802279e <__sclose>:
 802279e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227a2:	f000 b937 	b.w	8022a14 <_close_r>
	...

080227a8 <__swbuf_r>:
 80227a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227aa:	460e      	mov	r6, r1
 80227ac:	4614      	mov	r4, r2
 80227ae:	4605      	mov	r5, r0
 80227b0:	b118      	cbz	r0, 80227ba <__swbuf_r+0x12>
 80227b2:	6983      	ldr	r3, [r0, #24]
 80227b4:	b90b      	cbnz	r3, 80227ba <__swbuf_r+0x12>
 80227b6:	f7ff fa27 	bl	8021c08 <__sinit>
 80227ba:	4b21      	ldr	r3, [pc, #132]	; (8022840 <__swbuf_r+0x98>)
 80227bc:	429c      	cmp	r4, r3
 80227be:	d12b      	bne.n	8022818 <__swbuf_r+0x70>
 80227c0:	686c      	ldr	r4, [r5, #4]
 80227c2:	69a3      	ldr	r3, [r4, #24]
 80227c4:	60a3      	str	r3, [r4, #8]
 80227c6:	89a3      	ldrh	r3, [r4, #12]
 80227c8:	071a      	lsls	r2, r3, #28
 80227ca:	d52f      	bpl.n	802282c <__swbuf_r+0x84>
 80227cc:	6923      	ldr	r3, [r4, #16]
 80227ce:	b36b      	cbz	r3, 802282c <__swbuf_r+0x84>
 80227d0:	6923      	ldr	r3, [r4, #16]
 80227d2:	b2f6      	uxtb	r6, r6
 80227d4:	6820      	ldr	r0, [r4, #0]
 80227d6:	4637      	mov	r7, r6
 80227d8:	1ac0      	subs	r0, r0, r3
 80227da:	6963      	ldr	r3, [r4, #20]
 80227dc:	4283      	cmp	r3, r0
 80227de:	dc04      	bgt.n	80227ea <__swbuf_r+0x42>
 80227e0:	4621      	mov	r1, r4
 80227e2:	4628      	mov	r0, r5
 80227e4:	f000 f9aa 	bl	8022b3c <_fflush_r>
 80227e8:	bb30      	cbnz	r0, 8022838 <__swbuf_r+0x90>
 80227ea:	68a3      	ldr	r3, [r4, #8]
 80227ec:	3001      	adds	r0, #1
 80227ee:	3b01      	subs	r3, #1
 80227f0:	60a3      	str	r3, [r4, #8]
 80227f2:	6823      	ldr	r3, [r4, #0]
 80227f4:	1c5a      	adds	r2, r3, #1
 80227f6:	6022      	str	r2, [r4, #0]
 80227f8:	701e      	strb	r6, [r3, #0]
 80227fa:	6963      	ldr	r3, [r4, #20]
 80227fc:	4283      	cmp	r3, r0
 80227fe:	d004      	beq.n	802280a <__swbuf_r+0x62>
 8022800:	89a3      	ldrh	r3, [r4, #12]
 8022802:	07db      	lsls	r3, r3, #31
 8022804:	d506      	bpl.n	8022814 <__swbuf_r+0x6c>
 8022806:	2e0a      	cmp	r6, #10
 8022808:	d104      	bne.n	8022814 <__swbuf_r+0x6c>
 802280a:	4621      	mov	r1, r4
 802280c:	4628      	mov	r0, r5
 802280e:	f000 f995 	bl	8022b3c <_fflush_r>
 8022812:	b988      	cbnz	r0, 8022838 <__swbuf_r+0x90>
 8022814:	4638      	mov	r0, r7
 8022816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022818:	4b0a      	ldr	r3, [pc, #40]	; (8022844 <__swbuf_r+0x9c>)
 802281a:	429c      	cmp	r4, r3
 802281c:	d101      	bne.n	8022822 <__swbuf_r+0x7a>
 802281e:	68ac      	ldr	r4, [r5, #8]
 8022820:	e7cf      	b.n	80227c2 <__swbuf_r+0x1a>
 8022822:	4b09      	ldr	r3, [pc, #36]	; (8022848 <__swbuf_r+0xa0>)
 8022824:	429c      	cmp	r4, r3
 8022826:	bf08      	it	eq
 8022828:	68ec      	ldreq	r4, [r5, #12]
 802282a:	e7ca      	b.n	80227c2 <__swbuf_r+0x1a>
 802282c:	4621      	mov	r1, r4
 802282e:	4628      	mov	r0, r5
 8022830:	f000 f81e 	bl	8022870 <__swsetup_r>
 8022834:	2800      	cmp	r0, #0
 8022836:	d0cb      	beq.n	80227d0 <__swbuf_r+0x28>
 8022838:	f04f 37ff 	mov.w	r7, #4294967295
 802283c:	e7ea      	b.n	8022814 <__swbuf_r+0x6c>
 802283e:	bf00      	nop
 8022840:	08024878 	.word	0x08024878
 8022844:	08024898 	.word	0x08024898
 8022848:	08024858 	.word	0x08024858

0802284c <_write_r>:
 802284c:	b538      	push	{r3, r4, r5, lr}
 802284e:	4604      	mov	r4, r0
 8022850:	4d06      	ldr	r5, [pc, #24]	; (802286c <_write_r+0x20>)
 8022852:	4608      	mov	r0, r1
 8022854:	4611      	mov	r1, r2
 8022856:	2200      	movs	r2, #0
 8022858:	602a      	str	r2, [r5, #0]
 802285a:	461a      	mov	r2, r3
 802285c:	f7df fa11 	bl	8001c82 <_write>
 8022860:	1c43      	adds	r3, r0, #1
 8022862:	d102      	bne.n	802286a <_write_r+0x1e>
 8022864:	682b      	ldr	r3, [r5, #0]
 8022866:	b103      	cbz	r3, 802286a <_write_r+0x1e>
 8022868:	6023      	str	r3, [r4, #0]
 802286a:	bd38      	pop	{r3, r4, r5, pc}
 802286c:	2001ffb4 	.word	0x2001ffb4

08022870 <__swsetup_r>:
 8022870:	4b32      	ldr	r3, [pc, #200]	; (802293c <__swsetup_r+0xcc>)
 8022872:	b570      	push	{r4, r5, r6, lr}
 8022874:	681d      	ldr	r5, [r3, #0]
 8022876:	4606      	mov	r6, r0
 8022878:	460c      	mov	r4, r1
 802287a:	b125      	cbz	r5, 8022886 <__swsetup_r+0x16>
 802287c:	69ab      	ldr	r3, [r5, #24]
 802287e:	b913      	cbnz	r3, 8022886 <__swsetup_r+0x16>
 8022880:	4628      	mov	r0, r5
 8022882:	f7ff f9c1 	bl	8021c08 <__sinit>
 8022886:	4b2e      	ldr	r3, [pc, #184]	; (8022940 <__swsetup_r+0xd0>)
 8022888:	429c      	cmp	r4, r3
 802288a:	d10f      	bne.n	80228ac <__swsetup_r+0x3c>
 802288c:	686c      	ldr	r4, [r5, #4]
 802288e:	89a3      	ldrh	r3, [r4, #12]
 8022890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022894:	0719      	lsls	r1, r3, #28
 8022896:	d42c      	bmi.n	80228f2 <__swsetup_r+0x82>
 8022898:	06dd      	lsls	r5, r3, #27
 802289a:	d411      	bmi.n	80228c0 <__swsetup_r+0x50>
 802289c:	2309      	movs	r3, #9
 802289e:	6033      	str	r3, [r6, #0]
 80228a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80228a4:	f04f 30ff 	mov.w	r0, #4294967295
 80228a8:	81a3      	strh	r3, [r4, #12]
 80228aa:	e03e      	b.n	802292a <__swsetup_r+0xba>
 80228ac:	4b25      	ldr	r3, [pc, #148]	; (8022944 <__swsetup_r+0xd4>)
 80228ae:	429c      	cmp	r4, r3
 80228b0:	d101      	bne.n	80228b6 <__swsetup_r+0x46>
 80228b2:	68ac      	ldr	r4, [r5, #8]
 80228b4:	e7eb      	b.n	802288e <__swsetup_r+0x1e>
 80228b6:	4b24      	ldr	r3, [pc, #144]	; (8022948 <__swsetup_r+0xd8>)
 80228b8:	429c      	cmp	r4, r3
 80228ba:	bf08      	it	eq
 80228bc:	68ec      	ldreq	r4, [r5, #12]
 80228be:	e7e6      	b.n	802288e <__swsetup_r+0x1e>
 80228c0:	0758      	lsls	r0, r3, #29
 80228c2:	d512      	bpl.n	80228ea <__swsetup_r+0x7a>
 80228c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80228c6:	b141      	cbz	r1, 80228da <__swsetup_r+0x6a>
 80228c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80228cc:	4299      	cmp	r1, r3
 80228ce:	d002      	beq.n	80228d6 <__swsetup_r+0x66>
 80228d0:	4630      	mov	r0, r6
 80228d2:	f7ff fa97 	bl	8021e04 <_free_r>
 80228d6:	2300      	movs	r3, #0
 80228d8:	6363      	str	r3, [r4, #52]	; 0x34
 80228da:	89a3      	ldrh	r3, [r4, #12]
 80228dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80228e0:	81a3      	strh	r3, [r4, #12]
 80228e2:	2300      	movs	r3, #0
 80228e4:	6063      	str	r3, [r4, #4]
 80228e6:	6923      	ldr	r3, [r4, #16]
 80228e8:	6023      	str	r3, [r4, #0]
 80228ea:	89a3      	ldrh	r3, [r4, #12]
 80228ec:	f043 0308 	orr.w	r3, r3, #8
 80228f0:	81a3      	strh	r3, [r4, #12]
 80228f2:	6923      	ldr	r3, [r4, #16]
 80228f4:	b94b      	cbnz	r3, 802290a <__swsetup_r+0x9a>
 80228f6:	89a3      	ldrh	r3, [r4, #12]
 80228f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80228fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022900:	d003      	beq.n	802290a <__swsetup_r+0x9a>
 8022902:	4621      	mov	r1, r4
 8022904:	4630      	mov	r0, r6
 8022906:	f000 f98d 	bl	8022c24 <__smakebuf_r>
 802290a:	89a0      	ldrh	r0, [r4, #12]
 802290c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022910:	f010 0301 	ands.w	r3, r0, #1
 8022914:	d00a      	beq.n	802292c <__swsetup_r+0xbc>
 8022916:	2300      	movs	r3, #0
 8022918:	60a3      	str	r3, [r4, #8]
 802291a:	6963      	ldr	r3, [r4, #20]
 802291c:	425b      	negs	r3, r3
 802291e:	61a3      	str	r3, [r4, #24]
 8022920:	6923      	ldr	r3, [r4, #16]
 8022922:	b943      	cbnz	r3, 8022936 <__swsetup_r+0xc6>
 8022924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022928:	d1ba      	bne.n	80228a0 <__swsetup_r+0x30>
 802292a:	bd70      	pop	{r4, r5, r6, pc}
 802292c:	0781      	lsls	r1, r0, #30
 802292e:	bf58      	it	pl
 8022930:	6963      	ldrpl	r3, [r4, #20]
 8022932:	60a3      	str	r3, [r4, #8]
 8022934:	e7f4      	b.n	8022920 <__swsetup_r+0xb0>
 8022936:	2000      	movs	r0, #0
 8022938:	e7f7      	b.n	802292a <__swsetup_r+0xba>
 802293a:	bf00      	nop
 802293c:	20000094 	.word	0x20000094
 8022940:	08024878 	.word	0x08024878
 8022944:	08024898 	.word	0x08024898
 8022948:	08024858 	.word	0x08024858

0802294c <__register_exitproc>:
 802294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022950:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8022a10 <__register_exitproc+0xc4>
 8022954:	4606      	mov	r6, r0
 8022956:	461f      	mov	r7, r3
 8022958:	460d      	mov	r5, r1
 802295a:	f8d8 0000 	ldr.w	r0, [r8]
 802295e:	4691      	mov	r9, r2
 8022960:	f7ff fa27 	bl	8021db2 <__retarget_lock_acquire_recursive>
 8022964:	4b26      	ldr	r3, [pc, #152]	; (8022a00 <__register_exitproc+0xb4>)
 8022966:	681c      	ldr	r4, [r3, #0]
 8022968:	b934      	cbnz	r4, 8022978 <__register_exitproc+0x2c>
 802296a:	4c26      	ldr	r4, [pc, #152]	; (8022a04 <__register_exitproc+0xb8>)
 802296c:	601c      	str	r4, [r3, #0]
 802296e:	4b26      	ldr	r3, [pc, #152]	; (8022a08 <__register_exitproc+0xbc>)
 8022970:	b113      	cbz	r3, 8022978 <__register_exitproc+0x2c>
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022978:	6863      	ldr	r3, [r4, #4]
 802297a:	2b1f      	cmp	r3, #31
 802297c:	dd07      	ble.n	802298e <__register_exitproc+0x42>
 802297e:	f8d8 0000 	ldr.w	r0, [r8]
 8022982:	f7ff fa18 	bl	8021db6 <__retarget_lock_release_recursive>
 8022986:	f04f 30ff 	mov.w	r0, #4294967295
 802298a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802298e:	b35e      	cbz	r6, 80229e8 <__register_exitproc+0x9c>
 8022990:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022994:	b988      	cbnz	r0, 80229ba <__register_exitproc+0x6e>
 8022996:	4b1d      	ldr	r3, [pc, #116]	; (8022a0c <__register_exitproc+0xc0>)
 8022998:	b923      	cbnz	r3, 80229a4 <__register_exitproc+0x58>
 802299a:	f8d8 0000 	ldr.w	r0, [r8]
 802299e:	f7ff fa09 	bl	8021db4 <__retarget_lock_release>
 80229a2:	e7f0      	b.n	8022986 <__register_exitproc+0x3a>
 80229a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80229a8:	f7ff fa06 	bl	8021db8 <malloc>
 80229ac:	2800      	cmp	r0, #0
 80229ae:	d0f4      	beq.n	802299a <__register_exitproc+0x4e>
 80229b0:	2300      	movs	r3, #0
 80229b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80229b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80229ba:	6863      	ldr	r3, [r4, #4]
 80229bc:	2201      	movs	r2, #1
 80229be:	2e02      	cmp	r6, #2
 80229c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80229c4:	fa02 f203 	lsl.w	r2, r2, r3
 80229c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80229cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80229d0:	ea43 0302 	orr.w	r3, r3, r2
 80229d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80229d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80229dc:	bf02      	ittt	eq
 80229de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80229e2:	4313      	orreq	r3, r2
 80229e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80229e8:	6863      	ldr	r3, [r4, #4]
 80229ea:	f8d8 0000 	ldr.w	r0, [r8]
 80229ee:	1c5a      	adds	r2, r3, #1
 80229f0:	3302      	adds	r3, #2
 80229f2:	6062      	str	r2, [r4, #4]
 80229f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80229f8:	f7ff f9dd 	bl	8021db6 <__retarget_lock_release_recursive>
 80229fc:	2000      	movs	r0, #0
 80229fe:	e7c4      	b.n	802298a <__register_exitproc+0x3e>
 8022a00:	20020044 	.word	0x20020044
 8022a04:	2001ffb8 	.word	0x2001ffb8
 8022a08:	080248f0 	.word	0x080248f0
 8022a0c:	08021db9 	.word	0x08021db9
 8022a10:	200000f8 	.word	0x200000f8

08022a14 <_close_r>:
 8022a14:	b538      	push	{r3, r4, r5, lr}
 8022a16:	2300      	movs	r3, #0
 8022a18:	4d05      	ldr	r5, [pc, #20]	; (8022a30 <_close_r+0x1c>)
 8022a1a:	4604      	mov	r4, r0
 8022a1c:	4608      	mov	r0, r1
 8022a1e:	602b      	str	r3, [r5, #0]
 8022a20:	f7df f94b 	bl	8001cba <_close>
 8022a24:	1c43      	adds	r3, r0, #1
 8022a26:	d102      	bne.n	8022a2e <_close_r+0x1a>
 8022a28:	682b      	ldr	r3, [r5, #0]
 8022a2a:	b103      	cbz	r3, 8022a2e <_close_r+0x1a>
 8022a2c:	6023      	str	r3, [r4, #0]
 8022a2e:	bd38      	pop	{r3, r4, r5, pc}
 8022a30:	2001ffb4 	.word	0x2001ffb4

08022a34 <__sflush_r>:
 8022a34:	898a      	ldrh	r2, [r1, #12]
 8022a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a3a:	4605      	mov	r5, r0
 8022a3c:	0710      	lsls	r0, r2, #28
 8022a3e:	460c      	mov	r4, r1
 8022a40:	d458      	bmi.n	8022af4 <__sflush_r+0xc0>
 8022a42:	684b      	ldr	r3, [r1, #4]
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	dc05      	bgt.n	8022a54 <__sflush_r+0x20>
 8022a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	dc02      	bgt.n	8022a54 <__sflush_r+0x20>
 8022a4e:	2000      	movs	r0, #0
 8022a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a56:	2e00      	cmp	r6, #0
 8022a58:	d0f9      	beq.n	8022a4e <__sflush_r+0x1a>
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022a60:	682f      	ldr	r7, [r5, #0]
 8022a62:	602b      	str	r3, [r5, #0]
 8022a64:	d032      	beq.n	8022acc <__sflush_r+0x98>
 8022a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022a68:	89a3      	ldrh	r3, [r4, #12]
 8022a6a:	075a      	lsls	r2, r3, #29
 8022a6c:	d505      	bpl.n	8022a7a <__sflush_r+0x46>
 8022a6e:	6863      	ldr	r3, [r4, #4]
 8022a70:	1ac0      	subs	r0, r0, r3
 8022a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022a74:	b10b      	cbz	r3, 8022a7a <__sflush_r+0x46>
 8022a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022a78:	1ac0      	subs	r0, r0, r3
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	4602      	mov	r2, r0
 8022a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a80:	4628      	mov	r0, r5
 8022a82:	6a21      	ldr	r1, [r4, #32]
 8022a84:	47b0      	blx	r6
 8022a86:	1c43      	adds	r3, r0, #1
 8022a88:	89a3      	ldrh	r3, [r4, #12]
 8022a8a:	d106      	bne.n	8022a9a <__sflush_r+0x66>
 8022a8c:	6829      	ldr	r1, [r5, #0]
 8022a8e:	291d      	cmp	r1, #29
 8022a90:	d82c      	bhi.n	8022aec <__sflush_r+0xb8>
 8022a92:	4a29      	ldr	r2, [pc, #164]	; (8022b38 <__sflush_r+0x104>)
 8022a94:	40ca      	lsrs	r2, r1
 8022a96:	07d6      	lsls	r6, r2, #31
 8022a98:	d528      	bpl.n	8022aec <__sflush_r+0xb8>
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	04d9      	lsls	r1, r3, #19
 8022a9e:	6062      	str	r2, [r4, #4]
 8022aa0:	6922      	ldr	r2, [r4, #16]
 8022aa2:	6022      	str	r2, [r4, #0]
 8022aa4:	d504      	bpl.n	8022ab0 <__sflush_r+0x7c>
 8022aa6:	1c42      	adds	r2, r0, #1
 8022aa8:	d101      	bne.n	8022aae <__sflush_r+0x7a>
 8022aaa:	682b      	ldr	r3, [r5, #0]
 8022aac:	b903      	cbnz	r3, 8022ab0 <__sflush_r+0x7c>
 8022aae:	6560      	str	r0, [r4, #84]	; 0x54
 8022ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ab2:	602f      	str	r7, [r5, #0]
 8022ab4:	2900      	cmp	r1, #0
 8022ab6:	d0ca      	beq.n	8022a4e <__sflush_r+0x1a>
 8022ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022abc:	4299      	cmp	r1, r3
 8022abe:	d002      	beq.n	8022ac6 <__sflush_r+0x92>
 8022ac0:	4628      	mov	r0, r5
 8022ac2:	f7ff f99f 	bl	8021e04 <_free_r>
 8022ac6:	2000      	movs	r0, #0
 8022ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8022aca:	e7c1      	b.n	8022a50 <__sflush_r+0x1c>
 8022acc:	6a21      	ldr	r1, [r4, #32]
 8022ace:	2301      	movs	r3, #1
 8022ad0:	4628      	mov	r0, r5
 8022ad2:	47b0      	blx	r6
 8022ad4:	1c41      	adds	r1, r0, #1
 8022ad6:	d1c7      	bne.n	8022a68 <__sflush_r+0x34>
 8022ad8:	682b      	ldr	r3, [r5, #0]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d0c4      	beq.n	8022a68 <__sflush_r+0x34>
 8022ade:	2b1d      	cmp	r3, #29
 8022ae0:	d001      	beq.n	8022ae6 <__sflush_r+0xb2>
 8022ae2:	2b16      	cmp	r3, #22
 8022ae4:	d101      	bne.n	8022aea <__sflush_r+0xb6>
 8022ae6:	602f      	str	r7, [r5, #0]
 8022ae8:	e7b1      	b.n	8022a4e <__sflush_r+0x1a>
 8022aea:	89a3      	ldrh	r3, [r4, #12]
 8022aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022af0:	81a3      	strh	r3, [r4, #12]
 8022af2:	e7ad      	b.n	8022a50 <__sflush_r+0x1c>
 8022af4:	690f      	ldr	r7, [r1, #16]
 8022af6:	2f00      	cmp	r7, #0
 8022af8:	d0a9      	beq.n	8022a4e <__sflush_r+0x1a>
 8022afa:	0793      	lsls	r3, r2, #30
 8022afc:	680e      	ldr	r6, [r1, #0]
 8022afe:	600f      	str	r7, [r1, #0]
 8022b00:	bf0c      	ite	eq
 8022b02:	694b      	ldreq	r3, [r1, #20]
 8022b04:	2300      	movne	r3, #0
 8022b06:	eba6 0807 	sub.w	r8, r6, r7
 8022b0a:	608b      	str	r3, [r1, #8]
 8022b0c:	f1b8 0f00 	cmp.w	r8, #0
 8022b10:	dd9d      	ble.n	8022a4e <__sflush_r+0x1a>
 8022b12:	4643      	mov	r3, r8
 8022b14:	463a      	mov	r2, r7
 8022b16:	6a21      	ldr	r1, [r4, #32]
 8022b18:	4628      	mov	r0, r5
 8022b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022b1c:	47b0      	blx	r6
 8022b1e:	2800      	cmp	r0, #0
 8022b20:	dc06      	bgt.n	8022b30 <__sflush_r+0xfc>
 8022b22:	89a3      	ldrh	r3, [r4, #12]
 8022b24:	f04f 30ff 	mov.w	r0, #4294967295
 8022b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b2c:	81a3      	strh	r3, [r4, #12]
 8022b2e:	e78f      	b.n	8022a50 <__sflush_r+0x1c>
 8022b30:	4407      	add	r7, r0
 8022b32:	eba8 0800 	sub.w	r8, r8, r0
 8022b36:	e7e9      	b.n	8022b0c <__sflush_r+0xd8>
 8022b38:	20400001 	.word	0x20400001

08022b3c <_fflush_r>:
 8022b3c:	b538      	push	{r3, r4, r5, lr}
 8022b3e:	690b      	ldr	r3, [r1, #16]
 8022b40:	4605      	mov	r5, r0
 8022b42:	460c      	mov	r4, r1
 8022b44:	b913      	cbnz	r3, 8022b4c <_fflush_r+0x10>
 8022b46:	2500      	movs	r5, #0
 8022b48:	4628      	mov	r0, r5
 8022b4a:	bd38      	pop	{r3, r4, r5, pc}
 8022b4c:	b118      	cbz	r0, 8022b56 <_fflush_r+0x1a>
 8022b4e:	6983      	ldr	r3, [r0, #24]
 8022b50:	b90b      	cbnz	r3, 8022b56 <_fflush_r+0x1a>
 8022b52:	f7ff f859 	bl	8021c08 <__sinit>
 8022b56:	4b14      	ldr	r3, [pc, #80]	; (8022ba8 <_fflush_r+0x6c>)
 8022b58:	429c      	cmp	r4, r3
 8022b5a:	d11b      	bne.n	8022b94 <_fflush_r+0x58>
 8022b5c:	686c      	ldr	r4, [r5, #4]
 8022b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d0ef      	beq.n	8022b46 <_fflush_r+0xa>
 8022b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022b68:	07d0      	lsls	r0, r2, #31
 8022b6a:	d404      	bmi.n	8022b76 <_fflush_r+0x3a>
 8022b6c:	0599      	lsls	r1, r3, #22
 8022b6e:	d402      	bmi.n	8022b76 <_fflush_r+0x3a>
 8022b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b72:	f7ff f91e 	bl	8021db2 <__retarget_lock_acquire_recursive>
 8022b76:	4628      	mov	r0, r5
 8022b78:	4621      	mov	r1, r4
 8022b7a:	f7ff ff5b 	bl	8022a34 <__sflush_r>
 8022b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b80:	4605      	mov	r5, r0
 8022b82:	07da      	lsls	r2, r3, #31
 8022b84:	d4e0      	bmi.n	8022b48 <_fflush_r+0xc>
 8022b86:	89a3      	ldrh	r3, [r4, #12]
 8022b88:	059b      	lsls	r3, r3, #22
 8022b8a:	d4dd      	bmi.n	8022b48 <_fflush_r+0xc>
 8022b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b8e:	f7ff f912 	bl	8021db6 <__retarget_lock_release_recursive>
 8022b92:	e7d9      	b.n	8022b48 <_fflush_r+0xc>
 8022b94:	4b05      	ldr	r3, [pc, #20]	; (8022bac <_fflush_r+0x70>)
 8022b96:	429c      	cmp	r4, r3
 8022b98:	d101      	bne.n	8022b9e <_fflush_r+0x62>
 8022b9a:	68ac      	ldr	r4, [r5, #8]
 8022b9c:	e7df      	b.n	8022b5e <_fflush_r+0x22>
 8022b9e:	4b04      	ldr	r3, [pc, #16]	; (8022bb0 <_fflush_r+0x74>)
 8022ba0:	429c      	cmp	r4, r3
 8022ba2:	bf08      	it	eq
 8022ba4:	68ec      	ldreq	r4, [r5, #12]
 8022ba6:	e7da      	b.n	8022b5e <_fflush_r+0x22>
 8022ba8:	08024878 	.word	0x08024878
 8022bac:	08024898 	.word	0x08024898
 8022bb0:	08024858 	.word	0x08024858

08022bb4 <_lseek_r>:
 8022bb4:	b538      	push	{r3, r4, r5, lr}
 8022bb6:	4604      	mov	r4, r0
 8022bb8:	4d06      	ldr	r5, [pc, #24]	; (8022bd4 <_lseek_r+0x20>)
 8022bba:	4608      	mov	r0, r1
 8022bbc:	4611      	mov	r1, r2
 8022bbe:	2200      	movs	r2, #0
 8022bc0:	602a      	str	r2, [r5, #0]
 8022bc2:	461a      	mov	r2, r3
 8022bc4:	f7df f8a0 	bl	8001d08 <_lseek>
 8022bc8:	1c43      	adds	r3, r0, #1
 8022bca:	d102      	bne.n	8022bd2 <_lseek_r+0x1e>
 8022bcc:	682b      	ldr	r3, [r5, #0]
 8022bce:	b103      	cbz	r3, 8022bd2 <_lseek_r+0x1e>
 8022bd0:	6023      	str	r3, [r4, #0]
 8022bd2:	bd38      	pop	{r3, r4, r5, pc}
 8022bd4:	2001ffb4 	.word	0x2001ffb4

08022bd8 <__swhatbuf_r>:
 8022bd8:	b570      	push	{r4, r5, r6, lr}
 8022bda:	460e      	mov	r6, r1
 8022bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022be0:	b096      	sub	sp, #88	; 0x58
 8022be2:	4614      	mov	r4, r2
 8022be4:	2900      	cmp	r1, #0
 8022be6:	461d      	mov	r5, r3
 8022be8:	da08      	bge.n	8022bfc <__swhatbuf_r+0x24>
 8022bea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022bee:	2200      	movs	r2, #0
 8022bf0:	602a      	str	r2, [r5, #0]
 8022bf2:	061a      	lsls	r2, r3, #24
 8022bf4:	d410      	bmi.n	8022c18 <__swhatbuf_r+0x40>
 8022bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022bfa:	e00e      	b.n	8022c1a <__swhatbuf_r+0x42>
 8022bfc:	466a      	mov	r2, sp
 8022bfe:	f000 f87d 	bl	8022cfc <_fstat_r>
 8022c02:	2800      	cmp	r0, #0
 8022c04:	dbf1      	blt.n	8022bea <__swhatbuf_r+0x12>
 8022c06:	9a01      	ldr	r2, [sp, #4]
 8022c08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022c0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022c10:	425a      	negs	r2, r3
 8022c12:	415a      	adcs	r2, r3
 8022c14:	602a      	str	r2, [r5, #0]
 8022c16:	e7ee      	b.n	8022bf6 <__swhatbuf_r+0x1e>
 8022c18:	2340      	movs	r3, #64	; 0x40
 8022c1a:	2000      	movs	r0, #0
 8022c1c:	6023      	str	r3, [r4, #0]
 8022c1e:	b016      	add	sp, #88	; 0x58
 8022c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08022c24 <__smakebuf_r>:
 8022c24:	898b      	ldrh	r3, [r1, #12]
 8022c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022c28:	079d      	lsls	r5, r3, #30
 8022c2a:	4606      	mov	r6, r0
 8022c2c:	460c      	mov	r4, r1
 8022c2e:	d507      	bpl.n	8022c40 <__smakebuf_r+0x1c>
 8022c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022c34:	6023      	str	r3, [r4, #0]
 8022c36:	6123      	str	r3, [r4, #16]
 8022c38:	2301      	movs	r3, #1
 8022c3a:	6163      	str	r3, [r4, #20]
 8022c3c:	b002      	add	sp, #8
 8022c3e:	bd70      	pop	{r4, r5, r6, pc}
 8022c40:	ab01      	add	r3, sp, #4
 8022c42:	466a      	mov	r2, sp
 8022c44:	f7ff ffc8 	bl	8022bd8 <__swhatbuf_r>
 8022c48:	9900      	ldr	r1, [sp, #0]
 8022c4a:	4605      	mov	r5, r0
 8022c4c:	4630      	mov	r0, r6
 8022c4e:	f7ff f945 	bl	8021edc <_malloc_r>
 8022c52:	b948      	cbnz	r0, 8022c68 <__smakebuf_r+0x44>
 8022c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c58:	059a      	lsls	r2, r3, #22
 8022c5a:	d4ef      	bmi.n	8022c3c <__smakebuf_r+0x18>
 8022c5c:	f023 0303 	bic.w	r3, r3, #3
 8022c60:	f043 0302 	orr.w	r3, r3, #2
 8022c64:	81a3      	strh	r3, [r4, #12]
 8022c66:	e7e3      	b.n	8022c30 <__smakebuf_r+0xc>
 8022c68:	4b0d      	ldr	r3, [pc, #52]	; (8022ca0 <__smakebuf_r+0x7c>)
 8022c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8022c6c:	89a3      	ldrh	r3, [r4, #12]
 8022c6e:	6020      	str	r0, [r4, #0]
 8022c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022c74:	6120      	str	r0, [r4, #16]
 8022c76:	81a3      	strh	r3, [r4, #12]
 8022c78:	9b00      	ldr	r3, [sp, #0]
 8022c7a:	6163      	str	r3, [r4, #20]
 8022c7c:	9b01      	ldr	r3, [sp, #4]
 8022c7e:	b15b      	cbz	r3, 8022c98 <__smakebuf_r+0x74>
 8022c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022c84:	4630      	mov	r0, r6
 8022c86:	f000 f84b 	bl	8022d20 <_isatty_r>
 8022c8a:	b128      	cbz	r0, 8022c98 <__smakebuf_r+0x74>
 8022c8c:	89a3      	ldrh	r3, [r4, #12]
 8022c8e:	f023 0303 	bic.w	r3, r3, #3
 8022c92:	f043 0301 	orr.w	r3, r3, #1
 8022c96:	81a3      	strh	r3, [r4, #12]
 8022c98:	89a0      	ldrh	r0, [r4, #12]
 8022c9a:	4305      	orrs	r5, r0
 8022c9c:	81a5      	strh	r5, [r4, #12]
 8022c9e:	e7cd      	b.n	8022c3c <__smakebuf_r+0x18>
 8022ca0:	08021ba1 	.word	0x08021ba1

08022ca4 <memchr>:
 8022ca4:	b2c9      	uxtb	r1, r1
 8022ca6:	4402      	add	r2, r0
 8022ca8:	b510      	push	{r4, lr}
 8022caa:	4290      	cmp	r0, r2
 8022cac:	4603      	mov	r3, r0
 8022cae:	d101      	bne.n	8022cb4 <memchr+0x10>
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	e003      	b.n	8022cbc <memchr+0x18>
 8022cb4:	781c      	ldrb	r4, [r3, #0]
 8022cb6:	3001      	adds	r0, #1
 8022cb8:	428c      	cmp	r4, r1
 8022cba:	d1f6      	bne.n	8022caa <memchr+0x6>
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	bd10      	pop	{r4, pc}

08022cc0 <__malloc_lock>:
 8022cc0:	4801      	ldr	r0, [pc, #4]	; (8022cc8 <__malloc_lock+0x8>)
 8022cc2:	f7ff b876 	b.w	8021db2 <__retarget_lock_acquire_recursive>
 8022cc6:	bf00      	nop
 8022cc8:	2001fea1 	.word	0x2001fea1

08022ccc <__malloc_unlock>:
 8022ccc:	4801      	ldr	r0, [pc, #4]	; (8022cd4 <__malloc_unlock+0x8>)
 8022cce:	f7ff b872 	b.w	8021db6 <__retarget_lock_release_recursive>
 8022cd2:	bf00      	nop
 8022cd4:	2001fea1 	.word	0x2001fea1

08022cd8 <_read_r>:
 8022cd8:	b538      	push	{r3, r4, r5, lr}
 8022cda:	4604      	mov	r4, r0
 8022cdc:	4d06      	ldr	r5, [pc, #24]	; (8022cf8 <_read_r+0x20>)
 8022cde:	4608      	mov	r0, r1
 8022ce0:	4611      	mov	r1, r2
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	602a      	str	r2, [r5, #0]
 8022ce6:	461a      	mov	r2, r3
 8022ce8:	f7de ffae 	bl	8001c48 <_read>
 8022cec:	1c43      	adds	r3, r0, #1
 8022cee:	d102      	bne.n	8022cf6 <_read_r+0x1e>
 8022cf0:	682b      	ldr	r3, [r5, #0]
 8022cf2:	b103      	cbz	r3, 8022cf6 <_read_r+0x1e>
 8022cf4:	6023      	str	r3, [r4, #0]
 8022cf6:	bd38      	pop	{r3, r4, r5, pc}
 8022cf8:	2001ffb4 	.word	0x2001ffb4

08022cfc <_fstat_r>:
 8022cfc:	b538      	push	{r3, r4, r5, lr}
 8022cfe:	2300      	movs	r3, #0
 8022d00:	4d06      	ldr	r5, [pc, #24]	; (8022d1c <_fstat_r+0x20>)
 8022d02:	4604      	mov	r4, r0
 8022d04:	4608      	mov	r0, r1
 8022d06:	4611      	mov	r1, r2
 8022d08:	602b      	str	r3, [r5, #0]
 8022d0a:	f7de ffe2 	bl	8001cd2 <_fstat>
 8022d0e:	1c43      	adds	r3, r0, #1
 8022d10:	d102      	bne.n	8022d18 <_fstat_r+0x1c>
 8022d12:	682b      	ldr	r3, [r5, #0]
 8022d14:	b103      	cbz	r3, 8022d18 <_fstat_r+0x1c>
 8022d16:	6023      	str	r3, [r4, #0]
 8022d18:	bd38      	pop	{r3, r4, r5, pc}
 8022d1a:	bf00      	nop
 8022d1c:	2001ffb4 	.word	0x2001ffb4

08022d20 <_isatty_r>:
 8022d20:	b538      	push	{r3, r4, r5, lr}
 8022d22:	2300      	movs	r3, #0
 8022d24:	4d05      	ldr	r5, [pc, #20]	; (8022d3c <_isatty_r+0x1c>)
 8022d26:	4604      	mov	r4, r0
 8022d28:	4608      	mov	r0, r1
 8022d2a:	602b      	str	r3, [r5, #0]
 8022d2c:	f7de ffe1 	bl	8001cf2 <_isatty>
 8022d30:	1c43      	adds	r3, r0, #1
 8022d32:	d102      	bne.n	8022d3a <_isatty_r+0x1a>
 8022d34:	682b      	ldr	r3, [r5, #0]
 8022d36:	b103      	cbz	r3, 8022d3a <_isatty_r+0x1a>
 8022d38:	6023      	str	r3, [r4, #0]
 8022d3a:	bd38      	pop	{r3, r4, r5, pc}
 8022d3c:	2001ffb4 	.word	0x2001ffb4

08022d40 <_init>:
 8022d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d42:	bf00      	nop
 8022d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d46:	bc08      	pop	{r3}
 8022d48:	469e      	mov	lr, r3
 8022d4a:	4770      	bx	lr

08022d4c <_fini>:
 8022d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d4e:	bf00      	nop
 8022d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d52:	bc08      	pop	{r3}
 8022d54:	469e      	mov	lr, r3
 8022d56:	4770      	bx	lr

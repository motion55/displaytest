
displaytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022094  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a8c  08022294  08022294  00032294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08023d20  08023d20  00033d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08023ec8  08023ec8  00033ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00033900  08023ee0  08023ee0  00033ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080577e0  080577e0  000677e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080577f0  080577f0  0008c2fc  2**0
                  CONTENTS
  8 .ARM          00000008  080577f0  080577f0  000677f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080577f8  080577f8  0008c2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080577f8  080577f8  000677f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0805780c  0805780c  0006780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  08057814  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 0001c200  200000fc  08057910  000700fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00003d48  2001c2fc  08073b10  0008c2fc  2**2
                  ALLOC
 15 ._user_heap_stack 00000604  20020044  08073b10  00090044  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  0008c2fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   00084e40  00000000  00000000  0008c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000fca8  00000000  00000000  00111172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003f00  00000000  00000000  00120e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003a40  00000000  00000000  00124d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000ee0b  00000000  00000000  00128760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000492d3  00000000  00000000  0013756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00165686  00000000  00000000  0018083e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  002e5ec4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00011438  00000000  00000000  002e5f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2001c2fc 	.word	0x2001c2fc
 800021c:	00000000 	.word	0x00000000
 8000220:	0802227c 	.word	0x0802227c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2001c300 	.word	0x2001c300
 800023c:	0802227c 	.word	0x0802227c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f001 fcce 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f848 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005cc:	f000 f8ac 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fcf8 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_ADC1_Init>
  MX_CRC_Init();
 80005d8:	f000 f94c 	bl	8000874 <MX_CRC_Init>
  MX_FMC_Init();
 80005dc:	f000 fc88 	bl	8000ef0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005e0:	f000 f96a 	bl	80008b8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f9bc 	bl	8000960 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa08 	bl	80009fc <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005ec:	f000 fa52 	bl	8000a94 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80005f0:	f000 fa8e 	bl	8000b10 <MX_SAI1_Init>
  MX_SPI1_Init();
 80005f4:	f000 faf2 	bl	8000bdc <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f8:	f000 fb2c 	bl	8000c54 <MX_TIM4_Init>
  MX_TIM16_Init();
 80005fc:	f000 fb7a 	bl	8000cf4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000600:	f000 fb9e 	bl	8000d40 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000604:	f000 fc16 	bl	8000e34 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000608:	f000 fc4a 	bl	8000ea0 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800060c:	f000 f994 	bl	8000938 <MX_ICACHE_Init>
  MX_TouchGFX_Init();
 8000610:	f00c f9e3 	bl	800c9da <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000614:	f00c f9da 	bl	800c9cc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f009 f8fc 	bl	8009814 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <main+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x88>)
 8000622:	f009 f941 	bl	80098a8 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <main+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of VSyncTask */
  VSyncTaskHandle = osThreadNew(StartVSyncTask, NULL, &VSyncTask_attributes);
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <main+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x94>)
 8000632:	f009 f939 	bl	80098a8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <main+0x98>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f009 f90e 	bl	800985c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x80>
 8000642:	bf00      	nop
 8000644:	08022bf8 	.word	0x08022bf8
 8000648:	080012a5 	.word	0x080012a5
 800064c:	2001caa4 	.word	0x2001caa4
 8000650:	08022c1c 	.word	0x08022c1c
 8000654:	080012b9 	.word	0x080012b9
 8000658:	2001caa8 	.word	0x2001caa8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2248      	movs	r2, #72	; 0x48
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f020 fe5f 	bl	802132e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800067e:	2000      	movs	r0, #0
 8000680:	f003 fb2c 	bl	8003cdc <HAL_PWREx_ControlVoltageScaling>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800068a:	f000 fe31 	bl	80012f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f003 fb07 	bl	8003ca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xc8>)
 800069a:	f023 0318 	bic.w	r3, r3, #24
 800069e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80006a2:	2316      	movs	r3, #22
 80006a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2381      	movs	r3, #129	; 0x81
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006bc:	23b0      	movs	r3, #176	; 0xb0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c8:	230c      	movs	r3, #12
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006cc:	2337      	movs	r3, #55	; 0x37
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fb8b 	bl	8003dfc <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fe00 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f84d 	bl	80047a8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000714:	f000 fdec 	bl	80012f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000718:	f005 fe82 	bl	8006420 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071c:	bf00      	nop
 800071e:	3760      	adds	r7, #96	; 0x60
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0a6      	sub	sp, #152	; 0x98
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2294      	movs	r2, #148	; 0x94
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f020 fdfa 	bl	802132e <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 800073a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000740:	2300      	movs	r3, #0
 8000742:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000754:	2330      	movs	r3, #48	; 0x30
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000758:	2311      	movs	r3, #17
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <PeriphCommonClock_Config+0x5c>)
 8000766:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fb32 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000776:	f000 fdbb 	bl	80012f0 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3798      	adds	r7, #152	; 0x98
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	01010000 	.word	0x01010000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_ADC1_Init+0xe0>)
 800080c:	f001 fd84 	bl	8002318 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 fd6b 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000826:	f002 fad3 	bl	8002dd0 <HAL_ADCEx_MultiModeConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000830:	f000 fd5e 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ADC1_Init+0xe8>)
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	; 0x7f
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000852:	f001 fead 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800085c:	f000 fd48 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2001c318 	.word	0x2001c318
 800086c:	42028000 	.word	0x42028000
 8000870:	25b00200 	.word	0x25b00200

08000874 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_CRC_Init+0x3c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <MX_CRC_Init+0x40>)
 800087c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_CRC_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000898:	2201      	movs	r2, #1
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_CRC_Init+0x3c>)
 800089e:	f002 fc1b 	bl	80030d8 <HAL_CRC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a8:	f000 fd22 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2001c380 	.word	0x2001c380
 80008b4:	40023000 	.word	0x40023000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_I2C1_Init+0x74>)
 80008f4:	f002 fe7a 	bl	80035ec <HAL_I2C_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008fe:	f000 fcf7 	bl	80012f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000906:	f002 ff00 	bl	800370a <HAL_I2CEx_ConfigAnalogFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000910:	f000 fcee 	bl	80012f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2C1_Init+0x74>)
 8000918:	f002 ff42 	bl	80037a0 <HAL_I2CEx_ConfigDigitalFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fce5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2001c3a4 	.word	0x2001c3a4
 8000930:	40005400 	.word	0x40005400
 8000934:	40505681 	.word	0x40505681

08000938 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800093c:	2000      	movs	r0, #0
 800093e:	f002 ff7b 	bl	8003838 <HAL_ICACHE_ConfigAssociativityMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000948:	f000 fcd2 	bl	80012f0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800094c:	f002 ff94 	bl	8003878 <HAL_ICACHE_Enable>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000956:	f000 fccb 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_LPUART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_LPUART1_UART_Init+0x98>)
 800096e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000984:	220c      	movs	r2, #12
 8000986:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f007 fd34 	bl	8008414 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009b2:	f000 fc9d 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	f008 facd 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fc94 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009cc:	f008 fb02 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f000 fc8b 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009dc:	f008 fa83 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009e6:	f000 fc83 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2001c3f8 	.word	0x2001c3f8
 80009f4:	40008000 	.word	0x40008000
 80009f8:	00033324 	.word	0x00033324

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f007 fce5 	bl	8008414 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fc4e 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f008 fa7e 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 fc45 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f008 fab3 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fc3c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f008 fa34 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 fc34 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2001c48c 	.word	0x2001c48c
 8000a90:	40013800 	.word	0x40013800

08000a94 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_OCTOSPI1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000af4:	f002 fed0 	bl	8003898 <HAL_OSPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fbf7 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2001c520 	.word	0x2001c520
 8000b0c:	44021000 	.word	0x44021000

08000b10 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <MX_SAI1_Init+0xc4>)
 8000b18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_SAI1_Init+0xc8>)
 8000b54:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bbc:	f005 ff86 	bl	8006acc <HAL_SAI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000bc6:	f000 fb93 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2001c578 	.word	0x2001c578
 8000bd4:	40015404 	.word	0x40015404
 8000bd8:	0002ee00 	.word	0x0002ee00

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c34:	2208      	movs	r2, #8
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c3a:	f006 f971 	bl	8006f20 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f000 fb54 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2001c610 	.word	0x2001c610
 8000c50:	40013000 	.word	0x40013000

08000c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_TIM4_Init+0x9c>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c9c:	f006 fa2b 	bl	80070f6 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 fb23 	bl	80012f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000caa:	2307      	movs	r3, #7
 8000cac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cba:	f006 fd77 	bl	80077ac <HAL_TIM_SlaveConfigSynchro>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000cc4:	f000 fb14 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cd6:	f007 fa57 	bl	8008188 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 fb06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2001c674 	.word	0x2001c674
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_TIM16_Init+0x48>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d26:	f006 f9e6 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d30:	f000 fade 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2001c6c0 	.word	0x2001c6c0
 8000d3c:	40014400 	.word	0x40014400

08000d40 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2234      	movs	r2, #52	; 0x34
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f020 fae4 	bl	802132e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <MX_TIM17_Init+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d94:	f006 f9af 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9e:	f000 faa7 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000da4:	f006 fa6e 	bl	8007284 <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000dae:	f000 fa9f 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000dd8:	f006 fbd4 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000de2:	f000 fa85 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e0e:	f007 fa43 	bl	8008298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e18:	f000 fa6a 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e1e:	f000 fd41 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2001c70c 	.word	0x2001c70c
 8000e30:	40014800 	.word	0x40014800

08000e34 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e4a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000e4e:	f7ff fb9f 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fb84 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fb81 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_UCPD1_Init+0x64>)
 8000e72:	f008 fbe2 	bl	800963a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_UCPD1_Init+0x68>)
 8000e8a:	f008 fbd6 	bl	800963a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	42020000 	.word	0x42020000
 8000e9c:	42020400 	.word	0x42020400

08000ea0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <MX_USB_PCD_Init+0x4c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed6:	f002 fddf 	bl	8003a98 <HAL_PCD_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ee0:	f000 fa06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2001c758 	.word	0x2001c758
 8000eec:	4000d400 	.word	0x4000d400

08000ef0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f020 fa16 	bl	802132e <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_FMC_Init+0xcc>)
 8000f06:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <MX_FMC_Init+0xd0>)
 8000f0c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f90:	2311      	movs	r3, #17
 8000f92:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000fa0:	f006 f861 	bl	8007066 <HAL_SRAM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8000faa:	f000 f9a1 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2001ca4c 	.word	0x2001ca4c
 8000fbc:	44020000 	.word	0x44020000
 8000fc0:	44020104 	.word	0x44020104

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4baa      	ldr	r3, [pc, #680]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4aa9      	ldr	r2, [pc, #676]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4ba7      	ldr	r3, [pc, #668]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4aa3      	ldr	r2, [pc, #652]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a9d      	ldr	r2, [pc, #628]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001022:	f002 feb7 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a96      	ldr	r2, [pc, #600]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b94      	ldr	r3, [pc, #592]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a90      	ldr	r2, [pc, #576]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a84      	ldr	r2, [pc, #528]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f241 1102 	movw	r1, #4354	; 0x1102
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010a6:	f002 fa89 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2108      	movs	r1, #8
 80010ae:	4877      	ldr	r0, [pc, #476]	; (800128c <MX_GPIO_Init+0x2c8>)
 80010b0:	f002 fa84 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4875      	ldr	r0, [pc, #468]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80010ba:	f002 fa7f 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4873      	ldr	r0, [pc, #460]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80010c6:	f002 fa79 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80010d0:	f002 fa74 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80010da:	4870      	ldr	r0, [pc, #448]	; (800129c <MX_GPIO_Init+0x2d8>)
 80010dc:	f002 fa6e 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 80010e0:	f241 1302 	movw	r3, #4354	; 0x1102
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	4863      	ldr	r0, [pc, #396]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010fa:	f002 f8df 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110e:	230c      	movs	r3, #12
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	485c      	ldr	r0, [pc, #368]	; (800128c <MX_GPIO_Init+0x2c8>)
 800111a:	f002 f8cf 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 800111e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001130:	230c      	movs	r3, #12
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4859      	ldr	r0, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 800113c:	f002 f8be 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4852      	ldr	r0, [pc, #328]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 8001156:	f002 f8b1 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800115a:	2308      	movs	r3, #8
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4846      	ldr	r0, [pc, #280]	; (800128c <MX_GPIO_Init+0x2c8>)
 8001172:	f002 f8a3 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8001176:	230e      	movs	r3, #14
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <MX_GPIO_Init+0x2d8>)
 800118c:	f002 f896 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001190:	2320      	movs	r3, #32
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	483a      	ldr	r0, [pc, #232]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80011a8:	f002 f888 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80011c6:	f002 f879 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80011e2:	f002 f86b 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80011fc:	f002 f85e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_GPIO_Init+0x2c4>)
 800121c:	f002 f84e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8001220:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_GPIO_Init+0x2d8>)
 800123a:	f002 f83f 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001254:	f002 f832 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800126a:	2306      	movs	r3, #6
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001276:	f002 f821 	bl	80032bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	42021800 	.word	0x42021800
 800128c:	42020c00 	.word	0x42020c00
 8001290:	42020400 	.word	0x42020400
 8001294:	42020000 	.word	0x42020000
 8001298:	42021c00 	.word	0x42021c00
 800129c:	42021400 	.word	0x42021400
 80012a0:	42020800 	.word	0x42020800

080012a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_TouchGFX_Process();
 80012ac:	f00b fb9d 	bl	800c9ea <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f008 fb8b 	bl	80099cc <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartDefaultTask+0xc>

080012b8 <StartVSyncTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVSyncTask */
void StartVSyncTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVSyncTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);	//100Hz refresh
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f008 fb83 	bl	80099cc <osDelay>
    touchgfxSignalVSync();
 80012c6:	f00d ffdf 	bl	800f288 <touchgfxSignalVSync>
    osDelay(100);	//100Hz refresh
 80012ca:	e7f9      	b.n	80012c0 <StartVSyncTask+0x8>

080012cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012de:	f000 fe5b 	bl	8001f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_MspInit+0x4c>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x4c>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_MspInit+0x4c>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2107      	movs	r1, #7
 8001336:	f06f 0001 	mvn.w	r0, #1
 800133a:	f001 fea5 	bl	8003088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x74>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d123      	bne.n	80013b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_ADC_MspInit+0x7c>)
 80013b2:	f001 ff83 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	42028000 	.word	0x42028000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	42020000 	.word	0x42020000

080013cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_CRC_MspInit+0x38>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10b      	bne.n	80013f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023000 	.word	0x40023000
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	; 0xb8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2294      	movs	r2, #148	; 0x94
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f01f ff7e 	bl	802132e <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_I2C_MspInit+0xb0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d13a      	bne.n	80014b2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fcc3 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff ff4c 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_I2C_MspInit+0xb8>)
 8001496:	f001 ff11 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	; 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	42020400 	.word	0x42020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b0      	sub	sp, #192	; 0xc0
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2294      	movs	r2, #148	; 0x94
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f01f ff20 	bl	802132e <memset>
  if(huart->Instance==LPUART1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_UART_MspInit+0x134>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13c      	bne.n	8001572 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014f8:	2320      	movs	r3, #32
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc65 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff feee 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	4a39      	ldr	r2, [pc, #228]	; (8001600 <HAL_UART_MspInit+0x138>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_UART_MspInit+0x138>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_UART_MspInit+0x138>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001544:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800155e:	2308      	movs	r3, #8
 8001560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001568:	4619      	mov	r1, r3
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <HAL_UART_MspInit+0x13c>)
 800156c:	f001 fea6 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001570:	e040      	b.n	80015f4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_UART_MspInit+0x140>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13b      	bne.n	80015f4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fc23 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001594:	f7ff feac 	bl	80012f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	6613      	str	r3, [r2, #96]	; 0x60
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80015c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <HAL_UART_MspInit+0x144>)
 80015f0:	f001 fe64 	bl	80032bc <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	37c0      	adds	r7, #192	; 0xc0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40008000 	.word	0x40008000
 8001600:	40021000 	.word	0x40021000
 8001604:	42020400 	.word	0x42020400
 8001608:	40013800 	.word	0x40013800
 800160c:	42020000 	.word	0x42020000

08001610 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0b0      	sub	sp, #192	; 0xc0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2294      	movs	r2, #148	; 0x94
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f01f fe7c 	bl	802132e <memset>
  if(hospi->Instance==OCTOSPI1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_OSPI_MspInit+0x164>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f040 8094 	bne.w	800176a <HAL_OSPI_MspInit+0x15a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fbbe 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 800165e:	f7ff fe47 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6513      	str	r3, [r2, #80]	; 0x50
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 80016c2:	230e      	movs	r3, #14
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016da:	230a      	movs	r3, #10
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e4:	4619      	mov	r1, r3
 80016e6:	4825      	ldr	r0, [pc, #148]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 80016e8:	f001 fde8 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 8001712:	f001 fdd3 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8001716:	23cc      	movs	r3, #204	; 0xcc
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800172e:	230a      	movs	r3, #10
 8001730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_OSPI_MspInit+0x170>)
 800173c:	f001 fdbe 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001758:	230a      	movs	r3, #10
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <HAL_OSPI_MspInit+0x174>)
 8001766:	f001 fda9 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	37c0      	adds	r7, #192	; 0xc0
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	44021000 	.word	0x44021000
 8001778:	40021000 	.word	0x40021000
 800177c:	42020800 	.word	0x42020800
 8001780:	42020000 	.word	0x42020000
 8001784:	42020400 	.word	0x42020400

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d129      	bne.n	80017fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80017da:	f002 fadb 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80017de:	233c      	movs	r3, #60	; 0x3c
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017fa:	f001 fd5f 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40013000 	.word	0x40013000
 800180c:	40021000 	.word	0x40021000
 8001810:	42021800 	.word	0x42021800

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800183e:	e022      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0x88>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_TIM_Base_MspInit+0x8c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40000800 	.word	0x40000800
 8001898:	40021000 	.word	0x40021000
 800189c:	40014400 	.word	0x40014400
 80018a0:	40014800 	.word	0x40014800

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_MspPostInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80018de:	2302      	movs	r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80018ee:	230e      	movs	r3, #14
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_TIM_MspPostInit+0x6c>)
 80018fa:	f001 fcdf 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40014800 	.word	0x40014800
 800190c:	40021000 	.word	0x40021000
 8001910:	42021000 	.word	0x42021000

08001914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ae      	sub	sp, #184	; 0xb8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2294      	movs	r2, #148	; 0x94
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f01f fcfa 	bl	802132e <memset>
  if(hpcd->Instance==USB)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_PCD_MspInit+0xb8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d13e      	bne.n	80019c2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800194a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800194e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fa3c 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001962:	f7ff fcc5 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800197e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001998:	230a      	movs	r3, #10
 800199a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_PCD_MspInit+0xc0>)
 80019a6:	f001 fc89 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	37b8      	adds	r7, #184	; 0xb8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	4000d400 	.word	0x4000d400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42020000 	.word	0x42020000

080019d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13e      	bne.n	8001a72 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6513      	str	r3, [r2, #80]	; 0x50
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8001a12:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4815      	ldr	r0, [pc, #84]	; (8001a84 <HAL_FMC_MspInit+0xac>)
 8001a2e:	f001 fc45 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480f      	ldr	r0, [pc, #60]	; (8001a88 <HAL_FMC_MspInit+0xb0>)
 8001a4c:	f001 fc36 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8001a50:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <HAL_FMC_MspInit+0xb4>)
 8001a6c:	f001 fc26 	bl	80032bc <HAL_GPIO_Init>
 8001a70:	e000      	b.n	8001a74 <HAL_FMC_MspInit+0x9c>
    return;
 8001a72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2001caac 	.word	0x2001caac
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42020c00 	.word	0x42020c00
 8001a88:	42021400 	.word	0x42021400
 8001a8c:	42021000 	.word	0x42021000

08001a90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a98:	f7ff ff9e 	bl	80019d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_SAI_MspInit+0x64>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d124      	bne.n	8001b00 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ade:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8001ae0:	237c      	movs	r3, #124	; 0x7c
 8001ae2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001af0:	230d      	movs	r3, #13
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_SAI_MspInit+0x70>)
 8001afc:	f001 fbde 	bl	80032bc <HAL_GPIO_Init>

    }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40015404 	.word	0x40015404
 8001b0c:	2001cab0 	.word	0x2001cab0
 8001b10:	40021000 	.word	0x40021000
 8001b14:	42021000 	.word	0x42021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	202a      	movs	r0, #42	; 0x2a
 8001b2e:	f001 faab 	bl	8003088 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b32:	202a      	movs	r0, #42	; 0x2a
 8001b34:	f001 fac2 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f836 	bl	8004bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b60:	f003 f820 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8001b64:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3b01      	subs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b96:	f005 faae 	bl	80070f6 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_InitTick+0xa4>)
 8001ba2:	f005 faff 	bl	80071a4 <HAL_TIM_Base_Start_IT>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	2001cab4 	.word	0x2001cab4
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_UP_IRQHandler+0x10>)
 8001bf6:	f005 fba6 	bl	8007346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2001cab4 	.word	0x2001cab4

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f01f fa33 	bl	8021088 <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	e000      	b.n	8001c5e <_read+0x16>
 8001c5c:	bf00      	nop
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	e000      	b.n	8001ca2 <_write+0x20>
 8001ca0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
  }
  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f01f f998 	bl	8021088 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20030000 	.word	0x20030000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	2001cb00 	.word	0x2001cb00
 8001d8c:	20020048 	.word	0x20020048

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f000 f826 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001daa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
	ldr	r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001db2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <LoopForever+0x16>)
	cmp	r2, r3
 8001dba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dbe:	f01f fa71 	bl	80212a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7fe fbfd 	bl	80005c0 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001dc8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001dcc:	08057814 	.word	0x08057814
	ldr	r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd4:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001dd8:	2001c2fc 	.word	0x2001c2fc
	ldr	r3, = _ebss
 8001ddc:	20020044 	.word	0x20020044

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>
	...

08001de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e005      	b.n	8001e36 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001e36:	4a46      	ldr	r2, [pc, #280]	; (8001f50 <SystemCoreClockUpdate+0x148>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d866      	bhi.n	8001f1a <SystemCoreClockUpdate+0x112>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <SystemCoreClockUpdate+0x4c>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e89 	.word	0x08001e89
 8001e58:	08001f1b 	.word	0x08001f1b
 8001e5c:	08001f1b 	.word	0x08001f1b
 8001e60:	08001f1b 	.word	0x08001f1b
 8001e64:	08001e91 	.word	0x08001e91
 8001e68:	08001f1b 	.word	0x08001f1b
 8001e6c:	08001f1b 	.word	0x08001f1b
 8001e70:	08001f1b 	.word	0x08001f1b
 8001e74:	08001e99 	.word	0x08001e99
 8001e78:	08001f1b 	.word	0x08001f1b
 8001e7c:	08001f1b 	.word	0x08001f1b
 8001e80:	08001f1b 	.word	0x08001f1b
 8001e84:	08001ea1 	.word	0x08001ea1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6013      	str	r3, [r2, #0]
      break;
 8001e8e:	e048      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <SystemCoreClockUpdate+0x150>)
 8001e94:	601a      	str	r2, [r3, #0]
      break;
 8001e96:	e044      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <SystemCoreClockUpdate+0x154>)
 8001e9c:	601a      	str	r2, [r3, #0]
      break;
 8001e9e:	e040      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <SystemCoreClockUpdate+0xbe>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d006      	beq.n	8001ed2 <SystemCoreClockUpdate+0xca>
 8001ec4:	e00b      	b.n	8001ede <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <SystemCoreClockUpdate+0x150>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	613b      	str	r3, [r7, #16]
          break;
 8001ed0:	e00b      	b.n	8001eea <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <SystemCoreClockUpdate+0x154>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	613b      	str	r3, [r7, #16]
          break;
 8001edc:	e005      	b.n	8001eea <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	613b      	str	r3, [r7, #16]
          break;
 8001ee8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0e5b      	lsrs	r3, r3, #25
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f16:	6013      	str	r3, [r2, #0]
      break;
 8001f18:	e003      	b.n	8001f22 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	6013      	str	r3, [r2, #0]
      break;
 8001f20:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <SystemCoreClockUpdate+0x144>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <SystemCoreClockUpdate+0x158>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <SystemCoreClockUpdate+0x14c>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08022c58 	.word	0x08022c58
 8001f54:	20000004 	.word	0x20000004
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	08022c40 	.word	0x08022c40

08001f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f001 f87f 	bl	8003072 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001f74:	f7ff ff48 	bl	8001e08 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f78:	2007      	movs	r0, #7
 8001f7a:	f7ff fdcd 	bl	8001b18 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	e001      	b.n	8001f8e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f8a:	f7ff f9b7 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	2001cb04 	.word	0x2001cb04

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2001cb04 	.word	0x2001cb04

08001fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <LL_ADC_SetOffset+0x44>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	03fff000 	.word	0x03fff000

08002088 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3330      	adds	r3, #48	; 0x30
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	211f      	movs	r1, #31
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 011f 	and.w	r1, r3, #31
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0318 	and.w	r3, r3, #24
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	400b      	ands	r3, r1
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	0007ffff 	.word	0x0007ffff

08002208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002240:	d101      	bne.n	8002246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d101      	bne.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12e      	b.n	8002590 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff f803 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff67 	bl	800222c <LL_ADC_IsDeepPowerDownEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff4d 	bl	8002208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff82 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff66 	bl	8002254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_ADC_Init+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_ADC_Init+0x284>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff64 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff75 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80c7 	bne.w	800257e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80c3 	bne.w	800257e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff49 	bl	80022a4 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d110      	bne.n	800243a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002418:	4861      	ldr	r0, [pc, #388]	; (80025a0 <HAL_ADC_Init+0x288>)
 800241a:	f7ff ff43 	bl	80022a4 <LL_ADC_IsEnabled>
 800241e:	4604      	mov	r4, r0
 8002420:	4860      	ldr	r0, [pc, #384]	; (80025a4 <HAL_ADC_Init+0x28c>)
 8002422:	f7ff ff3f 	bl	80022a4 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	4323      	orrs	r3, r4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	485c      	ldr	r0, [pc, #368]	; (80025a8 <HAL_ADC_Init+0x290>)
 8002436:	f7ff fdcf 	bl	8001fd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002444:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800244a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002450:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	3b01      	subs	r3, #1
 800246e:	045b      	lsls	r3, r3, #17
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_ADC_Init+0x294>)
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff20 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 80024b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d140      	bne.n	800253a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e1b      	ldrb	r3, [r3, #24]
 80024c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e0:	f023 0306 	bic.w	r3, r3, #6
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d118      	bne.n	800252a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	e007      	b.n	800253a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10c      	bne.n	800255c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f023 010f 	bic.w	r1, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
 800255a:	e007      	b.n	800256c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020f 	bic.w	r2, r2, #15
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f023 0303 	bic.w	r3, r3, #3
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	; 0x58
 800257c:	e007      	b.n	800258e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000004 	.word	0x20000004
 800259c:	053e2d63 	.word	0x053e2d63
 80025a0:	42028000 	.word	0x42028000
 80025a4:	42028100 	.word	0x42028100
 80025a8:	42028300 	.word	0x42028300
 80025ac:	fff0c007 	.word	0xfff0c007

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b0b7      	sub	sp, #220	; 0xdc
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x22>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e3c1      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe73 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 83a6 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f7ff fd89 	bl	8002110 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe61 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002608:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe6d 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 8002616:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800261a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 81c1 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 81bc 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	4619      	mov	r1, r3
 8002644:	f7ff fd90 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd4a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002656:	e00e      	b.n	8002676 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff fd7f 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fd3a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00a      	beq.n	80026ae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6919      	ldr	r1, [r3, #16]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a8:	f7ff fcca 	bl	8002040 <LL_ADC_SetOffset>
 80026ac:	e17b      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fce7 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x12a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fcdc 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	e01e      	b.n	8002718 <HAL_ADC_ConfigChannel+0x168>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fcd1 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x180>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800274c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fca0 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fc84 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1f0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fc79 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e01e      	b.n	80027de <HAL_ADC_ConfigChannel+0x22e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc6e 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x246>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e018      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800280a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800280e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e004      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800281e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002828:	429a      	cmp	r2, r3
 800282a:	d106      	bne.n	800283a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc3d 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc21 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x2b6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc16 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x2f4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fc0b 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800288c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e004      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x30c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	e016      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fbdc 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fbc0 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x378>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fbb5 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	e017      	b.n	8002958 <HAL_ADC_ConfigChannel+0x3a8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2103      	movs	r1, #3
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fbaa 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002942:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e003      	b.n	8002956 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800294e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x3c0>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e011      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800297e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e003      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2103      	movs	r1, #3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb87 	bl	80020b4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc7a 	bl	80022a4 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 81c9 	bne.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f7ff fbfb 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a8f      	ldr	r2, [pc, #572]	; (8002c0c <HAL_ADC_ConfigChannel+0x65c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f040 8131 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x44e>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b09      	cmp	r3, #9
 80029f4:	bf94      	ite	ls
 80029f6:	2301      	movls	r3, #1
 80029f8:	2300      	movhi	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e019      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x482>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d079      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x4a2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	e015      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x4ce>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x4ee>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	e017      	b.n	8002ace <HAL_ADC_ConfigChannel+0x51e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x544>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x576>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b26:	430b      	orrs	r3, r1
 8002b28:	e081      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x596>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	069b      	lsls	r3, r3, #26
 8002b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b44:	e015      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x5c2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	069b      	lsls	r3, r3, #26
 8002b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x5e2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	e017      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x612>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	ea42 0103 	orr.w	r1, r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x63e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1e      	subs	r3, #30
 8002be6:	051b      	lsls	r3, r3, #20
 8002be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bec:	e01e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x67c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	613b      	str	r3, [r7, #16]
  return result;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e006      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x668>
 8002c0a:	bf00      	nop
 8002c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7ff fa98 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8082 	beq.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	4847      	ldr	r0, [pc, #284]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c48:	f7ff f9ec 	bl	8002024 <LL_ADC_GetCommonPathInternalCh>
 8002c4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c50:	4845      	ldr	r0, [pc, #276]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c52:	f7ff fb27 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	4844      	ldr	r0, [pc, #272]	; (8002d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c5a:	f7ff fb23 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4323      	orrs	r3, r4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15e      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d127      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d121      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d161      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4834      	ldr	r0, [pc, #208]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c92:	f7ff f9b4 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002cae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cbe:	e044      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d113      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d134      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481e      	ldr	r0, [pc, #120]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cec:	f7ff f987 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	e02b      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d126      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d120      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11b      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4811      	ldr	r0, [pc, #68]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d1e:	f7ff f96e 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e012      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	37dc      	adds	r7, #220	; 0xdc
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	80080000 	.word	0x80080000
 8002d64:	42028300 	.word	0x42028300
 8002d68:	42028000 	.word	0x42028000
 8002d6c:	42028100 	.word	0x42028100
 8002d70:	c7520000 	.word	0xc7520000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	053e2d63 	.word	0x053e2d63
 8002d7c:	cb840000 	.word	0xcb840000
 8002d80:	80000001 	.word	0x80000001

08002d84 <LL_ADC_IsEnabled>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_REG_IsConversionOngoing>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b0a1      	sub	sp, #132	; 0x84
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e089      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002df6:	2300      	movs	r3, #0
 8002df8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e068      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffb9 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ffb3 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d14a      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d147      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d027      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	4824      	ldr	r0, [pc, #144]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e7a:	f7ff ff83 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4823      	ldr	r0, [pc, #140]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e82:	f7ff ff7f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4323      	orrs	r3, r4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d132      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eaa:	e023      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb8:	4814      	ldr	r0, [pc, #80]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002eba:	f7ff ff63 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ec2:	f7ff ff5f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4323      	orrs	r3, r4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002edc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3784      	adds	r7, #132	; 0x84
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	42028000 	.word	0x42028000
 8002f10:	42028100 	.word	0x42028100
 8002f14:	42028300 	.word	0x42028300

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0152      	lsls	r2, r2, #5
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0152      	lsls	r2, r2, #5
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b03      	cmp	r3, #3
 8003028:	bf28      	it	cs
 800302a:	2303      	movcs	r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3303      	adds	r3, #3
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b04      	subs	r3, #4
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff4c 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003096:	f7ff ff63 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 800309a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7ff ffb3 	bl	800300c <NVIC_EncodePriority>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff82 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff56 	bl	8002f7c <__NVIC_EnableIRQ>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e054      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f5b      	ldrb	r3, [r3, #29]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f966 	bl	80013cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_CRC_Init+0xc4>)
 8003114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0218 	bic.w	r2, r2, #24
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e00c      	b.n	8003142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	461a      	mov	r2, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f834 	bl	80031a0 <HAL_CRCEx_Polynomial_Set>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e028      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e004      	b.n	8003160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	04c11db7 	.word	0x04c11db7

080031a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031b0:	231f      	movs	r3, #31
 80031b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
 80031c2:	e063      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031c4:	bf00      	nop
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	613a      	str	r2, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b18      	cmp	r3, #24
 80031e8:	d846      	bhi.n	8003278 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	0800327f 	.word	0x0800327f
 80031f4:	08003279 	.word	0x08003279
 80031f8:	08003279 	.word	0x08003279
 80031fc:	08003279 	.word	0x08003279
 8003200:	08003279 	.word	0x08003279
 8003204:	08003279 	.word	0x08003279
 8003208:	08003279 	.word	0x08003279
 800320c:	08003279 	.word	0x08003279
 8003210:	0800326d 	.word	0x0800326d
 8003214:	08003279 	.word	0x08003279
 8003218:	08003279 	.word	0x08003279
 800321c:	08003279 	.word	0x08003279
 8003220:	08003279 	.word	0x08003279
 8003224:	08003279 	.word	0x08003279
 8003228:	08003279 	.word	0x08003279
 800322c:	08003279 	.word	0x08003279
 8003230:	08003261 	.word	0x08003261
 8003234:	08003279 	.word	0x08003279
 8003238:	08003279 	.word	0x08003279
 800323c:	08003279 	.word	0x08003279
 8003240:	08003279 	.word	0x08003279
 8003244:	08003279 	.word	0x08003279
 8003248:	08003279 	.word	0x08003279
 800324c:	08003279 	.word	0x08003279
 8003250:	08003255 	.word	0x08003255
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d913      	bls.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800325e:	e010      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d90f      	bls.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800326a:	e00c      	b.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d90b      	bls.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003276:	e008      	b.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
        break;
 800327c:	e006      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327e:	bf00      	nop
 8003280:	e004      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800328a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 0118 	bic.w	r1, r3, #24
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	e158      	b.n	800357e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 814a 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d005      	beq.n	80032fc <HAL_GPIO_Init+0x40>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d017      	beq.n	800339a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d123      	bne.n	80033ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	6939      	ldr	r1, [r7, #16]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a4 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3318      	adds	r3, #24
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d025      	beq.n	80034a8 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01f      	beq.n	80034a4 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a50      	ldr	r2, [pc, #320]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d019      	beq.n	80034a0 <HAL_GPIO_Init+0x1e4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4f      	ldr	r2, [pc, #316]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_GPIO_Init+0x1e0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00d      	beq.n	8003498 <HAL_GPIO_Init+0x1dc>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4d      	ldr	r2, [pc, #308]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x1d8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_GPIO_Init+0x1d4>
 800348c:	2306      	movs	r3, #6
 800348e:	e00c      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003490:	2307      	movs	r3, #7
 8003492:	e00a      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003494:	2305      	movs	r3, #5
 8003496:	e008      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003498:	2304      	movs	r3, #4
 800349a:	e006      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 800349c:	2303      	movs	r3, #3
 800349e:	e004      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e002      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a8:	2300      	movs	r3, #0
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	f002 0203 	and.w	r2, r2, #3
 80034b0:	00d2      	lsls	r2, r2, #3
 80034b2:	4093      	lsls	r3, r2
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80034ba:	4938      	ldr	r1, [pc, #224]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3318      	adds	r3, #24
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ec:	4a2b      	ldr	r2, [pc, #172]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f ae9f 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	4002f400 	.word	0x4002f400
 80035a0:	42020000 	.word	0x42020000
 80035a4:	42020400 	.word	0x42020400
 80035a8:	42020800 	.word	0x42020800
 80035ac:	42020c00 	.word	0x42020c00
 80035b0:	42021000 	.word	0x42021000
 80035b4:	42021400 	.word	0x42021400
 80035b8:	42021800 	.word	0x42021800

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e081      	b.n	8003702 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fefa 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e006      	b.n	8003674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d104      	bne.n	8003686 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d138      	bne.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800372a:	2302      	movs	r3, #2
 800372c:	e032      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d139      	bne.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e033      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	e007      	b.n	8003866 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0204 	bic.w	r2, r3, #4
 800385e:	4905      	ldr	r1, [pc, #20]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40030400 	.word	0x40030400

08003878 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40030400 	.word	0x40030400

08003898 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe fb8c 	bl	8001fc0 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e0a2      	b.n	80039fc <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 809b 	bne.w	80039fc <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fea2 	bl	8001610 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80038cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f89b 	bl	8003a0c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_OSPI_Init+0x170>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68d1      	ldr	r1, [r2, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6912      	ldr	r2, [r2, #16]
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0412      	lsls	r2, r2, #16
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6952      	ldr	r2, [r2, #20]
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0212      	lsls	r2, r2, #8
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	69d2      	ldr	r2, [r2, #28]
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0412      	lsls	r2, r2, #16
 800392c:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003936:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f863 	bl	8003a2a <OSPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d146      	bne.n	80039fc <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039a4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0202 	orr.w	r2, r2, #2
 80039e2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d103      	bne.n	80039f6 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80039f4:	e002      	b.n	80039fc <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	f8e0f8f4 	.word	0xf8e0f8f4

08003a0c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a3a:	e01a      	b.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d016      	beq.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fabc 	bl	8001fc0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00e      	b.n	8003a90 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d1d6      	bne.n	8003a3c <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af06      	add	r7, sp, #24
 8003a9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0cb      	b.n	8003c42 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd ff28 	bl	8001914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 fe1f 	bl	8009714 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e040      	b.n	8003b5e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3301      	adds	r3, #1
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3303      	adds	r3, #3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3338      	adds	r3, #56	; 0x38
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	333c      	adds	r3, #60	; 0x3c
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3b9      	bcc.n	8003adc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e044      	b.n	8003bf8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3b5      	bcc.n	8003b6e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	687e      	ldr	r6, [r7, #4]
 8003c0a:	466d      	mov	r5, sp
 8003c0c:	f106 0410 	add.w	r4, r6, #16
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	1d33      	adds	r3, r6, #4
 8003c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f005 fd94 	bl	800974a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f805 	bl	8003c4a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003cee:	f000 f861 	bl	8003db4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	d101      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03e      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d101      	bne.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e035      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e02f      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003d24:	4917      	ldr	r1, [pc, #92]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	2232      	movs	r2, #50	; 0x32
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4c:	e002      	b.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d102      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f2      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d101      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e000      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40007000 	.word	0x40007000
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d90:	cccccccd 	.word	0xcccccccd

08003d94 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da2:	6053      	str	r3, [r2, #4]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e00a      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e001      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f000 bcc2 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e10:	4b99      	ldr	r3, [pc, #612]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80e9 	beq.w	8004004 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4a>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f040 8083 	bne.w	8003f46 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d17f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e46:	4b8c      	ldr	r3, [pc, #560]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_RCC_OscConfig+0x64>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f000 bc9a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7e>
 8003e70:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d224      	bcs.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fece 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f000 bc7a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	496f      	ldr	r1, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	496a      	ldr	r1, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e026      	b.n	8003f22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b68      	ldr	r3, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	495d      	ldr	r1, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe8d 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f000 bc39 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f22:	f000 fe17 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f2c:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_RCC_OscConfig+0x284>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fdf1 	bl	8001b18 <HAL_InitTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d060      	beq.n	8004002 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	f000 bc27 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d039      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a49      	ldr	r2, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f831 	bl	8001fc0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f60:	e00f      	b.n	8003f82 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fe f82d 	bl	8001fc0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d908      	bls.n	8003f82 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f000 bc09 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0e9      	beq.n	8003f62 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a39      	ldr	r2, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fac:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	492f      	ldr	r1, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e020      	b.n	8004004 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fce:	f7fd fff7 	bl	8001fc0 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd4:	e00e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fff3 	bl	8001fc0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d907      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e3cf      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1da>
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004002:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07e      	beq.n	800410e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x226>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d10e      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06e      	beq.n	800410c <HAL_RCC_OscConfig+0x310>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d16a      	bne.n	800410c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e3ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x256>
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405a:	d113      	bne.n	8004084 <HAL_RCC_OscConfig+0x288>
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e012      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	20000004 	.word	0x20000004
 8004080:	20000008 	.word	0x20000008
 8004084:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a8a      	ldr	r2, [pc, #552]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a87      	ldr	r2, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd ff8c 	bl	8001fc0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040aa:	e00e      	b.n	80040ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd ff88 	bl	8001fc0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d907      	bls.n	80040ca <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e364      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b7a      	ldr	r3, [pc, #488]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ea      	beq.n	80040ac <HAL_RCC_OscConfig+0x2b0>
 80040d6:	e01a      	b.n	800410e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd ff72 	bl	8001fc0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	e00e      	b.n	80040fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd ff6e 	bl	8001fc0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d907      	bls.n	80040fe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e34a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ea      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2e4>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x330>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d119      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d116      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x348>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e327      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4958      	ldr	r1, [pc, #352]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	e04c      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d029      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd ff27 	bl	8001fc0 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd ff23 	bl	8001fc0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e2ff      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004194:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ea      	beq.n	8004176 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	4941      	ldr	r1, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	e01e      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fefd 	bl	8001fc0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c8:	e00e      	b.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fd fef9 	bl	8001fc0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d907      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2d5      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ea      	bne.n	80041ca <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d062      	beq.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d038      	beq.n	800427a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f023 0310 	bic.w	r3, r3, #16
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004220:	e007      	b.n	8004232 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd febd 	bl	8001fc0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004248:	e00f      	b.n	800426a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd feb9 	bl	8001fc0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b07      	cmp	r3, #7
 8004256:	d908      	bls.n	800426a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e294      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e8      	beq.n	800424a <HAL_RCC_OscConfig+0x44e>
 8004278:	e025      	b.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fe99 	bl	8001fc0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	e012      	b.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004292:	f7fd fe95 	bl	8001fc0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b07      	cmp	r3, #7
 800429e:	d90b      	bls.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e270      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	4ba8      	ldr	r3, [pc, #672]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 812d 	beq.w	800452e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d8:	4ba0      	ldr	r3, [pc, #640]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b9d      	ldr	r3, [pc, #628]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a9c      	ldr	r2, [pc, #624]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b9a      	ldr	r3, [pc, #616]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b97      	ldr	r3, [pc, #604]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11e      	bne.n	800434a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a93      	ldr	r2, [pc, #588]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7fd fe52 	bl	8001fc0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431e:	e00e      	b.n	800433e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fe4e 	bl	8001fc0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d907      	bls.n	800433e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e22a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ea      	beq.n	8004320 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01f      	beq.n	8004396 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004362:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004382:	e018      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a74      	ldr	r2, [pc, #464]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004394:	e00f      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004396:	4b71      	ldr	r3, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043a6:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	4a6b      	ldr	r2, [pc, #428]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d068      	beq.n	8004490 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fdff 	bl	8001fc0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	e011      	b.n	80043ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd fdfb 	bl	8001fc0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1d4      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0e6      	beq.n	80043c6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d022      	beq.n	800444a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004404:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004414:	e011      	b.n	800443a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fdd3 	bl	8001fc0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d908      	bls.n	800443a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800443a:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0e6      	beq.n	8004416 <HAL_RCC_OscConfig+0x61a>
 8004448:	e068      	b.n	800451c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800444a:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	4a42      	ldr	r2, [pc, #264]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800445a:	e011      	b.n	8004480 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fd fdb0 	bl	8001fc0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d908      	bls.n	8004480 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e189      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <HAL_RCC_OscConfig+0x660>
 800448e:	e045      	b.n	800451c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fd96 	bl	8001fc0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004496:	e011      	b.n	80044bc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fd92 	bl	8001fc0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d908      	bls.n	80044bc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e16b      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d021      	beq.n	800451c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044e8:	e011      	b.n	800450e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fd fd69 	bl	8001fc0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d908      	bls.n	800450e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e142      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4a0d      	ldr	r2, [pc, #52]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fd35 	bl	8001fc0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x788>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fd fd2c 	bl	8001fc0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e107      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004584:	4b85      	ldr	r3, [pc, #532]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0e8      	beq.n	8004564 <HAL_RCC_OscConfig+0x768>
 8004592:	e022      	b.n	80045da <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fd0c 	bl	8001fc0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ac:	f7fd fd08 	bl	8001fc0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d908      	bls.n	80045cc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ba:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0e3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045cc:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e8      	bne.n	80045ac <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80d7 	beq.w	8004792 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	f000 8091 	beq.w	8004714 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d166      	bne.n	80046c8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fd fcdb 	bl	8001fc0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460e:	f7fd fcd7 	bl	8001fc0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <HAL_RCC_OscConfig+0x9a4>)
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004648:	3a01      	subs	r2, #1
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0552      	lsls	r2, r2, #21
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0652      	lsls	r2, r2, #25
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004672:	06d2      	lsls	r2, r2, #27
 8004674:	430a      	orrs	r2, r1
 8004676:	4949      	ldr	r1, [pc, #292]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd fc94 	bl	8001fc0 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e00e      	b.n	80046ba <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd fc90 	bl	8001fc0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d907      	bls.n	80046ba <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e06c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ea      	beq.n	800469c <HAL_RCC_OscConfig+0x8a0>
 80046c6:	e064      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fc74 	bl	8001fc0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e00e      	b.n	80046fa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fc70 	bl	8001fc0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d907      	bls.n	80046fa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e04c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ea      	bne.n	80046dc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4924      	ldr	r1, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x9a8>)
 800470e:	4013      	ands	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
 8004712:	e03e      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e039      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	429a      	cmp	r2, r3
 8004732:	d12c      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	3b01      	subs	r3, #1
 8004740:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d123      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11b      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d113      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d109      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	019f800c 	.word	0x019f800c
 80047a4:	feeefffc 	.word	0xfeeefffc

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e11c      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b90      	ldr	r3, [pc, #576]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	498b      	ldr	r1, [pc, #556]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e104      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	497b      	ldr	r1, [pc, #492]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8085 	beq.w	8004936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d11f      	bne.n	8004874 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0da      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004844:	f000 fa58 	bl	8004cf8 <RCC_GetSysClockFreqFromPLLSource>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d947      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d141      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e036      	b.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487c:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b6      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004894:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0aa      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b58      	ldr	r3, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0a2      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b4:	f000 f8b0 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a53      	ldr	r2, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90f      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ce:	4b4e      	ldr	r3, [pc, #312]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d6:	4a4c      	ldr	r2, [pc, #304]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4946      	ldr	r1, [pc, #280]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f4:	f7fd fb64 	bl	8001fc0 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e013      	b.n	8004924 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fb60 	bl	8001fc0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d90a      	bls.n	8004924 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e06a      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 020c 	and.w	r2, r3, #12
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	429a      	cmp	r2, r3
 8004934:	d1e2      	bne.n	80048fc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d105      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004960:	429a      	cmp	r2, r3
 8004962:	d208      	bcs.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4925      	ldr	r1, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004976:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d210      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 020f 	bic.w	r2, r3, #15
 800498c:	491d      	ldr	r1, [pc, #116]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e029      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049e4:	f000 f8b6 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x268>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd f890 	bl	8001b18 <HAL_InitTick>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	04c4b400 	.word	0x04c4b400
 8004a10:	20000004 	.word	0x20000004
 8004a14:	20000008 	.word	0x20000008

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a34      	ldr	r2, [pc, #208]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d146      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xb4>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xce>
 8004aca:	e019      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	0a12      	lsrs	r2, r2, #8
 8004ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	617b      	str	r3, [r7, #20]
        break;
 8004ae4:	e019      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	0a12      	lsrs	r2, r2, #8
 8004af4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
        break;
 8004afe:	e00c      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b0a:	68d2      	ldr	r2, [r2, #12]
 8004b0c:	0a12      	lsrs	r2, r2, #8
 8004b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
        break;
 8004b18:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0e5b      	lsrs	r3, r3, #25
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	3301      	adds	r3, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b34:	69bb      	ldr	r3, [r7, #24]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08022c58 	.word	0x08022c58
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004b58:	f7ff ff5e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	08022c40 	.word	0x08022c40

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff ffe8 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	08022c50 	.word	0x08022c50

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffd4 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	08022c50 	.word	0x08022c50

08004bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	220f      	movs	r2, #15
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetClockConfig+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f83a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6138      	str	r0, [r7, #16]
 8004c4e:	e014      	b.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff f82a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c86:	d10b      	bne.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d919      	bls.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2ba0      	cmp	r3, #160	; 0xa0
 8004c92:	d902      	bls.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c94:	2302      	movs	r3, #2
 8004c96:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c98:	e013      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c9e:	e010      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d902      	bls.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e00a      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d102      	bne.n	8004cb8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d101      	bne.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 020f 	bic.w	r2, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40022000 	.word	0x40022000

08004cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d015      	beq.n	8004d48 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d839      	bhi.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d01c      	beq.n	8004d62 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d133      	bne.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	0a12      	lsrs	r2, r2, #8
 8004d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
      break;
 8004d46:	e029      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d52:	68d2      	ldr	r2, [r2, #12]
 8004d54:	0a12      	lsrs	r2, r2, #8
 8004d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e01c      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e005      	b.n	8004d8a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	613b      	str	r3, [r7, #16]
        break;
 8004d94:	e002      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
      break;
 8004d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0e5b      	lsrs	r3, r3, #25
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004db6:	683b      	ldr	r3, [r7, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	08022c58 	.word	0x08022c58

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d040      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d02a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d825      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d026      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d821      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d006      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d81d      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d010      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e14:	e018      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a8e      	ldr	r2, [pc, #568]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e22:	e015      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb08 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3320      	adds	r3, #32
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fbe5 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
        break;
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e56:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	497b      	ldr	r1, [pc, #492]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d030      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d82a      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d824      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d81e      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb0:	e018      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a67      	ldr	r2, [pc, #412]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ebe:	e015      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 faba 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ed0:	e00c      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fb97 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
        break;
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4954      	ldr	r1, [pc, #336]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80ab 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	4a48      	ldr	r2, [pc, #288]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	6593      	str	r3, [r2, #88]	; 0x58
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f48:	4b43      	ldr	r3, [pc, #268]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f54:	f7fd f834 	bl	8001fc0 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5a:	e00f      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fd f830 	bl	8001fc0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d908      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004f7a:	e006      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0e9      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004f8a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d164      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01f      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fc ffe7 	bl	8001fc0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff4:	e012      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc ffe3 	bl	8001fc0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d909      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800501a:	e007      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0e5      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800502c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	77bb      	strb	r3, [r7, #30]
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005054:	40021000 	.word	0x40021000
 8005058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b9c      	ldr	r3, [pc, #624]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a9b      	ldr	r2, [pc, #620]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b96      	ldr	r3, [pc, #600]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	4992      	ldr	r1, [pc, #584]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a0:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 020c 	bic.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	498a      	ldr	r1, [pc, #552]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050c2:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4981      	ldr	r1, [pc, #516]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e4:	4b7c      	ldr	r3, [pc, #496]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	4979      	ldr	r1, [pc, #484]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005106:	4b74      	ldr	r3, [pc, #464]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	4970      	ldr	r1, [pc, #448]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005128:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	4968      	ldr	r1, [pc, #416]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	495f      	ldr	r1, [pc, #380]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516c:	4b5a      	ldr	r3, [pc, #360]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	4957      	ldr	r1, [pc, #348]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519c:	494e      	ldr	r1, [pc, #312]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b8:	d00e      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051be:	d814      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c8:	d10f      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ca:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	4a42      	ldr	r2, [pc, #264]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051d6:	e00c      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f92e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	77fb      	strb	r3, [r7, #31]
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	4934      	ldr	r1, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7ffb      	ldrb	r3, [r7, #31]
 8005212:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	492a      	ldr	r1, [pc, #168]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005242:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	4921      	ldr	r1, [pc, #132]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	4919      	ldr	r1, [pc, #100]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528c:	f023 0203 	bic.w	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	4910      	ldr	r1, [pc, #64]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02b      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c6:	d109      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a02      	ldr	r2, [pc, #8]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
 80052d4:	e014      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f8a7 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005314:	d108      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531c:	4a6e      	ldr	r2, [pc, #440]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800531e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005322:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005326:	e012      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005328:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005336:	4968      	ldr	r1, [pc, #416]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800533e:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005344:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d10d      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f86e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
 8005370:	77bb      	strb	r3, [r7, #30]
 8005372:	e016      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537c:	d106      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537e:	4b56      	ldr	r3, [pc, #344]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a55      	ldr	r2, [pc, #340]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005388:	60d3      	str	r3, [r2, #12]
 800538a:	e00a      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	d105      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	4a4f      	ldr	r2, [pc, #316]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d028      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053bc:	4946      	ldr	r1, [pc, #280]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a41      	ldr	r2, [pc, #260]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d8:	60d3      	str	r3, [r2, #12]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f827 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7ffb      	ldrb	r3, [r7, #31]
 80053fe:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	492e      	ldr	r1, [pc, #184]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d10c      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f802 	bl	8006440 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
 8005448:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545c:	f023 0204 	bic.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	491c      	ldr	r1, [pc, #112]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005480:	f023 0218 	bic.w	r2, r3, #24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4913      	ldr	r1, [pc, #76]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	490a      	ldr	r1, [pc, #40]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d105      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80054ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ee:	d13e      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d028      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550a:	f200 8773 	bhi.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d005      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d00e      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800551e:	f000 bf69 	b.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	f040 8763 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	61fb      	str	r3, [r7, #28]
        break;
 8005538:	f000 bf5e 	b.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	f040 8758 	bne.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800554c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005550:	61fb      	str	r3, [r7, #28]
        break;
 8005552:	f000 bf53 	b.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	f040 874d 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8005568:	61fb      	str	r3, [r7, #28]
        break;
 800556a:	f000 bf49 	b.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d036      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d84b      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d020      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005590:	e044      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d116      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	e005      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055ca:	e02a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
        break;
 80055d0:	e027      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055de:	d102      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80055e2:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055e4:	e01d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
        break;
 80055ea:	e01a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80055fc:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055fe:	e010      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
        break;
 8005604:	e00d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0003d090 	.word	0x0003d090
 8005610:	08022c58 	.word	0x08022c58
 8005614:	00f42400 	.word	0x00f42400
 8005618:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	bf00      	nop
    }

    switch (PeriphClk)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	f000 8659 	beq.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005632:	f200 86e7 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563c:	f000 8605 	beq.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	f200 86dd 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005650:	f000 8468 	beq.w	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565a:	f200 86d3 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005664:	f000 8530 	beq.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	f200 86c9 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005678:	f000 8180 	beq.w	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005682:	f200 86bf 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568c:	f000 80c2 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005696:	f200 86b5 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	f000 842f 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	f200 86ab 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b4:	f000 83e7 	beq.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	f200 86a1 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	f000 80a4 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d2:	f200 8697 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	f000 8092 	beq.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	f200 868d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	f000 8080 	beq.w	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	f200 8683 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	f000 8553 	beq.w	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	f200 8679 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	f000 84ff 	beq.w	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005722:	f200 866f 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	f000 84a0 	beq.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	f200 8665 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	f000 846b 	beq.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	f200 865d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b20      	cmp	r3, #32
 800574e:	d84b      	bhi.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8656 	beq.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	2b1f      	cmp	r3, #31
 800575e:	f200 8651 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005b81 	.word	0x08005b81
 800576c:	08005bf5 	.word	0x08005bf5
 8005770:	08006405 	.word	0x08006405
 8005774:	08005c87 	.word	0x08005c87
 8005778:	08006405 	.word	0x08006405
 800577c:	08006405 	.word	0x08006405
 8005780:	08006405 	.word	0x08006405
 8005784:	08005cff 	.word	0x08005cff
 8005788:	08006405 	.word	0x08006405
 800578c:	08006405 	.word	0x08006405
 8005790:	08006405 	.word	0x08006405
 8005794:	08006405 	.word	0x08006405
 8005798:	08006405 	.word	0x08006405
 800579c:	08006405 	.word	0x08006405
 80057a0:	08006405 	.word	0x08006405
 80057a4:	08005d83 	.word	0x08005d83
 80057a8:	08006405 	.word	0x08006405
 80057ac:	08006405 	.word	0x08006405
 80057b0:	08006405 	.word	0x08006405
 80057b4:	08006405 	.word	0x08006405
 80057b8:	08006405 	.word	0x08006405
 80057bc:	08006405 	.word	0x08006405
 80057c0:	08006405 	.word	0x08006405
 80057c4:	08006405 	.word	0x08006405
 80057c8:	08006405 	.word	0x08006405
 80057cc:	08006405 	.word	0x08006405
 80057d0:	08006405 	.word	0x08006405
 80057d4:	08006405 	.word	0x08006405
 80057d8:	08006405 	.word	0x08006405
 80057dc:	08006405 	.word	0x08006405
 80057e0:	08006405 	.word	0x08006405
 80057e4:	08005e05 	.word	0x08005e05
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	f000 83e8 	beq.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80057f0:	f000 be08 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057fa:	f001 f867 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
        break;
 8005800:	f000 be03 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800580a:	f001 f85f 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	f000 bdfb 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005814:	4b9c      	ldr	r3, [pc, #624]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800582e:	f200 8096 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d02a      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	f200 808d 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07f      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005850:	d04b      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8005852:	e084      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	f040 8081 	bne.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005862:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800586e:	4b86      	ldr	r3, [pc, #536]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	e005      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800587a:	4b83      	ldr	r3, [pc, #524]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	61fb      	str	r3, [r7, #28]
            break;
 800588e:	e069      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005890:	4b7d      	ldr	r3, [pc, #500]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800589c:	d165      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800589e:	4b7a      	ldr	r3, [pc, #488]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058aa:	d15e      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3301      	adds	r3, #1
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058c0:	4b71      	ldr	r3, [pc, #452]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ca:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
 80058d4:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	0d5b      	lsrs	r3, r3, #21
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	3301      	adds	r3, #1
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	61fb      	str	r3, [r7, #28]
            break;
 80058e8:	e03f      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f6:	d13b      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058f8:	4b63      	ldr	r3, [pc, #396]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005904:	d134      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005906:	f000 ff2d 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 800590a:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	3301      	adds	r3, #1
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	0d5b      	lsrs	r3, r3, #21
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	61fb      	str	r3, [r7, #28]
            break;
 8005948:	e012      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800594a:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10e      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800595a:	61fb      	str	r3, [r7, #28]
            break;
 800595c:	e00b      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 800595e:	bf00      	nop
 8005960:	f000 bd53 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005964:	bf00      	nop
 8005966:	f000 bd50 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800596a:	bf00      	nop
 800596c:	f000 bd4d 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005970:	bf00      	nop
 8005972:	f000 bd4a 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005976:	bf00      	nop
        break;
 8005978:	f000 bd47 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800597e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598a:	d13d      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005998:	f040 8536 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	f040 852e 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059c0:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ca:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0edb      	lsrs	r3, r3, #27
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059de:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 80059ea:	2311      	movs	r3, #17
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e001      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 80059f0:	2307      	movs	r3, #7
 80059f2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	fb03 f202 	mul.w	r2, r3, r2
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	f000 bd00 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a1a:	d016      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a22:	f200 809e 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d032      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	f200 8095 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8087 	beq.w	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a46:	d052      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005a48:	e08b      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f040 8088 	bne.w	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	e005      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	61fb      	str	r3, [r7, #28]
              break;
 8005a84:	e070      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	08022c58 	.word	0x08022c58
 8005a90:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a94:	4baa      	ldr	r3, [pc, #680]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa0:	d165      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005aa2:	4ba7      	ldr	r3, [pc, #668]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d15e      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ac4:	4b9e      	ldr	r3, [pc, #632]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0d5b      	lsrs	r3, r3, #21
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	61fb      	str	r3, [r7, #28]
              break;
 8005aec:	e03f      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005aee:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afa:	d13b      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b08:	d134      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b0a:	f000 fe2b 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005b0e:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b10:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b24:	4b86      	ldr	r3, [pc, #536]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	0d5b      	lsrs	r3, r3, #21
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	3301      	adds	r3, #1
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
              break;
 8005b4c:	e012      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d10e      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005b5c:	4b79      	ldr	r3, [pc, #484]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005b5e:	61fb      	str	r3, [r7, #28]
              break;
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8005b62:	bf00      	nop
 8005b64:	f000 bc50 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b68:	bf00      	nop
 8005b6a:	f000 bc4d 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b6e:	bf00      	nop
 8005b70:	f000 bc4a 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b74:	bf00      	nop
 8005b76:	f000 bc47 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b7a:	bf00      	nop
        break;
 8005b7c:	f000 bc44 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d827      	bhi.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bb1 	.word	0x08005bb1
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bcd 	.word	0x08005bcd
            frequency = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fffc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
            break;
 8005bae:	e01f      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005bb0:	f7fe ff32 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005bb4:	61f8      	str	r0, [r7, #28]
            break;
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d110      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8005bc6:	4b60      	ldr	r3, [pc, #384]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005bc8:	61fb      	str	r3, [r7, #28]
            break;
 8005bca:	e00d      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bcc:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	61fb      	str	r3, [r7, #28]
            break;
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8005be2:	bf00      	nop
 8005be4:	f000 bc11 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005be8:	bf00      	nop
 8005bea:	f000 bc0e 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bee:	bf00      	nop
        break;
 8005bf0:	f000 bc0b 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005bf4:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d839      	bhi.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c7b 	.word	0x08005c7b
 8005c14:	08005c7b 	.word	0x08005c7b
 8005c18:	08005c7b 	.word	0x08005c7b
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c7b 	.word	0x08005c7b
 8005c24:	08005c7b 	.word	0x08005c7b
 8005c28:	08005c7b 	.word	0x08005c7b
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c7b 	.word	0x08005c7b
 8005c34:	08005c7b 	.word	0x08005c7b
 8005c38:	08005c7b 	.word	0x08005c7b
 8005c3c:	08005c65 	.word	0x08005c65
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe ff9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
            break;
 8005c46:	e01d      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c48:	f7fe fee6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005c4c:	61f8      	str	r0, [r7, #28]
            break;
 8005c4e:	e019      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c50:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005c60:	61fb      	str	r3, [r7, #28]
            break;
 8005c62:	e00c      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d107      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	61fb      	str	r3, [r7, #28]
            break;
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005c7a:	bf00      	nop
 8005c7c:	e3c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c7e:	bf00      	nop
 8005c80:	e3c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c82:	bf00      	nop
        break;
 8005c84:	e3c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d021      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b30      	cmp	r3, #48	; 0x30
 8005c9c:	d829      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d011      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d823      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8005cb6:	e01c      	b.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe ff60 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
            break;
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fe feaa 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005cc4:	61f8      	str	r0, [r7, #28]
            break;
 8005cc6:	e019      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005cd8:	61fb      	str	r3, [r7, #28]
            break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cdc:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61fb      	str	r3, [r7, #28]
            break;
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8005cf2:	bf00      	nop
 8005cf4:	e389      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cf6:	bf00      	nop
 8005cf8:	e387      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cfa:	bf00      	nop
        break;
 8005cfc:	e385      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d0e:	d027      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2bc0      	cmp	r3, #192	; 0xc0
 8005d14:	d82f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d829      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d004      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8005d2e:	e022      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe ff24 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
            break;
 8005d36:	e023      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d38:	f7fe fe6e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005d3c:	61f8      	str	r0, [r7, #28]
            break;
 8005d3e:	e01f      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	02dc6c00 	.word	0x02dc6c00
 8005d48:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4c:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d10f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005d5a:	4b97      	ldr	r3, [pc, #604]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005d5c:	61fb      	str	r3, [r7, #28]
            break;
 8005d5e:	e00c      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	61fb      	str	r3, [r7, #28]
            break;
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005d76:	bf00      	nop
 8005d78:	e347      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7a:	bf00      	nop
 8005d7c:	e345      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7e:	bf00      	nop
        break;
 8005d80:	e343      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d82:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d94:	d025      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d82c      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d013      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d824      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005dbc:	e01c      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fedd 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	61f8      	str	r0, [r7, #28]
            break;
 8005dc4:	e01d      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe fe27 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005dca:	61f8      	str	r0, [r7, #28]
            break;
 8005dcc:	e019      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dce:	4b79      	ldr	r3, [pc, #484]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d10f      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005ddc:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005dde:	61fb      	str	r3, [r7, #28]
            break;
 8005de0:	e00c      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005de2:	4b74      	ldr	r3, [pc, #464]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d107      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df4:	61fb      	str	r3, [r7, #28]
            break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005df8:	bf00      	nop
 8005dfa:	e306      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dfc:	bf00      	nop
 8005dfe:	e304      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e00:	bf00      	nop
        break;
 8005e02:	e302      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e04:	4b6b      	ldr	r3, [pc, #428]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e16:	d025      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1e:	d82c      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d013      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d824      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3c:	d004      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fe9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005e44:	61f8      	str	r0, [r7, #28]
            break;
 8005e46:	e01d      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005e48:	f7fe fde6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005e4c:	61f8      	str	r0, [r7, #28]
            break;
 8005e4e:	e019      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e50:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d10f      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005e60:	61fb      	str	r3, [r7, #28]
            break;
 8005e62:	e00c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	61fb      	str	r3, [r7, #28]
            break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005e7a:	bf00      	nop
 8005e7c:	e2c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e7e:	bf00      	nop
 8005e80:	e2c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e82:	bf00      	nop
        break;
 8005e84:	e2c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e86:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ea0:	d12b      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe fdb9 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ea6:	61f8      	str	r0, [r7, #28]
            break;
 8005ea8:	e02a      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d023      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005eb6:	f000 fc55 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005eba:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	fb03 f202 	mul.w	r2, r3, r2
 8005ee4:	4b33      	ldr	r3, [pc, #204]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
            break;
 8005ef8:	e001      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005efa:	bf00      	nop
 8005efc:	e285      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e283      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fe fe46 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005f18:	61f8      	str	r0, [r7, #28]
        break;
 8005f1a:	e276      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f1c:	f7fe fd7c 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e272      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f2a:	f003 0318 	and.w	r3, r3, #24
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d010      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d834      	bhi.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d024      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005f48:	e02d      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f50:	f000 fcbc 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 8005f54:	61f8      	str	r0, [r7, #28]
            break;
 8005f56:	e02b      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d122      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	e005      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4a0c      	ldr	r2, [pc, #48]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	61fb      	str	r3, [r7, #28]
            break;
 8005f90:	e00b      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d106      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005fa2:	61fb      	str	r3, [r7, #28]
            break;
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8005fa6:	bf00      	nop
 8005fa8:	e22f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005faa:	bf00      	nop
 8005fac:	e22d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005fae:	bf00      	nop
        break;
 8005fb0:	e22b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	08022c58 	.word	0x08022c58
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fc0:	4b96      	ldr	r3, [pc, #600]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d819      	bhi.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d004      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe fdc6 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
            break;
 8005ff2:	e010      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ff4:	f7fe fd10 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ff8:	61f8      	str	r0, [r7, #28]
            break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ffc:	4b87      	ldr	r3, [pc, #540]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800600c:	61fb      	str	r3, [r7, #28]
            break;
 800600e:	e001      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8006010:	bf00      	nop
 8006012:	e1fa      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006014:	bf00      	nop
        break;
 8006016:	e1f8      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602a:	d013      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d819      	bhi.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006040:	d004      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8006042:	e011      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fe fd9a 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8006048:	61f8      	str	r0, [r7, #28]
            break;
 800604a:	e010      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 800604c:	f7fe fce4 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006050:	61f8      	str	r0, [r7, #28]
            break;
 8006052:	e00c      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006054:	4b71      	ldr	r3, [pc, #452]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	d104      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8006062:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006064:	61fb      	str	r3, [r7, #28]
            break;
 8006066:	e001      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8006068:	bf00      	nop
 800606a:	e1ce      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800606c:	bf00      	nop
        break;
 800606e:	e1cc      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006070:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006082:	d013      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d819      	bhi.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d004      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 800609a:	e011      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fd6e 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
            break;
 80060a2:	e010      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 80060a4:	f7fe fcb8 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060a8:	61f8      	str	r0, [r7, #28]
            break;
 80060aa:	e00c      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060ac:	4b5b      	ldr	r3, [pc, #364]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d104      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 80060ba:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80060bc:	61fb      	str	r3, [r7, #28]
            break;
 80060be:	e001      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 80060c0:	bf00      	nop
 80060c2:	e1a2      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060c4:	bf00      	nop
        break;
 80060c6:	e1a0      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d011      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d818      	bhi.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe fd45 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060f2:	61f8      	str	r0, [r7, #28]
            break;
 80060f4:	e010      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe fc8f 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060fa:	61f8      	str	r0, [r7, #28]
            break;
 80060fc:	e00c      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d104      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800610c:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800610e:	61fb      	str	r3, [r7, #28]
            break;
 8006110:	e001      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8006112:	bf00      	nop
 8006114:	e179      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006116:	bf00      	nop
        break;
 8006118:	e177      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800612c:	d02c      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006134:	d833      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800613c:	d01a      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006144:	d82b      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8006154:	e023      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe fd11 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800615a:	61f8      	str	r0, [r7, #28]
            break;
 800615c:	e026      	b.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800615e:	4b2f      	ldr	r3, [pc, #188]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d11a      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 800616c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006170:	61fb      	str	r3, [r7, #28]
            break;
 8006172:	e016      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006174:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d111      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006184:	61fb      	str	r3, [r7, #28]
            break;
 8006186:	e00e      	b.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d109      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	61fb      	str	r3, [r7, #28]
            break;
 800619c:	e005      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 800619e:	bf00      	nop
 80061a0:	e133      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a2:	bf00      	nop
 80061a4:	e131      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a6:	bf00      	nop
 80061a8:	e12f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061aa:	bf00      	nop
        break;
 80061ac:	e12d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c0:	d030      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d837      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d0:	d01a      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d8:	d82f      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d004      	beq.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 80061e8:	e027      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80061ea:	f7fe fcc7 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80061ee:	61f8      	str	r0, [r7, #28]
            break;
 80061f0:	e02a      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d11e      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8006200:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006204:	61fb      	str	r3, [r7, #28]
            break;
 8006206:	e01a      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d115      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8006216:	4b02      	ldr	r3, [pc, #8]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006218:	61fb      	str	r3, [r7, #28]
            break;
 800621a:	e012      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800621c:	40021000 	.word	0x40021000
 8006220:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006224:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d109      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	61fb      	str	r3, [r7, #28]
            break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800623a:	bf00      	nop
 800623c:	e0e5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800623e:	bf00      	nop
 8006240:	e0e3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006242:	bf00      	nop
 8006244:	e0e1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006246:	bf00      	nop
        break;
 8006248:	e0df      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800625c:	d02c      	beq.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006264:	d833      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	d01a      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006274:	d82b      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8006284:	e023      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006286:	f7fe fc79 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800628a:	61f8      	str	r0, [r7, #28]
            break;
 800628c:	e026      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11a      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800629c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062a0:	61fb      	str	r3, [r7, #28]
            break;
 80062a2:	e016      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d111      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 80062b2:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 80062b4:	61fb      	str	r3, [r7, #28]
            break;
 80062b6:	e00e      	b.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062b8:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d109      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
            break;
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 80062ce:	bf00      	nop
 80062d0:	e09b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d2:	bf00      	nop
 80062d4:	e099      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d6:	bf00      	nop
 80062d8:	e097      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062da:	bf00      	nop
        break;
 80062dc:	e095      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80062de:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f0:	d042      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f8:	d874      	bhi.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8006308:	e06c      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800630a:	4b42      	ldr	r3, [pc, #264]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006316:	d167      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800631a:	61fb      	str	r3, [r7, #28]
            break;
 800631c:	e064      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800631e:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632a:	d15f      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800632c:	4b39      	ldr	r3, [pc, #228]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006338:	d158      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800633a:	4b36      	ldr	r3, [pc, #216]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	3301      	adds	r3, #1
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	fb03 f202 	mul.w	r2, r3, r2
 8006362:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	0d5b      	lsrs	r3, r3, #21
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	3301      	adds	r3, #1
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	61fb      	str	r3, [r7, #28]
            break;
 8006376:	e039      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006378:	4b26      	ldr	r3, [pc, #152]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d035      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006384:	f000 f9ee 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8006388:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	3301      	adds	r3, #1
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	0edb      	lsrs	r3, r3, #27
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 80063c8:	2311      	movs	r3, #17
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e001      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 80063ce:	2307      	movs	r3, #7
 80063d0:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	fb03 f202 	mul.w	r2, r3, r2
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	61fb      	str	r3, [r7, #28]
            break;
 80063e2:	e005      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 80063e4:	bf00      	nop
 80063e6:	e010      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063e8:	bf00      	nop
 80063ea:	e00e      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063ec:	bf00      	nop
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063f0:	bf00      	nop
        break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f4:	bf00      	nop
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f8:	bf00      	nop
 80063fa:	e006      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006408:	bf00      	nop
    }
  }

  return (frequency);
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40021000 	.word	0x40021000
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800642a:	f043 0304 	orr.w	r3, r3, #4
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000

08006440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d018      	beq.n	8006488 <RCCEx_PLLSAI1_Config+0x48>
 8006456:	2b03      	cmp	r3, #3
 8006458:	d81f      	bhi.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d002      	beq.n	8006464 <RCCEx_PLLSAI1_Config+0x24>
 800645e:	2b02      	cmp	r3, #2
 8006460:	d009      	beq.n	8006476 <RCCEx_PLLSAI1_Config+0x36>
 8006462:	e01a      	b.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006464:	4b65      	ldr	r3, [pc, #404]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d117      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006474:	e014      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006476:	4b61      	ldr	r3, [pc, #388]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d110      	bne.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006486:	e00d      	b.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006488:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006498:	e006      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e004      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 809f 	bne.w	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b2:	4b52      	ldr	r3, [pc, #328]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a51      	ldr	r2, [pc, #324]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fb fd7f 	bl	8001fc0 <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c4:	e00f      	b.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c6:	f7fb fd7b 	bl	8001fc0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d908      	bls.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d4:	4b49      	ldr	r3, [pc, #292]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e4:	e006      	b.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064e6:	4b45      	ldr	r3, [pc, #276]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e9      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x86>
 80064f2:	e000      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80064f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d179      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d116      	bne.n	8006530 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006502:	4b3e      	ldr	r3, [pc, #248]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6892      	ldr	r2, [r2, #8]
 800650e:	0211      	lsls	r1, r2, #8
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68d2      	ldr	r2, [r2, #12]
 8006514:	06d2      	lsls	r2, r2, #27
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	4934      	ldr	r1, [pc, #208]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
 800652e:	e033      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d118      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006536:	4b31      	ldr	r3, [pc, #196]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	4b32      	ldr	r3, [pc, #200]	; (8006604 <RCCEx_PLLSAI1_Config+0x1c4>)
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6892      	ldr	r2, [r2, #8]
 8006542:	0211      	lsls	r1, r2, #8
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6912      	ldr	r2, [r2, #16]
 8006548:	0852      	lsrs	r2, r2, #1
 800654a:	3a01      	subs	r2, #1
 800654c:	0552      	lsls	r2, r2, #21
 800654e:	4311      	orrs	r1, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6852      	ldr	r2, [r2, #4]
 8006554:	3a01      	subs	r2, #1
 8006556:	0112      	lsls	r2, r2, #4
 8006558:	4311      	orrs	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	610b      	str	r3, [r1, #16]
 8006566:	e017      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b26      	ldr	r3, [pc, #152]	; (8006608 <RCCEx_PLLSAI1_Config+0x1c8>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	0211      	lsls	r1, r2, #8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6952      	ldr	r2, [r2, #20]
 800657a:	0852      	lsrs	r2, r2, #1
 800657c:	3a01      	subs	r2, #1
 800657e:	0652      	lsls	r2, r2, #25
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	3a01      	subs	r2, #1
 8006588:	0112      	lsls	r2, r2, #4
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	491a      	ldr	r1, [pc, #104]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fb fd0c 	bl	8001fc0 <HAL_GetTick>
 80065a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065aa:	e00f      	b.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ac:	f7fb fd08 	bl	8001fc0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d908      	bls.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80065ca:	e006      	b.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0e9      	beq.n	80065ac <RCCEx_PLLSAI1_Config+0x16c>
 80065d8:	e000      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80065da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4904      	ldr	r1, [pc, #16]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	07ff800c 	.word	0x07ff800c
 8006604:	ff9f800c 	.word	0xff9f800c
 8006608:	f9ff800c 	.word	0xf9ff800c

0800660c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b03      	cmp	r3, #3
 8006620:	d018      	beq.n	8006654 <RCCEx_PLLSAI2_Config+0x48>
 8006622:	2b03      	cmp	r3, #3
 8006624:	d81f      	bhi.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
 8006626:	2b01      	cmp	r3, #1
 8006628:	d002      	beq.n	8006630 <RCCEx_PLLSAI2_Config+0x24>
 800662a:	2b02      	cmp	r3, #2
 800662c:	d009      	beq.n	8006642 <RCCEx_PLLSAI2_Config+0x36>
 800662e:	e01a      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d117      	bne.n	800666c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006640:	e014      	b.n	800666c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006642:	4b46      	ldr	r3, [pc, #280]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006652:	e00d      	b.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006654:	4b41      	ldr	r3, [pc, #260]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006664:	e006      	b.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
      break;
 800666a:	e004      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006674:	bf00      	nop
  }

  if (status == HAL_OK)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d169      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800667c:	4b37      	ldr	r3, [pc, #220]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a36      	ldr	r2, [pc, #216]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006688:	f7fb fc9a 	bl	8001fc0 <HAL_GetTick>
 800668c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800668e:	e00f      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006690:	f7fb fc96 	bl	8001fc0 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d908      	bls.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ae:	e006      	b.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b0:	4b2a      	ldr	r3, [pc, #168]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e9      	bne.n	8006690 <RCCEx_PLLSAI2_Config+0x84>
 80066bc:	e000      	b.n	80066c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80066be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d144      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066cc:	4b23      	ldr	r3, [pc, #140]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <RCCEx_PLLSAI2_Config+0x154>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	0211      	lsls	r1, r2, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	3a01      	subs	r2, #1
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	491a      	ldr	r1, [pc, #104]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fc5c 	bl	8001fc0 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800670a:	e00f      	b.n	800672c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800670c:	f7fb fc58 	bl	8001fc0 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d908      	bls.n	800672c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800672a:	e006      	b.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0e9      	beq.n	800670c <RCCEx_PLLSAI2_Config+0x100>
 8006738:	e000      	b.n	800673c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800673a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	07ff800c 	.word	0x07ff800c

08006764 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d02d      	beq.n	80067d6 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 800677a:	2b03      	cmp	r3, #3
 800677c:	d835      	bhi.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800677e:	2b01      	cmp	r3, #1
 8006780:	d002      	beq.n	8006788 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d01d      	beq.n	80067c2 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8006786:	e030      	b.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006788:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d12c      	bne.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	e005      	b.n	80067b8 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 80067ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067be:	607b      	str	r3, [r7, #4]
      break;
 80067c0:	e015      	b.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d110      	bne.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80067d0:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 80067d2:	607b      	str	r3, [r7, #4]
      break;
 80067d4:	e00d      	b.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e2:	d108      	bne.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 80067e6:	607b      	str	r3, [r7, #4]
      break;
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f6:	bf00      	nop
  }

  return pllvco;
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	08022c58 	.word	0x08022c58
 8006810:	00f42400 	.word	0x00f42400
 8006814:	007a1200 	.word	0x007a1200

08006818 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d02d      	beq.n	800688a <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d835      	bhi.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d002      	beq.n	800683c <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8006836:	2b02      	cmp	r3, #2
 8006838:	d01d      	beq.n	8006876 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800683a:	e030      	b.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d12c      	bne.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	e005      	b.n	800686c <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 800686e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006872:	607b      	str	r3, [r7, #4]
      break;
 8006874:	e015      	b.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d110      	bne.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8006886:	607b      	str	r3, [r7, #4]
      break;
 8006888:	e00d      	b.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d108      	bne.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 800689a:	607b      	str	r3, [r7, #4]
      break;
 800689c:	e005      	b.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068aa:	bf00      	nop
  }

  return pllvco;
 80068ac:	687b      	ldr	r3, [r7, #4]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	08022c58 	.word	0x08022c58
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	007a1200 	.word	0x007a1200

080068cc <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e0:	d10c      	bne.n	80068fc <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068e2:	4b78      	ldr	r3, [pc, #480]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80068ec:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d110      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	e00c      	b.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80068fc:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006906:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690e:	d102      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006910:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006914:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 80cd 	bne.w	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d003      	beq.n	8006930 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692e:	d13b      	bne.n	80069a8 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800693c:	f040 80bb 	bne.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006940:	4b60      	ldr	r3, [pc, #384]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80b4 	beq.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800694e:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	3301      	adds	r3, #1
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006962:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800696e:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	0edb      	lsrs	r3, r3, #27
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 800698c:	2311      	movs	r3, #17
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e001      	b.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8006992:	2307      	movs	r3, #7
 8006994:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	fb03 f202 	mul.w	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069a6:	e086      	b.n	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d003      	beq.n	80069b6 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d109      	bne.n	80069ca <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b6:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d179      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 80069c4:	4b40      	ldr	r3, [pc, #256]	; (8006ac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80069c6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c8:	e076      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d135      	bne.n	8006a3c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80069d0:	4b3c      	ldr	r3, [pc, #240]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d06d      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80069dc:	f7ff fec2 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 80069e0:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	3301      	adds	r3, #1
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a00:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	0edb      	lsrs	r3, r3, #27
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8006a20:	2311      	movs	r3, #17
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e001      	b.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8006a26:	2307      	movs	r3, #7
 8006a28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	fb03 f202 	mul.w	r2, r3, r2
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e03d      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d003      	beq.n	8006a4a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d136      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d030      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8006a56:	f7ff fedf 	bl	8006818 <RCCEx_PLLSAI2_GetVCOFreq>
 8006a5a:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3301      	adds	r3, #1
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	0edb      	lsrs	r3, r3, #27
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006a9a:	2311      	movs	r3, #17
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e001      	b.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006aa0:	2307      	movs	r3, #7
 8006aa2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	fb03 f202 	mul.w	r2, r3, r2
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ab6:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e1da      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10e      	bne.n	8006b06 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a87      	ldr	r2, [pc, #540]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d107      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d103      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e1c6      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa ffc2 	bl	8001aa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9c3 	bl	8006eac <SAI_Disable>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e1b1      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00c      	beq.n	8006b5a <HAL_SAI_Init+0x8e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d80d      	bhi.n	8006b60 <HAL_SAI_Init+0x94>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SAI_Init+0x82>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <HAL_SAI_Init+0x88>
 8006b4c:	e008      	b.n	8006b60 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b52:	e008      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006b54:	2310      	movs	r3, #16
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b58:	e005      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006b5a:	2320      	movs	r3, #32
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b64:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d81d      	bhi.n	8006baa <HAL_SAI_Init+0xde>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <HAL_SAI_Init+0xa8>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b8b 	.word	0x08006b8b
 8006b7c:	08006b93 	.word	0x08006b93
 8006b80:	08006b9b 	.word	0x08006b9b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
      break;
 8006b88:	e012      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	61fb      	str	r3, [r7, #28]
      break;
 8006b90:	e00e      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b96:	61fb      	str	r3, [r7, #28]
      break;
 8006b98:	e00a      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b9e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ba8:	e002      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
      break;
 8006bae:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a55      	ldr	r2, [pc, #340]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_SAI_Init+0xf8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a54      	ldr	r2, [pc, #336]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006bc4:	4a53      	ldr	r2, [pc, #332]	; (8006d14 <HAL_SAI_Init+0x248>)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e002      	b.n	8006bd2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_SAI_Init+0x24c>)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d07e      	beq.n	8006cd8 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_SAI_Init+0x126>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a48      	ldr	r2, [pc, #288]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d104      	bne.n	8006bfc <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006bf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006bf6:	f7fe fc71 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006bfa:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a46      	ldr	r2, [pc, #280]	; (8006d1c <HAL_SAI_Init+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_SAI_Init+0x144>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a45      	ldr	r2, [pc, #276]	; (8006d20 <HAL_SAI_Init+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d104      	bne.n	8006c1a <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c14:	f7fe fc62 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006c18:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c22:	d120      	bne.n	8006c66 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d102      	bne.n	8006c32 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e00a      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d103      	bne.n	8006c42 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e002      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e017      	b.n	8006c96 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c6e:	d101      	bne.n	8006c74 <HAL_SAI_Init+0x1a8>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <HAL_SAI_Init+0x1aa>
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4619      	mov	r1, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c94:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	08da      	lsrs	r2, r3, #3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006ca8:	fba3 2301 	umull	r2, r3, r3, r1
 8006cac:	08da      	lsrs	r2, r3, #3
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	1aca      	subs	r2, r1, r3
 8006cb8:	2a08      	cmp	r2, #8
 8006cba:	d904      	bls.n	8006cc6 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d104      	bne.n	8006cd8 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_SAI_Init+0x21c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d109      	bne.n	8006cfc <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_SAI_Init+0x228>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e001      	b.n	8006cf8 <HAL_SAI_Init+0x22c>
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e017      	b.n	8006d2c <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d111      	bne.n	8006d28 <HAL_SAI_Init+0x25c>
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	e00f      	b.n	8006d2a <HAL_SAI_Init+0x25e>
 8006d0a:	bf00      	nop
 8006d0c:	40015404 	.word	0x40015404
 8006d10:	40015424 	.word	0x40015424
 8006d14:	40015400 	.word	0x40015400
 8006d18:	40015800 	.word	0x40015800
 8006d1c:	40015804 	.word	0x40015804
 8006d20:	40015824 	.word	0x40015824
 8006d24:	cccccccd 	.word	0xcccccccd
 8006d28:	2300      	movs	r3, #0
 8006d2a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_SAI_Init+0x3d0>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	431a      	orrs	r2, r3
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006d64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	051b      	lsls	r3, r3, #20
 8006d78:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d7e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d9c:	f023 030f 	bic.w	r3, r3, #15
 8006da0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_SAI_Init+0x3d4>)
 8006dcc:	400b      	ands	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006de0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006de6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006dec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	3b01      	subs	r3, #1
 8006df4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006df6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68d9      	ldr	r1, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006e0e:	400b      	ands	r3, r1
 8006e10:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_SAI_Init+0x3d8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d119      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10e      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e68:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	f005c010 	.word	0xf005c010
 8006ea0:	fff88000 	.word	0xfff88000
 8006ea4:	40015404 	.word	0x40015404
 8006ea8:	40015400 	.word	0x40015400

08006eac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <SAI_Disable+0x6c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <SAI_Disable+0x70>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	0b1b      	lsrs	r3, r3, #12
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ed6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef2:	e009      	b.n	8006f08 <SAI_Disable+0x5c>
    }
    count--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e7      	bne.n	8006ed8 <SAI_Disable+0x2c>

  return status;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	95cbec1b 	.word	0x95cbec1b

08006f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e095      	b.n	800705e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f42:	d009      	beq.n	8006f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	e005      	b.n	8006f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa fc08 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d902      	bls.n	8006fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006fae:	d007      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	ea42 0103 	orr.w	r1, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f003 0204 	and.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e038      	b.n	80070ee <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7fa fcfd 	bl	8001a90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3308      	adds	r3, #8
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f002 f823 	bl	80090ec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	461a      	mov	r2, r3
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	f002 f8eb 	bl	800928c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6858      	ldr	r0, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	f002 f934 	bl	8009330 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	6892      	ldr	r2, [r2, #8]
 80070d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6892      	ldr	r2, [r2, #8]
 80070dc:	f041 0101 	orr.w	r1, r1, #1
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e049      	b.n	800719c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fa fb79 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f000 fba3 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e04f      	b.n	800725c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a23      	ldr	r2, [pc, #140]	; (8007268 <HAL_TIM_Base_Start_IT+0xc4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01d      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d018      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_TIM_Base_Start_IT+0xc8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_TIM_Base_Start_IT+0xcc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00e      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <HAL_TIM_Base_Start_IT+0xd0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_TIM_Base_Start_IT+0xd4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <HAL_TIM_Base_Start_IT+0xd8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d115      	bne.n	8007246 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_TIM_Base_Start_IT+0xdc>)
 8007222:	4013      	ands	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d015      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d011      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	e008      	b.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e000      	b.n	800725a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00
 8007278:	40013400 	.word	0x40013400
 800727c:	40014000 	.word	0x40014000
 8007280:	00010007 	.word	0x00010007

08007284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e049      	b.n	800732a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f841 	bl	8007332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f000 fadc 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d122      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b02      	cmp	r3, #2
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0202 	mvn.w	r2, #2
 8007372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa5b 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa4d 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa5e 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d122      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d11b      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0204 	mvn.w	r2, #4
 80073c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa31 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 80073e2:	e005      	b.n	80073f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa23 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa34 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d122      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b08      	cmp	r3, #8
 8007410:	d11b      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f06f 0208 	mvn.w	r2, #8
 800741a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa07 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 8007436:	e005      	b.n	8007444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9f9 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa0a 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d122      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b10      	cmp	r3, #16
 8007464:	d11b      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f06f 0210 	mvn.w	r2, #16
 800746e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2208      	movs	r2, #8
 8007474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9dd 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800748a:	e005      	b.n	8007498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9cf 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e0 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10e      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0201 	mvn.w	r2, #1
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7f9 ff01 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ff7b 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ff6e 	bl	8008400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f98e 	bl	800786c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 ff2e 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800759e:	2302      	movs	r3, #2
 80075a0:	e0ff      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b14      	cmp	r3, #20
 80075ae:	f200 80f0 	bhi.w	8007792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007793 	.word	0x08007793
 80075c0:	08007793 	.word	0x08007793
 80075c4:	08007793 	.word	0x08007793
 80075c8:	0800764d 	.word	0x0800764d
 80075cc:	08007793 	.word	0x08007793
 80075d0:	08007793 	.word	0x08007793
 80075d4:	08007793 	.word	0x08007793
 80075d8:	0800768f 	.word	0x0800768f
 80075dc:	08007793 	.word	0x08007793
 80075e0:	08007793 	.word	0x08007793
 80075e4:	08007793 	.word	0x08007793
 80075e8:	080076cf 	.word	0x080076cf
 80075ec:	08007793 	.word	0x08007793
 80075f0:	08007793 	.word	0x08007793
 80075f4:	08007793 	.word	0x08007793
 80075f8:	08007711 	.word	0x08007711
 80075fc:	08007793 	.word	0x08007793
 8007600:	08007793 	.word	0x08007793
 8007604:	08007793 	.word	0x08007793
 8007608:	08007751 	.word	0x08007751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f9ce 	bl	80079b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e0a5      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa3e 	bl	8007ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]
      break;
 800768c:	e084      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 faa7 	bl	8007be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0204 	bic.w	r2, r2, #4
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      break;
 80076cc:	e064      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fb0f 	bl	8007cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	61da      	str	r2, [r3, #28]
      break;
 800770e:	e043      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fb58 	bl	8007dcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0208 	orr.w	r2, r2, #8
 800772a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0204 	bic.w	r2, r2, #4
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800774e:	e023      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fb9c 	bl	8007e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800776a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007790:	e002      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e031      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbc2 	bl	8007f60 <TIM_SlaveTimer_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e018      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007804:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007814:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00f      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3c      	ldr	r2, [pc, #240]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3b      	ldr	r2, [pc, #236]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3a      	ldr	r2, [pc, #232]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d108      	bne.n	80078d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <TIM_Base_SetConfig+0x114>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d01b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d017      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2b      	ldr	r2, [pc, #172]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a28      	ldr	r2, [pc, #160]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00f      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a11      	ldr	r2, [pc, #68]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d007      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	615a      	str	r2, [r3, #20]
}
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40014400 	.word	0x40014400
 80079b0:	40014800 	.word	0x40014800

080079b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f023 0302 	bic.w	r3, r3, #2
 8007a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00f      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2b      	ldr	r2, [pc, #172]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00b      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a29      	ldr	r2, [pc, #164]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a28      	ldr	r2, [pc, #160]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40013400 	.word	0x40013400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400
 8007ad0:	40014800 	.word	0x40014800

08007ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0320 	bic.w	r3, r3, #32
 8007b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC2_SetConfig+0x6c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d10d      	bne.n	8007b5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <TIM_OC2_SetConfig+0x108>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <TIM_OC2_SetConfig+0x10c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a19      	ldr	r2, [pc, #100]	; (8007be4 <TIM_OC2_SetConfig+0x110>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d113      	bne.n	8007bac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000
 8007be0:	40014400 	.word	0x40014400
 8007be4:	40014800 	.word	0x40014800

08007be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a27      	ldr	r2, [pc, #156]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_OC3_SetConfig+0x6a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10d      	bne.n	8007c6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00f      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <TIM_OC3_SetConfig+0x104>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <TIM_OC3_SetConfig+0x108>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a18      	ldr	r2, [pc, #96]	; (8007cf4 <TIM_OC3_SetConfig+0x10c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d113      	bne.n	8007cbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800

08007cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC4_SetConfig+0xc0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC4_SetConfig+0xc4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC4_SetConfig+0xc8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <TIM_OC4_SetConfig+0xcc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <TIM_OC4_SetConfig+0xd0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d109      	bne.n	8007d90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <TIM_OC5_SetConfig+0xb4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00f      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <TIM_OC5_SetConfig+0xb8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <TIM_OC5_SetConfig+0xbc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <TIM_OC5_SetConfig+0xc0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <TIM_OC5_SetConfig+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d109      	bne.n	8007e5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800

08007e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	051b      	lsls	r3, r3, #20
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_OC6_SetConfig+0xb8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00f      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_OC6_SetConfig+0xbc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_OC6_SetConfig+0xc0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_OC6_SetConfig+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_OC6_SetConfig+0xc8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d109      	bne.n	8007f24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	029b      	lsls	r3, r3, #10
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40013400 	.word	0x40013400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400
 8007f5c:	40014800 	.word	0x40014800

08007f60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b70      	cmp	r3, #112	; 0x70
 8007fb0:	d01a      	beq.n	8007fe8 <TIM_SlaveTimer_SetConfig+0x88>
 8007fb2:	2b70      	cmp	r3, #112	; 0x70
 8007fb4:	d860      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d054      	beq.n	8008064 <TIM_SlaveTimer_SetConfig+0x104>
 8007fba:	2b60      	cmp	r3, #96	; 0x60
 8007fbc:	d85c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fbe:	2b50      	cmp	r3, #80	; 0x50
 8007fc0:	d046      	beq.n	8008050 <TIM_SlaveTimer_SetConfig+0xf0>
 8007fc2:	2b50      	cmp	r3, #80	; 0x50
 8007fc4:	d858      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d019      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x9e>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d854      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d055      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	d850      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d051      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d84c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d04d      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d04b      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe6:	e047      	b.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68d9      	ldr	r1, [r3, #12]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f000 f8a6 	bl	8008148 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007ffc:	e040      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b05      	cmp	r3, #5
 8008004:	d101      	bne.n	800800a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e03b      	b.n	8008082 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008030:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
      break;
 800804e:	e017      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	461a      	mov	r2, r3
 800805e:	f000 f814 	bl	800808a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008062:	e00d      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	461a      	mov	r2, r3
 8008072:	f000 f839 	bl	80080e8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008076:	e003      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	e000      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800807e:	bf00      	nop
  }

  return status;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f023 0201 	bic.w	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 030a 	bic.w	r3, r3, #10
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f023 0210 	bic.w	r2, r3, #16
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	031b      	lsls	r3, r3, #12
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e068      	b.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d108      	bne.n	80081e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1e      	ldr	r2, [pc, #120]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01d      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d018      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1a      	ldr	r2, [pc, #104]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a13      	ldr	r2, [pc, #76]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10c      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4313      	orrs	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40014000 	.word	0x40014000

08008298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e087      	b.n	80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a25      	ldr	r2, [pc, #148]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d106      	bne.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d126      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	051b      	lsls	r3, r3, #20
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d106      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e042      	b.n	80084ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 f845 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f82c 	bl	80084b4 <UART_SetConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb20 	bl	8008ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fba7 	bl	8008bf8 <UART_CheckIdleState>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b8:	b08c      	sub	sp, #48	; 0x30
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	431a      	orrs	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4313      	orrs	r3, r2
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4baa      	ldr	r3, [pc, #680]	; (800878c <UART_SetConfig+0x2d8>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a9f      	ldr	r2, [pc, #636]	; (8008790 <UART_SetConfig+0x2dc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800851c:	4313      	orrs	r3, r2
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800852a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008534:	430b      	orrs	r3, r1
 8008536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f023 010f 	bic.w	r1, r3, #15
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a90      	ldr	r2, [pc, #576]	; (8008794 <UART_SetConfig+0x2e0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d125      	bne.n	80085a4 <UART_SetConfig+0xf0>
 8008558:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <UART_SetConfig+0x2e4>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d81a      	bhi.n	800859c <UART_SetConfig+0xe8>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <UART_SetConfig+0xb8>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008585 	.word	0x08008585
 8008578:	08008595 	.word	0x08008595
 800857c:	2301      	movs	r3, #1
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e116      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008584:	2302      	movs	r3, #2
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858a:	e112      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008592:	e10e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859a:	e10a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a2:	e106      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7c      	ldr	r2, [pc, #496]	; (800879c <UART_SetConfig+0x2e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d138      	bne.n	8008620 <UART_SetConfig+0x16c>
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <UART_SetConfig+0x2e4>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f003 030c 	and.w	r3, r3, #12
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d82d      	bhi.n	8008618 <UART_SetConfig+0x164>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x110>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085f9 	.word	0x080085f9
 80085c8:	08008619 	.word	0x08008619
 80085cc:	08008619 	.word	0x08008619
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008609 	.word	0x08008609
 80085d8:	08008619 	.word	0x08008619
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008619 	.word	0x08008619
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008619 	.word	0x08008619
 80085ec:	08008619 	.word	0x08008619
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008611 	.word	0x08008611
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e0d8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e0d4      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e0d0      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e0cc      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e0c8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a5e      	ldr	r2, [pc, #376]	; (80087a0 <UART_SetConfig+0x2ec>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d125      	bne.n	8008676 <UART_SetConfig+0x1c2>
 800862a:	4b5b      	ldr	r3, [pc, #364]	; (8008798 <UART_SetConfig+0x2e4>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d016      	beq.n	8008666 <UART_SetConfig+0x1b2>
 8008638:	2b30      	cmp	r3, #48	; 0x30
 800863a:	d818      	bhi.n	800866e <UART_SetConfig+0x1ba>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d00a      	beq.n	8008656 <UART_SetConfig+0x1a2>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d814      	bhi.n	800866e <UART_SetConfig+0x1ba>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <UART_SetConfig+0x19a>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d008      	beq.n	800865e <UART_SetConfig+0x1aa>
 800864c:	e00f      	b.n	800866e <UART_SetConfig+0x1ba>
 800864e:	2300      	movs	r3, #0
 8008650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008654:	e0ad      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008656:	2302      	movs	r3, #2
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865c:	e0a9      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800865e:	2304      	movs	r3, #4
 8008660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008664:	e0a5      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008666:	2308      	movs	r3, #8
 8008668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866c:	e0a1      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800866e:	2310      	movs	r3, #16
 8008670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008674:	e09d      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a4a      	ldr	r2, [pc, #296]	; (80087a4 <UART_SetConfig+0x2f0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d125      	bne.n	80086cc <UART_SetConfig+0x218>
 8008680:	4b45      	ldr	r3, [pc, #276]	; (8008798 <UART_SetConfig+0x2e4>)
 8008682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800868a:	2bc0      	cmp	r3, #192	; 0xc0
 800868c:	d016      	beq.n	80086bc <UART_SetConfig+0x208>
 800868e:	2bc0      	cmp	r3, #192	; 0xc0
 8008690:	d818      	bhi.n	80086c4 <UART_SetConfig+0x210>
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d00a      	beq.n	80086ac <UART_SetConfig+0x1f8>
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d814      	bhi.n	80086c4 <UART_SetConfig+0x210>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <UART_SetConfig+0x1f0>
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d008      	beq.n	80086b4 <UART_SetConfig+0x200>
 80086a2:	e00f      	b.n	80086c4 <UART_SetConfig+0x210>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e082      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086ac:	2302      	movs	r3, #2
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e07e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086b4:	2304      	movs	r3, #4
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ba:	e07a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086bc:	2308      	movs	r3, #8
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c2:	e076      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086c4:	2310      	movs	r3, #16
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ca:	e072      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <UART_SetConfig+0x2f4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d12a      	bne.n	800872c <UART_SetConfig+0x278>
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <UART_SetConfig+0x2e4>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e4:	d01a      	beq.n	800871c <UART_SetConfig+0x268>
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d81b      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f0:	d00c      	beq.n	800870c <UART_SetConfig+0x258>
 80086f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f6:	d815      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <UART_SetConfig+0x250>
 80086fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008700:	d008      	beq.n	8008714 <UART_SetConfig+0x260>
 8008702:	e00f      	b.n	8008724 <UART_SetConfig+0x270>
 8008704:	2300      	movs	r3, #0
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e052      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800870c:	2302      	movs	r3, #2
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e04e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e04a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008722:	e046      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872a:	e042      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a17      	ldr	r2, [pc, #92]	; (8008790 <UART_SetConfig+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d13a      	bne.n	80087ac <UART_SetConfig+0x2f8>
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <UART_SetConfig+0x2e4>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008744:	d01a      	beq.n	800877c <UART_SetConfig+0x2c8>
 8008746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800874a:	d81b      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008750:	d00c      	beq.n	800876c <UART_SetConfig+0x2b8>
 8008752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008756:	d815      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <UART_SetConfig+0x2b0>
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d008      	beq.n	8008774 <UART_SetConfig+0x2c0>
 8008762:	e00f      	b.n	8008784 <UART_SetConfig+0x2d0>
 8008764:	2300      	movs	r3, #0
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876a:	e022      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800876c:	2302      	movs	r3, #2
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e01e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e01a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e016      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e012      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800878c:	cfff69f3 	.word	0xcfff69f3
 8008790:	40008000 	.word	0x40008000
 8008794:	40013800 	.word	0x40013800
 8008798:	40021000 	.word	0x40021000
 800879c:	40004400 	.word	0x40004400
 80087a0:	40004800 	.word	0x40004800
 80087a4:	40004c00 	.word	0x40004c00
 80087a8:	40005000 	.word	0x40005000
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4ab0      	ldr	r2, [pc, #704]	; (8008a78 <UART_SetConfig+0x5c4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	f040 809b 	bne.w	80088f4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d827      	bhi.n	8008816 <UART_SetConfig+0x362>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x318>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008817 	.word	0x08008817
 80087dc:	08008807 	.word	0x08008807
 80087e0:	08008817 	.word	0x08008817
 80087e4:	08008817 	.word	0x08008817
 80087e8:	08008817 	.word	0x08008817
 80087ec:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f0:	f7fc f9c4 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fc f9d4 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b9e      	ldr	r3, [pc, #632]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fc f907 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8130 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	4a94      	ldr	r2, [pc, #592]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008834:	461a      	mov	r2, r3
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	fbb3 f3f2 	udiv	r3, r3, r2
 800883c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4413      	add	r3, r2
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	d305      	bcc.n	800885a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008860:	e113      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2200      	movs	r2, #0
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	60fa      	str	r2, [r7, #12]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	4a84      	ldr	r2, [pc, #528]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008874:	b29b      	uxth	r3, r3
 8008876:	2200      	movs	r2, #0
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008884:	f7f7 fcdc 	bl	8000240 <__aeabi_uldivmod>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4610      	mov	r0, r2
 800888e:	4619      	mov	r1, r3
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	020b      	lsls	r3, r1, #8
 800889a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800889e:	0202      	lsls	r2, r0, #8
 80088a0:	6979      	ldr	r1, [r7, #20]
 80088a2:	6849      	ldr	r1, [r1, #4]
 80088a4:	0849      	lsrs	r1, r1, #1
 80088a6:	2000      	movs	r0, #0
 80088a8:	460c      	mov	r4, r1
 80088aa:	4605      	mov	r5, r0
 80088ac:	eb12 0804 	adds.w	r8, r2, r4
 80088b0:	eb43 0905 	adc.w	r9, r3, r5
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	469a      	mov	sl, r3
 80088bc:	4693      	mov	fp, r2
 80088be:	4652      	mov	r2, sl
 80088c0:	465b      	mov	r3, fp
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fcbb 	bl	8000240 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4613      	mov	r3, r2
 80088d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d8:	d308      	bcc.n	80088ec <UART_SetConfig+0x438>
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e0:	d204      	bcs.n	80088ec <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0ce      	b.n	8008a8a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088f2:	e0ca      	b.n	8008a8a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d166      	bne.n	80089cc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80088fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008902:	2b08      	cmp	r3, #8
 8008904:	d827      	bhi.n	8008956 <UART_SetConfig+0x4a2>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0x458>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008931 	.word	0x08008931
 8008910:	08008939 	.word	0x08008939
 8008914:	08008941 	.word	0x08008941
 8008918:	08008957 	.word	0x08008957
 800891c:	08008947 	.word	0x08008947
 8008920:	08008957 	.word	0x08008957
 8008924:	08008957 	.word	0x08008957
 8008928:	08008957 	.word	0x08008957
 800892c:	0800894f 	.word	0x0800894f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fc f924 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008936:	e014      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008938:	f7fc f934 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800893e:	e010      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008940:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008944:	e00d      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008946:	f7fc f867 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800894c:	e009      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800894e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008954:	e005      	b.n	8008962 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8090 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	4a44      	ldr	r2, [pc, #272]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008974:	461a      	mov	r2, r3
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	fbb3 f3f2 	udiv	r3, r3, r2
 800897c:	005a      	lsls	r2, r3, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	441a      	add	r2, r3
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	fbb2 f3f3 	udiv	r3, r2, r3
 800898e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d916      	bls.n	80089c4 <UART_SetConfig+0x510>
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d212      	bcs.n	80089c4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f023 030f 	bic.w	r3, r3, #15
 80089a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	8bfb      	ldrh	r3, [r7, #30]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	8bfa      	ldrh	r2, [r7, #30]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	e062      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089ca:	e05e      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d828      	bhi.n	8008a26 <UART_SetConfig+0x572>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x528>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fc f8bc 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a06:	e014      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fc f8cc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a0e:	e010      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a14:	e00d      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fb ffff 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8008a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a30:	bf00      	nop
    }

    if (pclk != 0U)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d028      	beq.n	8008a8a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	441a      	add	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d910      	bls.n	8008a84 <UART_SetConfig+0x5d0>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d20c      	bcs.n	8008a84 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
 8008a74:	e009      	b.n	8008a8a <UART_SetConfig+0x5d6>
 8008a76:	bf00      	nop
 8008a78:	40008000 	.word	0x40008000
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	08022c98 	.word	0x08022c98
      }
      else
      {
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01a      	beq.n	8008bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb2:	d10a      	bne.n	8008bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b098      	sub	sp, #96	; 0x60
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c08:	f7f9 f9da 	bl	8001fc0 <HAL_GetTick>
 8008c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d12f      	bne.n	8008c7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c24:	2200      	movs	r2, #0
 8008c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f88e 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d022      	beq.n	8008c7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c54:	647b      	str	r3, [r7, #68]	; 0x44
 8008c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e063      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d149      	bne.n	8008d1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c92:	2200      	movs	r2, #0
 8008c94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f857 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03c      	beq.n	8008d1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e6      	bne.n	8008ca4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf6:	61fa      	str	r2, [r7, #28]
 8008cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	617b      	str	r3, [r7, #20]
   return(result);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e5      	bne.n	8008cd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e012      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3758      	adds	r7, #88	; 0x58
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5c:	e049      	b.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d045      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d66:	f7f9 f92b 	bl	8001fc0 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d302      	bcc.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e048      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d031      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d110      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2208      	movs	r2, #8
 8008da2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f838 	bl	8008e1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2208      	movs	r2, #8
 8008dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e029      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dcc:	d111      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f81e 	bl	8008e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e00f      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	bf0c      	ite	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	2300      	movne	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d0a6      	beq.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b095      	sub	sp, #84	; 0x54
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	643b      	str	r3, [r7, #64]	; 0x40
 8008e42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e3      	bne.n	8008e54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d118      	bne.n	8008ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008eda:	bf00      	nop
 8008edc:	3754      	adds	r7, #84	; 0x54
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_UARTEx_DisableFifoMode+0x16>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e027      	b.n	8008f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2224      	movs	r2, #36	; 0x24
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e02d      	b.n	8008fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f84f 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e02d      	b.n	8009048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f811 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	2b00      	cmp	r3, #0
 800905e:	d108      	bne.n	8009072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009070:	e031      	b.n	80090d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009072:	2308      	movs	r3, #8
 8009074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009076:	2308      	movs	r3, #8
 8009078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	0e5b      	lsrs	r3, r3, #25
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	0f5b      	lsrs	r3, r3, #29
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	7b3a      	ldrb	r2, [r7, #12]
 800909e:	4911      	ldr	r1, [pc, #68]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090a0:	5c8a      	ldrb	r2, [r1, r2]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090a6:	7b3a      	ldrb	r2, [r7, #12]
 80090a8:	490f      	ldr	r1, [pc, #60]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090be:	5c8a      	ldrb	r2, [r1, r2]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090c4:	7b7a      	ldrb	r2, [r7, #13]
 80090c6:	4908      	ldr	r1, [pc, #32]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	08022cb0 	.word	0x08022cb0
 80090e8:	08022cb8 	.word	0x08022cb8

080090ec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	f023 0101 	bic.w	r1, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d102      	bne.n	800911c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009116:	2340      	movs	r3, #64	; 0x40
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e001      	b.n	8009120 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800912c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009132:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009138:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800913e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009144:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800914a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009150:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009156:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800915c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <FMC_NORSRAM_Init+0x19c>)
 8009190:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009198:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80091a8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80091b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	43db      	mvns	r3, r3
 80091c0:	ea02 0103 	and.w	r1, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4319      	orrs	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091da:	d10c      	bne.n	80091f6 <FMC_NORSRAM_Init+0x10a>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009212:	2b01      	cmp	r3, #1
 8009214:	d12f      	bne.n	8009276 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b04      	cmp	r3, #4
 800922e:	d014      	beq.n	800925a <FMC_NORSRAM_Init+0x16e>
 8009230:	2b04      	cmp	r3, #4
 8009232:	d819      	bhi.n	8009268 <FMC_NORSRAM_Init+0x17c>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <FMC_NORSRAM_Init+0x152>
 8009238:	2b02      	cmp	r3, #2
 800923a:	d007      	beq.n	800924c <FMC_NORSRAM_Init+0x160>
 800923c:	e014      	b.n	8009268 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	621a      	str	r2, [r3, #32]
        break;
 800924a:	e015      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]
        break;
 8009258:	e00e      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	621a      	str	r2, [r3, #32]
        break;
 8009266:	e007      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]
        break;
 8009274:	e000      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8009276:	bf00      	nop

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0008fb7f 	.word	0x0008fb7f

0800928c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	431a      	orrs	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	431a      	orrs	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	431a      	orrs	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	041b      	lsls	r3, r3, #16
 80092c4:	431a      	orrs	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	431a      	orrs	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	3b02      	subs	r3, #2
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	ea42 0103 	orr.w	r1, r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	3201      	adds	r2, #1
 80092e4:	4319      	orrs	r1, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f8:	d113      	bne.n	8009322 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009302:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	3b01      	subs	r3, #1
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009344:	d121      	bne.n	800938a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6819      	ldr	r1, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4319      	orrs	r1, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	4319      	orrs	r1, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	4319      	orrs	r1, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	4319      	orrs	r1, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	430b      	orrs	r3, r1
 800937c:	ea42 0103 	orr.w	r1, r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009388:	e005      	b.n	8009396 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b08b      	sub	sp, #44	; 0x2c
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	613b      	str	r3, [r7, #16]
  return result;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80093ca:	2320      	movs	r3, #32
 80093cc:	e003      	b.n	80093d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	fab3 f383 	clz	r3, r3
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	2103      	movs	r1, #3
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	43db      	mvns	r3, r3
 80093e0:	401a      	ands	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	fa93 f3a3 	rbit	r3, r3
 80093ec:	61fb      	str	r3, [r7, #28]
  return result;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80093f8:	2320      	movs	r3, #32
 80093fa:	e003      	b.n	8009404 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]
}
 8009412:	bf00      	nop
 8009414:	372c      	adds	r7, #44	; 0x2c
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	431a      	orrs	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800944e:	b480      	push	{r7}
 8009450:	b08b      	sub	sp, #44	; 0x2c
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	fa93 f3a3 	rbit	r3, r3
 8009468:	613b      	str	r3, [r7, #16]
  return result;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009474:	2320      	movs	r3, #32
 8009476:	e003      	b.n	8009480 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	fab3 f383 	clz	r3, r3
 800947e:	b2db      	uxtb	r3, r3
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	2103      	movs	r1, #3
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	43db      	mvns	r3, r3
 800948a:	401a      	ands	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	fa93 f3a3 	rbit	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
  return result;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80094a2:	2320      	movs	r3, #32
 80094a4:	e003      	b.n	80094ae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	fab3 f383 	clz	r3, r3
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80094bc:	bf00      	nop
 80094be:	372c      	adds	r7, #44	; 0x2c
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b08b      	sub	sp, #44	; 0x2c
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	fa93 f3a3 	rbit	r3, r3
 80094e2:	613b      	str	r3, [r7, #16]
  return result;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094ee:	2320      	movs	r3, #32
 80094f0:	e003      	b.n	80094fa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	fab3 f383 	clz	r3, r3
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	2103      	movs	r1, #3
 80094fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009502:	43db      	mvns	r3, r3
 8009504:	401a      	ands	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	fa93 f3a3 	rbit	r3, r3
 8009510:	61fb      	str	r3, [r7, #28]
  return result;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800951c:	2320      	movs	r3, #32
 800951e:	e003      	b.n	8009528 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	fab3 f383 	clz	r3, r3
 8009526:	b2db      	uxtb	r3, r3
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	431a      	orrs	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	60da      	str	r2, [r3, #12]
}
 8009536:	bf00      	nop
 8009538:	372c      	adds	r7, #44	; 0x2c
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009542:	b480      	push	{r7}
 8009544:	b08b      	sub	sp, #44	; 0x2c
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	613b      	str	r3, [r7, #16]
  return result;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009568:	2320      	movs	r3, #32
 800956a:	e003      	b.n	8009574 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	fab3 f383 	clz	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	210f      	movs	r1, #15
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	fa93 f3a3 	rbit	r3, r3
 800958a:	61fb      	str	r3, [r7, #28]
  return result;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009596:	2320      	movs	r3, #32
 8009598:	e003      	b.n	80095a2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	431a      	orrs	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80095b0:	bf00      	nop
 80095b2:	372c      	adds	r7, #44	; 0x2c
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08b      	sub	sp, #44	; 0x2c
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	613b      	str	r3, [r7, #16]
  return result;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	210f      	movs	r1, #15
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	fa93 f3a3 	rbit	r3, r3
 8009608:	61fb      	str	r3, [r7, #28]
  return result;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009614:	2320      	movs	r3, #32
 8009616:	e003      	b.n	8009620 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	fab3 f383 	clz	r3, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	fa01 f303 	lsl.w	r3, r1, r3
 8009628:	431a      	orrs	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800962e:	bf00      	nop
 8009630:	372c      	adds	r7, #44	; 0x2c
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	fa93 f3a3 	rbit	r3, r3
 8009650:	60fb      	str	r3, [r7, #12]
  return result;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <LL_GPIO_Init+0x26>
    return 32U;
 800965c:	2320      	movs	r3, #32
 800965e:	e003      	b.n	8009668 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	fab3 f383 	clz	r3, r3
 8009666:	b2db      	uxtb	r3, r3
 8009668:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800966a:	e047      	b.n	80096fc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	2101      	movs	r1, #1
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d039      	beq.n	80096f6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d003      	beq.n	8009692 <LL_GPIO_Init+0x58>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d10d      	bne.n	80096ae <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	461a      	mov	r2, r3
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff fed7 	bl	800944e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	461a      	mov	r2, r3
 80096a6:	69b9      	ldr	r1, [r7, #24]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff feb8 	bl	800941e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	461a      	mov	r2, r3
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff06 	bl	80094c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d111      	bne.n	80096e8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2bff      	cmp	r3, #255	; 0xff
 80096c8:	d807      	bhi.n	80096da <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	461a      	mov	r2, r3
 80096d0:	69b9      	ldr	r1, [r7, #24]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff ff35 	bl	8009542 <LL_GPIO_SetAFPin_0_7>
 80096d8:	e006      	b.n	80096e8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	69b9      	ldr	r1, [r7, #24]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff ff6a 	bl	80095bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69b9      	ldr	r1, [r7, #24]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fe57 	bl	80093a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1b0      	bne.n	800966c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800971c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009720:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	b29b      	uxth	r3, r3
 800972e:	43db      	mvns	r3, r3
 8009730:	b29b      	uxth	r3, r3
 8009732:	4013      	ands	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800974a:	b084      	sub	sp, #16
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	f107 0014 	add.w	r0, r7, #20
 8009758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	b004      	add	sp, #16
 800978a:	4770      	bx	lr

0800978c <__NVIC_SetPriority>:
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979c:	2b00      	cmp	r3, #0
 800979e:	db0a      	blt.n	80097b6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	490c      	ldr	r1, [pc, #48]	; (80097d8 <__NVIC_SetPriority+0x4c>)
 80097a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097aa:	0152      	lsls	r2, r2, #5
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	440b      	add	r3, r1
 80097b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097b4:	e00a      	b.n	80097cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4908      	ldr	r1, [pc, #32]	; (80097dc <__NVIC_SetPriority+0x50>)
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	f003 030f 	and.w	r3, r3, #15
 80097c2:	3b04      	subs	r3, #4
 80097c4:	0152      	lsls	r2, r2, #5
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	440b      	add	r3, r1
 80097ca:	761a      	strb	r2, [r3, #24]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000e100 	.word	0xe000e100
 80097dc:	e000ed00 	.word	0xe000ed00

080097e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <SysTick_Handler+0x1c>)
 80097e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097e8:	f002 f880 	bl	800b8ec <xTaskGetSchedulerState>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d001      	beq.n	80097f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097f2:	f002 fdc3 	bl	800c37c <xPortSysTickHandler>
  }
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	e000e010 	.word	0xe000e010

08009800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009804:	2100      	movs	r1, #0
 8009806:	f06f 0004 	mvn.w	r0, #4
 800980a:	f7ff ffbf 	bl	800978c <__NVIC_SetPriority>
#endif
}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800981a:	f3ef 8305 	mrs	r3, IPSR
 800981e:	603b      	str	r3, [r7, #0]
  return(result);
 8009820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009826:	f06f 0305 	mvn.w	r3, #5
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	e00c      	b.n	8009848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <osKernelInitialize+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009836:	4b08      	ldr	r3, [pc, #32]	; (8009858 <osKernelInitialize+0x44>)
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800983c:	2300      	movs	r3, #0
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e002      	b.n	8009848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009848:	687b      	ldr	r3, [r7, #4]
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2001cb08 	.word	0x2001cb08

0800985c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009862:	f3ef 8305 	mrs	r3, IPSR
 8009866:	603b      	str	r3, [r7, #0]
  return(result);
 8009868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800986e:	f06f 0305 	mvn.w	r3, #5
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	e010      	b.n	8009898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <osKernelStart+0x48>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d109      	bne.n	8009892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800987e:	f7ff ffbf 	bl	8009800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009882:	4b08      	ldr	r3, [pc, #32]	; (80098a4 <osKernelStart+0x48>)
 8009884:	2202      	movs	r2, #2
 8009886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009888:	f001 fc3e 	bl	800b108 <vTaskStartScheduler>
      stat = osOK;
 800988c:	2300      	movs	r3, #0
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	e002      	b.n	8009898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009898:	687b      	ldr	r3, [r7, #4]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2001cb08 	.word	0x2001cb08

080098a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af04      	add	r7, sp, #16
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b8:	f3ef 8305 	mrs	r3, IPSR
 80098bc:	617b      	str	r3, [r7, #20]
  return(result);
 80098be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d17e      	bne.n	80099c2 <osThreadNew+0x11a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d07b      	beq.n	80099c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098ce:	2318      	movs	r3, #24
 80098d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d045      	beq.n	800996e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <osThreadNew+0x48>
        name = attr->name;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <osThreadNew+0x6e>
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2b38      	cmp	r3, #56	; 0x38
 8009908:	d805      	bhi.n	8009916 <osThreadNew+0x6e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <osThreadNew+0x72>
        return (NULL);
 8009916:	2300      	movs	r3, #0
 8009918:	e054      	b.n	80099c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	089b      	lsrs	r3, r3, #2
 8009928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <osThreadNew+0xa8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2bbb      	cmp	r3, #187	; 0xbb
 8009938:	d90a      	bls.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800993e:	2b00      	cmp	r3, #0
 8009940:	d006      	beq.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <osThreadNew+0xa8>
        mem = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e010      	b.n	8009972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <osThreadNew+0xca>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d108      	bne.n	8009972 <osThreadNew+0xca>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <osThreadNew+0xca>
          mem = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	61bb      	str	r3, [r7, #24]
 800996c:	e001      	b.n	8009972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d110      	bne.n	800999a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a3a      	ldr	r2, [r7, #32]
 800998c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f001 fa04 	bl	800ad9c <xTaskCreateStatic>
 8009994:	4603      	mov	r3, r0
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	e013      	b.n	80099c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d110      	bne.n	80099c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f001 fa37 	bl	800ae26 <xTaskCreate>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d001      	beq.n	80099c2 <osThreadNew+0x11a>
            hTask = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099c2:	693b      	ldr	r3, [r7, #16]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	; 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d4:	f3ef 8305 	mrs	r3, IPSR
 80099d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <osDelay+0x1c>
    stat = osErrorISR;
 80099e0:	f06f 0305 	mvn.w	r3, #5
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e007      	b.n	80099f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fb64 	bl	800b0c0 <vTaskDelay>
    }
  }

  return (stat);
 80099f8:	68fb      	ldr	r3, [r7, #12]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b08a      	sub	sp, #40	; 0x28
 8009a06:	af02      	add	r7, sp, #8
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a12:	f3ef 8305 	mrs	r3, IPSR
 8009a16:	613b      	str	r3, [r7, #16]
  return(result);
 8009a18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d175      	bne.n	8009b0a <osSemaphoreNew+0x108>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d072      	beq.n	8009b0a <osSemaphoreNew+0x108>
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d86e      	bhi.n	8009b0a <osSemaphoreNew+0x108>
    mem = -1;
 8009a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d015      	beq.n	8009a64 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <osSemaphoreNew+0x4c>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	2b4f      	cmp	r3, #79	; 0x4f
 8009a46:	d902      	bls.n	8009a4e <osSemaphoreNew+0x4c>
        mem = 1;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e00c      	b.n	8009a68 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d108      	bne.n	8009a68 <osSemaphoreNew+0x66>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <osSemaphoreNew+0x66>
          mem = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e001      	b.n	8009a68 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d04c      	beq.n	8009b0a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d128      	bne.n	8009ac8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10a      	bne.n	8009a92 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2203      	movs	r2, #3
 8009a82:	9200      	str	r2, [sp, #0]
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f000 fb3b 	bl	800a104 <xQueueGenericCreateStatic>
 8009a8e:	61f8      	str	r0, [r7, #28]
 8009a90:	e005      	b.n	8009a9e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a92:	2203      	movs	r2, #3
 8009a94:	2100      	movs	r1, #0
 8009a96:	2001      	movs	r0, #1
 8009a98:	f000 fb84 	bl	800a1a4 <xQueueGenericCreate>
 8009a9c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d022      	beq.n	8009aea <osSemaphoreNew+0xe8>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01f      	beq.n	8009aea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	69f8      	ldr	r0, [r7, #28]
 8009ab2:	f000 fc16 	bl	800a2e2 <xQueueGenericSend>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d016      	beq.n	8009aea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009abc:	69f8      	ldr	r0, [r7, #28]
 8009abe:	f000 ffa1 	bl	800aa04 <vQueueDelete>
            hSemaphore = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e010      	b.n	8009aea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d108      	bne.n	8009ae0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fbb9 	bl	800a24e <xQueueCreateCountingSemaphoreStatic>
 8009adc:	61f8      	str	r0, [r7, #28]
 8009ade:	e004      	b.n	8009aea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fbda 	bl	800a29c <xQueueCreateCountingSemaphore>
 8009ae8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <osSemaphoreNew+0xfc>
          name = attr->name;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	69f8      	ldr	r0, [r7, #28]
 8009b06:	f001 f8c1 	bl	800ac8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009b2c:	f06f 0303 	mvn.w	r3, #3
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e035      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01e      	beq.n	8009b7e <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009b46:	f06f 0303 	mvn.w	r3, #3
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	e028      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
    }
    else {
      yield = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	461a      	mov	r2, r3
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 fef4 	bl	800a948 <xQueueReceiveFromISR>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d003      	beq.n	8009b6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b66:	f06f 0302 	mvn.w	r3, #2
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e018      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d015      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
 8009b74:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <osSemaphoreAcquire+0x98>)
 8009b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e010      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6938      	ldr	r0, [r7, #16]
 8009b82:	f000 fe04 	bl	800a78e <xQueueSemaphoreTake>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d009      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
      if (timeout != 0U) {
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <osSemaphoreAcquire+0x86>
        stat = osErrorTimeout;
 8009b92:	f06f 0301 	mvn.w	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e002      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        stat = osErrorResource;
 8009b9a:	f06f 0302 	mvn.w	r3, #2
 8009b9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009bc6:	f06f 0303 	mvn.w	r3, #3
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e028      	b.n	8009c20 <osSemaphoreRelease+0x70>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d016      	beq.n	8009c08 <osSemaphoreRelease+0x58>
    yield = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	4619      	mov	r1, r3
 8009be4:	6938      	ldr	r0, [r7, #16]
 8009be6:	f000 fcb6 	bl	800a556 <xQueueGiveFromISR>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d003      	beq.n	8009bf8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009bf0:	f06f 0302 	mvn.w	r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
 8009bf6:	e013      	b.n	8009c20 <osSemaphoreRelease+0x70>
    } else {
      portYIELD_FROM_ISR (yield);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d010      	beq.n	8009c20 <osSemaphoreRelease+0x70>
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <osSemaphoreRelease+0x7c>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e00b      	b.n	8009c20 <osSemaphoreRelease+0x70>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6938      	ldr	r0, [r7, #16]
 8009c10:	f000 fb67 	bl	800a2e2 <xQueueGenericSend>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <osSemaphoreRelease+0x70>
      stat = osErrorResource;
 8009c1a:	f06f 0302 	mvn.w	r3, #2
 8009c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c20:	697b      	ldr	r3, [r7, #20]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	613b      	str	r3, [r7, #16]
  return(result);
 8009c46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d15f      	bne.n	8009d0c <osMessageQueueNew+0xdc>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d059      	beq.n	8009d0c <osMessageQueueNew+0xdc>
    mem = -1;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <osMessageQueueNew+0x62>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b4f      	cmp	r3, #79	; 0x4f
 8009c72:	d90e      	bls.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d302      	bcc.n	8009c92 <osMessageQueueNew+0x62>
        mem = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	e014      	b.n	8009cbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d110      	bne.n	8009cbc <osMessageQueueNew+0x8c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10c      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <osMessageQueueNew+0x8c>
          mem = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e001      	b.n	8009cbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10b      	bne.n	8009cda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	9100      	str	r1, [sp, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fa17 	bl	800a104 <xQueueGenericCreateStatic>
 8009cd6:	61f8      	str	r0, [r7, #28]
 8009cd8:	e008      	b.n	8009cec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d105      	bne.n	8009cec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa5d 	bl	800a1a4 <xQueueGenericCreate>
 8009cea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e001      	b.n	8009d04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	69f8      	ldr	r0, [r7, #28]
 8009d08:	f000 ffc0 	bl	800ac8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d30:	f3ef 8305 	mrs	r3, IPSR
 8009d34:	617b      	str	r3, [r7, #20]
  return(result);
 8009d36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d024      	beq.n	8009d86 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009d4e:	f06f 0303 	mvn.w	r3, #3
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e034      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d5a:	f107 0210 	add.w	r2, r7, #16
 8009d5e:	2300      	movs	r3, #0
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	69b8      	ldr	r0, [r7, #24]
 8009d64:	f000 fb86 	bl	800a474 <xQueueGenericSendFromISR>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d003      	beq.n	8009d76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009d6e:	f06f 0302 	mvn.w	r3, #2
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e024      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d021      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <osMessageQueuePut+0xb4>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e01c      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <osMessageQueuePut+0x7a>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8009d92:	f06f 0303 	mvn.w	r3, #3
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e012      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f000 fa9e 	bl	800a2e2 <xQueueGenericSend>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d009      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 8009db2:	f06f 0301 	mvn.w	r3, #1
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e002      	b.n	8009dc0 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de6:	f3ef 8305 	mrs	r3, IPSR
 8009dea:	617b      	str	r3, [r7, #20]
  return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d024      	beq.n	8009e3c <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e04:	f06f 0303 	mvn.w	r3, #3
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e033      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      yield = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e10:	f107 0310 	add.w	r3, r7, #16
 8009e14:	461a      	mov	r2, r3
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	69b8      	ldr	r0, [r7, #24]
 8009e1a:	f000 fd95 	bl	800a948 <xQueueReceiveFromISR>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d003      	beq.n	8009e2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009e24:	f06f 0302 	mvn.w	r3, #2
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	e023      	b.n	8009e74 <osMessageQueueGet+0xa4>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d020      	beq.n	8009e74 <osMessageQueueGet+0xa4>
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <osMessageQueueGet+0xb0>)
 8009e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e01b      	b.n	8009e74 <osMessageQueueGet+0xa4>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <osMessageQueueGet+0x78>
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d103      	bne.n	8009e50 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8009e48:	f06f 0303 	mvn.w	r3, #3
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e011      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f000 fbe1 	bl	800a61c <xQueueReceive>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d009      	beq.n	8009e74 <osMessageQueueGet+0xa4>
        if (timeout != 0U) {
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <osMessageQueueGet+0x9e>
          stat = osErrorTimeout;
 8009e66:	f06f 0301 	mvn.w	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e002      	b.n	8009e74 <osMessageQueueGet+0xa4>
        } else {
          stat = osErrorResource;
 8009e6e:	f06f 0302 	mvn.w	r3, #2
 8009e72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8009e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	2001cb0c 	.word	0x2001cb0c
 8009eb4:	2001cbc8 	.word	0x2001cbc8

08009eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8009ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ed6:	601a      	str	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	2001cdc8 	.word	0x2001cdc8
 8009ee8:	2001ce84 	.word	0x2001ce84

08009eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0208 	add.w	r2, r3, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 0208 	add.w	r2, r3, #8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d103      	bne.n	8009fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e00c      	b.n	8009fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <vListInsert+0x2e>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d2f6      	bcs.n	8009fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6892      	ldr	r2, [r2, #8]
 800a016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6852      	ldr	r2, [r2, #4]
 800a020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d103      	bne.n	800a034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <xQueueGenericReset+0x1a>
 800a068:	f002 fa8e 	bl	800c588 <ulSetInterruptMask>
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800a06e:	f002 f959 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	22ff      	movs	r2, #255	; 0xff
 800a0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10e      	bne.n	800a0e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d014      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3310      	adds	r3, #16
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fa71 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00c      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0dc:	f002 f910 	bl	800c300 <vPortYield>
 800a0e0:	e009      	b.n	800a0f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff ff00 	bl	8009eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fefb 	bl	8009eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0f6:	f002 f927 	bl	800c348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0fa:	2301      	movs	r3, #1
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <xQueueGenericCreateStatic+0x1a>
 800a118:	f002 fa36 	bl	800c588 <ulSetInterruptMask>
 800a11c:	e7fe      	b.n	800a11c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xQueueGenericCreateStatic+0x26>
 800a124:	f002 fa30 	bl	800c588 <ulSetInterruptMask>
 800a128:	e7fe      	b.n	800a128 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <xQueueGenericCreateStatic+0x32>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <xQueueGenericCreateStatic+0x36>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <xQueueGenericCreateStatic+0x38>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <xQueueGenericCreateStatic+0x42>
 800a140:	f002 fa22 	bl	800c588 <ulSetInterruptMask>
 800a144:	e7fe      	b.n	800a144 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <xQueueGenericCreateStatic+0x4e>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <xQueueGenericCreateStatic+0x52>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <xQueueGenericCreateStatic+0x54>
 800a156:	2300      	movs	r3, #0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <xQueueGenericCreateStatic+0x5e>
 800a15c:	f002 fa14 	bl	800c588 <ulSetInterruptMask>
 800a160:	e7fe      	b.n	800a160 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a162:	2350      	movs	r3, #80	; 0x50
 800a164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b50      	cmp	r3, #80	; 0x50
 800a16a:	d002      	beq.n	800a172 <xQueueGenericCreateStatic+0x6e>
 800a16c:	f002 fa0c 	bl	800c588 <ulSetInterruptMask>
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a172:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a186:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4613      	mov	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f837 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a19a:	697b      	ldr	r3, [r7, #20]
	}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xQueueGenericCreate+0x1a>
 800a1b8:	f002 f9e6 	bl	800c588 <ulSetInterruptMask>
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	3350      	adds	r3, #80	; 0x50
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 fa3b 	bl	800c648 <pvPortMalloc>
 800a1d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d011      	beq.n	800a1fe <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3350      	adds	r3, #80	; 0x50
 800a1e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1ec:	79fa      	ldrb	r2, [r7, #7]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f805 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a200:	4618      	mov	r0, r3
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a236:	2101      	movs	r1, #1
 800a238:	69b8      	ldr	r0, [r7, #24]
 800a23a:	f7ff ff0b 	bl	800a054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af02      	add	r7, sp, #8
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xQueueCreateCountingSemaphoreStatic+0x18>
 800a260:	f002 f992 	bl	800c588 <ulSetInterruptMask>
 800a264:	e7fe      	b.n	800a264 <xQueueCreateCountingSemaphoreStatic+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d902      	bls.n	800a274 <xQueueCreateCountingSemaphoreStatic+0x26>
 800a26e:	f002 f98b 	bl	800c588 <ulSetInterruptMask>
 800a272:	e7fe      	b.n	800a272 <xQueueCreateCountingSemaphoreStatic+0x24>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a274:	2302      	movs	r3, #2
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff ff40 	bl	800a104 <xQueueGenericCreateStatic>
 800a284:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a292:	697b      	ldr	r3, [r7, #20]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <xQueueCreateCountingSemaphore+0x16>
 800a2ac:	f002 f96c 	bl	800c588 <ulSetInterruptMask>
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d902      	bls.n	800a2c0 <xQueueCreateCountingSemaphore+0x24>
 800a2ba:	f002 f965 	bl	800c588 <ulSetInterruptMask>
 800a2be:	e7fe      	b.n	800a2be <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff6d 	bl	800a1a4 <xQueueGenericCreate>
 800a2ca:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
	}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <xQueueGenericSend+0x22>
 800a2fe:	f002 f943 	bl	800c588 <ulSetInterruptMask>
 800a302:	e7fe      	b.n	800a302 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <xQueueGenericSend+0x30>
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <xQueueGenericSend+0x34>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <xQueueGenericSend+0x36>
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <xQueueGenericSend+0x40>
 800a31c:	f002 f934 	bl	800c588 <ulSetInterruptMask>
 800a320:	e7fe      	b.n	800a320 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d103      	bne.n	800a330 <xQueueGenericSend+0x4e>
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <xQueueGenericSend+0x52>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <xQueueGenericSend+0x54>
 800a334:	2300      	movs	r3, #0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <xQueueGenericSend+0x5e>
 800a33a:	f002 f925 	bl	800c588 <ulSetInterruptMask>
 800a33e:	e7fe      	b.n	800a33e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a340:	f001 fad4 	bl	800b8ec <xTaskGetSchedulerState>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <xQueueGenericSend+0x6e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueGenericSend+0x72>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueGenericSend+0x74>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <xQueueGenericSend+0x7e>
 800a35a:	f002 f915 	bl	800c588 <ulSetInterruptMask>
 800a35e:	e7fe      	b.n	800a35e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a360:	f001 ffe0 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <xQueueGenericSend+0x94>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d11d      	bne.n	800a3b2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	6a38      	ldr	r0, [r7, #32]
 800a37c:	f000 fb75 	bl	800aa6a <prvCopyDataToQueue>
 800a380:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 f912 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a39a:	f001 ffb1 	bl	800c300 <vPortYield>
 800a39e:	e004      	b.n	800a3aa <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3a6:	f001 ffab 	bl	800c300 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3aa:	f001 ffcd 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e05c      	b.n	800a46c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3b8:	f001 ffc6 	bl	800c348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e055      	b.n	800a46c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3c6:	f107 0314 	add.w	r3, r7, #20
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f950 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3d4:	f001 ffb8 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3d8:	f000 fef6 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3dc:	f001 ffa2 	bl	800c324 <vPortEnterCritical>
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d103      	bne.n	800a3f6 <xQueueGenericSend+0x114>
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d103      	bne.n	800a40c <xQueueGenericSend+0x12a>
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a40c:	f001 ff9c 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a410:	1d3a      	adds	r2, r7, #4
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 f93f 	bl	800b69c <xTaskCheckForTimeOut>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11d      	bne.n	800a460 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a424:	6a38      	ldr	r0, [r7, #32]
 800a426:	f000 fc18 	bl	800ac5a <prvIsQueueFull>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	3310      	adds	r3, #16
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f87d 	bl	800b538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a43e:	6a38      	ldr	r0, [r7, #32]
 800a440:	f000 fba3 	bl	800ab8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a444:	f000 fece 	bl	800b1e4 <xTaskResumeAll>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d188      	bne.n	800a360 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800a44e:	f001 ff57 	bl	800c300 <vPortYield>
 800a452:	e785      	b.n	800a360 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a454:	6a38      	ldr	r0, [r7, #32]
 800a456:	f000 fb98 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45a:	f000 fec3 	bl	800b1e4 <xTaskResumeAll>
 800a45e:	e77f      	b.n	800a360 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a460:	6a38      	ldr	r0, [r7, #32]
 800a462:	f000 fb92 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a466:	f000 febd 	bl	800b1e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	; 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	; 0x28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <xQueueGenericSendFromISR+0x1e>
 800a48c:	f002 f87c 	bl	800c588 <ulSetInterruptMask>
 800a490:	e7fe      	b.n	800a490 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x2c>
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x30>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xQueueGenericSendFromISR+0x32>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <xQueueGenericSendFromISR+0x3c>
 800a4aa:	f002 f86d 	bl	800c588 <ulSetInterruptMask>
 800a4ae:	e7fe      	b.n	800a4ae <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d103      	bne.n	800a4be <xQueueGenericSendFromISR+0x4a>
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <xQueueGenericSendFromISR+0x4e>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xQueueGenericSendFromISR+0x50>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <xQueueGenericSendFromISR+0x5a>
 800a4c8:	f002 f85e 	bl	800c588 <ulSetInterruptMask>
 800a4cc:	e7fe      	b.n	800a4cc <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ce:	f002 f85b 	bl	800c588 <ulSetInterruptMask>
 800a4d2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <xQueueGenericSendFromISR+0x72>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d12d      	bne.n	800a542 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ec:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	6a38      	ldr	r0, [r7, #32]
 800a4fa:	f000 fab6 	bl	800aa6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a506:	d112      	bne.n	800a52e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d015      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	3324      	adds	r3, #36	; 0x24
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f84f 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00d      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e006      	b.n	800a53c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a52e:	7efb      	ldrb	r3, [r7, #27]
 800a530:	3301      	adds	r3, #1
 800a532:	b2db      	uxtb	r3, r3
 800a534:	b25a      	sxtb	r2, r3
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a540:	e001      	b.n	800a546 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a542:	2300      	movs	r3, #0
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a546:	69f8      	ldr	r0, [r7, #28]
 800a548:	f002 f82b 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3728      	adds	r7, #40	; 0x28
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b088      	sub	sp, #32
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <xQueueGiveFromISR+0x1a>
 800a56a:	f002 f80d 	bl	800c588 <ulSetInterruptMask>
 800a56e:	e7fe      	b.n	800a56e <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <xQueueGiveFromISR+0x28>
 800a578:	f002 f806 	bl	800c588 <ulSetInterruptMask>
 800a57c:	e7fe      	b.n	800a57c <xQueueGiveFromISR+0x26>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueGiveFromISR+0x38>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueGiveFromISR+0x3c>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGiveFromISR+0x3e>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <xQueueGiveFromISR+0x48>
 800a598:	f001 fff6 	bl	800c588 <ulSetInterruptMask>
 800a59c:	e7fe      	b.n	800a59c <xQueueGiveFromISR+0x46>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a59e:	f001 fff3 	bl	800c588 <ulSetInterruptMask>
 800a5a2:	6178      	str	r0, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d229      	bcs.n	800a608 <xQueueGiveFromISR+0xb2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ba:	73fb      	strb	r3, [r7, #15]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d112      	bne.n	800a5f4 <xQueueGiveFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d015      	beq.n	800a602 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	3324      	adds	r3, #36	; 0x24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 ffec 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00d      	beq.n	800a602 <xQueueGiveFromISR+0xac>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <xQueueGiveFromISR+0xac>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e006      	b.n	800a602 <xQueueGiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	b25a      	sxtb	r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a602:	2301      	movs	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e001      	b.n	800a60c <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f001 ffc8 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a612:	69fb      	ldr	r3, [r7, #28]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <xQueueReceive+0x20>
 800a636:	f001 ffa7 	bl	800c588 <ulSetInterruptMask>
 800a63a:	e7fe      	b.n	800a63a <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueReceive+0x2e>
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueReceive+0x32>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueReceive+0x34>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueReceive+0x3e>
 800a654:	f001 ff98 	bl	800c588 <ulSetInterruptMask>
 800a658:	e7fe      	b.n	800a658 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a65a:	f001 f947 	bl	800b8ec <xTaskGetSchedulerState>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <xQueueReceive+0x4e>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <xQueueReceive+0x52>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <xQueueReceive+0x54>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueReceive+0x5e>
 800a674:	f001 ff88 	bl	800c588 <ulSetInterruptMask>
 800a678:	e7fe      	b.n	800a678 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67a:	f001 fe53 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d019      	beq.n	800a6be <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	6a38      	ldr	r0, [r7, #32]
 800a68e:	f000 fa56 	bl	800ab3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 ff86 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6b2:	f001 fe25 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b6:	f001 fe47 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e063      	b.n	800a786 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d103      	bne.n	800a6cc <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c4:	f001 fe40 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e05c      	b.n	800a786 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d2:	f107 0314 	add.w	r3, r7, #20
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ffca 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e0:	f001 fe32 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e4:	f000 fd70 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e8:	f001 fe1c 	bl	800c324 <vPortEnterCritical>
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d103      	bne.n	800a702 <xQueueReceive+0xe6>
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueReceive+0xfc>
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a718:	f001 fe16 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71c:	1d3a      	adds	r2, r7, #4
 800a71e:	f107 0314 	add.w	r3, r7, #20
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f000 ffb9 	bl	800b69c <xTaskCheckForTimeOut>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d11d      	bne.n	800a76c <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a730:	6a38      	ldr	r0, [r7, #32]
 800a732:	f000 fa7c 	bl	800ac2e <prvIsQueueEmpty>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d011      	beq.n	800a760 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f000 fef7 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a74a:	6a38      	ldr	r0, [r7, #32]
 800a74c:	f000 fa1d 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a750:	f000 fd48 	bl	800b1e4 <xTaskResumeAll>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d18f      	bne.n	800a67a <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800a75a:	f001 fdd1 	bl	800c300 <vPortYield>
 800a75e:	e78c      	b.n	800a67a <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a760:	6a38      	ldr	r0, [r7, #32]
 800a762:	f000 fa12 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a766:	f000 fd3d 	bl	800b1e4 <xTaskResumeAll>
 800a76a:	e786      	b.n	800a67a <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a76c:	6a38      	ldr	r0, [r7, #32]
 800a76e:	f000 fa0c 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a772:	f000 fd37 	bl	800b1e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a776:	6a38      	ldr	r0, [r7, #32]
 800a778:	f000 fa59 	bl	800ac2e <prvIsQueueEmpty>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f43f af7b 	beq.w	800a67a <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a786:	4618      	mov	r0, r3
 800a788:	3728      	adds	r7, #40	; 0x28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08a      	sub	sp, #40	; 0x28
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <xQueueSemaphoreTake+0x22>
 800a7aa:	f001 feed 	bl	800c588 <ulSetInterruptMask>
 800a7ae:	e7fe      	b.n	800a7ae <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <xQueueSemaphoreTake+0x30>
 800a7b8:	f001 fee6 	bl	800c588 <ulSetInterruptMask>
 800a7bc:	e7fe      	b.n	800a7bc <xQueueSemaphoreTake+0x2e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7be:	f001 f895 	bl	800b8ec <xTaskGetSchedulerState>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <xQueueSemaphoreTake+0x40>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <xQueueSemaphoreTake+0x44>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <xQueueSemaphoreTake+0x46>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <xQueueSemaphoreTake+0x50>
 800a7d8:	f001 fed6 	bl	800c588 <ulSetInterruptMask>
 800a7dc:	e7fe      	b.n	800a7dc <xQueueSemaphoreTake+0x4e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7de:	f001 fda1 	bl	800c324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d01e      	beq.n	800a82c <xQueueSemaphoreTake+0x9e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <xQueueSemaphoreTake+0x7a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7fe:	f001 f9cb 	bl	800bb98 <pvTaskIncrementMutexHeldCount>
 800a802:	4602      	mov	r2, r0
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3310      	adds	r3, #16
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fecf 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a820:	f001 fd6e 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a824:	f001 fd90 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a828:	2301      	movs	r3, #1
 800a82a:	e089      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <xQueueSemaphoreTake+0xb8>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <xQueueSemaphoreTake+0xb0>
 800a838:	f001 fea6 	bl	800c588 <ulSetInterruptMask>
 800a83c:	e7fe      	b.n	800a83c <xQueueSemaphoreTake+0xae>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a83e:	f001 fd83 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a842:	2300      	movs	r3, #0
 800a844:	e07c      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a84c:	f107 030c 	add.w	r3, r7, #12
 800a850:	4618      	mov	r0, r3
 800a852:	f000 ff0d 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a856:	2301      	movs	r3, #1
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85a:	f001 fd75 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a85e:	f000 fcb3 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a862:	f001 fd5f 	bl	800c324 <vPortEnterCritical>
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d103      	bne.n	800a87c <xQueueSemaphoreTake+0xee>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a882:	b25b      	sxtb	r3, r3
 800a884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a888:	d103      	bne.n	800a892 <xQueueSemaphoreTake+0x104>
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a892:	f001 fd59 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a896:	463a      	mov	r2, r7
 800a898:	f107 030c 	add.w	r3, r7, #12
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fefc 	bl	800b69c <xTaskCheckForTimeOut>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12c      	bne.n	800a904 <xQueueSemaphoreTake+0x176>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8aa:	69f8      	ldr	r0, [r7, #28]
 800a8ac:	f000 f9bf 	bl	800ac2e <prvIsQueueEmpty>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d020      	beq.n	800a8f8 <xQueueSemaphoreTake+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <xQueueSemaphoreTake+0x144>
					{
						taskENTER_CRITICAL();
 800a8be:	f001 fd31 	bl	800c324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f82e 	bl	800b928 <xTaskPriorityInherit>
 800a8cc:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a8ce:	f001 fd3b 	bl	800c348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3324      	adds	r3, #36	; 0x24
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fe2c 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8e0:	69f8      	ldr	r0, [r7, #28]
 800a8e2:	f000 f952 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8e6:	f000 fc7d 	bl	800b1e4 <xTaskResumeAll>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f af76 	bne.w	800a7de <xQueueSemaphoreTake+0x50>
				{
					portYIELD_WITHIN_API();
 800a8f2:	f001 fd05 	bl	800c300 <vPortYield>
 800a8f6:	e772      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8f8:	69f8      	ldr	r0, [r7, #28]
 800a8fa:	f000 f946 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8fe:	f000 fc71 	bl	800b1e4 <xTaskResumeAll>
 800a902:	e76c      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a904:	69f8      	ldr	r0, [r7, #28]
 800a906:	f000 f940 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a90a:	f000 fc6b 	bl	800b1e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f000 f98d 	bl	800ac2e <prvIsQueueEmpty>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f43f af61 	beq.w	800a7de <xQueueSemaphoreTake+0x50>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 800a922:	f001 fcff 	bl	800c324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a926:	69f8      	ldr	r0, [r7, #28]
 800a928:	f000 f887 	bl	800aa3a <prvGetDisinheritPriorityAfterTimeout>
 800a92c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	6979      	ldr	r1, [r7, #20]
 800a934:	4618      	mov	r0, r3
 800a936:	f001 f8bd 	bl	800bab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a93a:	f001 fd05 	bl	800c348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a93e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a940:	4618      	mov	r0, r3
 800a942:	3728      	adds	r7, #40	; 0x28
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08a      	sub	sp, #40	; 0x28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xQueueReceiveFromISR+0x1c>
 800a95e:	f001 fe13 	bl	800c588 <ulSetInterruptMask>
 800a962:	e7fe      	b.n	800a962 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceiveFromISR+0x2a>
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceiveFromISR+0x2e>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceiveFromISR+0x30>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <xQueueReceiveFromISR+0x3a>
 800a97c:	f001 fe04 	bl	800c588 <ulSetInterruptMask>
 800a980:	e7fe      	b.n	800a980 <xQueueReceiveFromISR+0x38>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a982:	f001 fe01 	bl	800c588 <ulSetInterruptMask>
 800a986:	61f8      	str	r0, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d02d      	beq.n	800a9f0 <xQueueReceiveFromISR+0xa8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	6a38      	ldr	r0, [r7, #32]
 800a9a0:	f000 f8cd 	bl	800ab3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1e5a      	subs	r2, r3, #1
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d112      	bne.n	800a9dc <xQueueReceiveFromISR+0x94>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d015      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fdf8 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00d      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e006      	b.n	800a9ea <xQueueReceiveFromISR+0xa2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	b25a      	sxtb	r2, r3
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	e001      	b.n	800a9f4 <xQueueReceiveFromISR+0xac>
		}
		else
		{
			xReturn = pdFAIL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a9f4:	69f8      	ldr	r0, [r7, #28]
 800a9f6:	f001 fdd4 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3728      	adds	r7, #40	; 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <vQueueDelete+0x18>
 800aa16:	f001 fdb7 	bl	800c588 <ulSetInterruptMask>
 800aa1a:	e7fe      	b.n	800aa1a <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f95f 	bl	800ace0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <vQueueDelete+0x2e>
		{
			vPortFree( pxQueue );
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f001 febf 	bl	800c7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d006      	beq.n	800aa58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e001      	b.n	800aa5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d14d      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 ffaf 	bl	800b9f8 <xTaskPriorityDisinherit>
 800aa9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	e043      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d119      	bne.n	800aade <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6858      	ldr	r0, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	461a      	mov	r2, r3
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	f016 fc2d 	bl	8021314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	441a      	add	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d32b      	bcc.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	605a      	str	r2, [r3, #4]
 800aadc:	e026      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68d8      	ldr	r0, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	461a      	mov	r2, r3
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	f016 fc13 	bl	8021314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	425b      	negs	r3, r3
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d207      	bcs.n	800ab1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	425b      	negs	r3, r3
 800ab14:	441a      	add	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d105      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab34:	697b      	ldr	r3, [r7, #20]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d018      	beq.n	800ab82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d303      	bcc.n	800ab72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68d9      	ldr	r1, [r3, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6838      	ldr	r0, [r7, #0]
 800ab7e:	f016 fbc9 	bl	8021314 <memcpy>
	}
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab92:	f001 fbc7 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab9e:	e011      	b.n	800abc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d012      	beq.n	800abce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fd03 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb8:	f000 fdc2 	bl	800b740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dce9      	bgt.n	800aba0 <prvUnlockQueue+0x16>
 800abcc:	e000      	b.n	800abd0 <prvUnlockQueue+0x46>
					break;
 800abce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd8:	f001 fbb6 	bl	800c348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abdc:	f001 fba2 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe8:	e011      	b.n	800ac0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d012      	beq.n	800ac18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3310      	adds	r3, #16
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fcde 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac02:	f000 fd9d 	bl	800b740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dce9      	bgt.n	800abea <prvUnlockQueue+0x60>
 800ac16:	e000      	b.n	800ac1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 fb91 	bl	800c348 <vPortExitCritical>
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac36:	f001 fb75 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e001      	b.n	800ac4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac4c:	f001 fb7c 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac62:	f001 fb5f 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d102      	bne.n	800ac78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e001      	b.n	800ac7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac7c:	f001 fb64 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e014      	b.n	800acc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <vQueueAddToRegistry+0x50>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aca8:	490c      	ldr	r1, [pc, #48]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acb2:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acbe:	e006      	b.n	800acce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b07      	cmp	r3, #7
 800acca:	d9e7      	bls.n	800ac9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	2001d284 	.word	0x2001d284

0800ace0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e016      	b.n	800ad1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800acee:	4a10      	ldr	r2, [pc, #64]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d10b      	bne.n	800ad16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acfe:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2100      	movs	r1, #0
 800ad04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	4413      	add	r3, r2
 800ad10:	2200      	movs	r2, #0
 800ad12:	605a      	str	r2, [r3, #4]
				break;
 800ad14:	e006      	b.n	800ad24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b07      	cmp	r3, #7
 800ad20:	d9e5      	bls.n	800acee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	2001d284 	.word	0x2001d284

0800ad34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad44:	f001 faee 	bl	800c324 <vPortEnterCritical>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d103      	bne.n	800ad5e <vQueueWaitForMessageRestricted+0x2a>
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d103      	bne.n	800ad74 <vQueueWaitForMessageRestricted+0x40>
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad74:	f001 fae8 	bl	800c348 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d106      	bne.n	800ad8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	3324      	adds	r3, #36	; 0x24
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fbf1 	bl	800b570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f7ff fefb 	bl	800ab8a <prvUnlockQueue>
	}
 800ad94:	bf00      	nop
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <xTaskCreateStatic+0x1a>
 800adb0:	f001 fbea 	bl	800c588 <ulSetInterruptMask>
 800adb4:	e7fe      	b.n	800adb4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <xTaskCreateStatic+0x26>
 800adbc:	f001 fbe4 	bl	800c588 <ulSetInterruptMask>
 800adc0:	e7fe      	b.n	800adc0 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adc2:	23bc      	movs	r3, #188	; 0xbc
 800adc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2bbc      	cmp	r3, #188	; 0xbc
 800adca:	d002      	beq.n	800add2 <xTaskCreateStatic+0x36>
 800adcc:	f001 fbdc 	bl	800c588 <ulSetInterruptMask>
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01b      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	f107 0318 	add.w	r3, r7, #24
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f850 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae10:	69f8      	ldr	r0, [r7, #28]
 800ae12:	f000 f8ed 	bl	800aff0 <prvAddNewTaskToReadyList>
 800ae16:	e001      	b.n	800ae1c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fc04 	bl	800c648 <pvPortMalloc>
 800ae40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae48:	20bc      	movs	r0, #188	; 0xbc
 800ae4a:	f001 fbfd 	bl	800c648 <pvPortMalloc>
 800ae4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae5c:	e005      	b.n	800ae6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f001 fca6 	bl	800c7b0 <vPortFree>
 800ae64:	e001      	b.n	800ae6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae78:	88fa      	ldrh	r2, [r7, #6]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80e 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f8ab 	bl	800aff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e002      	b.n	800aea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea6:	69bb      	ldr	r3, [r7, #24]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	21a5      	movs	r1, #165	; 0xa5
 800aeca:	f016 fa30 	bl	802132e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aed8:	3b01      	subs	r3, #1
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f023 0307 	bic.w	r3, r3, #7
 800aee6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <prvInitialiseNewTask+0x48>
 800aef2:	f001 fb49 	bl	800c588 <ulSetInterruptMask>
 800aef6:	e7fe      	b.n	800aef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d01f      	beq.n	800af3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e012      	b.n	800af2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	7819      	ldrb	r1, [r3, #0]
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	3334      	adds	r3, #52	; 0x34
 800af14:	460a      	mov	r2, r1
 800af16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d006      	beq.n	800af32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3301      	adds	r3, #1
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	d9e9      	bls.n	800af04 <prvInitialiseNewTask+0x54>
 800af30:	e000      	b.n	800af34 <prvInitialiseNewTask+0x84>
			{
				break;
 800af32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af3c:	e003      	b.n	800af46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	2b37      	cmp	r3, #55	; 0x37
 800af4a:	d901      	bls.n	800af50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af4c:	2337      	movs	r3, #55	; 0x37
 800af4e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	6a3a      	ldr	r2, [r7, #32]
 800af54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ffe0 	bl	8009f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe ffdb 	bl	8009f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2200      	movs	r2, #0
 800af98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	3354      	adds	r3, #84	; 0x54
 800afa0:	2260      	movs	r2, #96	; 0x60
 800afa2:	2100      	movs	r1, #0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f016 f9c2 	bl	802132e <memset>
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <prvInitialiseNewTask+0x134>)
 800afae:	659a      	str	r2, [r3, #88]	; 0x58
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	4a0d      	ldr	r2, [pc, #52]	; (800afe8 <prvInitialiseNewTask+0x138>)
 800afb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	4a0c      	ldr	r2, [pc, #48]	; (800afec <prvInitialiseNewTask+0x13c>)
 800afba:	661a      	str	r2, [r3, #96]	; 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	6938      	ldr	r0, [r7, #16]
 800afc6:	f001 fa09 	bl	800c3dc <pxPortInitialiseStack>
 800afca:	4602      	mov	r2, r0
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	08023ca4 	.word	0x08023ca4
 800afe8:	08023cc4 	.word	0x08023cc4
 800afec:	08023c84 	.word	0x08023c84

0800aff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f001 f994 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800affc:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b006:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b00e:	4a27      	ldr	r2, [pc, #156]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b014:	4b24      	ldr	r3, [pc, #144]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d110      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b01c:	f000 fbac 	bl	800b778 <prvInitialiseTaskLists>
 800b020:	e00d      	b.n	800b03e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b022:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02a:	4b20      	ldr	r3, [pc, #128]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d802      	bhi.n	800b03e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b038:	4a1c      	ldr	r2, [pc, #112]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b03e:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a1b      	ldr	r2, [pc, #108]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b046:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b18      	ldr	r3, [pc, #96]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <prvAddNewTaskToReadyList+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a12      	ldr	r2, [pc, #72]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b072:	441a      	add	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe ff63 	bl	8009f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b080:	f001 f962 	bl	800c348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d201      	bcs.n	800b09e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09a:	f001 f931 	bl	800c300 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	2001d798 	.word	0x2001d798
 800b0ac:	2001d2c4 	.word	0x2001d2c4
 800b0b0:	2001d7a4 	.word	0x2001d7a4
 800b0b4:	2001d7b4 	.word	0x2001d7b4
 800b0b8:	2001d7a0 	.word	0x2001d7a0
 800b0bc:	2001d2c8 	.word	0x2001d2c8

0800b0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00f      	beq.n	800b0f2 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0d2:	4b0c      	ldr	r3, [pc, #48]	; (800b104 <vTaskDelay+0x44>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <vTaskDelay+0x20>
 800b0da:	f001 fa55 	bl	800c588 <ulSetInterruptMask>
 800b0de:	e7fe      	b.n	800b0de <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800b0e0:	f000 f872 	bl	800b1c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd6a 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0ec:	f000 f87a 	bl	800b1e4 <xTaskResumeAll>
 800b0f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800b0f8:	f001 f902 	bl	800c300 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	2001d7c0 	.word	0x2001d7c0

0800b108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b116:	463a      	mov	r2, r7
 800b118:	1d39      	adds	r1, r7, #4
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe feb0 	bl	8009e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	9202      	str	r2, [sp, #8]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	2300      	movs	r3, #0
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	460a      	mov	r2, r1
 800b136:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <vTaskStartScheduler+0xa0>)
 800b138:	481c      	ldr	r0, [pc, #112]	; (800b1ac <vTaskStartScheduler+0xa4>)
 800b13a:	f7ff fe2f 	bl	800ad9c <xTaskCreateStatic>
 800b13e:	4603      	mov	r3, r0
 800b140:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b14c:	2301      	movs	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	e001      	b.n	800b156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d102      	bne.n	800b162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b15c:	f000 fd84 	bl	800bc68 <xTimerCreateTimerTask>
 800b160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d113      	bne.n	800b190 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b168:	f001 fa0e 	bl	800c588 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b16c:	4b11      	ldr	r3, [pc, #68]	; (800b1b4 <vTaskStartScheduler+0xac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3354      	adds	r3, #84	; 0x54
 800b172:	4a11      	ldr	r2, [pc, #68]	; (800b1b8 <vTaskStartScheduler+0xb0>)
 800b174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <vTaskStartScheduler+0xb4>)
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <vTaskStartScheduler+0xb8>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <vTaskStartScheduler+0xbc>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b18a:	f001 f9b1 	bl	800c4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b18e:	e006      	b.n	800b19e <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d102      	bne.n	800b19e <vTaskStartScheduler+0x96>
 800b198:	f001 f9f6 	bl	800c588 <ulSetInterruptMask>
 800b19c:	e7fe      	b.n	800b19c <vTaskStartScheduler+0x94>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	080222ac 	.word	0x080222ac
 800b1ac:	0800b759 	.word	0x0800b759
 800b1b0:	2001d7bc 	.word	0x2001d7bc
 800b1b4:	2001d2c4 	.word	0x2001d2c4
 800b1b8:	20000094 	.word	0x20000094
 800b1bc:	2001d7b8 	.word	0x2001d7b8
 800b1c0:	2001d7a4 	.word	0x2001d7a4
 800b1c4:	2001d79c 	.word	0x2001d79c

0800b1c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1cc:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	4a03      	ldr	r2, [pc, #12]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1d6:	bf00      	nop
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	2001d7c0 	.word	0x2001d7c0

0800b1e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1f2:	4b3b      	ldr	r3, [pc, #236]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <xTaskResumeAll+0x1c>
 800b1fa:	f001 f9c5 	bl	800c588 <ulSetInterruptMask>
 800b1fe:	e7fe      	b.n	800b1fe <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b200:	f001 f890 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b204:	4b36      	ldr	r3, [pc, #216]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3b01      	subs	r3, #1
 800b20a:	4a35      	ldr	r2, [pc, #212]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b20c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20e:	4b34      	ldr	r3, [pc, #208]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d15c      	bne.n	800b2d0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b216:	4b33      	ldr	r3, [pc, #204]	; (800b2e4 <xTaskResumeAll+0x100>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d058      	beq.n	800b2d0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21e:	e02f      	b.n	800b280 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3318      	adds	r3, #24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fee7 	bl	800a000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fee2 	bl	800a000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <xTaskResumeAll+0x108>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d903      	bls.n	800b250 <xTaskResumeAll+0x6c>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a27      	ldr	r2, [pc, #156]	; (800b2ec <xTaskResumeAll+0x108>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a24      	ldr	r2, [pc, #144]	; (800b2f0 <xTaskResumeAll+0x10c>)
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fe6d 	bl	8009f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b270:	4b20      	ldr	r3, [pc, #128]	; (800b2f4 <xTaskResumeAll+0x110>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d302      	bcc.n	800b280 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800b27a:	4b1f      	ldr	r3, [pc, #124]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b280:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1cb      	bne.n	800b220 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b28e:	f000 fb0d 	bl	800b8ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b292:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <xTaskResumeAll+0x118>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b29e:	f000 f83f 	bl	800b320 <xTaskIncrementTick>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f1      	bne.n	800b29e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <xTaskResumeAll+0x118>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2cc:	f001 f818 	bl	800c300 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d0:	f001 f83a 	bl	800c348 <vPortExitCritical>

	return xAlreadyYielded;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2001d7c0 	.word	0x2001d7c0
 800b2e4:	2001d798 	.word	0x2001d798
 800b2e8:	2001d758 	.word	0x2001d758
 800b2ec:	2001d7a0 	.word	0x2001d7a0
 800b2f0:	2001d2c8 	.word	0x2001d2c8
 800b2f4:	2001d2c4 	.word	0x2001d2c4
 800b2f8:	2001d7ac 	.word	0x2001d7ac
 800b2fc:	2001d7a8 	.word	0x2001d7a8

0800b300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <xTaskGetTickCount+0x1c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b30c:	687b      	ldr	r3, [r7, #4]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	2001d79c 	.word	0x2001d79c

0800b320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b32a:	4b4b      	ldr	r3, [pc, #300]	; (800b458 <xTaskIncrementTick+0x138>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f040 8087 	bne.w	800b442 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b334:	4b49      	ldr	r3, [pc, #292]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b33c:	4a47      	ldr	r2, [pc, #284]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d118      	bne.n	800b37a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <xTaskIncrementTick+0x140>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <xTaskIncrementTick+0x38>
 800b352:	f001 f919 	bl	800c588 <ulSetInterruptMask>
 800b356:	e7fe      	b.n	800b356 <xTaskIncrementTick+0x36>
 800b358:	4b41      	ldr	r3, [pc, #260]	; (800b460 <xTaskIncrementTick+0x140>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	4b41      	ldr	r3, [pc, #260]	; (800b464 <xTaskIncrementTick+0x144>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a3f      	ldr	r2, [pc, #252]	; (800b460 <xTaskIncrementTick+0x140>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4a3f      	ldr	r2, [pc, #252]	; (800b464 <xTaskIncrementTick+0x144>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	4b3e      	ldr	r3, [pc, #248]	; (800b468 <xTaskIncrementTick+0x148>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a3d      	ldr	r2, [pc, #244]	; (800b468 <xTaskIncrementTick+0x148>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f000 fa99 	bl	800b8ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b37a:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d349      	bcc.n	800b418 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	4b36      	ldr	r3, [pc, #216]	; (800b460 <xTaskIncrementTick+0x140>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d104      	bne.n	800b398 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b38e:	4b37      	ldr	r3, [pc, #220]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	601a      	str	r2, [r3, #0]
					break;
 800b396:	e03f      	b.n	800b418 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b398:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xTaskIncrementTick+0x140>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d203      	bcs.n	800b3b8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3b0:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3b6:	e02f      	b.n	800b418 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fe1f 	bl	800a000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fe16 	bl	800a000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <xTaskIncrementTick+0xc8>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a22      	ldr	r2, [pc, #136]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <xTaskIncrementTick+0x154>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fda1 	bl	8009f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <xTaskIncrementTick+0x158>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3b8      	bcc.n	800b384 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b416:	e7b5      	b.n	800b384 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b418:	4b17      	ldr	r3, [pc, #92]	; (800b478 <xTaskIncrementTick+0x158>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4915      	ldr	r1, [pc, #84]	; (800b474 <xTaskIncrementTick+0x154>)
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d901      	bls.n	800b434 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b434:	4b11      	ldr	r3, [pc, #68]	; (800b47c <xTaskIncrementTick+0x15c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e004      	b.n	800b44c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <xTaskIncrementTick+0x160>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	4a0d      	ldr	r2, [pc, #52]	; (800b480 <xTaskIncrementTick+0x160>)
 800b44a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b44c:	697b      	ldr	r3, [r7, #20]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	2001d7c0 	.word	0x2001d7c0
 800b45c:	2001d79c 	.word	0x2001d79c
 800b460:	2001d750 	.word	0x2001d750
 800b464:	2001d754 	.word	0x2001d754
 800b468:	2001d7b0 	.word	0x2001d7b0
 800b46c:	2001d7b8 	.word	0x2001d7b8
 800b470:	2001d7a0 	.word	0x2001d7a0
 800b474:	2001d2c8 	.word	0x2001d2c8
 800b478:	2001d2c4 	.word	0x2001d2c4
 800b47c:	2001d7ac 	.word	0x2001d7ac
 800b480:	2001d7a8 	.word	0x2001d7a8

0800b484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <vTaskSwitchContext+0x9c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b498:	e03e      	b.n	800b518 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b49a:	4b22      	ldr	r3, [pc, #136]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	607b      	str	r3, [r7, #4]
 800b4a6:	e008      	b.n	800b4ba <vTaskSwitchContext+0x36>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <vTaskSwitchContext+0x30>
 800b4ae:	f001 f86b 	bl	800c588 <ulSetInterruptMask>
 800b4b2:	e7fe      	b.n	800b4b2 <vTaskSwitchContext+0x2e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	491c      	ldr	r1, [pc, #112]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0ec      	beq.n	800b4a8 <vTaskSwitchContext+0x24>
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a14      	ldr	r2, [pc, #80]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4da:	4413      	add	r3, r2
 800b4dc:	603b      	str	r3, [r7, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d104      	bne.n	800b4fe <vTaskSwitchContext+0x7a>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	605a      	str	r2, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4a0a      	ldr	r2, [pc, #40]	; (800b530 <vTaskSwitchContext+0xac>)
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4a07      	ldr	r2, [pc, #28]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <vTaskSwitchContext+0xac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3354      	adds	r3, #84	; 0x54
 800b514:	4a07      	ldr	r2, [pc, #28]	; (800b534 <vTaskSwitchContext+0xb0>)
 800b516:	6013      	str	r3, [r2, #0]
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2001d7c0 	.word	0x2001d7c0
 800b524:	2001d7ac 	.word	0x2001d7ac
 800b528:	2001d7a0 	.word	0x2001d7a0
 800b52c:	2001d2c8 	.word	0x2001d2c8
 800b530:	2001d2c4 	.word	0x2001d2c4
 800b534:	20000094 	.word	0x20000094

0800b538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <vTaskPlaceOnEventList+0x16>
 800b548:	f001 f81e 	bl	800c588 <ulSetInterruptMask>
 800b54c:	e7fe      	b.n	800b54c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <vTaskPlaceOnEventList+0x34>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3318      	adds	r3, #24
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fe fd19 	bl	8009f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b55c:	2101      	movs	r1, #1
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f000 fb2e 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
}
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2001d2c4 	.word	0x2001d2c4

0800b570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <vTaskPlaceOnEventListRestricted+0x18>
 800b582:	f001 f801 	bl	800c588 <ulSetInterruptMask>
 800b586:	e7fe      	b.n	800b586 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vTaskPlaceOnEventListRestricted+0x44>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3318      	adds	r3, #24
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7fe fcd8 	bl	8009f46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f000 fb0b 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2001d2c4 	.word	0x2001d2c4

0800b5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <xTaskRemoveFromEventList+0x1c>
 800b5ce:	f000 ffdb 	bl	800c588 <ulSetInterruptMask>
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fd11 	bl	800a000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5de:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <xTaskRemoveFromEventList+0xa0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d11d      	bne.n	800b622 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fd08 	bl	800a000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b19      	ldr	r3, [pc, #100]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <xTaskRemoveFromEventList+0x4c>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a16      	ldr	r2, [pc, #88]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4613      	mov	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <xTaskRemoveFromEventList+0xa8>)
 800b612:	441a      	add	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3304      	adds	r3, #4
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fc93 	bl	8009f46 <vListInsertEnd>
 800b620:	e005      	b.n	800b62e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3318      	adds	r3, #24
 800b626:	4619      	mov	r1, r3
 800b628:	480e      	ldr	r0, [pc, #56]	; (800b664 <xTaskRemoveFromEventList+0xac>)
 800b62a:	f7fe fc8c 	bl	8009f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <xTaskRemoveFromEventList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d905      	bls.n	800b648 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <xTaskRemoveFromEventList+0xb4>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	e001      	b.n	800b64c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800b648:	2300      	movs	r3, #0
 800b64a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b64c:	68fb      	ldr	r3, [r7, #12]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2001d7c0 	.word	0x2001d7c0
 800b65c:	2001d7a0 	.word	0x2001d7a0
 800b660:	2001d2c8 	.word	0x2001d2c8
 800b664:	2001d758 	.word	0x2001d758
 800b668:	2001d2c4 	.word	0x2001d2c4
 800b66c:	2001d7ac 	.word	0x2001d7ac

0800b670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <vTaskInternalSetTimeOutState+0x24>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <vTaskInternalSetTimeOutState+0x28>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	605a      	str	r2, [r3, #4]
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	2001d7b0 	.word	0x2001d7b0
 800b698:	2001d79c 	.word	0x2001d79c

0800b69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xTaskCheckForTimeOut+0x16>
 800b6ac:	f000 ff6c 	bl	800c588 <ulSetInterruptMask>
 800b6b0:	e7fe      	b.n	800b6b0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xTaskCheckForTimeOut+0x22>
 800b6b8:	f000 ff66 	bl	800c588 <ulSetInterruptMask>
 800b6bc:	e7fe      	b.n	800b6bc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800b6be:	f000 fe31 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <xTaskCheckForTimeOut+0x9c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	e023      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b15      	ldr	r3, [pc, #84]	; (800b73c <xTaskCheckForTimeOut+0xa0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d007      	beq.n	800b6fe <xTaskCheckForTimeOut+0x62>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e015      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ffab 	bl	800b670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	e004      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 fe0d 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800b72e:	697b      	ldr	r3, [r7, #20]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	2001d79c 	.word	0x2001d79c
 800b73c:	2001d7b0 	.word	0x2001d7b0

0800b740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b744:	4b03      	ldr	r3, [pc, #12]	; (800b754 <vTaskMissedYield+0x14>)
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	2001d7ac 	.word	0x2001d7ac

0800b758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b760:	f000 f84a 	bl	800b7f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b764:	4b03      	ldr	r3, [pc, #12]	; (800b774 <prvIdleTask+0x1c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d9f9      	bls.n	800b760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b76c:	f000 fdc8 	bl	800c300 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b770:	e7f6      	b.n	800b760 <prvIdleTask+0x8>
 800b772:	bf00      	nop
 800b774:	2001d2c8 	.word	0x2001d2c8

0800b778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b77e:	2300      	movs	r3, #0
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	e00c      	b.n	800b79e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4613      	mov	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <prvInitialiseTaskLists+0x60>)
 800b790:	4413      	add	r3, r2
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fbaa 	bl	8009eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3301      	adds	r3, #1
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b37      	cmp	r3, #55	; 0x37
 800b7a2:	d9ef      	bls.n	800b784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7a4:	480d      	ldr	r0, [pc, #52]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7a6:	f7fe fba1 	bl	8009eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7aa:	480d      	ldr	r0, [pc, #52]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7ac:	f7fe fb9e 	bl	8009eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7b0:	480c      	ldr	r0, [pc, #48]	; (800b7e4 <prvInitialiseTaskLists+0x6c>)
 800b7b2:	f7fe fb9b 	bl	8009eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7b6:	480c      	ldr	r0, [pc, #48]	; (800b7e8 <prvInitialiseTaskLists+0x70>)
 800b7b8:	f7fe fb98 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7bc:	480b      	ldr	r0, [pc, #44]	; (800b7ec <prvInitialiseTaskLists+0x74>)
 800b7be:	f7fe fb95 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <prvInitialiseTaskLists+0x78>)
 800b7c4:	4a05      	ldr	r2, [pc, #20]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <prvInitialiseTaskLists+0x7c>)
 800b7ca:	4a05      	ldr	r2, [pc, #20]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	2001d2c8 	.word	0x2001d2c8
 800b7dc:	2001d728 	.word	0x2001d728
 800b7e0:	2001d73c 	.word	0x2001d73c
 800b7e4:	2001d758 	.word	0x2001d758
 800b7e8:	2001d76c 	.word	0x2001d76c
 800b7ec:	2001d784 	.word	0x2001d784
 800b7f0:	2001d750 	.word	0x2001d750
 800b7f4:	2001d754 	.word	0x2001d754

0800b7f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7fe:	e019      	b.n	800b834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b800:	f000 fd90 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b804:	4b10      	ldr	r3, [pc, #64]	; (800b848 <prvCheckTasksWaitingTermination+0x50>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe fbf5 	bl	800a000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b81e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3b01      	subs	r3, #1
 800b826:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b82a:	f000 fd8d 	bl	800c348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f810 	bl	800b854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e1      	bne.n	800b800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	2001d76c 	.word	0x2001d76c
 800b84c:	2001d798 	.word	0x2001d798
 800b850:	2001d780 	.word	0x2001d780

0800b854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3354      	adds	r3, #84	; 0x54
 800b860:	4618      	mov	r0, r3
 800b862:	f016 f94b 	bl	8021afc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d108      	bne.n	800b882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ff9b 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 ff98 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b880:	e010      	b.n	800b8a4 <prvDeleteTCB+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d103      	bne.n	800b894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 ff8f 	bl	800c7b0 <vPortFree>
	}
 800b892:	e007      	b.n	800b8a4 <prvDeleteTCB+0x50>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d002      	beq.n	800b8a4 <prvDeleteTCB+0x50>
 800b89e:	f000 fe73 	bl	800c588 <ulSetInterruptMask>
 800b8a2:	e7fe      	b.n	800b8a2 <prvDeleteTCB+0x4e>
	}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8be:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8c4:	e008      	b.n	800b8d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c6:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8d6:	6013      	str	r3, [r2, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	2001d750 	.word	0x2001d750
 800b8e8:	2001d7b8 	.word	0x2001d7b8

0800b8ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8f2:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <xTaskGetSchedulerState+0x34>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	e008      	b.n	800b912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b900:	4b08      	ldr	r3, [pc, #32]	; (800b924 <xTaskGetSchedulerState+0x38>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b908:	2302      	movs	r3, #2
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e001      	b.n	800b912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b912:	687b      	ldr	r3, [r7, #4]
	}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	2001d7a4 	.word	0x2001d7a4
 800b924:	2001d7c0 	.word	0x2001d7c0

0800b928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d051      	beq.n	800b9e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	429a      	cmp	r2, r3
 800b94a:	d241      	bcs.n	800b9d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	db06      	blt.n	800b962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6959      	ldr	r1, [r3, #20]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b974:	4413      	add	r3, r2
 800b976:	4299      	cmp	r1, r3
 800b978:	d122      	bne.n	800b9c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fb3e 	bl	800a000 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b984:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	4b18      	ldr	r3, [pc, #96]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d903      	bls.n	800b9a2 <xTaskPriorityInherit+0x7a>
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fe fac4 	bl	8009f46 <vListInsertEnd>
 800b9be:	e004      	b.n	800b9ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e008      	b.n	800b9e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d201      	bcs.n	800b9e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2001d2c4 	.word	0x2001d2c4
 800b9f0:	2001d2c8 	.word	0x2001d2c8
 800b9f4:	2001d7a0 	.word	0x2001d7a0

0800b9f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d046      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <xTaskPriorityDisinherit+0xb0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d002      	beq.n	800ba1e <xTaskPriorityDisinherit+0x26>
 800ba18:	f000 fdb6 	bl	800c588 <ulSetInterruptMask>
 800ba1c:	e7fe      	b.n	800ba1c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d102      	bne.n	800ba2c <xTaskPriorityDisinherit+0x34>
 800ba26:	f000 fdaf 	bl	800c588 <ulSetInterruptMask>
 800ba2a:	e7fe      	b.n	800ba2a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d02c      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fad6 	bl	800a000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskPriorityDisinherit+0x84>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a0c      	ldr	r2, [pc, #48]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <xTaskPriorityDisinherit+0xb8>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fa57 	bl	8009f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	2001d2c4 	.word	0x2001d2c4
 800baac:	2001d7a0 	.word	0x2001d7a0
 800bab0:	2001d2c8 	.word	0x2001d2c8

0800bab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d05a      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <vTaskPriorityDisinheritAfterTimeout+0x26>
 800bad4:	f000 fd58 	bl	800c588 <ulSetInterruptMask>
 800bad8:	e7fe      	b.n	800bad8 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d902      	bls.n	800baea <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e002      	b.n	800baf0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baee:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d043      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d13e      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb04:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d102      	bne.n	800bb14 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800bb0e:	f000 fd3b 	bl	800c588 <ulSetInterruptMask>
 800bb12:	e7fe      	b.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0x5e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db04      	blt.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6959      	ldr	r1, [r3, #20]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4a13      	ldr	r2, [pc, #76]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb42:	4413      	add	r3, r2
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d11c      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe fa57 	bl	800a000 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d903      	bls.n	800bb66 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	4a0c      	ldr	r2, [pc, #48]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a07      	ldr	r2, [pc, #28]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb74:	441a      	add	r2, r3
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe f9e2 	bl	8009f46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb82:	bf00      	nop
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2001d2c4 	.word	0x2001d2c4
 800bb90:	2001d2c8 	.word	0x2001d2c8
 800bb94:	2001d7a0 	.word	0x2001d7a0

0800bb98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb9c:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbaa:	3201      	adds	r2, #1
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbae:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	2001d2c4 	.word	0x2001d2c4

0800bbc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbca:	4b21      	ldr	r3, [pc, #132]	; (800bc50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd0:	4b20      	ldr	r3, [pc, #128]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fa12 	bl	800a000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d10a      	bne.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4819      	ldr	r0, [pc, #100]	; (800bc58 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbf4:	f7fe f9a7 	bl	8009f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbf8:	e026      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc02:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d209      	bcs.n	800bc26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fe f9b5 	bl	8009f8e <vListInsert>
}
 800bc24:	e010      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fe f9ab 	bl	8009f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d202      	bcs.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc42:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6013      	str	r3, [r2, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2001d79c 	.word	0x2001d79c
 800bc54:	2001d2c4 	.word	0x2001d2c4
 800bc58:	2001d784 	.word	0x2001d784
 800bc5c:	2001d754 	.word	0x2001d754
 800bc60:	2001d750 	.word	0x2001d750
 800bc64:	2001d7b8 	.word	0x2001d7b8

0800bc68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc72:	f000 fac7 	bl	800c204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <xTimerCreateTimerTask+0x70>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d020      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc86:	463a      	mov	r2, r7
 800bc88:	1d39      	adds	r1, r7, #4
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe f912 	bl	8009eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	9202      	str	r2, [sp, #8]
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	2302      	movs	r3, #2
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	460a      	mov	r2, r1
 800bca6:	490d      	ldr	r1, [pc, #52]	; (800bcdc <xTimerCreateTimerTask+0x74>)
 800bca8:	480d      	ldr	r0, [pc, #52]	; (800bce0 <xTimerCreateTimerTask+0x78>)
 800bcaa:	f7ff f877 	bl	800ad9c <xTaskCreateStatic>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xTimerCreateTimerTask+0x64>
 800bcc6:	f000 fc5f 	bl	800c588 <ulSetInterruptMask>
 800bcca:	e7fe      	b.n	800bcca <xTimerCreateTimerTask+0x62>
	return xReturn;
 800bccc:	68fb      	ldr	r3, [r7, #12]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2001d7f4 	.word	0x2001d7f4
 800bcdc:	080222b4 	.word	0x080222b4
 800bce0:	0800bdfd 	.word	0x0800bdfd
 800bce4:	2001d7f8 	.word	0x2001d7f8

0800bce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	; 0x28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d102      	bne.n	800bd06 <xTimerGenericCommand+0x1e>
 800bd00:	f000 fc42 	bl	800c588 <ulSetInterruptMask>
 800bd04:	e7fe      	b.n	800bd04 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd06:	4b1a      	ldr	r3, [pc, #104]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d02a      	beq.n	800bd64 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b05      	cmp	r3, #5
 800bd1e:	dc18      	bgt.n	800bd52 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd20:	f7ff fde4 	bl	800b8ec <xTaskGetSchedulerState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d109      	bne.n	800bd3e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd2a:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	f107 0114 	add.w	r1, r7, #20
 800bd32:	2300      	movs	r3, #0
 800bd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd36:	f7fe fad4 	bl	800a2e2 <xQueueGenericSend>
 800bd3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd3c:	e012      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f107 0114 	add.w	r1, r7, #20
 800bd46:	2300      	movs	r3, #0
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f7fe faca 	bl	800a2e2 <xQueueGenericSend>
 800bd4e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd50:	e008      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	f107 0114 	add.w	r1, r7, #20
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	f7fe fb89 	bl	800a474 <xQueueGenericSendFromISR>
 800bd62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3728      	adds	r7, #40	; 0x28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	2001d7f4 	.word	0x2001d7f4

0800bd74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7e:	4b1e      	ldr	r3, [pc, #120]	; (800bdf8 <prvProcessExpiredTimer+0x84>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe f937 	bl	800a000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d01a      	beq.n	800bdd6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f8c1 	bl	800bf34 <prvInsertTimerInActiveList>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d017      	beq.n	800bde8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff ff90 	bl	800bce8 <xTimerGenericCommand>
 800bdc8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <prvProcessExpiredTimer+0x74>
 800bdd0:	f000 fbda 	bl	800c588 <ulSetInterruptMask>
 800bdd4:	e7fe      	b.n	800bdd4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	4798      	blx	r3
}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	2001d7ec 	.word	0x2001d7ec

0800bdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f84f 	bl	800beac <prvGetNextExpireTime>
 800be0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f803 	bl	800be20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1a:	f000 f8cd 	bl	800bfb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1e:	e7f1      	b.n	800be04 <prvTimerTask+0x8>

0800be20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2a:	f7ff f9cd 	bl	800b1c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f85e 	bl	800bef4 <prvSampleTimeNow>
 800be38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12a      	bne.n	800be96 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d806      	bhi.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be4e:	f7ff f9c9 	bl	800b1e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff8d 	bl	800bd74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5a:	e01e      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <prvProcessTimerOrBlockTask+0x84>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <prvProcessTimerOrBlockTask+0x50>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <prvProcessTimerOrBlockTask+0x52>
 800be70:	2300      	movs	r3, #0
 800be72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <prvProcessTimerOrBlockTask+0x88>)
 800be76:	6818      	ldr	r0, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe ff57 	bl	800ad34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be86:	f7ff f9ad 	bl	800b1e4 <xTaskResumeAll>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800be90:	f000 fa36 	bl	800c300 <vPortYield>
}
 800be94:	e001      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800be96:	f7ff f9a5 	bl	800b1e4 <xTaskResumeAll>
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2001d7f0 	.word	0x2001d7f0
 800bea8:	2001d7f4 	.word	0x2001d7f4

0800beac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <prvGetNextExpireTime+0x16>
 800bebe:	2201      	movs	r2, #1
 800bec0:	e000      	b.n	800bec4 <prvGetNextExpireTime+0x18>
 800bec2:	2200      	movs	r2, #0
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e001      	b.n	800bee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bee0:	68fb      	ldr	r3, [r7, #12]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	2001d7ec 	.word	0x2001d7ec

0800bef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800befc:	f7ff fa00 	bl	800b300 <xTaskGetTickCount>
 800bf00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d205      	bcs.n	800bf18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf0c:	f000 f91e 	bl	800c14c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf1e:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf24:	68fb      	ldr	r3, [r7, #12]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	2001d7fc 	.word	0x2001d7fc

0800bf34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d812      	bhi.n	800bf80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d302      	bcc.n	800bf6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e01b      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <prvInsertTimerInActiveList+0x7c>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe f808 	bl	8009f8e <vListInsert>
 800bf7e:	e012      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d206      	bcs.n	800bf96 <prvInsertTimerInActiveList+0x62>
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d302      	bcc.n	800bf96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e007      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <prvInsertTimerInActiveList+0x80>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f7fd fff4 	bl	8009f8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	2001d7f0 	.word	0x2001d7f0
 800bfb4:	2001d7ec 	.word	0x2001d7ec

0800bfb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08c      	sub	sp, #48	; 0x30
 800bfbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfbe:	e0b2      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da11      	bge.n	800bfea <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfc6:	f107 0308 	add.w	r3, r7, #8
 800bfca:	3304      	adds	r3, #4
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <prvProcessReceivedCommands+0x22>
 800bfd4:	f000 fad8 	bl	800c588 <ulSetInterruptMask>
 800bfd8:	e7fe      	b.n	800bfd8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe0:	6850      	ldr	r0, [r2, #4]
 800bfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe4:	6892      	ldr	r2, [r2, #8]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f2c0 8099 	blt.w	800c124 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d004      	beq.n	800c008 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fffc 	bl	800a000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c008:	1d3b      	adds	r3, r7, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff ff72 	bl	800bef4 <prvSampleTimeNow>
 800c010:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b09      	cmp	r3, #9
 800c016:	f200 8086 	bhi.w	800c126 <prvProcessReceivedCommands+0x16e>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <prvProcessReceivedCommands+0x68>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c0ad 	.word	0x0800c0ad
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0fb 	.word	0x0800c0fb
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c049 	.word	0x0800c049
 800c040:	0800c0ad 	.word	0x0800c0ad
 800c044:	0800c0c1 	.word	0x0800c0c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	b2da      	uxtb	r2, r3
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	18d1      	adds	r1, r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	6a38      	ldr	r0, [r7, #32]
 800c068:	f7ff ff64 	bl	800bf34 <prvInsertTimerInActiveList>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d059      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	6a38      	ldr	r0, [r7, #32]
 800c078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d04e      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	441a      	add	r2, r3
 800c090:	2300      	movs	r3, #0
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2300      	movs	r3, #0
 800c096:	2100      	movs	r1, #0
 800c098:	6a38      	ldr	r0, [r7, #32]
 800c09a:	f7ff fe25 	bl	800bce8 <xTimerGenericCommand>
 800c09e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d13f      	bne.n	800c126 <prvProcessReceivedCommands+0x16e>
 800c0a6:	f000 fa6f 	bl	800c588 <ulSetInterruptMask>
 800c0aa:	e7fe      	b.n	800c0aa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b2:	f023 0301 	bic.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0be:	e032      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <prvProcessReceivedCommands+0x12e>
 800c0e0:	f000 fa52 	bl	800c588 <ulSetInterruptMask>
 800c0e4:	e7fe      	b.n	800c0e4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	699a      	ldr	r2, [r3, #24]
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	6a38      	ldr	r0, [r7, #32]
 800c0f4:	f7ff ff1e 	bl	800bf34 <prvInsertTimerInActiveList>
					break;
 800c0f8:	e015      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800c108:	6a38      	ldr	r0, [r7, #32]
 800c10a:	f000 fb51 	bl	800c7b0 <vPortFree>
 800c10e:	e00a      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c116:	f023 0301 	bic.w	r3, r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c122:	e000      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c124:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <prvProcessReceivedCommands+0x190>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f107 0108 	add.w	r1, r7, #8
 800c12e:	2200      	movs	r2, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe fa73 	bl	800a61c <xQueueReceive>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f af41 	bne.w	800bfc0 <prvProcessReceivedCommands+0x8>
	}
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	3728      	adds	r7, #40	; 0x28
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	2001d7f4 	.word	0x2001d7f4

0800c14c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c152:	e040      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c154:	4b29      	ldr	r3, [pc, #164]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15e:	4b27      	ldr	r3, [pc, #156]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd ff47 	bl	800a000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	2b00      	cmp	r3, #0
 800c186:	d026      	beq.n	800c1d6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	429a      	cmp	r2, r3
 800c198:	d90e      	bls.n	800c1b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fd feec 	bl	8009f8e <vListInsert>
 800c1b6:	e00e      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff fd90 	bl	800bce8 <xTimerGenericCommand>
 800c1c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <prvSwitchTimerLists+0x8a>
 800c1d0:	f000 f9da 	bl	800c588 <ulSetInterruptMask>
 800c1d4:	e7fe      	b.n	800c1d4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d6:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1b9      	bne.n	800c154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1ee:	4a04      	ldr	r2, [pc, #16]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	6013      	str	r3, [r2, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2001d7ec 	.word	0x2001d7ec
 800c200:	2001d7f0 	.word	0x2001d7f0

0800c204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c20a:	f000 f88b 	bl	800c324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c20e:	4b15      	ldr	r3, [pc, #84]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d120      	bne.n	800c258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c216:	4814      	ldr	r0, [pc, #80]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c218:	f7fd fe68 	bl	8009eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c21c:	4813      	ldr	r0, [pc, #76]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c21e:	f7fd fe65 	bl	8009eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c222:	4b13      	ldr	r3, [pc, #76]	; (800c270 <prvCheckForValidListAndQueue+0x6c>)
 800c224:	4a10      	ldr	r2, [pc, #64]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c228:	4b12      	ldr	r3, [pc, #72]	; (800c274 <prvCheckForValidListAndQueue+0x70>)
 800c22a:	4a10      	ldr	r2, [pc, #64]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c22c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c22e:	2300      	movs	r3, #0
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	4b11      	ldr	r3, [pc, #68]	; (800c278 <prvCheckForValidListAndQueue+0x74>)
 800c234:	4a11      	ldr	r2, [pc, #68]	; (800c27c <prvCheckForValidListAndQueue+0x78>)
 800c236:	2110      	movs	r1, #16
 800c238:	200a      	movs	r0, #10
 800c23a:	f7fd ff63 	bl	800a104 <xQueueGenericCreateStatic>
 800c23e:	4603      	mov	r3, r0
 800c240:	4a08      	ldr	r2, [pc, #32]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c244:	4b07      	ldr	r3, [pc, #28]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	490b      	ldr	r1, [pc, #44]	; (800c280 <prvCheckForValidListAndQueue+0x7c>)
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fd1a 	bl	800ac8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c258:	f000 f876 	bl	800c348 <vPortExitCritical>
}
 800c25c:	bf00      	nop
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	2001d7f4 	.word	0x2001d7f4
 800c268:	2001d7c4 	.word	0x2001d7c4
 800c26c:	2001d7d8 	.word	0x2001d7d8
 800c270:	2001d7ec 	.word	0x2001d7ec
 800c274:	2001d7f0 	.word	0x2001d7f0
 800c278:	2001d8a0 	.word	0x2001d8a0
 800c27c:	2001d800 	.word	0x2001d800
 800c280:	080222bc 	.word	0x080222bc

0800c284 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <vPortSetupTimerInterrupt+0x38>)
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <vPortSetupTimerInterrupt+0x3c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0a      	ldr	r2, [pc, #40]	; (800c2c4 <vPortSetupTimerInterrupt+0x40>)
 800c29a:	fba2 2303 	umull	r2, r3, r2, r3
 800c29e:	099b      	lsrs	r3, r3, #6
 800c2a0:	4a09      	ldr	r2, [pc, #36]	; (800c2c8 <vPortSetupTimerInterrupt+0x44>)
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c2a8:	2207      	movs	r2, #7
 800c2aa:	601a      	str	r2, [r3, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	e000e010 	.word	0xe000e010
 800c2bc:	e000e018 	.word	0xe000e018
 800c2c0:	20000004 	.word	0x20000004
 800c2c4:	10624dd3 	.word	0x10624dd3
 800c2c8:	e000e014 	.word	0xe000e014

0800c2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <prvTaskExitError+0x30>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d002      	beq.n	800c2e6 <prvTaskExitError+0x1a>
 800c2e0:	f000 f952 	bl	800c588 <ulSetInterruptMask>
 800c2e4:	e7fe      	b.n	800c2e4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800c2e6:	f000 f94f 	bl	800c588 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800c2ea:	bf00      	nop
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0fc      	beq.n	800c2ec <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20000010 	.word	0x20000010

0800c300 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c304:	4b06      	ldr	r3, [pc, #24]	; (800c320 <vPortYield+0x20>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c30c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c310:	f3bf 8f6f 	isb	sy
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c328:	f000 f92e 	bl	800c588 <ulSetInterruptMask>
	ulCriticalNesting++;
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <vPortEnterCritical+0x20>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3301      	adds	r3, #1
 800c332:	4a04      	ldr	r2, [pc, #16]	; (800c344 <vPortEnterCritical+0x20>)
 800c334:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c336:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c33a:	f3bf 8f6f 	isb	sy
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000010 	.word	0x20000010

0800c348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortExitCritical+0x30>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <vPortExitCritical+0x12>
 800c354:	f000 f918 	bl	800c588 <ulSetInterruptMask>
 800c358:	e7fe      	b.n	800c358 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800c35a:	4b07      	ldr	r3, [pc, #28]	; (800c378 <vPortExitCritical+0x30>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	4a05      	ldr	r2, [pc, #20]	; (800c378 <vPortExitCritical+0x30>)
 800c362:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <vPortExitCritical+0x30>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800c36c:	2000      	movs	r0, #0
 800c36e:	f000 f918 	bl	800c5a2 <vClearInterruptMask>
	}
}
 800c372:	bf00      	nop
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000010 	.word	0x20000010

0800c37c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c382:	f000 f901 	bl	800c588 <ulSetInterruptMask>
 800c386:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c388:	f7fe ffca 	bl	800b320 <xTaskIncrementTick>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <xPortSysTickHandler+0x2c>)
 800c394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c398:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f901 	bl	800c5a2 <vClearInterruptMask>
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed04 	.word	0xe000ed04

0800c3ac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b02      	subs	r3, #2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d102      	bne.n	800c3ce <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800c3c8:	f000 f8b2 	bl	800c530 <vRestoreContextOfFirstTask>
		}
		break;
 800c3cc:	e002      	b.n	800c3d4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800c3ce:	f000 f8db 	bl	800c588 <ulSetInterruptMask>
 800c3d2:	e7fe      	b.n	800c3d2 <vPortSVCHandler_C+0x26>
		}
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3b04      	subs	r3, #4
 800c3fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3b04      	subs	r3, #4
 800c408:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c40a:	4a38      	ldr	r2, [pc, #224]	; (800c4ec <pxPortInitialiseStack+0x110>)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3b04      	subs	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800c41c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3b04      	subs	r3, #4
 800c422:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800c42a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3b04      	subs	r3, #4
 800c430:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800c438:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800c446:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3b04      	subs	r3, #4
 800c44c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3b04      	subs	r3, #4
 800c458:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800c460:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3b04      	subs	r3, #4
 800c466:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800c46e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3b04      	subs	r3, #4
 800c474:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800c47c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800c48a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3b04      	subs	r3, #4
 800c490:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800c498:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800c4a6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800c4b4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800c4c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3b04      	subs	r3, #4
 800c4c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800c4d0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	0800c2cd 	.word	0x0800c2cd

0800c4f0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <xPortStartScheduler+0x38>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a0b      	ldr	r2, [pc, #44]	; (800c528 <xPortStartScheduler+0x38>)
 800c4fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4fe:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c500:	4b09      	ldr	r3, [pc, #36]	; (800c528 <xPortStartScheduler+0x38>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <xPortStartScheduler+0x38>)
 800c506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c50a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800c50c:	f7ff feba 	bl	800c284 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800c510:	4b06      	ldr	r3, [pc, #24]	; (800c52c <xPortStartScheduler+0x3c>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800c516:	f000 f823 	bl	800c560 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800c51a:	f7fe ffb3 	bl	800b484 <vTaskSwitchContext>
	prvTaskExitError();
 800c51e:	f7ff fed5 	bl	800c2cc <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	bd80      	pop	{r7, pc}
 800c528:	e000ed20 	.word	0xe000ed20
 800c52c:	20000010 	.word	0x20000010

0800c530 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <pxCurrentTCBConst2>)
 800c532:	6811      	ldr	r1, [r2, #0]
 800c534:	6808      	ldr	r0, [r1, #0]
 800c536:	c806      	ldmia	r0!, {r1, r2}
 800c538:	f381 880b 	msr	PSPLIM, r1
 800c53c:	2102      	movs	r1, #2
 800c53e:	f381 8814 	msr	CONTROL, r1
 800c542:	3020      	adds	r0, #32
 800c544:	f380 8809 	msr	PSP, r0
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	4710      	bx	r2
 800c54e:	bf00      	nop

0800c550 <pxCurrentTCBConst2>:
 800c550:	2001d2c4 	.word	0x2001d2c4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
	...

0800c560 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c560:	4807      	ldr	r0, [pc, #28]	; (800c580 <xVTORConst>)
 800c562:	6800      	ldr	r0, [r0, #0]
 800c564:	6800      	ldr	r0, [r0, #0]
 800c566:	f380 8808 	msr	MSP, r0
 800c56a:	b662      	cpsie	i
 800c56c:	b661      	cpsie	f
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	df02      	svc	2
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	f3af 8000 	nop.w

0800c580 <xVTORConst>:
 800c580:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c588:	f3ef 8011 	mrs	r0, BASEPRI
 800c58c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800c590:	f381 8811 	msr	BASEPRI, r1
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c59e:	bf00      	nop
 800c5a0:	4618      	mov	r0, r3

0800c5a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5a2:	f380 8811 	msr	BASEPRI, r0
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800c5b0:	bf00      	nop
	...

0800c5c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5c0:	f3ef 8009 	mrs	r0, PSP
 800c5c4:	f3ef 820b 	mrs	r2, PSPLIM
 800c5c8:	4673      	mov	r3, lr
 800c5ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <pxCurrentTCBConst>)
 800c5d0:	6811      	ldr	r1, [r2, #0]
 800c5d2:	6008      	str	r0, [r1, #0]
 800c5d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f7fe ff4e 	bl	800b484 <vTaskSwitchContext>
 800c5e8:	f04f 0000 	mov.w	r0, #0
 800c5ec:	f380 8811 	msr	BASEPRI, r0
 800c5f0:	4a07      	ldr	r2, [pc, #28]	; (800c610 <pxCurrentTCBConst>)
 800c5f2:	6811      	ldr	r1, [r2, #0]
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5fa:	f382 880b 	msr	PSPLIM, r2
 800c5fe:	f380 8809 	msr	PSP, r0
 800c602:	4718      	bx	r3
 800c604:	f3af 8000 	nop.w
 800c608:	f3af 8000 	nop.w
 800c60c:	f3af 8000 	nop.w

0800c610 <pxCurrentTCBConst>:
 800c610:	2001d2c4 	.word	0x2001d2c4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
	...

0800c620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c620:	f01e 0f04 	tst.w	lr, #4
 800c624:	bf0c      	ite	eq
 800c626:	f3ef 8008 	mrseq	r0, MSP
 800c62a:	f3ef 8009 	mrsne	r0, PSP
 800c62e:	4904      	ldr	r1, [pc, #16]	; (800c640 <svchandler_address_const>)
 800c630:	4708      	bx	r1
 800c632:	bf00      	nop
 800c634:	f3af 8000 	nop.w
 800c638:	f3af 8000 	nop.w
 800c63c:	f3af 8000 	nop.w

0800c640 <svchandler_address_const>:
 800c640:	0800c3ad 	.word	0x0800c3ad
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c654:	f7fe fdb8 	bl	800b1c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c658:	4b4f      	ldr	r3, [pc, #316]	; (800c798 <pvPortMalloc+0x150>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c660:	f000 f8f8 	bl	800c854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c664:	4b4d      	ldr	r3, [pc, #308]	; (800c79c <pvPortMalloc+0x154>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8083 	bne.w	800c778 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d015      	beq.n	800c6a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c678:	2208      	movs	r2, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <pvPortMalloc+0x5c>
 800c69e:	f7ff ff73 	bl	800c588 <ulSetInterruptMask>
 800c6a2:	e7fe      	b.n	800c6a2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d066      	beq.n	800c778 <pvPortMalloc+0x130>
 800c6aa:	4b3d      	ldr	r3, [pc, #244]	; (800c7a0 <pvPortMalloc+0x158>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d861      	bhi.n	800c778 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6b4:	4b3b      	ldr	r3, [pc, #236]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c6b8:	4b3a      	ldr	r3, [pc, #232]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6be:	e004      	b.n	800c6ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <pvPortMalloc+0x94>
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1f1      	bne.n	800c6c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6dc:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <pvPortMalloc+0x150>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d048      	beq.n	800c778 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	4413      	add	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	2308      	movs	r3, #8
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	429a      	cmp	r2, r3
 800c706:	d917      	bls.n	800c738 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <pvPortMalloc+0xd8>
 800c71a:	f7ff ff35 	bl	800c588 <ulSetInterruptMask>
 800c71e:	e7fe      	b.n	800c71e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	1ad2      	subs	r2, r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	f000 f8f0 	bl	800c918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c738:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <pvPortMalloc+0x158>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	4a17      	ldr	r2, [pc, #92]	; (800c7a0 <pvPortMalloc+0x158>)
 800c744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c746:	4b16      	ldr	r3, [pc, #88]	; (800c7a0 <pvPortMalloc+0x158>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b17      	ldr	r3, [pc, #92]	; (800c7a8 <pvPortMalloc+0x160>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d203      	bcs.n	800c75a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <pvPortMalloc+0x158>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <pvPortMalloc+0x160>)
 800c758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <pvPortMalloc+0x154>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	431a      	orrs	r2, r3
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <pvPortMalloc+0x164>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <pvPortMalloc+0x164>)
 800c776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c778:	f7fe fd34 	bl	800b1e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <pvPortMalloc+0x144>
 800c786:	f7ff feff 	bl	800c588 <ulSetInterruptMask>
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x142>
	return pvReturn;
 800c78c:	68fb      	ldr	r3, [r7, #12]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	2001f8f8 	.word	0x2001f8f8
 800c79c:	2001f90c 	.word	0x2001f90c
 800c7a0:	2001f8fc 	.word	0x2001f8fc
 800c7a4:	2001f8f0 	.word	0x2001f8f0
 800c7a8:	2001f900 	.word	0x2001f900
 800c7ac:	2001f904 	.word	0x2001f904

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d03d      	beq.n	800c83e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <vPortFree+0x98>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <vPortFree+0x34>
 800c7de:	f7ff fed3 	bl	800c588 <ulSetInterruptMask>
 800c7e2:	e7fe      	b.n	800c7e2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <vPortFree+0x42>
 800c7ec:	f7ff fecc 	bl	800c588 <ulSetInterruptMask>
 800c7f0:	e7fe      	b.n	800c7f0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <vPortFree+0x98>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01e      	beq.n	800c83e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d11a      	bne.n	800c83e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b0e      	ldr	r3, [pc, #56]	; (800c848 <vPortFree+0x98>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	43db      	mvns	r3, r3
 800c812:	401a      	ands	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c818:	f7fe fcd6 	bl	800b1c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <vPortFree+0x9c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4413      	add	r3, r2
 800c826:	4a09      	ldr	r2, [pc, #36]	; (800c84c <vPortFree+0x9c>)
 800c828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c82a:	68b8      	ldr	r0, [r7, #8]
 800c82c:	f000 f874 	bl	800c918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <vPortFree+0xa0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a06      	ldr	r2, [pc, #24]	; (800c850 <vPortFree+0xa0>)
 800c838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c83a:	f7fe fcd3 	bl	800b1e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	2001f90c 	.word	0x2001f90c
 800c84c:	2001f8fc 	.word	0x2001f8fc
 800c850:	2001f908 	.word	0x2001f908

0800c854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c85a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c860:	4b27      	ldr	r3, [pc, #156]	; (800c900 <prvHeapInit+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00c      	beq.n	800c888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3307      	adds	r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	4a1f      	ldr	r2, [pc, #124]	; (800c900 <prvHeapInit+0xac>)
 800c884:	4413      	add	r3, r2
 800c886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c88c:	4a1d      	ldr	r2, [pc, #116]	; (800c904 <prvHeapInit+0xb0>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c892:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <prvHeapInit+0xb0>)
 800c894:	2200      	movs	r2, #0
 800c896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0307 	bic.w	r3, r3, #7
 800c8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4a15      	ldr	r2, [pc, #84]	; (800c908 <prvHeapInit+0xb4>)
 800c8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <prvHeapInit+0xb4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <prvHeapInit+0xb4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <prvHeapInit+0xb4>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	4a0a      	ldr	r2, [pc, #40]	; (800c90c <prvHeapInit+0xb8>)
 800c8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4a09      	ldr	r2, [pc, #36]	; (800c910 <prvHeapInit+0xbc>)
 800c8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <prvHeapInit+0xc0>)
 800c8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8f2:	601a      	str	r2, [r3, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	2001d8f0 	.word	0x2001d8f0
 800c904:	2001f8f0 	.word	0x2001f8f0
 800c908:	2001f8f8 	.word	0x2001f8f8
 800c90c:	2001f900 	.word	0x2001f900
 800c910:	2001f8fc 	.word	0x2001f8fc
 800c914:	2001f90c 	.word	0x2001f90c

0800c918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c920:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <prvInsertBlockIntoFreeList+0xac>)
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e002      	b.n	800c92c <prvInsertBlockIntoFreeList+0x14>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d8f7      	bhi.n	800c926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d108      	bne.n	800c95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	441a      	add	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d118      	bne.n	800c9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d00d      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	441a      	add	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	e008      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c996:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	e003      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d002      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2001f8f0 	.word	0x2001f8f0
 800c9c8:	2001f8f8 	.word	0x2001f8f8

0800c9cc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
}
 800c9d0:	bf00      	nop
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800c9de:	f003 fb4f 	bl	8010080 <touchgfx_components_init>
  touchgfx_init();
 800c9e2:	f003 fb23 	bl	801002c <touchgfx_init>
}
 800c9e6:	bf00      	nop
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800c9ee:	f003 fb4f 	bl	8010090 <touchgfx_taskEntry>
}
 800c9f2:	bf00      	nop
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    {
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
    }
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	08022cdc 	.word	0x08022cdc

0800ca18 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    }
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ffe9 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca26:	2104      	movs	r1, #4
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f014 face 	bl	8020fca <_ZdlPvj>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ca44:	887b      	ldrh	r3, [r7, #2]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d010      	beq.n	800ca6c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dc13      	bgt.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d005      	beq.n	800ca62 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800ca56:	e00e      	b.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ca58:	f001 ffbc 	bl	800e9d4 <_ZN17TypedTextDatabase8getFontsEv>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	e00a      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ca62:	f001 ffb7 	bl	800e9d4 <_ZN17TypedTextDatabase8getFontsEv>
 800ca66:	4603      	mov	r3, r0
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	e005      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ca6c:	f001 ffb2 	bl	800e9d4 <_ZN17TypedTextDatabase8getFontsEv>
 800ca70:	4603      	mov	r3, r0
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	e000      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800ca76:	2300      	movs	r3, #0
    }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	4a05      	ldr	r2, [pc, #20]	; (800caa0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff ffb1 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	08022cc8 	.word	0x08022cc8

0800caa4 <_ZN23ApplicationFontProviderD0Ev>:
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ffe7 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
 800cab2:	2104      	movs	r1, #4
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f014 fa88 	bl	8020fca <_ZdlPvj>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    {
 800cacc:	4a04      	ldr	r2, [pc, #16]	; (800cae0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
    }
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	08022fc4 	.word	0x08022fc4

0800cae4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
    }
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff ffe9 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800caf2:	2114      	movs	r1, #20
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f014 fa68 	bl	8020fca <_ZdlPvj>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800cb10:	887b      	ldrh	r3, [r7, #2]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e010      	b.n	800cb3c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3308      	adds	r3, #8
 800cb28:	681c      	ldr	r4, [r3, #0]
 800cb2a:	f107 030f 	add.w	r3, r7, #15
 800cb2e:	f107 0210 	add.w	r2, r7, #16
 800cb32:	8879      	ldrh	r1, [r7, #2]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	47a0      	blx	r4
 800cb38:	6178      	str	r0, [r7, #20]
        return glyph;
 800cb3a:	697b      	ldr	r3, [r7, #20]
    }
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd90      	pop	{r4, r7, pc}

0800cb44 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	89db      	ldrh	r3, [r3, #14]
    }
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8a1b      	ldrh	r3, [r3, #16]
    }
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	88db      	ldrh	r3, [r3, #6]
    }
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	889b      	ldrh	r3, [r3, #4]
    }
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7a9b      	ldrb	r3, [r3, #10]
 800cbb0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cbb4:	b2db      	uxtb	r3, r3
    }
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	7a9b      	ldrb	r3, [r3, #10]
 800cbce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cbd2:	b2db      	uxtb	r3, r3
    }
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	4a05      	ldr	r2, [pc, #20]	; (800cc00 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff ff67 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	080238f8 	.word	0x080238f8

0800cc04 <_ZN8touchgfx9ConstFontD0Ev>:
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff ffe7 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc12:	211c      	movs	r1, #28
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f014 f9d8 	bl	8020fca <_ZdlPvj>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	4a05      	ldr	r2, [pc, #20]	; (800cc44 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff ffd3 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	08022cf0 	.word	0x08022cf0

0800cc48 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ffe7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cc56:	212c      	movs	r1, #44	; 0x2c
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f014 f9b6 	bl	8020fca <_ZdlPvj>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08e      	sub	sp, #56	; 0x38
 800cc9c:	af0a      	add	r7, sp, #40	; 0x28
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4611      	mov	r1, r2
 800cca4:	461a      	mov	r2, r3
 800cca6:	460b      	mov	r3, r1
 800cca8:	80fb      	strh	r3, [r7, #6]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	88b9      	ldrh	r1, [r7, #4]
 800ccb2:	88fa      	ldrh	r2, [r7, #6]
 800ccb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccb8:	9308      	str	r3, [sp, #32]
 800ccba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccbc:	9307      	str	r3, [sp, #28]
 800ccbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ccc2:	9306      	str	r3, [sp, #24]
 800ccc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ccc8:	9305      	str	r3, [sp, #20]
 800ccca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccce:	9304      	str	r3, [sp, #16]
 800ccd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccda:	9302      	str	r3, [sp, #8]
 800ccdc:	7f3b      	ldrb	r3, [r7, #28]
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	8b3b      	ldrh	r3, [r7, #24]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	460b      	mov	r3, r1
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	f007 f870 	bl	8013dcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800ccec:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccf6:	61da      	str	r2, [r3, #28]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccfc:	621a      	str	r2, [r3, #32]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd02:	625a      	str	r2, [r3, #36]	; 0x24
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd08:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	08022cf0 	.word	0x08022cf0

0800cd18 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	889b      	ldrh	r3, [r3, #4]
 800cd2c:	0adb      	lsrs	r3, r3, #11
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4413      	add	r3, r2
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4413      	add	r3, r2
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b089      	sub	sp, #36	; 0x24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	460b      	mov	r3, r1
 800cd54:	607a      	str	r2, [r7, #4]
 800cd56:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7b1b      	ldrb	r3, [r3, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e030      	b.n	800cdcc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a1a      	ldr	r2, [r3, #32]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	7b5b      	ldrb	r3, [r3, #13]
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	b21b      	sxth	r3, r3
 800cd7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd7e:	b219      	sxth	r1, r3
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	7adb      	ldrb	r3, [r3, #11]
 800cd84:	b21b      	sxth	r3, r3
 800cd86:	430b      	orrs	r3, r1
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	7b1b      	ldrb	r3, [r3, #12]
 800cd96:	837b      	strh	r3, [r7, #26]
 800cd98:	8b7b      	ldrh	r3, [r7, #26]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d015      	beq.n	800cdca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	897a      	ldrh	r2, [r7, #10]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d103      	bne.n	800cdb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cdae:	e00d      	b.n	800cdcc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	897a      	ldrh	r2, [r7, #10]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d306      	bcc.n	800cdc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cdba:	8b7b      	ldrh	r3, [r7, #26]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	837b      	strh	r3, [r7, #26]
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	61fb      	str	r3, [r7, #28]
 800cdc6:	e7e7      	b.n	800cd98 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800cdc8:	bf00      	nop
        }
    }
    return 0;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3724      	adds	r7, #36	; 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__tcf_0+0xc>)
 800cdde:	f7ff ff21 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	2001f910 	.word	0x2001f910

0800cde8 <_Z23getFont_verdana_10_4bppv>:
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08e      	sub	sp, #56	; 0x38
 800cdec:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800cdee:	4b21      	ldr	r3, [pc, #132]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800cdf0:	e8d3 3f8f 	ldab	r3, [r3]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf0c      	ite	eq
 800cdfe:	2301      	moveq	r3, #1
 800ce00:	2300      	movne	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d030      	beq.n	800ce6a <_Z23getFont_verdana_10_4bppv+0x82>
 800ce08:	481a      	ldr	r0, [pc, #104]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce0a:	f014 f8e0 	bl	8020fce <__cxa_guard_acquire>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	bf14      	ite	ne
 800ce14:	2301      	movne	r3, #1
 800ce16:	2300      	moveq	r3, #0
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d025      	beq.n	800ce6a <_Z23getFont_verdana_10_4bppv+0x82>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	930c      	str	r3, [sp, #48]	; 0x30
 800ce22:	2300      	movs	r3, #0
 800ce24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce26:	2300      	movs	r3, #0
 800ce28:	930a      	str	r3, [sp, #40]	; 0x28
 800ce2a:	233f      	movs	r3, #63	; 0x3f
 800ce2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce2e:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <_Z23getFont_verdana_10_4bppv+0x90>)
 800ce30:	9308      	str	r3, [sp, #32]
 800ce32:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <_Z23getFont_verdana_10_4bppv+0x94>)
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	2300      	movs	r3, #0
 800ce38:	9306      	str	r3, [sp, #24]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	2304      	movs	r3, #4
 800ce44:	9303      	str	r3, [sp, #12]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9302      	str	r3, [sp, #8]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9301      	str	r3, [sp, #4]
 800ce4e:	230a      	movs	r3, #10
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	230a      	movs	r3, #10
 800ce54:	2201      	movs	r2, #1
 800ce56:	490a      	ldr	r1, [pc, #40]	; (800ce80 <_Z23getFont_verdana_10_4bppv+0x98>)
 800ce58:	480a      	ldr	r0, [pc, #40]	; (800ce84 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800ce5a:	f7ff ff1d 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ce5e:	480a      	ldr	r0, [pc, #40]	; (800ce88 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800ce60:	f014 f8fe 	bl	8021060 <atexit>
 800ce64:	4803      	ldr	r0, [pc, #12]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce66:	f014 f8be 	bl	8020fe6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800ce6a:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	2001f93c 	.word	0x2001f93c
 800ce78:	08023ec8 	.word	0x08023ec8
 800ce7c:	08023ed4 	.word	0x08023ed4
 800ce80:	08023e98 	.word	0x08023e98
 800ce84:	2001f910 	.word	0x2001f910
 800ce88:	0800cdd9 	.word	0x0800cdd9

0800ce8c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <__tcf_0+0xc>)
 800ce92:	f7ff fec7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	2001f940 	.word	0x2001f940

0800ce9c <_Z23getFont_verdana_20_4bppv>:
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08e      	sub	sp, #56	; 0x38
 800cea0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800cea2:	4b21      	ldr	r3, [pc, #132]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cea4:	e8d3 3f8f 	ldab	r3, [r3]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bf0c      	ite	eq
 800ceb2:	2301      	moveq	r3, #1
 800ceb4:	2300      	movne	r3, #0
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d030      	beq.n	800cf1e <_Z23getFont_verdana_20_4bppv+0x82>
 800cebc:	481a      	ldr	r0, [pc, #104]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cebe:	f014 f886 	bl	8020fce <__cxa_guard_acquire>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bf14      	ite	ne
 800cec8:	2301      	movne	r3, #1
 800ceca:	2300      	moveq	r3, #0
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d025      	beq.n	800cf1e <_Z23getFont_verdana_20_4bppv+0x82>
 800ced2:	2300      	movs	r3, #0
 800ced4:	930c      	str	r3, [sp, #48]	; 0x30
 800ced6:	2300      	movs	r3, #0
 800ced8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceda:	2300      	movs	r3, #0
 800cedc:	930a      	str	r3, [sp, #40]	; 0x28
 800cede:	233f      	movs	r3, #63	; 0x3f
 800cee0:	9309      	str	r3, [sp, #36]	; 0x24
 800cee2:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <_Z23getFont_verdana_20_4bppv+0x90>)
 800cee4:	9308      	str	r3, [sp, #32]
 800cee6:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <_Z23getFont_verdana_20_4bppv+0x94>)
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	2300      	movs	r3, #0
 800ceec:	9306      	str	r3, [sp, #24]
 800ceee:	2300      	movs	r3, #0
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	2301      	movs	r3, #1
 800cef4:	9304      	str	r3, [sp, #16]
 800cef6:	2304      	movs	r3, #4
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	2300      	movs	r3, #0
 800cefc:	9302      	str	r3, [sp, #8]
 800cefe:	2300      	movs	r3, #0
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	2314      	movs	r3, #20
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	2314      	movs	r3, #20
 800cf08:	2201      	movs	r2, #1
 800cf0a:	490a      	ldr	r1, [pc, #40]	; (800cf34 <_Z23getFont_verdana_20_4bppv+0x98>)
 800cf0c:	480a      	ldr	r0, [pc, #40]	; (800cf38 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800cf0e:	f7ff fec3 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cf12:	480a      	ldr	r0, [pc, #40]	; (800cf3c <_Z23getFont_verdana_20_4bppv+0xa0>)
 800cf14:	f014 f8a4 	bl	8021060 <atexit>
 800cf18:	4803      	ldr	r0, [pc, #12]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cf1a:	f014 f864 	bl	8020fe6 <__cxa_guard_release>
    return verdana_20_4bpp;
 800cf1e:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	2001f96c 	.word	0x2001f96c
 800cf2c:	08023ecc 	.word	0x08023ecc
 800cf30:	08023ed8 	.word	0x08023ed8
 800cf34:	08023ea8 	.word	0x08023ea8
 800cf38:	2001f940 	.word	0x2001f940
 800cf3c:	0800ce8d 	.word	0x0800ce8d

0800cf40 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	4801      	ldr	r0, [pc, #4]	; (800cf4c <__tcf_0+0xc>)
 800cf46:	f7ff fe6d 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	2001f970 	.word	0x2001f970

0800cf50 <_Z23getFont_verdana_40_4bppv>:
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08e      	sub	sp, #56	; 0x38
 800cf54:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf56:	4b21      	ldr	r3, [pc, #132]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cf58:	e8d3 3f8f 	ldab	r3, [r3]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bf0c      	ite	eq
 800cf66:	2301      	moveq	r3, #1
 800cf68:	2300      	movne	r3, #0
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d030      	beq.n	800cfd2 <_Z23getFont_verdana_40_4bppv+0x82>
 800cf70:	481a      	ldr	r0, [pc, #104]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cf72:	f014 f82c 	bl	8020fce <__cxa_guard_acquire>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bf14      	ite	ne
 800cf7c:	2301      	movne	r3, #1
 800cf7e:	2300      	moveq	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d025      	beq.n	800cfd2 <_Z23getFont_verdana_40_4bppv+0x82>
 800cf86:	2300      	movs	r3, #0
 800cf88:	930c      	str	r3, [sp, #48]	; 0x30
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf8e:	2300      	movs	r3, #0
 800cf90:	930a      	str	r3, [sp, #40]	; 0x28
 800cf92:	233f      	movs	r3, #63	; 0x3f
 800cf94:	9309      	str	r3, [sp, #36]	; 0x24
 800cf96:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800cf98:	9308      	str	r3, [sp, #32]
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800cf9c:	9307      	str	r3, [sp, #28]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9306      	str	r3, [sp, #24]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	2304      	movs	r3, #4
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	2328      	movs	r3, #40	; 0x28
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	2328      	movs	r3, #40	; 0x28
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	490a      	ldr	r1, [pc, #40]	; (800cfe8 <_Z23getFont_verdana_40_4bppv+0x98>)
 800cfc0:	480a      	ldr	r0, [pc, #40]	; (800cfec <_Z23getFont_verdana_40_4bppv+0x9c>)
 800cfc2:	f7ff fe69 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cfc6:	480a      	ldr	r0, [pc, #40]	; (800cff0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800cfc8:	f014 f84a 	bl	8021060 <atexit>
 800cfcc:	4803      	ldr	r0, [pc, #12]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cfce:	f014 f80a 	bl	8020fe6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800cfd2:	4b06      	ldr	r3, [pc, #24]	; (800cfec <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	2001f99c 	.word	0x2001f99c
 800cfe0:	08023ed0 	.word	0x08023ed0
 800cfe4:	08023edc 	.word	0x08023edc
 800cfe8:	08023eb8 	.word	0x08023eb8
 800cfec:	2001f970 	.word	0x2001f970
 800cff0:	0800cf41 	.word	0x0800cf41

0800cff4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
    {
    }
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
    {
    }
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
	...

0800d090 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    {
 800d098:	4a04      	ldr	r2, [pc, #16]	; (800d0ac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	601a      	str	r2, [r3, #0]
    }
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	08022e60 	.word	0x08022e60

0800d0b0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
    }
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff ffe9 	bl	800d090 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d0be:	2104      	movs	r1, #4
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f013 ff82 	bl	8020fca <_ZdlPvj>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
    {
    }
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d10e:	6810      	ldr	r0, [r2, #0]
 800d110:	6851      	ldr	r1, [r2, #4]
 800d112:	c303      	stmia	r3!, {r0, r1}
    }
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3304      	adds	r3, #4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f005 fd80 	bl	8012c32 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    {
 800d144:	4a04      	ldr	r2, [pc, #16]	; (800d158 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	601a      	str	r2, [r3, #0]
    }
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	08022e48 	.word	0x08022e48

0800d15c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
    }
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ffe9 	bl	800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d16a:	2104      	movs	r1, #4
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f013 ff2c 	bl	8020fca <_ZdlPvj>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0
    {
        return instance;
 800d180:	4b03      	ldr	r3, [pc, #12]	; (800d190 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d182:	681b      	ldr	r3, [r3, #0]
    }
 800d184:	4618      	mov	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	2001fda0 	.word	0x2001fda0

0800d194 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d198:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d008      	beq.n	800d1b6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d1a4:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d1ae:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b4:	e002      	b.n	800d1bc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d1b6:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
    }
 800d1bc:	4618      	mov	r0, r3
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	2001fda0 	.word	0x2001fda0

0800d1cc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d1d4:	4a07      	ldr	r2, [pc, #28]	; (800d1f4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	605a      	str	r2, [r3, #4]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	721a      	strb	r2, [r3, #8]
    {
    }
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	08022e24 	.word	0x08022e24

0800d1f8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
    {
 800d200:	4a04      	ldr	r2, [pc, #16]	; (800d214 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	601a      	str	r2, [r3, #0]
    }
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	08022e24 	.word	0x08022e24

0800d218 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
    }
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ffe9 	bl	800d1f8 <_ZN8touchgfx10TransitionD1Ev>
 800d226:	210c      	movs	r1, #12
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f013 fece 	bl	8020fca <_ZdlPvj>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
    {
    }
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
    {
    }
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
    {
    }
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d27c:	f005 fcb4 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 800d280:	4603      	mov	r3, r0
 800d282:	4618      	mov	r0, r3
 800d284:	f006 f8f8 	bl	8013478 <_ZN8touchgfx11Application10invalidateEv>
    }
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	605a      	str	r2, [r3, #4]
    }
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	4a05      	ldr	r2, [pc, #20]	; (800d2cc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fee7 	bl	800d090 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08023844 	.word	0x08023844

0800d2d0 <_ZN8touchgfx11ApplicationD0Ev>:
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff ffe7 	bl	800d2ac <_ZN8touchgfx11ApplicationD1Ev>
 800d2de:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f013 fe71 	bl	8020fca <_ZdlPvj>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f005 fd34 	bl	8012d6c <_ZN8touchgfx11ApplicationC1Ev>
 800d304:	4a09      	ldr	r2, [pc, #36]	; (800d32c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a04      	ldr	r2, [pc, #16]	; (800d330 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d31e:	6013      	str	r3, [r2, #0]
    }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	08022dd8 	.word	0x08022dd8
 800d330:	2001fdec 	.word	0x2001fdec

0800d334 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f804 	bl	800d34a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00f      	beq.n	800d37c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	330c      	adds	r3, #12
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4610      	mov	r0, r2
 800d370:	4798      	blx	r3
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d378:	2301      	movs	r3, #1
 800d37a:	e000      	b.n	800d37e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d37c:	2300      	movs	r3, #0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00e      	beq.n	800d3a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3308      	adds	r3, #8
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4610      	mov	r0, r2
 800d396:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	601a      	str	r2, [r3, #0]
    }
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	4a05      	ldr	r2, [pc, #20]	; (800d3e4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff ff69 	bl	800d2ac <_ZN8touchgfx11ApplicationD1Ev>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08022dd8 	.word	0x08022dd8

0800d3e8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff ffe7 	bl	800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d3f6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f013 fde5 	bl	8020fca <_ZdlPvj>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	4a08      	ldr	r2, [pc, #32]	; (800d438 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fac5 	bl	800d9b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff ffcb 	bl	800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	08022d74 	.word	0x08022d74

0800d43c <_ZN23FrontendApplicationBaseD0Ev>:
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7ff ffe1 	bl	800d40c <_ZN23FrontendApplicationBaseD1Ev>
 800d44a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f013 fdbb 	bl	8020fca <_ZdlPvj>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f87a 	bl	800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	721a      	strb	r2, [r3, #8]
    }
 800d482:	bf00      	nop
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	605a      	str	r2, [r3, #4]
    }
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
	...

0800d4ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff ff1a 	bl	800d2f4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800d4c0:	4a12      	ldr	r2, [pc, #72]	; (800d50c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 f89d 	bl	800d60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800d4e2:	f7ff fe4b 	bl	800d17c <_ZN8touchgfx3HAL11getInstanceEv>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	3208      	adds	r2, #8
 800d4ec:	6812      	ldr	r2, [r2, #0]
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800d4f4:	f7ff fe4e 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f00c fe69 	bl	801a1d2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08022d74 	.word	0x08022d74

0800d510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff ffe9 	bl	800d510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	605a      	str	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	3308      	adds	r3, #8
 800d54c:	3208      	adds	r2, #8
 800d54e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d552:	e883 0003 	stmia.w	r3, {r0, r1}
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b089      	sub	sp, #36	; 0x24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800d570:	61bb      	str	r3, [r7, #24]
 800d572:	2300      	movs	r3, #0
 800d574:	61fb      	str	r3, [r7, #28]
 800d576:	f107 0008 	add.w	r0, r7, #8
 800d57a:	f107 0318 	add.w	r3, r7, #24
 800d57e:	cb0c      	ldmia	r3, {r2, r3}
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	f000 f85f 	bl	800d644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7ff ffcb 	bl	800d528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800d592:	f107 0308 	add.w	r3, r7, #8
 800d596:	4618      	mov	r0, r3
 800d598:	f000 fa0a 	bl	800d9b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800d5a8:	bf00      	nop
 800d5aa:	3724      	adds	r7, #36	; 0x24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd90      	pop	{r4, r7, pc}
 800d5b0:	0800d5b5 	.word	0x0800d5b5

0800d5b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af02      	add	r7, sp, #8
 800d5ba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4b04      	ldr	r3, [pc, #16]	; (800d5e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800d5d4:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800d5d6:	f000 f867 	bl	800d6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	2001fde0 	.word	0x2001fde0
 800d5e8:	2001fddc 	.word	0x2001fddc

0800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	4a04      	ldr	r2, [pc, #16]	; (800d608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	08022e48 	.word	0x08022e48

0800d60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff ffe8 	bl	800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d61c:	4a08      	ldr	r2, [pc, #32]	; (800d640 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	605a      	str	r2, [r3, #4]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	609a      	str	r2, [r3, #8]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	60da      	str	r2, [r3, #12]
    {
    }
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	08022dc0 	.word	0x08022dc0

0800d644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4639      	mov	r1, r7
 800d650:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff ffc8 	bl	800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d65c:	4a08      	ldr	r2, [pc, #32]	; (800d680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	605a      	str	r2, [r3, #4]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3308      	adds	r3, #8
 800d66c:	463a      	mov	r2, r7
 800d66e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d672:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08022dc0 	.word	0x08022dc0

0800d684 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff fd9c 	bl	800d1cc <_ZN8touchgfx10TransitionC1Ev>
 800d694:	4a03      	ldr	r2, [pc, #12]	; (800d6a4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	08022d50 	.word	0x08022d50

0800d6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b08f      	sub	sp, #60	; 0x3c
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689a      	ldr	r2, [r3, #8]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3320      	adds	r3, #32
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2bdb      	cmp	r3, #219	; 0xdb
 800d6cc:	d805      	bhi.n	800d6da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800d6ce:	4b7e      	ldr	r3, [pc, #504]	; (800d8c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800d6d0:	4a7e      	ldr	r2, [pc, #504]	; (800d8cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d6d2:	21a3      	movs	r1, #163	; 0xa3
 800d6d4:	487e      	ldr	r0, [pc, #504]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d6d6:	f013 fca5 	bl	8021024 <__assert_func>
 800d6da:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3320      	adds	r3, #32
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4798      	blx	r3
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b0f      	cmp	r3, #15
 800d6f2:	d805      	bhi.n	800d700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800d6f4:	4b77      	ldr	r3, [pc, #476]	; (800d8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d6f6:	4a75      	ldr	r2, [pc, #468]	; (800d8cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d6f8:	21a4      	movs	r1, #164	; 0xa4
 800d6fa:	4875      	ldr	r0, [pc, #468]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d6fc:	f013 fc92 	bl	8021024 <__assert_func>
 800d700:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68da      	ldr	r2, [r3, #12]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3320      	adds	r3, #32
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4610      	mov	r0, r2
 800d712:	4798      	blx	r3
 800d714:	4603      	mov	r3, r0
 800d716:	2b0b      	cmp	r3, #11
 800d718:	d805      	bhi.n	800d726 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800d71a:	4b6f      	ldr	r3, [pc, #444]	; (800d8d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d71c:	4a6b      	ldr	r2, [pc, #428]	; (800d8cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d71e:	21a5      	movs	r1, #165	; 0xa5
 800d720:	486b      	ldr	r0, [pc, #428]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d722:	f013 fc7f 	bl	8021024 <__assert_func>
 800d726:	bf00      	nop
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d734:	f005 fa58 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 800d738:	4603      	mov	r3, r0
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff fcf0 	bl	800d120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d008      	beq.n	800d75a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	330c      	adds	r3, #12
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4610      	mov	r0, r2
 800d758:	4798      	blx	r3
    if (*currentTrans)
 800d75a:	6a3b      	ldr	r3, [r7, #32]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d007      	beq.n	800d772 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4610      	mov	r0, r2
 800d770:	4798      	blx	r3
    if (*currentScreen)
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d008      	beq.n	800d78c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3314      	adds	r3, #20
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4610      	mov	r0, r2
 800d78a:	4798      	blx	r3
    if (*currentPresenter)
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	3304      	adds	r3, #4
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	4798      	blx	r3
    if (*currentScreen)
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d007      	beq.n	800d7be <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4798      	blx	r3
    if (*currentPresenter)
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d008      	beq.n	800d7d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	4798      	blx	r3
}
 800d7d8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 f87b 	bl	800d8dc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	200c      	movs	r0, #12
 800d7ec:	f7ff fc02 	bl	800cff4 <_ZnwjPv>
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7ff ff46 	bl	800d684 <_ZN8touchgfx12NoTransitionC1Ev>
 800d7f8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	f000 f87e 	bl	800d902 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d806:	4603      	mov	r3, r0
 800d808:	4619      	mov	r1, r3
 800d80a:	20dc      	movs	r0, #220	; 0xdc
 800d80c:	f7ff fbf2 	bl	800cff4 <_ZnwjPv>
 800d810:	4604      	mov	r4, r0
 800d812:	4620      	mov	r0, r4
 800d814:	f001 fa78 	bl	800ed08 <_ZN11Screen1ViewC1Ev>
 800d818:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	2100      	movs	r1, #0
 800d820:	4618      	mov	r0, r3
 800d822:	f000 f881 	bl	800d928 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d826:	4603      	mov	r3, r0
 800d828:	4619      	mov	r1, r3
 800d82a:	2010      	movs	r0, #16
 800d82c:	f7ff fbe2 	bl	800cff4 <_ZnwjPv>
 800d830:	4604      	mov	r4, r0
 800d832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d834:	4620      	mov	r0, r4
 800d836:	f001 fa11 	bl	800ec5c <_ZN16Screen1PresenterC1ER11Screen1View>
 800d83a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d840:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d846:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	3304      	adds	r3, #4
 800d858:	e000      	b.n	800d85c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d85a:	2300      	movs	r3, #0
 800d85c:	4619      	mov	r1, r3
 800d85e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d860:	f7ff fda2 	bl	800d3a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	3304      	adds	r3, #4
 800d868:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fe0f 	bl	800d48e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d874:	4618      	mov	r0, r3
 800d876:	f000 f86a 	bl	800d94e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	61fb      	str	r3, [r7, #28]
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	330c      	adds	r3, #12
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	69f8      	ldr	r0, [r7, #28]
 800d890:	4798      	blx	r3
    newPresenter->activate();
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	69b8      	ldr	r0, [r7, #24]
 800d89a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d89c:	6979      	ldr	r1, [r7, #20]
 800d89e:	69f8      	ldr	r0, [r7, #28]
 800d8a0:	f006 fe32 	bl	8014508 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3310      	adds	r3, #16
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6978      	ldr	r0, [r7, #20]
 800d8ae:	4798      	blx	r3
    newTransition->invalidate();
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3314      	adds	r3, #20
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6978      	ldr	r0, [r7, #20]
 800d8ba:	4798      	blx	r3
}
 800d8bc:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	373c      	adds	r7, #60	; 0x3c
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd90      	pop	{r4, r7, pc}
 800d8c8:	080222c4 	.word	0x080222c4
 800d8cc:	08022354 	.word	0x08022354
 800d8d0:	08022458 	.word	0x08022458
 800d8d4:	0802249c 	.word	0x0802249c
 800d8d8:	08022540 	.word	0x08022540

0800d8dc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3324      	adds	r3, #36	; 0x24
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	887a      	ldrh	r2, [r7, #2]
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	4798      	blx	r3
 800d8f8:	4603      	mov	r3, r0
    }
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	460b      	mov	r3, r1
 800d90c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3324      	adds	r3, #36	; 0x24
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	887a      	ldrh	r2, [r7, #2]
 800d918:	4611      	mov	r1, r2
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	4798      	blx	r3
 800d91e:	4603      	mov	r3, r0
    }
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3324      	adds	r3, #36	; 0x24
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	887a      	ldrh	r2, [r7, #2]
 800d93e:	4611      	mov	r1, r2
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	4798      	blx	r3
 800d944:	4603      	mov	r3, r0
    }
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d94e:	b480      	push	{r7}
 800d950:	b083      	sub	sp, #12
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d95e:	bf00      	nop
 800d960:	370c      	adds	r7, #12
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
	...

0800d96c <_ZN8touchgfx12NoTransitionD1Ev>:
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	4a05      	ldr	r2, [pc, #20]	; (800d98c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff fc3b 	bl	800d1f8 <_ZN8touchgfx10TransitionD1Ev>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	08022d50 	.word	0x08022d50

0800d990 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff ffe7 	bl	800d96c <_ZN8touchgfx12NoTransitionD1Ev>
 800d99e:	210c      	movs	r1, #12
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f013 fb12 	bl	8020fca <_ZdlPvj>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	4a05      	ldr	r2, [pc, #20]	; (800d9d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fbbb 	bl	800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	08022dc0 	.word	0x08022dc0

0800d9d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ffe7 	bl	800d9b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d9e2:	2110      	movs	r1, #16
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f013 faf0 	bl	8020fca <_ZdlPvj>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	68d2      	ldr	r2, [r2, #12]
 800da04:	1052      	asrs	r2, r2, #1
 800da06:	1899      	adds	r1, r3, r2
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	f003 0301 	and.w	r3, r3, #1
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	e00a      	b.n	800da30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	68d2      	ldr	r2, [r2, #12]
 800da22:	1052      	asrs	r2, r2, #1
 800da24:	4413      	add	r3, r2
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	6892      	ldr	r2, [r2, #8]
 800da2c:	4413      	add	r3, r2
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4608      	mov	r0, r1
 800da32:	4798      	blx	r3
    }
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d010      	beq.n	800da6e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d107      	bne.n	800da64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800da60:	2301      	movs	r3, #1
 800da62:	e000      	b.n	800da66 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800da64:	2300      	movs	r3, #0
 800da66:	2b01      	cmp	r3, #1
 800da68:	d001      	beq.n	800da6e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800da6e:	2300      	movs	r3, #0
    }
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
        : color(col)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	601a      	str	r2, [r3, #0]
    {
    }
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	801a      	strh	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	805a      	strh	r2, [r3, #2]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	809a      	strh	r2, [r3, #4]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	80da      	strh	r2, [r3, #6]
    {
    }
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	460b      	mov	r3, r1
 800dad2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	887a      	ldrh	r2, [r7, #2]
 800dad8:	801a      	strh	r2, [r3, #0]
    {
    }
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800daf0:	4a14      	ldr	r2, [pc, #80]	; (800db44 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	3304      	adds	r3, #4
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff ffcd 	bl	800da9a <_ZN8touchgfx4RectC1Ev>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	330c      	adds	r3, #12
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff ffc8 	bl	800da9a <_ZN8touchgfx4RectC1Ev>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	615a      	str	r2, [r3, #20]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	619a      	str	r2, [r3, #24]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	61da      	str	r2, [r3, #28]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	841a      	strh	r2, [r3, #32]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	845a      	strh	r2, [r3, #34]	; 0x22
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4618      	mov	r0, r3
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	08023890 	.word	0x08023890

0800db48 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
    {
 800db50:	4a04      	ldr	r2, [pc, #16]	; (800db64 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	601a      	str	r2, [r3, #0]
    }
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	08023890 	.word	0x08023890

0800db68 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
    }
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff ffe9 	bl	800db48 <_ZN8touchgfx8DrawableD1Ev>
 800db76:	2128      	movs	r1, #40	; 0x28
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f013 fa26 	bl	8020fca <_ZdlPvj>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800db96:	2b00      	cmp	r3, #0
 800db98:	d005      	beq.n	800dba6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3314      	adds	r3, #20
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	4798      	blx	r3
        }
    }
 800dba6:	bf00      	nop
 800dba8:	3708      	adds	r7, #8
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800dbae:	b480      	push	{r7}
 800dbb0:	b083      	sub	sp, #12
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dbb6:	2300      	movs	r3, #0
    }
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	4608      	mov	r0, r1
 800dbce:	4611      	mov	r1, r2
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	817b      	strh	r3, [r7, #10]
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	813b      	strh	r3, [r7, #8]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800dbde:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dbe2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f82a 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800dbee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800dbf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 f87e 	bl	800dcfa <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800dc06:	b480      	push	{r7}
 800dc08:	b083      	sub	sp, #12
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	887a      	ldrh	r2, [r7, #2]
 800dc16:	809a      	strh	r2, [r3, #4]
    }
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	887a      	ldrh	r2, [r7, #2]
 800dc34:	80da      	strh	r2, [r3, #6]
    }
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b082      	sub	sp, #8
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	807b      	strh	r3, [r7, #2]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3330      	adds	r3, #48	; 0x30
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dc5e:	4611      	mov	r1, r2
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	4798      	blx	r3
        setY(y);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3334      	adds	r3, #52	; 0x34
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dc70:	4611      	mov	r1, r2
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	4798      	blx	r3
    }
 800dc76:	bf00      	nop
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	460b      	mov	r3, r1
 800dc88:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	887a      	ldrh	r2, [r7, #2]
 800dc8e:	811a      	strh	r2, [r3, #8]
    }
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	460b      	mov	r3, r1
 800dca6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	887a      	ldrh	r2, [r7, #2]
 800dcac:	815a      	strh	r2, [r3, #10]
    }
 800dcae:	bf00      	nop
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
    {
    }
 800dcc2:	bf00      	nop
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dcce:	b480      	push	{r7}
 800dcd0:	b083      	sub	sp, #12
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b082      	sub	sp, #8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	807b      	strh	r3, [r7, #2]
 800dd06:	4613      	mov	r3, r2
 800dd08:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3338      	adds	r3, #56	; 0x38
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dd16:	4611      	mov	r1, r2
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	4798      	blx	r3
        setHeight(height);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	333c      	adds	r3, #60	; 0x3c
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	4798      	blx	r3
    }
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dd36:	b480      	push	{r7}
 800dd38:	b083      	sub	sp, #12
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd40:	bf00      	nop
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
    {
    }
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	78fa      	ldrb	r2, [r7, #3]
 800dd70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800dd74:	bf00      	nop
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	78fa      	ldrb	r2, [r7, #3]
 800dd90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	807b      	strh	r3, [r7, #2]
 800dde0:	4613      	mov	r3, r2
 800dde2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3354      	adds	r3, #84	; 0x54
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	8879      	ldrh	r1, [r7, #2]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ddf4:	b292      	uxth	r2, r2
 800ddf6:	1a8a      	subs	r2, r1, r2
 800ddf8:	b292      	uxth	r2, r2
 800ddfa:	b210      	sxth	r0, r2
 800ddfc:	8839      	ldrh	r1, [r7, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800de04:	b292      	uxth	r2, r2
 800de06:	1a8a      	subs	r2, r1, r2
 800de08:	b292      	uxth	r2, r2
 800de0a:	b212      	sxth	r2, r2
 800de0c:	4601      	mov	r1, r0
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	4798      	blx	r3
    }
 800de12:	bf00      	nop
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800de1a:	b480      	push	{r7}
 800de1c:	b083      	sub	sp, #12
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de28:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de30:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de38:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800de46:	b580      	push	{r7, lr}
 800de48:	b084      	sub	sp, #16
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff ffe1 	bl	800de1a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	601a      	str	r2, [r3, #0]
    }
 800de66:	bf00      	nop
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
    {
 800de78:	4a06      	ldr	r2, [pc, #24]	; (800de94 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3304      	adds	r3, #4
 800de82:	4618      	mov	r0, r3
 800de84:	f000 fb44 	bl	800e510 <_ZN8touchgfx9ContainerD1Ev>
    }
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	08023994 	.word	0x08023994

0800de98 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    }
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ffe5 	bl	800de70 <_ZN8touchgfx6ScreenD1Ev>
 800dea6:	213c      	movs	r1, #60	; 0x3c
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f013 f88e 	bl	8020fca <_ZdlPvj>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
    {
    }
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
    {
    }
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
    {
    }
 800dee8:	bf00      	nop
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
    {
    }
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3304      	adds	r3, #4
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f002 fb57 	bl	80105e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800df3e:	b580      	push	{r7, lr}
 800df40:	b084      	sub	sp, #16
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	607b      	str	r3, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	817b      	strh	r3, [r7, #10]
 800df4c:	4613      	mov	r3, r2
 800df4e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	4618      	mov	r0, r3
 800df54:	f7ff ff24 	bl	800dda0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d008      	beq.n	800df70 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff ff2a 	bl	800ddba <_ZNK8touchgfx8Drawable11isTouchableEv>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e000      	b.n	800df72 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800df70:	2300      	movs	r3, #0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	601a      	str	r2, [r3, #0]
        }
    }
 800df7c:	bf00      	nop
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fdaa 	bl	800dae8 <_ZN8touchgfx8DrawableC1Ev>
 800df94:	4a03      	ldr	r2, [pc, #12]	; (800dfa4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	08022f20 	.word	0x08022f20

0800dfa8 <_ZN8touchgfx6WidgetD1Ev>:
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	4a05      	ldr	r2, [pc, #20]	; (800dfc8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fdc5 	bl	800db48 <_ZN8touchgfx8DrawableD1Ev>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	08022f20 	.word	0x08022f20

0800dfcc <_ZN8touchgfx6WidgetD0Ev>:
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff ffe7 	bl	800dfa8 <_ZN8touchgfx6WidgetD1Ev>
 800dfda:	2128      	movs	r1, #40	; 0x28
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f012 fff4 	bl	8020fca <_ZdlPvj>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4618      	mov	r0, r3
 800dff8:	2326      	movs	r3, #38	; 0x26
 800dffa:	461a      	mov	r2, r3
 800dffc:	2100      	movs	r1, #0
 800dffe:	f013 f996 	bl	802132e <memset>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff ffbd 	bl	800df84 <_ZN8touchgfx6WidgetC1Ev>
 800e00a:	4a09      	ldr	r2, [pc, #36]	; (800e030 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	22ff      	movs	r2, #255	; 0xff
 800e014:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	3328      	adds	r3, #40	; 0x28
 800e01c:	2100      	movs	r1, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff fd2c 	bl	800da7c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	080236a4 	.word	0x080236a4

0800e034 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e044:	bf00      	nop
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	2326      	movs	r3, #38	; 0x26
 800e060:	461a      	mov	r2, r3
 800e062:	2100      	movs	r1, #0
 800e064:	f013 f963 	bl	802132e <memset>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff ff8a 	bl	800df84 <_ZN8touchgfx6WidgetC1Ev>
 800e070:	4a09      	ldr	r2, [pc, #36]	; (800e098 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	8812      	ldrh	r2, [r2, #0]
 800e07c:	84da      	strh	r2, [r3, #38]	; 0x26
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	22ff      	movs	r2, #255	; 0xff
 800e082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f003 fd25 	bl	8011ad8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	08023780 	.word	0x08023780

0800e09c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	2326      	movs	r3, #38	; 0x26
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	f013 f93e 	bl	802132e <memset>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7ff ff65 	bl	800df84 <_ZN8touchgfx6WidgetC1Ev>
 800e0ba:	4a0a      	ldr	r2, [pc, #40]	; (800e0e4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	629a      	str	r2, [r3, #40]	; 0x28
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff fe54 	bl	800dd80 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	08023634 	.word	0x08023634

0800e0e8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	4a05      	ldr	r2, [pc, #20]	; (800e124 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	601a      	str	r2, [r3, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff ff47 	bl	800dfa8 <_ZN8touchgfx6WidgetD1Ev>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	08023634 	.word	0x08023634

0800e128 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff ffe7 	bl	800e104 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e136:	2130      	movs	r1, #48	; 0x30
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f012 ff46 	bl	8020fca <_ZdlPvj>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff ffa2 	bl	800e09c <_ZN8touchgfx14AbstractButtonC1Ev>
 800e158:	4a0c      	ldr	r2, [pc, #48]	; (800e18c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	332e      	adds	r3, #46	; 0x2e
 800e162:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e166:	4618      	mov	r0, r3
 800e168:	f7ff fcae 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3330      	adds	r3, #48	; 0x30
 800e170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fca7 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	22ff      	movs	r2, #255	; 0xff
 800e17e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	0802370c 	.word	0x0802370c

0800e190 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	4a05      	ldr	r2, [pc, #20]	; (800e1b0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fe65 	bl	800de70 <_ZN8touchgfx6ScreenD1Ev>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	08022ed4 	.word	0x08022ed4

0800e1b4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff ffe7 	bl	800e190 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e1c2:	2140      	movs	r1, #64	; 0x40
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f012 ff00 	bl	8020fca <_ZdlPvj>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800e1d4:	b590      	push	{r4, r7, lr}
 800e1d6:	b08d      	sub	sp, #52	; 0x34
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 f90e 	bl	800e400 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800e1e4:	4a57      	ldr	r2, [pc, #348]	; (800e344 <_ZN15Screen1ViewBaseC1Ev+0x170>)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	3340      	adds	r3, #64	; 0x40
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff fefc 	bl	800dfec <_ZN8touchgfx3BoxC1Ev>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e1fa:	f107 0308 	add.w	r3, r7, #8
 800e1fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff fc60 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e208:	f107 0308 	add.w	r3, r7, #8
 800e20c:	4619      	mov	r1, r3
 800e20e:	4620      	mov	r0, r4
 800e210:	f7ff ff1e 	bl	800e050 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3398      	adds	r3, #152	; 0x98
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff ff95 	bl	800e148 <_ZN8touchgfx6ButtonC1Ev>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800e224:	4b48      	ldr	r3, [pc, #288]	; (800e348 <_ZN15Screen1ViewBaseC1Ev+0x174>)
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	2300      	movs	r3, #0
 800e22a:	613b      	str	r3, [r7, #16]
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	cb0c      	ldmia	r3, {r2, r3}
 800e232:	6879      	ldr	r1, [r7, #4]
 800e234:	f000 f90a 	bl	800e44c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 240, 240);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e23e:	23f0      	movs	r3, #240	; 0xf0
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	23f0      	movs	r3, #240	; 0xf0
 800e244:	2200      	movs	r2, #0
 800e246:	2100      	movs	r1, #0
 800e248:	f7ff fcbc 	bl	800dbc4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e252:	2300      	movs	r3, #0
 800e254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e258:	2300      	movs	r3, #0
 800e25a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e25e:	2300      	movs	r3, #0
 800e260:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800e264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e268:	041b      	lsls	r3, r3, #16
 800e26a:	461a      	mov	r2, r3
 800e26c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e270:	021b      	lsls	r3, r3, #8
 800e272:	431a      	orrs	r2, r3
 800e274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e278:	4313      	orrs	r3, r2
 800e27a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e27e:	f107 0320 	add.w	r3, r7, #32
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff fbf9 	bl	800da7c <_ZN8touchgfx9colortypeC1Em>
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4620      	mov	r0, r4
 800e290:	f7ff fed0 	bl	800e034 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	3340      	adds	r3, #64	; 0x40
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f7ff fe3f 	bl	800df20 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	336c      	adds	r3, #108	; 0x6c
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fcc9 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_240X240_POLY_ID));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e2b6:	f107 0314 	add.w	r3, r7, #20
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7ff fc03 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e2c2:	f107 0314 	add.w	r3, r7, #20
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f003 fc05 	bl	8011ad8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	336c      	adds	r3, #108	; 0x6c
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7ff fe22 	bl	800df20 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(0, 0);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3398      	adds	r3, #152	; 0x98
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7ff fcac 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e2f0:	f107 0318 	add.w	r3, r7, #24
 800e2f4:	2101      	movs	r1, #1
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff fbe6 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e2fc:	f107 031c 	add.w	r3, r7, #28
 800e300:	2102      	movs	r1, #2
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff fbe0 	bl	800dac8 <_ZN8touchgfx6BitmapC1Et>
 800e308:	f107 021c 	add.w	r2, r7, #28
 800e30c:	f107 0318 	add.w	r3, r7, #24
 800e310:	4619      	mov	r1, r3
 800e312:	4620      	mov	r0, r4
 800e314:	f003 fb2c 	bl	8011970 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	33cc      	adds	r3, #204	; 0xcc
 800e322:	4619      	mov	r1, r3
 800e324:	4610      	mov	r0, r2
 800e326:	f7ff fedf 	bl	800e0e8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3398      	adds	r3, #152	; 0x98
 800e330:	4619      	mov	r1, r3
 800e332:	4610      	mov	r0, r2
 800e334:	f7ff fdf4 	bl	800df20 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4618      	mov	r0, r3
 800e33c:	372c      	adds	r7, #44	; 0x2c
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd90      	pop	{r4, r7, pc}
 800e342:	bf00      	nop
 800e344:	08022e88 	.word	0x08022e88
 800e348:	0800e3cd 	.word	0x0800e3cd

0800e34c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	4a0f      	ldr	r2, [pc, #60]	; (800e394 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	33cc      	adds	r3, #204	; 0xcc
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f8b4 	bl	800e4cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3398      	adds	r3, #152	; 0x98
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 f937 	bl	800e5dc <_ZN8touchgfx6ButtonD1Ev>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	336c      	adds	r3, #108	; 0x6c
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f910 	bl	800e598 <_ZN8touchgfx5ImageD1Ev>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3340      	adds	r3, #64	; 0x40
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 f8e9 	bl	800e554 <_ZN8touchgfx3BoxD1Ev>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f7ff ff03 	bl	800e190 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	08022e88 	.word	0x08022e88

0800e398 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
}
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff ffd3 	bl	800e34c <_ZN15Screen1ViewBaseD1Ev>
 800e3a6:	21dc      	movs	r1, #220	; 0xdc
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f012 fe0e 	bl	8020fca <_ZdlPvj>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]

}
 800e3c0:	bf00      	nop
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3398      	adds	r3, #152	; 0x98
 800e3da:	683a      	ldr	r2, [r7, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d10a      	bne.n	800e3f6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
    {
        //Interaction1
        //When button1 clicked hide button1
        //Hide button1
        button1.setVisible(false);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3398      	adds	r3, #152	; 0x98
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff fcba 	bl	800dd60 <_ZN8touchgfx8Drawable10setVisibleEb>
        button1.invalidate();
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3398      	adds	r3, #152	; 0x98
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f005 fc3d 	bl	8013c70 <_ZNK8touchgfx8Drawable10invalidateEv>
    }
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f005 fed0 	bl	80141b0 <_ZN8touchgfx6ScreenC1Ev>
 800e410:	4a05      	ldr	r2, [pc, #20]	; (800e428 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	08022ed4 	.word	0x08022ed4

0800e42c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	4a04      	ldr	r2, [pc, #16]	; (800e448 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	08022f08 	.word	0x08022f08

0800e44c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	4639      	mov	r1, r7
 800e458:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff ffe4 	bl	800e42c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e464:	4a08      	ldr	r2, [pc, #32]	; (800e488 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	605a      	str	r2, [r3, #4]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3308      	adds	r3, #8
 800e474:	463a      	mov	r2, r7
 800e476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e47a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	08022ebc 	.word	0x08022ebc

0800e48c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    }
 800e494:	4a04      	ldr	r2, [pc, #16]	; (800e4a8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	08022f08 	.word	0x08022f08

0800e4ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
    }
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff ffe9 	bl	800e48c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e4ba:	2104      	movs	r1, #4
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f012 fd84 	bl	8020fca <_ZdlPvj>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	4a05      	ldr	r2, [pc, #20]	; (800e4ec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	601a      	str	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff ffd5 	bl	800e48c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	08022ebc 	.word	0x08022ebc

0800e4f0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ffe7 	bl	800e4cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e4fe:	2110      	movs	r1, #16
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f012 fd62 	bl	8020fca <_ZdlPvj>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	4a05      	ldr	r2, [pc, #20]	; (800e530 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fb11 	bl	800db48 <_ZN8touchgfx8DrawableD1Ev>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0802344c 	.word	0x0802344c

0800e534 <_ZN8touchgfx9ContainerD0Ev>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff ffe7 	bl	800e510 <_ZN8touchgfx9ContainerD1Ev>
 800e542:	212c      	movs	r1, #44	; 0x2c
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f012 fd40 	bl	8020fca <_ZdlPvj>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	4a05      	ldr	r2, [pc, #20]	; (800e574 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff fd1f 	bl	800dfa8 <_ZN8touchgfx6WidgetD1Ev>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	080236a4 	.word	0x080236a4

0800e578 <_ZN8touchgfx3BoxD0Ev>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ffe7 	bl	800e554 <_ZN8touchgfx3BoxD1Ev>
 800e586:	212c      	movs	r1, #44	; 0x2c
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f012 fd1e 	bl	8020fca <_ZdlPvj>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	4a05      	ldr	r2, [pc, #20]	; (800e5b8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fcfd 	bl	800dfa8 <_ZN8touchgfx6WidgetD1Ev>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	08023780 	.word	0x08023780

0800e5bc <_ZN8touchgfx5ImageD0Ev>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff ffe7 	bl	800e598 <_ZN8touchgfx5ImageD1Ev>
 800e5ca:	212c      	movs	r1, #44	; 0x2c
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f012 fcfc 	bl	8020fca <_ZdlPvj>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	4a05      	ldr	r2, [pc, #20]	; (800e5fc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7ff fd89 	bl	800e104 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	0802370c 	.word	0x0802370c

0800e600 <_ZN8touchgfx6ButtonD0Ev>:
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7ff ffe7 	bl	800e5dc <_ZN8touchgfx6ButtonD1Ev>
 800e60e:	2134      	movs	r1, #52	; 0x34
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f012 fcda 	bl	8020fca <_ZdlPvj>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	68d2      	ldr	r2, [r2, #12]
 800e632:	1052      	asrs	r2, r2, #1
 800e634:	1898      	adds	r0, r3, r2
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d102      	bne.n	800e648 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	e00a      	b.n	800e65e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	68d2      	ldr	r2, [r2, #12]
 800e650:	1052      	asrs	r2, r2, #1
 800e652:	4413      	add	r3, r2
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	6892      	ldr	r2, [r2, #8]
 800e65a:	4413      	add	r3, r2
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	4798      	blx	r3
    }
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d010      	beq.n	800e69c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d107      	bne.n	800e692 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d101      	bne.n	800e692 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e68e:	2301      	movs	r3, #1
 800e690:	e000      	b.n	800e694 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e692:	2300      	movs	r3, #0
 800e694:	2b01      	cmp	r3, #1
 800e696:	d001      	beq.n	800e69c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e698:	2301      	movs	r3, #1
 800e69a:	e000      	b.n	800e69e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e69c:	2300      	movs	r3, #0
    }
 800e69e:	4618      	mov	r0, r3
 800e6a0:	370c      	adds	r7, #12
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
	...

0800e6ac <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e6b0:	4b02      	ldr	r3, [pc, #8]	; (800e6bc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	08022f80 	.word	0x08022f80

0800e6c0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e6c4:	2303      	movs	r3, #3
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800e6de:	2300      	movs	r3, #0
    }
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3714      	adds	r7, #20
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e6f4:	2300      	movs	r3, #0
    }
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e70a:	2300      	movs	r3, #0
    }
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4613      	mov	r3, r2
 800e724:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800e726:	4a07      	ldr	r2, [pc, #28]	; (800e744 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e72c:	4a06      	ldr	r2, [pc, #24]	; (800e748 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e732:	4a06      	ldr	r2, [pc, #24]	; (800e74c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e734:	88fb      	ldrh	r3, [r7, #6]
 800e736:	8013      	strh	r3, [r2, #0]
    }
 800e738:	bf00      	nop
 800e73a:	3714      	adds	r7, #20
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	2001fdf0 	.word	0x2001fdf0
 800e748:	2001fdf8 	.word	0x2001fdf8
 800e74c:	2001fdf4 	.word	0x2001fdf4

0800e750 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e750:	b40e      	push	{r1, r2, r3}
 800e752:	b580      	push	{r7, lr}
 800e754:	b085      	sub	sp, #20
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e75a:	f107 0320 	add.w	r3, r7, #32
 800e75e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	2100      	movs	r1, #0
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f005 f958 	bl	8013a1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e76c:	4603      	mov	r3, r0
 800e76e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e770:	89fb      	ldrh	r3, [r7, #14]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e77c:	b003      	add	sp, #12
 800e77e:	4770      	bx	lr

0800e780 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e780:	b40c      	push	{r2, r3}
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
 800e78a:	460b      	mov	r3, r1
 800e78c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e78e:	f107 031c 	add.w	r3, r7, #28
 800e792:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e794:	78f9      	ldrb	r1, [r7, #3]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f005 f93e 	bl	8013a1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e7a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7b0:	b002      	add	sp, #8
 800e7b2:	4770      	bx	lr

0800e7b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08a      	sub	sp, #40	; 0x28
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d016      	beq.n	800e7f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3322      	adds	r3, #34	; 0x22
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	8adb      	ldrh	r3, [r3, #22]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d105      	bne.n	800e7e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e7d6:	4b43      	ldr	r3, [pc, #268]	; (800e8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e7d8:	4a43      	ldr	r2, [pc, #268]	; (800e8e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e7da:	21c5      	movs	r1, #197	; 0xc5
 800e7dc:	4843      	ldr	r0, [pc, #268]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e7de:	f012 fc21 	bl	8021024 <__assert_func>
            return buffer[pos];
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	8a9b      	ldrh	r3, [r3, #20]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e000      	b.n	800e7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d06a      	beq.n	800e8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f006 fb4a 	bl	8014e96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3322      	adds	r3, #34	; 0x22
 800e806:	623b      	str	r3, [r7, #32]
 800e808:	2301      	movs	r3, #1
 800e80a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	8adb      	ldrh	r3, [r3, #22]
 800e810:	8bfa      	ldrh	r2, [r7, #30]
 800e812:	429a      	cmp	r2, r3
 800e814:	d305      	bcc.n	800e822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e816:	4b36      	ldr	r3, [pc, #216]	; (800e8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e818:	4a36      	ldr	r2, [pc, #216]	; (800e8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e81a:	21cb      	movs	r1, #203	; 0xcb
 800e81c:	4833      	ldr	r0, [pc, #204]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e81e:	f012 fc01 	bl	8021024 <__assert_func>
            const uint16_t index = pos + offset;
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	8a9a      	ldrh	r2, [r3, #20]
 800e826:	8bfb      	ldrh	r3, [r7, #30]
 800e828:	4413      	add	r3, r2
 800e82a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e82c:	8bbb      	ldrh	r3, [r7, #28]
 800e82e:	2b09      	cmp	r3, #9
 800e830:	d801      	bhi.n	800e836 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e832:	8bbb      	ldrh	r3, [r7, #28]
 800e834:	e001      	b.n	800e83a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e836:	8bbb      	ldrh	r3, [r7, #28]
 800e838:	3b0a      	subs	r3, #10
 800e83a:	6a3a      	ldr	r2, [r7, #32]
 800e83c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e840:	f640 123f 	movw	r2, #2367	; 0x93f
 800e844:	4293      	cmp	r3, r2
 800e846:	bf0c      	ite	eq
 800e848:	2301      	moveq	r3, #1
 800e84a:	2300      	movne	r3, #0
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d03f      	beq.n	800e8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3322      	adds	r3, #34	; 0x22
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	3222      	adds	r2, #34	; 0x22
 800e85a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	8ad2      	ldrh	r2, [r2, #22]
 800e860:	2a00      	cmp	r2, #0
 800e862:	d105      	bne.n	800e870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e864:	4b1f      	ldr	r3, [pc, #124]	; (800e8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e866:	4a20      	ldr	r2, [pc, #128]	; (800e8e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e868:	21c5      	movs	r1, #197	; 0xc5
 800e86a:	4820      	ldr	r0, [pc, #128]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e86c:	f012 fbda 	bl	8021024 <__assert_func>
            return buffer[pos];
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	8a92      	ldrh	r2, [r2, #20]
 800e874:	4611      	mov	r1, r2
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e87c:	613b      	str	r3, [r7, #16]
 800e87e:	4613      	mov	r3, r2
 800e880:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	8adb      	ldrh	r3, [r3, #22]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d806      	bhi.n	800e898 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e88c:	4a1b      	ldr	r2, [pc, #108]	; (800e8fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e88e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800e892:	4816      	ldr	r0, [pc, #88]	; (800e8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e894:	f012 fbc6 	bl	8021024 <__assert_func>
            const uint16_t index = pos + 1;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	8a9b      	ldrh	r3, [r3, #20]
 800e89c:	3301      	adds	r3, #1
 800e89e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e8a0:	89bb      	ldrh	r3, [r7, #12]
 800e8a2:	2b09      	cmp	r3, #9
 800e8a4:	d801      	bhi.n	800e8aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e8a6:	89bb      	ldrh	r3, [r7, #12]
 800e8a8:	e000      	b.n	800e8ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	89f9      	ldrh	r1, [r7, #14]
 800e8b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e8b4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	3322      	adds	r3, #34	; 0x22
 800e8ba:	61bb      	str	r3, [r7, #24]
 800e8bc:	f640 133f 	movw	r3, #2367	; 0x93f
 800e8c0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	8a9b      	ldrh	r3, [r3, #20]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	8afa      	ldrh	r2, [r7, #22]
 800e8cc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e8d0:	bf00      	nop
        }
    }
    return getNextChar();
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f006 f9e2 	bl	8014c9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e8d8:	4603      	mov	r3, r0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3728      	adds	r7, #40	; 0x28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	080225e4 	.word	0x080225e4
 800e8e8:	080225f0 	.word	0x080225f0
 800e8ec:	0802269c 	.word	0x0802269c
 800e8f0:	080226e4 	.word	0x080226e4
 800e8f4:	080226f4 	.word	0x080226f4
 800e8f8:	080227c8 	.word	0x080227c8
 800e8fc:	080227d4 	.word	0x080227d4

0800e900 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f006 f98e 	bl	8014c2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e90e:	bf00      	nop
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e918:	b590      	push	{r4, r7, lr}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e922:	2300      	movs	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e926:	88fb      	ldrh	r3, [r7, #6]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d127      	bne.n	800e97c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e92c:	88fb      	ldrh	r3, [r7, #6]
 800e92e:	4a1e      	ldr	r2, [pc, #120]	; (800e9a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d016      	beq.n	800e966 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e938:	88fb      	ldrh	r3, [r7, #6]
 800e93a:	4a1b      	ldr	r2, [pc, #108]	; (800e9a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e940:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68ba      	ldr	r2, [r7, #8]
 800e948:	4413      	add	r3, r2
 800e94a:	4a18      	ldr	r2, [pc, #96]	; (800e9ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e94c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	4413      	add	r3, r2
 800e956:	4a16      	ldr	r2, [pc, #88]	; (800e9b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e958:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	68ba      	ldr	r2, [r7, #8]
 800e960:	4413      	add	r3, r2
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	e00a      	b.n	800e97c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e968:	4a12      	ldr	r2, [pc, #72]	; (800e9b4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e96a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e96c:	4a12      	ldr	r2, [pc, #72]	; (800e9b8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e96e:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e970:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e972:	88fb      	ldrh	r3, [r7, #6]
 800e974:	4a11      	ldr	r2, [pc, #68]	; (800e9bc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e97a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00d      	beq.n	800e99e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e982:	4a0f      	ldr	r2, [pc, #60]	; (800e9c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e988:	f000 f824 	bl	800e9d4 <_ZN17TypedTextDatabase8getFontsEv>
 800e98c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e98e:	f000 f819 	bl	800e9c4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e992:	4603      	mov	r3, r0
 800e994:	461a      	mov	r2, r3
 800e996:	4621      	mov	r1, r4
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff febd 	bl	800e718 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e99e:	bf00      	nop
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd90      	pop	{r4, r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	2001f9a0 	.word	0x2001f9a0
 800e9ac:	2001f9a8 	.word	0x2001f9a8
 800e9b0:	2001f9ac 	.word	0x2001f9ac
 800e9b4:	080577e4 	.word	0x080577e4
 800e9b8:	080577e0 	.word	0x080577e0
 800e9bc:	080577ec 	.word	0x080577ec
 800e9c0:	2001f9a4 	.word	0x2001f9a4

0800e9c4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	af00      	add	r7, sp, #0
    return 0;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800e9d8:	4b02      	ldr	r3, [pc, #8]	; (800e9e4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	2001f9b0 	.word	0x2001f9b0

0800e9e8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d113      	bne.n	800ea20 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d10e      	bne.n	800ea20 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ea02:	f7fe fa4b 	bl	800ce9c <_Z23getFont_verdana_20_4bppv>
 800ea06:	4603      	mov	r3, r0
};
 800ea08:	4a07      	ldr	r2, [pc, #28]	; (800ea28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea0a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ea0c:	f7fe faa0 	bl	800cf50 <_Z23getFont_verdana_40_4bppv>
 800ea10:	4603      	mov	r3, r0
};
 800ea12:	4a05      	ldr	r2, [pc, #20]	; (800ea28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea14:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800ea16:	f7fe f9e7 	bl	800cde8 <_Z23getFont_verdana_10_4bppv>
 800ea1a:	4603      	mov	r3, r0
};
 800ea1c:	4a02      	ldr	r2, [pc, #8]	; (800ea28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea1e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	2001f9b0 	.word	0x2001f9b0

0800ea2c <_GLOBAL__sub_I_touchgfx_fonts>:
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea34:	2001      	movs	r0, #1
 800ea36:	f7ff ffd7 	bl	800e9e8 <_Z41__static_initialization_and_destruction_0ii>
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	4a05      	ldr	r2, [pc, #20]	; (800ea5c <_ZN19FrontendApplicationD1Ev+0x20>)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	601a      	str	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe fcdd 	bl	800d40c <_ZN23FrontendApplicationBaseD1Ev>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	08023020 	.word	0x08023020

0800ea60 <_ZN19FrontendApplicationD0Ev>:
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ffe7 	bl	800ea3c <_ZN19FrontendApplicationD1Ev>
 800ea6e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f012 faa9 	bl	8020fca <_ZdlPvj>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 f82d 	bl	800eaf0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f004 f927 	bl	8012cec <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800ea9e:	bf00      	nop
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	68b9      	ldr	r1, [r7, #8]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fcf6 	bl	800d4ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800eac0:	4a03      	ldr	r2, [pc, #12]	; (800ead0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	601a      	str	r2, [r3, #0]
{

}
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08023020 	.word	0x08023020

0800ead4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	601a      	str	r2, [r3, #0]
{

}
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <_ZN5Model4tickEv>:

void Model::tick()
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]

}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
    {
    }
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
    {
    }
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    {
 800eb34:	4a04      	ldr	r2, [pc, #16]	; (800eb48 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
    }
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	080230a4 	.word	0x080230a4

0800eb4c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
    }
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ffe9 	bl	800eb2c <_ZN8touchgfx9PresenterD1Ev>
 800eb5a:	2104      	movs	r1, #4
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f012 fa34 	bl	8020fca <_ZdlPvj>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4618      	mov	r0, r3
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
    {
 800eb74:	4a04      	ldr	r2, [pc, #16]	; (800eb88 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	601a      	str	r2, [r3, #0]
    }
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr
 800eb88:	080230a4 	.word	0x080230a4

0800eb8c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	4a06      	ldr	r2, [pc, #24]	; (800ebb0 <_ZN13ModelListenerC1Ev+0x24>)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	605a      	str	r2, [r3, #4]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	08023094 	.word	0x08023094

0800ebb4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	4a04      	ldr	r2, [pc, #16]	; (800ebd0 <_ZN13ModelListenerD1Ev+0x1c>)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	08023094 	.word	0x08023094

0800ebd4 <_ZN13ModelListenerD0Ev>:
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff ffe9 	bl	800ebb4 <_ZN13ModelListenerD1Ev>
 800ebe2:	2108      	movs	r1, #8
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f012 f9f0 	bl	8020fca <_ZdlPvj>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4618      	mov	r0, r3
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	4a09      	ldr	r2, [pc, #36]	; (800ec24 <_ZN16Screen1PresenterD1Ev+0x30>)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	4a09      	ldr	r2, [pc, #36]	; (800ec28 <_ZN16Screen1PresenterD1Ev+0x34>)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	605a      	str	r2, [r3, #4]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7ff ffd1 	bl	800ebb4 <_ZN13ModelListenerD1Ev>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7ff ff89 	bl	800eb2c <_ZN8touchgfx9PresenterD1Ev>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	0802306c 	.word	0x0802306c
 800ec28:	08023084 	.word	0x08023084

0800ec2c <_ZThn4_N16Screen1PresenterD1Ev>:
 800ec2c:	f1a0 0004 	sub.w	r0, r0, #4
 800ec30:	e7e0      	b.n	800ebf4 <_ZN16Screen1PresenterD1Ev>
 800ec32:	bf00      	nop

0800ec34 <_ZN16Screen1PresenterD0Ev>:
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7ff ffd9 	bl	800ebf4 <_ZN16Screen1PresenterD1Ev>
 800ec42:	2110      	movs	r1, #16
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f012 f9c0 	bl	8020fca <_ZdlPvj>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <_ZThn4_N16Screen1PresenterD0Ev>:
 800ec54:	f1a0 0004 	sub.w	r0, r0, #4
 800ec58:	e7ec      	b.n	800ec34 <_ZN16Screen1PresenterD0Ev>
	...

0800ec5c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
    : view(v)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff ff7f 	bl	800eb6c <_ZN8touchgfx9PresenterC1Ev>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	3304      	adds	r3, #4
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff ff8a 	bl	800eb8c <_ZN13ModelListenerC1Ev>
 800ec78:	4a06      	ldr	r2, [pc, #24]	; (800ec94 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	4a06      	ldr	r2, [pc, #24]	; (800ec98 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	605a      	str	r2, [r3, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	60da      	str	r2, [r3, #12]
{

}
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	0802306c 	.word	0x0802306c
 800ec98:	08023084 	.word	0x08023084

0800ec9c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]

}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	4a05      	ldr	r2, [pc, #20]	; (800ece4 <_ZN11Screen1ViewD1Ev+0x20>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff fb39 	bl	800e34c <_ZN15Screen1ViewBaseD1Ev>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	080230bc 	.word	0x080230bc

0800ece8 <_ZN11Screen1ViewD0Ev>:
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff ffe7 	bl	800ecc4 <_ZN11Screen1ViewD1Ev>
 800ecf6:	21dc      	movs	r1, #220	; 0xdc
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f012 f966 	bl	8020fca <_ZdlPvj>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4618      	mov	r0, r3
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff fa5e 	bl	800e1d4 <_ZN15Screen1ViewBaseC1Ev>
 800ed18:	4a03      	ldr	r2, [pc, #12]	; (800ed28 <_ZN11Screen1ViewC1Ev+0x20>)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	601a      	str	r2, [r3, #0]
{

}
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	080230bc 	.word	0x080230bc

0800ed2c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff fb3e 	bl	800e3b8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff f8c6 	bl	800dee0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    {
 800ed64:	4a04      	ldr	r2, [pc, #16]	; (800ed78 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
    }
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	08023108 	.word	0x08023108

0800ed7c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
    }
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff ffe9 	bl	800ed5c <_ZN8touchgfx15TouchControllerD1Ev>
 800ed8a:	2104      	movs	r1, #4
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f012 f91c 	bl	8020fca <_ZdlPvj>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800eda4:	bf00      	nop
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
	...

0800edcc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	4a05      	ldr	r2, [pc, #20]	; (800edec <_ZN20STM32TouchControllerD1Ev+0x20>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff ffbd 	bl	800ed5c <_ZN8touchgfx15TouchControllerD1Ev>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	080230f0 	.word	0x080230f0

0800edf0 <_ZN20STM32TouchControllerD0Ev>:
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff ffe7 	bl	800edcc <_ZN20STM32TouchControllerD1Ev>
 800edfe:	2104      	movs	r1, #4
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f012 f8e2 	bl	8020fca <_ZdlPvj>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0

}
 800ee14:	bf00      	nop
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
	...

0800ee20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d80c      	bhi.n	800ee4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800ee30:	a201      	add	r2, pc, #4	; (adr r2, 800ee38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800ee32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee36:	bf00      	nop
 800ee38:	0800ee49 	.word	0x0800ee49
 800ee3c:	0800ee49 	.word	0x0800ee49
 800ee40:	0800ee49 	.word	0x0800ee49
 800ee44:	0800ee49 	.word	0x0800ee49
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800ee48:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop

0800ee58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	2b03      	cmp	r3, #3
 800ee66:	d80c      	bhi.n	800ee82 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800ee68:	a201      	add	r2, pc, #4	; (adr r2, 800ee70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800ee6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6e:	bf00      	nop
 800ee70:	0800ee81 	.word	0x0800ee81
 800ee74:	0800ee81 	.word	0x0800ee81
 800ee78:	0800ee81 	.word	0x0800ee81
 800ee7c:	0800ee81 	.word	0x0800ee81
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800ee80:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800ee82:	bf00      	nop
 800ee84:	370c      	adds	r7, #12
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop

0800ee90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ee9a:	79fb      	ldrb	r3, [r7, #7]
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d80c      	bhi.n	800eeba <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800eea0:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800eea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea6:	bf00      	nop
 800eea8:	0800eeb9 	.word	0x0800eeb9
 800eeac:	0800eeb9 	.word	0x0800eeb9
 800eeb0:	0800eeb9 	.word	0x0800eeb9
 800eeb4:	0800eeb9 	.word	0x0800eeb9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800eeb8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800eeba:	bf00      	nop
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop

0800eec8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
    {
 800eed0:	4a04      	ldr	r2, [pc, #16]	; (800eee4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	601a      	str	r2, [r3, #0]
    }
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	080234e8 	.word	0x080234e8

0800eee8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
    }
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7ff ffe9 	bl	800eec8 <_ZN8touchgfx3HALD1Ev>
 800eef6:	217c      	movs	r1, #124	; 0x7c
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f012 f866 	bl	8020fca <_ZdlPvj>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800ef24:	bf00      	nop
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	807b      	strh	r3, [r7, #2]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800ef40:	4b0c      	ldr	r3, [pc, #48]	; (800ef74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800ef42:	881b      	ldrh	r3, [r3, #0]
 800ef44:	887a      	ldrh	r2, [r7, #2]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d304      	bcc.n	800ef54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800ef4c:	881b      	ldrh	r3, [r3, #0]
 800ef4e:	883a      	ldrh	r2, [r7, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d205      	bcs.n	800ef60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800ef54:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800ef56:	4a0a      	ldr	r2, [pc, #40]	; (800ef80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800ef58:	219e      	movs	r1, #158	; 0x9e
 800ef5a:	480a      	ldr	r0, [pc, #40]	; (800ef84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800ef5c:	f012 f862 	bl	8021024 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800ef60:	4a09      	ldr	r2, [pc, #36]	; (800ef88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800ef62:	887b      	ldrh	r3, [r7, #2]
 800ef64:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800ef66:	4a09      	ldr	r2, [pc, #36]	; (800ef8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800ef68:	883b      	ldrh	r3, [r7, #0]
 800ef6a:	8013      	strh	r3, [r2, #0]
    }
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	2001fd94 	.word	0x2001fd94
 800ef78:	2001fd96 	.word	0x2001fd96
 800ef7c:	08022888 	.word	0x08022888
 800ef80:	080228ec 	.word	0x080228ec
 800ef84:	08022930 	.word	0x08022930
 800ef88:	2001fd9a 	.word	0x2001fd9a
 800ef8c:	2001fd9c 	.word	0x2001fd9c

0800ef90 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4610      	mov	r0, r2
 800efb0:	4798      	blx	r3
 800efb2:	4603      	mov	r3, r0
 800efb4:	e000      	b.n	800efb8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800efb6:	2300      	movs	r3, #0
    }
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800efce:	3301      	adds	r3, #1
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f002 fb0d 	bl	801160c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	33ac      	adds	r3, #172	; 0xac
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	4798      	blx	r3
    }
 800effe:	bf00      	nop
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800f010:	2300      	movs	r3, #0
    }
 800f012:	4618      	mov	r0, r3
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
	...

0800f020 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800f034:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800f036:	4a10      	ldr	r2, [pc, #64]	; (800f078 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800f038:	f240 21d2 	movw	r1, #722	; 0x2d2
 800f03c:	480f      	ldr	r0, [pc, #60]	; (800f07c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800f03e:	f011 fff1 	bl	8021024 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	bf14      	ite	ne
 800f054:	2301      	movne	r3, #1
 800f056:	2300      	moveq	r3, #0
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	4b09      	ldr	r3, [pc, #36]	; (800f080 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800f05c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	338c      	adds	r3, #140	; 0x8c
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6839      	ldr	r1, [r7, #0]
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	4798      	blx	r3
    }
 800f06c:	bf00      	nop
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	08022974 	.word	0x08022974
 800f078:	080229ac 	.word	0x080229ac
 800f07c:	08022930 	.word	0x08022930
 800f080:	2001fd9e 	.word	0x2001fd9e

0800f084 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	bf14      	ite	ne
 800f09a:	2301      	movne	r3, #1
 800f09c:	2300      	moveq	r3, #0
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	4b03      	ldr	r3, [pc, #12]	; (800f0b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800f0a2:	701a      	strb	r2, [r3, #0]
    }
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	2001fd9f 	.word	0x2001fd9f

0800f0b4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f0bc:	2300      	movs	r3, #0
    }
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d004      	beq.n	800f0e8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e2:	887a      	ldrh	r2, [r7, #2]
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	4798      	blx	r3
        }
    }
 800f0e8:	bf00      	nop
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800f0f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3318      	adds	r3, #24
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4610      	mov	r0, r2
 800f120:	4798      	blx	r3
 800f122:	4603      	mov	r3, r0
    }
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 800f134:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3330      	adds	r3, #48	; 0x30
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	4798      	blx	r3
 800f148:	4602      	mov	r2, r0
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14e:	429a      	cmp	r2, r3
 800f150:	d101      	bne.n	800f156 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800f152:	2301      	movs	r3, #1
 800f154:	e000      	b.n	800f158 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 800f156:	2300      	movs	r3, #0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f160:	e001      	b.n	800f166 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2001fd9e 	.word	0x2001fd9e

0800f174 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f188:	429a      	cmp	r2, r3
 800f18a:	d011      	beq.n	800f1b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800f18c:	4b14      	ldr	r3, [pc, #80]	; (800f1e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d11e      	bne.n	800f1d2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800f194:	4b13      	ldr	r3, [pc, #76]	; (800f1e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f19a:	4b13      	ldr	r3, [pc, #76]	; (800f1e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f19c:	881a      	ldrh	r2, [r3, #0]
 800f19e:	4b11      	ldr	r3, [pc, #68]	; (800f1e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f1a0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800f1a2:	4a11      	ldr	r2, [pc, #68]	; (800f1e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f1a4:	89bb      	ldrh	r3, [r7, #12]
 800f1a6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800f1a8:	4b0d      	ldr	r3, [pc, #52]	; (800f1e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800f1ae:	e010      	b.n	800f1d2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00c      	beq.n	800f1d2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800f1b8:	4b0a      	ldr	r3, [pc, #40]	; (800f1e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800f1be:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f1c0:	881a      	ldrh	r2, [r3, #0]
 800f1c2:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800f1c4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800f1c6:	4a08      	ldr	r2, [pc, #32]	; (800f1e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800f1c8:	89fb      	ldrh	r3, [r7, #14]
 800f1ca:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	701a      	strb	r2, [r3, #0]
    }
 800f1d2:	bf00      	nop
 800f1d4:	3714      	adds	r7, #20
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	2001fd98 	.word	0x2001fd98
 800f1e4:	2001fd96 	.word	0x2001fd96
 800f1e8:	2001fd94 	.word	0x2001fd94

0800f1ec <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
    {
    }
 800f1f4:	bf00      	nop
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
    {
    }
 800f208:	bf00      	nop
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4618      	mov	r0, r3
 800f220:	f001 fc6a 	bl	8010af8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800f224:	bf00      	nop
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	4a05      	ldr	r2, [pc, #20]	; (800f24c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7ff fe43 	bl	800eec8 <_ZN8touchgfx3HALD1Ev>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	08023340 	.word	0x08023340

0800f250 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ffe7 	bl	800f22c <_ZN20TouchGFXGeneratedHALD1Ev>
 800f25e:	217c      	movs	r1, #124	; 0x7c
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f011 feb2 	bl	8020fca <_ZdlPvj>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff ffca 	bl	800f214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <touchgfxSignalVSync>:
#include <touchgfx/hal/OSWrappers.hpp>
#include "main.h"

extern "C"
void touchgfxSignalVSync(void)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 800f28c:	f7fd ff76 	bl	800d17c <_ZN8touchgfx3HAL11getInstanceEv>
 800f290:	4603      	mov	r3, r0
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fe94 	bl	800efc0 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 800f298:	f000 faa6 	bl	800f7e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800f29c:	bf00      	nop
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <__ST7789H2_WriteData>:
#define LCD_REGISTER_ADDR FMC_BANK1_1
#define LCD_DATA_ADDR     (FMC_BANK1_1 | 0x00000002UL)

extern "C"
void __ST7789H2_WriteData(uint16_t *pData, uint16_t Length)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	807b      	strh	r3, [r7, #2]
     uint16_t i = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	81fb      	strh	r3, [r7, #14]
     while (i < Length)
 800f2b0:	89fa      	ldrh	r2, [r7, #14]
 800f2b2:	887b      	ldrh	r3, [r7, #2]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d209      	bcs.n	800f2cc <__ST7789H2_WriteData+0x2c>
     {
         /* Write data value */
         *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f2b8:	89fb      	ldrh	r3, [r7, #14]
 800f2ba:	1c5a      	adds	r2, r3, #1
 800f2bc:	81fa      	strh	r2, [r7, #14]
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	4a04      	ldr	r2, [pc, #16]	; (800f2d8 <__ST7789H2_WriteData+0x38>)
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	8013      	strh	r3, [r2, #0]
     while (i < Length)
 800f2ca:	e7f1      	b.n	800f2b0 <__ST7789H2_WriteData+0x10>
     }
}
 800f2cc:	bf00      	nop
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr
 800f2d8:	60000002 	.word	0x60000002

0800f2dc <__ST7789H2_ReadData>:

extern "C"
void __ST7789H2_ReadData(uint16_t *pData, uint16_t Length)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	81fb      	strh	r3, [r7, #14]
    while (i < Length)
 800f2ec:	89fa      	ldrh	r2, [r7, #14]
 800f2ee:	887b      	ldrh	r3, [r7, #2]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d209      	bcs.n	800f308 <__ST7789H2_ReadData+0x2c>
    {
        /* Read value */
        pData[i++] = *(uint16_t *)LCD_DATA_ADDR;
 800f2f4:	4907      	ldr	r1, [pc, #28]	; (800f314 <__ST7789H2_ReadData+0x38>)
 800f2f6:	89fb      	ldrh	r3, [r7, #14]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	81fa      	strh	r2, [r7, #14]
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	4413      	add	r3, r2
 800f302:	880a      	ldrh	r2, [r1, #0]
 800f304:	801a      	strh	r2, [r3, #0]
    while (i < Length)
 800f306:	e7f1      	b.n	800f2ec <__ST7789H2_ReadData+0x10>
    }
}
 800f308:	bf00      	nop
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr
 800f314:	60000002 	.word	0x60000002

0800f318 <__ST7789H2_WriteReg>:

extern "C"
void __ST7789H2_WriteReg(uint16_t Reg, uint16_t *pData, uint16_t Length)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	6039      	str	r1, [r7, #0]
 800f322:	80fb      	strh	r3, [r7, #6]
 800f324:	4613      	mov	r3, r2
 800f326:	80bb      	strh	r3, [r7, #4]
    uint16_t i = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	81fb      	strh	r3, [r7, #14]
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 800f32c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800f330:	88fb      	ldrh	r3, [r7, #6]
 800f332:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f334:	89fa      	ldrh	r2, [r7, #14]
 800f336:	88bb      	ldrh	r3, [r7, #4]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d209      	bcs.n	800f350 <__ST7789H2_WriteReg+0x38>
    {
        /* Write data value */
        *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f33c:	89fb      	ldrh	r3, [r7, #14]
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	81fa      	strh	r2, [r7, #14]
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	4413      	add	r3, r2
 800f348:	4a04      	ldr	r2, [pc, #16]	; (800f35c <__ST7789H2_WriteReg+0x44>)
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f34e:	e7f1      	b.n	800f334 <__ST7789H2_WriteReg+0x1c>
    }
}
 800f350:	bf00      	nop
 800f352:	3714      	adds	r7, #20
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	60000002 	.word	0x60000002

0800f360 <__ST7789H2_GetOrientation>:
    }
}

extern "C"
uint32_t __ST7789H2_GetOrientation(void)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
    uint32_t Orientation = LCD_ORIENTATION_LANDSCAPE_ROT180;
 800f366:	2303      	movs	r3, #3
 800f368:	607b      	str	r3, [r7, #4]
    //Lcd_Drv[0]->GetOrientation(Lcd_CompObj[0], &Orientation);

    return Orientation;
 800f36a:	687b      	ldr	r3, [r7, #4]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <__ST7789H2_SetDisplayWindow>:

extern "C"
void __ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800f378:	b590      	push	{r4, r7, lr}
 800f37a:	b089      	sub	sp, #36	; 0x24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4604      	mov	r4, r0
 800f380:	4608      	mov	r0, r1
 800f382:	4611      	mov	r1, r2
 800f384:	461a      	mov	r2, r3
 800f386:	4623      	mov	r3, r4
 800f388:	80fb      	strh	r3, [r7, #6]
 800f38a:	4603      	mov	r3, r0
 800f38c:	80bb      	strh	r3, [r7, #4]
 800f38e:	460b      	mov	r3, r1
 800f390:	807b      	strh	r3, [r7, #2]
 800f392:	4613      	mov	r3, r2
 800f394:	803b      	strh	r3, [r7, #0]
    //if (refreshRect != Rect(Xpos, Ypos, Width, Height))
    {
        // Check ST7789H2_DrawBitmap() implementation
        uint8_t  parameter[8];
        uint32_t Xstart, Xstop, Ystart, Ystop;
        static uint32_t Orientation = __ST7789H2_GetOrientation(); // Fixed Orientation
 800f396:	4b55      	ldr	r3, [pc, #340]	; (800f4ec <__ST7789H2_SetDisplayWindow+0x174>)
 800f398:	e8d3 3f8f 	ldab	r3, [r3]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bf0c      	ite	eq
 800f3a6:	2301      	moveq	r3, #1
 800f3a8:	2300      	movne	r3, #0
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d012      	beq.n	800f3d6 <__ST7789H2_SetDisplayWindow+0x5e>
 800f3b0:	484e      	ldr	r0, [pc, #312]	; (800f4ec <__ST7789H2_SetDisplayWindow+0x174>)
 800f3b2:	f011 fe0c 	bl	8020fce <__cxa_guard_acquire>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bf14      	ite	ne
 800f3bc:	2301      	movne	r3, #1
 800f3be:	2300      	moveq	r3, #0
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d007      	beq.n	800f3d6 <__ST7789H2_SetDisplayWindow+0x5e>
 800f3c6:	f7ff ffcb 	bl	800f360 <__ST7789H2_GetOrientation>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	4a48      	ldr	r2, [pc, #288]	; (800f4f0 <__ST7789H2_SetDisplayWindow+0x178>)
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	4846      	ldr	r0, [pc, #280]	; (800f4ec <__ST7789H2_SetDisplayWindow+0x174>)
 800f3d2:	f011 fe08 	bl	8020fe6 <__cxa_guard_release>

        /* Compute new Y start and stop values */
        if (Orientation == LCD_ORIENTATION_PORTRAIT)
 800f3d6:	4b46      	ldr	r3, [pc, #280]	; (800f4f0 <__ST7789H2_SetDisplayWindow+0x178>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10e      	bne.n	800f3fc <__ST7789H2_SetDisplayWindow+0x84>
        {
            Ystart = Ypos;
 800f3de:	88bb      	ldrh	r3, [r7, #4]
 800f3e0:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f3e2:	88ba      	ldrh	r2, [r7, #4]
 800f3e4:	883b      	ldrh	r3, [r7, #0]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f3ec:	88fb      	ldrh	r3, [r7, #6]
 800f3ee:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f3f0:	88fa      	ldrh	r2, [r7, #6]
 800f3f2:	887b      	ldrh	r3, [r7, #2]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	61bb      	str	r3, [r7, #24]
 800f3fa:	e039      	b.n	800f470 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 800f3fc:	4b3c      	ldr	r3, [pc, #240]	; (800f4f0 <__ST7789H2_SetDisplayWindow+0x178>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b02      	cmp	r3, #2
 800f402:	d10f      	bne.n	800f424 <__ST7789H2_SetDisplayWindow+0xac>
        {
            Ystart = Ypos;
 800f404:	88bb      	ldrh	r3, [r7, #4]
 800f406:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f408:	88ba      	ldrh	r2, [r7, #4]
 800f40a:	883b      	ldrh	r3, [r7, #0]
 800f40c:	4413      	add	r3, r2
 800f40e:	3b01      	subs	r3, #1
 800f410:	613b      	str	r3, [r7, #16]
            Xstart = Xpos + 0x50U;
 800f412:	88fb      	ldrh	r3, [r7, #6]
 800f414:	3350      	adds	r3, #80	; 0x50
 800f416:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1 + 0x50U;
 800f418:	88fa      	ldrh	r2, [r7, #6]
 800f41a:	887b      	ldrh	r3, [r7, #2]
 800f41c:	4413      	add	r3, r2
 800f41e:	334f      	adds	r3, #79	; 0x4f
 800f420:	61bb      	str	r3, [r7, #24]
 800f422:	e025      	b.n	800f470 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 800f424:	4b32      	ldr	r3, [pc, #200]	; (800f4f0 <__ST7789H2_SetDisplayWindow+0x178>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d10f      	bne.n	800f44c <__ST7789H2_SetDisplayWindow+0xd4>
        {
            Ystart = Ypos + 0x50U;
 800f42c:	88bb      	ldrh	r3, [r7, #4]
 800f42e:	3350      	adds	r3, #80	; 0x50
 800f430:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1 + 0x50U;
 800f432:	88ba      	ldrh	r2, [r7, #4]
 800f434:	883b      	ldrh	r3, [r7, #0]
 800f436:	4413      	add	r3, r2
 800f438:	334f      	adds	r3, #79	; 0x4f
 800f43a:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f43c:	88fb      	ldrh	r3, [r7, #6]
 800f43e:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f440:	88fa      	ldrh	r2, [r7, #6]
 800f442:	887b      	ldrh	r3, [r7, #2]
 800f444:	4413      	add	r3, r2
 800f446:	3b01      	subs	r3, #1
 800f448:	61bb      	str	r3, [r7, #24]
 800f44a:	e011      	b.n	800f470 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800f44c:	4b28      	ldr	r3, [pc, #160]	; (800f4f0 <__ST7789H2_SetDisplayWindow+0x178>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b03      	cmp	r3, #3
 800f452:	d10d      	bne.n	800f470 <__ST7789H2_SetDisplayWindow+0xf8>
        {
            Ystart = Ypos;
 800f454:	88bb      	ldrh	r3, [r7, #4]
 800f456:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f458:	88ba      	ldrh	r2, [r7, #4]
 800f45a:	883b      	ldrh	r3, [r7, #0]
 800f45c:	4413      	add	r3, r2
 800f45e:	3b01      	subs	r3, #1
 800f460:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f462:	88fb      	ldrh	r3, [r7, #6]
 800f464:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f466:	88fa      	ldrh	r2, [r7, #6]
 800f468:	887b      	ldrh	r3, [r7, #2]
 800f46a:	4413      	add	r3, r2
 800f46c:	3b01      	subs	r3, #1
 800f46e:	61bb      	str	r3, [r7, #24]
        }

        /* CASET: Column Address Set */
        parameter[0] = (uint8_t)(Xstart >> 8);           /* XS[15:8] */
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	0a1b      	lsrs	r3, r3, #8
 800f474:	b2db      	uxtb	r3, r3
 800f476:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f478:	2300      	movs	r3, #0
 800f47a:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Xstart;                 /* XS[7:0] */
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f482:	2300      	movs	r3, #0
 800f484:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Xstop >> 8);            /* XE[15:8] */
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	0a1b      	lsrs	r3, r3, #8
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f48e:	2300      	movs	r3, #0
 800f490:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Xstop;                  /* XE[7:0] */
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	b2db      	uxtb	r3, r3
 800f496:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f498:	2300      	movs	r3, #0
 800f49a:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_CASET, (uint16_t *)parameter, 4);
 800f49c:	f107 0308 	add.w	r3, r7, #8
 800f4a0:	2204      	movs	r2, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	202a      	movs	r0, #42	; 0x2a
 800f4a6:	f7ff ff37 	bl	800f318 <__ST7789H2_WriteReg>

        /* RASET: Row Address Set */
        parameter[0] = (uint8_t)(Ystart >> 8);           /* YS[15:8] */
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	0a1b      	lsrs	r3, r3, #8
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Ystart;                 /* YS[7:0] */
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Ystop >> 8);            /* YE[15:8] */
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	0a1b      	lsrs	r3, r3, #8
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Ystop;                  /* YE[7:0] */
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_RASET, (uint16_t *)parameter, 4);
 800f4d6:	f107 0308 	add.w	r3, r7, #8
 800f4da:	2204      	movs	r2, #4
 800f4dc:	4619      	mov	r1, r3
 800f4de:	202b      	movs	r0, #43	; 0x2b
 800f4e0:	f7ff ff1a 	bl	800f318 <__ST7789H2_WriteReg>

        //refreshRect = Rect(Xpos, Ypos, Width, Height);
    }
}
 800f4e4:	bf00      	nop
 800f4e6:	3724      	adds	r7, #36	; 0x24
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd90      	pop	{r4, r7, pc}
 800f4ec:	2001f9c0 	.word	0x2001f9c0
 800f4f0:	2001f9bc 	.word	0x2001f9bc

0800f4f4 <_ZN11TouchGFXHAL10initializeEv>:
/*///////////////////////////////////////////////////////////////*/

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 ff9a 	bl	8010438 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800f504:	bf00      	nop
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4618      	mov	r0, r3
 800f518:	f000 fff2 	bl	8010500 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f51c:	4603      	mov	r3, r0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6839      	ldr	r1, [r7, #0]
 800f534:	4618      	mov	r0, r3
 800f536:	f000 fff1 	bl	801051c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f53a:	bf00      	nop
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b082      	sub	sp, #8
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	4618      	mov	r0, r3
 800f552:	f000 ffee 	bl	8010532 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    this->copyFrameBufferBlockToLCD(rect);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	6819      	ldr	r1, [r3, #0]
 800f55a:	460a      	mov	r2, r1
 800f55c:	6859      	ldr	r1, [r3, #4]
 800f55e:	460b      	mov	r3, r1
 800f560:	4611      	mov	r1, r2
 800f562:	461a      	mov	r2, r3
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 f805 	bl	800f574 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>
}
 800f56a:	bf00      	nop
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect rect)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	1d3b      	adds	r3, r7, #4
 800f57e:	e883 0006 	stmia.w	r3, {r1, r2}
    uint16_t tmp;

    // Use default implementation (CPU copy!).
    // This can be accelerated using regular DMA hardware
    uint16_t *ptr = getClientFrameBuffer() + rect.x + rect.y * DISPLAY_WIDTH;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fdd1 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f58a:	4602      	mov	r2, r0
 800f58c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f590:	4619      	mov	r1, r3
 800f592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f596:	4618      	mov	r0, r3
 800f598:	4b20      	ldr	r3, [pc, #128]	; (800f61c <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	fb00 f303 	mul.w	r3, r0, r3
 800f5a0:	440b      	add	r3, r1
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	4413      	add	r3, r2
 800f5a6:	61bb      	str	r3, [r7, #24]

    /* Set Cursor */
    __ST7789H2_SetDisplayWindow(rect.x, rect.y, rect.width, rect.height);
 800f5a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f5ac:	b298      	uxth	r0, r3
 800f5ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5b2:	b299      	uxth	r1, r3
 800f5b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	f7ff feda 	bl	800f378 <__ST7789H2_SetDisplayWindow>

    /* Prepare to write */
    __ST7789H2_WriteReg(ST7789V_GRAM, (uint16_t*)NULL, 0);
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	202c      	movs	r0, #44	; 0x2c
 800f5ca:	f7ff fea5 	bl	800f318 <__ST7789H2_WriteReg>

    /* Read dummy data */
    __ST7789H2_ReadData(&tmp, 1);
 800f5ce:	f107 0316 	add.w	r3, r7, #22
 800f5d2:	2101      	movs	r1, #1
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff fe81 	bl	800f2dc <__ST7789H2_ReadData>

    for (int32_t h = 0; h < rect.height ; h++)
 800f5da:	2300      	movs	r3, #0
 800f5dc:	61fb      	str	r3, [r7, #28]
 800f5de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	da13      	bge.n	800f612 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x9e>
    {
#ifndef TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
        __ST7789H2_WriteData((ptr + h * DISPLAY_WIDTH), rect.width);
 800f5ea:	4b0c      	ldr	r3, [pc, #48]	; (800f61c <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f5ec:	881b      	ldrh	r3, [r3, #0]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	fb02 f303 	mul.w	r3, r2, r3
 800f5f6:	005b      	lsls	r3, r3, #1
 800f5f8:	69ba      	ldr	r2, [r7, #24]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f600:	b292      	uxth	r2, r2
 800f602:	4611      	mov	r1, r2
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff fe4b 	bl	800f2a0 <__ST7789H2_WriteData>
    for (int32_t h = 0; h < rect.height ; h++)
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	3301      	adds	r3, #1
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	e7e5      	b.n	800f5de <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x6a>
        MX_DMA_Init(2);
        HAL_DMA_Start(&hdma, (uint32_t)((ptr + h * DISPLAY_WIDTH)), (uint32_t)LCD_DATA_ADDR, 2 * rect.width);
        HAL_DMA_PollForTransfer(&hdma, HAL_DMA_FULL_TRANSFER, 100);
#endif // !TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
    }
}
 800f612:	bf00      	nop
 800f614:	3720      	adds	r7, #32
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	2001fd94 	.word	0x2001fd94

0800f620 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	68b9      	ldr	r1, [r7, #8]
 800f636:	f000 ff8a 	bl	801054e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800f63a:	4603      	mov	r3, r0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 ff14 	bl	801047c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f654:	bf00      	nop
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4618      	mov	r0, r3
 800f668:	f000 ff12 	bl	8010490 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4618      	mov	r0, r3
 800f680:	f000 ff10 	bl	80104a4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f684:	bf00      	nop
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 ff0e 	bl	80104b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 ff0c 	bl	80104cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800f6b4:	4603      	mov	r3, r0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 ff0c 	bl	80104e6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
	...

0800f6d8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	4a05      	ldr	r2, [pc, #20]	; (800f6f8 <_ZN11TouchGFXHALD1Ev+0x20>)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fd9f 	bl	800f22c <_ZN20TouchGFXGeneratedHALD1Ev>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	08023120 	.word	0x08023120

0800f6fc <_ZN11TouchGFXHALD0Ev>:
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff ffe7 	bl	800f6d8 <_ZN11TouchGFXHALD1Ev>
 800f70a:	217c      	movs	r1, #124	; 0x7c
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f011 fc5c 	bl	8020fca <_ZdlPvj>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f720:	2200      	movs	r2, #0
 800f722:	2101      	movs	r1, #1
 800f724:	2001      	movs	r0, #1
 800f726:	f7fa f96c 	bl	8009a02 <osSemaphoreNew>
 800f72a:	4603      	mov	r3, r0
 800f72c:	4a0f      	ldr	r2, [pc, #60]	; (800f76c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f72e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f730:	4b0e      	ldr	r3, [pc, #56]	; (800f76c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d105      	bne.n	800f744 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f738:	4b0d      	ldr	r3, [pc, #52]	; (800f770 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f73a:	4a0e      	ldr	r2, [pc, #56]	; (800f774 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f73c:	2128      	movs	r1, #40	; 0x28
 800f73e:	480e      	ldr	r0, [pc, #56]	; (800f778 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f740:	f011 fc70 	bl	8021024 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f744:	2200      	movs	r2, #0
 800f746:	2104      	movs	r1, #4
 800f748:	2001      	movs	r0, #1
 800f74a:	f7fa fa71 	bl	8009c30 <osMessageQueueNew>
 800f74e:	4603      	mov	r3, r0
 800f750:	4a0a      	ldr	r2, [pc, #40]	; (800f77c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f752:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f754:	4b09      	ldr	r3, [pc, #36]	; (800f77c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d105      	bne.n	800f768 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f75c:	4b08      	ldr	r3, [pc, #32]	; (800f780 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f75e:	4a05      	ldr	r2, [pc, #20]	; (800f774 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f760:	212c      	movs	r1, #44	; 0x2c
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f764:	f011 fc5e 	bl	8021024 <__assert_func>
}
 800f768:	bf00      	nop
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	2001f9c4 	.word	0x2001f9c4
 800f770:	080229fc 	.word	0x080229fc
 800f774:	08022a48 	.word	0x08022a48
 800f778:	08022a78 	.word	0x08022a78
 800f77c:	2001f9c8 	.word	0x2001f9c8
 800f780:	08022aa4 	.word	0x08022aa4

0800f784 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f784:	b580      	push	{r7, lr}
 800f786:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f788:	4b04      	ldr	r3, [pc, #16]	; (800f79c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f04f 31ff 	mov.w	r1, #4294967295
 800f790:	4618      	mov	r0, r3
 800f792:	f7fa f9bf 	bl	8009b14 <osSemaphoreAcquire>
}
 800f796:	bf00      	nop
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	2001f9c4 	.word	0x2001f9c4

0800f7a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f7a4:	4b03      	ldr	r3, [pc, #12]	; (800f7b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fa fa01 	bl	8009bb0 <osSemaphoreRelease>
}
 800f7ae:	bf00      	nop
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	2001f9c4 	.word	0x2001f9c4

0800f7b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f7bc:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fa f9a6 	bl	8009b14 <osSemaphoreAcquire>
}
 800f7c8:	bf00      	nop
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	2001f9c4 	.word	0x2001f9c4

0800f7d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f7d4:	4b03      	ldr	r3, [pc, #12]	; (800f7e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fa f9e9 	bl	8009bb0 <osSemaphoreRelease>
}
 800f7de:	bf00      	nop
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	2001f9c4 	.word	0x2001f9c4

0800f7e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800f7ec:	4b04      	ldr	r3, [pc, #16]	; (800f800 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800f7ee:	6818      	ldr	r0, [r3, #0]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	4903      	ldr	r1, [pc, #12]	; (800f804 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800f7f6:	f7fa fa8f 	bl	8009d18 <osMessageQueuePut>
}
 800f7fa:	bf00      	nop
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	2001f9c8 	.word	0x2001f9c8
 800f804:	20000014 	.word	0x20000014

0800f808 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800f80e:	4b09      	ldr	r3, [pc, #36]	; (800f834 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f810:	6818      	ldr	r0, [r3, #0]
 800f812:	1d39      	adds	r1, r7, #4
 800f814:	2300      	movs	r3, #0
 800f816:	2200      	movs	r2, #0
 800f818:	f7fa fada 	bl	8009dd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800f81c:	4b05      	ldr	r3, [pc, #20]	; (800f834 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f81e:	6818      	ldr	r0, [r3, #0]
 800f820:	1d39      	adds	r1, r7, #4
 800f822:	f04f 33ff 	mov.w	r3, #4294967295
 800f826:	2200      	movs	r2, #0
 800f828:	f7fa fad2 	bl	8009dd0 <osMessageQueueGet>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	2001f9c8 	.word	0x2001f9c8

0800f838 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
        : color(0)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
    }
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    {
 800f85c:	4a04      	ldr	r2, [pc, #16]	; (800f870 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	601a      	str	r2, [r3, #0]
    }
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	08023248 	.word	0x08023248

0800f874 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
    }
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff ffe9 	bl	800f854 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f882:	2104      	movs	r1, #4
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f011 fba0 	bl	8020fca <_ZdlPvj>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    {
    }
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800f8b0:	2300      	movs	r3, #0
    }
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
    {
 800f8c8:	4a04      	ldr	r2, [pc, #16]	; (800f8dc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
    }
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	080235c0 	.word	0x080235c0

0800f8e0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
    }
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff ffe9 	bl	800f8c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800f8ee:	210c      	movs	r1, #12
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f011 fb6a 	bl	8020fca <_ZdlPvj>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800f90a:	4a09      	ldr	r2, [pc, #36]	; (800f930 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	683a      	ldr	r2, [r7, #0]
 800f914:	605a      	str	r2, [r3, #4]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	721a      	strb	r2, [r3, #8]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	725a      	strb	r2, [r3, #9]
    {
    }
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4618      	mov	r0, r3
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	080235c0 	.word	0x080235c0

0800f934 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    {
    }
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    {
    }
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	330c      	adds	r3, #12
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff ff65 	bl	800f838 <_ZN8touchgfx9colortypeC1Ev>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4618      	mov	r0, r3
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	330c      	adds	r3, #12
 800f986:	4619      	mov	r1, r3
 800f988:	4610      	mov	r0, r2
 800f98a:	f7ff ffb9 	bl	800f900 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800f98e:	4a0b      	ldr	r2, [pc, #44]	; (800f9bc <_ZN8STM32DMAC1Ev+0x44>)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f103 000c 	add.w	r0, r3, #12
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3320      	adds	r3, #32
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	f001 ff6d 	bl	8011880 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	3320      	adds	r3, #32
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff ffd6 	bl	800f95c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	080231f8 	.word	0x080231f8

0800f9c0 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800f9c8:	2300      	movs	r3, #0
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	370c      	adds	r7, #12
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
	...

0800f9d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800f9e2:	4b03      	ldr	r3, [pc, #12]	; (800f9f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800f9e4:	4a03      	ldr	r2, [pc, #12]	; (800f9f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800f9e6:	2122      	movs	r1, #34	; 0x22
 800f9e8:	4803      	ldr	r0, [pc, #12]	; (800f9f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800f9ea:	f011 fb1b 	bl	8021024 <__assert_func>
 800f9ee:	bf00      	nop
 800f9f0:	08022ae8 	.word	0x08022ae8
 800f9f4:	08022b0c 	.word	0x08022b0c
 800f9f8:	08022b4c 	.word	0x08022b4c

0800f9fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800fa06:	4b03      	ldr	r3, [pc, #12]	; (800fa14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800fa08:	4a03      	ldr	r2, [pc, #12]	; (800fa18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800fa0a:	2127      	movs	r1, #39	; 0x27
 800fa0c:	4803      	ldr	r0, [pc, #12]	; (800fa1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800fa0e:	f011 fb09 	bl	8021024 <__assert_func>
 800fa12:	bf00      	nop
 800fa14:	08022ae8 	.word	0x08022ae8
 800fa18:	08022b78 	.word	0x08022b78
 800fa1c:	08022b4c 	.word	0x08022b4c

0800fa20 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	4a08      	ldr	r2, [pc, #32]	; (800fa4c <_ZN8STM32DMAD1Ev+0x2c>)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	330c      	adds	r3, #12
 800fa32:	4618      	mov	r0, r3
 800fa34:	f000 f81c 	bl	800fa70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ff40 	bl	800f8c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	080231f8 	.word	0x080231f8

0800fa50 <_ZN8STM32DMAD0Ev>:
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff ffe1 	bl	800fa20 <_ZN8STM32DMAD1Ev>
 800fa5e:	2144      	movs	r1, #68	; 0x44
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f011 fab2 	bl	8020fca <_ZdlPvj>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	4a05      	ldr	r2, [pc, #20]	; (800fa90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fee7 	bl	800f854 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	08023610 	.word	0x08023610

0800fa94 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff ffe7 	bl	800fa70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800faa2:	2114      	movs	r1, #20
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f011 fa90 	bl	8020fca <_ZdlPvj>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800fabc:	4a04      	ldr	r2, [pc, #16]	; (800fad0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6013      	str	r3, [r2, #0]
    }
 800fac2:	bf00      	nop
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	2001fdfc 	.word	0x2001fdfc

0800fad4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
 800fae0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800fae2:	4a0b      	ldr	r2, [pc, #44]	; (800fb10 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	601a      	str	r2, [r3, #0]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	68ba      	ldr	r2, [r7, #8]
 800faec:	605a      	str	r2, [r3, #4]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	609a      	str	r2, [r3, #8]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	60da      	str	r2, [r3, #12]
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	69ba      	ldr	r2, [r7, #24]
 800fafe:	611a      	str	r2, [r3, #16]
    {
    }
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	4618      	mov	r0, r3
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	08023330 	.word	0x08023330

0800fb14 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    {
 800fb1c:	4a04      	ldr	r2, [pc, #16]	; (800fb30 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	601a      	str	r2, [r3, #0]
    }
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4618      	mov	r0, r3
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	08023330 	.word	0x08023330

0800fb34 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    }
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff ffe9 	bl	800fb14 <_ZN8touchgfx7MVPHeapD1Ev>
 800fb42:	2114      	movs	r1, #20
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f011 fa40 	bl	8020fca <_ZdlPvj>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
    {
 800fb5c:	4a04      	ldr	r2, [pc, #16]	; (800fb70 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	601a      	str	r2, [r3, #0]
    }
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4618      	mov	r0, r3
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	080237ec 	.word	0x080237ec

0800fb74 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    }
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff ffe9 	bl	800fb54 <_ZN8touchgfx3LCDD1Ev>
 800fb82:	2108      	movs	r1, #8
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f011 fa20 	bl	8020fca <_ZdlPvj>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	801a      	strh	r2, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	805a      	strh	r2, [r3, #2]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	809a      	strh	r2, [r3, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	80da      	strh	r2, [r3, #6]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	811a      	strh	r2, [r3, #8]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	815a      	strh	r2, [r3, #10]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	819a      	strh	r2, [r3, #12]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	739a      	strb	r2, [r3, #14]
        {
        }
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff ffd5 	bl	800fb94 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	611a      	str	r2, [r3, #16]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	829a      	strh	r2, [r3, #20]
    {
    }
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800fc0e:	4a55      	ldr	r2, [pc, #340]	; (800fd64 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	605a      	str	r2, [r3, #4]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	609a      	str	r2, [r3, #8]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	60da      	str	r2, [r3, #12]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	611a      	str	r2, [r3, #16]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	615a      	str	r2, [r3, #20]
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2200      	movs	r2, #0
 800fc36:	619a      	str	r2, [r3, #24]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	331c      	adds	r3, #28
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff ffcc 	bl	800fbda <_ZN8touchgfx8GesturesC1Ev>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	639a      	str	r2, [r3, #56]	; 0x38
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	641a      	str	r2, [r3, #64]	; 0x40
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	645a      	str	r2, [r3, #68]	; 0x44
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	64da      	str	r2, [r3, #76]	; 0x4c
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	3350      	adds	r3, #80	; 0x50
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fd ff04 	bl	800da9a <_ZN8touchgfx4RectC1Ev>
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	659a      	str	r2, [r3, #88]	; 0x58
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	65da      	str	r2, [r3, #92]	; 0x5c
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	661a      	str	r2, [r3, #96]	; 0x60
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	671a      	str	r2, [r3, #112]	; 0x70
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2201      	movs	r2, #1
 800fd16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800fd1a:	4a13      	ldr	r2, [pc, #76]	; (800fd68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800fd20:	4a12      	ldr	r2, [pc, #72]	; (800fd6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fd22:	8b3b      	ldrh	r3, [r7, #24]
 800fd24:	8013      	strh	r3, [r2, #0]
 800fd26:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fd28:	881a      	ldrh	r2, [r3, #0]
 800fd2a:	4b11      	ldr	r3, [pc, #68]	; (800fd70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800fd2c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800fd2e:	4a11      	ldr	r2, [pc, #68]	; (800fd74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fd30:	8bbb      	ldrh	r3, [r7, #28]
 800fd32:	8013      	strh	r3, [r2, #0]
 800fd34:	4b0f      	ldr	r3, [pc, #60]	; (800fd74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fd36:	881a      	ldrh	r2, [r3, #0]
 800fd38:	4b0f      	ldr	r3, [pc, #60]	; (800fd78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800fd3a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800fd3c:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800fd42:	8b3a      	ldrh	r2, [r7, #24]
 800fd44:	8bbb      	ldrh	r3, [r7, #28]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	bf34      	ite	cc
 800fd4a:	2301      	movcc	r3, #1
 800fd4c:	2300      	movcs	r3, #0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	461a      	mov	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	080234e8 	.word	0x080234e8
 800fd68:	2001fda0 	.word	0x2001fda0
 800fd6c:	2001fd94 	.word	0x2001fd94
 800fd70:	2001fd9a 	.word	0x2001fd9a
 800fd74:	2001fd96 	.word	0x2001fd96
 800fd78:	2001fd9c 	.word	0x2001fd9c
 800fd7c:	2001fd98 	.word	0x2001fd98

0800fd80 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fd fbe7 	bl	800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800fd92:	bf00      	nop
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
	...

0800fd9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af02      	add	r7, sp, #8
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	68b9      	ldr	r1, [r7, #8]
 800fdb6:	f7ff fe8d 	bl	800fad4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800fdba:	4a04      	ldr	r2, [pc, #16]	; (800fdcc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	601a      	str	r2, [r3, #0]
    {

    }
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	0802331c 	.word	0x0802331c

0800fdd0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	4801      	ldr	r0, [pc, #4]	; (800fddc <__tcf_0+0xc>)
 800fdd6:	f000 f965 	bl	80100a4 <_ZN12FrontendHeapD1Ev>
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	2001f9cc 	.word	0x2001f9cc

0800fde0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800fde0:	b580      	push	{r7, lr}
 800fde2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800fde4:	4b11      	ldr	r3, [pc, #68]	; (800fe2c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fde6:	e8d3 3f8f 	ldab	r3, [r3]
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bf0c      	ite	eq
 800fdf4:	2301      	moveq	r3, #1
 800fdf6:	2300      	movne	r3, #0
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d013      	beq.n	800fe26 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fdfe:	480b      	ldr	r0, [pc, #44]	; (800fe2c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fe00:	f011 f8e5 	bl	8020fce <__cxa_guard_acquire>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	bf14      	ite	ne
 800fe0a:	2301      	movne	r3, #1
 800fe0c:	2300      	moveq	r3, #0
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d008      	beq.n	800fe26 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fe14:	4806      	ldr	r0, [pc, #24]	; (800fe30 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fe16:	f000 f867 	bl	800fee8 <_ZN12FrontendHeapC1Ev>
 800fe1a:	4806      	ldr	r0, [pc, #24]	; (800fe34 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800fe1c:	f011 f920 	bl	8021060 <atexit>
 800fe20:	4802      	ldr	r0, [pc, #8]	; (800fe2c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fe22:	f011 f8e0 	bl	8020fe6 <__cxa_guard_release>
        return instance;
 800fe26:	4b02      	ldr	r3, [pc, #8]	; (800fe30 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800fe28:	4618      	mov	r0, r3
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	2001fc50 	.word	0x2001fc50
 800fe30:	2001f9cc 	.word	0x2001f9cc
 800fe34:	0800fdd1 	.word	0x0800fdd1

0800fe38 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	4a05      	ldr	r2, [pc, #20]	; (800fe58 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff fe63 	bl	800fb14 <_ZN8touchgfx7MVPHeapD1Ev>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	0802331c 	.word	0x0802331c

0800fe5c <_ZN16FrontendHeapBaseD0Ev>:
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ffe7 	bl	800fe38 <_ZN16FrontendHeapBaseD1Ev>
 800fe6a:	2114      	movs	r1, #20
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f011 f8ac 	bl	8020fca <_ZdlPvj>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 fb98 	bl	80105bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fe8c:	4a03      	ldr	r2, [pc, #12]	; (800fe9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	601a      	str	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	080232e8 	.word	0x080232e8

0800fea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 fb86 	bl	80105bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800feb0:	4a03      	ldr	r2, [pc, #12]	; (800fec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	080232b4 	.word	0x080232b4

0800fec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 fb74 	bl	80105bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fed4:	4a03      	ldr	r2, [pc, #12]	; (800fee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08023280 	.word	0x08023280

0800fee8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800fee8:	b590      	push	{r4, r7, lr}
 800feea:	b085      	sub	sp, #20
 800feec:	af02      	add	r7, sp, #8
 800feee:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f103 0114 	add.w	r1, r3, #20
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f503 7488 	add.w	r4, r3, #272	; 0x110
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f503 7394 	add.w	r3, r3, #296	; 0x128
                     app(model, *this)
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	4623      	mov	r3, r4
 800ff0e:	f7ff ff45 	bl	800fd9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800ff12:	4a18      	ldr	r2, [pc, #96]	; (800ff74 <_ZN12FrontendHeapC1Ev+0x8c>)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	3314      	adds	r3, #20
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff ffad 	bl	800fe7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	332c      	adds	r3, #44	; 0x2c
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff ffba 	bl	800fea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7ff ffc6 	bl	800fec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fdc8 	bl	800ead4 <_ZN5ModelC1Ev>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	4619      	mov	r1, r3
 800ff54:	f7fe fda8 	bl	800eaa8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff60:	4619      	mov	r1, r3
 800ff62:	4610      	mov	r0, r2
 800ff64:	f7ff ff0c 	bl	800fd80 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd90      	pop	{r4, r7, pc}
 800ff72:	bf00      	nop
 800ff74:	0802326c 	.word	0x0802326c

0800ff78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
 800ff84:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	8bbb      	ldrh	r3, [r7, #28]
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	8b3b      	ldrh	r3, [r7, #24]
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	68b9      	ldr	r1, [r7, #8]
 800ff96:	f7ff fe33 	bl	800fc00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800ff9a:	4a04      	ldr	r2, [pc, #16]	; (800ffac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	601a      	str	r2, [r3, #0]
    }
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	08023340 	.word	0x08023340

0800ffb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af02      	add	r7, sp, #8
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	603b      	str	r3, [r7, #0]
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	8bbb      	ldrh	r3, [r7, #28]
 800ffc2:	9301      	str	r3, [sp, #4]
 800ffc4:	8b3b      	ldrh	r3, [r7, #24]
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	68b9      	ldr	r1, [r7, #8]
 800ffce:	f7ff ffd3 	bl	800ff78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800ffd2:	4a04      	ldr	r2, [pc, #16]	; (800ffe4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	601a      	str	r2, [r3, #0]
    }
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	08023120 	.word	0x08023120

0800ffe8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	4a04      	ldr	r2, [pc, #16]	; (8010004 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	370c      	adds	r7, #12
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	08023108 	.word	0x08023108

08010008 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff ffe8 	bl	800ffe8 <_ZN8touchgfx15TouchControllerC1Ev>
 8010018:	4a03      	ldr	r2, [pc, #12]	; (8010028 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	080230f0 	.word	0x080230f0

0801002c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 240);

void touchgfx_init()
{
 801002c:	b590      	push	{r4, r7, lr}
 801002e:	b085      	sub	sp, #20
 8010030:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8010032:	f7fe fb3b 	bl	800e6ac <_ZN14BitmapDatabase11getInstanceEv>
 8010036:	4604      	mov	r4, r0
 8010038:	f7fe fb42 	bl	800e6c0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801003c:	4603      	mov	r3, r0
 801003e:	4619      	mov	r1, r3
 8010040:	2300      	movs	r3, #0
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	2300      	movs	r3, #0
 8010046:	2200      	movs	r2, #0
 8010048:	4620      	mov	r0, r4
 801004a:	f005 f9f9 	bl	8015440 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801004e:	4809      	ldr	r0, [pc, #36]	; (8010074 <touchgfx_init+0x48>)
 8010050:	f7ff fd30 	bl	800fab4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8010054:	2000      	movs	r0, #0
 8010056:	f7fe fc5f 	bl	800e918 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801005a:	4807      	ldr	r0, [pc, #28]	; (8010078 <touchgfx_init+0x4c>)
 801005c:	f005 f958 	bl	8015310 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8010060:	f7ff febe 	bl	800fde0 <_ZN12FrontendHeap11getInstanceEv>
 8010064:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8010066:	4805      	ldr	r0, [pc, #20]	; (801007c <touchgfx_init+0x50>)
 8010068:	f7ff fa44 	bl	800f4f4 <_ZN11TouchGFXHAL10initializeEv>
}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	2001fd14 	.word	0x2001fd14
 8010078:	20000018 	.word	0x20000018
 801007c:	2001fd18 	.word	0x2001fd18

08010080 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8010080:	b480      	push	{r7}
 8010082:	af00      	add	r7, sp, #0
}
 8010084:	bf00      	nop
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr
	...

08010090 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8010090:	b580      	push	{r7, lr}
 8010092:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8010094:	4802      	ldr	r0, [pc, #8]	; (80100a0 <touchgfx_taskEntry+0x10>)
 8010096:	f000 fd98 	bl	8010bca <_ZN8touchgfx3HAL9taskEntryEv>
}
 801009a:	bf00      	nop
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	2001fd18 	.word	0x2001fd18

080100a4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	4a10      	ldr	r2, [pc, #64]	; (80100f0 <_ZN12FrontendHeapD1Ev+0x4c>)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe fcbf 	bl	800ea3c <_ZN19FrontendApplicationD1Ev>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f827 	bl	8010118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	332c      	adds	r3, #44	; 0x2c
 80100ce:	4618      	mov	r0, r3
 80100d0:	f000 f844 	bl	801015c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	3314      	adds	r3, #20
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 f861 	bl	80101a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7ff fea9 	bl	800fe38 <_ZN16FrontendHeapBaseD1Ev>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	0802326c 	.word	0x0802326c

080100f4 <_ZN12FrontendHeapD0Ev>:
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ffd1 	bl	80100a4 <_ZN12FrontendHeapD1Ev>
 8010102:	f44f 7121 	mov.w	r1, #644	; 0x284
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f010 ff5f 	bl	8020fca <_ZdlPvj>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
	...

08010118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	4a05      	ldr	r2, [pc, #20]	; (8010138 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	f000 fa45 	bl	80105b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	08023280 	.word	0x08023280

0801013c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7ff ffe7 	bl	8010118 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801014a:	2114      	movs	r1, #20
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f010 ff3c 	bl	8020fca <_ZdlPvj>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	4a05      	ldr	r2, [pc, #20]	; (801017c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	601a      	str	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4618      	mov	r0, r3
 801016e:	f000 fa23 	bl	80105b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4618      	mov	r0, r3
 8010176:	3708      	adds	r7, #8
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	080232b4 	.word	0x080232b4

08010180 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7ff ffe7 	bl	801015c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801018e:	21e4      	movs	r1, #228	; 0xe4
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f010 ff1a 	bl	8020fca <_ZdlPvj>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	4a05      	ldr	r2, [pc, #20]	; (80101c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	601a      	str	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 fa01 	bl	80105b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	080232e8 	.word	0x080232e8

080101c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f7ff ffe7 	bl	80101a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80101d2:	2118      	movs	r1, #24
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f010 fef8 	bl	8020fca <_ZdlPvj>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	4a05      	ldr	r2, [pc, #20]	; (8010204 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7ff fcad 	bl	800fb54 <_ZN8touchgfx3LCDD1Ev>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	08023bf8 	.word	0x08023bf8

08010208 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ffe7 	bl	80101e4 <_ZN8touchgfx8LCD16bppD1Ev>
 8010216:	2178      	movs	r1, #120	; 0x78
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f010 fed6 	bl	8020fca <_ZdlPvj>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <_Z41__static_initialization_and_destruction_0ii>:
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af02      	add	r7, sp, #8
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b01      	cmp	r3, #1
 8010236:	d117      	bne.n	8010268 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801023e:	4293      	cmp	r3, r2
 8010240:	d112      	bne.n	8010268 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 8010242:	4817      	ldr	r0, [pc, #92]	; (80102a0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010244:	f7ff fee0 	bl	8010008 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8010248:	4816      	ldr	r0, [pc, #88]	; (80102a4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801024a:	f7ff fb95 	bl	800f978 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801024e:	4816      	ldr	r0, [pc, #88]	; (80102a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010250:	f008 f9f6 	bl	8018640 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 240);
 8010254:	23f0      	movs	r3, #240	; 0xf0
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	23f0      	movs	r3, #240	; 0xf0
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801025e:	4a12      	ldr	r2, [pc, #72]	; (80102a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010260:	4910      	ldr	r1, [pc, #64]	; (80102a4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010262:	4812      	ldr	r0, [pc, #72]	; (80102ac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010264:	f7ff fea4 	bl	800ffb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d113      	bne.n	8010296 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010274:	4293      	cmp	r3, r2
 8010276:	d10e      	bne.n	8010296 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010278:	480c      	ldr	r0, [pc, #48]	; (80102ac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801027a:	f7ff fa2d 	bl	800f6d8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801027e:	480c      	ldr	r0, [pc, #48]	; (80102b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010280:	f7fc fbfe 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010284:	4808      	ldr	r0, [pc, #32]	; (80102a8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010286:	f7ff ffad 	bl	80101e4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801028a:	4806      	ldr	r0, [pc, #24]	; (80102a4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801028c:	f7ff fbc8 	bl	800fa20 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8010290:	4803      	ldr	r0, [pc, #12]	; (80102a0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010292:	f7fe fd9b 	bl	800edcc <_ZN20STM32TouchControllerD1Ev>
}
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	2001fc54 	.word	0x2001fc54
 80102a4:	2001fc58 	.word	0x2001fc58
 80102a8:	2001fc9c 	.word	0x2001fc9c
 80102ac:	2001fd18 	.word	0x2001fd18
 80102b0:	20000018 	.word	0x20000018

080102b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80102bc:	2301      	movs	r3, #1
    }
 80102be:	4618      	mov	r0, r3
 80102c0:	370c      	adds	r7, #12
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr

080102ca <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80102ca:	b480      	push	{r7}
 80102cc:	b083      	sub	sp, #12
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80102d2:	230c      	movs	r3, #12
    }
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	460b      	mov	r3, r1
 80102ea:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80102ec:	887a      	ldrh	r2, [r7, #2]
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	3308      	adds	r3, #8
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	4413      	add	r3, r2
    }
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010314:	887a      	ldrh	r2, [r7, #2]
 8010316:	4613      	mov	r3, r2
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	4413      	add	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	3308      	adds	r3, #8
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	4413      	add	r3, r2
    }
 8010324:	4618      	mov	r0, r3
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010338:	2301      	movs	r3, #1
    }
 801033a:	4618      	mov	r0, r3
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010346:	b480      	push	{r7}
 8010348:	b083      	sub	sp, #12
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801034e:	23dc      	movs	r3, #220	; 0xdc
    }
 8010350:	4618      	mov	r0, r3
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	460b      	mov	r3, r1
 8010366:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010368:	887b      	ldrh	r3, [r7, #2]
 801036a:	22dc      	movs	r2, #220	; 0xdc
 801036c:	fb02 f303 	mul.w	r3, r2, r3
 8010370:	3308      	adds	r3, #8
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	4413      	add	r3, r2
    }
 8010376:	4618      	mov	r0, r3
 8010378:	370c      	adds	r7, #12
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr

08010382 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010382:	b480      	push	{r7}
 8010384:	b083      	sub	sp, #12
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	460b      	mov	r3, r1
 801038c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801038e:	887b      	ldrh	r3, [r7, #2]
 8010390:	22dc      	movs	r2, #220	; 0xdc
 8010392:	fb02 f303 	mul.w	r3, r2, r3
 8010396:	3308      	adds	r3, #8
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	4413      	add	r3, r2
    }
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80103b0:	2301      	movs	r3, #1
    }
 80103b2:	4618      	mov	r0, r3
 80103b4:	370c      	adds	r7, #12
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr

080103be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80103be:	b480      	push	{r7}
 80103c0:	b083      	sub	sp, #12
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80103c6:	2310      	movs	r3, #16
    }
 80103c8:	4618      	mov	r0, r3
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	460b      	mov	r3, r1
 80103de:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80103e0:	887b      	ldrh	r3, [r7, #2]
 80103e2:	011b      	lsls	r3, r3, #4
 80103e4:	3308      	adds	r3, #8
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	4413      	add	r3, r2
    }
 80103ea:	4618      	mov	r0, r3
 80103ec:	370c      	adds	r7, #12
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80103f6:	b480      	push	{r7}
 80103f8:	b083      	sub	sp, #12
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010402:	887b      	ldrh	r3, [r7, #2]
 8010404:	011b      	lsls	r3, r3, #4
 8010406:	3308      	adds	r3, #8
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	4413      	add	r3, r2
    }
 801040c:	4618      	mov	r0, r3
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <_GLOBAL__sub_I_touchgfx_init>:
 8010418:	b580      	push	{r7, lr}
 801041a:	af00      	add	r7, sp, #0
 801041c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010420:	2001      	movs	r0, #1
 8010422:	f7ff ff01 	bl	8010228 <_Z41__static_initialization_and_destruction_0ii>
 8010426:	bd80      	pop	{r7, pc}

08010428 <_GLOBAL__sub_D_touchgfx_init>:
 8010428:	b580      	push	{r7, lr}
 801042a:	af00      	add	r7, sp, #0
 801042c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010430:	2000      	movs	r0, #0
 8010432:	f7ff fef9 	bl	8010228 <_Z41__static_initialization_and_destruction_0ii>
 8010436:	bd80      	pop	{r7, pc}

08010438 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 240 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8010438:	b5b0      	push	{r4, r5, r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4618      	mov	r0, r3
 8010444:	f000 fbad 	bl	8010ba2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8010448:	687d      	ldr	r5, [r7, #4]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3364      	adds	r3, #100	; 0x64
 8010450:	681c      	ldr	r4, [r3, #0]
 8010452:	f002 fbc9 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 8010456:	4603      	mov	r3, r0
 8010458:	4619      	mov	r1, r3
 801045a:	4628      	mov	r0, r5
 801045c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3388      	adds	r3, #136	; 0x88
 8010466:	681c      	ldr	r4, [r3, #0]
 8010468:	2300      	movs	r3, #0
 801046a:	2200      	movs	r2, #0
 801046c:	4902      	ldr	r1, [pc, #8]	; (8010478 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 801046e:	47a0      	blx	r4
}
 8010470:	bf00      	nop
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bdb0      	pop	{r4, r5, r7, pc}
 8010478:	200000fc 	.word	0x200000fc

0801047c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
}
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
}
 80104ac:	bf00      	nop
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
}
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f000 fb4a 	bl	8010b70 <_ZN8touchgfx3HAL10beginFrameEv>
 80104dc:	4603      	mov	r3, r0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f000 fb49 	bl	8010b88 <_ZN8touchgfx3HAL8endFrameEv>
}
 80104f6:	bf00      	nop
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
	...

08010500 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8010508:	4b03      	ldr	r3, [pc, #12]	; (8010518 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 801050a:	4618      	mov	r0, r3
 801050c:	370c      	adds	r7, #12
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	200000fc 	.word	0x200000fc

0801051c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801051c:	b480      	push	{r7}
 801051e:	b083      	sub	sp, #12
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8010526:	bf00      	nop
 8010528:	370c      	adds	r7, #12
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr

08010532 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b082      	sub	sp, #8
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	4618      	mov	r0, r3
 8010542:	f000 fadf 	bl	8010b04 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8010546:	bf00      	nop
 8010548:	3708      	adds	r7, #8
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b084      	sub	sp, #16
 8010552:	af00      	add	r7, sp, #0
 8010554:	60f8      	str	r0, [r7, #12]
 8010556:	60b9      	str	r1, [r7, #8]
 8010558:	607a      	str	r2, [r7, #4]
 801055a:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	68b9      	ldr	r1, [r7, #8]
 8010564:	f000 fc39 	bl	8010dda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8010568:	4603      	mov	r3, r0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010572:	8880      	ldrh	r0, [r0, #4]
 8010574:	4770      	bx	lr

08010576 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010576:	b570      	push	{r4, r5, r6, lr}
 8010578:	6803      	ldr	r3, [r0, #0]
 801057a:	4605      	mov	r5, r0
 801057c:	460c      	mov	r4, r1
 801057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010580:	2100      	movs	r1, #0
 8010582:	4798      	blx	r3
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	4606      	mov	r6, r0
 8010588:	6a1b      	ldr	r3, [r3, #32]
 801058a:	4628      	mov	r0, r5
 801058c:	4798      	blx	r3
 801058e:	1ba4      	subs	r4, r4, r6
 8010590:	b2a4      	uxth	r4, r4
 8010592:	fbb4 f0f0 	udiv	r0, r4, r0
 8010596:	bd70      	pop	{r4, r5, r6, pc}

08010598 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010598:	2300      	movs	r3, #0
 801059a:	8083      	strh	r3, [r0, #4]
 801059c:	4770      	bx	lr

0801059e <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801059e:	b510      	push	{r4, lr}
 80105a0:	4604      	mov	r4, r0
 80105a2:	6803      	ldr	r3, [r0, #0]
 80105a4:	8881      	ldrh	r1, [r0, #4]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a8:	4798      	blx	r3
 80105aa:	88a3      	ldrh	r3, [r4, #4]
 80105ac:	3301      	adds	r3, #1
 80105ae:	80a3      	strh	r3, [r4, #4]
 80105b0:	bd10      	pop	{r4, pc}

080105b2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80105b2:	6803      	ldr	r3, [r0, #0]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b6:	4718      	bx	r3

080105b8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80105b8:	4770      	bx	lr
	...

080105bc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80105bc:	4a02      	ldr	r2, [pc, #8]	; (80105c8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80105be:	6002      	str	r2, [r0, #0]
 80105c0:	2200      	movs	r2, #0
 80105c2:	8082      	strh	r2, [r0, #4]
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	08023418 	.word	0x08023418

080105cc <_ZN8touchgfx9Container13getFirstChildEv>:
 80105cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80105ce:	4770      	bx	lr

080105d0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80105d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80105d2:	2000      	movs	r0, #0
 80105d4:	b12b      	cbz	r3, 80105e2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80105d6:	b920      	cbnz	r0, 80105e2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80105d8:	1a5a      	subs	r2, r3, r1
 80105da:	4250      	negs	r0, r2
 80105dc:	4150      	adcs	r0, r2
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	e7f8      	b.n	80105d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80105e2:	4770      	bx	lr

080105e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80105e4:	2300      	movs	r3, #0
 80105e6:	6148      	str	r0, [r1, #20]
 80105e8:	618b      	str	r3, [r1, #24]
 80105ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80105ec:	b913      	cbnz	r3, 80105f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80105ee:	6281      	str	r1, [r0, #40]	; 0x28
 80105f0:	4770      	bx	lr
 80105f2:	4613      	mov	r3, r2
 80105f4:	699a      	ldr	r2, [r3, #24]
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	d1fb      	bne.n	80105f2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80105fa:	6199      	str	r1, [r3, #24]
 80105fc:	4770      	bx	lr

080105fe <_ZN8touchgfx9Container9removeAllEv>:
 80105fe:	2200      	movs	r2, #0
 8010600:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010602:	b123      	cbz	r3, 801060e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010604:	6999      	ldr	r1, [r3, #24]
 8010606:	6281      	str	r1, [r0, #40]	; 0x28
 8010608:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801060c:	e7f8      	b.n	8010600 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801060e:	4770      	bx	lr

08010610 <_ZN8touchgfx9Container6unlinkEv>:
 8010610:	2300      	movs	r3, #0
 8010612:	6283      	str	r3, [r0, #40]	; 0x28
 8010614:	4770      	bx	lr

08010616 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010616:	2200      	movs	r2, #0
 8010618:	8002      	strh	r2, [r0, #0]
 801061a:	8042      	strh	r2, [r0, #2]
 801061c:	8082      	strh	r2, [r0, #4]
 801061e:	80c2      	strh	r2, [r0, #6]
 8010620:	4770      	bx	lr

08010622 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8010622:	b570      	push	{r4, r5, r6, lr}
 8010624:	460d      	mov	r5, r1
 8010626:	4616      	mov	r6, r2
 8010628:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801062a:	b13c      	cbz	r4, 801063c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	4620      	mov	r0, r4
 8010630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010632:	4632      	mov	r2, r6
 8010634:	4629      	mov	r1, r5
 8010636:	4798      	blx	r3
 8010638:	69a4      	ldr	r4, [r4, #24]
 801063a:	e7f6      	b.n	801062a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801063c:	bd70      	pop	{r4, r5, r6, pc}

0801063e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801063e:	b538      	push	{r3, r4, r5, lr}
 8010640:	460d      	mov	r5, r1
 8010642:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010644:	b134      	cbz	r4, 8010654 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010646:	682b      	ldr	r3, [r5, #0]
 8010648:	4621      	mov	r1, r4
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	4628      	mov	r0, r5
 801064e:	4798      	blx	r3
 8010650:	69a4      	ldr	r4, [r4, #24]
 8010652:	e7f7      	b.n	8010644 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010654:	bd38      	pop	{r3, r4, r5, pc}

08010656 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010656:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010658:	b19b      	cbz	r3, 8010682 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801065a:	428b      	cmp	r3, r1
 801065c:	d109      	bne.n	8010672 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801065e:	2100      	movs	r1, #0
 8010660:	699a      	ldr	r2, [r3, #24]
 8010662:	6159      	str	r1, [r3, #20]
 8010664:	6282      	str	r2, [r0, #40]	; 0x28
 8010666:	b902      	cbnz	r2, 801066a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010668:	4770      	bx	lr
 801066a:	6199      	str	r1, [r3, #24]
 801066c:	4770      	bx	lr
 801066e:	4613      	mov	r3, r2
 8010670:	b13a      	cbz	r2, 8010682 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010672:	699a      	ldr	r2, [r3, #24]
 8010674:	428a      	cmp	r2, r1
 8010676:	d1fa      	bne.n	801066e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010678:	698a      	ldr	r2, [r1, #24]
 801067a:	619a      	str	r2, [r3, #24]
 801067c:	2300      	movs	r3, #0
 801067e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010682:	4770      	bx	lr

08010684 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010684:	b410      	push	{r4}
 8010686:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010688:	4604      	mov	r4, r0
 801068a:	b92b      	cbnz	r3, 8010698 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801068c:	6803      	ldr	r3, [r0, #0]
 801068e:	4611      	mov	r1, r2
 8010690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010696:	4718      	bx	r3
 8010698:	b941      	cbnz	r1, 80106ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801069a:	6193      	str	r3, [r2, #24]
 801069c:	6282      	str	r2, [r0, #40]	; 0x28
 801069e:	6154      	str	r4, [r2, #20]
 80106a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	4603      	mov	r3, r0
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d0f9      	beq.n	80106a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80106ac:	4299      	cmp	r1, r3
 80106ae:	6998      	ldr	r0, [r3, #24]
 80106b0:	d1f9      	bne.n	80106a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80106b2:	6190      	str	r0, [r2, #24]
 80106b4:	618a      	str	r2, [r1, #24]
 80106b6:	e7f2      	b.n	801069e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080106b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80106b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106bc:	461f      	mov	r7, r3
 80106be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80106c2:	460d      	mov	r5, r1
 80106c4:	4616      	mov	r6, r2
 80106c6:	b103      	cbz	r3, 80106ca <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80106c8:	6038      	str	r0, [r7, #0]
 80106ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80106cc:	b314      	cbz	r4, 8010714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80106ce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80106d2:	b1eb      	cbz	r3, 8010710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80106d8:	428d      	cmp	r5, r1
 80106da:	db19      	blt.n	8010710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106dc:	8923      	ldrh	r3, [r4, #8]
 80106de:	b289      	uxth	r1, r1
 80106e0:	440b      	add	r3, r1
 80106e2:	b21b      	sxth	r3, r3
 80106e4:	429d      	cmp	r5, r3
 80106e6:	da13      	bge.n	8010710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106e8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80106ec:	4296      	cmp	r6, r2
 80106ee:	db0f      	blt.n	8010710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106f0:	8963      	ldrh	r3, [r4, #10]
 80106f2:	b292      	uxth	r2, r2
 80106f4:	4413      	add	r3, r2
 80106f6:	b21b      	sxth	r3, r3
 80106f8:	429e      	cmp	r6, r3
 80106fa:	da09      	bge.n	8010710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	1ab2      	subs	r2, r6, r2
 8010700:	1a69      	subs	r1, r5, r1
 8010702:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8010706:	b212      	sxth	r2, r2
 8010708:	463b      	mov	r3, r7
 801070a:	b209      	sxth	r1, r1
 801070c:	4620      	mov	r0, r4
 801070e:	47c0      	blx	r8
 8010710:	69a4      	ldr	r4, [r4, #24]
 8010712:	e7db      	b.n	80106cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010718 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	4c6c      	ldr	r4, [pc, #432]	; (80108d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 801071e:	b0a1      	sub	sp, #132	; 0x84
 8010720:	6824      	ldr	r4, [r4, #0]
 8010722:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8010724:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8010728:	2400      	movs	r4, #0
 801072a:	802c      	strh	r4, [r5, #0]
 801072c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801072e:	4606      	mov	r6, r0
 8010730:	802c      	strh	r4, [r5, #0]
 8010732:	601c      	str	r4, [r3, #0]
 8010734:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010738:	9303      	str	r3, [sp, #12]
 801073a:	f7ff ffbd 	bl	80106b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801073e:	f1b9 0f03 	cmp.w	r9, #3
 8010742:	f340 80bf 	ble.w	80108c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8010746:	4631      	mov	r1, r6
 8010748:	a80c      	add	r0, sp, #48	; 0x30
 801074a:	f003 fb2d 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801074e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8010752:	9306      	str	r3, [sp, #24]
 8010754:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010758:	9307      	str	r3, [sp, #28]
 801075a:	9b03      	ldr	r3, [sp, #12]
 801075c:	f8d3 a000 	ldr.w	sl, [r3]
 8010760:	f1ba 0f00 	cmp.w	sl, #0
 8010764:	f000 80b1 	beq.w	80108ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8010768:	4651      	mov	r1, sl
 801076a:	a810      	add	r0, sp, #64	; 0x40
 801076c:	f003 fb1c 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010770:	2002      	movs	r0, #2
 8010772:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8010776:	9b01      	ldr	r3, [sp, #4]
 8010778:	fb91 f1f0 	sdiv	r1, r1, r0
 801077c:	9a06      	ldr	r2, [sp, #24]
 801077e:	189d      	adds	r5, r3, r2
 8010780:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8010784:	9a07      	ldr	r2, [sp, #28]
 8010786:	4419      	add	r1, r3
 8010788:	9b02      	ldr	r3, [sp, #8]
 801078a:	1a6d      	subs	r5, r5, r1
 801078c:	4413      	add	r3, r2
 801078e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010792:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010796:	fb92 f2f0 	sdiv	r2, r2, r0
 801079a:	440a      	add	r2, r1
 801079c:	1a9b      	subs	r3, r3, r2
 801079e:	435b      	muls	r3, r3
 80107a0:	fb05 3505 	mla	r5, r5, r5, r3
 80107a4:	4f4b      	ldr	r7, [pc, #300]	; (80108d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80107a6:	ac10      	add	r4, sp, #64	; 0x40
 80107a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80107aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80107ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80107b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80107b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80107bc:	2303      	movs	r3, #3
 80107be:	f1b9 0f0c 	cmp.w	r9, #12
 80107c2:	bfda      	itte	le
 80107c4:	f109 32ff 	addle.w	r2, r9, #4294967295
 80107c8:	fb92 f8f3 	sdivle	r8, r2, r3
 80107cc:	4698      	movgt	r8, r3
 80107ce:	2400      	movs	r4, #0
 80107d0:	f8cd 9000 	str.w	r9, [sp]
 80107d4:	1c63      	adds	r3, r4, #1
 80107d6:	9308      	str	r3, [sp, #32]
 80107d8:	9b00      	ldr	r3, [sp, #0]
 80107da:	f04f 0b00 	mov.w	fp, #0
 80107de:	fb93 f3f8 	sdiv	r3, r3, r8
 80107e2:	f004 0401 	and.w	r4, r4, #1
 80107e6:	aa10      	add	r2, sp, #64	; 0x40
 80107e8:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	3404      	adds	r4, #4
 80107f0:	9304      	str	r3, [sp, #16]
 80107f2:	9a04      	ldr	r2, [sp, #16]
 80107f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80107f8:	fb13 f302 	smulbb	r3, r3, r2
 80107fc:	9a01      	ldr	r2, [sp, #4]
 80107fe:	b29b      	uxth	r3, r3
 8010800:	1899      	adds	r1, r3, r2
 8010802:	9305      	str	r3, [sp, #20]
 8010804:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010808:	b209      	sxth	r1, r1
 801080a:	4299      	cmp	r1, r3
 801080c:	db4d      	blt.n	80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801080e:	8932      	ldrh	r2, [r6, #8]
 8010810:	4413      	add	r3, r2
 8010812:	b21b      	sxth	r3, r3
 8010814:	4299      	cmp	r1, r3
 8010816:	da48      	bge.n	80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010818:	9b04      	ldr	r3, [sp, #16]
 801081a:	6827      	ldr	r7, [r4, #0]
 801081c:	fb17 f703 	smulbb	r7, r7, r3
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	b2bf      	uxth	r7, r7
 8010824:	18fa      	adds	r2, r7, r3
 8010826:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801082a:	b212      	sxth	r2, r2
 801082c:	429a      	cmp	r2, r3
 801082e:	db3c      	blt.n	80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010830:	8970      	ldrh	r0, [r6, #10]
 8010832:	4403      	add	r3, r0
 8010834:	b21b      	sxth	r3, r3
 8010836:	429a      	cmp	r2, r3
 8010838:	da37      	bge.n	80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801083a:	2300      	movs	r3, #0
 801083c:	4630      	mov	r0, r6
 801083e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010840:	ab0b      	add	r3, sp, #44	; 0x2c
 8010842:	f7ff ff39 	bl	80106b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010848:	b37a      	cbz	r2, 80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801084a:	4552      	cmp	r2, sl
 801084c:	d02d      	beq.n	80108aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801084e:	4611      	mov	r1, r2
 8010850:	a80e      	add	r0, sp, #56	; 0x38
 8010852:	9209      	str	r2, [sp, #36]	; 0x24
 8010854:	f003 faa8 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010858:	f04f 0e02 	mov.w	lr, #2
 801085c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8010860:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8010864:	fb91 f1fe 	sdiv	r1, r1, lr
 8010868:	fb9c fcfe 	sdiv	ip, ip, lr
 801086c:	9a06      	ldr	r2, [sp, #24]
 801086e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	4401      	add	r1, r0
 8010876:	4413      	add	r3, r2
 8010878:	1a58      	subs	r0, r3, r1
 801087a:	9a07      	ldr	r2, [sp, #28]
 801087c:	9b02      	ldr	r3, [sp, #8]
 801087e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010882:	4413      	add	r3, r2
 8010884:	448c      	add	ip, r1
 8010886:	eba3 030c 	sub.w	r3, r3, ip
 801088a:	435b      	muls	r3, r3
 801088c:	fb00 3300 	mla	r3, r0, r0, r3
 8010890:	42ab      	cmp	r3, r5
 8010892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010894:	d208      	bcs.n	80108a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8010896:	461d      	mov	r5, r3
 8010898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801089a:	9803      	ldr	r0, [sp, #12]
 801089c:	6001      	str	r1, [r0, #0]
 801089e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80108a0:	9805      	ldr	r0, [sp, #20]
 80108a2:	8008      	strh	r0, [r1, #0]
 80108a4:	992b      	ldr	r1, [sp, #172]	; 0xac
 80108a6:	800f      	strh	r7, [r1, #0]
 80108a8:	4692      	mov	sl, r2
 80108aa:	f10b 0b01 	add.w	fp, fp, #1
 80108ae:	f1bb 0f04 	cmp.w	fp, #4
 80108b2:	f104 0408 	add.w	r4, r4, #8
 80108b6:	d19c      	bne.n	80107f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 80108b8:	9b00      	ldr	r3, [sp, #0]
 80108ba:	9c08      	ldr	r4, [sp, #32]
 80108bc:	444b      	add	r3, r9
 80108be:	4544      	cmp	r4, r8
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	d187      	bne.n	80107d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 80108c4:	b021      	add	sp, #132	; 0x84
 80108c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ca:	f04f 35ff 	mov.w	r5, #4294967295
 80108ce:	e769      	b.n	80107a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80108d0:	2001fda0 	.word	0x2001fda0
 80108d4:	08022bb8 	.word	0x08022bb8

080108d8 <_ZN8touchgfx4RectaNERKS0_>:
 80108d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108dc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80108e0:	888c      	ldrh	r4, [r1, #4]
 80108e2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80108e6:	443c      	add	r4, r7
 80108e8:	b2a4      	uxth	r4, r4
 80108ea:	fa0f f884 	sxth.w	r8, r4
 80108ee:	45c1      	cmp	r9, r8
 80108f0:	da2f      	bge.n	8010952 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80108f2:	8882      	ldrh	r2, [r0, #4]
 80108f4:	444a      	add	r2, r9
 80108f6:	b292      	uxth	r2, r2
 80108f8:	fa0f fe82 	sxth.w	lr, r2
 80108fc:	4577      	cmp	r7, lr
 80108fe:	da28      	bge.n	8010952 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010900:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010904:	88cb      	ldrh	r3, [r1, #6]
 8010906:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801090a:	442b      	add	r3, r5
 801090c:	b21b      	sxth	r3, r3
 801090e:	429e      	cmp	r6, r3
 8010910:	da1f      	bge.n	8010952 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010912:	88c3      	ldrh	r3, [r0, #6]
 8010914:	4433      	add	r3, r6
 8010916:	b29b      	uxth	r3, r3
 8010918:	fa0f fc83 	sxth.w	ip, r3
 801091c:	4565      	cmp	r5, ip
 801091e:	da18      	bge.n	8010952 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010920:	454f      	cmp	r7, r9
 8010922:	bfb8      	it	lt
 8010924:	464f      	movlt	r7, r9
 8010926:	42b5      	cmp	r5, r6
 8010928:	bfb8      	it	lt
 801092a:	4635      	movlt	r5, r6
 801092c:	45f0      	cmp	r8, lr
 801092e:	bfd8      	it	le
 8010930:	4622      	movle	r2, r4
 8010932:	1bd2      	subs	r2, r2, r7
 8010934:	8082      	strh	r2, [r0, #4]
 8010936:	884a      	ldrh	r2, [r1, #2]
 8010938:	88c9      	ldrh	r1, [r1, #6]
 801093a:	8007      	strh	r7, [r0, #0]
 801093c:	440a      	add	r2, r1
 801093e:	b292      	uxth	r2, r2
 8010940:	b211      	sxth	r1, r2
 8010942:	458c      	cmp	ip, r1
 8010944:	bfa8      	it	ge
 8010946:	4613      	movge	r3, r2
 8010948:	1b5b      	subs	r3, r3, r5
 801094a:	80c3      	strh	r3, [r0, #6]
 801094c:	8045      	strh	r5, [r0, #2]
 801094e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010952:	2300      	movs	r3, #0
 8010954:	8003      	strh	r3, [r0, #0]
 8010956:	8043      	strh	r3, [r0, #2]
 8010958:	8083      	strh	r3, [r0, #4]
 801095a:	80c3      	strh	r3, [r0, #6]
 801095c:	e7f7      	b.n	801094e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801095e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801095e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	dd06      	ble.n	8010974 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010966:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801096a:	2800      	cmp	r0, #0
 801096c:	bfcc      	ite	gt
 801096e:	2000      	movgt	r0, #0
 8010970:	2001      	movle	r0, #1
 8010972:	4770      	bx	lr
 8010974:	2001      	movs	r0, #1
 8010976:	4770      	bx	lr

08010978 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010978:	2300      	movs	r3, #0
 801097a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801097e:	4604      	mov	r4, r0
 8010980:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010982:	8003      	strh	r3, [r0, #0]
 8010984:	8043      	strh	r3, [r0, #2]
 8010986:	8083      	strh	r3, [r0, #4]
 8010988:	80c3      	strh	r3, [r0, #6]
 801098a:	2d00      	cmp	r5, #0
 801098c:	d040      	beq.n	8010a10 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801098e:	1d28      	adds	r0, r5, #4
 8010990:	f7ff ffe5 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010994:	b988      	cbnz	r0, 80109ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010996:	4620      	mov	r0, r4
 8010998:	f7ff ffe1 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 801099c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80109a0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80109a4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80109a8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80109ac:	b138      	cbz	r0, 80109be <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80109ae:	8022      	strh	r2, [r4, #0]
 80109b0:	8063      	strh	r3, [r4, #2]
 80109b2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80109b6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80109ba:	69ad      	ldr	r5, [r5, #24]
 80109bc:	e7e5      	b.n	801098a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80109be:	f9b4 0000 	ldrsh.w	r0, [r4]
 80109c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80109c6:	4290      	cmp	r0, r2
 80109c8:	4607      	mov	r7, r0
 80109ca:	bfa8      	it	ge
 80109cc:	4617      	movge	r7, r2
 80109ce:	4299      	cmp	r1, r3
 80109d0:	460e      	mov	r6, r1
 80109d2:	bfa8      	it	ge
 80109d4:	461e      	movge	r6, r3
 80109d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80109da:	4472      	add	r2, lr
 80109dc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80109e0:	4440      	add	r0, r8
 80109e2:	4471      	add	r1, lr
 80109e4:	4463      	add	r3, ip
 80109e6:	b200      	sxth	r0, r0
 80109e8:	b212      	sxth	r2, r2
 80109ea:	b209      	sxth	r1, r1
 80109ec:	b21b      	sxth	r3, r3
 80109ee:	4290      	cmp	r0, r2
 80109f0:	bfac      	ite	ge
 80109f2:	ebc7 0200 	rsbge	r2, r7, r0
 80109f6:	ebc7 0202 	rsblt	r2, r7, r2
 80109fa:	4299      	cmp	r1, r3
 80109fc:	bfac      	ite	ge
 80109fe:	ebc6 0301 	rsbge	r3, r6, r1
 8010a02:	ebc6 0303 	rsblt	r3, r6, r3
 8010a06:	8027      	strh	r7, [r4, #0]
 8010a08:	8066      	strh	r6, [r4, #2]
 8010a0a:	80a2      	strh	r2, [r4, #4]
 8010a0c:	80e3      	strh	r3, [r4, #6]
 8010a0e:	e7d4      	b.n	80109ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010a10:	4620      	mov	r0, r4
 8010a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a16 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010a16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010a1a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010a1e:	b383      	cbz	r3, 8010a82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010a20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010a22:	b374      	cbz	r4, 8010a82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010a24:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010a28:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010a2c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010a30:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010a34:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010a38:	b303      	cbz	r3, 8010a7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010a3a:	4668      	mov	r0, sp
 8010a3c:	1d21      	adds	r1, r4, #4
 8010a3e:	f8ad 5000 	strh.w	r5, [sp]
 8010a42:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010a46:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010a4a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010a4e:	f7ff ff43 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8010a52:	4668      	mov	r0, sp
 8010a54:	f7ff ff83 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a58:	b980      	cbnz	r0, 8010a7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010a5a:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a5e:	88a2      	ldrh	r2, [r4, #4]
 8010a60:	4669      	mov	r1, sp
 8010a62:	1a9b      	subs	r3, r3, r2
 8010a64:	f8ad 3000 	strh.w	r3, [sp]
 8010a68:	88e2      	ldrh	r2, [r4, #6]
 8010a6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a6e:	4620      	mov	r0, r4
 8010a70:	1a9b      	subs	r3, r3, r2
 8010a72:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	4798      	blx	r3
 8010a7c:	69a4      	ldr	r4, [r4, #24]
 8010a7e:	2c00      	cmp	r4, #0
 8010a80:	d1d8      	bne.n	8010a34 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010a82:	b002      	add	sp, #8
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a8a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010a8e:	460d      	mov	r5, r1
 8010a90:	4616      	mov	r6, r2
 8010a92:	b323      	cbz	r3, 8010ade <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010a94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010a96:	b314      	cbz	r4, 8010ade <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010a98:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010a9c:	b1eb      	cbz	r3, 8010ada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010a9e:	466b      	mov	r3, sp
 8010aa0:	6828      	ldr	r0, [r5, #0]
 8010aa2:	6869      	ldr	r1, [r5, #4]
 8010aa4:	c303      	stmia	r3!, {r0, r1}
 8010aa6:	4668      	mov	r0, sp
 8010aa8:	1d21      	adds	r1, r4, #4
 8010aaa:	f7ff ff15 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8010aae:	4668      	mov	r0, sp
 8010ab0:	f7ff ff55 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010ab4:	b988      	cbnz	r0, 8010ada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010ab6:	f8bd 3000 	ldrh.w	r3, [sp]
 8010aba:	88a2      	ldrh	r2, [r4, #4]
 8010abc:	4669      	mov	r1, sp
 8010abe:	1a9b      	subs	r3, r3, r2
 8010ac0:	f8ad 3000 	strh.w	r3, [sp]
 8010ac4:	88e2      	ldrh	r2, [r4, #6]
 8010ac6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010aca:	4620      	mov	r0, r4
 8010acc:	1a9b      	subs	r3, r3, r2
 8010ace:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad8:	4798      	blx	r3
 8010ada:	69a4      	ldr	r4, [r4, #24]
 8010adc:	e7db      	b.n	8010a96 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010ade:	b002      	add	sp, #8
 8010ae0:	bd70      	pop	{r4, r5, r6, pc}

08010ae2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010ae2:	b513      	push	{r0, r1, r4, lr}
 8010ae4:	6803      	ldr	r3, [r0, #0]
 8010ae6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8010aea:	2300      	movs	r3, #0
 8010aec:	e9cd 3300 	strd	r3, r3, [sp]
 8010af0:	466b      	mov	r3, sp
 8010af2:	47a0      	blx	r4
 8010af4:	b002      	add	sp, #8
 8010af6:	bd10      	pop	{r4, pc}

08010af8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010af8:	2301      	movs	r3, #1
 8010afa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010afe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010b02:	4770      	bx	lr

08010b04 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010b04:	2301      	movs	r3, #1
 8010b06:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010b0a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010b0e:	4770      	bx	lr

08010b10 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010b10:	2201      	movs	r2, #1
 8010b12:	6843      	ldr	r3, [r0, #4]
 8010b14:	725a      	strb	r2, [r3, #9]
 8010b16:	6840      	ldr	r0, [r0, #4]
 8010b18:	6803      	ldr	r3, [r0, #0]
 8010b1a:	691b      	ldr	r3, [r3, #16]
 8010b1c:	4718      	bx	r3

08010b1e <_ZN8touchgfx3HAL8flushDMAEv>:
 8010b1e:	6840      	ldr	r0, [r0, #4]
 8010b20:	6803      	ldr	r3, [r0, #0]
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	4718      	bx	r3

08010b26 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010b26:	b530      	push	{r4, r5, lr}
 8010b28:	b08b      	sub	sp, #44	; 0x2c
 8010b2a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8010b2e:	6804      	ldr	r4, [r0, #0]
 8010b30:	9509      	str	r5, [sp, #36]	; 0x24
 8010b32:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010b36:	9508      	str	r5, [sp, #32]
 8010b38:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8010b3c:	9507      	str	r5, [sp, #28]
 8010b3e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8010b42:	9506      	str	r5, [sp, #24]
 8010b44:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8010b48:	9505      	str	r5, [sp, #20]
 8010b4a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8010b4e:	9504      	str	r5, [sp, #16]
 8010b50:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8010b54:	9503      	str	r5, [sp, #12]
 8010b56:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010b5a:	9502      	str	r5, [sp, #8]
 8010b5c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010b60:	e9cd 3500 	strd	r3, r5, [sp]
 8010b64:	4613      	mov	r3, r2
 8010b66:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010b68:	2200      	movs	r2, #0
 8010b6a:	47a0      	blx	r4
 8010b6c:	b00b      	add	sp, #44	; 0x2c
 8010b6e:	bd30      	pop	{r4, r5, pc}

08010b70 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010b70:	4b04      	ldr	r3, [pc, #16]	; (8010b84 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	b123      	cbz	r3, 8010b80 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010b76:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010b7a:	f080 0001 	eor.w	r0, r0, #1
 8010b7e:	4770      	bx	lr
 8010b80:	2001      	movs	r0, #1
 8010b82:	4770      	bx	lr
 8010b84:	2001fd9e 	.word	0x2001fd9e

08010b88 <_ZN8touchgfx3HAL8endFrameEv>:
 8010b88:	b510      	push	{r4, lr}
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	6840      	ldr	r0, [r0, #4]
 8010b8e:	6803      	ldr	r3, [r0, #0]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	4798      	blx	r3
 8010b94:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8010b98:	b113      	cbz	r3, 8010ba0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010ba0:	bd10      	pop	{r4, pc}

08010ba2 <_ZN8touchgfx3HAL10initializeEv>:
 8010ba2:	b510      	push	{r4, lr}
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	f7fe fdb9 	bl	800f71c <_ZN8touchgfx10OSWrappers10initializeEv>
 8010baa:	f7fe f931 	bl	800ee10 <_ZN8touchgfx4GPIO4initEv>
 8010bae:	6860      	ldr	r0, [r4, #4]
 8010bb0:	6803      	ldr	r3, [r0, #0]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	4798      	blx	r3
 8010bb6:	68e0      	ldr	r0, [r4, #12]
 8010bb8:	6803      	ldr	r3, [r0, #0]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	4798      	blx	r3
 8010bbe:	6823      	ldr	r3, [r4, #0]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bc8:	4718      	bx	r3

08010bca <_ZN8touchgfx3HAL9taskEntryEv>:
 8010bca:	4604      	mov	r4, r0
 8010bcc:	b508      	push	{r3, lr}
 8010bce:	6803      	ldr	r3, [r0, #0]
 8010bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd4:	4798      	blx	r3
 8010bd6:	6823      	ldr	r3, [r4, #0]
 8010bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bda:	4620      	mov	r0, r4
 8010bdc:	4798      	blx	r3
 8010bde:	f7fe fe13 	bl	800f808 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8010be2:	6823      	ldr	r3, [r4, #0]
 8010be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be6:	e7f8      	b.n	8010bda <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08010be8 <_ZN8touchgfx3HAL4tickEv>:
 8010be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010bea:	6803      	ldr	r3, [r0, #0]
 8010bec:	4604      	mov	r4, r0
 8010bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010bf2:	4798      	blx	r3
 8010bf4:	4d59      	ldr	r5, [pc, #356]	; (8010d5c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	f000 8095 	beq.w	8010d26 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010bfc:	2600      	movs	r6, #0
 8010bfe:	2001      	movs	r0, #1
 8010c00:	f7fe f90e 	bl	800ee20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010c04:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8010c08:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8010c0c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010c10:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8010c14:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8010c18:	b133      	cbz	r3, 8010c28 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010c22:	4798      	blx	r3
 8010c24:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8010c28:	2601      	movs	r6, #1
 8010c2a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8010c2e:	6862      	ldr	r2, [r4, #4]
 8010c30:	f083 0301 	eor.w	r3, r3, #1
 8010c34:	7253      	strb	r3, [r2, #9]
 8010c36:	702e      	strb	r6, [r5, #0]
 8010c38:	f001 ffd6 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 8010c3c:	6803      	ldr	r3, [r0, #0]
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c40:	4798      	blx	r3
 8010c42:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010c46:	b90b      	cbnz	r3, 8010c4c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010c48:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8010c4c:	f001 ffcc 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 8010c50:	6803      	ldr	r3, [r0, #0]
 8010c52:	695b      	ldr	r3, [r3, #20]
 8010c54:	4798      	blx	r3
 8010c56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c58:	6803      	ldr	r3, [r0, #0]
 8010c5a:	691b      	ldr	r3, [r3, #16]
 8010c5c:	4798      	blx	r3
 8010c5e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010c62:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8010c66:	3b01      	subs	r3, #1
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010c6e:	b10a      	cbz	r2, 8010c74 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1eb      	bne.n	8010c4c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010c74:	4a3a      	ldr	r2, [pc, #232]	; (8010d60 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010c76:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8010c7a:	7813      	ldrb	r3, [r2, #0]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	b25b      	sxtb	r3, r3
 8010c80:	4299      	cmp	r1, r3
 8010c82:	7013      	strb	r3, [r2, #0]
 8010c84:	dc10      	bgt.n	8010ca8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010c86:	2300      	movs	r3, #0
 8010c88:	68e0      	ldr	r0, [r4, #12]
 8010c8a:	7013      	strb	r3, [r2, #0]
 8010c8c:	6803      	ldr	r3, [r0, #0]
 8010c8e:	aa03      	add	r2, sp, #12
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	a902      	add	r1, sp, #8
 8010c94:	4798      	blx	r3
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d050      	beq.n	8010d3e <_ZN8touchgfx3HAL4tickEv+0x156>
 8010c9c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010ca0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	4798      	blx	r3
 8010ca8:	2300      	movs	r3, #0
 8010caa:	6960      	ldr	r0, [r4, #20]
 8010cac:	f88d 3007 	strb.w	r3, [sp, #7]
 8010cb0:	b158      	cbz	r0, 8010cca <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	f10d 0107 	add.w	r1, sp, #7
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	4798      	blx	r3
 8010cbc:	b128      	cbz	r0, 8010cca <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cc0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010cc4:	6803      	ldr	r3, [r0, #0]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	4798      	blx	r3
 8010cca:	f104 001c 	add.w	r0, r4, #28
 8010cce:	f010 f8c7 	bl	8020e60 <_ZN8touchgfx8Gestures4tickEv>
 8010cd2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8010cd6:	b30b      	cbz	r3, 8010d1c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010cd8:	6920      	ldr	r0, [r4, #16]
 8010cda:	6803      	ldr	r3, [r0, #0]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	4798      	blx	r3
 8010ce0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	b903      	cbnz	r3, 8010ce8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010ce6:	6720      	str	r0, [r4, #112]	; 0x70
 8010ce8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cea:	4a1e      	ldr	r2, [pc, #120]	; (8010d64 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010cec:	1af3      	subs	r3, r6, r3
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d914      	bls.n	8010d1c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010cf2:	6920      	ldr	r0, [r4, #16]
 8010cf4:	6803      	ldr	r3, [r0, #0]
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	4798      	blx	r3
 8010cfa:	2264      	movs	r2, #100	; 0x64
 8010cfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cfe:	1af3      	subs	r3, r6, r3
 8010d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d04:	fbb0 f0f3 	udiv	r0, r0, r3
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	dc1d      	bgt.n	8010d48 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010d0c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8010d10:	6920      	ldr	r0, [r4, #16]
 8010d12:	2100      	movs	r1, #0
 8010d14:	6803      	ldr	r3, [r0, #0]
 8010d16:	69db      	ldr	r3, [r3, #28]
 8010d18:	4798      	blx	r3
 8010d1a:	6726      	str	r6, [r4, #112]	; 0x70
 8010d1c:	f001 ff64 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 8010d20:	6803      	ldr	r3, [r0, #0]
 8010d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d24:	4798      	blx	r3
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010d2e:	4798      	blx	r3
 8010d30:	2001      	movs	r0, #1
 8010d32:	f7fe f891 	bl	800ee58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010d36:	2300      	movs	r3, #0
 8010d38:	702b      	strb	r3, [r5, #0]
 8010d3a:	b004      	add	sp, #16
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
 8010d3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010d42:	4620      	mov	r0, r4
 8010d44:	4798      	blx	r3
 8010d46:	e7af      	b.n	8010ca8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010d48:	2863      	cmp	r0, #99	; 0x63
 8010d4a:	bfcb      	itete	gt
 8010d4c:	2300      	movgt	r3, #0
 8010d4e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8010d52:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8010d56:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8010d5a:	e7d9      	b.n	8010d10 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010d5c:	2001fda4 	.word	0x2001fda4
 8010d60:	2001fda5 	.word	0x2001fda5
 8010d64:	05f5e100 	.word	0x05f5e100

08010d68 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010d68:	f7fe bd1a 	b.w	800f7a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010d6c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010d6c:	6581      	str	r1, [r0, #88]	; 0x58
 8010d6e:	301c      	adds	r0, #28
 8010d70:	f010 b874 	b.w	8020e5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010d74 <_ZN8touchgfx3HAL5touchEll>:
 8010d74:	b530      	push	{r4, r5, lr}
 8010d76:	4604      	mov	r4, r0
 8010d78:	b087      	sub	sp, #28
 8010d7a:	a804      	add	r0, sp, #16
 8010d7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010d80:	f001 fd3c 	bl	80127fc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010d84:	9b04      	ldr	r3, [sp, #16]
 8010d86:	a906      	add	r1, sp, #24
 8010d88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010d8c:	9b05      	ldr	r3, [sp, #20]
 8010d8e:	a803      	add	r0, sp, #12
 8010d90:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010d94:	f001 fd84 	bl	80128a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010d98:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8010d9c:	f104 001c 	add.w	r0, r4, #28
 8010da0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010da4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010da8:	b189      	cbz	r1, 8010dce <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010daa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010db4:	4613      	mov	r3, r2
 8010db6:	462a      	mov	r2, r5
 8010db8:	f010 f860 	bl	8020e7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010dbc:	b128      	cbz	r0, 8010dca <_ZN8touchgfx3HAL5touchEll+0x56>
 8010dbe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010dc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010dc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010dc8:	6623      	str	r3, [r4, #96]	; 0x60
 8010dca:	b007      	add	sp, #28
 8010dcc:	bd30      	pop	{r4, r5, pc}
 8010dce:	f010 f895 	bl	8020efc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010dd8:	e7f1      	b.n	8010dbe <_ZN8touchgfx3HAL5touchEll+0x4a>

08010dda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010dda:	b510      	push	{r4, lr}
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d046      	beq.n	8010e6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010de0:	ea81 0002 	eor.w	r0, r1, r2
 8010de4:	07c4      	lsls	r4, r0, #31
 8010de6:	d508      	bpl.n	8010dfa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010de8:	440b      	add	r3, r1
 8010dea:	3a01      	subs	r2, #1
 8010dec:	428b      	cmp	r3, r1
 8010dee:	d93e      	bls.n	8010e6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010df0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010df4:	f801 0b01 	strb.w	r0, [r1], #1
 8010df8:	e7f8      	b.n	8010dec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010dfa:	07d0      	lsls	r0, r2, #31
 8010dfc:	bf42      	ittt	mi
 8010dfe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010e02:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010e06:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d911      	bls.n	8010e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e0e:	ea81 0402 	eor.w	r4, r1, r2
 8010e12:	07a4      	lsls	r4, r4, #30
 8010e14:	4610      	mov	r0, r2
 8010e16:	d022      	beq.n	8010e5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010e18:	f023 0401 	bic.w	r4, r3, #1
 8010e1c:	440c      	add	r4, r1
 8010e1e:	428c      	cmp	r4, r1
 8010e20:	4602      	mov	r2, r0
 8010e22:	d904      	bls.n	8010e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010e24:	8812      	ldrh	r2, [r2, #0]
 8010e26:	3002      	adds	r0, #2
 8010e28:	f821 2b02 	strh.w	r2, [r1], #2
 8010e2c:	e7f7      	b.n	8010e1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	f023 0003 	bic.w	r0, r3, #3
 8010e36:	4408      	add	r0, r1
 8010e38:	4288      	cmp	r0, r1
 8010e3a:	4614      	mov	r4, r2
 8010e3c:	d904      	bls.n	8010e48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010e3e:	6824      	ldr	r4, [r4, #0]
 8010e40:	3204      	adds	r2, #4
 8010e42:	f841 4b04 	str.w	r4, [r1], #4
 8010e46:	e7f7      	b.n	8010e38 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010e48:	f003 0303 	and.w	r3, r3, #3
 8010e4c:	440b      	add	r3, r1
 8010e4e:	3a01      	subs	r2, #1
 8010e50:	428b      	cmp	r3, r1
 8010e52:	d90c      	bls.n	8010e6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010e54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010e58:	f801 0b01 	strb.w	r0, [r1], #1
 8010e5c:	e7f8      	b.n	8010e50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010e5e:	0790      	lsls	r0, r2, #30
 8010e60:	d0e7      	beq.n	8010e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e62:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010e66:	3b02      	subs	r3, #2
 8010e68:	f821 0b02 	strh.w	r0, [r1], #2
 8010e6c:	e7e1      	b.n	8010e32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010e6e:	2001      	movs	r0, #1
 8010e70:	bd10      	pop	{r4, pc}

08010e72 <_ZN8touchgfx3HAL7noTouchEv>:
 8010e72:	b510      	push	{r4, lr}
 8010e74:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8010e78:	4604      	mov	r4, r0
 8010e7a:	b153      	cbz	r3, 8010e92 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010e7c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010e80:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8010e84:	2101      	movs	r1, #1
 8010e86:	301c      	adds	r0, #28
 8010e88:	f010 f838 	bl	8020efc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010e92:	bd10      	pop	{r4, pc}

08010e94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e98:	4604      	mov	r4, r0
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	b085      	sub	sp, #20
 8010e9e:	ad04      	add	r5, sp, #16
 8010ea0:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010ea4:	69a0      	ldr	r0, [r4, #24]
 8010ea6:	4699      	mov	r9, r3
 8010ea8:	6806      	ldr	r6, [r0, #0]
 8010eaa:	9501      	str	r5, [sp, #4]
 8010eac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8010eb0:	460f      	mov	r7, r1
 8010eb2:	9500      	str	r5, [sp, #0]
 8010eb4:	6835      	ldr	r5, [r6, #0]
 8010eb6:	4690      	mov	r8, r2
 8010eb8:	47a8      	blx	r5
 8010eba:	4d10      	ldr	r5, [pc, #64]	; (8010efc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	f8a5 9000 	strh.w	r9, [r5]
 8010ec2:	f7fc f967 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8010ec6:	6803      	ldr	r3, [r0, #0]
 8010ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eca:	4798      	blx	r3
 8010ecc:	b128      	cbz	r0, 8010eda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010ece:	2801      	cmp	r0, #1
 8010ed0:	d00b      	beq.n	8010eea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	b005      	add	sp, #20
 8010ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eda:	882b      	ldrh	r3, [r5, #0]
 8010edc:	fb08 7203 	mla	r2, r8, r3, r7
 8010ee0:	9b03      	ldr	r3, [sp, #12]
 8010ee2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010ee6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010ee8:	e7f3      	b.n	8010ed2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010eea:	882a      	ldrh	r2, [r5, #0]
 8010eec:	9b03      	ldr	r3, [sp, #12]
 8010eee:	fb08 7202 	mla	r2, r8, r2, r7
 8010ef2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010ef6:	1a9a      	subs	r2, r3, r2
 8010ef8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010efa:	e7ea      	b.n	8010ed2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010efc:	2001fd9a 	.word	0x2001fd9a

08010f00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f02:	b08b      	sub	sp, #44	; 0x2c
 8010f04:	4617      	mov	r7, r2
 8010f06:	4604      	mov	r4, r0
 8010f08:	460e      	mov	r6, r1
 8010f0a:	461d      	mov	r5, r3
 8010f0c:	f7fc f942 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8010f10:	6803      	ldr	r3, [r0, #0]
 8010f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f14:	4798      	blx	r3
 8010f16:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010f1a:	9007      	str	r0, [sp, #28]
 8010f1c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010f20:	4b0d      	ldr	r3, [pc, #52]	; (8010f58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010f22:	6822      	ldr	r2, [r4, #0]
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	4631      	mov	r1, r6
 8010f28:	9306      	str	r3, [sp, #24]
 8010f2a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010f2e:	4620      	mov	r0, r4
 8010f30:	9305      	str	r3, [sp, #20]
 8010f32:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010f36:	9304      	str	r3, [sp, #16]
 8010f38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010f3c:	9303      	str	r3, [sp, #12]
 8010f3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010f42:	9302      	str	r3, [sp, #8]
 8010f44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010f48:	e9cd 5300 	strd	r5, r3, [sp]
 8010f4c:	463b      	mov	r3, r7
 8010f4e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8010f50:	2200      	movs	r2, #0
 8010f52:	47a8      	blx	r5
 8010f54:	b00b      	add	sp, #44	; 0x2c
 8010f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f58:	2001fd9a 	.word	0x2001fd9a

08010f5c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f60:	4698      	mov	r8, r3
 8010f62:	6803      	ldr	r3, [r0, #0]
 8010f64:	b08b      	sub	sp, #44	; 0x2c
 8010f66:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010f68:	4b14      	ldr	r3, [pc, #80]	; (8010fbc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010f6a:	4617      	mov	r7, r2
 8010f6c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010f70:	460e      	mov	r6, r1
 8010f72:	4604      	mov	r4, r0
 8010f74:	f7fc f90e 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8010f78:	6803      	ldr	r3, [r0, #0]
 8010f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f7c:	4798      	blx	r3
 8010f7e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010f82:	2200      	movs	r2, #0
 8010f84:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010f88:	2302      	movs	r3, #2
 8010f8a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010f8e:	2301      	movs	r3, #1
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010f96:	4631      	mov	r1, r6
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010fa6:	9302      	str	r3, [sp, #8]
 8010fa8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010fac:	e9cd 8300 	strd	r8, r3, [sp]
 8010fb0:	463b      	mov	r3, r7
 8010fb2:	47a8      	blx	r5
 8010fb4:	b00b      	add	sp, #44	; 0x2c
 8010fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fba:	bf00      	nop
 8010fbc:	2001fd9a 	.word	0x2001fd9a

08010fc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fc4:	4698      	mov	r8, r3
 8010fc6:	6803      	ldr	r3, [r0, #0]
 8010fc8:	b087      	sub	sp, #28
 8010fca:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8010fcc:	4b10      	ldr	r3, [pc, #64]	; (8011010 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010fce:	460e      	mov	r6, r1
 8010fd0:	f8b3 9000 	ldrh.w	r9, [r3]
 8010fd4:	4617      	mov	r7, r2
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	f7fc f8dc 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8010fdc:	6803      	ldr	r3, [r0, #0]
 8010fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe0:	4798      	blx	r3
 8010fe2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010fe6:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010fee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010ff2:	463a      	mov	r2, r7
 8010ff4:	9302      	str	r3, [sp, #8]
 8010ff6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011002:	4620      	mov	r0, r4
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	4643      	mov	r3, r8
 8011008:	47a8      	blx	r5
 801100a:	b007      	add	sp, #28
 801100c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011010:	2001fd9a 	.word	0x2001fd9a

08011014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	4604      	mov	r4, r0
 801101a:	b08f      	sub	sp, #60	; 0x3c
 801101c:	4610      	mov	r0, r2
 801101e:	460d      	mov	r5, r1
 8011020:	4691      	mov	r9, r2
 8011022:	461e      	mov	r6, r3
 8011024:	f004 f98c 	bl	8015340 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011028:	2800      	cmp	r0, #0
 801102a:	f000 809d 	beq.w	8011168 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801102e:	6823      	ldr	r3, [r4, #0]
 8011030:	4620      	mov	r0, r4
 8011032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011034:	4798      	blx	r3
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	f8df b190 	ldr.w	fp, [pc, #400]	; 80111cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	4620      	mov	r0, r4
 8011040:	4798      	blx	r3
 8011042:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80111d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011046:	f8bb 3000 	ldrh.w	r3, [fp]
 801104a:	4f5d      	ldr	r7, [pc, #372]	; (80111c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801104c:	9301      	str	r3, [sp, #4]
 801104e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011052:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011056:	9302      	str	r3, [sp, #8]
 8011058:	883b      	ldrh	r3, [r7, #0]
 801105a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801105e:	9303      	str	r3, [sp, #12]
 8011060:	4b58      	ldr	r3, [pc, #352]	; (80111c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011062:	4640      	mov	r0, r8
 8011064:	881a      	ldrh	r2, [r3, #0]
 8011066:	9305      	str	r3, [sp, #20]
 8011068:	9204      	str	r2, [sp, #16]
 801106a:	f004 f9fd 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801106e:	8038      	strh	r0, [r7, #0]
 8011070:	4640      	mov	r0, r8
 8011072:	f004 fa2d 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011076:	9b05      	ldr	r3, [sp, #20]
 8011078:	b280      	uxth	r0, r0
 801107a:	8018      	strh	r0, [r3, #0]
 801107c:	4b52      	ldr	r3, [pc, #328]	; (80111c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d174      	bne.n	801116e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011084:	883b      	ldrh	r3, [r7, #0]
 8011086:	f8aa 0000 	strh.w	r0, [sl]
 801108a:	f8ab 3000 	strh.w	r3, [fp]
 801108e:	4648      	mov	r0, r9
 8011090:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011094:	f004 f954 	bl	8015340 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011098:	2200      	movs	r2, #0
 801109a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801109e:	4611      	mov	r1, r2
 80110a0:	4628      	mov	r0, r5
 80110a2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80110a6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80110aa:	f7fc fdca 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
 80110ae:	2301      	movs	r3, #1
 80110b0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80110b4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80110b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	dd5c      	ble.n	801117a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80110c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	dd58      	ble.n	801117a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80110c8:	462a      	mov	r2, r5
 80110ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80110ce:	ab0a      	add	r3, sp, #40	; 0x28
 80110d0:	6851      	ldr	r1, [r2, #4]
 80110d2:	c303      	stmia	r3!, {r0, r1}
 80110d4:	4631      	mov	r1, r6
 80110d6:	a80a      	add	r0, sp, #40	; 0x28
 80110d8:	f7ff fbfe 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 80110dc:	2100      	movs	r1, #0
 80110de:	4b38      	ldr	r3, [pc, #224]	; (80111c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80110e0:	910c      	str	r1, [sp, #48]	; 0x30
 80110e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80110e6:	4b37      	ldr	r3, [pc, #220]	; (80111c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80110e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80110ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110f0:	aa0a      	add	r2, sp, #40	; 0x28
 80110f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80110f6:	ab08      	add	r3, sp, #32
 80110f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8011100:	4618      	mov	r0, r3
 8011102:	a90c      	add	r1, sp, #48	; 0x30
 8011104:	f7ff fbe8 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8011108:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801110a:	2b00      	cmp	r3, #0
 801110c:	d13c      	bne.n	8011188 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801110e:	2000      	movs	r0, #0
 8011110:	2600      	movs	r6, #0
 8011112:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011116:	696b      	ldr	r3, [r5, #20]
 8011118:	682a      	ldr	r2, [r5, #0]
 801111a:	616e      	str	r6, [r5, #20]
 801111c:	9305      	str	r3, [sp, #20]
 801111e:	6892      	ldr	r2, [r2, #8]
 8011120:	a908      	add	r1, sp, #32
 8011122:	4628      	mov	r0, r5
 8011124:	4790      	blx	r2
 8011126:	9b05      	ldr	r3, [sp, #20]
 8011128:	4652      	mov	r2, sl
 801112a:	616b      	str	r3, [r5, #20]
 801112c:	4649      	mov	r1, r9
 801112e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011132:	4628      	mov	r0, r5
 8011134:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011138:	f7fc fd83 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
 801113c:	9a01      	ldr	r2, [sp, #4]
 801113e:	4b23      	ldr	r3, [pc, #140]	; (80111cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011140:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011144:	801a      	strh	r2, [r3, #0]
 8011146:	9a02      	ldr	r2, [sp, #8]
 8011148:	4b21      	ldr	r3, [pc, #132]	; (80111d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801114a:	4620      	mov	r0, r4
 801114c:	801a      	strh	r2, [r3, #0]
 801114e:	9a03      	ldr	r2, [sp, #12]
 8011150:	4b1b      	ldr	r3, [pc, #108]	; (80111c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011152:	801a      	strh	r2, [r3, #0]
 8011154:	4b1b      	ldr	r3, [pc, #108]	; (80111c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011156:	9a04      	ldr	r2, [sp, #16]
 8011158:	801a      	strh	r2, [r3, #0]
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115e:	4798      	blx	r3
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	4620      	mov	r0, r4
 8011164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011166:	4798      	blx	r3
 8011168:	b00f      	add	sp, #60	; 0x3c
 801116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116e:	883b      	ldrh	r3, [r7, #0]
 8011170:	f8ab 0000 	strh.w	r0, [fp]
 8011174:	f8aa 3000 	strh.w	r3, [sl]
 8011178:	e789      	b.n	801108e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801117a:	462a      	mov	r2, r5
 801117c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011180:	ab0a      	add	r3, sp, #40	; 0x28
 8011182:	6851      	ldr	r1, [r2, #4]
 8011184:	c303      	stmia	r3!, {r0, r1}
 8011186:	e7a9      	b.n	80110dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011188:	a807      	add	r0, sp, #28
 801118a:	f004 fadd 	bl	8015748 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801118e:	4606      	mov	r6, r0
 8011190:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011192:	6803      	ldr	r3, [r0, #0]
 8011194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011196:	4798      	blx	r3
 8011198:	4286      	cmp	r6, r0
 801119a:	d1b8      	bne.n	801110e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801119c:	f7fb fffa 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 80111a0:	6803      	ldr	r3, [r0, #0]
 80111a2:	4606      	mov	r6, r0
 80111a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111a6:	a807      	add	r0, sp, #28
 80111a8:	9305      	str	r3, [sp, #20]
 80111aa:	f004 facd 	bl	8015748 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80111ae:	9b05      	ldr	r3, [sp, #20]
 80111b0:	4601      	mov	r1, r0
 80111b2:	4630      	mov	r0, r6
 80111b4:	4798      	blx	r3
 80111b6:	f080 0001 	eor.w	r0, r0, #1
 80111ba:	b2c0      	uxtb	r0, r0
 80111bc:	e7a8      	b.n	8011110 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80111be:	bf00      	nop
 80111c0:	2001fd94 	.word	0x2001fd94
 80111c4:	2001fd96 	.word	0x2001fd96
 80111c8:	2001fd98 	.word	0x2001fd98
 80111cc:	2001fd9a 	.word	0x2001fd9a
 80111d0:	2001fd9c 	.word	0x2001fd9c

080111d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80111d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d8:	461d      	mov	r5, r3
 80111da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111de:	2400      	movs	r4, #0
 80111e0:	b08a      	sub	sp, #40	; 0x28
 80111e2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80111e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80111ea:	4690      	mov	r8, r2
 80111ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80111f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80111f4:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80111f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80111fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011200:	4607      	mov	r7, r0
 8011202:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011206:	9404      	str	r4, [sp, #16]
 8011208:	f88d 4020 	strb.w	r4, [sp, #32]
 801120c:	f7fd ff8e 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011210:	fb06 8505 	mla	r5, r6, r5, r8
 8011214:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	9505      	str	r5, [sp, #20]
 801121c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011220:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011224:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8011228:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801122c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011230:	6803      	ldr	r3, [r0, #0]
 8011232:	a901      	add	r1, sp, #4
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	4798      	blx	r3
 8011238:	b00a      	add	sp, #40	; 0x28
 801123a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801123e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801123e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011242:	2400      	movs	r4, #0
 8011244:	461d      	mov	r5, r3
 8011246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801124a:	4691      	mov	r9, r2
 801124c:	b08b      	sub	sp, #44	; 0x2c
 801124e:	4688      	mov	r8, r1
 8011250:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011254:	4607      	mov	r7, r0
 8011256:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801125a:	9404      	str	r4, [sp, #16]
 801125c:	f7fd ff66 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011260:	fb06 9505 	mla	r5, r6, r5, r9
 8011264:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011268:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801126c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011270:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	9505      	str	r5, [sp, #20]
 8011278:	f8ad 301a 	strh.w	r3, [sp, #26]
 801127c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011280:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011284:	f8cd 8010 	str.w	r8, [sp, #16]
 8011288:	f8ad 4020 	strh.w	r4, [sp, #32]
 801128c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011290:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011294:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011298:	6803      	ldr	r3, [r0, #0]
 801129a:	a901      	add	r1, sp, #4
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4798      	blx	r3
 80112a0:	b00b      	add	sp, #44	; 0x2c
 80112a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080112a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	4698      	mov	r8, r3
 80112ae:	2300      	movs	r3, #0
 80112b0:	b08a      	sub	sp, #40	; 0x28
 80112b2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80112b6:	4606      	mov	r6, r0
 80112b8:	2d0b      	cmp	r5, #11
 80112ba:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80112be:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80112c2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80112c6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80112ca:	9304      	str	r3, [sp, #16]
 80112cc:	d137      	bne.n	801133e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80112ce:	2380      	movs	r3, #128	; 0x80
 80112d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80112d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80112d8:	f88d 0020 	strb.w	r0, [sp, #32]
 80112dc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80112e4:	4630      	mov	r0, r6
 80112e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112ea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80112ee:	9203      	str	r2, [sp, #12]
 80112f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80112f4:	f7fd ff1a 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80112f8:	2c0b      	cmp	r4, #11
 80112fa:	bf8c      	ite	hi
 80112fc:	2100      	movhi	r1, #0
 80112fe:	4b1b      	ldrls	r3, [pc, #108]	; (801136c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011300:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011304:	bf98      	it	ls
 8011306:	5d19      	ldrbls	r1, [r3, r4]
 8011308:	fb02 8307 	mla	r3, r2, r7, r8
 801130c:	10c9      	asrs	r1, r1, #3
 801130e:	fb01 0003 	mla	r0, r1, r3, r0
 8011312:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011316:	9005      	str	r0, [sp, #20]
 8011318:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801131c:	2300      	movs	r3, #0
 801131e:	6870      	ldr	r0, [r6, #4]
 8011320:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011324:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011328:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801132c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011330:	6803      	ldr	r3, [r0, #0]
 8011332:	a901      	add	r1, sp, #4
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	4798      	blx	r3
 8011338:	b00a      	add	sp, #40	; 0x28
 801133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801133e:	2d02      	cmp	r5, #2
 8011340:	d109      	bne.n	8011356 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011342:	28ff      	cmp	r0, #255	; 0xff
 8011344:	d105      	bne.n	8011352 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011346:	f1bc 0f00 	cmp.w	ip, #0
 801134a:	bf14      	ite	ne
 801134c:	2340      	movne	r3, #64	; 0x40
 801134e:	2320      	moveq	r3, #32
 8011350:	e7be      	b.n	80112d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011352:	2340      	movs	r3, #64	; 0x40
 8011354:	e7bc      	b.n	80112d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011356:	28ff      	cmp	r0, #255	; 0xff
 8011358:	d105      	bne.n	8011366 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801135a:	f1bc 0f00 	cmp.w	ip, #0
 801135e:	bf14      	ite	ne
 8011360:	2304      	movne	r3, #4
 8011362:	2301      	moveq	r3, #1
 8011364:	e7b4      	b.n	80112d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011366:	2304      	movs	r3, #4
 8011368:	e7b2      	b.n	80112d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801136a:	bf00      	nop
 801136c:	080234d4 	.word	0x080234d4

08011370 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011374:	b08b      	sub	sp, #44	; 0x2c
 8011376:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801137a:	461d      	mov	r5, r3
 801137c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011380:	bf14      	ite	ne
 8011382:	2308      	movne	r3, #8
 8011384:	2302      	moveq	r3, #2
 8011386:	2400      	movs	r4, #0
 8011388:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801138c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011390:	4688      	mov	r8, r1
 8011392:	4693      	mov	fp, r2
 8011394:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011398:	9404      	str	r4, [sp, #16]
 801139a:	4607      	mov	r7, r0
 801139c:	f7fd fec6 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80113a0:	2e0b      	cmp	r6, #11
 80113a2:	bf98      	it	ls
 80113a4:	4b15      	ldrls	r3, [pc, #84]	; (80113fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80113a6:	fb05 b50a 	mla	r5, r5, sl, fp
 80113aa:	bf98      	it	ls
 80113ac:	5d9c      	ldrbls	r4, [r3, r6]
 80113ae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80113b2:	10e4      	asrs	r4, r4, #3
 80113b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80113b8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80113bc:	fb04 0405 	mla	r4, r4, r5, r0
 80113c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80113c4:	2300      	movs	r3, #0
 80113c6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	9405      	str	r4, [sp, #20]
 80113ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 80113d2:	f8ad a01e 	strh.w	sl, [sp, #30]
 80113d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80113da:	f88d 9020 	strb.w	r9, [sp, #32]
 80113de:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80113e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80113e6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80113ea:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80113ee:	6803      	ldr	r3, [r0, #0]
 80113f0:	a901      	add	r1, sp, #4
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	4798      	blx	r3
 80113f6:	b00b      	add	sp, #44	; 0x2c
 80113f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113fc:	080234d4 	.word	0x080234d4

08011400 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011404:	461e      	mov	r6, r3
 8011406:	4b0a      	ldr	r3, [pc, #40]	; (8011430 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011408:	460f      	mov	r7, r1
 801140a:	881d      	ldrh	r5, [r3, #0]
 801140c:	4690      	mov	r8, r2
 801140e:	f7fb fec1 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011412:	6803      	ldr	r3, [r0, #0]
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	4798      	blx	r3
 8011418:	280b      	cmp	r0, #11
 801141a:	bf8e      	itee	hi
 801141c:	2400      	movhi	r4, #0
 801141e:	4b05      	ldrls	r3, [pc, #20]	; (8011434 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011420:	5c1c      	ldrbls	r4, [r3, r0]
 8011422:	fb08 7005 	mla	r0, r8, r5, r7
 8011426:	10e4      	asrs	r4, r4, #3
 8011428:	fb04 6000 	mla	r0, r4, r0, r6
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	2001fd9a 	.word	0x2001fd9a
 8011434:	080234d4 	.word	0x080234d4

08011438 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143a:	2500      	movs	r5, #0
 801143c:	b08b      	sub	sp, #44	; 0x2c
 801143e:	461f      	mov	r7, r3
 8011440:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011444:	4604      	mov	r4, r0
 8011446:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801144a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801144e:	4616      	mov	r6, r2
 8011450:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011454:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011458:	9504      	str	r5, [sp, #16]
 801145a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801145e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011462:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011466:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801146a:	f88d 3020 	strb.w	r3, [sp, #32]
 801146e:	f7fd fe5d 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011472:	463a      	mov	r2, r7
 8011474:	4631      	mov	r1, r6
 8011476:	4603      	mov	r3, r0
 8011478:	4620      	mov	r0, r4
 801147a:	f7ff ffc1 	bl	8011400 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801147e:	4b0e      	ldr	r3, [pc, #56]	; (80114b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011480:	9005      	str	r0, [sp, #20]
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011488:	f7fb fe84 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 801148c:	6803      	ldr	r3, [r0, #0]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	4798      	blx	r3
 8011492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011494:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801149e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80114a2:	6860      	ldr	r0, [r4, #4]
 80114a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80114a8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80114ac:	6803      	ldr	r3, [r0, #0]
 80114ae:	a901      	add	r1, sp, #4
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4798      	blx	r3
 80114b4:	b00b      	add	sp, #44	; 0x2c
 80114b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b8:	2001fd9a 	.word	0x2001fd9a

080114bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80114bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114be:	b08d      	sub	sp, #52	; 0x34
 80114c0:	466b      	mov	r3, sp
 80114c2:	e883 0006 	stmia.w	r3, {r1, r2}
 80114c6:	2300      	movs	r3, #0
 80114c8:	2501      	movs	r5, #1
 80114ca:	9306      	str	r3, [sp, #24]
 80114cc:	6803      	ldr	r3, [r0, #0]
 80114ce:	9503      	str	r5, [sp, #12]
 80114d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d2:	4604      	mov	r4, r0
 80114d4:	f8bd 6000 	ldrh.w	r6, [sp]
 80114d8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80114dc:	4798      	blx	r3
 80114de:	463a      	mov	r2, r7
 80114e0:	4631      	mov	r1, r6
 80114e2:	4603      	mov	r3, r0
 80114e4:	4620      	mov	r0, r4
 80114e6:	f7ff ff8b 	bl	8011400 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80114ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80114ec:	9004      	str	r0, [sp, #16]
 80114ee:	9307      	str	r3, [sp, #28]
 80114f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80114f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80114f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80114fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011500:	4b0e      	ldr	r3, [pc, #56]	; (801153c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011502:	881b      	ldrh	r3, [r3, #0]
 8011504:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011508:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801150c:	f7fb fe42 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011510:	6803      	ldr	r3, [r0, #0]
 8011512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011514:	4798      	blx	r3
 8011516:	23ff      	movs	r3, #255	; 0xff
 8011518:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801151c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011520:	6860      	ldr	r0, [r4, #4]
 8011522:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011526:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801152a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801152e:	6803      	ldr	r3, [r0, #0]
 8011530:	a903      	add	r1, sp, #12
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4798      	blx	r3
 8011536:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011538:	b00d      	add	sp, #52	; 0x34
 801153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801153c:	2001fd9a 	.word	0x2001fd9a

08011540 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011544:	b08c      	sub	sp, #48	; 0x30
 8011546:	466d      	mov	r5, sp
 8011548:	461e      	mov	r6, r3
 801154a:	2300      	movs	r3, #0
 801154c:	e885 0006 	stmia.w	r5, {r1, r2}
 8011550:	2501      	movs	r5, #1
 8011552:	9306      	str	r3, [sp, #24]
 8011554:	6803      	ldr	r3, [r0, #0]
 8011556:	9503      	str	r5, [sp, #12]
 8011558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801155a:	4604      	mov	r4, r0
 801155c:	f8bd 7000 	ldrh.w	r7, [sp]
 8011560:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011564:	4798      	blx	r3
 8011566:	4642      	mov	r2, r8
 8011568:	4639      	mov	r1, r7
 801156a:	4603      	mov	r3, r0
 801156c:	4620      	mov	r0, r4
 801156e:	f7ff ff47 	bl	8011400 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011572:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011576:	9004      	str	r0, [sp, #16]
 8011578:	f8ad 3020 	strh.w	r3, [sp, #32]
 801157c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011580:	9607      	str	r6, [sp, #28]
 8011582:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011586:	4b10      	ldr	r3, [pc, #64]	; (80115c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801158e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011590:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011594:	f7fb fdfe 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011598:	6803      	ldr	r3, [r0, #0]
 801159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801159c:	4798      	blx	r3
 801159e:	23ff      	movs	r3, #255	; 0xff
 80115a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80115a4:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80115a8:	6860      	ldr	r0, [r4, #4]
 80115aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80115ae:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80115b2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80115b6:	6803      	ldr	r3, [r0, #0]
 80115b8:	a903      	add	r1, sp, #12
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4798      	blx	r3
 80115be:	4630      	mov	r0, r6
 80115c0:	b00c      	add	sp, #48	; 0x30
 80115c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c6:	bf00      	nop
 80115c8:	2001fd9a 	.word	0x2001fd9a

080115cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80115cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ce:	b085      	sub	sp, #20
 80115d0:	ac02      	add	r4, sp, #8
 80115d2:	e884 0006 	stmia.w	r4, {r1, r2}
 80115d6:	4605      	mov	r5, r0
 80115d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80115dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80115e0:	f7fd fda4 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80115e4:	463a      	mov	r2, r7
 80115e6:	4603      	mov	r3, r0
 80115e8:	4631      	mov	r1, r6
 80115ea:	4628      	mov	r0, r5
 80115ec:	f7ff ff08 	bl	8011400 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80115f0:	4a05      	ldr	r2, [pc, #20]	; (8011608 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80115f2:	682b      	ldr	r3, [r5, #0]
 80115f4:	8812      	ldrh	r2, [r2, #0]
 80115f6:	9200      	str	r2, [sp, #0]
 80115f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80115fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80115fe:	4603      	mov	r3, r0
 8011600:	4628      	mov	r0, r5
 8011602:	47b0      	blx	r6
 8011604:	b005      	add	sp, #20
 8011606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011608:	2001fd9a 	.word	0x2001fd9a

0801160c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011612:	4604      	mov	r4, r0
 8011614:	b19b      	cbz	r3, 801163e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011616:	2002      	movs	r0, #2
 8011618:	f7fd fc3a 	bl	800ee90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801161c:	2300      	movs	r3, #0
 801161e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011622:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	4620      	mov	r0, r4
 801162a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801162e:	f7fd fd7d 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011632:	462b      	mov	r3, r5
 8011634:	4601      	mov	r1, r0
 8011636:	4620      	mov	r0, r4
 8011638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801163c:	4718      	bx	r3
 801163e:	bd70      	pop	{r4, r5, r6, pc}

08011640 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8011646:	4604      	mov	r4, r0
 8011648:	428b      	cmp	r3, r1
 801164a:	460d      	mov	r5, r1
 801164c:	d006      	beq.n	801165c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801164e:	6803      	ldr	r3, [r0, #0]
 8011650:	b929      	cbnz	r1, 801165e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011652:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011656:	4798      	blx	r3
 8011658:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801165c:	bd38      	pop	{r3, r4, r5, pc}
 801165e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011662:	e7f8      	b.n	8011656 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011664 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011664:	b510      	push	{r4, lr}
 8011666:	4b0d      	ldr	r3, [pc, #52]	; (801169c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011668:	4604      	mov	r4, r0
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	b95b      	cbnz	r3, 8011686 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801166e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8011672:	2b02      	cmp	r3, #2
 8011674:	d007      	beq.n	8011686 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011676:	6840      	ldr	r0, [r0, #4]
 8011678:	f000 f90e 	bl	8011898 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801167c:	b118      	cbz	r0, 8011686 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801167e:	6862      	ldr	r2, [r4, #4]
 8011680:	7a53      	ldrb	r3, [r2, #9]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d0fc      	beq.n	8011680 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011686:	f7fe f87d 	bl	800f784 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801168a:	4620      	mov	r0, r4
 801168c:	2100      	movs	r1, #0
 801168e:	f7ff ffd7 	bl	8011640 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011692:	4620      	mov	r0, r4
 8011694:	f7fd fd4a 	bl	800f12c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011698:	bd10      	pop	{r4, pc}
 801169a:	bf00      	nop
 801169c:	2001fd9e 	.word	0x2001fd9e

080116a0 <_ZN8touchgfx13DMA_Interface5flushEv>:
 80116a0:	6803      	ldr	r3, [r0, #0]
 80116a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116a4:	4718      	bx	r3

080116a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80116a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80116aa:	1a13      	subs	r3, r2, r0
 80116ac:	4258      	negs	r0, r3
 80116ae:	4158      	adcs	r0, r3
 80116b0:	4770      	bx	lr

080116b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80116b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80116b6:	1a9b      	subs	r3, r3, r2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	bfdc      	itt	le
 80116bc:	6882      	ldrle	r2, [r0, #8]
 80116be:	189b      	addle	r3, r3, r2
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	bfcc      	ite	gt
 80116c4:	2000      	movgt	r0, #0
 80116c6:	2001      	movle	r0, #1
 80116c8:	4770      	bx	lr

080116ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80116ca:	6902      	ldr	r2, [r0, #16]
 80116cc:	6843      	ldr	r3, [r0, #4]
 80116ce:	2024      	movs	r0, #36	; 0x24
 80116d0:	fb00 3002 	mla	r0, r0, r2, r3
 80116d4:	4770      	bx	lr

080116d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80116d6:	6803      	ldr	r3, [r0, #0]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	4718      	bx	r3

080116dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80116dc:	2301      	movs	r3, #1
 80116de:	b570      	push	{r4, r5, r6, lr}
 80116e0:	7203      	strb	r3, [r0, #8]
 80116e2:	4604      	mov	r4, r0
 80116e4:	6840      	ldr	r0, [r0, #4]
 80116e6:	6803      	ldr	r3, [r0, #0]
 80116e8:	699b      	ldr	r3, [r3, #24]
 80116ea:	4798      	blx	r3
 80116ec:	6803      	ldr	r3, [r0, #0]
 80116ee:	4605      	mov	r5, r0
 80116f0:	2b40      	cmp	r3, #64	; 0x40
 80116f2:	d00c      	beq.n	801170e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80116f4:	d810      	bhi.n	8011718 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80116f6:	2b04      	cmp	r3, #4
 80116f8:	d01d      	beq.n	8011736 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80116fa:	d804      	bhi.n	8011706 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d006      	beq.n	801170e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011700:	2b02      	cmp	r3, #2
 8011702:	d02c      	beq.n	801175e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011704:	bd70      	pop	{r4, r5, r6, pc}
 8011706:	2b08      	cmp	r3, #8
 8011708:	d01d      	beq.n	8011746 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801170a:	2b20      	cmp	r3, #32
 801170c:	d1fa      	bne.n	8011704 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	4620      	mov	r0, r4
 8011712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011714:	4798      	blx	r3
 8011716:	e013      	b.n	8011740 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801171c:	d0f7      	beq.n	801170e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801171e:	d804      	bhi.n	801172a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011720:	2b80      	cmp	r3, #128	; 0x80
 8011722:	d0f4      	beq.n	801170e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011728:	e7f0      	b.n	801170c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801172a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801172e:	d0ee      	beq.n	801170e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011734:	e7e5      	b.n	8011702 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011736:	6823      	ldr	r3, [r4, #0]
 8011738:	7f01      	ldrb	r1, [r0, #28]
 801173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801173c:	4620      	mov	r0, r4
 801173e:	4798      	blx	r3
 8011740:	6823      	ldr	r3, [r4, #0]
 8011742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011744:	e006      	b.n	8011754 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	7f01      	ldrb	r1, [r0, #28]
 801174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801174c:	4620      	mov	r0, r4
 801174e:	4798      	blx	r3
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011754:	4629      	mov	r1, r5
 8011756:	4620      	mov	r0, r4
 8011758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801175c:	4718      	bx	r3
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	4620      	mov	r0, r4
 8011762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011764:	4798      	blx	r3
 8011766:	e7f3      	b.n	8011750 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011768 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011768:	4770      	bx	lr

0801176a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801176a:	4770      	bx	lr

0801176c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801176c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011770:	1ad2      	subs	r2, r2, r3
 8011772:	2a00      	cmp	r2, #0
 8011774:	b510      	push	{r4, lr}
 8011776:	bfdc      	itt	le
 8011778:	6884      	ldrle	r4, [r0, #8]
 801177a:	1912      	addle	r2, r2, r4
 801177c:	2a01      	cmp	r2, #1
 801177e:	dd16      	ble.n	80117ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011780:	2424      	movs	r4, #36	; 0x24
 8011782:	6842      	ldr	r2, [r0, #4]
 8011784:	fb04 2303 	mla	r3, r4, r3, r2
 8011788:	f101 0220 	add.w	r2, r1, #32
 801178c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011790:	4291      	cmp	r1, r2
 8011792:	f843 4b04 	str.w	r4, [r3], #4
 8011796:	d1f9      	bne.n	801178c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011798:	780a      	ldrb	r2, [r1, #0]
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	68c3      	ldr	r3, [r0, #12]
 801179e:	6882      	ldr	r2, [r0, #8]
 80117a0:	3301      	adds	r3, #1
 80117a2:	429a      	cmp	r2, r3
 80117a4:	bfd8      	it	le
 80117a6:	1a9b      	suble	r3, r3, r2
 80117a8:	f3bf 8f5b 	dmb	ish
 80117ac:	60c3      	str	r3, [r0, #12]
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80117b0:	6903      	ldr	r3, [r0, #16]
 80117b2:	6882      	ldr	r2, [r0, #8]
 80117b4:	3301      	adds	r3, #1
 80117b6:	429a      	cmp	r2, r3
 80117b8:	bfd8      	it	le
 80117ba:	1a9b      	suble	r3, r3, r2
 80117bc:	f3bf 8f5b 	dmb	ish
 80117c0:	6103      	str	r3, [r0, #16]
 80117c2:	4770      	bx	lr

080117c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	4604      	mov	r4, r0
 80117c8:	460e      	mov	r6, r1
 80117ca:	6860      	ldr	r0, [r4, #4]
 80117cc:	6803      	ldr	r3, [r0, #0]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	4798      	blx	r3
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d1f9      	bne.n	80117ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80117d6:	4d0d      	ldr	r5, [pc, #52]	; (801180c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80117d8:	6828      	ldr	r0, [r5, #0]
 80117da:	6803      	ldr	r3, [r0, #0]
 80117dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117de:	4798      	blx	r3
 80117e0:	f7fd ffea 	bl	800f7b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80117e4:	6828      	ldr	r0, [r5, #0]
 80117e6:	2101      	movs	r1, #1
 80117e8:	f7ff ff2a 	bl	8011640 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80117ec:	6860      	ldr	r0, [r4, #4]
 80117ee:	4631      	mov	r1, r6
 80117f0:	6803      	ldr	r3, [r0, #0]
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	4798      	blx	r3
 80117f6:	6823      	ldr	r3, [r4, #0]
 80117f8:	4620      	mov	r0, r4
 80117fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fc:	4798      	blx	r3
 80117fe:	6828      	ldr	r0, [r5, #0]
 8011800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011804:	6803      	ldr	r3, [r0, #0]
 8011806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011808:	4718      	bx	r3
 801180a:	bf00      	nop
 801180c:	2001fda0 	.word	0x2001fda0

08011810 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011810:	b508      	push	{r3, lr}
 8011812:	f7fd ffb7 	bl	800f784 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801181a:	f7fd bfc1 	b.w	800f7a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801181e <_ZN8touchgfx13DMA_Interface5startEv>:
 801181e:	b510      	push	{r4, lr}
 8011820:	4604      	mov	r4, r0
 8011822:	6840      	ldr	r0, [r0, #4]
 8011824:	6803      	ldr	r3, [r0, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4798      	blx	r3
 801182a:	b948      	cbnz	r0, 8011840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801182c:	7a63      	ldrb	r3, [r4, #9]
 801182e:	b13b      	cbz	r3, 8011840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011830:	7a23      	ldrb	r3, [r4, #8]
 8011832:	b92b      	cbnz	r3, 8011840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011834:	6823      	ldr	r3, [r4, #0]
 8011836:	4620      	mov	r0, r4
 8011838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183e:	4718      	bx	r3
 8011840:	bd10      	pop	{r4, pc}

08011842 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011842:	b570      	push	{r4, r5, r6, lr}
 8011844:	4604      	mov	r4, r0
 8011846:	6840      	ldr	r0, [r0, #4]
 8011848:	6803      	ldr	r3, [r0, #0]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4798      	blx	r3
 801184e:	4605      	mov	r5, r0
 8011850:	b930      	cbnz	r0, 8011860 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011852:	7a23      	ldrb	r3, [r4, #8]
 8011854:	b123      	cbz	r3, 8011860 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011856:	6860      	ldr	r0, [r4, #4]
 8011858:	6803      	ldr	r3, [r0, #0]
 801185a:	695b      	ldr	r3, [r3, #20]
 801185c:	4798      	blx	r3
 801185e:	7225      	strb	r5, [r4, #8]
 8011860:	6860      	ldr	r0, [r4, #4]
 8011862:	6803      	ldr	r3, [r0, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4798      	blx	r3
 8011868:	b928      	cbnz	r0, 8011876 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801186a:	6823      	ldr	r3, [r4, #0]
 801186c:	4620      	mov	r0, r4
 801186e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011874:	4718      	bx	r3
 8011876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801187a:	f7fd bfa9 	b.w	800f7d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08011880 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011880:	6082      	str	r2, [r0, #8]
 8011882:	2200      	movs	r2, #0
 8011884:	b510      	push	{r4, lr}
 8011886:	4c03      	ldr	r4, [pc, #12]	; (8011894 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011888:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801188c:	e9c0 4100 	strd	r4, r1, [r0]
 8011890:	bd10      	pop	{r4, pc}
 8011892:	bf00      	nop
 8011894:	08023610 	.word	0x08023610

08011898 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011898:	6840      	ldr	r0, [r0, #4]
 801189a:	6803      	ldr	r3, [r0, #0]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4718      	bx	r3

080118a0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80118a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80118a4:	4770      	bx	lr

080118a6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80118a6:	b510      	push	{r4, lr}
 80118a8:	4604      	mov	r4, r0
 80118aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80118ac:	b150      	cbz	r0, 80118c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80118ae:	6803      	ldr	r3, [r0, #0]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	4798      	blx	r3
 80118b4:	b130      	cbz	r0, 80118c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80118b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80118b8:	4621      	mov	r1, r4
 80118ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118be:	6803      	ldr	r3, [r0, #0]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	4718      	bx	r3
 80118c4:	bd10      	pop	{r4, pc}

080118c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80118c6:	790b      	ldrb	r3, [r1, #4]
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bf0c      	ite	eq
 80118ce:	2301      	moveq	r3, #1
 80118d0:	2300      	movne	r3, #0
 80118d2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80118d6:	4604      	mov	r4, r0
 80118d8:	460e      	mov	r6, r1
 80118da:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80118de:	d109      	bne.n	80118f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80118e0:	b14d      	cbz	r5, 80118f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80118e2:	7933      	ldrb	r3, [r6, #4]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d10c      	bne.n	8011902 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80118e8:	6823      	ldr	r3, [r4, #0]
 80118ea:	4620      	mov	r0, r4
 80118ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118f2:	4718      	bx	r3
 80118f4:	b12d      	cbz	r5, 8011902 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80118f6:	6823      	ldr	r3, [r4, #0]
 80118f8:	4620      	mov	r0, r4
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	4798      	blx	r3
 80118fe:	2d00      	cmp	r5, #0
 8011900:	d1ef      	bne.n	80118e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8011902:	bd70      	pop	{r4, r5, r6, pc}

08011904 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011904:	2300      	movs	r3, #0
 8011906:	8083      	strh	r3, [r0, #4]
 8011908:	80c3      	strh	r3, [r0, #6]
 801190a:	8003      	strh	r3, [r0, #0]
 801190c:	8043      	strh	r3, [r0, #2]
 801190e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8011912:	2bff      	cmp	r3, #255	; 0xff
 8011914:	bf01      	itttt	eq
 8011916:	890b      	ldrheq	r3, [r1, #8]
 8011918:	8083      	strheq	r3, [r0, #4]
 801191a:	894b      	ldrheq	r3, [r1, #10]
 801191c:	80c3      	strheq	r3, [r0, #6]
 801191e:	4770      	bx	lr

08011920 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011922:	4604      	mov	r4, r0
 8011924:	466b      	mov	r3, sp
 8011926:	6808      	ldr	r0, [r1, #0]
 8011928:	6849      	ldr	r1, [r1, #4]
 801192a:	c303      	stmia	r3!, {r0, r1}
 801192c:	6823      	ldr	r3, [r4, #0]
 801192e:	4669      	mov	r1, sp
 8011930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011932:	4620      	mov	r0, r4
 8011934:	4798      	blx	r3
 8011936:	4b08      	ldr	r3, [pc, #32]	; (8011958 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801193e:	b10a      	cbz	r2, 8011944 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011940:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011942:	b900      	cbnz	r0, 8011946 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011944:	6898      	ldr	r0, [r3, #8]
 8011946:	6803      	ldr	r3, [r0, #0]
 8011948:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801194a:	6a1d      	ldr	r5, [r3, #32]
 801194c:	4669      	mov	r1, sp
 801194e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011952:	47a8      	blx	r5
 8011954:	b003      	add	sp, #12
 8011956:	bd30      	pop	{r4, r5, pc}
 8011958:	2001fda0 	.word	0x2001fda0

0801195c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801195c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011960:	b12a      	cbz	r2, 801196e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011962:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011966:	b112      	cbz	r2, 801196e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011968:	6803      	ldr	r3, [r0, #0]
 801196a:	695b      	ldr	r3, [r3, #20]
 801196c:	4718      	bx	r3
 801196e:	4770      	bx	lr

08011970 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	4605      	mov	r5, r0
 8011974:	880b      	ldrh	r3, [r1, #0]
 8011976:	4604      	mov	r4, r0
 8011978:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801197a:	8813      	ldrh	r3, [r2, #0]
 801197c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011980:	4628      	mov	r0, r5
 8011982:	f003 fd71 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011986:	4606      	mov	r6, r0
 8011988:	4628      	mov	r0, r5
 801198a:	f003 fda1 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801198e:	4605      	mov	r5, r0
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	4631      	mov	r1, r6
 8011994:	4620      	mov	r0, r4
 8011996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011998:	4798      	blx	r3
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	4629      	mov	r1, r5
 801199e:	4620      	mov	r0, r4
 80119a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119a6:	4718      	bx	r3

080119a8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80119a8:	b510      	push	{r4, lr}
 80119aa:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80119ae:	4604      	mov	r4, r0
 80119b0:	2bff      	cmp	r3, #255	; 0xff
 80119b2:	d006      	beq.n	80119c2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80119b4:	2300      	movs	r3, #0
 80119b6:	8003      	strh	r3, [r0, #0]
 80119b8:	8043      	strh	r3, [r0, #2]
 80119ba:	8083      	strh	r3, [r0, #4]
 80119bc:	80c3      	strh	r3, [r0, #6]
 80119be:	4620      	mov	r0, r4
 80119c0:	bd10      	pop	{r4, pc}
 80119c2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80119c6:	b11b      	cbz	r3, 80119d0 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80119c8:	3130      	adds	r1, #48	; 0x30
 80119ca:	f003 fdb5 	bl	8015538 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80119ce:	e7f6      	b.n	80119be <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80119d0:	312e      	adds	r1, #46	; 0x2e
 80119d2:	e7fa      	b.n	80119ca <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080119d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80119dc:	b08a      	sub	sp, #40	; 0x28
 80119de:	4604      	mov	r4, r0
 80119e0:	4688      	mov	r8, r1
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d066      	beq.n	8011ab4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80119e6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80119e8:	a805      	add	r0, sp, #20
 80119ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 80119ee:	f003 fd3b 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80119f2:	4607      	mov	r7, r0
 80119f4:	a805      	add	r0, sp, #20
 80119f6:	f003 fd6b 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80119fa:	2300      	movs	r3, #0
 80119fc:	f9b8 6000 	ldrsh.w	r6, [r8]
 8011a00:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011a04:	9306      	str	r3, [sp, #24]
 8011a06:	4432      	add	r2, r6
 8011a08:	b292      	uxth	r2, r2
 8011a0a:	fa0f fc82 	sxth.w	ip, r2
 8011a0e:	459c      	cmp	ip, r3
 8011a10:	dd52      	ble.n	8011ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a12:	42b7      	cmp	r7, r6
 8011a14:	dd50      	ble.n	8011ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a16:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8011a1a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011a1e:	442b      	add	r3, r5
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	b219      	sxth	r1, r3
 8011a24:	2900      	cmp	r1, #0
 8011a26:	dd47      	ble.n	8011ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a28:	42a8      	cmp	r0, r5
 8011a2a:	dd45      	ble.n	8011ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a2c:	4567      	cmp	r7, ip
 8011a2e:	bfb8      	it	lt
 8011a30:	b2ba      	uxthlt	r2, r7
 8011a32:	4288      	cmp	r0, r1
 8011a34:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011a38:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011a3c:	bfb8      	it	lt
 8011a3e:	b283      	uxthlt	r3, r0
 8011a40:	1b92      	subs	r2, r2, r6
 8011a42:	1b5b      	subs	r3, r3, r5
 8011a44:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011a48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011a4c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011a50:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a58:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d026      	beq.n	8011aae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a60:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	dd22      	ble.n	8011aae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a68:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dd1e      	ble.n	8011aae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a70:	2300      	movs	r3, #0
 8011a72:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	a908      	add	r1, sp, #32
 8011a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	4798      	blx	r3
 8011a80:	4b0f      	ldr	r3, [pc, #60]	; (8011ac0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011a88:	b10a      	cbz	r2, 8011a8e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8011a8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011a8c:	b900      	cbnz	r0, 8011a90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8011a8e:	6898      	ldr	r0, [r3, #8]
 8011a90:	2501      	movs	r5, #1
 8011a92:	6801      	ldr	r1, [r0, #0]
 8011a94:	9502      	str	r5, [sp, #8]
 8011a96:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8011a9a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011a9e:	9401      	str	r4, [sp, #4]
 8011aa0:	ac06      	add	r4, sp, #24
 8011aa2:	9400      	str	r4, [sp, #0]
 8011aa4:	688c      	ldr	r4, [r1, #8]
 8011aa6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011aaa:	a905      	add	r1, sp, #20
 8011aac:	47a0      	blx	r4
 8011aae:	b00a      	add	sp, #40	; 0x28
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011ab6:	e797      	b.n	80119e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	9307      	str	r3, [sp, #28]
 8011abc:	e7ca      	b.n	8011a54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8011abe:	bf00      	nop
 8011ac0:	2001fda0 	.word	0x2001fda0

08011ac4 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011ac4:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8011ac8:	b12a      	cbz	r2, 8011ad6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011aca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011ace:	b112      	cbz	r2, 8011ad6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011ad0:	6803      	ldr	r3, [r0, #0]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	4718      	bx	r3
 8011ad6:	4770      	bx	lr

08011ad8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011ad8:	b570      	push	{r4, r5, r6, lr}
 8011ada:	880b      	ldrh	r3, [r1, #0]
 8011adc:	4604      	mov	r4, r0
 8011ade:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	460d      	mov	r5, r1
 8011ae4:	f003 fcc0 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ae8:	4606      	mov	r6, r0
 8011aea:	4628      	mov	r0, r5
 8011aec:	f003 fcf0 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011af0:	4605      	mov	r5, r0
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	4631      	mov	r1, r6
 8011af6:	4620      	mov	r0, r4
 8011af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011afa:	4798      	blx	r3
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	4629      	mov	r1, r5
 8011b00:	4620      	mov	r0, r4
 8011b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b08:	4718      	bx	r3

08011b0a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011b0a:	b510      	push	{r4, lr}
 8011b0c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011b10:	4604      	mov	r4, r0
 8011b12:	2bff      	cmp	r3, #255	; 0xff
 8011b14:	d006      	beq.n	8011b24 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011b16:	2300      	movs	r3, #0
 8011b18:	8003      	strh	r3, [r0, #0]
 8011b1a:	8043      	strh	r3, [r0, #2]
 8011b1c:	8083      	strh	r3, [r0, #4]
 8011b1e:	80c3      	strh	r3, [r0, #6]
 8011b20:	4620      	mov	r0, r4
 8011b22:	bd10      	pop	{r4, pc}
 8011b24:	3126      	adds	r1, #38	; 0x26
 8011b26:	f003 fd07 	bl	8015538 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011b2a:	e7f9      	b.n	8011b20 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011b2c <_ZNK8touchgfx5Image17invalidateContentEv>:
 8011b2c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8011b30:	b12a      	cbz	r2, 8011b3e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011b32:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011b36:	b112      	cbz	r2, 8011b3e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8011b38:	6803      	ldr	r3, [r0, #0]
 8011b3a:	695b      	ldr	r3, [r3, #20]
 8011b3c:	4718      	bx	r3
 8011b3e:	4770      	bx	lr

08011b40 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	4604      	mov	r4, r0
 8011b46:	2500      	movs	r5, #0
 8011b48:	f854 3b26 	ldr.w	r3, [r4], #38
 8011b4c:	b088      	sub	sp, #32
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	460f      	mov	r7, r1
 8011b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011b56:	a904      	add	r1, sp, #16
 8011b58:	4606      	mov	r6, r0
 8011b5a:	4798      	blx	r3
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f003 fc83 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011b62:	4680      	mov	r8, r0
 8011b64:	4620      	mov	r0, r4
 8011b66:	f003 fcb3 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b6a:	9506      	str	r5, [sp, #24]
 8011b6c:	ad06      	add	r5, sp, #24
 8011b6e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011b72:	4639      	mov	r1, r7
 8011b74:	4628      	mov	r0, r5
 8011b76:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011b7a:	f7fe fead 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8011b7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	dd19      	ble.n	8011bba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011b86:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	dd15      	ble.n	8011bba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011b8e:	4b0c      	ldr	r3, [pc, #48]	; (8011bc0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011b96:	b10a      	cbz	r2, 8011b9c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011b98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011b9a:	b900      	cbnz	r0, 8011b9e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011b9c:	6898      	ldr	r0, [r3, #8]
 8011b9e:	2701      	movs	r7, #1
 8011ba0:	6801      	ldr	r1, [r0, #0]
 8011ba2:	9702      	str	r7, [sp, #8]
 8011ba4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8011ba8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011bac:	e9cd 5600 	strd	r5, r6, [sp]
 8011bb0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011bb4:	688d      	ldr	r5, [r1, #8]
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	47a8      	blx	r5
 8011bba:	b008      	add	sp, #32
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	2001fda0 	.word	0x2001fda0

08011bc4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011bc4:	b510      	push	{r4, lr}
 8011bc6:	6803      	ldr	r3, [r0, #0]
 8011bc8:	460c      	mov	r4, r1
 8011bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bcc:	4798      	blx	r3
 8011bce:	1b03      	subs	r3, r0, r4
 8011bd0:	4258      	negs	r0, r3
 8011bd2:	4158      	adcs	r0, r3
 8011bd4:	bd10      	pop	{r4, pc}
	...

08011bd8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011bd8:	4b01      	ldr	r3, [pc, #4]	; (8011be0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011bda:	6019      	str	r1, [r3, #0]
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop
 8011be0:	2001fda8 	.word	0x2001fda8

08011be4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be8:	4696      	mov	lr, r2
 8011bea:	4614      	mov	r4, r2
 8011bec:	4605      	mov	r5, r0
 8011bee:	460e      	mov	r6, r1
 8011bf0:	461f      	mov	r7, r3
 8011bf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011bf6:	b097      	sub	sp, #92	; 0x5c
 8011bf8:	f10d 0c1c 	add.w	ip, sp, #28
 8011bfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c00:	f8de 3000 	ldr.w	r3, [lr]
 8011c04:	f104 0e14 	add.w	lr, r4, #20
 8011c08:	f8cc 3000 	str.w	r3, [ip]
 8011c0c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011c10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c18:	f8de 3000 	ldr.w	r3, [lr]
 8011c1c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011c20:	f8cc 3000 	str.w	r3, [ip]
 8011c24:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011c28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c30:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8011c34:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011c38:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011c3c:	f8de 3000 	ldr.w	r3, [lr]
 8011c40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c42:	f8cc 3000 	str.w	r3, [ip]
 8011c46:	9201      	str	r2, [sp, #4]
 8011c48:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	9200      	str	r2, [sp, #0]
 8011c52:	f8cd 8008 	str.w	r8, [sp, #8]
 8011c56:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8011c5a:	aa07      	add	r2, sp, #28
 8011c5c:	463b      	mov	r3, r7
 8011c5e:	4631      	mov	r1, r6
 8011c60:	4628      	mov	r0, r5
 8011c62:	47d8      	blx	fp
 8011c64:	46a6      	mov	lr, r4
 8011c66:	f10d 0c1c 	add.w	ip, sp, #28
 8011c6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c72:	f8de 3000 	ldr.w	r3, [lr]
 8011c76:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011c7a:	f8cc 3000 	str.w	r3, [ip]
 8011c7e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011c82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c8a:	f8de 3000 	ldr.w	r3, [lr]
 8011c8e:	343c      	adds	r4, #60	; 0x3c
 8011c90:	f8cc 3000 	str.w	r3, [ip]
 8011c94:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	4631      	mov	r1, r6
 8011ca2:	f8cc 3000 	str.w	r3, [ip]
 8011ca6:	682b      	ldr	r3, [r5, #0]
 8011ca8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cae:	f8cd 8008 	str.w	r8, [sp, #8]
 8011cb2:	9201      	str	r2, [sp, #4]
 8011cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	9200      	str	r2, [sp, #0]
 8011cba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8011cbc:	aa07      	add	r2, sp, #28
 8011cbe:	463b      	mov	r3, r7
 8011cc0:	47a0      	blx	r4
 8011cc2:	b017      	add	sp, #92	; 0x5c
 8011cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cc8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011cc8:	2000      	movs	r0, #0
 8011cca:	4770      	bx	lr

08011ccc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	b08d      	sub	sp, #52	; 0x34
 8011cd2:	4688      	mov	r8, r1
 8011cd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011cd6:	f8d3 c000 	ldr.w	ip, [r3]
 8011cda:	680f      	ldr	r7, [r1, #0]
 8011cdc:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8011ce0:	eba7 070c 	sub.w	r7, r7, ip
 8011ce4:	42bc      	cmp	r4, r7
 8011ce6:	bfa8      	it	ge
 8011ce8:	463c      	movge	r4, r7
 8011cea:	ee07 4a90 	vmov	s15, r4
 8011cee:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8011cf2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011cf6:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8011cfa:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011cfe:	edd3 6a07 	vldr	s13, [r3, #28]
 8011d02:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011d06:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011d0a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d12:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8011d16:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8011d1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d20:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011d24:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011d28:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011d2c:	eb09 0e0c 	add.w	lr, r9, ip
 8011d30:	4571      	cmp	r1, lr
 8011d32:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011d36:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011d3a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011d3e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011d42:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011d46:	f340 808c 	ble.w	8011e62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011d4a:	eba1 060e 	sub.w	r6, r1, lr
 8011d4e:	fb96 f5f4 	sdiv	r5, r6, r4
 8011d52:	ee07 5a10 	vmov	s14, r5
 8011d56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011d5a:	2d00      	cmp	r5, #0
 8011d5c:	fb04 6615 	mls	r6, r4, r5, r6
 8011d60:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011d64:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011d68:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011d6c:	dd12      	ble.n	8011d94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011d6e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011d72:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011d7e:	bf14      	ite	ne
 8011d80:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011d84:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011d88:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011d8c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011d90:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011d94:	fb05 f204 	mul.w	r2, r5, r4
 8011d98:	1abf      	subs	r7, r7, r2
 8011d9a:	4494      	add	ip, r2
 8011d9c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011da0:	4411      	add	r1, r2
 8011da2:	eb09 020c 	add.w	r2, r9, ip
 8011da6:	443a      	add	r2, r7
 8011da8:	b209      	sxth	r1, r1
 8011daa:	428a      	cmp	r2, r1
 8011dac:	bfc4      	itt	gt
 8011dae:	eba1 0209 	subgt.w	r2, r1, r9
 8011db2:	eba2 070c 	subgt.w	r7, r2, ip
 8011db6:	2f00      	cmp	r7, #0
 8011db8:	dd50      	ble.n	8011e5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011dba:	fb97 f1f4 	sdiv	r1, r7, r4
 8011dbe:	fb04 7211 	mls	r2, r4, r1, r7
 8011dc2:	b90a      	cbnz	r2, 8011dc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011dc4:	4622      	mov	r2, r4
 8011dc6:	3901      	subs	r1, #1
 8011dc8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011dcc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011dd0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011dd4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011dd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011ddc:	ee17 7a90 	vmov	r7, s15
 8011de0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011de4:	eef0 6a42 	vmov.f32	s13, s4
 8011de8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011dec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011df0:	ee17 ca90 	vmov	ip, s15
 8011df4:	eeb0 7a61 	vmov.f32	s14, s3
 8011df8:	6840      	ldr	r0, [r0, #4]
 8011dfa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8011dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8011e02:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011e06:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011e0a:	9008      	str	r0, [sp, #32]
 8011e0c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011e0e:	695b      	ldr	r3, [r3, #20]
 8011e10:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011e14:	fb9c fcf4 	sdiv	ip, ip, r4
 8011e18:	445b      	add	r3, fp
 8011e1a:	9307      	str	r3, [sp, #28]
 8011e1c:	ee16 3a90 	vmov	r3, s13
 8011e20:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011e24:	fb0c 3306 	mla	r3, ip, r6, r3
 8011e28:	fb97 f7f4 	sdiv	r7, r7, r4
 8011e2c:	9302      	str	r3, [sp, #8]
 8011e2e:	ee17 3a10 	vmov	r3, s14
 8011e32:	2900      	cmp	r1, #0
 8011e34:	bfcc      	ite	gt
 8011e36:	46a1      	movgt	r9, r4
 8011e38:	4691      	movle	r9, r2
 8011e3a:	44b6      	add	lr, r6
 8011e3c:	fb04 e505 	mla	r5, r4, r5, lr
 8011e40:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011e44:	fb07 3706 	mla	r7, r7, r6, r3
 8011e48:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011e4c:	e9cd 4700 	strd	r4, r7, [sp]
 8011e50:	eba9 0306 	sub.w	r3, r9, r6
 8011e54:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011e58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011e5a:	47a0      	blx	r4
 8011e5c:	b00d      	add	sp, #52	; 0x34
 8011e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e62:	2500      	movs	r5, #0
 8011e64:	462e      	mov	r6, r5
 8011e66:	e799      	b.n	8011d9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	461d      	mov	r5, r3
 8011e6e:	b0db      	sub	sp, #364	; 0x16c
 8011e70:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011e74:	910f      	str	r1, [sp, #60]	; 0x3c
 8011e76:	930a      	str	r3, [sp, #40]	; 0x28
 8011e78:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011e7c:	9009      	str	r0, [sp, #36]	; 0x24
 8011e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e80:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011e84:	4614      	mov	r4, r2
 8011e86:	9310      	str	r3, [sp, #64]	; 0x40
 8011e88:	6803      	ldr	r3, [r0, #0]
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8011e8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011e92:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011e96:	47b8      	blx	r7
 8011e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e9a:	6058      	str	r0, [r3, #4]
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	f000 83a1 	beq.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ea2:	ed94 7a02 	vldr	s14, [r4, #8]
 8011ea6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8011eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011eae:	682b      	ldr	r3, [r5, #0]
 8011eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8011eb2:	686b      	ldr	r3, [r5, #4]
 8011eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8011eb6:	4bc1      	ldr	r3, [pc, #772]	; (80121bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011eb8:	7819      	ldrb	r1, [r3, #0]
 8011eba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011ebe:	2900      	cmp	r1, #0
 8011ec0:	bf16      	itet	ne
 8011ec2:	4619      	movne	r1, r3
 8011ec4:	4611      	moveq	r1, r2
 8011ec6:	4613      	movne	r3, r2
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	9116      	str	r1, [sp, #88]	; 0x58
 8011ece:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8011ed2:	f240 8387 	bls.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ed6:	ed94 7a07 	vldr	s14, [r4, #28]
 8011eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee2:	f240 837f 	bls.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ee6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8011eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef2:	f240 8377 	bls.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ef6:	6822      	ldr	r2, [r4, #0]
 8011ef8:	4bb1      	ldr	r3, [pc, #708]	; (80121c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8011efa:	429a      	cmp	r2, r3
 8011efc:	f2c0 8372 	blt.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f00:	49b0      	ldr	r1, [pc, #704]	; (80121c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011f02:	6963      	ldr	r3, [r4, #20]
 8011f04:	428a      	cmp	r2, r1
 8011f06:	f300 836d 	bgt.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f0a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011f0e:	48ae      	ldr	r0, [pc, #696]	; (80121c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011f10:	33ff      	adds	r3, #255	; 0xff
 8011f12:	4283      	cmp	r3, r0
 8011f14:	f200 8366 	bhi.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f1a:	4dac      	ldr	r5, [pc, #688]	; (80121cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011f1c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011f20:	33ff      	adds	r3, #255	; 0xff
 8011f22:	42ab      	cmp	r3, r5
 8011f24:	f200 835e 	bhi.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f28:	6862      	ldr	r2, [r4, #4]
 8011f2a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8011f2e:	33ff      	adds	r3, #255	; 0xff
 8011f30:	4283      	cmp	r3, r0
 8011f32:	f200 8357 	bhi.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f36:	69a1      	ldr	r1, [r4, #24]
 8011f38:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8011f3c:	33ff      	adds	r3, #255	; 0xff
 8011f3e:	4283      	cmp	r3, r0
 8011f40:	f200 8350 	bhi.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f46:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8011f4a:	30ff      	adds	r0, #255	; 0xff
 8011f4c:	42a8      	cmp	r0, r5
 8011f4e:	f200 8349 	bhi.w	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f52:	428a      	cmp	r2, r1
 8011f54:	f280 8110 	bge.w	8012178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	f300 8119 	bgt.w	8012190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011f5e:	4299      	cmp	r1, r3
 8011f60:	f280 811d 	bge.w	801219e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011f64:	2502      	movs	r5, #2
 8011f66:	2701      	movs	r7, #1
 8011f68:	46a9      	mov	r9, r5
 8011f6a:	46b8      	mov	r8, r7
 8011f6c:	f04f 0a00 	mov.w	sl, #0
 8011f70:	4621      	mov	r1, r4
 8011f72:	a849      	add	r0, sp, #292	; 0x124
 8011f74:	f002 ffae 	bl	8014ed4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011f78:	4622      	mov	r2, r4
 8011f7a:	4653      	mov	r3, sl
 8011f7c:	a949      	add	r1, sp, #292	; 0x124
 8011f7e:	f8cd 9000 	str.w	r9, [sp]
 8011f82:	a819      	add	r0, sp, #100	; 0x64
 8011f84:	f003 f8d8 	bl	8015138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011f88:	4622      	mov	r2, r4
 8011f8a:	4653      	mov	r3, sl
 8011f8c:	a949      	add	r1, sp, #292	; 0x124
 8011f8e:	f8cd 8000 	str.w	r8, [sp]
 8011f92:	a829      	add	r0, sp, #164	; 0xa4
 8011f94:	f003 f8d0 	bl	8015138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011f98:	4643      	mov	r3, r8
 8011f9a:	4622      	mov	r2, r4
 8011f9c:	a949      	add	r1, sp, #292	; 0x124
 8011f9e:	f8cd 9000 	str.w	r9, [sp]
 8011fa2:	a839      	add	r0, sp, #228	; 0xe4
 8011fa4:	f003 f8c8 	bl	8015138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011fa8:	42af      	cmp	r7, r5
 8011faa:	bfb5      	itete	lt
 8011fac:	2300      	movlt	r3, #0
 8011fae:	2301      	movge	r3, #1
 8011fb0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011fb2:	930e      	strge	r3, [sp, #56]	; 0x38
 8011fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fb6:	af12      	add	r7, sp, #72	; 0x48
 8011fb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011fbc:	bfb9      	ittee	lt
 8011fbe:	ad29      	addlt	r5, sp, #164	; 0xa4
 8011fc0:	ac19      	addlt	r4, sp, #100	; 0x64
 8011fc2:	ad19      	addge	r5, sp, #100	; 0x64
 8011fc4:	ac29      	addge	r4, sp, #164	; 0xa4
 8011fc6:	e887 0003 	stmia.w	r7, {r0, r1}
 8011fca:	b928      	cbnz	r0, 8011fd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011fcc:	4b80      	ldr	r3, [pc, #512]	; (80121d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011fce:	6818      	ldr	r0, [r3, #0]
 8011fd0:	6803      	ldr	r3, [r0, #0]
 8011fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd4:	4798      	blx	r3
 8011fd6:	6038      	str	r0, [r7, #0]
 8011fd8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011fda:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011fe2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8011fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fe8:	6963      	ldr	r3, [r4, #20]
 8011fea:	440b      	add	r3, r1
 8011fec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011ff0:	4408      	add	r0, r1
 8011ff2:	b200      	sxth	r0, r0
 8011ff4:	4283      	cmp	r3, r0
 8011ff6:	900d      	str	r0, [sp, #52]	; 0x34
 8011ff8:	f280 80dd 	bge.w	80121b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011ffc:	428b      	cmp	r3, r1
 8011ffe:	da08      	bge.n	8012012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012000:	2a00      	cmp	r2, #0
 8012002:	dd06      	ble.n	8012012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012004:	1acb      	subs	r3, r1, r3
 8012006:	429a      	cmp	r2, r3
 8012008:	f2c0 80e4 	blt.w	80121d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801200c:	2b00      	cmp	r3, #0
 801200e:	f300 80e2 	bgt.w	80121d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012012:	6967      	ldr	r7, [r4, #20]
 8012014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012016:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801201a:	443b      	add	r3, r7
 801201c:	461f      	mov	r7, r3
 801201e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012020:	1bdf      	subs	r7, r3, r7
 8012022:	4297      	cmp	r7, r2
 8012024:	bfa8      	it	ge
 8012026:	4617      	movge	r7, r2
 8012028:	2f00      	cmp	r7, #0
 801202a:	f340 8166 	ble.w	80122fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801202e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012030:	6829      	ldr	r1, [r5, #0]
 8012032:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012036:	f9bb 3000 	ldrsh.w	r3, [fp]
 801203a:	4411      	add	r1, r2
 801203c:	4299      	cmp	r1, r3
 801203e:	6820      	ldr	r0, [r4, #0]
 8012040:	dd1a      	ble.n	8012078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012042:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012046:	4402      	add	r2, r0
 8012048:	440b      	add	r3, r1
 801204a:	b21b      	sxth	r3, r3
 801204c:	429a      	cmp	r2, r3
 801204e:	dc13      	bgt.n	8012078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012050:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012054:	a912      	add	r1, sp, #72	; 0x48
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	9206      	str	r2, [sp, #24]
 801205a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801205c:	9500      	str	r5, [sp, #0]
 801205e:	9205      	str	r2, [sp, #20]
 8012060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012064:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012068:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801206a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801206e:	aa49      	add	r2, sp, #292	; 0x124
 8012070:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012074:	4623      	mov	r3, r4
 8012076:	47c8      	blx	r9
 8012078:	e9d4 2300 	ldrd	r2, r3, [r4]
 801207c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012080:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012084:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012088:	ee37 7a27 	vadd.f32	s14, s14, s15
 801208c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012090:	ed94 6a08 	vldr	s12, [r4, #32]
 8012094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012098:	edd4 6a07 	vldr	s13, [r4, #28]
 801209c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80120a0:	441a      	add	r2, r3
 80120a2:	6963      	ldr	r3, [r4, #20]
 80120a4:	68a1      	ldr	r1, [r4, #8]
 80120a6:	3301      	adds	r3, #1
 80120a8:	6163      	str	r3, [r4, #20]
 80120aa:	69a3      	ldr	r3, [r4, #24]
 80120ac:	6022      	str	r2, [r4, #0]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	61a3      	str	r3, [r4, #24]
 80120b2:	6923      	ldr	r3, [r4, #16]
 80120b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80120b8:	440b      	add	r3, r1
 80120ba:	68e1      	ldr	r1, [r4, #12]
 80120bc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80120c0:	428b      	cmp	r3, r1
 80120c2:	edc4 6a07 	vstr	s13, [r4, #28]
 80120c6:	6123      	str	r3, [r4, #16]
 80120c8:	db15      	blt.n	80120f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80120ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80120ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 80120d2:	edc4 6a07 	vstr	s13, [r4, #28]
 80120d6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80120da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80120de:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80120e2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80120e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120ea:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80120ee:	3201      	adds	r2, #1
 80120f0:	1a5b      	subs	r3, r3, r1
 80120f2:	6022      	str	r2, [r4, #0]
 80120f4:	6123      	str	r3, [r4, #16]
 80120f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80120fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120fe:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012102:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012106:	ee37 7a27 	vadd.f32	s14, s14, s15
 801210a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801210e:	ed95 6a08 	vldr	s12, [r5, #32]
 8012112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012116:	edd5 6a07 	vldr	s13, [r5, #28]
 801211a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801211e:	441a      	add	r2, r3
 8012120:	696b      	ldr	r3, [r5, #20]
 8012122:	68a9      	ldr	r1, [r5, #8]
 8012124:	3301      	adds	r3, #1
 8012126:	616b      	str	r3, [r5, #20]
 8012128:	69ab      	ldr	r3, [r5, #24]
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	3b01      	subs	r3, #1
 801212e:	61ab      	str	r3, [r5, #24]
 8012130:	692b      	ldr	r3, [r5, #16]
 8012132:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012136:	440b      	add	r3, r1
 8012138:	68e9      	ldr	r1, [r5, #12]
 801213a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801213e:	428b      	cmp	r3, r1
 8012140:	edc5 6a07 	vstr	s13, [r5, #28]
 8012144:	612b      	str	r3, [r5, #16]
 8012146:	db15      	blt.n	8012174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012148:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801214c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012150:	edc5 6a07 	vstr	s13, [r5, #28]
 8012154:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012158:	ee36 7a87 	vadd.f32	s14, s13, s14
 801215c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012160:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012168:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801216c:	3201      	adds	r2, #1
 801216e:	1a5b      	subs	r3, r3, r1
 8012170:	602a      	str	r2, [r5, #0]
 8012172:	612b      	str	r3, [r5, #16]
 8012174:	3f01      	subs	r7, #1
 8012176:	e757      	b.n	8012028 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012178:	4299      	cmp	r1, r3
 801217a:	dc13      	bgt.n	80121a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801217c:	429a      	cmp	r2, r3
 801217e:	da14      	bge.n	80121aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012180:	2502      	movs	r5, #2
 8012182:	2703      	movs	r7, #3
 8012184:	46a9      	mov	r9, r5
 8012186:	f04f 0800 	mov.w	r8, #0
 801218a:	f04f 0a01 	mov.w	sl, #1
 801218e:	e6ef      	b.n	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012190:	2501      	movs	r5, #1
 8012192:	2700      	movs	r7, #0
 8012194:	46a9      	mov	r9, r5
 8012196:	46b8      	mov	r8, r7
 8012198:	f04f 0a02 	mov.w	sl, #2
 801219c:	e6e8      	b.n	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801219e:	2501      	movs	r5, #1
 80121a0:	2702      	movs	r7, #2
 80121a2:	e6e1      	b.n	8011f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80121a4:	2500      	movs	r5, #0
 80121a6:	2701      	movs	r7, #1
 80121a8:	e7f4      	b.n	8012194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80121aa:	2702      	movs	r7, #2
 80121ac:	2503      	movs	r5, #3
 80121ae:	f04f 0900 	mov.w	r9, #0
 80121b2:	46b8      	mov	r8, r7
 80121b4:	e7e9      	b.n	801218a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80121b6:	4613      	mov	r3, r2
 80121b8:	e728      	b.n	801200c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80121ba:	bf00      	nop
 80121bc:	2001fd98 	.word	0x2001fd98
 80121c0:	fffd8f01 	.word	0xfffd8f01
 80121c4:	00027100 	.word	0x00027100
 80121c8:	0004e1ff 	.word	0x0004e1ff
 80121cc:	0004e1fe 	.word	0x0004e1fe
 80121d0:	2001fda0 	.word	0x2001fda0
 80121d4:	4613      	mov	r3, r2
 80121d6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80121da:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80121de:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80121e2:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80121e6:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80121ea:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80121ee:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80121f2:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80121f6:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80121fa:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80121fe:	469e      	mov	lr, r3
 8012200:	469c      	mov	ip, r3
 8012202:	f04f 0900 	mov.w	r9, #0
 8012206:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012208:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801220a:	9111      	str	r1, [sp, #68]	; 0x44
 801220c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012210:	f1bc 0f00 	cmp.w	ip, #0
 8012214:	d147      	bne.n	80122a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012216:	eb03 0c07 	add.w	ip, r3, r7
 801221a:	1ad7      	subs	r7, r2, r3
 801221c:	f1b9 0f00 	cmp.w	r9, #0
 8012220:	d009      	beq.n	8012236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012222:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8012226:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801222a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801222e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8012232:	9029      	str	r0, [sp, #164]	; 0xa4
 8012234:	912d      	str	r1, [sp, #180]	; 0xb4
 8012236:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801223a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801223e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012242:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012246:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801224a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801224e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012252:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012256:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801225a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801225e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012262:	f04f 0800 	mov.w	r8, #0
 8012266:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012268:	9111      	str	r1, [sp, #68]	; 0x44
 801226a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801226e:	f1be 0f00 	cmp.w	lr, #0
 8012272:	d031      	beq.n	80122d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012274:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012276:	4450      	add	r0, sl
 8012278:	4431      	add	r1, r6
 801227a:	4549      	cmp	r1, r9
 801227c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012280:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012284:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012288:	db08      	blt.n	801229c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801228a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801228e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012292:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012296:	3001      	adds	r0, #1
 8012298:	eba1 0109 	sub.w	r1, r1, r9
 801229c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80122a0:	f04f 0801 	mov.w	r8, #1
 80122a4:	e7e3      	b.n	801226e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80122a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80122a8:	4450      	add	r0, sl
 80122aa:	4431      	add	r1, r6
 80122ac:	4541      	cmp	r1, r8
 80122ae:	ee37 7a24 	vadd.f32	s14, s14, s9
 80122b2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80122b6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80122ba:	db08      	blt.n	80122ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80122bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80122c0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80122c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80122c8:	3001      	adds	r0, #1
 80122ca:	eba1 0108 	sub.w	r1, r1, r8
 80122ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80122d2:	f04f 0901 	mov.w	r9, #1
 80122d6:	e79b      	b.n	8012210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80122d8:	449c      	add	ip, r3
 80122da:	1aff      	subs	r7, r7, r3
 80122dc:	f1b8 0f00 	cmp.w	r8, #0
 80122e0:	d009      	beq.n	80122f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80122e2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80122e6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80122ea:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80122ee:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80122f2:	9019      	str	r0, [sp, #100]	; 0x64
 80122f4:	911d      	str	r1, [sp, #116]	; 0x74
 80122f6:	1ad2      	subs	r2, r2, r3
 80122f8:	e68b      	b.n	8012012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80122fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f000 80d1 	beq.w	80124a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012304:	ad19      	add	r5, sp, #100	; 0x64
 8012306:	ac39      	add	r4, sp, #228	; 0xe4
 8012308:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801230a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801230e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012312:	930c      	str	r3, [sp, #48]	; 0x30
 8012314:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012316:	6963      	ldr	r3, [r4, #20]
 8012318:	440b      	add	r3, r1
 801231a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801231e:	4408      	add	r0, r1
 8012320:	b200      	sxth	r0, r0
 8012322:	4283      	cmp	r3, r0
 8012324:	900d      	str	r0, [sp, #52]	; 0x34
 8012326:	f280 80c1 	bge.w	80124ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801232a:	428b      	cmp	r3, r1
 801232c:	da08      	bge.n	8012340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801232e:	2a00      	cmp	r2, #0
 8012330:	dd06      	ble.n	8012340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012332:	1acb      	subs	r3, r1, r3
 8012334:	429a      	cmp	r2, r3
 8012336:	f2c0 80bb 	blt.w	80124b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801233a:	2b00      	cmp	r3, #0
 801233c:	f300 80b9 	bgt.w	80124b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012340:	6967      	ldr	r7, [r4, #20]
 8012342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012344:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012348:	443b      	add	r3, r7
 801234a:	461f      	mov	r7, r3
 801234c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801234e:	1bdf      	subs	r7, r3, r7
 8012350:	4297      	cmp	r7, r2
 8012352:	bfa8      	it	ge
 8012354:	4617      	movge	r7, r2
 8012356:	2f00      	cmp	r7, #0
 8012358:	f340 813c 	ble.w	80125d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801235c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801235e:	6829      	ldr	r1, [r5, #0]
 8012360:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012364:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012368:	4411      	add	r1, r2
 801236a:	4299      	cmp	r1, r3
 801236c:	6820      	ldr	r0, [r4, #0]
 801236e:	dd1a      	ble.n	80123a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012370:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012374:	4402      	add	r2, r0
 8012376:	440b      	add	r3, r1
 8012378:	b21b      	sxth	r3, r3
 801237a:	429a      	cmp	r2, r3
 801237c:	dc13      	bgt.n	80123a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801237e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012382:	a912      	add	r1, sp, #72	; 0x48
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	9206      	str	r2, [sp, #24]
 8012388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801238a:	9500      	str	r5, [sp, #0]
 801238c:	9205      	str	r2, [sp, #20]
 801238e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012392:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012396:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012398:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801239c:	aa49      	add	r2, sp, #292	; 0x124
 801239e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80123a2:	4623      	mov	r3, r4
 80123a4:	47c8      	blx	r9
 80123a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123aa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80123ae:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80123b2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80123b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123ba:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80123be:	ed94 6a08 	vldr	s12, [r4, #32]
 80123c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123c6:	edd4 6a07 	vldr	s13, [r4, #28]
 80123ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80123ce:	441a      	add	r2, r3
 80123d0:	6963      	ldr	r3, [r4, #20]
 80123d2:	68a1      	ldr	r1, [r4, #8]
 80123d4:	3301      	adds	r3, #1
 80123d6:	6163      	str	r3, [r4, #20]
 80123d8:	69a3      	ldr	r3, [r4, #24]
 80123da:	6022      	str	r2, [r4, #0]
 80123dc:	3b01      	subs	r3, #1
 80123de:	61a3      	str	r3, [r4, #24]
 80123e0:	6923      	ldr	r3, [r4, #16]
 80123e2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80123e6:	440b      	add	r3, r1
 80123e8:	68e1      	ldr	r1, [r4, #12]
 80123ea:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80123ee:	428b      	cmp	r3, r1
 80123f0:	edc4 6a07 	vstr	s13, [r4, #28]
 80123f4:	6123      	str	r3, [r4, #16]
 80123f6:	db15      	blt.n	8012424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80123f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80123fc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012400:	edc4 6a07 	vstr	s13, [r4, #28]
 8012404:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012408:	ee36 7a87 	vadd.f32	s14, s13, s14
 801240c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012410:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012418:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801241c:	3201      	adds	r2, #1
 801241e:	1a5b      	subs	r3, r3, r1
 8012420:	6022      	str	r2, [r4, #0]
 8012422:	6123      	str	r3, [r4, #16]
 8012424:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012428:	e9d5 2300 	ldrd	r2, r3, [r5]
 801242c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012430:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012438:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801243c:	ed95 6a08 	vldr	s12, [r5, #32]
 8012440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012444:	edd5 6a07 	vldr	s13, [r5, #28]
 8012448:	ee76 6a86 	vadd.f32	s13, s13, s12
 801244c:	441a      	add	r2, r3
 801244e:	696b      	ldr	r3, [r5, #20]
 8012450:	68a9      	ldr	r1, [r5, #8]
 8012452:	3301      	adds	r3, #1
 8012454:	616b      	str	r3, [r5, #20]
 8012456:	69ab      	ldr	r3, [r5, #24]
 8012458:	602a      	str	r2, [r5, #0]
 801245a:	3b01      	subs	r3, #1
 801245c:	61ab      	str	r3, [r5, #24]
 801245e:	692b      	ldr	r3, [r5, #16]
 8012460:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012464:	440b      	add	r3, r1
 8012466:	68e9      	ldr	r1, [r5, #12]
 8012468:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801246c:	428b      	cmp	r3, r1
 801246e:	edc5 6a07 	vstr	s13, [r5, #28]
 8012472:	612b      	str	r3, [r5, #16]
 8012474:	db15      	blt.n	80124a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012476:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801247a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801247e:	edc5 6a07 	vstr	s13, [r5, #28]
 8012482:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012486:	ee36 7a87 	vadd.f32	s14, s13, s14
 801248a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801248e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012496:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801249a:	3201      	adds	r2, #1
 801249c:	1a5b      	subs	r3, r3, r1
 801249e:	602a      	str	r2, [r5, #0]
 80124a0:	612b      	str	r3, [r5, #16]
 80124a2:	3f01      	subs	r7, #1
 80124a4:	e757      	b.n	8012356 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80124a6:	ad39      	add	r5, sp, #228	; 0xe4
 80124a8:	ac19      	add	r4, sp, #100	; 0x64
 80124aa:	e72d      	b.n	8012308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80124ac:	4613      	mov	r3, r2
 80124ae:	e744      	b.n	801233a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80124b0:	4613      	mov	r3, r2
 80124b2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80124b6:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80124ba:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80124be:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80124c2:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80124c6:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80124ca:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80124ce:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80124d2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80124d6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80124da:	469e      	mov	lr, r3
 80124dc:	461f      	mov	r7, r3
 80124de:	f04f 0900 	mov.w	r9, #0
 80124e2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80124e4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80124e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80124ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80124ee:	960e      	str	r6, [sp, #56]	; 0x38
 80124f0:	2f00      	cmp	r7, #0
 80124f2:	d146      	bne.n	8012582 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80124f4:	449c      	add	ip, r3
 80124f6:	1ad7      	subs	r7, r2, r3
 80124f8:	f1b9 0f00 	cmp.w	r9, #0
 80124fc:	d009      	beq.n	8012512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80124fe:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8012502:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8012506:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801250a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801250e:	9039      	str	r0, [sp, #228]	; 0xe4
 8012510:	913d      	str	r1, [sp, #244]	; 0xf4
 8012512:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012516:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801251a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801251e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012522:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012526:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801252a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801252e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012532:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012536:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801253a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801253e:	f04f 0800 	mov.w	r8, #0
 8012542:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012544:	910e      	str	r1, [sp, #56]	; 0x38
 8012546:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801254a:	f1be 0f00 	cmp.w	lr, #0
 801254e:	d030      	beq.n	80125b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012550:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012552:	4450      	add	r0, sl
 8012554:	4431      	add	r1, r6
 8012556:	4549      	cmp	r1, r9
 8012558:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801255c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012560:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012564:	db08      	blt.n	8012578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012566:	ee77 7a85 	vadd.f32	s15, s15, s10
 801256a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801256e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012572:	3001      	adds	r0, #1
 8012574:	eba1 0109 	sub.w	r1, r1, r9
 8012578:	f10e 3eff 	add.w	lr, lr, #4294967295
 801257c:	f04f 0801 	mov.w	r8, #1
 8012580:	e7e3      	b.n	801254a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012582:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012584:	4450      	add	r0, sl
 8012586:	4431      	add	r1, r6
 8012588:	4541      	cmp	r1, r8
 801258a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801258e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012592:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012596:	db08      	blt.n	80125aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012598:	ee76 6a85 	vadd.f32	s13, s13, s10
 801259c:	ee37 7a25 	vadd.f32	s14, s14, s11
 80125a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80125a4:	3001      	adds	r0, #1
 80125a6:	eba1 0108 	sub.w	r1, r1, r8
 80125aa:	3f01      	subs	r7, #1
 80125ac:	f04f 0901 	mov.w	r9, #1
 80125b0:	e79e      	b.n	80124f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80125b2:	449c      	add	ip, r3
 80125b4:	1aff      	subs	r7, r7, r3
 80125b6:	f1b8 0f00 	cmp.w	r8, #0
 80125ba:	d009      	beq.n	80125d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80125bc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80125c0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80125c4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80125c8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80125cc:	9019      	str	r0, [sp, #100]	; 0x64
 80125ce:	911d      	str	r1, [sp, #116]	; 0x74
 80125d0:	1ad2      	subs	r2, r2, r3
 80125d2:	e6b5      	b.n	8012340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80125d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	b923      	cbnz	r3, 80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80125da:	4b04      	ldr	r3, [pc, #16]	; (80125ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80125dc:	6818      	ldr	r0, [r3, #0]
 80125de:	6803      	ldr	r3, [r0, #0]
 80125e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e2:	4798      	blx	r3
 80125e4:	b05b      	add	sp, #364	; 0x16c
 80125e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ea:	bf00      	nop
 80125ec:	2001fda0 	.word	0x2001fda0

080125f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80125f0:	2b03      	cmp	r3, #3
 80125f2:	d818      	bhi.n	8012626 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80125f4:	e8df f003 	tbb	[pc, r3]
 80125f8:	130d0602 	.word	0x130d0602
 80125fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012600:	1850      	adds	r0, r2, r1
 8012602:	4770      	bx	lr
 8012604:	8803      	ldrh	r3, [r0, #0]
 8012606:	8880      	ldrh	r0, [r0, #4]
 8012608:	4418      	add	r0, r3
 801260a:	b200      	sxth	r0, r0
 801260c:	1a80      	subs	r0, r0, r2
 801260e:	3801      	subs	r0, #1
 8012610:	4770      	bx	lr
 8012612:	8803      	ldrh	r3, [r0, #0]
 8012614:	8880      	ldrh	r0, [r0, #4]
 8012616:	4418      	add	r0, r3
 8012618:	b200      	sxth	r0, r0
 801261a:	1a40      	subs	r0, r0, r1
 801261c:	e7f7      	b.n	801260e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801261e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012622:	4410      	add	r0, r2
 8012624:	4770      	bx	lr
 8012626:	2000      	movs	r0, #0
 8012628:	4770      	bx	lr

0801262a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801262a:	2b03      	cmp	r3, #3
 801262c:	d817      	bhi.n	801265e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801262e:	e8df f003 	tbb	[pc, r3]
 8012632:	0602      	.short	0x0602
 8012634:	1009      	.short	0x1009
 8012636:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801263a:	1850      	adds	r0, r2, r1
 801263c:	4770      	bx	lr
 801263e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012642:	e7fa      	b.n	801263a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012644:	8843      	ldrh	r3, [r0, #2]
 8012646:	88c0      	ldrh	r0, [r0, #6]
 8012648:	4418      	add	r0, r3
 801264a:	b200      	sxth	r0, r0
 801264c:	1a80      	subs	r0, r0, r2
 801264e:	3801      	subs	r0, #1
 8012650:	4770      	bx	lr
 8012652:	8843      	ldrh	r3, [r0, #2]
 8012654:	88c0      	ldrh	r0, [r0, #6]
 8012656:	4418      	add	r0, r3
 8012658:	b200      	sxth	r0, r0
 801265a:	1a40      	subs	r0, r0, r1
 801265c:	e7f7      	b.n	801264e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801265e:	2000      	movs	r0, #0
 8012660:	4770      	bx	lr
	...

08012664 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012664:	2200      	movs	r2, #0
 8012666:	4b01      	ldr	r3, [pc, #4]	; (801266c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	4770      	bx	lr
 801266c:	2001fda8 	.word	0x2001fda8

08012670 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012670:	4603      	mov	r3, r0
 8012672:	b1c8      	cbz	r0, 80126a8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012674:	0c02      	lsrs	r2, r0, #16
 8012676:	0412      	lsls	r2, r2, #16
 8012678:	b9a2      	cbnz	r2, 80126a4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801267a:	0403      	lsls	r3, r0, #16
 801267c:	2010      	movs	r0, #16
 801267e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012682:	bf04      	itt	eq
 8012684:	021b      	lsleq	r3, r3, #8
 8012686:	3008      	addeq	r0, #8
 8012688:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801268c:	bf04      	itt	eq
 801268e:	011b      	lsleq	r3, r3, #4
 8012690:	3004      	addeq	r0, #4
 8012692:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012696:	bf04      	itt	eq
 8012698:	009b      	lsleq	r3, r3, #2
 801269a:	3002      	addeq	r0, #2
 801269c:	2b00      	cmp	r3, #0
 801269e:	db04      	blt.n	80126aa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80126a0:	3001      	adds	r0, #1
 80126a2:	4770      	bx	lr
 80126a4:	2000      	movs	r0, #0
 80126a6:	e7ea      	b.n	801267e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80126a8:	2020      	movs	r0, #32
 80126aa:	4770      	bx	lr

080126ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	b087      	sub	sp, #28
 80126b2:	4681      	mov	r9, r0
 80126b4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80126b8:	4610      	mov	r0, r2
 80126ba:	4698      	mov	r8, r3
 80126bc:	460d      	mov	r5, r1
 80126be:	b981      	cbnz	r1, 80126e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80126c0:	b14b      	cbz	r3, 80126d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80126c2:	460b      	mov	r3, r1
 80126c4:	e9cd 4700 	strd	r4, r7, [sp]
 80126c8:	464a      	mov	r2, r9
 80126ca:	4641      	mov	r1, r8
 80126cc:	f7ff ffee 	bl	80126ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80126d0:	b007      	add	sp, #28
 80126d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d6:	f04f 33ff 	mov.w	r3, #4294967295
 80126da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80126de:	603b      	str	r3, [r7, #0]
 80126e0:	e7f6      	b.n	80126d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80126e2:	fa32 fa01 	lsrs.w	sl, r2, r1
 80126e6:	d107      	bne.n	80126f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80126e8:	fb09 f602 	mul.w	r6, r9, r2
 80126ec:	fbb6 f0f4 	udiv	r0, r6, r4
 80126f0:	fb04 6610 	mls	r6, r4, r0, r6
 80126f4:	603e      	str	r6, [r7, #0]
 80126f6:	e7eb      	b.n	80126d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80126f8:	fa09 fb01 	lsl.w	fp, r9, r1
 80126fc:	fbbb f3f4 	udiv	r3, fp, r4
 8012700:	2601      	movs	r6, #1
 8012702:	9302      	str	r3, [sp, #8]
 8012704:	408e      	lsls	r6, r1
 8012706:	fb0a f303 	mul.w	r3, sl, r3
 801270a:	3e01      	subs	r6, #1
 801270c:	4016      	ands	r6, r2
 801270e:	4630      	mov	r0, r6
 8012710:	9303      	str	r3, [sp, #12]
 8012712:	f7ff ffad 	bl	8012670 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012716:	464a      	mov	r2, r9
 8012718:	460b      	mov	r3, r1
 801271a:	e9cd 4700 	strd	r4, r7, [sp]
 801271e:	4601      	mov	r1, r0
 8012720:	4630      	mov	r0, r6
 8012722:	f7ff ffc3 	bl	80126ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012726:	9b02      	ldr	r3, [sp, #8]
 8012728:	4606      	mov	r6, r0
 801272a:	fb04 bb13 	mls	fp, r4, r3, fp
 801272e:	4658      	mov	r0, fp
 8012730:	eb05 0108 	add.w	r1, r5, r8
 8012734:	f7ff ff9c 	bl	8012670 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012738:	ab05      	add	r3, sp, #20
 801273a:	e9cd 4300 	strd	r4, r3, [sp]
 801273e:	465a      	mov	r2, fp
 8012740:	4603      	mov	r3, r0
 8012742:	4650      	mov	r0, sl
 8012744:	f7ff ffb2 	bl	80126ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012748:	6839      	ldr	r1, [r7, #0]
 801274a:	9a05      	ldr	r2, [sp, #20]
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	4411      	add	r1, r2
 8012750:	fbb1 f2f4 	udiv	r2, r1, r4
 8012754:	fb04 1412 	mls	r4, r4, r2, r1
 8012758:	18d3      	adds	r3, r2, r3
 801275a:	441e      	add	r6, r3
 801275c:	4430      	add	r0, r6
 801275e:	603c      	str	r4, [r7, #0]
 8012760:	e7b6      	b.n	80126d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08012762 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012766:	b085      	sub	sp, #20
 8012768:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801276a:	f1b0 0900 	subs.w	r9, r0, #0
 801276e:	461d      	mov	r5, r3
 8012770:	bfbf      	itttt	lt
 8012772:	6823      	ldrlt	r3, [r4, #0]
 8012774:	f1c9 0900 	rsblt	r9, r9, #0
 8012778:	425b      	neglt	r3, r3
 801277a:	6023      	strlt	r3, [r4, #0]
 801277c:	bfb4      	ite	lt
 801277e:	f04f 36ff 	movlt.w	r6, #4294967295
 8012782:	2601      	movge	r6, #1
 8012784:	2a00      	cmp	r2, #0
 8012786:	4617      	mov	r7, r2
 8012788:	da04      	bge.n	8012794 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	4257      	negs	r7, r2
 801278e:	425b      	negs	r3, r3
 8012790:	4276      	negs	r6, r6
 8012792:	6023      	str	r3, [r4, #0]
 8012794:	2d00      	cmp	r5, #0
 8012796:	4638      	mov	r0, r7
 8012798:	bfba      	itte	lt
 801279a:	426d      	neglt	r5, r5
 801279c:	f04f 38ff 	movlt.w	r8, #4294967295
 80127a0:	f04f 0801 	movge.w	r8, #1
 80127a4:	f7ff ff64 	bl	8012670 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80127a8:	ab03      	add	r3, sp, #12
 80127aa:	e9cd 5300 	strd	r5, r3, [sp]
 80127ae:	463a      	mov	r2, r7
 80127b0:	4603      	mov	r3, r0
 80127b2:	4648      	mov	r0, r9
 80127b4:	f7ff ff7a 	bl	80126ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	9a03      	ldr	r2, [sp, #12]
 80127bc:	4546      	cmp	r6, r8
 80127be:	441a      	add	r2, r3
 80127c0:	fb92 f3f5 	sdiv	r3, r2, r5
 80127c4:	4418      	add	r0, r3
 80127c6:	fb05 2313 	mls	r3, r5, r3, r2
 80127ca:	bf18      	it	ne
 80127cc:	4240      	negne	r0, r0
 80127ce:	1c72      	adds	r2, r6, #1
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	d105      	bne.n	80127e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f1c3 0200 	rsb	r2, r3, #0
 80127da:	db0b      	blt.n	80127f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80127dc:	6022      	str	r2, [r4, #0]
 80127de:	e006      	b.n	80127ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80127e0:	2e01      	cmp	r6, #1
 80127e2:	d104      	bne.n	80127ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da02      	bge.n	80127ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80127e8:	442b      	add	r3, r5
 80127ea:	3801      	subs	r0, #1
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	b005      	add	sp, #20
 80127f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127f4:	3801      	subs	r0, #1
 80127f6:	1b52      	subs	r2, r2, r5
 80127f8:	e7f0      	b.n	80127dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080127fc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80127fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012800:	4c1c      	ldr	r4, [pc, #112]	; (8012874 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8012802:	4605      	mov	r5, r0
 8012804:	69a3      	ldr	r3, [r4, #24]
 8012806:	6807      	ldr	r7, [r0, #0]
 8012808:	b92b      	cbnz	r3, 8012816 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801280a:	6840      	ldr	r0, [r0, #4]
 801280c:	e9c5 7000 	strd	r7, r0, [r5]
 8012810:	b004      	add	sp, #16
 8012812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012816:	f04f 0802 	mov.w	r8, #2
 801281a:	fb93 f1f8 	sdiv	r1, r3, r8
 801281e:	68a2      	ldr	r2, [r4, #8]
 8012820:	ae04      	add	r6, sp, #16
 8012822:	440a      	add	r2, r1
 8012824:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012828:	69e1      	ldr	r1, [r4, #28]
 801282a:	463a      	mov	r2, r7
 801282c:	9600      	str	r6, [sp, #0]
 801282e:	6820      	ldr	r0, [r4, #0]
 8012830:	f7ff ff97 	bl	8012762 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012834:	69a3      	ldr	r3, [r4, #24]
 8012836:	4607      	mov	r7, r0
 8012838:	686a      	ldr	r2, [r5, #4]
 801283a:	6a21      	ldr	r1, [r4, #32]
 801283c:	9600      	str	r6, [sp, #0]
 801283e:	6860      	ldr	r0, [r4, #4]
 8012840:	f7ff ff8f 	bl	8012762 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012844:	69a3      	ldr	r3, [r4, #24]
 8012846:	6962      	ldr	r2, [r4, #20]
 8012848:	fb93 f8f8 	sdiv	r8, r3, r8
 801284c:	4442      	add	r2, r8
 801284e:	9203      	str	r2, [sp, #12]
 8012850:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012852:	682a      	ldr	r2, [r5, #0]
 8012854:	4407      	add	r7, r0
 8012856:	9600      	str	r6, [sp, #0]
 8012858:	68e0      	ldr	r0, [r4, #12]
 801285a:	f7ff ff82 	bl	8012762 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801285e:	9600      	str	r6, [sp, #0]
 8012860:	4680      	mov	r8, r0
 8012862:	69a3      	ldr	r3, [r4, #24]
 8012864:	686a      	ldr	r2, [r5, #4]
 8012866:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012868:	6920      	ldr	r0, [r4, #16]
 801286a:	f7ff ff7a 	bl	8012762 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801286e:	4440      	add	r0, r8
 8012870:	e7cc      	b.n	801280c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012872:	bf00      	nop
 8012874:	2001fdac 	.word	0x2001fdac

08012878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012878:	4b07      	ldr	r3, [pc, #28]	; (8012898 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b01      	cmp	r3, #1
 801287e:	d109      	bne.n	8012894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012880:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012884:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012888:	8003      	strh	r3, [r0, #0]
 801288a:	4b04      	ldr	r3, [pc, #16]	; (801289c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801288c:	881b      	ldrh	r3, [r3, #0]
 801288e:	3b01      	subs	r3, #1
 8012890:	1a9b      	subs	r3, r3, r2
 8012892:	800b      	strh	r3, [r1, #0]
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	2001fd98 	.word	0x2001fd98
 801289c:	2001fd94 	.word	0x2001fd94

080128a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80128a0:	b510      	push	{r4, lr}
 80128a2:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d108      	bne.n	80128bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80128aa:	4b06      	ldr	r3, [pc, #24]	; (80128c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80128ac:	880c      	ldrh	r4, [r1, #0]
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	1b1b      	subs	r3, r3, r4
 80128b8:	8003      	strh	r3, [r0, #0]
 80128ba:	800a      	strh	r2, [r1, #0]
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	bf00      	nop
 80128c0:	2001fd98 	.word	0x2001fd98
 80128c4:	2001fd94 	.word	0x2001fd94

080128c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	4b0a      	ldr	r3, [pc, #40]	; (80128f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d10e      	bne.n	80128f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80128d2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80128d6:	8843      	ldrh	r3, [r0, #2]
 80128d8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80128dc:	18ca      	adds	r2, r1, r3
 80128de:	4b06      	ldr	r3, [pc, #24]	; (80128f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80128e0:	8044      	strh	r4, [r0, #2]
 80128e2:	881b      	ldrh	r3, [r3, #0]
 80128e4:	1a9b      	subs	r3, r3, r2
 80128e6:	8003      	strh	r3, [r0, #0]
 80128e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80128ec:	8081      	strh	r1, [r0, #4]
 80128ee:	80c3      	strh	r3, [r0, #6]
 80128f0:	bd10      	pop	{r4, pc}
 80128f2:	bf00      	nop
 80128f4:	2001fd98 	.word	0x2001fd98
 80128f8:	2001fd94 	.word	0x2001fd94

080128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80128fc:	4b08      	ldr	r3, [pc, #32]	; (8012920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d10c      	bne.n	801291e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8012904:	8803      	ldrh	r3, [r0, #0]
 8012906:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801290a:	8842      	ldrh	r2, [r0, #2]
 801290c:	8002      	strh	r2, [r0, #0]
 801290e:	185a      	adds	r2, r3, r1
 8012910:	4b04      	ldr	r3, [pc, #16]	; (8012924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8012912:	881b      	ldrh	r3, [r3, #0]
 8012914:	1a9b      	subs	r3, r3, r2
 8012916:	8043      	strh	r3, [r0, #2]
 8012918:	88c3      	ldrh	r3, [r0, #6]
 801291a:	80c1      	strh	r1, [r0, #6]
 801291c:	8083      	strh	r3, [r0, #4]
 801291e:	4770      	bx	lr
 8012920:	2001fd98 	.word	0x2001fd98
 8012924:	2001fd94 	.word	0x2001fd94

08012928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012928:	b510      	push	{r4, lr}
 801292a:	4b07      	ldr	r3, [pc, #28]	; (8012948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b01      	cmp	r3, #1
 8012930:	d108      	bne.n	8012944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012932:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012936:	f9b0 4000 	ldrsh.w	r4, [r0]
 801293a:	8003      	strh	r3, [r0, #0]
 801293c:	8893      	ldrh	r3, [r2, #4]
 801293e:	3b01      	subs	r3, #1
 8012940:	1b1b      	subs	r3, r3, r4
 8012942:	800b      	strh	r3, [r1, #0]
 8012944:	bd10      	pop	{r4, pc}
 8012946:	bf00      	nop
 8012948:	2001fd98 	.word	0x2001fd98

0801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801294c:	b510      	push	{r4, lr}
 801294e:	4b0a      	ldr	r3, [pc, #40]	; (8012978 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012950:	460a      	mov	r2, r1
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d10d      	bne.n	8012974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012958:	8881      	ldrh	r1, [r0, #4]
 801295a:	8803      	ldrh	r3, [r0, #0]
 801295c:	440b      	add	r3, r1
 801295e:	4601      	mov	r1, r0
 8012960:	3b01      	subs	r3, #1
 8012962:	f821 3b02 	strh.w	r3, [r1], #2
 8012966:	f7ff ffdf 	bl	8012928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801296a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801296e:	88c2      	ldrh	r2, [r0, #6]
 8012970:	80c3      	strh	r3, [r0, #6]
 8012972:	8082      	strh	r2, [r0, #4]
 8012974:	bd10      	pop	{r4, pc}
 8012976:	bf00      	nop
 8012978:	2001fd98 	.word	0x2001fd98

0801297c <_ZN8touchgfx11Application13requestRedrawEv>:
 801297c:	2100      	movs	r1, #0
 801297e:	4b06      	ldr	r3, [pc, #24]	; (8012998 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8012980:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8012984:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012988:	4b04      	ldr	r3, [pc, #16]	; (801299c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801298a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801298e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012992:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8012996:	4770      	bx	lr
 8012998:	2001fd94 	.word	0x2001fd94
 801299c:	2001fd96 	.word	0x2001fd96

080129a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80129a0:	4b03      	ldr	r3, [pc, #12]	; (80129b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80129a2:	6818      	ldr	r0, [r3, #0]
 80129a4:	b110      	cbz	r0, 80129ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	699b      	ldr	r3, [r3, #24]
 80129aa:	4718      	bx	r3
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	2001fddc 	.word	0x2001fddc

080129b4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80129b4:	4770      	bx	lr
	...

080129b8 <_ZN8touchgfx11Application4drawEv>:
 80129b8:	b507      	push	{r0, r1, r2, lr}
 80129ba:	2100      	movs	r1, #0
 80129bc:	4b08      	ldr	r3, [pc, #32]	; (80129e0 <_ZN8touchgfx11Application4drawEv+0x28>)
 80129be:	9100      	str	r1, [sp, #0]
 80129c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129c4:	4b07      	ldr	r3, [pc, #28]	; (80129e4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80129c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80129ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129ce:	4669      	mov	r1, sp
 80129d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80129d4:	6803      	ldr	r3, [r0, #0]
 80129d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d8:	4798      	blx	r3
 80129da:	b003      	add	sp, #12
 80129dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80129e0:	2001fd94 	.word	0x2001fd94
 80129e4:	2001fd96 	.word	0x2001fd96

080129e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80129e8:	4b03      	ldr	r3, [pc, #12]	; (80129f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80129ea:	6818      	ldr	r0, [r3, #0]
 80129ec:	b110      	cbz	r0, 80129f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80129ee:	6803      	ldr	r3, [r0, #0]
 80129f0:	69db      	ldr	r3, [r3, #28]
 80129f2:	4718      	bx	r3
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	2001fddc 	.word	0x2001fddc

080129fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80129fc:	4b03      	ldr	r3, [pc, #12]	; (8012a0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80129fe:	6818      	ldr	r0, [r3, #0]
 8012a00:	b110      	cbz	r0, 8012a08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012a02:	6803      	ldr	r3, [r0, #0]
 8012a04:	6a1b      	ldr	r3, [r3, #32]
 8012a06:	4718      	bx	r3
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	2001fddc 	.word	0x2001fddc

08012a10 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8012a10:	2300      	movs	r3, #0
 8012a12:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8012a16:	4770      	bx	lr

08012a18 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012a18:	4b03      	ldr	r3, [pc, #12]	; (8012a28 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012a1a:	6818      	ldr	r0, [r3, #0]
 8012a1c:	b110      	cbz	r0, 8012a24 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012a1e:	6803      	ldr	r3, [r0, #0]
 8012a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a22:	4718      	bx	r3
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop
 8012a28:	2001fddc 	.word	0x2001fddc

08012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012a2c:	b510      	push	{r4, lr}
 8012a2e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012a32:	888a      	ldrh	r2, [r1, #4]
 8012a34:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012a38:	4422      	add	r2, r4
 8012a3a:	b212      	sxth	r2, r2
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	da15      	bge.n	8012a6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012a40:	8882      	ldrh	r2, [r0, #4]
 8012a42:	4413      	add	r3, r2
 8012a44:	b21b      	sxth	r3, r3
 8012a46:	429c      	cmp	r4, r3
 8012a48:	da10      	bge.n	8012a6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012a4a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012a4e:	88c9      	ldrh	r1, [r1, #6]
 8012a50:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012a54:	4419      	add	r1, r3
 8012a56:	b209      	sxth	r1, r1
 8012a58:	428a      	cmp	r2, r1
 8012a5a:	da07      	bge.n	8012a6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012a5c:	88c0      	ldrh	r0, [r0, #6]
 8012a5e:	4410      	add	r0, r2
 8012a60:	b200      	sxth	r0, r0
 8012a62:	4283      	cmp	r3, r0
 8012a64:	bfac      	ite	ge
 8012a66:	2000      	movge	r0, #0
 8012a68:	2001      	movlt	r0, #1
 8012a6a:	bd10      	pop	{r4, pc}
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	e7fc      	b.n	8012a6a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012a70 <_ZN8touchgfx4Rect10restrictToEss>:
 8012a70:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012a74:	b510      	push	{r4, lr}
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	da04      	bge.n	8012a84 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012a7a:	8884      	ldrh	r4, [r0, #4]
 8012a7c:	4423      	add	r3, r4
 8012a7e:	8083      	strh	r3, [r0, #4]
 8012a80:	2300      	movs	r3, #0
 8012a82:	8003      	strh	r3, [r0, #0]
 8012a84:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012a88:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012a8c:	1b09      	subs	r1, r1, r4
 8012a8e:	428b      	cmp	r3, r1
 8012a90:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012a94:	bfc8      	it	gt
 8012a96:	8081      	strhgt	r1, [r0, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	da04      	bge.n	8012aa6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012a9c:	88c1      	ldrh	r1, [r0, #6]
 8012a9e:	440b      	add	r3, r1
 8012aa0:	80c3      	strh	r3, [r0, #6]
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	8043      	strh	r3, [r0, #2]
 8012aa6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012aaa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012aae:	1a52      	subs	r2, r2, r1
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	bfc8      	it	gt
 8012ab4:	80c2      	strhgt	r2, [r0, #6]
 8012ab6:	bd10      	pop	{r4, pc}

08012ab8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012ab8:	b510      	push	{r4, lr}
 8012aba:	460c      	mov	r4, r1
 8012abc:	4b0f      	ldr	r3, [pc, #60]	; (8012afc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ac4:	4b0e      	ldr	r3, [pc, #56]	; (8012b00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012ac6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012aca:	f7ff ffd1 	bl	8012a70 <_ZN8touchgfx4Rect10restrictToEss>
 8012ace:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8012ad0:	6818      	ldr	r0, [r3, #0]
 8012ad2:	b190      	cbz	r0, 8012afa <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012ad4:	6803      	ldr	r3, [r0, #0]
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	689b      	ldr	r3, [r3, #8]
 8012ada:	4798      	blx	r3
 8012adc:	4b0a      	ldr	r3, [pc, #40]	; (8012b08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8012ade:	6818      	ldr	r0, [r3, #0]
 8012ae0:	b118      	cbz	r0, 8012aea <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8012ae2:	6803      	ldr	r3, [r0, #0]
 8012ae4:	4621      	mov	r1, r4
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	4798      	blx	r3
 8012aea:	4b08      	ldr	r3, [pc, #32]	; (8012b0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012aec:	4621      	mov	r1, r4
 8012aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012af2:	6818      	ldr	r0, [r3, #0]
 8012af4:	6803      	ldr	r3, [r0, #0]
 8012af6:	69db      	ldr	r3, [r3, #28]
 8012af8:	4718      	bx	r3
 8012afa:	bd10      	pop	{r4, pc}
 8012afc:	2001fd96 	.word	0x2001fd96
 8012b00:	2001fd94 	.word	0x2001fd94
 8012b04:	2001fddc 	.word	0x2001fddc
 8012b08:	2001fdd8 	.word	0x2001fdd8
 8012b0c:	2001fda0 	.word	0x2001fda0

08012b10 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	4606      	mov	r6, r0
 8012b14:	4608      	mov	r0, r1
 8012b16:	460f      	mov	r7, r1
 8012b18:	f7fd ff21 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b1c:	b9e8      	cbnz	r0, 8012b5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012b1e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8012b22:	f9b6 4000 	ldrsh.w	r4, [r6]
 8012b26:	42a5      	cmp	r5, r4
 8012b28:	db17      	blt.n	8012b5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012b2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012b2e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	db11      	blt.n	8012b5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012b36:	88b9      	ldrh	r1, [r7, #4]
 8012b38:	440d      	add	r5, r1
 8012b3a:	88b1      	ldrh	r1, [r6, #4]
 8012b3c:	b22d      	sxth	r5, r5
 8012b3e:	440c      	add	r4, r1
 8012b40:	b224      	sxth	r4, r4
 8012b42:	42a5      	cmp	r5, r4
 8012b44:	dc09      	bgt.n	8012b5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012b46:	88f8      	ldrh	r0, [r7, #6]
 8012b48:	4410      	add	r0, r2
 8012b4a:	88f2      	ldrh	r2, [r6, #6]
 8012b4c:	b200      	sxth	r0, r0
 8012b4e:	4413      	add	r3, r2
 8012b50:	b21b      	sxth	r3, r3
 8012b52:	4298      	cmp	r0, r3
 8012b54:	bfcc      	ite	gt
 8012b56:	2000      	movgt	r0, #0
 8012b58:	2001      	movle	r0, #1
 8012b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b5c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5e:	4604      	mov	r4, r0
 8012b60:	4608      	mov	r0, r1
 8012b62:	460d      	mov	r5, r1
 8012b64:	f7fd fefb 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b68:	b978      	cbnz	r0, 8012b8a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f7fd fef7 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b70:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012b74:	b150      	cbz	r0, 8012b8c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012b76:	8026      	strh	r6, [r4, #0]
 8012b78:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012b7c:	8063      	strh	r3, [r4, #2]
 8012b7e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012b82:	80a3      	strh	r3, [r4, #4]
 8012b84:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012b88:	80e3      	strh	r3, [r4, #6]
 8012b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b8c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012b90:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012b94:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012b98:	42b1      	cmp	r1, r6
 8012b9a:	460f      	mov	r7, r1
 8012b9c:	bfa8      	it	ge
 8012b9e:	4637      	movge	r7, r6
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	bfa8      	it	ge
 8012ba6:	4610      	movge	r0, r2
 8012ba8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012bac:	88ed      	ldrh	r5, [r5, #6]
 8012bae:	4466      	add	r6, ip
 8012bb0:	442a      	add	r2, r5
 8012bb2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012bb6:	88e5      	ldrh	r5, [r4, #6]
 8012bb8:	4461      	add	r1, ip
 8012bba:	442b      	add	r3, r5
 8012bbc:	b236      	sxth	r6, r6
 8012bbe:	b209      	sxth	r1, r1
 8012bc0:	b212      	sxth	r2, r2
 8012bc2:	b21b      	sxth	r3, r3
 8012bc4:	428e      	cmp	r6, r1
 8012bc6:	bfac      	ite	ge
 8012bc8:	ebc7 0106 	rsbge	r1, r7, r6
 8012bcc:	ebc7 0101 	rsblt	r1, r7, r1
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	bfac      	ite	ge
 8012bd4:	ebc0 0202 	rsbge	r2, r0, r2
 8012bd8:	ebc0 0203 	rsblt	r2, r0, r3
 8012bdc:	8027      	strh	r7, [r4, #0]
 8012bde:	8060      	strh	r0, [r4, #2]
 8012be0:	80a1      	strh	r1, [r4, #4]
 8012be2:	80e2      	strh	r2, [r4, #6]
 8012be4:	e7d1      	b.n	8012b8a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08012be8 <_ZN8touchgfx11Application11getInstanceEv>:
 8012be8:	4b01      	ldr	r3, [pc, #4]	; (8012bf0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012bea:	6818      	ldr	r0, [r3, #0]
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	2001fdec 	.word	0x2001fdec

08012bf4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	b510      	push	{r4, lr}
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8012bfe:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8012c02:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8012c06:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8012c0a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d90e      	bls.n	8012c30 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8012c12:	18e2      	adds	r2, r4, r3
 8012c14:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8012c18:	b122      	cbz	r2, 8012c24 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8012c1a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012c1e:	6803      	ldr	r3, [r0, #0]
 8012c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c22:	4798      	blx	r3
 8012c24:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8012c28:	3301      	adds	r3, #1
 8012c2a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8012c2e:	e7ea      	b.n	8012c06 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012c30:	bd10      	pop	{r4, pc}

08012c32 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8012c32:	2300      	movs	r3, #0
 8012c34:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8012c38:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8012c3c:	30a4      	adds	r0, #164	; 0xa4
 8012c3e:	f802 3b01 	strb.w	r3, [r2], #1
 8012c42:	4282      	cmp	r2, r0
 8012c44:	d1fb      	bne.n	8012c3e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8012c46:	4770      	bx	lr

08012c48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012c48:	b570      	push	{r4, r5, r6, lr}
 8012c4a:	4c0b      	ldr	r4, [pc, #44]	; (8012c78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012c4c:	4605      	mov	r5, r0
 8012c4e:	6820      	ldr	r0, [r4, #0]
 8012c50:	460e      	mov	r6, r1
 8012c52:	b110      	cbz	r0, 8012c5a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8012c54:	6803      	ldr	r3, [r0, #0]
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	4798      	blx	r3
 8012c5a:	1d28      	adds	r0, r5, #4
 8012c5c:	f7ff ffe9 	bl	8012c32 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012c60:	6026      	str	r6, [r4, #0]
 8012c62:	6833      	ldr	r3, [r6, #0]
 8012c64:	4630      	mov	r0, r6
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	4798      	blx	r3
 8012c6a:	682b      	ldr	r3, [r5, #0]
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c74:	4718      	bx	r3
 8012c76:	bf00      	nop
 8012c78:	2001fddc 	.word	0x2001fddc

08012c7c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c80:	461a      	mov	r2, r3
 8012c82:	461c      	mov	r4, r3
 8012c84:	461d      	mov	r5, r3
 8012c86:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8012c8a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8012c8e:	459c      	cmp	ip, r3
 8012c90:	dd1a      	ble.n	8012cc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8012c92:	18c6      	adds	r6, r0, r3
 8012c94:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8012c98:	b16e      	cbz	r6, 8012cb6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d008      	beq.n	8012cb0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8012c9e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012ca2:	fa1f fe82 	uxth.w	lr, r2
 8012ca6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8012caa:	1887      	adds	r7, r0, r2
 8012cac:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8012cb0:	3201      	adds	r2, #1
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	e7eb      	b.n	8012c8e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8012cb6:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8012cba:	4299      	cmp	r1, r3
 8012cbc:	bfa8      	it	ge
 8012cbe:	3501      	addge	r5, #1
 8012cc0:	429e      	cmp	r6, r3
 8012cc2:	bfc8      	it	gt
 8012cc4:	3401      	addgt	r4, #1
 8012cc6:	e7f4      	b.n	8012cb2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8012cc8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8012ccc:	1b49      	subs	r1, r1, r5
 8012cce:	1b1b      	subs	r3, r3, r4
 8012cd0:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8012cd4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8012cd8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	dd03      	ble.n	8012ce8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8012ce6:	e7f7      	b.n	8012cd8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012cec <_ZN8touchgfx11Application15handleTickEventEv>:
 8012cec:	b570      	push	{r4, r5, r6, lr}
 8012cee:	4d16      	ldr	r5, [pc, #88]	; (8012d48 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	6828      	ldr	r0, [r5, #0]
 8012cf4:	b140      	cbz	r0, 8012d08 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012cf6:	7a03      	ldrb	r3, [r0, #8]
 8012cf8:	b933      	cbnz	r3, 8012d08 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012cfa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8012cfe:	6803      	ldr	r3, [r0, #0]
 8012d00:	689b      	ldr	r3, [r3, #8]
 8012d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d06:	4718      	bx	r3
 8012d08:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8012d0c:	4e0f      	ldr	r6, [pc, #60]	; (8012d4c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012d0e:	b973      	cbnz	r3, 8012d2e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012d10:	b168      	cbz	r0, 8012d2e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012d12:	7a03      	ldrb	r3, [r0, #8]
 8012d14:	b15b      	cbz	r3, 8012d2e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012d16:	6830      	ldr	r0, [r6, #0]
 8012d18:	b110      	cbz	r0, 8012d20 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012d1a:	6803      	ldr	r3, [r0, #0]
 8012d1c:	691b      	ldr	r3, [r3, #16]
 8012d1e:	4798      	blx	r3
 8012d20:	6828      	ldr	r0, [r5, #0]
 8012d22:	6803      	ldr	r3, [r0, #0]
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	4798      	blx	r3
 8012d28:	2301      	movs	r3, #1
 8012d2a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8012d2e:	3404      	adds	r4, #4
 8012d30:	4620      	mov	r0, r4
 8012d32:	f7ff ff5f 	bl	8012bf4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8012d36:	4620      	mov	r0, r4
 8012d38:	f7ff ffa0 	bl	8012c7c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012d3c:	6830      	ldr	r0, [r6, #0]
 8012d3e:	b110      	cbz	r0, 8012d46 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012d40:	6803      	ldr	r3, [r0, #0]
 8012d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d44:	e7dd      	b.n	8012d02 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012d46:	bd70      	pop	{r4, r5, r6, pc}
 8012d48:	2001fde0 	.word	0x2001fde0
 8012d4c:	2001fddc 	.word	0x2001fddc

08012d50 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012d50:	4603      	mov	r3, r0
 8012d52:	2200      	movs	r2, #0
 8012d54:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8012d58:	801a      	strh	r2, [r3, #0]
 8012d5a:	805a      	strh	r2, [r3, #2]
 8012d5c:	809a      	strh	r2, [r3, #4]
 8012d5e:	80da      	strh	r2, [r3, #6]
 8012d60:	3308      	adds	r3, #8
 8012d62:	428b      	cmp	r3, r1
 8012d64:	d1f8      	bne.n	8012d58 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012d66:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012d6a:	4770      	bx	lr

08012d6c <_ZN8touchgfx11ApplicationC1Ev>:
 8012d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6e:	4606      	mov	r6, r0
 8012d70:	4604      	mov	r4, r0
 8012d72:	2500      	movs	r5, #0
 8012d74:	4b1b      	ldr	r3, [pc, #108]	; (8012de4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012d76:	22a8      	movs	r2, #168	; 0xa8
 8012d78:	f846 3b04 	str.w	r3, [r6], #4
 8012d7c:	2100      	movs	r1, #0
 8012d7e:	4630      	mov	r0, r6
 8012d80:	f00e fad5 	bl	802132e <memset>
 8012d84:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8012d88:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8012d8c:	f7ff ffe0 	bl	8012d50 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012d90:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8012d94:	f7ff ffdc 	bl	8012d50 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012d98:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8012d9c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8012da0:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8012da4:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8012da8:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8012dac:	490e      	ldr	r1, [pc, #56]	; (8012de8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012dae:	480f      	ldr	r0, [pc, #60]	; (8012dec <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012db0:	f00e f802 	bl	8020db8 <CRC_Lock>
 8012db4:	4f0e      	ldr	r7, [pc, #56]	; (8012df0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8012db6:	4b0f      	ldr	r3, [pc, #60]	; (8012df4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012db8:	b158      	cbz	r0, 8012dd2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012dba:	801d      	strh	r5, [r3, #0]
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	4a0e      	ldr	r2, [pc, #56]	; (8012df8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	6013      	str	r3, [r2, #0]
 8012dc4:	4a0d      	ldr	r2, [pc, #52]	; (8012dfc <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012dc6:	603b      	str	r3, [r7, #0]
 8012dc8:	6013      	str	r3, [r2, #0]
 8012dca:	f7ff ff32 	bl	8012c32 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012dce:	4620      	mov	r0, r4
 8012dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012dd6:	2002      	movs	r0, #2
 8012dd8:	801a      	strh	r2, [r3, #0]
 8012dda:	6038      	str	r0, [r7, #0]
 8012ddc:	f001 fa20 	bl	8014220 <_ZN8touchgfx6Screen4drawEv>
 8012de0:	e7ec      	b.n	8012dbc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012de2:	bf00      	nop
 8012de4:	08023844 	.word	0x08023844
 8012de8:	b5e8b5cd 	.word	0xb5e8b5cd
 8012dec:	f407a5c2 	.word	0xf407a5c2
 8012df0:	2001fddc 	.word	0x2001fddc
 8012df4:	2000001c 	.word	0x2000001c
 8012df8:	2001fdec 	.word	0x2001fdec
 8012dfc:	2001fde0 	.word	0x2001fde0

08012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012e00:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012e04:	b510      	push	{r4, lr}
 8012e06:	3b01      	subs	r3, #1
 8012e08:	b29b      	uxth	r3, r3
 8012e0a:	428b      	cmp	r3, r1
 8012e0c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8012e10:	d908      	bls.n	8012e24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012e12:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012e1c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012e20:	685a      	ldr	r2, [r3, #4]
 8012e22:	6062      	str	r2, [r4, #4]
 8012e24:	bd10      	pop	{r4, pc}
	...

08012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	4b8f      	ldr	r3, [pc, #572]	; (801306c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012e2e:	b08f      	sub	sp, #60	; 0x3c
 8012e30:	ac0a      	add	r4, sp, #40	; 0x28
 8012e32:	e884 0006 	stmia.w	r4, {r1, r2}
 8012e36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e3a:	4b8d      	ldr	r3, [pc, #564]	; (8013070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012e3c:	4683      	mov	fp, r0
 8012e3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012e42:	4620      	mov	r0, r4
 8012e44:	f7ff fe14 	bl	8012a70 <_ZN8touchgfx4Rect10restrictToEss>
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f7fd fd88 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d16a      	bne.n	8012f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012e52:	9403      	str	r4, [sp, #12]
 8012e54:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8012e58:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8012e5c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012e60:	35a4      	adds	r5, #164	; 0xa4
 8012e62:	9301      	str	r3, [sp, #4]
 8012e64:	b15c      	cbz	r4, 8012e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8012e66:	4629      	mov	r1, r5
 8012e68:	9803      	ldr	r0, [sp, #12]
 8012e6a:	f7ff fe51 	bl	8012b10 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012e6e:	3c01      	subs	r4, #1
 8012e70:	b118      	cbz	r0, 8012e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8012e72:	b2a1      	uxth	r1, r4
 8012e74:	9801      	ldr	r0, [sp, #4]
 8012e76:	f7ff ffc3 	bl	8012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012e7a:	3d08      	subs	r5, #8
 8012e7c:	e7f2      	b.n	8012e64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8012e7e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8012e82:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e86:	9302      	str	r3, [sp, #8]
 8012e88:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012e8c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8012e90:	f8cd 8010 	str.w	r8, [sp, #16]
 8012e94:	9306      	str	r3, [sp, #24]
 8012e96:	445c      	add	r4, fp
 8012e98:	2500      	movs	r5, #0
 8012e9a:	4626      	mov	r6, r4
 8012e9c:	462f      	mov	r7, r5
 8012e9e:	f8cd 8014 	str.w	r8, [sp, #20]
 8012ea2:	9b05      	ldr	r3, [sp, #20]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d073      	beq.n	8012f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012ea8:	9903      	ldr	r1, [sp, #12]
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f7ff fdbe 	bl	8012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012eb0:	b350      	cbz	r0, 8012f08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012eb2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8012eb6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012eba:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8012ebe:	45e6      	cmp	lr, ip
 8012ec0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012ec4:	db33      	blt.n	8012f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012ec6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8012eca:	88b3      	ldrh	r3, [r6, #4]
 8012ecc:	4472      	add	r2, lr
 8012ece:	4463      	add	r3, ip
 8012ed0:	b212      	sxth	r2, r2
 8012ed2:	b21b      	sxth	r3, r3
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	dc2a      	bgt.n	8012f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012ed8:	88f3      	ldrh	r3, [r6, #6]
 8012eda:	fa1f f289 	uxth.w	r2, r9
 8012ede:	4413      	add	r3, r2
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	45ca      	cmp	sl, r9
 8012ee4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012ee8:	fa0f fe83 	sxth.w	lr, r3
 8012eec:	fa1f fc8a 	uxth.w	ip, sl
 8012ef0:	db0f      	blt.n	8012f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012ef2:	eba3 030c 	sub.w	r3, r3, ip
 8012ef6:	1ac9      	subs	r1, r1, r3
 8012ef8:	b209      	sxth	r1, r1
 8012efa:	2900      	cmp	r1, #0
 8012efc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012f00:	dd12      	ble.n	8012f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012f02:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8012f06:	4605      	mov	r5, r0
 8012f08:	9b05      	ldr	r3, [sp, #20]
 8012f0a:	3e08      	subs	r6, #8
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	9305      	str	r3, [sp, #20]
 8012f10:	e7c7      	b.n	8012ea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012f12:	4461      	add	r1, ip
 8012f14:	b209      	sxth	r1, r1
 8012f16:	4571      	cmp	r1, lr
 8012f18:	dc38      	bgt.n	8012f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012f1a:	eba2 020c 	sub.w	r2, r2, ip
 8012f1e:	b212      	sxth	r2, r2
 8012f20:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8012f24:	2a00      	cmp	r2, #0
 8012f26:	dcee      	bgt.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012f28:	b00f      	add	sp, #60	; 0x3c
 8012f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2e:	45ca      	cmp	sl, r9
 8012f30:	db2c      	blt.n	8012f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012f32:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8012f36:	449a      	add	sl, r3
 8012f38:	88f3      	ldrh	r3, [r6, #6]
 8012f3a:	fa0f fa8a 	sxth.w	sl, sl
 8012f3e:	4499      	add	r9, r3
 8012f40:	fa0f f989 	sxth.w	r9, r9
 8012f44:	45ca      	cmp	sl, r9
 8012f46:	dc21      	bgt.n	8012f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012f48:	88b3      	ldrh	r3, [r6, #4]
 8012f4a:	fa1f f28c 	uxth.w	r2, ip
 8012f4e:	4413      	add	r3, r2
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	45e6      	cmp	lr, ip
 8012f54:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012f58:	fa1f f98e 	uxth.w	r9, lr
 8012f5c:	fa0f fa83 	sxth.w	sl, r3
 8012f60:	db0a      	blt.n	8012f78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012f62:	eba3 0309 	sub.w	r3, r3, r9
 8012f66:	1ac9      	subs	r1, r1, r3
 8012f68:	b209      	sxth	r1, r1
 8012f6a:	2900      	cmp	r1, #0
 8012f6c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8012f70:	ddda      	ble.n	8012f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012f72:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8012f76:	e7c6      	b.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012f78:	4449      	add	r1, r9
 8012f7a:	b209      	sxth	r1, r1
 8012f7c:	4551      	cmp	r1, sl
 8012f7e:	dc05      	bgt.n	8012f8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012f80:	eba2 0209 	sub.w	r2, r2, r9
 8012f84:	b212      	sxth	r2, r2
 8012f86:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8012f8a:	e7cb      	b.n	8012f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	e7bb      	b.n	8012f08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012f90:	2d00      	cmp	r5, #0
 8012f92:	d181      	bne.n	8012e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8012f94:	2f00      	cmp	r7, #0
 8012f96:	f000 81de 	beq.w	8013356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8012f9a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8012f9e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8012fa2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8012fa6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8012faa:	b2b9      	uxth	r1, r7
 8012fac:	b2b3      	uxth	r3, r6
 8012fae:	441a      	add	r2, r3
 8012fb0:	448a      	add	sl, r1
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	fa1f fa8a 	uxth.w	sl, sl
 8012fb8:	fa0f f882 	sxth.w	r8, r2
 8012fbc:	9105      	str	r1, [sp, #20]
 8012fbe:	fa0f f98a 	sxth.w	r9, sl
 8012fc2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012fc6:	9b04      	ldr	r3, [sp, #16]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d053      	beq.n	8013074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012fcc:	9903      	ldr	r1, [sp, #12]
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f7ff fd2c 	bl	8012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012fd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012fd8:	b1c0      	cbz	r0, 801300c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012fda:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012fde:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012fe2:	4576      	cmp	r6, lr
 8012fe4:	dc23      	bgt.n	801302e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012fe6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012fea:	44f4      	add	ip, lr
 8012fec:	fa0f fc8c 	sxth.w	ip, ip
 8012ff0:	45e0      	cmp	r8, ip
 8012ff2:	db1c      	blt.n	801302e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012ff4:	428f      	cmp	r7, r1
 8012ff6:	fa1f fc81 	uxth.w	ip, r1
 8012ffa:	88e1      	ldrh	r1, [r4, #6]
 8012ffc:	dc0d      	bgt.n	801301a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8012ffe:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013002:	eba1 010c 	sub.w	r1, r1, ip
 8013006:	f8a4 9002 	strh.w	r9, [r4, #2]
 801300a:	80e1      	strh	r1, [r4, #6]
 801300c:	4628      	mov	r0, r5
 801300e:	9904      	ldr	r1, [sp, #16]
 8013010:	3c08      	subs	r4, #8
 8013012:	3901      	subs	r1, #1
 8013014:	9104      	str	r1, [sp, #16]
 8013016:	4605      	mov	r5, r0
 8013018:	e7d3      	b.n	8012fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801301a:	4461      	add	r1, ip
 801301c:	b209      	sxth	r1, r1
 801301e:	4549      	cmp	r1, r9
 8013020:	dcf5      	bgt.n	801300e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013022:	9905      	ldr	r1, [sp, #20]
 8013024:	eba1 0c0c 	sub.w	ip, r1, ip
 8013028:	f8a4 c006 	strh.w	ip, [r4, #6]
 801302c:	e7ee      	b.n	801300c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801302e:	428f      	cmp	r7, r1
 8013030:	dced      	bgt.n	801300e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013032:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8013036:	4461      	add	r1, ip
 8013038:	b209      	sxth	r1, r1
 801303a:	4589      	cmp	r9, r1
 801303c:	dbe7      	blt.n	801300e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801303e:	4576      	cmp	r6, lr
 8013040:	fa1f fc8e 	uxth.w	ip, lr
 8013044:	88a1      	ldrh	r1, [r4, #4]
 8013046:	dc07      	bgt.n	8013058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8013048:	eba2 0c0c 	sub.w	ip, r2, ip
 801304c:	eba1 010c 	sub.w	r1, r1, ip
 8013050:	f8a4 8000 	strh.w	r8, [r4]
 8013054:	80a1      	strh	r1, [r4, #4]
 8013056:	e7d9      	b.n	801300c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013058:	4461      	add	r1, ip
 801305a:	b209      	sxth	r1, r1
 801305c:	4588      	cmp	r8, r1
 801305e:	dbd6      	blt.n	801300e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013060:	eba3 0c0c 	sub.w	ip, r3, ip
 8013064:	f8a4 c004 	strh.w	ip, [r4, #4]
 8013068:	e7d0      	b.n	801300c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801306a:	bf00      	nop
 801306c:	2001fd96 	.word	0x2001fd96
 8013070:	2001fd94 	.word	0x2001fd94
 8013074:	2d00      	cmp	r5, #0
 8013076:	f000 816e 	beq.w	8013356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801307a:	9b06      	ldr	r3, [sp, #24]
 801307c:	445b      	add	r3, fp
 801307e:	461c      	mov	r4, r3
 8013080:	9b02      	ldr	r3, [sp, #8]
 8013082:	3301      	adds	r3, #1
 8013084:	f000 8167 	beq.w	8013356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013088:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801308c:	4629      	mov	r1, r5
 801308e:	9803      	ldr	r0, [sp, #12]
 8013090:	f7ff fd3e 	bl	8012b10 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013094:	b120      	cbz	r0, 80130a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8013096:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801309a:	9801      	ldr	r0, [sp, #4]
 801309c:	f7ff feb0 	bl	8012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80130a0:	9903      	ldr	r1, [sp, #12]
 80130a2:	4628      	mov	r0, r5
 80130a4:	f7ff fcc2 	bl	8012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	f000 809c 	beq.w	80131e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80130ae:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80130b2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80130b6:	fa1f f189 	uxth.w	r1, r9
 80130ba:	eb01 0c03 	add.w	ip, r1, r3
 80130be:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80130c2:	fa1f fa8c 	uxth.w	sl, ip
 80130c6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80130ca:	9309      	str	r3, [sp, #36]	; 0x24
 80130cc:	b283      	uxth	r3, r0
 80130ce:	eb03 050c 	add.w	r5, r3, ip
 80130d2:	b2ad      	uxth	r5, r5
 80130d4:	9505      	str	r5, [sp, #20]
 80130d6:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80130da:	4548      	cmp	r0, r9
 80130dc:	9504      	str	r5, [sp, #16]
 80130de:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80130e2:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 80130e6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 80130ea:	f340 8099 	ble.w	8013220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80130ee:	1a5b      	subs	r3, r3, r1
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	4596      	cmp	lr, r2
 80130f4:	fa0f f08a 	sxth.w	r0, sl
 80130f8:	b21e      	sxth	r6, r3
 80130fa:	dd2e      	ble.n	801315a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80130fc:	9f02      	ldr	r7, [sp, #8]
 80130fe:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8013102:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013106:	9f04      	ldr	r7, [sp, #16]
 8013108:	fa1f fe8e 	uxth.w	lr, lr
 801310c:	1a3f      	subs	r7, r7, r0
 801310e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8013112:	b292      	uxth	r2, r2
 8013114:	ebae 0102 	sub.w	r1, lr, r2
 8013118:	44a6      	add	lr, r4
 801311a:	4402      	add	r2, r0
 801311c:	b289      	uxth	r1, r1
 801311e:	fa0f fe8e 	sxth.w	lr, lr
 8013122:	b212      	sxth	r2, r2
 8013124:	b20d      	sxth	r5, r1
 8013126:	ebae 0202 	sub.w	r2, lr, r2
 801312a:	436f      	muls	r7, r5
 801312c:	4372      	muls	r2, r6
 801312e:	4297      	cmp	r7, r2
 8013130:	db09      	blt.n	8013146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8013132:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8013136:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801313a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801313e:	449c      	add	ip, r3
 8013140:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013144:	e686      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013146:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801314a:	4421      	add	r1, r4
 801314c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8013150:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013154:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013158:	e67c      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801315a:	9f04      	ldr	r7, [sp, #16]
 801315c:	42b8      	cmp	r0, r7
 801315e:	da27      	bge.n	80131b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013160:	9902      	ldr	r1, [sp, #8]
 8013162:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8013166:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801316a:	eb05 010e 	add.w	r1, r5, lr
 801316e:	fa1f f881 	uxth.w	r8, r1
 8013172:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8013176:	fa0f f988 	sxth.w	r9, r8
 801317a:	4411      	add	r1, r2
 801317c:	eba1 0108 	sub.w	r1, r1, r8
 8013180:	b289      	uxth	r1, r1
 8013182:	fa0f f881 	sxth.w	r8, r1
 8013186:	eba2 020e 	sub.w	r2, r2, lr
 801318a:	1a3f      	subs	r7, r7, r0
 801318c:	4372      	muls	r2, r6
 801318e:	fb08 f707 	mul.w	r7, r8, r7
 8013192:	42ba      	cmp	r2, r7
 8013194:	dc06      	bgt.n	80131a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8013196:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801319a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801319e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80131a2:	e7ca      	b.n	801313a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80131a4:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80131a8:	4429      	add	r1, r5
 80131aa:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80131ae:	e651      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80131b0:	9805      	ldr	r0, [sp, #20]
 80131b2:	2d06      	cmp	r5, #6
 80131b4:	ebaa 0000 	sub.w	r0, sl, r0
 80131b8:	b280      	uxth	r0, r0
 80131ba:	fa0f fe80 	sxth.w	lr, r0
 80131be:	d817      	bhi.n	80131f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80131c0:	9b04      	ldr	r3, [sp, #16]
 80131c2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80131c6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80131ca:	1c6b      	adds	r3, r5, #1
 80131cc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 80131d0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80131d4:	9b01      	ldr	r3, [sp, #4]
 80131d6:	9801      	ldr	r0, [sp, #4]
 80131d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80131dc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80131e0:	805a      	strh	r2, [r3, #2]
 80131e2:	809e      	strh	r6, [r3, #4]
 80131e4:	80d9      	strh	r1, [r3, #6]
 80131e6:	9b02      	ldr	r3, [sp, #8]
 80131e8:	3c08      	subs	r4, #8
 80131ea:	3b01      	subs	r3, #1
 80131ec:	9302      	str	r3, [sp, #8]
 80131ee:	e747      	b.n	8013080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80131f0:	9a02      	ldr	r2, [sp, #8]
 80131f2:	45b6      	cmp	lr, r6
 80131f4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80131f8:	db0d      	blt.n	8013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80131fa:	449c      	add	ip, r3
 80131fc:	fa1f fc8c 	uxth.w	ip, ip
 8013200:	445a      	add	r2, fp
 8013202:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013206:	448c      	add	ip, r1
 8013208:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801320c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8013210:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8013214:	e61e      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013216:	445a      	add	r2, fp
 8013218:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801321c:	4484      	add	ip, r0
 801321e:	e78f      	b.n	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013220:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8013224:	fa1f f18e 	uxth.w	r1, lr
 8013228:	eb01 0806 	add.w	r8, r1, r6
 801322c:	b293      	uxth	r3, r2
 801322e:	fa1f f888 	uxth.w	r8, r8
 8013232:	9306      	str	r3, [sp, #24]
 8013234:	fa0f f388 	sxth.w	r3, r8
 8013238:	9307      	str	r3, [sp, #28]
 801323a:	9f06      	ldr	r7, [sp, #24]
 801323c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8013240:	4596      	cmp	lr, r2
 8013242:	443b      	add	r3, r7
 8013244:	b29b      	uxth	r3, r3
 8013246:	9308      	str	r3, [sp, #32]
 8013248:	da24      	bge.n	8013294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801324a:	9905      	ldr	r1, [sp, #20]
 801324c:	eba3 0308 	sub.w	r3, r3, r8
 8013250:	ebaa 0401 	sub.w	r4, sl, r1
 8013254:	b2a4      	uxth	r4, r4
 8013256:	b29b      	uxth	r3, r3
 8013258:	b225      	sxth	r5, r4
 801325a:	b219      	sxth	r1, r3
 801325c:	eba2 020e 	sub.w	r2, r2, lr
 8013260:	eba9 0000 	sub.w	r0, r9, r0
 8013264:	436a      	muls	r2, r5
 8013266:	4348      	muls	r0, r1
 8013268:	4282      	cmp	r2, r0
 801326a:	9a02      	ldr	r2, [sp, #8]
 801326c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013270:	445a      	add	r2, fp
 8013272:	dc06      	bgt.n	8013282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013274:	9b07      	ldr	r3, [sp, #28]
 8013276:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801327a:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801327e:	44a4      	add	ip, r4
 8013280:	e75e      	b.n	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013282:	9904      	ldr	r1, [sp, #16]
 8013284:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8013288:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801328c:	4433      	add	r3, r6
 801328e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013292:	e5df      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013294:	9f06      	ldr	r7, [sp, #24]
 8013296:	9b04      	ldr	r3, [sp, #16]
 8013298:	1bc9      	subs	r1, r1, r7
 801329a:	fa0f f78a 	sxth.w	r7, sl
 801329e:	b289      	uxth	r1, r1
 80132a0:	429f      	cmp	r7, r3
 80132a2:	fa0f fe81 	sxth.w	lr, r1
 80132a6:	dd24      	ble.n	80132f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80132a8:	9a05      	ldr	r2, [sp, #20]
 80132aa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80132ae:	ebaa 0202 	sub.w	r2, sl, r2
 80132b2:	9d07      	ldr	r5, [sp, #28]
 80132b4:	b292      	uxth	r2, r2
 80132b6:	eba5 0a03 	sub.w	sl, r5, r3
 80132ba:	b214      	sxth	r4, r2
 80132bc:	eba9 0000 	sub.w	r0, r9, r0
 80132c0:	fb0e f000 	mul.w	r0, lr, r0
 80132c4:	fb04 fa0a 	mul.w	sl, r4, sl
 80132c8:	9b02      	ldr	r3, [sp, #8]
 80132ca:	4550      	cmp	r0, sl
 80132cc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80132d0:	445b      	add	r3, fp
 80132d2:	db03      	blt.n	80132dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 80132d4:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80132d8:	4494      	add	ip, r2
 80132da:	e731      	b.n	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80132dc:	9a04      	ldr	r2, [sp, #16]
 80132de:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80132e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80132e6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80132ea:	4431      	add	r1, r6
 80132ec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80132f0:	e75b      	b.n	80131aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80132f2:	9b08      	ldr	r3, [sp, #32]
 80132f4:	2d06      	cmp	r5, #6
 80132f6:	eba3 0308 	sub.w	r3, r3, r8
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	b218      	sxth	r0, r3
 80132fe:	d813      	bhi.n	8013328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8013300:	9b07      	ldr	r3, [sp, #28]
 8013302:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8013306:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801330a:	1c6b      	adds	r3, r5, #1
 801330c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013310:	9b01      	ldr	r3, [sp, #4]
 8013312:	9901      	ldr	r1, [sp, #4]
 8013314:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013318:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801331c:	805a      	strh	r2, [r3, #2]
 801331e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013320:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013324:	809a      	strh	r2, [r3, #4]
 8013326:	e75e      	b.n	80131e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013328:	9c02      	ldr	r4, [sp, #8]
 801332a:	4570      	cmp	r0, lr
 801332c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013330:	db0d      	blt.n	801334e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8013332:	4431      	add	r1, r6
 8013334:	9b06      	ldr	r3, [sp, #24]
 8013336:	b289      	uxth	r1, r1
 8013338:	445c      	add	r4, fp
 801333a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801333e:	4419      	add	r1, r3
 8013340:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013344:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8013348:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801334c:	e582      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801334e:	445c      	add	r4, fp
 8013350:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8013354:	e79a      	b.n	801328c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013356:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801335a:	2e07      	cmp	r6, #7
 801335c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013360:	d812      	bhi.n	8013388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 8013362:	1c75      	adds	r5, r6, #1
 8013364:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8013368:	9d01      	ldr	r5, [sp, #4]
 801336a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801336e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8013372:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8013376:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801337a:	442c      	add	r4, r5
 801337c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013380:	8061      	strh	r1, [r4, #2]
 8013382:	80a2      	strh	r2, [r4, #4]
 8013384:	80e3      	strh	r3, [r4, #6]
 8013386:	e5cf      	b.n	8012f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013388:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801338c:	f04f 37ff 	mov.w	r7, #4294967295
 8013390:	2500      	movs	r5, #0
 8013392:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013396:	3e01      	subs	r6, #1
 8013398:	445c      	add	r4, fp
 801339a:	9305      	str	r3, [sp, #20]
 801339c:	1e72      	subs	r2, r6, #1
 801339e:	4691      	mov	r9, r2
 80133a0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80133a4:	9302      	str	r3, [sp, #8]
 80133a6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80133aa:	9304      	str	r3, [sp, #16]
 80133ac:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80133b0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80133b4:	bf16      	itet	ne
 80133b6:	9905      	ldrne	r1, [sp, #20]
 80133b8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80133bc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80133c0:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80133c4:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80133c8:	6818      	ldr	r0, [r3, #0]
 80133ca:	fb18 f801 	smulbb	r8, r8, r1
 80133ce:	6859      	ldr	r1, [r3, #4]
 80133d0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80133d4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80133d8:	4671      	mov	r1, lr
 80133da:	a80c      	add	r0, sp, #48	; 0x30
 80133dc:	9207      	str	r2, [sp, #28]
 80133de:	9306      	str	r3, [sp, #24]
 80133e0:	f7ff fbbc 	bl	8012b5c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80133e4:	f04f 0c08 	mov.w	ip, #8
 80133e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80133ec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80133f0:	9b04      	ldr	r3, [sp, #16]
 80133f2:	9a02      	ldr	r2, [sp, #8]
 80133f4:	fb10 f001 	smulbb	r0, r0, r1
 80133f8:	fb02 8803 	mla	r8, r2, r3, r8
 80133fc:	eba0 0108 	sub.w	r1, r0, r8
 8013400:	fb90 f0fc 	sdiv	r0, r0, ip
 8013404:	4288      	cmp	r0, r1
 8013406:	dc20      	bgt.n	801344a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013408:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801340c:	4551      	cmp	r1, sl
 801340e:	da03      	bge.n	8013418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8013410:	b1d9      	cbz	r1, 801344a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013412:	468a      	mov	sl, r1
 8013414:	464f      	mov	r7, r9
 8013416:	4635      	mov	r5, r6
 8013418:	f109 39ff 	add.w	r9, r9, #4294967295
 801341c:	f119 0f02 	cmn.w	r9, #2
 8013420:	d1c6      	bne.n	80133b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8013422:	4616      	mov	r6, r2
 8013424:	3201      	adds	r2, #1
 8013426:	f1a4 0408 	sub.w	r4, r4, #8
 801342a:	d1b7      	bne.n	801339c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	b2ac      	uxth	r4, r5
 8013430:	00ed      	lsls	r5, r5, #3
 8013432:	1958      	adds	r0, r3, r5
 8013434:	1c7b      	adds	r3, r7, #1
 8013436:	d10b      	bne.n	8013450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8013438:	4601      	mov	r1, r0
 801343a:	9803      	ldr	r0, [sp, #12]
 801343c:	f7ff fb8e 	bl	8012b5c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013440:	4621      	mov	r1, r4
 8013442:	9801      	ldr	r0, [sp, #4]
 8013444:	f7ff fcdc 	bl	8012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013448:	e504      	b.n	8012e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801344a:	464f      	mov	r7, r9
 801344c:	4635      	mov	r5, r6
 801344e:	e7ed      	b.n	801342c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8013450:	9b01      	ldr	r3, [sp, #4]
 8013452:	00ff      	lsls	r7, r7, #3
 8013454:	19d9      	adds	r1, r3, r7
 8013456:	f7ff fb81 	bl	8012b5c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801345a:	9b03      	ldr	r3, [sp, #12]
 801345c:	445f      	add	r7, fp
 801345e:	cb03      	ldmia	r3!, {r0, r1}
 8013460:	445d      	add	r5, fp
 8013462:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8013466:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801346a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801346e:	9b03      	ldr	r3, [sp, #12]
 8013470:	6869      	ldr	r1, [r5, #4]
 8013472:	c303      	stmia	r3!, {r0, r1}
 8013474:	e7e4      	b.n	8013440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 8013476:	bf00      	nop

08013478 <_ZN8touchgfx11Application10invalidateEv>:
 8013478:	2100      	movs	r1, #0
 801347a:	4b09      	ldr	r3, [pc, #36]	; (80134a0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801347c:	b082      	sub	sp, #8
 801347e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013482:	4b08      	ldr	r3, [pc, #32]	; (80134a4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013484:	9100      	str	r1, [sp, #0]
 8013486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801348a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801348e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013492:	ab02      	add	r3, sp, #8
 8013494:	e913 0006 	ldmdb	r3, {r1, r2}
 8013498:	b002      	add	sp, #8
 801349a:	f7ff bcc5 	b.w	8012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801349e:	bf00      	nop
 80134a0:	2001fd94 	.word	0x2001fd94
 80134a4:	2001fd96 	.word	0x2001fd96

080134a8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80134b0:	b09b      	sub	sp, #108	; 0x6c
 80134b2:	4604      	mov	r4, r0
 80134b4:	4630      	mov	r0, r6
 80134b6:	f7fd fa52 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80134ba:	4605      	mov	r5, r0
 80134bc:	b940      	cbnz	r0, 80134d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80134be:	e896 0006 	ldmia.w	r6, {r1, r2}
 80134c2:	4620      	mov	r0, r4
 80134c4:	f7ff fcb0 	bl	8012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80134c8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80134cc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80134d0:	4bc9      	ldr	r3, [pc, #804]	; (80137f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d03e      	beq.n	8013556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80134d8:	4dc8      	ldr	r5, [pc, #800]	; (80137fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80134da:	4628      	mov	r0, r5
 80134dc:	f7fd fa3f 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80134e0:	4606      	mov	r6, r0
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d137      	bne.n	8013556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80134e6:	4628      	mov	r0, r5
 80134e8:	f7ff f9ee 	bl	80128c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80134ec:	6829      	ldr	r1, [r5, #0]
 80134ee:	686a      	ldr	r2, [r5, #4]
 80134f0:	4620      	mov	r0, r4
 80134f2:	f7ff fc99 	bl	8012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80134f6:	802e      	strh	r6, [r5, #0]
 80134f8:	806e      	strh	r6, [r5, #2]
 80134fa:	80ae      	strh	r6, [r5, #4]
 80134fc:	80ee      	strh	r6, [r5, #6]
 80134fe:	ae09      	add	r6, sp, #36	; 0x24
 8013500:	4630      	mov	r0, r6
 8013502:	f7ff fc25 	bl	8012d50 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013506:	4abe      	ldr	r2, [pc, #760]	; (8013800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013508:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801350c:	8815      	ldrh	r5, [r2, #0]
 801350e:	9202      	str	r2, [sp, #8]
 8013510:	462b      	mov	r3, r5
 8013512:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013516:	429f      	cmp	r7, r3
 8013518:	d924      	bls.n	8013564 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801351a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801351e:	2907      	cmp	r1, #7
 8013520:	d816      	bhi.n	8013550 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8013522:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013526:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801352a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801352e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013532:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8013536:	1c4a      	adds	r2, r1, #1
 8013538:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801353c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8013540:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8013544:	f8a2 9002 	strh.w	r9, [r2, #2]
 8013548:	f8a2 e004 	strh.w	lr, [r2, #4]
 801354c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013550:	3301      	adds	r3, #1
 8013552:	b29b      	uxth	r3, r3
 8013554:	e7df      	b.n	8013516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8013556:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1cf      	bne.n	80134fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801355e:	b01b      	add	sp, #108	; 0x6c
 8013560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013564:	462f      	mov	r7, r5
 8013566:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801356a:	42bb      	cmp	r3, r7
 801356c:	d90b      	bls.n	8013586 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801356e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013572:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8013576:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801357a:	4620      	mov	r0, r4
 801357c:	3701      	adds	r7, #1
 801357e:	f7ff fc53 	bl	8012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013582:	b2bf      	uxth	r7, r7
 8013584:	e7ef      	b.n	8013566 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8013586:	4a9f      	ldr	r2, [pc, #636]	; (8013804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8013588:	6813      	ldr	r3, [r2, #0]
 801358a:	4690      	mov	r8, r2
 801358c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013590:	2b01      	cmp	r3, #1
 8013592:	f040 80e6 	bne.w	8013762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8013596:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801359a:	4629      	mov	r1, r5
 801359c:	2500      	movs	r5, #0
 801359e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80135a2:	33ae      	adds	r3, #174	; 0xae
 80135a4:	428f      	cmp	r7, r1
 80135a6:	f103 0308 	add.w	r3, r3, #8
 80135aa:	dd0a      	ble.n	80135c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80135ac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80135b0:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80135b4:	3101      	adds	r1, #1
 80135b6:	4402      	add	r2, r0
 80135b8:	b212      	sxth	r2, r2
 80135ba:	4295      	cmp	r5, r2
 80135bc:	bfb8      	it	lt
 80135be:	4615      	movlt	r5, r2
 80135c0:	e7f0      	b.n	80135a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80135c2:	4b91      	ldr	r3, [pc, #580]	; (8013808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80135c4:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8013804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	46d8      	mov	r8, fp
 80135cc:	2b0f      	cmp	r3, #15
 80135ce:	bf88      	it	hi
 80135d0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80135d4:	f04f 0300 	mov.w	r3, #0
 80135d8:	bf98      	it	ls
 80135da:	f04f 0a01 	movls.w	sl, #1
 80135de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80135e2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80135e6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80135ea:	4438      	add	r0, r7
 80135ec:	b207      	sxth	r7, r0
 80135ee:	f8db 0000 	ldr.w	r0, [fp]
 80135f2:	42bd      	cmp	r5, r7
 80135f4:	6803      	ldr	r3, [r0, #0]
 80135f6:	f340 8084 	ble.w	8013702 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80135fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80135fe:	4798      	blx	r3
 8013600:	eb07 030a 	add.w	r3, r7, sl
 8013604:	4298      	cmp	r0, r3
 8013606:	da07      	bge.n	8013618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8013608:	4285      	cmp	r5, r0
 801360a:	dd05      	ble.n	8013618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801360c:	4287      	cmp	r7, r0
 801360e:	dd6d      	ble.n	80136ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8013610:	2f00      	cmp	r7, #0
 8013612:	dd6b      	ble.n	80136ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8013614:	4628      	mov	r0, r5
 8013616:	e004      	b.n	8013622 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8013618:	4287      	cmp	r7, r0
 801361a:	dcfb      	bgt.n	8013614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801361c:	42a8      	cmp	r0, r5
 801361e:	bfa8      	it	ge
 8013620:	4628      	movge	r0, r5
 8013622:	2200      	movs	r2, #0
 8013624:	4b79      	ldr	r3, [pc, #484]	; (801380c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8013626:	1bc0      	subs	r0, r0, r7
 8013628:	f9b3 3000 	ldrsh.w	r3, [r3]
 801362c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013630:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013634:	9b02      	ldr	r3, [sp, #8]
 8013636:	f8ad 2014 	strh.w	r2, [sp, #20]
 801363a:	881f      	ldrh	r7, [r3, #0]
 801363c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013640:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8013644:	42bb      	cmp	r3, r7
 8013646:	d9cc      	bls.n	80135e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8013648:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801364c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013650:	ab07      	add	r3, sp, #28
 8013652:	6851      	ldr	r1, [r2, #4]
 8013654:	c303      	stmia	r3!, {r0, r1}
 8013656:	a905      	add	r1, sp, #20
 8013658:	a807      	add	r0, sp, #28
 801365a:	f7ff f9e7 	bl	8012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801365e:	2800      	cmp	r0, #0
 8013660:	d04c      	beq.n	80136fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8013662:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013666:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801366a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801366e:	4686      	mov	lr, r0
 8013670:	4290      	cmp	r0, r2
 8013672:	4448      	add	r0, r9
 8013674:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8013678:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801367c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013680:	bfb8      	it	lt
 8013682:	4696      	movlt	lr, r2
 8013684:	444a      	add	r2, r9
 8013686:	4299      	cmp	r1, r3
 8013688:	b280      	uxth	r0, r0
 801368a:	b292      	uxth	r2, r2
 801368c:	468c      	mov	ip, r1
 801368e:	9303      	str	r3, [sp, #12]
 8013690:	bfb8      	it	lt
 8013692:	469c      	movlt	ip, r3
 8013694:	fa0f f982 	sxth.w	r9, r2
 8013698:	b203      	sxth	r3, r0
 801369a:	454b      	cmp	r3, r9
 801369c:	bfb8      	it	lt
 801369e:	4602      	movlt	r2, r0
 80136a0:	eba2 020e 	sub.w	r2, r2, lr
 80136a4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80136a8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80136ac:	9b03      	ldr	r3, [sp, #12]
 80136ae:	4411      	add	r1, r2
 80136b0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80136b4:	b289      	uxth	r1, r1
 80136b6:	4413      	add	r3, r2
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	b208      	sxth	r0, r1
 80136bc:	b21a      	sxth	r2, r3
 80136be:	4290      	cmp	r0, r2
 80136c0:	bfb8      	it	lt
 80136c2:	460b      	movlt	r3, r1
 80136c4:	eba3 030c 	sub.w	r3, r3, ip
 80136c8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80136cc:	f8ad e01c 	strh.w	lr, [sp, #28]
 80136d0:	f8ad c01e 	strh.w	ip, [sp, #30]
 80136d4:	a807      	add	r0, sp, #28
 80136d6:	f7fd f942 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80136da:	b920      	cbnz	r0, 80136e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	a907      	add	r1, sp, #28
 80136e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e2:	4620      	mov	r0, r4
 80136e4:	4798      	blx	r3
 80136e6:	3701      	adds	r7, #1
 80136e8:	b2bf      	uxth	r7, r7
 80136ea:	e7a9      	b.n	8013640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80136ec:	f8d8 0000 	ldr.w	r0, [r8]
 80136f0:	2101      	movs	r1, #1
 80136f2:	6803      	ldr	r3, [r0, #0]
 80136f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80136f8:	4798      	blx	r3
 80136fa:	e772      	b.n	80135e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80136fc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013700:	e7e8      	b.n	80136d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8013702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013704:	4798      	blx	r3
 8013706:	4b42      	ldr	r3, [pc, #264]	; (8013810 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	f43f af27 	beq.w	801355e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8013710:	2300      	movs	r3, #0
 8013712:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8013716:	9b02      	ldr	r3, [sp, #8]
 8013718:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801371c:	881b      	ldrh	r3, [r3, #0]
 801371e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8013722:	429d      	cmp	r5, r3
 8013724:	f67f af1b 	bls.w	801355e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8013728:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801372c:	2907      	cmp	r1, #7
 801372e:	d815      	bhi.n	801375c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8013730:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8013734:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8013738:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801373c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8013740:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8013744:	1c4a      	adds	r2, r1, #1
 8013746:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801374a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801374e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8013752:	f8a2 e002 	strh.w	lr, [r2, #2]
 8013756:	f8a2 c004 	strh.w	ip, [r2, #4]
 801375a:	80d7      	strh	r7, [r2, #6]
 801375c:	3301      	adds	r3, #1
 801375e:	b29b      	uxth	r3, r3
 8013760:	e7df      	b.n	8013722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8013762:	2b02      	cmp	r3, #2
 8013764:	f040 8136 	bne.w	80139d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8013768:	4b2a      	ldr	r3, [pc, #168]	; (8013814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801376a:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2b01      	cmp	r3, #1
 8013772:	f000 809c 	beq.w	80138ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8013776:	9b02      	ldr	r3, [sp, #8]
 8013778:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801377c:	f8b3 b000 	ldrh.w	fp, [r3]
 8013780:	f10b 0b01 	add.w	fp, fp, #1
 8013784:	fa1f fb8b 	uxth.w	fp, fp
 8013788:	2a00      	cmp	r2, #0
 801378a:	d0bc      	beq.n	8013706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801378c:	4659      	mov	r1, fp
 801378e:	f04f 0800 	mov.w	r8, #0
 8013792:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8013796:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801379a:	441d      	add	r5, r3
 801379c:	b22d      	sxth	r5, r5
 801379e:	b28b      	uxth	r3, r1
 80137a0:	429a      	cmp	r2, r3
 80137a2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80137a6:	f240 80c1 	bls.w	801392c <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80137aa:	4427      	add	r7, r4
 80137ac:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80137b0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80137b4:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80137b8:	4608      	mov	r0, r1
 80137ba:	4563      	cmp	r3, ip
 80137bc:	f340 80a3 	ble.w	8013906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80137c0:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80137c4:	4465      	add	r5, ip
 80137c6:	b22d      	sxth	r5, r5
 80137c8:	429d      	cmp	r5, r3
 80137ca:	bfa8      	it	ge
 80137cc:	461d      	movge	r5, r3
 80137ce:	3101      	adds	r1, #1
 80137d0:	4680      	mov	r8, r0
 80137d2:	e7e4      	b.n	801379e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80137d4:	d10b      	bne.n	80137ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80137d6:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80137da:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80137de:	458c      	cmp	ip, r1
 80137e0:	bfb4      	ite	lt
 80137e2:	469c      	movlt	ip, r3
 80137e4:	46bc      	movge	ip, r7
 80137e6:	4572      	cmp	r2, lr
 80137e8:	bfb8      	it	lt
 80137ea:	4672      	movlt	r2, lr
 80137ec:	e088      	b.n	8013900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80137ee:	428a      	cmp	r2, r1
 80137f0:	bfb8      	it	lt
 80137f2:	460a      	movlt	r2, r1
 80137f4:	46bc      	mov	ip, r7
 80137f6:	e083      	b.n	8013900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80137f8:	2001fdd8 	.word	0x2001fdd8
 80137fc:	2001fde4 	.word	0x2001fde4
 8013800:	2000001c 	.word	0x2000001c
 8013804:	2001fda0 	.word	0x2001fda0
 8013808:	2001fd96 	.word	0x2001fd96
 801380c:	2001fd94 	.word	0x2001fd94
 8013810:	2001fd9e 	.word	0x2001fd9e
 8013814:	2001fd98 	.word	0x2001fd98
 8013818:	1961      	adds	r1, r4, r5
 801381a:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801381e:	ab07      	add	r3, sp, #28
 8013820:	6849      	ldr	r1, [r1, #4]
 8013822:	c303      	stmia	r3!, {r0, r1}
 8013824:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013828:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801382c:	2b13      	cmp	r3, #19
 801382e:	bfd8      	it	le
 8013830:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013834:	440b      	add	r3, r1
 8013836:	1a9b      	subs	r3, r3, r2
 8013838:	a807      	add	r0, sp, #28
 801383a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801383e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013842:	f7ff f85b 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013846:	a807      	add	r0, sp, #28
 8013848:	f7fd f889 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 801384c:	bb78      	cbnz	r0, 80138ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801384e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8013852:	f8d8 0000 	ldr.w	r0, [r8]
 8013856:	f1bc 0f14 	cmp.w	ip, #20
 801385a:	bfa8      	it	ge
 801385c:	f04f 0c14 	movge.w	ip, #20
 8013860:	f8d0 e000 	ldr.w	lr, [r0]
 8013864:	fa1f fc8c 	uxth.w	ip, ip
 8013868:	f8cd c000 	str.w	ip, [sp]
 801386c:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8013870:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013874:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013878:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801387c:	47d0      	blx	sl
 801387e:	4682      	mov	sl, r0
 8013880:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013884:	a807      	add	r0, sp, #28
 8013886:	f7ff f81f 	bl	80128c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	4620      	mov	r0, r4
 801388e:	4425      	add	r5, r4
 8013890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013892:	a907      	add	r1, sp, #28
 8013894:	4798      	blx	r3
 8013896:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801389a:	eba0 000a 	sub.w	r0, r0, sl
 801389e:	b200      	sxth	r0, r0
 80138a0:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80138a4:	b918      	cbnz	r0, 80138ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80138a6:	b2b9      	uxth	r1, r7
 80138a8:	4648      	mov	r0, r9
 80138aa:	f7ff faa9 	bl	8012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80138ae:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80138b2:	f1bb 0f00 	cmp.w	fp, #0
 80138b6:	f43f af26 	beq.w	8013706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80138ba:	2700      	movs	r7, #0
 80138bc:	9b02      	ldr	r3, [sp, #8]
 80138be:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	3301      	adds	r3, #1
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	b299      	uxth	r1, r3
 80138ca:	458b      	cmp	fp, r1
 80138cc:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80138d0:	d9a2      	bls.n	8013818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80138d2:	4425      	add	r5, r4
 80138d4:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80138d8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80138dc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80138e0:	4408      	add	r0, r1
 80138e2:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80138e6:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80138ea:	b200      	sxth	r0, r0
 80138ec:	4471      	add	r1, lr
 80138ee:	b209      	sxth	r1, r1
 80138f0:	4288      	cmp	r0, r1
 80138f2:	469c      	mov	ip, r3
 80138f4:	f6bf af6e 	bge.w	80137d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80138f8:	4586      	cmp	lr, r0
 80138fa:	4672      	mov	r2, lr
 80138fc:	bfb8      	it	lt
 80138fe:	4602      	movlt	r2, r0
 8013900:	3301      	adds	r3, #1
 8013902:	4667      	mov	r7, ip
 8013904:	e7e0      	b.n	80138c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8013906:	d10c      	bne.n	8013922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8013908:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801390c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8013910:	4287      	cmp	r7, r0
 8013912:	bfb4      	ite	lt
 8013914:	4608      	movlt	r0, r1
 8013916:	4640      	movge	r0, r8
 8013918:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 801391c:	443b      	add	r3, r7
 801391e:	b21b      	sxth	r3, r3
 8013920:	e752      	b.n	80137c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8013922:	4565      	cmp	r5, ip
 8013924:	bfa8      	it	ge
 8013926:	4665      	movge	r5, ip
 8013928:	4640      	mov	r0, r8
 801392a:	e750      	b.n	80137ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 801392c:	eb09 0007 	add.w	r0, r9, r7
 8013930:	4427      	add	r7, r4
 8013932:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8013936:	9203      	str	r2, [sp, #12]
 8013938:	f1ba 0f13 	cmp.w	sl, #19
 801393c:	bfde      	ittt	le
 801393e:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8013942:	4455      	addle	r5, sl
 8013944:	b22d      	sxthle	r5, r5
 8013946:	f7fd f80a 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 801394a:	9a03      	ldr	r2, [sp, #12]
 801394c:	2800      	cmp	r0, #0
 801394e:	f47f af1b 	bne.w	8013788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8013952:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8013956:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801395a:	1aad      	subs	r5, r5, r2
 801395c:	2d14      	cmp	r5, #20
 801395e:	bfa8      	it	ge
 8013960:	2514      	movge	r5, #20
 8013962:	4828      	ldr	r0, [pc, #160]	; (8013a04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8013964:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8013968:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801396c:	6800      	ldr	r0, [r0, #0]
 801396e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013972:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013976:	f8ad 3020 	strh.w	r3, [sp, #32]
 801397a:	f8d0 c000 	ldr.w	ip, [r0]
 801397e:	b2ad      	uxth	r5, r5
 8013980:	fa1f fa8a 	uxth.w	sl, sl
 8013984:	4555      	cmp	r5, sl
 8013986:	bf94      	ite	ls
 8013988:	9500      	strls	r5, [sp, #0]
 801398a:	f8cd a000 	strhi.w	sl, [sp]
 801398e:	b292      	uxth	r2, r2
 8013990:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8013994:	b29b      	uxth	r3, r3
 8013996:	b289      	uxth	r1, r1
 8013998:	47a8      	blx	r5
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80139a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139a2:	a907      	add	r1, sp, #28
 80139a4:	4620      	mov	r0, r4
 80139a6:	4798      	blx	r3
 80139a8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80139ac:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80139b0:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80139b4:	1a5b      	subs	r3, r3, r1
 80139b6:	440a      	add	r2, r1
 80139b8:	b21b      	sxth	r3, r3
 80139ba:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80139be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f47f aed7 	bne.w	8013776 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80139c8:	fa1f f188 	uxth.w	r1, r8
 80139cc:	4648      	mov	r0, r9
 80139ce:	f7ff fa17 	bl	8012e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80139d2:	e6d0      	b.n	8013776 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80139d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80139d8:	42ab      	cmp	r3, r5
 80139da:	f67f ae94 	bls.w	8013706 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80139de:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80139e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80139e6:	ab07      	add	r3, sp, #28
 80139e8:	6851      	ldr	r1, [r2, #4]
 80139ea:	c303      	stmia	r3!, {r0, r1}
 80139ec:	a807      	add	r0, sp, #28
 80139ee:	f7fc ffb6 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80139f2:	b920      	cbnz	r0, 80139fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 80139f4:	6823      	ldr	r3, [r4, #0]
 80139f6:	a907      	add	r1, sp, #28
 80139f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139fa:	4620      	mov	r0, r4
 80139fc:	4798      	blx	r3
 80139fe:	3501      	adds	r5, #1
 8013a00:	b2ad      	uxth	r5, r5
 8013a02:	e7e7      	b.n	80139d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8013a04:	2001fda0 	.word	0x2001fda0

08013a08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013a08:	2200      	movs	r2, #0
 8013a0a:	4b03      	ldr	r3, [pc, #12]	; (8013a18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013a0c:	801a      	strh	r2, [r3, #0]
 8013a0e:	805a      	strh	r2, [r3, #2]
 8013a10:	809a      	strh	r2, [r3, #4]
 8013a12:	80da      	strh	r2, [r3, #6]
 8013a14:	4770      	bx	lr
 8013a16:	bf00      	nop
 8013a18:	2001fde4 	.word	0x2001fde4

08013a1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a20:	4606      	mov	r6, r0
 8013a22:	b09d      	sub	sp, #116	; 0x74
 8013a24:	a803      	add	r0, sp, #12
 8013a26:	4614      	mov	r4, r2
 8013a28:	468a      	mov	sl, r1
 8013a2a:	461d      	mov	r5, r3
 8013a2c:	f000 fd72 	bl	8014514 <_ZN8touchgfx12TextProviderC1Ev>
 8013a30:	6833      	ldr	r3, [r6, #0]
 8013a32:	4630      	mov	r0, r6
 8013a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a36:	4798      	blx	r3
 8013a38:	6833      	ldr	r3, [r6, #0]
 8013a3a:	4607      	mov	r7, r0
 8013a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a3e:	4630      	mov	r0, r6
 8013a40:	4798      	blx	r3
 8013a42:	462a      	mov	r2, r5
 8013a44:	2500      	movs	r5, #0
 8013a46:	9000      	str	r0, [sp, #0]
 8013a48:	4621      	mov	r1, r4
 8013a4a:	463b      	mov	r3, r7
 8013a4c:	a803      	add	r0, sp, #12
 8013a4e:	f000 fdb4 	bl	80145ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a52:	462c      	mov	r4, r5
 8013a54:	46a9      	mov	r9, r5
 8013a56:	46a8      	mov	r8, r5
 8013a58:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	9302      	str	r3, [sp, #8]
 8013a60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013a64:	429c      	cmp	r4, r3
 8013a66:	d002      	beq.n	8013a6e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013a68:	455c      	cmp	r4, fp
 8013a6a:	bf18      	it	ne
 8013a6c:	4625      	movne	r5, r4
 8013a6e:	ab02      	add	r3, sp, #8
 8013a70:	4632      	mov	r2, r6
 8013a72:	4651      	mov	r1, sl
 8013a74:	a803      	add	r0, sp, #12
 8013a76:	f001 f88f 	bl	8014b98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	b108      	cbz	r0, 8013a82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8013a7e:	280a      	cmp	r0, #10
 8013a80:	d10a      	bne.n	8013a98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013a82:	45c1      	cmp	r9, r8
 8013a84:	bf38      	it	cc
 8013a86:	46c1      	movcc	r9, r8
 8013a88:	f04f 0800 	mov.w	r8, #0
 8013a8c:	2c00      	cmp	r4, #0
 8013a8e:	d1e5      	bne.n	8013a5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013a90:	4648      	mov	r0, r9
 8013a92:	b01d      	add	sp, #116	; 0x74
 8013a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a98:	9a02      	ldr	r2, [sp, #8]
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	d0de      	beq.n	8013a5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013a9e:	7b57      	ldrb	r7, [r2, #13]
 8013aa0:	6833      	ldr	r3, [r6, #0]
 8013aa2:	007f      	lsls	r7, r7, #1
 8013aa4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8013aa8:	7a97      	ldrb	r7, [r2, #10]
 8013aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aac:	4307      	orrs	r7, r0
 8013aae:	4629      	mov	r1, r5
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	8894      	ldrh	r4, [r2, #4]
 8013ab4:	4798      	blx	r3
 8013ab6:	4438      	add	r0, r7
 8013ab8:	4480      	add	r8, r0
 8013aba:	fa1f f888 	uxth.w	r8, r8
 8013abe:	e7e5      	b.n	8013a8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013ac0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013ac0:	b508      	push	{r3, lr}
 8013ac2:	6803      	ldr	r3, [r0, #0]
 8013ac4:	68db      	ldr	r3, [r3, #12]
 8013ac6:	4798      	blx	r3
 8013ac8:	b128      	cbz	r0, 8013ad6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013aca:	7b43      	ldrb	r3, [r0, #13]
 8013acc:	7a80      	ldrb	r0, [r0, #10]
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ad4:	4318      	orrs	r0, r3
 8013ad6:	bd08      	pop	{r3, pc}

08013ad8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013ad8:	b40e      	push	{r1, r2, r3}
 8013ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013adc:	4605      	mov	r5, r0
 8013ade:	b09e      	sub	sp, #120	; 0x78
 8013ae0:	ab23      	add	r3, sp, #140	; 0x8c
 8013ae2:	f853 4b04 	ldr.w	r4, [r3], #4
 8013ae6:	a805      	add	r0, sp, #20
 8013ae8:	9303      	str	r3, [sp, #12]
 8013aea:	f000 fd13 	bl	8014514 <_ZN8touchgfx12TextProviderC1Ev>
 8013aee:	682b      	ldr	r3, [r5, #0]
 8013af0:	4628      	mov	r0, r5
 8013af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013af4:	4798      	blx	r3
 8013af6:	682b      	ldr	r3, [r5, #0]
 8013af8:	4606      	mov	r6, r0
 8013afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013afc:	4628      	mov	r0, r5
 8013afe:	4798      	blx	r3
 8013b00:	4621      	mov	r1, r4
 8013b02:	2400      	movs	r4, #0
 8013b04:	4633      	mov	r3, r6
 8013b06:	9000      	str	r0, [sp, #0]
 8013b08:	9a03      	ldr	r2, [sp, #12]
 8013b0a:	ae1e      	add	r6, sp, #120	; 0x78
 8013b0c:	a805      	add	r0, sp, #20
 8013b0e:	f000 fd54 	bl	80145ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013b12:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013b16:	4633      	mov	r3, r6
 8013b18:	462a      	mov	r2, r5
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	a805      	add	r0, sp, #20
 8013b1e:	f001 f83b 	bl	8014b98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013b22:	b1f0      	cbz	r0, 8013b62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8013b24:	280a      	cmp	r0, #10
 8013b26:	d018      	beq.n	8013b5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8013b28:	9f04      	ldr	r7, [sp, #16]
 8013b2a:	b1b7      	cbz	r7, 8013b5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8013b2c:	7b78      	ldrb	r0, [r7, #13]
 8013b2e:	7a3b      	ldrb	r3, [r7, #8]
 8013b30:	00c1      	lsls	r1, r0, #3
 8013b32:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013b36:	4319      	orrs	r1, r3
 8013b38:	0643      	lsls	r3, r0, #25
 8013b3a:	bf44      	itt	mi
 8013b3c:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8013b40:	b219      	sxthmi	r1, r3
 8013b42:	0100      	lsls	r0, r0, #4
 8013b44:	79fb      	ldrb	r3, [r7, #7]
 8013b46:	88ea      	ldrh	r2, [r5, #6]
 8013b48:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013b4c:	4303      	orrs	r3, r0
 8013b4e:	4413      	add	r3, r2
 8013b50:	1a5b      	subs	r3, r3, r1
 8013b52:	b21b      	sxth	r3, r3
 8013b54:	429c      	cmp	r4, r3
 8013b56:	bfb8      	it	lt
 8013b58:	461c      	movlt	r4, r3
 8013b5a:	4633      	mov	r3, r6
 8013b5c:	462a      	mov	r2, r5
 8013b5e:	2100      	movs	r1, #0
 8013b60:	e7dc      	b.n	8013b1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013b62:	b2a0      	uxth	r0, r4
 8013b64:	b01e      	add	sp, #120	; 0x78
 8013b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013b6a:	b003      	add	sp, #12
 8013b6c:	4770      	bx	lr

08013b6e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8013b6e:	7a43      	ldrb	r3, [r0, #9]
 8013b70:	8880      	ldrh	r0, [r0, #4]
 8013b72:	4418      	add	r0, r3
 8013b74:	b280      	uxth	r0, r0
 8013b76:	4770      	bx	lr

08013b78 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8013b78:	6803      	ldr	r3, [r0, #0]
 8013b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b7c:	4718      	bx	r3

08013b7e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013b7e:	b40e      	push	{r1, r2, r3}
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	4604      	mov	r4, r0
 8013b84:	b09d      	sub	sp, #116	; 0x74
 8013b86:	ab21      	add	r3, sp, #132	; 0x84
 8013b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b8c:	a803      	add	r0, sp, #12
 8013b8e:	9302      	str	r3, [sp, #8]
 8013b90:	f000 fcc0 	bl	8014514 <_ZN8touchgfx12TextProviderC1Ev>
 8013b94:	6823      	ldr	r3, [r4, #0]
 8013b96:	4620      	mov	r0, r4
 8013b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b9a:	4798      	blx	r3
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	4798      	blx	r3
 8013ba6:	4633      	mov	r3, r6
 8013ba8:	9000      	str	r0, [sp, #0]
 8013baa:	9a02      	ldr	r2, [sp, #8]
 8013bac:	4629      	mov	r1, r5
 8013bae:	a803      	add	r0, sp, #12
 8013bb0:	f000 fd03 	bl	80145ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013bb4:	a803      	add	r0, sp, #12
 8013bb6:	f001 f871 	bl	8014c9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013bba:	2401      	movs	r4, #1
 8013bbc:	b2a3      	uxth	r3, r4
 8013bbe:	b140      	cbz	r0, 8013bd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8013bc0:	280a      	cmp	r0, #10
 8013bc2:	bf08      	it	eq
 8013bc4:	3301      	addeq	r3, #1
 8013bc6:	a803      	add	r0, sp, #12
 8013bc8:	bf08      	it	eq
 8013bca:	b21c      	sxtheq	r4, r3
 8013bcc:	f001 f866 	bl	8014c9c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013bd0:	e7f4      	b.n	8013bbc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	b01d      	add	sp, #116	; 0x74
 8013bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bda:	b003      	add	sp, #12
 8013bdc:	4770      	bx	lr

08013bde <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013bde:	b40e      	push	{r1, r2, r3}
 8013be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be2:	4604      	mov	r4, r0
 8013be4:	b09e      	sub	sp, #120	; 0x78
 8013be6:	ab23      	add	r3, sp, #140	; 0x8c
 8013be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013bec:	a805      	add	r0, sp, #20
 8013bee:	9303      	str	r3, [sp, #12]
 8013bf0:	f000 fc90 	bl	8014514 <_ZN8touchgfx12TextProviderC1Ev>
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bfa:	4798      	blx	r3
 8013bfc:	6823      	ldr	r3, [r4, #0]
 8013bfe:	4606      	mov	r6, r0
 8013c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c02:	4620      	mov	r0, r4
 8013c04:	4798      	blx	r3
 8013c06:	4633      	mov	r3, r6
 8013c08:	4629      	mov	r1, r5
 8013c0a:	9000      	str	r0, [sp, #0]
 8013c0c:	9a03      	ldr	r2, [sp, #12]
 8013c0e:	a805      	add	r0, sp, #20
 8013c10:	f000 fcd3 	bl	80145ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013c14:	2100      	movs	r1, #0
 8013c16:	ad1e      	add	r5, sp, #120	; 0x78
 8013c18:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013c1c:	462b      	mov	r3, r5
 8013c1e:	4622      	mov	r2, r4
 8013c20:	a805      	add	r0, sp, #20
 8013c22:	f000 ffb9 	bl	8014b98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c26:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8013c2a:	b1d8      	cbz	r0, 8013c64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8013c2c:	280a      	cmp	r0, #10
 8013c2e:	d012      	beq.n	8013c56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013c30:	9804      	ldr	r0, [sp, #16]
 8013c32:	b180      	cbz	r0, 8013c56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013c34:	7b47      	ldrb	r7, [r0, #13]
 8013c36:	88e2      	ldrh	r2, [r4, #6]
 8013c38:	00fb      	lsls	r3, r7, #3
 8013c3a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013c3e:	7a03      	ldrb	r3, [r0, #8]
 8013c40:	430b      	orrs	r3, r1
 8013c42:	0679      	lsls	r1, r7, #25
 8013c44:	bf44      	itt	mi
 8013c46:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013c4a:	b21b      	sxthmi	r3, r3
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	b21b      	sxth	r3, r3
 8013c50:	429e      	cmp	r6, r3
 8013c52:	bfa8      	it	ge
 8013c54:	461e      	movge	r6, r3
 8013c56:	462b      	mov	r3, r5
 8013c58:	4622      	mov	r2, r4
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	a805      	add	r0, sp, #20
 8013c5e:	f000 ff9b 	bl	8014b98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c62:	e7e2      	b.n	8013c2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8013c64:	4630      	mov	r0, r6
 8013c66:	b01e      	add	sp, #120	; 0x78
 8013c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013c6c:	b003      	add	sp, #12
 8013c6e:	4770      	bx	lr

08013c70 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013c70:	b513      	push	{r0, r1, r4, lr}
 8013c72:	2400      	movs	r4, #0
 8013c74:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013c78:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013c7c:	6803      	ldr	r3, [r0, #0]
 8013c7e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013c82:	9400      	str	r4, [sp, #0]
 8013c84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013c88:	691b      	ldr	r3, [r3, #16]
 8013c8a:	4669      	mov	r1, sp
 8013c8c:	4798      	blx	r3
 8013c8e:	b002      	add	sp, #8
 8013c90:	bd10      	pop	{r4, pc}

08013c92 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013c92:	b538      	push	{r3, r4, r5, lr}
 8013c94:	460c      	mov	r4, r1
 8013c96:	4605      	mov	r5, r0
 8013c98:	680b      	ldr	r3, [r1, #0]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	4798      	blx	r3
 8013c9e:	6823      	ldr	r3, [r4, #0]
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	4798      	blx	r3
 8013ca8:	4628      	mov	r0, r5
 8013caa:	bd38      	pop	{r3, r4, r5, pc}

08013cac <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013cac:	b410      	push	{r4}
 8013cae:	880a      	ldrh	r2, [r1, #0]
 8013cb0:	8884      	ldrh	r4, [r0, #4]
 8013cb2:	4422      	add	r2, r4
 8013cb4:	800a      	strh	r2, [r1, #0]
 8013cb6:	88c4      	ldrh	r4, [r0, #6]
 8013cb8:	884a      	ldrh	r2, [r1, #2]
 8013cba:	4422      	add	r2, r4
 8013cbc:	804a      	strh	r2, [r1, #2]
 8013cbe:	6940      	ldr	r0, [r0, #20]
 8013cc0:	b120      	cbz	r0, 8013ccc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013cc2:	6803      	ldr	r3, [r0, #0]
 8013cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cca:	4718      	bx	r3
 8013ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013cd2:	b570      	push	{r4, r5, r6, lr}
 8013cd4:	460c      	mov	r4, r1
 8013cd6:	8882      	ldrh	r2, [r0, #4]
 8013cd8:	880b      	ldrh	r3, [r1, #0]
 8013cda:	4605      	mov	r5, r0
 8013cdc:	4413      	add	r3, r2
 8013cde:	800b      	strh	r3, [r1, #0]
 8013ce0:	88c2      	ldrh	r2, [r0, #6]
 8013ce2:	884b      	ldrh	r3, [r1, #2]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	804b      	strh	r3, [r1, #2]
 8013ce8:	1d01      	adds	r1, r0, #4
 8013cea:	4620      	mov	r0, r4
 8013cec:	f7fc fdf4 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8013cf0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	dd0b      	ble.n	8013d10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013cf8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dd07      	ble.n	8013d10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013d00:	6968      	ldr	r0, [r5, #20]
 8013d02:	b128      	cbz	r0, 8013d10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013d04:	6803      	ldr	r3, [r0, #0]
 8013d06:	4621      	mov	r1, r4
 8013d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d0e:	4718      	bx	r3
 8013d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	460c      	mov	r4, r1
 8013d18:	8882      	ldrh	r2, [r0, #4]
 8013d1a:	880b      	ldrh	r3, [r1, #0]
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	4413      	add	r3, r2
 8013d20:	800b      	strh	r3, [r1, #0]
 8013d22:	88c2      	ldrh	r2, [r0, #6]
 8013d24:	884b      	ldrh	r3, [r1, #2]
 8013d26:	4413      	add	r3, r2
 8013d28:	804b      	strh	r3, [r1, #2]
 8013d2a:	1d01      	adds	r1, r0, #4
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f7fc fdd3 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8013d32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	dd18      	ble.n	8013d6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013d3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	dd14      	ble.n	8013d6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013d42:	6968      	ldr	r0, [r5, #20]
 8013d44:	b128      	cbz	r0, 8013d52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013d46:	6803      	ldr	r3, [r0, #0]
 8013d48:	4621      	mov	r1, r4
 8013d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d4e:	691b      	ldr	r3, [r3, #16]
 8013d50:	4718      	bx	r3
 8013d52:	4b07      	ldr	r3, [pc, #28]	; (8013d70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	3304      	adds	r3, #4
 8013d58:	429d      	cmp	r5, r3
 8013d5a:	d107      	bne.n	8013d6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013d5c:	f7fe ff44 	bl	8012be8 <_ZN8touchgfx11Application11getInstanceEv>
 8013d60:	6821      	ldr	r1, [r4, #0]
 8013d62:	6862      	ldr	r2, [r4, #4]
 8013d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d68:	f7ff b85e 	b.w	8012e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013d6c:	bd70      	pop	{r4, r5, r6, pc}
 8013d6e:	bf00      	nop
 8013d70:	2001fddc 	.word	0x2001fddc

08013d74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	4604      	mov	r4, r0
 8013d78:	4616      	mov	r6, r2
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	b901      	cbnz	r1, 8013d80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013d7e:	b192      	cbz	r2, 8013da6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013d80:	6823      	ldr	r3, [r4, #0]
 8013d82:	4620      	mov	r0, r4
 8013d84:	699b      	ldr	r3, [r3, #24]
 8013d86:	4798      	blx	r3
 8013d88:	88e2      	ldrh	r2, [r4, #6]
 8013d8a:	88a1      	ldrh	r1, [r4, #4]
 8013d8c:	4432      	add	r2, r6
 8013d8e:	4429      	add	r1, r5
 8013d90:	4620      	mov	r0, r4
 8013d92:	b212      	sxth	r2, r2
 8013d94:	b209      	sxth	r1, r1
 8013d96:	f7f9 ff54 	bl	800dc42 <_ZN8touchgfx8Drawable5setXYEss>
 8013d9a:	6823      	ldr	r3, [r4, #0]
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013da2:	699b      	ldr	r3, [r3, #24]
 8013da4:	4718      	bx	r3
 8013da6:	bd70      	pop	{r4, r5, r6, pc}

08013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013da8:	b510      	push	{r4, lr}
 8013daa:	2300      	movs	r3, #0
 8013dac:	4604      	mov	r4, r0
 8013dae:	4608      	mov	r0, r1
 8013db0:	8023      	strh	r3, [r4, #0]
 8013db2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013db6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013dba:	8063      	strh	r3, [r4, #2]
 8013dbc:	6803      	ldr	r3, [r0, #0]
 8013dbe:	80a1      	strh	r1, [r4, #4]
 8013dc0:	80e2      	strh	r2, [r4, #6]
 8013dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc4:	4621      	mov	r1, r4
 8013dc6:	4798      	blx	r3
 8013dc8:	4620      	mov	r0, r4
 8013dca:	bd10      	pop	{r4, pc}

08013dcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013dcc:	b530      	push	{r4, r5, lr}
 8013dce:	8083      	strh	r3, [r0, #4]
 8013dd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013dd4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013dd8:	80c3      	strh	r3, [r0, #6]
 8013dda:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013dde:	6141      	str	r1, [r0, #20]
 8013de0:	7203      	strb	r3, [r0, #8]
 8013de2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013de6:	8302      	strh	r2, [r0, #24]
 8013de8:	7243      	strb	r3, [r0, #9]
 8013dea:	7a83      	ldrb	r3, [r0, #10]
 8013dec:	f365 0306 	bfi	r3, r5, #0, #7
 8013df0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8013df4:	f365 13c7 	bfi	r3, r5, #7, #1
 8013df8:	7283      	strb	r3, [r0, #10]
 8013dfa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013dfe:	72c3      	strb	r3, [r0, #11]
 8013e00:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013e04:	7303      	strb	r3, [r0, #12]
 8013e06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8013e0a:	81c3      	strh	r3, [r0, #14]
 8013e0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8013e10:	8203      	strh	r3, [r0, #16]
 8013e12:	4b01      	ldr	r3, [pc, #4]	; (8013e18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8013e14:	6003      	str	r3, [r0, #0]
 8013e16:	bd30      	pop	{r4, r5, pc}
 8013e18:	080238f8 	.word	0x080238f8

08013e1c <_ZNK8touchgfx9ConstFont4findEt>:
 8013e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1e:	6944      	ldr	r4, [r0, #20]
 8013e20:	b3bc      	cbz	r4, 8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e22:	88a3      	ldrh	r3, [r4, #4]
 8013e24:	8b02      	ldrh	r2, [r0, #24]
 8013e26:	1acb      	subs	r3, r1, r3
 8013e28:	f102 32ff 	add.w	r2, r2, #4294967295
 8013e2c:	d431      	bmi.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	dd0c      	ble.n	8013e4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013e32:	230e      	movs	r3, #14
 8013e34:	fb03 4302 	mla	r3, r3, r2, r4
 8013e38:	889b      	ldrh	r3, [r3, #4]
 8013e3a:	1a5b      	subs	r3, r3, r1
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	db27      	blt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	bfbc      	itt	lt
 8013e46:	2302      	movlt	r3, #2
 8013e48:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013e4c:	2500      	movs	r5, #0
 8013e4e:	260e      	movs	r6, #14
 8013e50:	4295      	cmp	r5, r2
 8013e52:	dc1e      	bgt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e54:	fb06 4003 	mla	r0, r6, r3, r4
 8013e58:	8887      	ldrh	r7, [r0, #4]
 8013e5a:	42b9      	cmp	r1, r7
 8013e5c:	d01a      	beq.n	8013e94 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013e5e:	d20d      	bcs.n	8013e7c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013e60:	1e5a      	subs	r2, r3, #1
 8013e62:	4295      	cmp	r5, r2
 8013e64:	dc15      	bgt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e66:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013e6a:	1a5b      	subs	r3, r3, r1
 8013e6c:	1ad3      	subs	r3, r2, r3
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	db0f      	blt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e72:	429d      	cmp	r5, r3
 8013e74:	ddec      	ble.n	8013e50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e76:	1953      	adds	r3, r2, r5
 8013e78:	105b      	asrs	r3, r3, #1
 8013e7a:	e7e9      	b.n	8013e50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e7c:	1c5d      	adds	r5, r3, #1
 8013e7e:	42aa      	cmp	r2, r5
 8013e80:	db07      	blt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e82:	8a43      	ldrh	r3, [r0, #18]
 8013e84:	1acb      	subs	r3, r1, r3
 8013e86:	442b      	add	r3, r5
 8013e88:	429d      	cmp	r5, r3
 8013e8a:	dc02      	bgt.n	8013e92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	dadf      	bge.n	8013e50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e90:	e7f1      	b.n	8013e76 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013e92:	2000      	movs	r0, #0
 8013e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e98:	4604      	mov	r4, r0
 8013e9a:	4617      	mov	r7, r2
 8013e9c:	461e      	mov	r6, r3
 8013e9e:	b911      	cbnz	r1, 8013ea6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013ea0:	2500      	movs	r5, #0
 8013ea2:	4628      	mov	r0, r5
 8013ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea6:	290a      	cmp	r1, #10
 8013ea8:	d0fa      	beq.n	8013ea0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013eaa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013eae:	4291      	cmp	r1, r2
 8013eb0:	d0f6      	beq.n	8013ea0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013eb2:	f242 020b 	movw	r2, #8203	; 0x200b
 8013eb6:	4291      	cmp	r1, r2
 8013eb8:	d0f2      	beq.n	8013ea0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013eba:	f7ff ffaf 	bl	8013e1c <_ZNK8touchgfx9ConstFont4findEt>
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	b950      	cbnz	r0, 8013ed8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013ec2:	6823      	ldr	r3, [r4, #0]
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	4798      	blx	r3
 8013eca:	4601      	mov	r1, r0
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f7ff ffa5 	bl	8013e1c <_ZNK8touchgfx9ConstFont4findEt>
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d0e3      	beq.n	8013ea0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013ed8:	6823      	ldr	r3, [r4, #0]
 8013eda:	4629      	mov	r1, r5
 8013edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ede:	4620      	mov	r0, r4
 8013ee0:	4798      	blx	r3
 8013ee2:	6038      	str	r0, [r7, #0]
 8013ee4:	6823      	ldr	r3, [r4, #0]
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eea:	4798      	blx	r3
 8013eec:	7030      	strb	r0, [r6, #0]
 8013eee:	e7d8      	b.n	8013ea2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013ef0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013ef0:	2000      	movs	r0, #0
 8013ef2:	4770      	bx	lr

08013ef4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013ef4:	2001      	movs	r0, #1
 8013ef6:	4770      	bx	lr

08013ef8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013ef8:	2002      	movs	r0, #2
 8013efa:	4770      	bx	lr

08013efc <_ZN8touchgfx12GestureEventD1Ev>:
 8013efc:	4770      	bx	lr

08013efe <_ZN8touchgfx9DragEventD1Ev>:
 8013efe:	4770      	bx	lr

08013f00 <_ZN8touchgfx10ClickEventD1Ev>:
 8013f00:	4770      	bx	lr

08013f02 <_ZN8touchgfx10ClickEventD0Ev>:
 8013f02:	b510      	push	{r4, lr}
 8013f04:	4604      	mov	r4, r0
 8013f06:	210c      	movs	r1, #12
 8013f08:	f00d f85f 	bl	8020fca <_ZdlPvj>
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	bd10      	pop	{r4, pc}

08013f10 <_ZN8touchgfx9DragEventD0Ev>:
 8013f10:	b510      	push	{r4, lr}
 8013f12:	4604      	mov	r4, r0
 8013f14:	2110      	movs	r1, #16
 8013f16:	f00d f858 	bl	8020fca <_ZdlPvj>
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	bd10      	pop	{r4, pc}

08013f1e <_ZN8touchgfx12GestureEventD0Ev>:
 8013f1e:	b510      	push	{r4, lr}
 8013f20:	4604      	mov	r4, r0
 8013f22:	210c      	movs	r1, #12
 8013f24:	f00d f851 	bl	8020fca <_ZdlPvj>
 8013f28:	4620      	mov	r0, r4
 8013f2a:	bd10      	pop	{r4, pc}

08013f2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013f2c:	b530      	push	{r4, r5, lr}
 8013f2e:	460d      	mov	r5, r1
 8013f30:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013f32:	b087      	sub	sp, #28
 8013f34:	4604      	mov	r4, r0
 8013f36:	b301      	cbz	r1, 8013f7a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013f38:	a801      	add	r0, sp, #4
 8013f3a:	f7ff ff35 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f3e:	892a      	ldrh	r2, [r5, #8]
 8013f40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013f44:	7928      	ldrb	r0, [r5, #4]
 8013f46:	1ad2      	subs	r2, r2, r3
 8013f48:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013f4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f4e:	441a      	add	r2, r3
 8013f50:	896b      	ldrh	r3, [r5, #10]
 8013f52:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013f56:	f88d 0010 	strb.w	r0, [sp, #16]
 8013f5a:	1b5b      	subs	r3, r3, r5
 8013f5c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8013f5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013f60:	442b      	add	r3, r5
 8013f62:	4d07      	ldr	r5, [pc, #28]	; (8013f80 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013f64:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013f68:	9503      	str	r5, [sp, #12]
 8013f6a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f72:	6803      	ldr	r3, [r0, #0]
 8013f74:	a903      	add	r1, sp, #12
 8013f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f78:	4798      	blx	r3
 8013f7a:	b007      	add	sp, #28
 8013f7c:	bd30      	pop	{r4, r5, pc}
 8013f7e:	bf00      	nop
 8013f80:	08023980 	.word	0x08023980

08013f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013f8a:	b08a      	sub	sp, #40	; 0x28
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	460d      	mov	r5, r1
 8013f90:	b113      	cbz	r3, 8013f98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013f92:	790b      	ldrb	r3, [r1, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d044      	beq.n	8014022 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013f98:	f104 0804 	add.w	r8, r4, #4
 8013f9c:	4641      	mov	r1, r8
 8013f9e:	a803      	add	r0, sp, #12
 8013fa0:	f7ff ff02 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fa4:	792b      	ldrb	r3, [r5, #4]
 8013fa6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013faa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013fae:	b983      	cbnz	r3, 8013fd2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013fb0:	892a      	ldrh	r2, [r5, #8]
 8013fb2:	88e9      	ldrh	r1, [r5, #6]
 8013fb4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8013fb8:	1b92      	subs	r2, r2, r6
 8013fba:	1bc9      	subs	r1, r1, r7
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	b212      	sxth	r2, r2
 8013fc6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013fca:	b209      	sxth	r1, r1
 8013fcc:	4640      	mov	r0, r8
 8013fce:	f7fc fba3 	bl	8010718 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013fd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013fd4:	b329      	cbz	r1, 8014022 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013fd6:	a805      	add	r0, sp, #20
 8013fd8:	f7ff fee6 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fdc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013fe0:	792b      	ldrb	r3, [r5, #4]
 8013fe2:	1abf      	subs	r7, r7, r2
 8013fe4:	88ea      	ldrh	r2, [r5, #6]
 8013fe6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013fe8:	4417      	add	r7, r2
 8013fea:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8013fec:	f88d 3020 	strb.w	r3, [sp, #32]
 8013ff0:	4417      	add	r7, r2
 8013ff2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013ff6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013ffa:	1ab6      	subs	r6, r6, r2
 8013ffc:	892a      	ldrh	r2, [r5, #8]
 8013ffe:	a907      	add	r1, sp, #28
 8014000:	4416      	add	r6, r2
 8014002:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014004:	4416      	add	r6, r2
 8014006:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801400a:	2600      	movs	r6, #0
 801400c:	4a06      	ldr	r2, [pc, #24]	; (8014028 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801400e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014012:	9207      	str	r2, [sp, #28]
 8014014:	6803      	ldr	r3, [r0, #0]
 8014016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014018:	4798      	blx	r3
 801401a:	792b      	ldrb	r3, [r5, #4]
 801401c:	b10b      	cbz	r3, 8014022 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801401e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014022:	b00a      	add	sp, #40	; 0x28
 8014024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014028:	08023958 	.word	0x08023958

0801402c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014030:	460c      	mov	r4, r1
 8014032:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014034:	b088      	sub	sp, #32
 8014036:	4605      	mov	r5, r0
 8014038:	2900      	cmp	r1, #0
 801403a:	d06d      	beq.n	8014118 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801403c:	4668      	mov	r0, sp
 801403e:	f7ff feb3 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014042:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8014044:	88e3      	ldrh	r3, [r4, #6]
 8014046:	f9bd 8000 	ldrsh.w	r8, [sp]
 801404a:	440b      	add	r3, r1
 801404c:	b21b      	sxth	r3, r3
 801404e:	4543      	cmp	r3, r8
 8014050:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014054:	db31      	blt.n	80140ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014056:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801405a:	44c4      	add	ip, r8
 801405c:	fa0f fc8c 	sxth.w	ip, ip
 8014060:	4563      	cmp	r3, ip
 8014062:	da2a      	bge.n	80140ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014064:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8014066:	8926      	ldrh	r6, [r4, #8]
 8014068:	4416      	add	r6, r2
 801406a:	b236      	sxth	r6, r6
 801406c:	42be      	cmp	r6, r7
 801406e:	db24      	blt.n	80140ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014070:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014074:	4438      	add	r0, r7
 8014076:	b200      	sxth	r0, r0
 8014078:	4286      	cmp	r6, r0
 801407a:	da1e      	bge.n	80140ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801407c:	8963      	ldrh	r3, [r4, #10]
 801407e:	4419      	add	r1, r3
 8014080:	b209      	sxth	r1, r1
 8014082:	4541      	cmp	r1, r8
 8014084:	db08      	blt.n	8014098 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014086:	4561      	cmp	r1, ip
 8014088:	da06      	bge.n	8014098 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	441a      	add	r2, r3
 801408e:	b212      	sxth	r2, r2
 8014090:	42ba      	cmp	r2, r7
 8014092:	db01      	blt.n	8014098 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014094:	4282      	cmp	r2, r0
 8014096:	db10      	blt.n	80140ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014098:	4b21      	ldr	r3, [pc, #132]	; (8014120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801409a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801409c:	9304      	str	r3, [sp, #16]
 801409e:	2302      	movs	r3, #2
 80140a0:	f88d 3014 	strb.w	r3, [sp, #20]
 80140a4:	2300      	movs	r3, #0
 80140a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80140aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80140ae:	f8ad 301a 	strh.w	r3, [sp, #26]
 80140b2:	6803      	ldr	r3, [r0, #0]
 80140b4:	a904      	add	r1, sp, #16
 80140b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140b8:	4798      	blx	r3
 80140ba:	1d29      	adds	r1, r5, #4
 80140bc:	a802      	add	r0, sp, #8
 80140be:	f7ff fe73 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80140c6:	88e0      	ldrh	r0, [r4, #6]
 80140c8:	eba3 0808 	sub.w	r8, r3, r8
 80140cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80140d0:	7921      	ldrb	r1, [r4, #4]
 80140d2:	1bdf      	subs	r7, r3, r7
 80140d4:	b2bb      	uxth	r3, r7
 80140d6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80140da:	fa1f f888 	uxth.w	r8, r8
 80140de:	8922      	ldrh	r2, [r4, #8]
 80140e0:	8967      	ldrh	r7, [r4, #10]
 80140e2:	89a4      	ldrh	r4, [r4, #12]
 80140e4:	4440      	add	r0, r8
 80140e6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80140e8:	4460      	add	r0, ip
 80140ea:	441a      	add	r2, r3
 80140ec:	44b8      	add	r8, r7
 80140ee:	4423      	add	r3, r4
 80140f0:	4c0c      	ldr	r4, [pc, #48]	; (8014124 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80140f2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80140f6:	4433      	add	r3, r6
 80140f8:	4432      	add	r2, r6
 80140fa:	44e0      	add	r8, ip
 80140fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80140fe:	f88d 1014 	strb.w	r1, [sp, #20]
 8014102:	9404      	str	r4, [sp, #16]
 8014104:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014108:	f8ad 801a 	strh.w	r8, [sp, #26]
 801410c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014110:	6803      	ldr	r3, [r0, #0]
 8014112:	a904      	add	r1, sp, #16
 8014114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014116:	4798      	blx	r3
 8014118:	b008      	add	sp, #32
 801411a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801411e:	bf00      	nop
 8014120:	08023958 	.word	0x08023958
 8014124:	0802396c 	.word	0x0802396c

08014128 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801412a:	4604      	mov	r4, r0
 801412c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014130:	3201      	adds	r2, #1
 8014132:	d112      	bne.n	801415a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014134:	2500      	movs	r5, #0
 8014136:	9500      	str	r5, [sp, #0]
 8014138:	466d      	mov	r5, sp
 801413a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801413e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014142:	6803      	ldr	r3, [r0, #0]
 8014144:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014148:	f8ad 2006 	strh.w	r2, [sp, #6]
 801414c:	4629      	mov	r1, r5
 801414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014150:	4798      	blx	r3
 8014152:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014156:	e884 0003 	stmia.w	r4, {r0, r1}
 801415a:	4620      	mov	r0, r4
 801415c:	b003      	add	sp, #12
 801415e:	bd30      	pop	{r4, r5, pc}

08014160 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014160:	b513      	push	{r0, r1, r4, lr}
 8014162:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014166:	4604      	mov	r4, r0
 8014168:	3301      	adds	r3, #1
 801416a:	d109      	bne.n	8014180 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801416c:	4601      	mov	r1, r0
 801416e:	4668      	mov	r0, sp
 8014170:	f7ff fe1a 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014174:	f8bd 3000 	ldrh.w	r3, [sp]
 8014178:	8423      	strh	r3, [r4, #32]
 801417a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801417e:	8463      	strh	r3, [r4, #34]	; 0x22
 8014180:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014184:	b002      	add	sp, #8
 8014186:	bd10      	pop	{r4, pc}

08014188 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014188:	b513      	push	{r0, r1, r4, lr}
 801418a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801418e:	4604      	mov	r4, r0
 8014190:	3301      	adds	r3, #1
 8014192:	d109      	bne.n	80141a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014194:	4601      	mov	r1, r0
 8014196:	4668      	mov	r0, sp
 8014198:	f7ff fe06 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801419c:	f8bd 3000 	ldrh.w	r3, [sp]
 80141a0:	8423      	strh	r3, [r4, #32]
 80141a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80141a6:	8463      	strh	r3, [r4, #34]	; 0x22
 80141a8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80141ac:	b002      	add	sp, #8
 80141ae:	bd10      	pop	{r4, pc}

080141b0 <_ZN8touchgfx6ScreenC1Ev>:
 80141b0:	b570      	push	{r4, r5, r6, lr}
 80141b2:	4605      	mov	r5, r0
 80141b4:	4b16      	ldr	r3, [pc, #88]	; (8014210 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80141b6:	2101      	movs	r1, #1
 80141b8:	f845 3b04 	str.w	r3, [r5], #4
 80141bc:	2300      	movs	r3, #0
 80141be:	4604      	mov	r4, r0
 80141c0:	8103      	strh	r3, [r0, #8]
 80141c2:	8143      	strh	r3, [r0, #10]
 80141c4:	8183      	strh	r3, [r0, #12]
 80141c6:	81c3      	strh	r3, [r0, #14]
 80141c8:	8203      	strh	r3, [r0, #16]
 80141ca:	8243      	strh	r3, [r0, #18]
 80141cc:	8283      	strh	r3, [r0, #20]
 80141ce:	82c3      	strh	r3, [r0, #22]
 80141d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80141d4:	6203      	str	r3, [r0, #32]
 80141d6:	8483      	strh	r3, [r0, #36]	; 0x24
 80141d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80141da:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80141de:	4a0d      	ldr	r2, [pc, #52]	; (8014214 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80141e0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80141e4:	6343      	str	r3, [r0, #52]	; 0x34
 80141e6:	4b0c      	ldr	r3, [pc, #48]	; (8014218 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80141e8:	6042      	str	r2, [r0, #4]
 80141ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80141ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80141f0:	4a0a      	ldr	r2, [pc, #40]	; (801421c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80141f2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80141f6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80141fa:	f9b2 1000 	ldrsh.w	r1, [r2]
 80141fe:	4628      	mov	r0, r5
 8014200:	4798      	blx	r3
 8014202:	6863      	ldr	r3, [r4, #4]
 8014204:	4628      	mov	r0, r5
 8014206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014208:	4631      	mov	r1, r6
 801420a:	4798      	blx	r3
 801420c:	4620      	mov	r0, r4
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	08023994 	.word	0x08023994
 8014214:	0802344c 	.word	0x0802344c
 8014218:	2001fd96 	.word	0x2001fd96
 801421c:	2001fd94 	.word	0x2001fd94

08014220 <_ZN8touchgfx6Screen4drawEv>:
 8014220:	b507      	push	{r0, r1, r2, lr}
 8014222:	2100      	movs	r1, #0
 8014224:	4b08      	ldr	r3, [pc, #32]	; (8014248 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014226:	9100      	str	r1, [sp, #0]
 8014228:	f9b3 2000 	ldrsh.w	r2, [r3]
 801422c:	4b07      	ldr	r3, [pc, #28]	; (801424c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801422e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014236:	4669      	mov	r1, sp
 8014238:	f8ad 3006 	strh.w	r3, [sp, #6]
 801423c:	6803      	ldr	r3, [r0, #0]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	4798      	blx	r3
 8014242:	b003      	add	sp, #12
 8014244:	f85d fb04 	ldr.w	pc, [sp], #4
 8014248:	2001fd94 	.word	0x2001fd94
 801424c:	2001fd96 	.word	0x2001fd96

08014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014254:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014258:	b089      	sub	sp, #36	; 0x24
 801425a:	2b00      	cmp	r3, #0
 801425c:	4680      	mov	r8, r0
 801425e:	460c      	mov	r4, r1
 8014260:	4615      	mov	r5, r2
 8014262:	dd0e      	ble.n	8014282 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014264:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014268:	2b00      	cmp	r3, #0
 801426a:	dd0a      	ble.n	8014282 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801426c:	4628      	mov	r0, r5
 801426e:	f7ff ff5b 	bl	8014128 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014272:	4621      	mov	r1, r4
 8014274:	f7fe fbda 	bl	8012a2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014278:	69eb      	ldr	r3, [r5, #28]
 801427a:	b928      	cbnz	r0, 8014288 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801427c:	461d      	mov	r5, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1f4      	bne.n	801426c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014282:	b009      	add	sp, #36	; 0x24
 8014284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014288:	ae04      	add	r6, sp, #16
 801428a:	2b00      	cmp	r3, #0
 801428c:	f000 80b5 	beq.w	80143fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	4629      	mov	r1, r5
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	a802      	add	r0, sp, #8
 8014298:	4798      	blx	r3
 801429a:	4628      	mov	r0, r5
 801429c:	f7ff ff60 	bl	8014160 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80142a0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80142a4:	4407      	add	r7, r0
 80142a6:	4628      	mov	r0, r5
 80142a8:	f7ff ff6e 	bl	8014188 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80142ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80142b0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80142b4:	4418      	add	r0, r3
 80142b6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80142ba:	4621      	mov	r1, r4
 80142bc:	f8ad 0012 	strh.w	r0, [sp, #18]
 80142c0:	b23f      	sxth	r7, r7
 80142c2:	4630      	mov	r0, r6
 80142c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80142c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80142cc:	f8ad 7010 	strh.w	r7, [sp, #16]
 80142d0:	f7fc fb02 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 80142d4:	4628      	mov	r0, r5
 80142d6:	f7ff ff27 	bl	8014128 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80142da:	4602      	mov	r2, r0
 80142dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80142e0:	ab06      	add	r3, sp, #24
 80142e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80142e6:	4611      	mov	r1, r2
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fc faf5 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 80142ee:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80142f2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80142f6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80142fa:	4299      	cmp	r1, r3
 80142fc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014300:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014304:	d10b      	bne.n	801431e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014306:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801430a:	4552      	cmp	r2, sl
 801430c:	d107      	bne.n	801431e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801430e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014312:	455a      	cmp	r2, fp
 8014314:	d103      	bne.n	801431e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014316:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801431a:	454a      	cmp	r2, r9
 801431c:	d06d      	beq.n	80143fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801431e:	f1bb 0f00 	cmp.w	fp, #0
 8014322:	dd65      	ble.n	80143f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014324:	f1b9 0f00 	cmp.w	r9, #0
 8014328:	dd62      	ble.n	80143f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801432a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801432e:	fa1f f08a 	uxth.w	r0, sl
 8014332:	4552      	cmp	r2, sl
 8014334:	9000      	str	r0, [sp, #0]
 8014336:	da12      	bge.n	801435e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	9b00      	ldr	r3, [sp, #0]
 801433c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014340:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014344:	1a9a      	subs	r2, r3, r2
 8014346:	f8ad 1010 	strh.w	r1, [sp, #16]
 801434a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801434e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014352:	69ea      	ldr	r2, [r5, #28]
 8014354:	4631      	mov	r1, r6
 8014356:	4640      	mov	r0, r8
 8014358:	f7ff ff7a 	bl	8014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801435c:	9b01      	ldr	r3, [sp, #4]
 801435e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014362:	b29f      	uxth	r7, r3
 8014364:	429a      	cmp	r2, r3
 8014366:	da0d      	bge.n	8014384 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014368:	f8ad 2010 	strh.w	r2, [sp, #16]
 801436c:	1aba      	subs	r2, r7, r2
 801436e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014372:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014376:	f8ad 9016 	strh.w	r9, [sp, #22]
 801437a:	69ea      	ldr	r2, [r5, #28]
 801437c:	4631      	mov	r1, r6
 801437e:	4640      	mov	r0, r8
 8014380:	f7ff ff66 	bl	8014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014384:	8822      	ldrh	r2, [r4, #0]
 8014386:	88a3      	ldrh	r3, [r4, #4]
 8014388:	445f      	add	r7, fp
 801438a:	4413      	add	r3, r2
 801438c:	b29b      	uxth	r3, r3
 801438e:	b2bf      	uxth	r7, r7
 8014390:	b23a      	sxth	r2, r7
 8014392:	b219      	sxth	r1, r3
 8014394:	4291      	cmp	r1, r2
 8014396:	dd0d      	ble.n	80143b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014398:	1bdb      	subs	r3, r3, r7
 801439a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801439e:	f8ad a012 	strh.w	sl, [sp, #18]
 80143a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80143a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80143aa:	69ea      	ldr	r2, [r5, #28]
 80143ac:	4631      	mov	r1, r6
 80143ae:	4640      	mov	r0, r8
 80143b0:	f7ff ff4e 	bl	8014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80143b4:	88e2      	ldrh	r2, [r4, #6]
 80143b6:	8863      	ldrh	r3, [r4, #2]
 80143b8:	4413      	add	r3, r2
 80143ba:	9a00      	ldr	r2, [sp, #0]
 80143bc:	b29b      	uxth	r3, r3
 80143be:	444a      	add	r2, r9
 80143c0:	fa1f f982 	uxth.w	r9, r2
 80143c4:	fa0f f289 	sxth.w	r2, r9
 80143c8:	b219      	sxth	r1, r3
 80143ca:	428a      	cmp	r2, r1
 80143cc:	da15      	bge.n	80143fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80143ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80143d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80143d6:	eba3 0309 	sub.w	r3, r3, r9
 80143da:	f8ad 1014 	strh.w	r1, [sp, #20]
 80143de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80143e2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80143e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80143ea:	69ea      	ldr	r2, [r5, #28]
 80143ec:	4631      	mov	r1, r6
 80143ee:	e001      	b.n	80143f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80143f0:	4621      	mov	r1, r4
 80143f2:	69ea      	ldr	r2, [r5, #28]
 80143f4:	4640      	mov	r0, r8
 80143f6:	f7ff ff2b 	bl	8014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80143fa:	4628      	mov	r0, r5
 80143fc:	f7ff fe94 	bl	8014128 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014400:	4633      	mov	r3, r6
 8014402:	4602      	mov	r2, r0
 8014404:	6861      	ldr	r1, [r4, #4]
 8014406:	6820      	ldr	r0, [r4, #0]
 8014408:	c303      	stmia	r3!, {r0, r1}
 801440a:	4611      	mov	r1, r2
 801440c:	4630      	mov	r0, r6
 801440e:	f7fc fa63 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8014412:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014416:	2b00      	cmp	r3, #0
 8014418:	f77f af33 	ble.w	8014282 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801441c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014420:	2b00      	cmp	r3, #0
 8014422:	f77f af2e 	ble.w	8014282 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014426:	4628      	mov	r0, r5
 8014428:	f7ff fe9a 	bl	8014160 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801442c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014430:	1a18      	subs	r0, r3, r0
 8014432:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014436:	4628      	mov	r0, r5
 8014438:	f7ff fea6 	bl	8014188 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801443c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014440:	4631      	mov	r1, r6
 8014442:	1a18      	subs	r0, r3, r0
 8014444:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014448:	682b      	ldr	r3, [r5, #0]
 801444a:	4628      	mov	r0, r5
 801444c:	689b      	ldr	r3, [r3, #8]
 801444e:	4798      	blx	r3
 8014450:	e717      	b.n	8014282 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014452 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014452:	b570      	push	{r4, r5, r6, lr}
 8014454:	2300      	movs	r3, #0
 8014456:	460c      	mov	r4, r1
 8014458:	b086      	sub	sp, #24
 801445a:	1d06      	adds	r6, r0, #4
 801445c:	4631      	mov	r1, r6
 801445e:	4605      	mov	r5, r0
 8014460:	a802      	add	r0, sp, #8
 8014462:	9301      	str	r3, [sp, #4]
 8014464:	f7ff fca0 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014468:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801446c:	8822      	ldrh	r2, [r4, #0]
 801446e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014472:	1ad2      	subs	r2, r2, r3
 8014474:	8863      	ldrh	r3, [r4, #2]
 8014476:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801447a:	1a5b      	subs	r3, r3, r1
 801447c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014480:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014484:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014488:	f8ad 1016 	strh.w	r1, [sp, #22]
 801448c:	aa01      	add	r2, sp, #4
 801448e:	a904      	add	r1, sp, #16
 8014490:	4630      	mov	r0, r6
 8014492:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014496:	f7fc faf7 	bl	8010a88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801449a:	9a01      	ldr	r2, [sp, #4]
 801449c:	b11a      	cbz	r2, 80144a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801449e:	4621      	mov	r1, r4
 80144a0:	4628      	mov	r0, r5
 80144a2:	f7ff fed5 	bl	8014250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80144a6:	b006      	add	sp, #24
 80144a8:	bd70      	pop	{r4, r5, r6, pc}

080144aa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80144aa:	b530      	push	{r4, r5, lr}
 80144ac:	4602      	mov	r2, r0
 80144ae:	b085      	sub	sp, #20
 80144b0:	460d      	mov	r5, r1
 80144b2:	466b      	mov	r3, sp
 80144b4:	4604      	mov	r4, r0
 80144b6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80144ba:	6851      	ldr	r1, [r2, #4]
 80144bc:	c303      	stmia	r3!, {r0, r1}
 80144be:	4629      	mov	r1, r5
 80144c0:	4668      	mov	r0, sp
 80144c2:	f7fc fa09 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 80144c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80144ca:	b12b      	cbz	r3, 80144d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80144cc:	4669      	mov	r1, sp
 80144ce:	4620      	mov	r0, r4
 80144d0:	f7ff ffbf 	bl	8014452 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80144d4:	b005      	add	sp, #20
 80144d6:	bd30      	pop	{r4, r5, pc}
 80144d8:	3404      	adds	r4, #4
 80144da:	4621      	mov	r1, r4
 80144dc:	a802      	add	r0, sp, #8
 80144de:	f7ff fc63 	bl	8013da8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80144e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80144e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80144ea:	4669      	mov	r1, sp
 80144ec:	1a9b      	subs	r3, r3, r2
 80144ee:	f8ad 3000 	strh.w	r3, [sp]
 80144f2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80144f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80144fa:	4620      	mov	r0, r4
 80144fc:	1a9b      	subs	r3, r3, r2
 80144fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014502:	f7fc fa88 	bl	8010a16 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014506:	e7e5      	b.n	80144d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014508 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014508:	460b      	mov	r3, r1
 801450a:	680a      	ldr	r2, [r1, #0]
 801450c:	1d01      	adds	r1, r0, #4
 801450e:	6992      	ldr	r2, [r2, #24]
 8014510:	4618      	mov	r0, r3
 8014512:	4710      	bx	r2

08014514 <_ZN8touchgfx12TextProviderC1Ev>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	2500      	movs	r5, #0
 8014518:	2302      	movs	r3, #2
 801451a:	4604      	mov	r4, r0
 801451c:	e9c0 5500 	strd	r5, r5, [r0]
 8014520:	7403      	strb	r3, [r0, #16]
 8014522:	6145      	str	r5, [r0, #20]
 8014524:	7605      	strb	r5, [r0, #24]
 8014526:	83c5      	strh	r5, [r0, #30]
 8014528:	8405      	strh	r5, [r0, #32]
 801452a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801452c:	8705      	strh	r5, [r0, #56]	; 0x38
 801452e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8014530:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8014534:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8014538:	220e      	movs	r2, #14
 801453a:	4629      	mov	r1, r5
 801453c:	304c      	adds	r0, #76	; 0x4c
 801453e:	f00c fef6 	bl	802132e <memset>
 8014542:	2301      	movs	r3, #1
 8014544:	4620      	mov	r0, r4
 8014546:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801454a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801454e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8014552:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8014556:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801455a:	f7fa f9d1 	bl	800e900 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801455e:	4620      	mov	r0, r4
 8014560:	bd38      	pop	{r3, r4, r5, pc}

08014562 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014562:	b530      	push	{r4, r5, lr}
 8014564:	2500      	movs	r5, #0
 8014566:	2401      	movs	r4, #1
 8014568:	6843      	ldr	r3, [r0, #4]
 801456a:	b913      	cbnz	r3, 8014572 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801456c:	6803      	ldr	r3, [r0, #0]
 801456e:	b313      	cbz	r3, 80145b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014570:	6043      	str	r3, [r0, #4]
 8014572:	7e03      	ldrb	r3, [r0, #24]
 8014574:	b143      	cbz	r3, 8014588 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014576:	6943      	ldr	r3, [r0, #20]
 8014578:	b12b      	cbz	r3, 8014586 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801457a:	881a      	ldrh	r2, [r3, #0]
 801457c:	b11a      	cbz	r2, 8014586 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801457e:	1c9a      	adds	r2, r3, #2
 8014580:	6142      	str	r2, [r0, #20]
 8014582:	8818      	ldrh	r0, [r3, #0]
 8014584:	bd30      	pop	{r4, r5, pc}
 8014586:	7605      	strb	r5, [r0, #24]
 8014588:	6843      	ldr	r3, [r0, #4]
 801458a:	8819      	ldrh	r1, [r3, #0]
 801458c:	b199      	cbz	r1, 80145b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801458e:	1c9a      	adds	r2, r3, #2
 8014590:	2902      	cmp	r1, #2
 8014592:	6042      	str	r2, [r0, #4]
 8014594:	d1f5      	bne.n	8014582 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014596:	7c03      	ldrb	r3, [r0, #16]
 8014598:	2b01      	cmp	r3, #1
 801459a:	d8e5      	bhi.n	8014568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	7402      	strb	r2, [r0, #16]
 80145a0:	3302      	adds	r3, #2
 80145a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80145a6:	6143      	str	r3, [r0, #20]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d0dd      	beq.n	8014568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80145ac:	881b      	ldrh	r3, [r3, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d0da      	beq.n	8014568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80145b2:	7604      	strb	r4, [r0, #24]
 80145b4:	e7d8      	b.n	8014568 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80145b6:	2000      	movs	r0, #0
 80145b8:	e7e4      	b.n	8014584 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080145ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80145ba:	6001      	str	r1, [r0, #0]
 80145bc:	2100      	movs	r1, #0
 80145be:	b430      	push	{r4, r5}
 80145c0:	6041      	str	r1, [r0, #4]
 80145c2:	6815      	ldr	r5, [r2, #0]
 80145c4:	6085      	str	r5, [r0, #8]
 80145c6:	6852      	ldr	r2, [r2, #4]
 80145c8:	6443      	str	r3, [r0, #68]	; 0x44
 80145ca:	9b02      	ldr	r3, [sp, #8]
 80145cc:	60c2      	str	r2, [r0, #12]
 80145ce:	7401      	strb	r1, [r0, #16]
 80145d0:	6141      	str	r1, [r0, #20]
 80145d2:	7601      	strb	r1, [r0, #24]
 80145d4:	8701      	strh	r1, [r0, #56]	; 0x38
 80145d6:	8401      	strh	r1, [r0, #32]
 80145d8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80145dc:	6483      	str	r3, [r0, #72]	; 0x48
 80145de:	bc30      	pop	{r4, r5}
 80145e0:	f7fa b98e 	b.w	800e900 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080145e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80145e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145e6:	4605      	mov	r5, r0
 80145e8:	4608      	mov	r0, r1
 80145ea:	b1e9      	cbz	r1, 8014628 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80145ec:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80145f0:	460b      	mov	r3, r1
 80145f2:	4622      	mov	r2, r4
 80145f4:	f101 0708 	add.w	r7, r1, #8
 80145f8:	4626      	mov	r6, r4
 80145fa:	6818      	ldr	r0, [r3, #0]
 80145fc:	6859      	ldr	r1, [r3, #4]
 80145fe:	3308      	adds	r3, #8
 8014600:	c603      	stmia	r6!, {r0, r1}
 8014602:	42bb      	cmp	r3, r7
 8014604:	4634      	mov	r4, r6
 8014606:	d1f7      	bne.n	80145f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8014608:	6818      	ldr	r0, [r3, #0]
 801460a:	6030      	str	r0, [r6, #0]
 801460c:	4610      	mov	r0, r2
 801460e:	889b      	ldrh	r3, [r3, #4]
 8014610:	80b3      	strh	r3, [r6, #4]
 8014612:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8014616:	015b      	lsls	r3, r3, #5
 8014618:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801461c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8014620:	430b      	orrs	r3, r1
 8014622:	425b      	negs	r3, r3
 8014624:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8014628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801462a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801462a:	b538      	push	{r3, r4, r5, lr}
 801462c:	460c      	mov	r4, r1
 801462e:	6811      	ldr	r1, [r2, #0]
 8014630:	4610      	mov	r0, r2
 8014632:	68cd      	ldr	r5, [r1, #12]
 8014634:	4619      	mov	r1, r3
 8014636:	47a8      	blx	r5
 8014638:	2800      	cmp	r0, #0
 801463a:	bf08      	it	eq
 801463c:	4620      	moveq	r0, r4
 801463e:	bd38      	pop	{r3, r4, r5, pc}

08014640 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014642:	4604      	mov	r4, r0
 8014644:	4615      	mov	r5, r2
 8014646:	4608      	mov	r0, r1
 8014648:	b93a      	cbnz	r2, 801465a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801464a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801464e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8014652:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8014656:	4628      	mov	r0, r5
 8014658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801465a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801465e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8014662:	8893      	ldrh	r3, [r2, #4]
 8014664:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014668:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801466c:	79ee      	ldrb	r6, [r5, #7]
 801466e:	4316      	orrs	r6, r2
 8014670:	19da      	adds	r2, r3, r7
 8014672:	b291      	uxth	r1, r2
 8014674:	291d      	cmp	r1, #29
 8014676:	b2b7      	uxth	r7, r6
 8014678:	d879      	bhi.n	801476e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801467a:	2201      	movs	r2, #1
 801467c:	408a      	lsls	r2, r1
 801467e:	4974      	ldr	r1, [pc, #464]	; (8014850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8014680:	10f6      	asrs	r6, r6, #3
 8014682:	420a      	tst	r2, r1
 8014684:	d12d      	bne.n	80146e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8014686:	f412 7f60 	tst.w	r2, #896	; 0x380
 801468a:	d070      	beq.n	801476e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801468c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8014690:	462b      	mov	r3, r5
 8014692:	f105 0e08 	add.w	lr, r5, #8
 8014696:	4615      	mov	r5, r2
 8014698:	4694      	mov	ip, r2
 801469a:	6818      	ldr	r0, [r3, #0]
 801469c:	6859      	ldr	r1, [r3, #4]
 801469e:	3308      	adds	r3, #8
 80146a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80146a4:	4573      	cmp	r3, lr
 80146a6:	4662      	mov	r2, ip
 80146a8:	d1f6      	bne.n	8014698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80146aa:	6818      	ldr	r0, [r3, #0]
 80146ac:	f8cc 0000 	str.w	r0, [ip]
 80146b0:	889b      	ldrh	r3, [r3, #4]
 80146b2:	f8ac 3004 	strh.w	r3, [ip, #4]
 80146b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80146ba:	b2b3      	uxth	r3, r6
 80146bc:	1aca      	subs	r2, r1, r3
 80146be:	b292      	uxth	r2, r2
 80146c0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80146c4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80146c8:	10d2      	asrs	r2, r2, #3
 80146ca:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80146ce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80146d2:	4302      	orrs	r2, r0
 80146d4:	1bcf      	subs	r7, r1, r7
 80146d6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80146da:	1afb      	subs	r3, r7, r3
 80146dc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80146e0:	e7b9      	b.n	8014656 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80146e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80146e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80146e8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80146ea:	f640 6333 	movw	r3, #3635	; 0xe33
 80146ee:	4299      	cmp	r1, r3
 80146f0:	d110      	bne.n	8014714 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80146f2:	6803      	ldr	r3, [r0, #0]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	4798      	blx	r3
 80146f8:	7b41      	ldrb	r1, [r0, #13]
 80146fa:	00cb      	lsls	r3, r1, #3
 80146fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014700:	7a03      	ldrb	r3, [r0, #8]
 8014702:	0648      	lsls	r0, r1, #25
 8014704:	ea43 0302 	orr.w	r3, r3, r2
 8014708:	bf44      	itt	mi
 801470a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801470e:	b21b      	sxthmi	r3, r3
 8014710:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014714:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8014718:	462a      	mov	r2, r5
 801471a:	443b      	add	r3, r7
 801471c:	4433      	add	r3, r6
 801471e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8014722:	f105 0c08 	add.w	ip, r5, #8
 8014726:	4635      	mov	r5, r6
 8014728:	b29b      	uxth	r3, r3
 801472a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801472e:	4637      	mov	r7, r6
 8014730:	6810      	ldr	r0, [r2, #0]
 8014732:	6851      	ldr	r1, [r2, #4]
 8014734:	3208      	adds	r2, #8
 8014736:	c703      	stmia	r7!, {r0, r1}
 8014738:	4562      	cmp	r2, ip
 801473a:	463e      	mov	r6, r7
 801473c:	d1f7      	bne.n	801472e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801473e:	6810      	ldr	r0, [r2, #0]
 8014740:	6038      	str	r0, [r7, #0]
 8014742:	8892      	ldrh	r2, [r2, #4]
 8014744:	80ba      	strh	r2, [r7, #4]
 8014746:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801474a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801474e:	10db      	asrs	r3, r3, #3
 8014750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014758:	4313      	orrs	r3, r2
 801475a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801475e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8014762:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8014766:	1a9b      	subs	r3, r3, r2
 8014768:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801476c:	e773      	b.n	8014656 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801476e:	f640 611b 	movw	r1, #3611	; 0xe1b
 8014772:	f023 0204 	bic.w	r2, r3, #4
 8014776:	428a      	cmp	r2, r1
 8014778:	d003      	beq.n	8014782 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801477a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801477e:	4293      	cmp	r3, r2
 8014780:	d120      	bne.n	80147c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 8014782:	3b01      	subs	r3, #1
 8014784:	4602      	mov	r2, r0
 8014786:	b29b      	uxth	r3, r3
 8014788:	4629      	mov	r1, r5
 801478a:	4620      	mov	r0, r4
 801478c:	f7ff ff4d 	bl	801462a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014790:	7b41      	ldrb	r1, [r0, #13]
 8014792:	00cb      	lsls	r3, r1, #3
 8014794:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014798:	7a03      	ldrb	r3, [r0, #8]
 801479a:	0649      	lsls	r1, r1, #25
 801479c:	ea43 0302 	orr.w	r3, r3, r2
 80147a0:	bf44      	itt	mi
 80147a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80147a6:	b21b      	sxthmi	r3, r3
 80147a8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80147ac:	7b6b      	ldrb	r3, [r5, #13]
 80147ae:	7aaa      	ldrb	r2, [r5, #10]
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147b6:	4313      	orrs	r3, r2
 80147b8:	115a      	asrs	r2, r3, #5
 80147ba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80147be:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80147c2:	e036      	b.n	8014832 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80147c4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80147c8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80147cc:	7a2a      	ldrb	r2, [r5, #8]
 80147ce:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80147d2:	ea42 0201 	orr.w	r2, r2, r1
 80147d6:	f640 6109 	movw	r1, #3593	; 0xe09
 80147da:	bf1c      	itt	ne
 80147dc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80147e0:	b212      	sxthne	r2, r2
 80147e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80147e6:	f023 0210 	bic.w	r2, r3, #16
 80147ea:	428a      	cmp	r2, r1
 80147ec:	d003      	beq.n	80147f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80147ee:	f640 6213 	movw	r2, #3603	; 0xe13
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d12a      	bne.n	801484c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80147f6:	7b6e      	ldrb	r6, [r5, #13]
 80147f8:	4629      	mov	r1, r5
 80147fa:	0076      	lsls	r6, r6, #1
 80147fc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014800:	7aae      	ldrb	r6, [r5, #10]
 8014802:	4316      	orrs	r6, r2
 8014804:	f640 6213 	movw	r2, #3603	; 0xe13
 8014808:	4293      	cmp	r3, r2
 801480a:	bf18      	it	ne
 801480c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014810:	4602      	mov	r2, r0
 8014812:	bf14      	ite	ne
 8014814:	b29b      	uxthne	r3, r3
 8014816:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801481a:	4620      	mov	r0, r4
 801481c:	f7ff ff05 	bl	801462a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014820:	7b43      	ldrb	r3, [r0, #13]
 8014822:	7a82      	ldrb	r2, [r0, #10]
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801482a:	4313      	orrs	r3, r2
 801482c:	1af6      	subs	r6, r6, r3
 801482e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8014832:	7b69      	ldrb	r1, [r5, #13]
 8014834:	00cb      	lsls	r3, r1, #3
 8014836:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801483a:	7a2b      	ldrb	r3, [r5, #8]
 801483c:	4313      	orrs	r3, r2
 801483e:	064a      	lsls	r2, r1, #25
 8014840:	bf44      	itt	mi
 8014842:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014846:	b21b      	sxthmi	r3, r3
 8014848:	1bdb      	subs	r3, r3, r7
 801484a:	e747      	b.n	80146dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801484c:	2300      	movs	r3, #0
 801484e:	e7b6      	b.n	80147be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8014850:	3fc00079 	.word	0x3fc00079

08014854 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014858:	4604      	mov	r4, r0
 801485a:	b942      	cbnz	r2, 801486e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801485c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014860:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8014864:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014868:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801486c:	e047      	b.n	80148fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801486e:	7b51      	ldrb	r1, [r2, #13]
 8014870:	8893      	ldrh	r3, [r2, #4]
 8014872:	010d      	lsls	r5, r1, #4
 8014874:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8014878:	79d5      	ldrb	r5, [r2, #7]
 801487a:	4305      	orrs	r5, r0
 801487c:	2d04      	cmp	r5, #4
 801487e:	bfcc      	ite	gt
 8014880:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014884:	f04f 0e01 	movle.w	lr, #1
 8014888:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801488c:	f200 80ab 	bhi.w	80149e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014890:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014894:	4283      	cmp	r3, r0
 8014896:	d216      	bcs.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014898:	f240 605b 	movw	r0, #1627	; 0x65b
 801489c:	4283      	cmp	r3, r0
 801489e:	d859      	bhi.n	8014954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80148a0:	f240 6057 	movw	r0, #1623	; 0x657
 80148a4:	4283      	cmp	r3, r0
 80148a6:	d20e      	bcs.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148a8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80148ac:	d24a      	bcs.n	8014944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80148ae:	f240 604e 	movw	r0, #1614	; 0x64e
 80148b2:	4283      	cmp	r3, r0
 80148b4:	d207      	bcs.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148b6:	f240 601a 	movw	r0, #1562	; 0x61a
 80148ba:	4283      	cmp	r3, r0
 80148bc:	d02a      	beq.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80148be:	d821      	bhi.n	8014904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80148c0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80148c4:	d35b      	bcc.n	801497e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80148c6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80148ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80148ce:	f040 80d0 	bne.w	8014a72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80148d2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80148d6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80148da:	f040 80ca 	bne.w	8014a72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80148de:	00cb      	lsls	r3, r1, #3
 80148e0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80148e4:	7a13      	ldrb	r3, [r2, #8]
 80148e6:	0649      	lsls	r1, r1, #25
 80148e8:	ea43 0300 	orr.w	r3, r3, r0
 80148ec:	bf44      	itt	mi
 80148ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80148f2:	b21b      	sxthmi	r3, r3
 80148f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80148f8:	1b5d      	subs	r5, r3, r5
 80148fa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80148fe:	4610      	mov	r0, r2
 8014900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014904:	f240 604b 	movw	r0, #1611	; 0x64b
 8014908:	4283      	cmp	r3, r0
 801490a:	d338      	bcc.n	801497e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801490c:	f240 604c 	movw	r0, #1612	; 0x64c
 8014910:	4283      	cmp	r3, r0
 8014912:	d9d8      	bls.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014914:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8014918:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801491c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014920:	f040 80f2 	bne.w	8014b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8014924:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014928:	f040 80ee 	bne.w	8014b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801492c:	00cb      	lsls	r3, r1, #3
 801492e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014932:	7a13      	ldrb	r3, [r2, #8]
 8014934:	064e      	lsls	r6, r1, #25
 8014936:	ea43 0300 	orr.w	r3, r3, r0
 801493a:	bf44      	itt	mi
 801493c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014940:	b21b      	sxthmi	r3, r3
 8014942:	e7d9      	b.n	80148f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014944:	f240 6054 	movw	r0, #1620	; 0x654
 8014948:	4283      	cmp	r3, r0
 801494a:	d8e3      	bhi.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801494c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014950:	d9e0      	bls.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014952:	e7b8      	b.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014954:	f240 6074 	movw	r0, #1652	; 0x674
 8014958:	4283      	cmp	r3, r0
 801495a:	d0b4      	beq.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801495c:	d82d      	bhi.n	80149ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801495e:	f240 605e 	movw	r0, #1630	; 0x65e
 8014962:	4283      	cmp	r3, r0
 8014964:	d804      	bhi.n	8014970 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8014966:	f240 605d 	movw	r0, #1629	; 0x65d
 801496a:	4283      	cmp	r3, r0
 801496c:	d3d2      	bcc.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801496e:	e7aa      	b.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014970:	f240 605f 	movw	r0, #1631	; 0x65f
 8014974:	4283      	cmp	r3, r0
 8014976:	d0cd      	beq.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014978:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801497c:	d0a3      	beq.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801497e:	00cb      	lsls	r3, r1, #3
 8014980:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014984:	7a13      	ldrb	r3, [r2, #8]
 8014986:	0649      	lsls	r1, r1, #25
 8014988:	ea43 0300 	orr.w	r3, r3, r0
 801498c:	bf44      	itt	mi
 801498e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014992:	b21b      	sxthmi	r3, r3
 8014994:	1b5d      	subs	r5, r3, r5
 8014996:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801499a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801499e:	7b53      	ldrb	r3, [r2, #13]
 80149a0:	015b      	lsls	r3, r3, #5
 80149a2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80149a6:	7993      	ldrb	r3, [r2, #6]
 80149a8:	430b      	orrs	r3, r1
 80149aa:	2105      	movs	r1, #5
 80149ac:	005b      	lsls	r3, r3, #1
 80149ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80149b2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80149b6:	440b      	add	r3, r1
 80149b8:	e756      	b.n	8014868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80149ba:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80149be:	4283      	cmp	r3, r0
 80149c0:	d809      	bhi.n	80149d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80149c2:	f240 60df 	movw	r0, #1759	; 0x6df
 80149c6:	4283      	cmp	r3, r0
 80149c8:	f4bf af7d 	bcs.w	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149cc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80149d0:	2b05      	cmp	r3, #5
 80149d2:	d8d4      	bhi.n	801497e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80149d4:	e777      	b.n	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149d6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80149da:	4283      	cmp	r3, r0
 80149dc:	d09a      	beq.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80149de:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80149e2:	4283      	cmp	r3, r0
 80149e4:	e7ca      	b.n	801497c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80149e6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80149ea:	d22b      	bcs.n	8014a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80149ec:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80149f0:	4283      	cmp	r3, r0
 80149f2:	d28f      	bcs.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80149f4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80149f8:	4283      	cmp	r3, r0
 80149fa:	d816      	bhi.n	8014a2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80149fc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8014a00:	4283      	cmp	r3, r0
 8014a02:	f4bf af60 	bcs.w	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a06:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014a0a:	4283      	cmp	r3, r0
 8014a0c:	d80a      	bhi.n	8014a24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014a0e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8014a12:	4283      	cmp	r3, r0
 8014a14:	f4bf af57 	bcs.w	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a18:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014a1c:	4283      	cmp	r3, r0
 8014a1e:	f43f af79 	beq.w	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a22:	e7ac      	b.n	801497e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014a24:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014a28:	e7f8      	b.n	8014a1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014a2a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8014a2e:	4283      	cmp	r3, r0
 8014a30:	d802      	bhi.n	8014a38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014a32:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014a36:	e798      	b.n	801496a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014a38:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	f47f af42 	bne.w	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a42:	e767      	b.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a44:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014a48:	4283      	cmp	r3, r0
 8014a4a:	f43f af63 	beq.w	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a4e:	d802      	bhi.n	8014a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014a50:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014a54:	e7f2      	b.n	8014a3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014a56:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014a5a:	4283      	cmp	r3, r0
 8014a5c:	d805      	bhi.n	8014a6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014a5e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014a62:	4283      	cmp	r3, r0
 8014a64:	f4ff af2f 	bcc.w	80148c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a68:	e754      	b.n	8014914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a6a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8014a6e:	4283      	cmp	r3, r0
 8014a70:	e7af      	b.n	80149d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014a72:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014a76:	4617      	mov	r7, r2
 8014a78:	4666      	mov	r6, ip
 8014a7a:	f102 0808 	add.w	r8, r2, #8
 8014a7e:	46e6      	mov	lr, ip
 8014a80:	6838      	ldr	r0, [r7, #0]
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	3708      	adds	r7, #8
 8014a86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014a8a:	4547      	cmp	r7, r8
 8014a8c:	46f4      	mov	ip, lr
 8014a8e:	d1f6      	bne.n	8014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014a90:	6838      	ldr	r0, [r7, #0]
 8014a92:	f8ce 0000 	str.w	r0, [lr]
 8014a96:	88b9      	ldrh	r1, [r7, #4]
 8014a98:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014a9c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014aa0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014aa4:	d009      	beq.n	8014aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8014aa6:	7b51      	ldrb	r1, [r2, #13]
 8014aa8:	7992      	ldrb	r2, [r2, #6]
 8014aaa:	0149      	lsls	r1, r1, #5
 8014aac:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014ab0:	4311      	orrs	r1, r2
 8014ab2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014ab6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014aba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014abe:	b2ad      	uxth	r5, r5
 8014ac0:	d00d      	beq.n	8014ade <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8014ac2:	442b      	add	r3, r5
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014aca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014ace:	10db      	asrs	r3, r3, #3
 8014ad0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ad8:	4313      	orrs	r3, r2
 8014ada:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014ade:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014ae2:	00cb      	lsls	r3, r1, #3
 8014ae4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014ae8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8014aec:	064f      	lsls	r7, r1, #25
 8014aee:	ea43 0302 	orr.w	r3, r3, r2
 8014af2:	bf44      	itt	mi
 8014af4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014af8:	b21b      	sxthmi	r3, r3
 8014afa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014afe:	1b5b      	subs	r3, r3, r5
 8014b00:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8014b04:	4632      	mov	r2, r6
 8014b06:	e6fa      	b.n	80148fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014b08:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014b0c:	4617      	mov	r7, r2
 8014b0e:	4666      	mov	r6, ip
 8014b10:	f102 0908 	add.w	r9, r2, #8
 8014b14:	46e0      	mov	r8, ip
 8014b16:	6838      	ldr	r0, [r7, #0]
 8014b18:	6879      	ldr	r1, [r7, #4]
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014b20:	454f      	cmp	r7, r9
 8014b22:	46c4      	mov	ip, r8
 8014b24:	d1f6      	bne.n	8014b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8014b26:	6838      	ldr	r0, [r7, #0]
 8014b28:	f8c8 0000 	str.w	r0, [r8]
 8014b2c:	88b9      	ldrh	r1, [r7, #4]
 8014b2e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014b32:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014b36:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014b3a:	d009      	beq.n	8014b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8014b3c:	7b51      	ldrb	r1, [r2, #13]
 8014b3e:	7992      	ldrb	r2, [r2, #6]
 8014b40:	0149      	lsls	r1, r1, #5
 8014b42:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014b46:	4311      	orrs	r1, r2
 8014b48:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014b4c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014b50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014b54:	d00e      	beq.n	8014b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8014b56:	eba3 030e 	sub.w	r3, r3, lr
 8014b5a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014b64:	10db      	asrs	r3, r3, #3
 8014b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014b74:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014b78:	00cb      	lsls	r3, r1, #3
 8014b7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014b7e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8014b82:	0648      	lsls	r0, r1, #25
 8014b84:	ea43 0302 	orr.w	r3, r3, r2
 8014b88:	bf44      	itt	mi
 8014b8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014b8e:	b21b      	sxthmi	r3, r3
 8014b90:	1b5d      	subs	r5, r3, r5
 8014b92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014b96:	e7b5      	b.n	8014b04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08014b98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	461e      	mov	r6, r3
 8014b9e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014ba6:	4617      	mov	r7, r2
 8014ba8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014bac:	f7f9 fe02 	bl	800e7b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	b918      	cbnz	r0, 8014bbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014bb4:	6030      	str	r0, [r6, #0]
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	4638      	mov	r0, r7
 8014bc4:	4798      	blx	r3
 8014bc6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014bce:	4602      	mov	r2, r0
 8014bd0:	6030      	str	r0, [r6, #0]
 8014bd2:	d213      	bcs.n	8014bfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014bd4:	4643      	mov	r3, r8
 8014bd6:	4639      	mov	r1, r7
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f7ff fe3b 	bl	8014854 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014bde:	6030      	str	r0, [r6, #0]
 8014be0:	6833      	ldr	r3, [r6, #0]
 8014be2:	b143      	cbz	r3, 8014bf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014be4:	7b5a      	ldrb	r2, [r3, #13]
 8014be6:	7a9b      	ldrb	r3, [r3, #10]
 8014be8:	0052      	lsls	r2, r2, #1
 8014bea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	bf0c      	ite	eq
 8014bf2:	2301      	moveq	r3, #1
 8014bf4:	2300      	movne	r3, #0
 8014bf6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8014bfa:	e7dc      	b.n	8014bb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014bfc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	2b7f      	cmp	r3, #127	; 0x7f
 8014c04:	d804      	bhi.n	8014c10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014c06:	4639      	mov	r1, r7
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f7ff fd19 	bl	8014640 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014c0e:	e7e6      	b.n	8014bde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014c10:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d0e3      	beq.n	8014be0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c18:	f640 1302 	movw	r3, #2306	; 0x902
 8014c1c:	429d      	cmp	r5, r3
 8014c1e:	d1df      	bne.n	8014be0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c20:	4601      	mov	r1, r0
 8014c22:	4620      	mov	r0, r4
 8014c24:	f7ff fcde 	bl	80145e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014c28:	e7d9      	b.n	8014bde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014c2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014c2a:	b510      	push	{r4, lr}
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8014c32:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014c34:	b1f1      	cbz	r1, 8014c74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8014c36:	2b0a      	cmp	r3, #10
 8014c38:	d02f      	beq.n	8014c9a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8014c3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8014c3c:	3901      	subs	r1, #1
 8014c3e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014c42:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8014c44:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8014c48:	1c51      	adds	r1, r2, #1
 8014c4a:	b289      	uxth	r1, r1
 8014c4c:	2901      	cmp	r1, #1
 8014c4e:	bf84      	itt	hi
 8014c50:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014c54:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8014c56:	f103 0201 	add.w	r2, r3, #1
 8014c5a:	8722      	strh	r2, [r4, #56]	; 0x38
 8014c5c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014c5e:	bf98      	it	ls
 8014c60:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8014c62:	4413      	add	r3, r2
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	2b09      	cmp	r3, #9
 8014c68:	bf88      	it	hi
 8014c6a:	3b0a      	subhi	r3, #10
 8014c6c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014c70:	8458      	strh	r0, [r3, #34]	; 0x22
 8014c72:	e7dc      	b.n	8014c2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014c74:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014c76:	2b0a      	cmp	r3, #10
 8014c78:	d00f      	beq.n	8014c9a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f7ff fc71 	bl	8014562 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014c80:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014c82:	1c5a      	adds	r2, r3, #1
 8014c84:	8722      	strh	r2, [r4, #56]	; 0x38
 8014c86:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014c88:	4413      	add	r3, r2
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	2b09      	cmp	r3, #9
 8014c8e:	bf88      	it	hi
 8014c90:	3b0a      	subhi	r3, #10
 8014c92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014c96:	8458      	strh	r0, [r3, #34]	; 0x22
 8014c98:	e7ec      	b.n	8014c74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8014c9a:	bd10      	pop	{r4, pc}

08014c9c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014ca2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014ca6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8014ca8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8014caa:	3a01      	subs	r2, #1
 8014cac:	8702      	strh	r2, [r0, #56]	; 0x38
 8014cae:	1c5a      	adds	r2, r3, #1
 8014cb0:	b292      	uxth	r2, r2
 8014cb2:	2a09      	cmp	r2, #9
 8014cb4:	bf86      	itte	hi
 8014cb6:	3b09      	subhi	r3, #9
 8014cb8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8014cba:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8014cbc:	f7ff ffb5 	bl	8014c2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014cc0:	8c23      	ldrh	r3, [r4, #32]
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	bf9c      	itt	ls
 8014cc6:	3301      	addls	r3, #1
 8014cc8:	8423      	strhls	r3, [r4, #32]
 8014cca:	8be3      	ldrh	r3, [r4, #30]
 8014ccc:	b90b      	cbnz	r3, 8014cd2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014cce:	2302      	movs	r3, #2
 8014cd0:	83e3      	strh	r3, [r4, #30]
 8014cd2:	8be3      	ldrh	r3, [r4, #30]
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	3b01      	subs	r3, #1
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	83e3      	strh	r3, [r4, #30]
 8014cdc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014ce0:	8365      	strh	r5, [r4, #26]
 8014ce2:	bd38      	pop	{r3, r4, r5, pc}

08014ce4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014ce4:	428a      	cmp	r2, r1
 8014ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cea:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8014cec:	d931      	bls.n	8014d52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8014cee:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8014cf0:	1a54      	subs	r4, r2, r1
 8014cf2:	19ee      	adds	r6, r5, r7
 8014cf4:	3e01      	subs	r6, #1
 8014cf6:	fa1f fe84 	uxth.w	lr, r4
 8014cfa:	b2b4      	uxth	r4, r6
 8014cfc:	eba4 090e 	sub.w	r9, r4, lr
 8014d00:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8014d04:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8014d08:	fa1f f989 	uxth.w	r9, r9
 8014d0c:	2c09      	cmp	r4, #9
 8014d0e:	4626      	mov	r6, r4
 8014d10:	bf88      	it	hi
 8014d12:	f1a4 060a 	subhi.w	r6, r4, #10
 8014d16:	f1bc 0f00 	cmp.w	ip, #0
 8014d1a:	bf08      	it	eq
 8014d1c:	f04f 0c02 	moveq.w	ip, #2
 8014d20:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014d24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014d28:	3c01      	subs	r4, #1
 8014d2a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8014d2e:	fa1f fc8c 	uxth.w	ip, ip
 8014d32:	b2a4      	uxth	r4, r4
 8014d34:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014d38:	454c      	cmp	r4, r9
 8014d3a:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8014d3e:	d1e5      	bne.n	8014d0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014d40:	eba5 050e 	sub.w	r5, r5, lr
 8014d44:	eb0e 0408 	add.w	r4, lr, r8
 8014d48:	8705      	strh	r5, [r0, #56]	; 0x38
 8014d4a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8014d4e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8014d52:	250a      	movs	r5, #10
 8014d54:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8014d56:	1a64      	subs	r4, r4, r1
 8014d58:	4439      	add	r1, r7
 8014d5a:	b289      	uxth	r1, r1
 8014d5c:	2909      	cmp	r1, #9
 8014d5e:	bf88      	it	hi
 8014d60:	390a      	subhi	r1, #10
 8014d62:	8704      	strh	r4, [r0, #56]	; 0x38
 8014d64:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014d66:	b18a      	cbz	r2, 8014d8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8014d68:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8014d6a:	3a01      	subs	r2, #1
 8014d6c:	3101      	adds	r1, #1
 8014d6e:	b292      	uxth	r2, r2
 8014d70:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014d74:	8701      	strh	r1, [r0, #56]	; 0x38
 8014d76:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014d78:	b901      	cbnz	r1, 8014d7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8014d7a:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014d7c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014d7e:	3901      	subs	r1, #1
 8014d80:	b289      	uxth	r1, r1
 8014d82:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014d84:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014d88:	844c      	strh	r4, [r1, #34]	; 0x22
 8014d8a:	e7ec      	b.n	8014d66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8014d8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d90:	f7ff bf4b 	b.w	8014c2a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014d94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014d94:	b570      	push	{r4, r5, r6, lr}
 8014d96:	2500      	movs	r5, #0
 8014d98:	4295      	cmp	r5, r2
 8014d9a:	d011      	beq.n	8014dc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014d9c:	8bc4      	ldrh	r4, [r0, #30]
 8014d9e:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014da2:	4414      	add	r4, r2
 8014da4:	3c01      	subs	r4, #1
 8014da6:	1b64      	subs	r4, r4, r5
 8014da8:	b2a4      	uxth	r4, r4
 8014daa:	2c01      	cmp	r4, #1
 8014dac:	bf88      	it	hi
 8014dae:	3c02      	subhi	r4, #2
 8014db0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014db4:	8b64      	ldrh	r4, [r4, #26]
 8014db6:	42b4      	cmp	r4, r6
 8014db8:	d117      	bne.n	8014dea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014dba:	3501      	adds	r5, #1
 8014dbc:	b2ad      	uxth	r5, r5
 8014dbe:	e7eb      	b.n	8014d98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014dc0:	2400      	movs	r4, #0
 8014dc2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	b2a2      	uxth	r2, r4
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	da0f      	bge.n	8014dee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014dce:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8014dd0:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014dd4:	4432      	add	r2, r6
 8014dd6:	b292      	uxth	r2, r2
 8014dd8:	2a09      	cmp	r2, #9
 8014dda:	bf88      	it	hi
 8014ddc:	3a0a      	subhi	r2, #10
 8014dde:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014de2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014de4:	3401      	adds	r4, #1
 8014de6:	42aa      	cmp	r2, r5
 8014de8:	d0ee      	beq.n	8014dc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014dea:	2000      	movs	r0, #0
 8014dec:	bd70      	pop	{r4, r5, r6, pc}
 8014dee:	2001      	movs	r0, #1
 8014df0:	e7fc      	b.n	8014dec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014df2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df6:	4605      	mov	r5, r0
 8014df8:	4616      	mov	r6, r2
 8014dfa:	1c8c      	adds	r4, r1, #2
 8014dfc:	8809      	ldrh	r1, [r1, #0]
 8014dfe:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014e02:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014e06:	42b3      	cmp	r3, r6
 8014e08:	d124      	bne.n	8014e54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014e0a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014e0e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014e12:	f001 070f 	and.w	r7, r1, #15
 8014e16:	f8cd 8000 	str.w	r8, [sp]
 8014e1a:	464b      	mov	r3, r9
 8014e1c:	4652      	mov	r2, sl
 8014e1e:	4621      	mov	r1, r4
 8014e20:	4628      	mov	r0, r5
 8014e22:	f7ff ffb7 	bl	8014d94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014e26:	4683      	mov	fp, r0
 8014e28:	b168      	cbz	r0, 8014e46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014e2a:	eb0a 0109 	add.w	r1, sl, r9
 8014e2e:	4441      	add	r1, r8
 8014e30:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014e34:	463a      	mov	r2, r7
 8014e36:	4649      	mov	r1, r9
 8014e38:	4628      	mov	r0, r5
 8014e3a:	f7ff ff53 	bl	8014ce4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014e3e:	4658      	mov	r0, fp
 8014e40:	b003      	add	sp, #12
 8014e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e46:	eb07 010a 	add.w	r1, r7, sl
 8014e4a:	4449      	add	r1, r9
 8014e4c:	4441      	add	r1, r8
 8014e4e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014e52:	e7d2      	b.n	8014dfa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014e54:	f04f 0b00 	mov.w	fp, #0
 8014e58:	e7f1      	b.n	8014e3e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014e5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014e5a:	b570      	push	{r4, r5, r6, lr}
 8014e5c:	8810      	ldrh	r0, [r2, #0]
 8014e5e:	4298      	cmp	r0, r3
 8014e60:	d817      	bhi.n	8014e92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e62:	1e48      	subs	r0, r1, #1
 8014e64:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014e68:	4298      	cmp	r0, r3
 8014e6a:	d312      	bcc.n	8014e92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e6c:	2400      	movs	r4, #0
 8014e6e:	428c      	cmp	r4, r1
 8014e70:	d20f      	bcs.n	8014e92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e72:	1860      	adds	r0, r4, r1
 8014e74:	1040      	asrs	r0, r0, #1
 8014e76:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014e7a:	0085      	lsls	r5, r0, #2
 8014e7c:	42b3      	cmp	r3, r6
 8014e7e:	d902      	bls.n	8014e86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014e80:	3001      	adds	r0, #1
 8014e82:	b284      	uxth	r4, r0
 8014e84:	e7f3      	b.n	8014e6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014e86:	d201      	bcs.n	8014e8c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014e88:	b281      	uxth	r1, r0
 8014e8a:	e7f0      	b.n	8014e6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014e8c:	442a      	add	r2, r5
 8014e8e:	8850      	ldrh	r0, [r2, #2]
 8014e90:	bd70      	pop	{r4, r5, r6, pc}
 8014e92:	2000      	movs	r0, #0
 8014e94:	e7fc      	b.n	8014e90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014e96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	260b      	movs	r6, #11
 8014e9e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8014ea0:	886f      	ldrh	r7, [r5, #2]
 8014ea2:	087f      	lsrs	r7, r7, #1
 8014ea4:	3e01      	subs	r6, #1
 8014ea6:	d013      	beq.n	8014ed0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014ea8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014eaa:	462a      	mov	r2, r5
 8014eac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014eb0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014eb4:	4639      	mov	r1, r7
 8014eb6:	4643      	mov	r3, r8
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f7ff ffce 	bl	8014e5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014ebe:	b138      	cbz	r0, 8014ed0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014ec0:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014ec4:	4642      	mov	r2, r8
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f7ff ff93 	bl	8014df2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d1e9      	bne.n	8014ea4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ed4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	694a      	ldr	r2, [r1, #20]
 8014ed8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014eda:	684b      	ldr	r3, [r1, #4]
 8014edc:	1b54      	subs	r4, r2, r5
 8014ede:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8014ee0:	f000 8107 	beq.w	80150f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8014ee4:	1b9b      	subs	r3, r3, r6
 8014ee6:	d003      	beq.n	8014ef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014ee8:	2210      	movs	r2, #16
 8014eea:	4363      	muls	r3, r4
 8014eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ef0:	680c      	ldr	r4, [r1, #0]
 8014ef2:	698a      	ldr	r2, [r1, #24]
 8014ef4:	1b65      	subs	r5, r4, r5
 8014ef6:	f000 80fe 	beq.w	80150f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8014efa:	1b92      	subs	r2, r2, r6
 8014efc:	d003      	beq.n	8014f06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014efe:	2410      	movs	r4, #16
 8014f00:	436a      	muls	r2, r5
 8014f02:	fb92 f2f4 	sdiv	r2, r2, r4
 8014f06:	1a9b      	subs	r3, r3, r2
 8014f08:	ee07 3a90 	vmov	s15, r3
 8014f0c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015134 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8014f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014f1c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014f20:	460a      	mov	r2, r1
 8014f22:	eeb1 6a43 	vneg.f32	s12, s6
 8014f26:	4603      	mov	r3, r0
 8014f28:	f100 040c 	add.w	r4, r0, #12
 8014f2c:	edd2 7a02 	vldr	s15, [r2, #8]
 8014f30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f34:	ece3 6a01 	vstmia	r3!, {s13}
 8014f38:	edd2 7a03 	vldr	s15, [r2, #12]
 8014f3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f40:	edc3 7a02 	vstr	s15, [r3, #8]
 8014f44:	edd2 7a04 	vldr	s15, [r2, #16]
 8014f48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	edc3 7a05 	vstr	s15, [r3, #20]
 8014f52:	f102 0214 	add.w	r2, r2, #20
 8014f56:	d1e9      	bne.n	8014f2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014f58:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014f5a:	698b      	ldr	r3, [r1, #24]
 8014f5c:	edd0 4a02 	vldr	s9, [r0, #8]
 8014f60:	1a9b      	subs	r3, r3, r2
 8014f62:	ee07 3a90 	vmov	s15, r3
 8014f66:	684b      	ldr	r3, [r1, #4]
 8014f68:	edd0 3a00 	vldr	s7, [r0]
 8014f6c:	1a9b      	subs	r3, r3, r2
 8014f6e:	edd0 6a01 	vldr	s13, [r0, #4]
 8014f72:	ee07 3a10 	vmov	s14, r3
 8014f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014f7e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014f82:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014f86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f8a:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014f8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014f92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014f96:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014f9a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014f9e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014fa0:	694a      	ldr	r2, [r1, #20]
 8014fa2:	ed90 5a05 	vldr	s10, [r0, #20]
 8014fa6:	1b13      	subs	r3, r2, r4
 8014fa8:	ee07 3a10 	vmov	s14, r3
 8014fac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014fb4:	680b      	ldr	r3, [r1, #0]
 8014fb6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014fba:	1b1b      	subs	r3, r3, r4
 8014fbc:	ee07 3a10 	vmov	s14, r3
 8014fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fc4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014fc8:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014fcc:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014fd0:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8014fd4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014fd6:	698b      	ldr	r3, [r1, #24]
 8014fd8:	ed90 2a03 	vldr	s4, [r0, #12]
 8014fdc:	1a9b      	subs	r3, r3, r2
 8014fde:	ee06 3a90 	vmov	s13, r3
 8014fe2:	684b      	ldr	r3, [r1, #4]
 8014fe4:	edd0 5a04 	vldr	s11, [r0, #16]
 8014fe8:	1a9b      	subs	r3, r3, r2
 8014fea:	ee07 3a10 	vmov	s14, r3
 8014fee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014ff2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014ff6:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014ffa:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014ffe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015002:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015006:	ee27 7a04 	vmul.f32	s14, s14, s8
 801500a:	eee5 6a87 	vfma.f32	s13, s11, s14
 801500e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015012:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015016:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015018:	694a      	ldr	r2, [r1, #20]
 801501a:	ed90 1a07 	vldr	s2, [r0, #28]
 801501e:	1b13      	subs	r3, r2, r4
 8015020:	ee07 3a10 	vmov	s14, r3
 8015024:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015028:	ee27 7a04 	vmul.f32	s14, s14, s8
 801502c:	680b      	ldr	r3, [r1, #0]
 801502e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015032:	1b1b      	subs	r3, r3, r4
 8015034:	ee07 3a10 	vmov	s14, r3
 8015038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801503c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015040:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015044:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015048:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801504c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801504e:	698b      	ldr	r3, [r1, #24]
 8015050:	edd0 5a08 	vldr	s11, [r0, #32]
 8015054:	1a9b      	subs	r3, r3, r2
 8015056:	ee07 3a10 	vmov	s14, r3
 801505a:	684b      	ldr	r3, [r1, #4]
 801505c:	edd0 2a06 	vldr	s5, [r0, #24]
 8015060:	1a9b      	subs	r3, r3, r2
 8015062:	ee01 3a90 	vmov	s3, r3
 8015066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801506a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801506e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015072:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015076:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801507a:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801507e:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015082:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015086:	ee27 7a03 	vmul.f32	s14, s14, s6
 801508a:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801508e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015090:	694a      	ldr	r2, [r1, #20]
 8015092:	1b13      	subs	r3, r2, r4
 8015094:	ee03 3a10 	vmov	s6, r3
 8015098:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801509c:	ee23 3a04 	vmul.f32	s6, s6, s8
 80150a0:	680b      	ldr	r3, [r1, #0]
 80150a2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80150a6:	1b1b      	subs	r3, r3, r4
 80150a8:	ee03 3a10 	vmov	s6, r3
 80150ac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80150b0:	ee23 4a04 	vmul.f32	s8, s6, s8
 80150b4:	eee1 5a04 	vfma.f32	s11, s2, s8
 80150b8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80150bc:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80150c0:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80150c4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80150c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150cc:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80150d0:	dd13      	ble.n	80150fa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80150d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80150d6:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80150da:	eee3 7a87 	vfma.f32	s15, s7, s14
 80150de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80150e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80150e8:	dd15      	ble.n	8015116 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80150ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80150ee:	6403      	str	r3, [r0, #64]	; 0x40
 80150f0:	bd70      	pop	{r4, r5, r6, pc}
 80150f2:	4623      	mov	r3, r4
 80150f4:	e6fc      	b.n	8014ef0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80150f6:	462a      	mov	r2, r5
 80150f8:	e705      	b.n	8014f06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80150fa:	d502      	bpl.n	8015102 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 80150fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015100:	e7e9      	b.n	80150d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8015102:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015106:	eea3 2a85 	vfma.f32	s4, s7, s10
 801510a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015112:	dade      	bge.n	80150d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8015114:	e7f2      	b.n	80150fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8015116:	d502      	bpl.n	801511e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8015118:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801511c:	e7e7      	b.n	80150ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801511e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015122:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015126:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801512e:	dadc      	bge.n	80150ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8015130:	e7f2      	b.n	8015118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8015132:	bf00      	nop
 8015134:	3d800000 	.word	0x3d800000

08015138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801513c:	2714      	movs	r7, #20
 801513e:	435f      	muls	r7, r3
 8015140:	eb02 0c07 	add.w	ip, r2, r7
 8015144:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015148:	f115 0e0f 	adds.w	lr, r5, #15
 801514c:	f100 80a2 	bmi.w	8015294 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015150:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015154:	2614      	movs	r6, #20
 8015156:	9c08      	ldr	r4, [sp, #32]
 8015158:	f8c0 e014 	str.w	lr, [r0, #20]
 801515c:	4366      	muls	r6, r4
 801515e:	eb02 0806 	add.w	r8, r2, r6
 8015162:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015166:	f115 040f 	adds.w	r4, r5, #15
 801516a:	f100 809f 	bmi.w	80152ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801516e:	1124      	asrs	r4, r4, #4
 8015170:	eba4 040e 	sub.w	r4, r4, lr
 8015174:	6184      	str	r4, [r0, #24]
 8015176:	2c00      	cmp	r4, #0
 8015178:	f000 808a 	beq.w	8015290 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801517c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015180:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015184:	5995      	ldr	r5, [r2, r6]
 8015186:	eba4 0809 	sub.w	r8, r4, r9
 801518a:	59d4      	ldr	r4, [r2, r7]
 801518c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8015190:	eba5 0a04 	sub.w	sl, r5, r4
 8015194:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8015198:	fb0e fe05 	mul.w	lr, lr, r5
 801519c:	fb0a ee19 	mls	lr, sl, r9, lr
 80151a0:	fb08 e404 	mla	r4, r8, r4, lr
 80151a4:	3c01      	subs	r4, #1
 80151a6:	19a4      	adds	r4, r4, r6
 80151a8:	f100 808c 	bmi.w	80152c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80151ac:	fb94 fef6 	sdiv	lr, r4, r6
 80151b0:	fb06 441e 	mls	r4, r6, lr, r4
 80151b4:	f8c0 e000 	str.w	lr, [r0]
 80151b8:	6104      	str	r4, [r0, #16]
 80151ba:	2d00      	cmp	r5, #0
 80151bc:	f2c0 8095 	blt.w	80152ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80151c0:	fb95 f4f6 	sdiv	r4, r5, r6
 80151c4:	fb06 5514 	mls	r5, r6, r4, r5
 80151c8:	6044      	str	r4, [r0, #4]
 80151ca:	6085      	str	r5, [r0, #8]
 80151cc:	60c6      	str	r6, [r0, #12]
 80151ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80151d2:	6945      	ldr	r5, [r0, #20]
 80151d4:	59d2      	ldr	r2, [r2, r7]
 80151d6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80151da:	ee07 4a10 	vmov	s14, r4
 80151de:	6804      	ldr	r4, [r0, #0]
 80151e0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801530c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80151e4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80151e8:	ee07 2a90 	vmov	s15, r2
 80151ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151f4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80151f8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80151fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015204:	edd3 6a00 	vldr	s13, [r3]
 8015208:	eee6 6a07 	vfma.f32	s13, s12, s14
 801520c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8015210:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015214:	edc0 6a07 	vstr	s13, [r0, #28]
 8015218:	edd0 6a01 	vldr	s13, [r0, #4]
 801521c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8015220:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015228:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801522c:	ed80 6a08 	vstr	s12, [r0, #32]
 8015230:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8015232:	6242      	str	r2, [r0, #36]	; 0x24
 8015234:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8015238:	ed93 6a03 	vldr	s12, [r3, #12]
 801523c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015240:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015244:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015248:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801524c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015250:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8015254:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015258:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801525c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801525e:	6302      	str	r2, [r0, #48]	; 0x30
 8015260:	ed93 6a06 	vldr	s12, [r3, #24]
 8015264:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8015268:	eea5 6a87 	vfma.f32	s12, s11, s14
 801526c:	eeb0 7a46 	vmov.f32	s14, s12
 8015270:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8015274:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015278:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801527c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8015280:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8015284:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015288:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801528c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801528e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015294:	2410      	movs	r4, #16
 8015296:	f1c5 0501 	rsb	r5, r5, #1
 801529a:	f015 050f 	ands.w	r5, r5, #15
 801529e:	fb9e fef4 	sdiv	lr, lr, r4
 80152a2:	bf18      	it	ne
 80152a4:	2501      	movne	r5, #1
 80152a6:	ebae 0e05 	sub.w	lr, lr, r5
 80152aa:	e753      	b.n	8015154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80152ac:	f04f 0910 	mov.w	r9, #16
 80152b0:	f1c5 0501 	rsb	r5, r5, #1
 80152b4:	f015 050f 	ands.w	r5, r5, #15
 80152b8:	fb94 f4f9 	sdiv	r4, r4, r9
 80152bc:	bf18      	it	ne
 80152be:	2501      	movne	r5, #1
 80152c0:	1b64      	subs	r4, r4, r5
 80152c2:	e755      	b.n	8015170 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80152c4:	4264      	negs	r4, r4
 80152c6:	fb94 fef6 	sdiv	lr, r4, r6
 80152ca:	fb06 441e 	mls	r4, r6, lr, r4
 80152ce:	f1ce 0800 	rsb	r8, lr, #0
 80152d2:	f8c0 8000 	str.w	r8, [r0]
 80152d6:	6104      	str	r4, [r0, #16]
 80152d8:	2c00      	cmp	r4, #0
 80152da:	f43f af6e 	beq.w	80151ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80152de:	ea6f 0e0e 	mvn.w	lr, lr
 80152e2:	1b34      	subs	r4, r6, r4
 80152e4:	f8c0 e000 	str.w	lr, [r0]
 80152e8:	e766      	b.n	80151b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80152ea:	426d      	negs	r5, r5
 80152ec:	fb95 f4f6 	sdiv	r4, r5, r6
 80152f0:	fb06 5514 	mls	r5, r6, r4, r5
 80152f4:	f1c4 0e00 	rsb	lr, r4, #0
 80152f8:	f8c0 e004 	str.w	lr, [r0, #4]
 80152fc:	6085      	str	r5, [r0, #8]
 80152fe:	2d00      	cmp	r5, #0
 8015300:	f43f af64 	beq.w	80151cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015304:	43e4      	mvns	r4, r4
 8015306:	1b75      	subs	r5, r6, r5
 8015308:	6044      	str	r4, [r0, #4]
 801530a:	e75e      	b.n	80151ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801530c:	3d800000 	.word	0x3d800000

08015310 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015310:	4b01      	ldr	r3, [pc, #4]	; (8015318 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015312:	6018      	str	r0, [r3, #0]
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	2001fe00 	.word	0x2001fe00

0801531c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801531c:	4b06      	ldr	r3, [pc, #24]	; (8015338 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801531e:	881a      	ldrh	r2, [r3, #0]
 8015320:	4282      	cmp	r2, r0
 8015322:	d807      	bhi.n	8015334 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015324:	4b05      	ldr	r3, [pc, #20]	; (801533c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015326:	881b      	ldrh	r3, [r3, #0]
 8015328:	4413      	add	r3, r2
 801532a:	4298      	cmp	r0, r3
 801532c:	bfac      	ite	ge
 801532e:	2000      	movge	r0, #0
 8015330:	2001      	movlt	r0, #1
 8015332:	4770      	bx	lr
 8015334:	2000      	movs	r0, #0
 8015336:	4770      	bx	lr
 8015338:	2001fe20 	.word	0x2001fe20
 801533c:	2001fe24 	.word	0x2001fe24

08015340 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015340:	b508      	push	{r3, lr}
 8015342:	4601      	mov	r1, r0
 8015344:	f7ff ffea 	bl	801531c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015348:	b118      	cbz	r0, 8015352 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801534a:	4b02      	ldr	r3, [pc, #8]	; (8015354 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015352:	bd08      	pop	{r3, pc}
 8015354:	2001fe04 	.word	0x2001fe04

08015358 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801535a:	4c24      	ldr	r4, [pc, #144]	; (80153ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801535c:	6823      	ldr	r3, [r4, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d042      	beq.n	80153e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015362:	4a23      	ldr	r2, [pc, #140]	; (80153f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015364:	4d23      	ldr	r5, [pc, #140]	; (80153f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015366:	8811      	ldrh	r1, [r2, #0]
 8015368:	f8b5 c000 	ldrh.w	ip, [r5]
 801536c:	4822      	ldr	r0, [pc, #136]	; (80153f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801536e:	4461      	add	r1, ip
 8015370:	1c4a      	adds	r2, r1, #1
 8015372:	f022 0201 	bic.w	r2, r2, #1
 8015376:	008f      	lsls	r7, r1, #2
 8015378:	0412      	lsls	r2, r2, #16
 801537a:	19de      	adds	r6, r3, r7
 801537c:	0c12      	lsrs	r2, r2, #16
 801537e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015382:	6006      	str	r6, [r0, #0]
 8015384:	4e1d      	ldr	r6, [pc, #116]	; (80153fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015386:	19da      	adds	r2, r3, r7
 8015388:	6032      	str	r2, [r6, #0]
 801538a:	220e      	movs	r2, #14
 801538c:	fb02 f20c 	mul.w	r2, r2, ip
 8015390:	3203      	adds	r2, #3
 8015392:	f022 0203 	bic.w	r2, r2, #3
 8015396:	443a      	add	r2, r7
 8015398:	4f19      	ldr	r7, [pc, #100]	; (8015400 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801539a:	4413      	add	r3, r2
 801539c:	603b      	str	r3, [r7, #0]
 801539e:	2300      	movs	r3, #0
 80153a0:	4f18      	ldr	r7, [pc, #96]	; (8015404 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80153a2:	469c      	mov	ip, r3
 80153a4:	803b      	strh	r3, [r7, #0]
 80153a6:	4f18      	ldr	r7, [pc, #96]	; (8015408 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80153a8:	683f      	ldr	r7, [r7, #0]
 80153aa:	1aba      	subs	r2, r7, r2
 80153ac:	4f17      	ldr	r7, [pc, #92]	; (801540c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80153ae:	603a      	str	r2, [r7, #0]
 80153b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80153b4:	4a16      	ldr	r2, [pc, #88]	; (8015410 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80153b6:	8013      	strh	r3, [r2, #0]
 80153b8:	428b      	cmp	r3, r1
 80153ba:	d10d      	bne.n	80153d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80153bc:	2300      	movs	r3, #0
 80153be:	240e      	movs	r4, #14
 80153c0:	882d      	ldrh	r5, [r5, #0]
 80153c2:	6830      	ldr	r0, [r6, #0]
 80153c4:	429d      	cmp	r5, r3
 80153c6:	d90f      	bls.n	80153e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80153c8:	fb04 0203 	mla	r2, r4, r3, r0
 80153cc:	7b11      	ldrb	r1, [r2, #12]
 80153ce:	3301      	adds	r3, #1
 80153d0:	f36f 1145 	bfc	r1, #5, #1
 80153d4:	7311      	strb	r1, [r2, #12]
 80153d6:	e7f5      	b.n	80153c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80153d8:	6822      	ldr	r2, [r4, #0]
 80153da:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80153de:	6802      	ldr	r2, [r0, #0]
 80153e0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80153e4:	3301      	adds	r3, #1
 80153e6:	e7e7      	b.n	80153b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80153e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ea:	bf00      	nop
 80153ec:	2001fe04 	.word	0x2001fe04
 80153f0:	2001fe20 	.word	0x2001fe20
 80153f4:	2001fe24 	.word	0x2001fe24
 80153f8:	2001fe18 	.word	0x2001fe18
 80153fc:	2001fe08 	.word	0x2001fe08
 8015400:	2001fe10 	.word	0x2001fe10
 8015404:	2001fe22 	.word	0x2001fe22
 8015408:	2001fe0c 	.word	0x2001fe0c
 801540c:	2001fe1c 	.word	0x2001fe1c
 8015410:	2001fe14 	.word	0x2001fe14

08015414 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015414:	4b06      	ldr	r3, [pc, #24]	; (8015430 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	b943      	cbnz	r3, 801542c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801541a:	b139      	cbz	r1, 801542c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801541c:	4b05      	ldr	r3, [pc, #20]	; (8015434 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801541e:	801a      	strh	r2, [r3, #0]
 8015420:	4b05      	ldr	r3, [pc, #20]	; (8015438 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015422:	6019      	str	r1, [r3, #0]
 8015424:	4b05      	ldr	r3, [pc, #20]	; (801543c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015426:	6018      	str	r0, [r3, #0]
 8015428:	f7ff bf96 	b.w	8015358 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801542c:	4770      	bx	lr
 801542e:	bf00      	nop
 8015430:	2001fe10 	.word	0x2001fe10
 8015434:	2001fe24 	.word	0x2001fe24
 8015438:	2001fe0c 	.word	0x2001fe0c
 801543c:	2001fe04 	.word	0x2001fe04

08015440 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015440:	b470      	push	{r4, r5, r6}
 8015442:	4c07      	ldr	r4, [pc, #28]	; (8015460 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015444:	4605      	mov	r5, r0
 8015446:	6826      	ldr	r6, [r4, #0]
 8015448:	4610      	mov	r0, r2
 801544a:	9a03      	ldr	r2, [sp, #12]
 801544c:	b936      	cbnz	r6, 801545c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801544e:	6025      	str	r5, [r4, #0]
 8015450:	4c04      	ldr	r4, [pc, #16]	; (8015464 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015452:	8021      	strh	r1, [r4, #0]
 8015454:	bc70      	pop	{r4, r5, r6}
 8015456:	4619      	mov	r1, r3
 8015458:	f7ff bfdc 	b.w	8015414 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801545c:	bc70      	pop	{r4, r5, r6}
 801545e:	4770      	bx	lr
 8015460:	2001fe28 	.word	0x2001fe28
 8015464:	2001fe20 	.word	0x2001fe20

08015468 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015468:	4a12      	ldr	r2, [pc, #72]	; (80154b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801546a:	8803      	ldrh	r3, [r0, #0]
 801546c:	8812      	ldrh	r2, [r2, #0]
 801546e:	4293      	cmp	r3, r2
 8015470:	d207      	bcs.n	8015482 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015472:	2114      	movs	r1, #20
 8015474:	4a10      	ldr	r2, [pc, #64]	; (80154b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015476:	6812      	ldr	r2, [r2, #0]
 8015478:	fb01 2303 	mla	r3, r1, r3, r2
 801547c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015480:	4770      	bx	lr
 8015482:	490e      	ldr	r1, [pc, #56]	; (80154bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015484:	8809      	ldrh	r1, [r1, #0]
 8015486:	4411      	add	r1, r2
 8015488:	428b      	cmp	r3, r1
 801548a:	da04      	bge.n	8015496 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801548c:	1a9b      	subs	r3, r3, r2
 801548e:	4a0c      	ldr	r2, [pc, #48]	; (80154c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015490:	210e      	movs	r1, #14
 8015492:	6812      	ldr	r2, [r2, #0]
 8015494:	e7f0      	b.n	8015478 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015496:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801549a:	4293      	cmp	r3, r2
 801549c:	d108      	bne.n	80154b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801549e:	4b09      	ldr	r3, [pc, #36]	; (80154c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	b91b      	cbnz	r3, 80154ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80154a4:	4b08      	ldr	r3, [pc, #32]	; (80154c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80154a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80154aa:	4770      	bx	lr
 80154ac:	4b07      	ldr	r3, [pc, #28]	; (80154cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80154ae:	e7fa      	b.n	80154a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80154b0:	2000      	movs	r0, #0
 80154b2:	4770      	bx	lr
 80154b4:	2001fe20 	.word	0x2001fe20
 80154b8:	2001fe28 	.word	0x2001fe28
 80154bc:	2001fe24 	.word	0x2001fe24
 80154c0:	2001fe08 	.word	0x2001fe08
 80154c4:	2001fd98 	.word	0x2001fd98
 80154c8:	2001fd9a 	.word	0x2001fd9a
 80154cc:	2001fd9c 	.word	0x2001fd9c

080154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80154d0:	4a12      	ldr	r2, [pc, #72]	; (801551c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80154d2:	8803      	ldrh	r3, [r0, #0]
 80154d4:	8812      	ldrh	r2, [r2, #0]
 80154d6:	4293      	cmp	r3, r2
 80154d8:	d207      	bcs.n	80154ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80154da:	2114      	movs	r1, #20
 80154dc:	4a10      	ldr	r2, [pc, #64]	; (8015520 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80154de:	6812      	ldr	r2, [r2, #0]
 80154e0:	fb01 2303 	mla	r3, r1, r3, r2
 80154e4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80154e8:	4770      	bx	lr
 80154ea:	490e      	ldr	r1, [pc, #56]	; (8015524 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80154ec:	8809      	ldrh	r1, [r1, #0]
 80154ee:	4411      	add	r1, r2
 80154f0:	428b      	cmp	r3, r1
 80154f2:	da04      	bge.n	80154fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80154f4:	1a9b      	subs	r3, r3, r2
 80154f6:	4a0c      	ldr	r2, [pc, #48]	; (8015528 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80154f8:	210e      	movs	r1, #14
 80154fa:	6812      	ldr	r2, [r2, #0]
 80154fc:	e7f0      	b.n	80154e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80154fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015502:	4293      	cmp	r3, r2
 8015504:	d108      	bne.n	8015518 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015506:	4b09      	ldr	r3, [pc, #36]	; (801552c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	b91b      	cbnz	r3, 8015514 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801550c:	4b08      	ldr	r3, [pc, #32]	; (8015530 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801550e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015512:	4770      	bx	lr
 8015514:	4b07      	ldr	r3, [pc, #28]	; (8015534 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015516:	e7fa      	b.n	801550e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8015518:	2000      	movs	r0, #0
 801551a:	4770      	bx	lr
 801551c:	2001fe20 	.word	0x2001fe20
 8015520:	2001fe28 	.word	0x2001fe28
 8015524:	2001fe24 	.word	0x2001fe24
 8015528:	2001fe08 	.word	0x2001fe08
 801552c:	2001fd98 	.word	0x2001fd98
 8015530:	2001fd9c 	.word	0x2001fd9c
 8015534:	2001fd9a 	.word	0x2001fd9a

08015538 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015538:	b510      	push	{r4, lr}
 801553a:	4a1f      	ldr	r2, [pc, #124]	; (80155b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801553c:	880b      	ldrh	r3, [r1, #0]
 801553e:	8812      	ldrh	r2, [r2, #0]
 8015540:	4293      	cmp	r3, r2
 8015542:	d213      	bcs.n	801556c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015544:	2114      	movs	r1, #20
 8015546:	4a1d      	ldr	r2, [pc, #116]	; (80155bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8015548:	6812      	ldr	r2, [r2, #0]
 801554a:	fb01 2303 	mla	r3, r1, r3, r2
 801554e:	8a1a      	ldrh	r2, [r3, #16]
 8015550:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015554:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015558:	8a5b      	ldrh	r3, [r3, #18]
 801555a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801555e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015562:	8004      	strh	r4, [r0, #0]
 8015564:	8041      	strh	r1, [r0, #2]
 8015566:	8082      	strh	r2, [r0, #4]
 8015568:	80c3      	strh	r3, [r0, #6]
 801556a:	e00e      	b.n	801558a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801556c:	4914      	ldr	r1, [pc, #80]	; (80155c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801556e:	8809      	ldrh	r1, [r1, #0]
 8015570:	4411      	add	r1, r2
 8015572:	428b      	cmp	r3, r1
 8015574:	da0a      	bge.n	801558c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8015576:	210e      	movs	r1, #14
 8015578:	1a9b      	subs	r3, r3, r2
 801557a:	4a12      	ldr	r2, [pc, #72]	; (80155c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801557c:	6812      	ldr	r2, [r2, #0]
 801557e:	fb01 2303 	mla	r3, r1, r3, r2
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	6002      	str	r2, [r0, #0]
 8015586:	685a      	ldr	r2, [r3, #4]
 8015588:	6042      	str	r2, [r0, #4]
 801558a:	bd10      	pop	{r4, pc}
 801558c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015590:	4293      	cmp	r3, r2
 8015592:	d10b      	bne.n	80155ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8015594:	4b0c      	ldr	r3, [pc, #48]	; (80155c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015596:	f9b3 1000 	ldrsh.w	r1, [r3]
 801559a:	4b0c      	ldr	r3, [pc, #48]	; (80155cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801559c:	8081      	strh	r1, [r0, #4]
 801559e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80155a2:	2300      	movs	r3, #0
 80155a4:	80c2      	strh	r2, [r0, #6]
 80155a6:	8003      	strh	r3, [r0, #0]
 80155a8:	8043      	strh	r3, [r0, #2]
 80155aa:	e7ee      	b.n	801558a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80155ac:	2300      	movs	r3, #0
 80155ae:	8003      	strh	r3, [r0, #0]
 80155b0:	8043      	strh	r3, [r0, #2]
 80155b2:	8083      	strh	r3, [r0, #4]
 80155b4:	e7d8      	b.n	8015568 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80155b6:	bf00      	nop
 80155b8:	2001fe20 	.word	0x2001fe20
 80155bc:	2001fe28 	.word	0x2001fe28
 80155c0:	2001fe24 	.word	0x2001fe24
 80155c4:	2001fe08 	.word	0x2001fe08
 80155c8:	2001fd94 	.word	0x2001fd94
 80155cc:	2001fd96 	.word	0x2001fd96

080155d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80155d0:	4a17      	ldr	r2, [pc, #92]	; (8015630 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80155d2:	8803      	ldrh	r3, [r0, #0]
 80155d4:	8812      	ldrh	r2, [r2, #0]
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d213      	bcs.n	8015602 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80155da:	2114      	movs	r1, #20
 80155dc:	4a15      	ldr	r2, [pc, #84]	; (8015634 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80155de:	6812      	ldr	r2, [r2, #0]
 80155e0:	fb01 2303 	mla	r3, r1, r3, r2
 80155e4:	8a1a      	ldrh	r2, [r3, #16]
 80155e6:	8919      	ldrh	r1, [r3, #8]
 80155e8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80155ec:	428a      	cmp	r2, r1
 80155ee:	db1d      	blt.n	801562c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80155f0:	8a58      	ldrh	r0, [r3, #18]
 80155f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80155f6:	895b      	ldrh	r3, [r3, #10]
 80155f8:	4298      	cmp	r0, r3
 80155fa:	bfac      	ite	ge
 80155fc:	2000      	movge	r0, #0
 80155fe:	2001      	movlt	r0, #1
 8015600:	4770      	bx	lr
 8015602:	490d      	ldr	r1, [pc, #52]	; (8015638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8015604:	8809      	ldrh	r1, [r1, #0]
 8015606:	4411      	add	r1, r2
 8015608:	428b      	cmp	r3, r1
 801560a:	da0d      	bge.n	8015628 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801560c:	210e      	movs	r1, #14
 801560e:	1a9b      	subs	r3, r3, r2
 8015610:	4a0a      	ldr	r2, [pc, #40]	; (801563c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8015612:	6812      	ldr	r2, [r2, #0]
 8015614:	fb01 2303 	mla	r3, r1, r3, r2
 8015618:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801561c:	891a      	ldrh	r2, [r3, #8]
 801561e:	4291      	cmp	r1, r2
 8015620:	db04      	blt.n	801562c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8015622:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8015626:	e7e6      	b.n	80155f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8015628:	2000      	movs	r0, #0
 801562a:	4770      	bx	lr
 801562c:	2001      	movs	r0, #1
 801562e:	4770      	bx	lr
 8015630:	2001fe20 	.word	0x2001fe20
 8015634:	2001fe28 	.word	0x2001fe28
 8015638:	2001fe24 	.word	0x2001fe24
 801563c:	2001fe08 	.word	0x2001fe08

08015640 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015640:	4a12      	ldr	r2, [pc, #72]	; (801568c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015642:	8803      	ldrh	r3, [r0, #0]
 8015644:	8811      	ldrh	r1, [r2, #0]
 8015646:	428b      	cmp	r3, r1
 8015648:	d20b      	bcs.n	8015662 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801564a:	4a11      	ldr	r2, [pc, #68]	; (8015690 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801564c:	6812      	ldr	r2, [r2, #0]
 801564e:	b112      	cbz	r2, 8015656 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015654:	b9c0      	cbnz	r0, 8015688 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015656:	4a0f      	ldr	r2, [pc, #60]	; (8015694 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015658:	6811      	ldr	r1, [r2, #0]
 801565a:	2214      	movs	r2, #20
 801565c:	4353      	muls	r3, r2
 801565e:	58c8      	ldr	r0, [r1, r3]
 8015660:	4770      	bx	lr
 8015662:	4a0d      	ldr	r2, [pc, #52]	; (8015698 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015664:	8812      	ldrh	r2, [r2, #0]
 8015666:	440a      	add	r2, r1
 8015668:	4293      	cmp	r3, r2
 801566a:	da04      	bge.n	8015676 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801566c:	4a08      	ldr	r2, [pc, #32]	; (8015690 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801566e:	6812      	ldr	r2, [r2, #0]
 8015670:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015674:	4770      	bx	lr
 8015676:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801567a:	4293      	cmp	r3, r2
 801567c:	d103      	bne.n	8015686 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801567e:	4b07      	ldr	r3, [pc, #28]	; (801569c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015684:	4770      	bx	lr
 8015686:	2000      	movs	r0, #0
 8015688:	4770      	bx	lr
 801568a:	bf00      	nop
 801568c:	2001fe20 	.word	0x2001fe20
 8015690:	2001fe04 	.word	0x2001fe04
 8015694:	2001fe28 	.word	0x2001fe28
 8015698:	2001fe24 	.word	0x2001fe24
 801569c:	2001fda0 	.word	0x2001fda0

080156a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80156a0:	4b24      	ldr	r3, [pc, #144]	; (8015734 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80156a2:	8802      	ldrh	r2, [r0, #0]
 80156a4:	8818      	ldrh	r0, [r3, #0]
 80156a6:	4282      	cmp	r2, r0
 80156a8:	d221      	bcs.n	80156ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80156aa:	4b23      	ldr	r3, [pc, #140]	; (8015738 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80156ac:	6819      	ldr	r1, [r3, #0]
 80156ae:	2314      	movs	r3, #20
 80156b0:	fb03 1302 	mla	r3, r3, r2, r1
 80156b4:	6858      	ldr	r0, [r3, #4]
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d03a      	beq.n	8015730 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156ba:	4920      	ldr	r1, [pc, #128]	; (801573c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80156bc:	6809      	ldr	r1, [r1, #0]
 80156be:	2900      	cmp	r1, #0
 80156c0:	d036      	beq.n	8015730 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80156c6:	2900      	cmp	r1, #0
 80156c8:	d032      	beq.n	8015730 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156ca:	891a      	ldrh	r2, [r3, #8]
 80156cc:	8958      	ldrh	r0, [r3, #10]
 80156ce:	4350      	muls	r0, r2
 80156d0:	7c5a      	ldrb	r2, [r3, #17]
 80156d2:	7cdb      	ldrb	r3, [r3, #19]
 80156d4:	0952      	lsrs	r2, r2, #5
 80156d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80156da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80156de:	2b0b      	cmp	r3, #11
 80156e0:	bf18      	it	ne
 80156e2:	0040      	lslne	r0, r0, #1
 80156e4:	3003      	adds	r0, #3
 80156e6:	f020 0003 	bic.w	r0, r0, #3
 80156ea:	4408      	add	r0, r1
 80156ec:	4770      	bx	lr
 80156ee:	4b14      	ldr	r3, [pc, #80]	; (8015740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80156f0:	881b      	ldrh	r3, [r3, #0]
 80156f2:	4403      	add	r3, r0
 80156f4:	429a      	cmp	r2, r3
 80156f6:	da1a      	bge.n	801572e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80156f8:	210e      	movs	r1, #14
 80156fa:	4b12      	ldr	r3, [pc, #72]	; (8015744 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80156fc:	1a10      	subs	r0, r2, r0
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	fb01 3000 	mla	r0, r1, r0, r3
 8015704:	7b03      	ldrb	r3, [r0, #12]
 8015706:	f003 031f 	and.w	r3, r3, #31
 801570a:	2b0b      	cmp	r3, #11
 801570c:	d10b      	bne.n	8015726 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801570e:	8903      	ldrh	r3, [r0, #8]
 8015710:	8940      	ldrh	r0, [r0, #10]
 8015712:	4358      	muls	r0, r3
 8015714:	4b09      	ldr	r3, [pc, #36]	; (801573c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015716:	3003      	adds	r0, #3
 8015718:	6819      	ldr	r1, [r3, #0]
 801571a:	f020 0303 	bic.w	r3, r0, #3
 801571e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015722:	4418      	add	r0, r3
 8015724:	4770      	bx	lr
 8015726:	2b0d      	cmp	r3, #13
 8015728:	d101      	bne.n	801572e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801572a:	300d      	adds	r0, #13
 801572c:	4770      	bx	lr
 801572e:	2000      	movs	r0, #0
 8015730:	4770      	bx	lr
 8015732:	bf00      	nop
 8015734:	2001fe20 	.word	0x2001fe20
 8015738:	2001fe28 	.word	0x2001fe28
 801573c:	2001fe04 	.word	0x2001fe04
 8015740:	2001fe24 	.word	0x2001fe24
 8015744:	2001fe08 	.word	0x2001fe08

08015748 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015748:	b510      	push	{r4, lr}
 801574a:	4a17      	ldr	r2, [pc, #92]	; (80157a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801574c:	8803      	ldrh	r3, [r0, #0]
 801574e:	8812      	ldrh	r2, [r2, #0]
 8015750:	4293      	cmp	r3, r2
 8015752:	d20c      	bcs.n	801576e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015754:	2114      	movs	r1, #20
 8015756:	4a15      	ldr	r2, [pc, #84]	; (80157ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015758:	6812      	ldr	r2, [r2, #0]
 801575a:	fb01 2303 	mla	r3, r1, r3, r2
 801575e:	7c58      	ldrb	r0, [r3, #17]
 8015760:	0942      	lsrs	r2, r0, #5
 8015762:	7cd8      	ldrb	r0, [r3, #19]
 8015764:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015768:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801576c:	bd10      	pop	{r4, pc}
 801576e:	4910      	ldr	r1, [pc, #64]	; (80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015770:	8809      	ldrh	r1, [r1, #0]
 8015772:	4411      	add	r1, r2
 8015774:	428b      	cmp	r3, r1
 8015776:	da09      	bge.n	801578c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015778:	210e      	movs	r1, #14
 801577a:	1a9b      	subs	r3, r3, r2
 801577c:	4a0d      	ldr	r2, [pc, #52]	; (80157b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801577e:	6812      	ldr	r2, [r2, #0]
 8015780:	fb01 2303 	mla	r3, r1, r3, r2
 8015784:	7b18      	ldrb	r0, [r3, #12]
 8015786:	f000 001f 	and.w	r0, r0, #31
 801578a:	e7ef      	b.n	801576c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801578c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015790:	4293      	cmp	r3, r2
 8015792:	d106      	bne.n	80157a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015794:	f7f7 fcfe 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8015798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801579c:	6803      	ldr	r3, [r0, #0]
 801579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a0:	4718      	bx	r3
 80157a2:	2000      	movs	r0, #0
 80157a4:	e7e2      	b.n	801576c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80157a6:	bf00      	nop
 80157a8:	2001fe20 	.word	0x2001fe20
 80157ac:	2001fe28 	.word	0x2001fe28
 80157b0:	2001fe24 	.word	0x2001fe24
 80157b4:	2001fe08 	.word	0x2001fe08

080157b8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80157b8:	2010      	movs	r0, #16
 80157ba:	4770      	bx	lr

080157bc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80157bc:	2000      	movs	r0, #0
 80157be:	4770      	bx	lr

080157c0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80157c0:	4b02      	ldr	r3, [pc, #8]	; (80157cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80157c2:	8818      	ldrh	r0, [r3, #0]
 80157c4:	0040      	lsls	r0, r0, #1
 80157c6:	b280      	uxth	r0, r0
 80157c8:	4770      	bx	lr
 80157ca:	bf00      	nop
 80157cc:	2001fd9a 	.word	0x2001fd9a

080157d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80157d0:	2bff      	cmp	r3, #255	; 0xff
 80157d2:	d050      	beq.n	8015876 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80157d4:	2a0b      	cmp	r2, #11
 80157d6:	d04a      	beq.n	801586e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80157d8:	d80e      	bhi.n	80157f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80157da:	2a03      	cmp	r2, #3
 80157dc:	d03f      	beq.n	801585e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80157de:	d804      	bhi.n	80157ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157e0:	2a01      	cmp	r2, #1
 80157e2:	d03e      	beq.n	8015862 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80157e4:	d93f      	bls.n	8015866 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80157e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80157e8:	4770      	bx	lr
 80157ea:	2a09      	cmp	r2, #9
 80157ec:	d03f      	beq.n	801586e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80157ee:	d83c      	bhi.n	801586a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80157f0:	2a08      	cmp	r2, #8
 80157f2:	d03a      	beq.n	801586a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80157f4:	2000      	movs	r0, #0
 80157f6:	4770      	bx	lr
 80157f8:	2a2f      	cmp	r2, #47	; 0x2f
 80157fa:	d024      	beq.n	8015846 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80157fc:	d80d      	bhi.n	801581a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80157fe:	2a2d      	cmp	r2, #45	; 0x2d
 8015800:	d014      	beq.n	801582c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8015802:	d826      	bhi.n	8015852 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015804:	2a2c      	cmp	r2, #44	; 0x2c
 8015806:	d1f5      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015808:	684b      	ldr	r3, [r1, #4]
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	2b01      	cmp	r3, #1
 801580e:	d018      	beq.n	8015842 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015810:	d323      	bcc.n	801585a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8015812:	2b02      	cmp	r3, #2
 8015814:	d1ee      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015816:	6880      	ldr	r0, [r0, #8]
 8015818:	4770      	bx	lr
 801581a:	2a31      	cmp	r2, #49	; 0x31
 801581c:	d004      	beq.n	8015828 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801581e:	d328      	bcc.n	8015872 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015820:	2a32      	cmp	r2, #50	; 0x32
 8015822:	d026      	beq.n	8015872 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015824:	2a33      	cmp	r2, #51	; 0x33
 8015826:	d1e5      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015828:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801582a:	4770      	bx	lr
 801582c:	684b      	ldr	r3, [r1, #4]
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	2b01      	cmp	r3, #1
 8015832:	d004      	beq.n	801583e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015834:	d30b      	bcc.n	801584e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015836:	2b02      	cmp	r3, #2
 8015838:	d1dc      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801583a:	6900      	ldr	r0, [r0, #16]
 801583c:	4770      	bx	lr
 801583e:	6a00      	ldr	r0, [r0, #32]
 8015840:	4770      	bx	lr
 8015842:	6980      	ldr	r0, [r0, #24]
 8015844:	4770      	bx	lr
 8015846:	684b      	ldr	r3, [r1, #4]
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d1d2      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801584e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015850:	4770      	bx	lr
 8015852:	684b      	ldr	r3, [r1, #4]
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d1cc      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801585a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801585c:	4770      	bx	lr
 801585e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015860:	4770      	bx	lr
 8015862:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015864:	4770      	bx	lr
 8015866:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015868:	4770      	bx	lr
 801586a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801586c:	4770      	bx	lr
 801586e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015870:	4770      	bx	lr
 8015872:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015874:	4770      	bx	lr
 8015876:	2a0b      	cmp	r2, #11
 8015878:	d049      	beq.n	801590e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801587a:	d80e      	bhi.n	801589a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801587c:	2a03      	cmp	r2, #3
 801587e:	d040      	beq.n	8015902 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015880:	d804      	bhi.n	801588c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8015882:	2a01      	cmp	r2, #1
 8015884:	d03f      	beq.n	8015906 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8015886:	d940      	bls.n	801590a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8015888:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801588a:	4770      	bx	lr
 801588c:	2a09      	cmp	r2, #9
 801588e:	d03e      	beq.n	801590e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015890:	d801      	bhi.n	8015896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8015892:	2a08      	cmp	r2, #8
 8015894:	d1ae      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8015896:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8015898:	4770      	bx	lr
 801589a:	2a2f      	cmp	r2, #47	; 0x2f
 801589c:	d024      	beq.n	80158e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801589e:	d80d      	bhi.n	80158bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80158a0:	2a2d      	cmp	r2, #45	; 0x2d
 80158a2:	d014      	beq.n	80158ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80158a4:	d826      	bhi.n	80158f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80158a6:	2a2c      	cmp	r2, #44	; 0x2c
 80158a8:	d1a4      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158aa:	684b      	ldr	r3, [r1, #4]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	2b01      	cmp	r3, #1
 80158b0:	d018      	beq.n	80158e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80158b2:	d324      	bcc.n	80158fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80158b4:	2b02      	cmp	r3, #2
 80158b6:	d19d      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158b8:	68c0      	ldr	r0, [r0, #12]
 80158ba:	4770      	bx	lr
 80158bc:	2a31      	cmp	r2, #49	; 0x31
 80158be:	d004      	beq.n	80158ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80158c0:	d327      	bcc.n	8015912 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80158c2:	2a32      	cmp	r2, #50	; 0x32
 80158c4:	d025      	beq.n	8015912 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80158c6:	2a33      	cmp	r2, #51	; 0x33
 80158c8:	d194      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80158cc:	4770      	bx	lr
 80158ce:	684b      	ldr	r3, [r1, #4]
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d004      	beq.n	80158e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80158d6:	d30b      	bcc.n	80158f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80158d8:	2b02      	cmp	r3, #2
 80158da:	d18b      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158dc:	6940      	ldr	r0, [r0, #20]
 80158de:	4770      	bx	lr
 80158e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80158e2:	4770      	bx	lr
 80158e4:	69c0      	ldr	r0, [r0, #28]
 80158e6:	4770      	bx	lr
 80158e8:	684b      	ldr	r3, [r1, #4]
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d181      	bne.n	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80158f2:	4770      	bx	lr
 80158f4:	684b      	ldr	r3, [r1, #4]
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f47f af7b 	bne.w	80157f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80158fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015900:	4770      	bx	lr
 8015902:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015904:	4770      	bx	lr
 8015906:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015908:	4770      	bx	lr
 801590a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801590c:	4770      	bx	lr
 801590e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8015910:	4770      	bx	lr
 8015912:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8015914:	4770      	bx	lr

08015916 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591a:	b087      	sub	sp, #28
 801591c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801591e:	9101      	str	r1, [sp, #4]
 8015920:	9205      	str	r2, [sp, #20]
 8015922:	6841      	ldr	r1, [r0, #4]
 8015924:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015928:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801592c:	9202      	str	r2, [sp, #8]
 801592e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8015932:	fb01 2404 	mla	r4, r1, r4, r2
 8015936:	6802      	ldr	r2, [r0, #0]
 8015938:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801593c:	f8de 2000 	ldr.w	r2, [lr]
 8015940:	9203      	str	r2, [sp, #12]
 8015942:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015946:	3204      	adds	r2, #4
 8015948:	9204      	str	r2, [sp, #16]
 801594a:	9a02      	ldr	r2, [sp, #8]
 801594c:	43d6      	mvns	r6, r2
 801594e:	b2f6      	uxtb	r6, r6
 8015950:	9a01      	ldr	r2, [sp, #4]
 8015952:	2a00      	cmp	r2, #0
 8015954:	dc03      	bgt.n	801595e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015956:	9a05      	ldr	r2, [sp, #20]
 8015958:	2a00      	cmp	r2, #0
 801595a:	f340 8129 	ble.w	8015bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801595e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015960:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8015964:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801596a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801596e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015972:	2b00      	cmp	r3, #0
 8015974:	dd0e      	ble.n	8015994 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015976:	1408      	asrs	r0, r1, #16
 8015978:	d405      	bmi.n	8015986 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801597a:	4560      	cmp	r0, ip
 801597c:	da03      	bge.n	8015986 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801597e:	1410      	asrs	r0, r2, #16
 8015980:	d401      	bmi.n	8015986 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015982:	42b8      	cmp	r0, r7
 8015984:	db07      	blt.n	8015996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015986:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015988:	3b01      	subs	r3, #1
 801598a:	4401      	add	r1, r0
 801598c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801598e:	3402      	adds	r4, #2
 8015990:	4402      	add	r2, r0
 8015992:	e7ee      	b.n	8015972 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015994:	d071      	beq.n	8015a7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015996:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015998:	1e58      	subs	r0, r3, #1
 801599a:	fb05 1500 	mla	r5, r5, r0, r1
 801599e:	142d      	asrs	r5, r5, #16
 80159a0:	d45f      	bmi.n	8015a62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80159a2:	4565      	cmp	r5, ip
 80159a4:	da5d      	bge.n	8015a62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80159a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80159a8:	fb05 2000 	mla	r0, r5, r0, r2
 80159ac:	1400      	asrs	r0, r0, #16
 80159ae:	d458      	bmi.n	8015a62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80159b0:	42b8      	cmp	r0, r7
 80159b2:	da56      	bge.n	8015a62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80159b4:	4699      	mov	r9, r3
 80159b6:	46a2      	mov	sl, r4
 80159b8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80159bc:	f1b9 0f00 	cmp.w	r9, #0
 80159c0:	dd57      	ble.n	8015a72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80159c2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80159c6:	9803      	ldr	r0, [sp, #12]
 80159c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80159cc:	fb07 000c 	mla	r0, r7, ip, r0
 80159d0:	140d      	asrs	r5, r1, #16
 80159d2:	5d40      	ldrb	r0, [r0, r5]
 80159d4:	9d04      	ldr	r5, [sp, #16]
 80159d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80159da:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80159de:	f8ba 5000 	ldrh.w	r5, [sl]
 80159e2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80159e6:	122f      	asrs	r7, r5, #8
 80159e8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80159ec:	fb17 f706 	smulbb	r7, r7, r6
 80159f0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80159f4:	00ed      	lsls	r5, r5, #3
 80159f6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80159fa:	b2ed      	uxtb	r5, r5
 80159fc:	fb18 f806 	smulbb	r8, r8, r6
 8015a00:	fb15 f506 	smulbb	r5, r5, r6
 8015a04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015a08:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8015a0c:	10c7      	asrs	r7, r0, #3
 8015a0e:	00c0      	lsls	r0, r0, #3
 8015a10:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015a14:	b2c0      	uxtb	r0, r0
 8015a16:	fb07 870b 	mla	r7, r7, fp, r8
 8015a1a:	fb00 500b 	mla	r0, r0, fp, r5
 8015a1e:	fa1f fc8c 	uxth.w	ip, ip
 8015a22:	b280      	uxth	r0, r0
 8015a24:	b2bf      	uxth	r7, r7
 8015a26:	f10c 0501 	add.w	r5, ip, #1
 8015a2a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015a2e:	f107 0801 	add.w	r8, r7, #1
 8015a32:	1c45      	adds	r5, r0, #1
 8015a34:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015a38:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8015a3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015a3e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015a42:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015a46:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015a4a:	ea45 0c0c 	orr.w	ip, r5, ip
 8015a4e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8015a52:	4401      	add	r1, r0
 8015a54:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015a56:	ea4c 0c08 	orr.w	ip, ip, r8
 8015a5a:	f82a cb02 	strh.w	ip, [sl], #2
 8015a5e:	4402      	add	r2, r0
 8015a60:	e7ac      	b.n	80159bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015a62:	f04f 0800 	mov.w	r8, #0
 8015a66:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8015a6a:	eb03 0008 	add.w	r0, r3, r8
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	dc41      	bgt.n	8015af6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8015a72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015a7a:	9b01      	ldr	r3, [sp, #4]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f340 8097 	ble.w	8015bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015a8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015a8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015a92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015a96:	eef0 6a62 	vmov.f32	s13, s5
 8015a9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015a9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015aa2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015aa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015aaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015aae:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8015ab2:	eef0 6a43 	vmov.f32	s13, s6
 8015ab6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015aba:	ee12 2a90 	vmov	r2, s5
 8015abe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ac4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ac8:	fb92 f3f3 	sdiv	r3, r2, r3
 8015acc:	ee13 2a10 	vmov	r2, s6
 8015ad0:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ad4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8015ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8015adc:	9314      	str	r3, [sp, #80]	; 0x50
 8015ade:	9b01      	ldr	r3, [sp, #4]
 8015ae0:	9a05      	ldr	r2, [sp, #20]
 8015ae2:	3b01      	subs	r3, #1
 8015ae4:	9301      	str	r3, [sp, #4]
 8015ae6:	eeb0 3a67 	vmov.f32	s6, s15
 8015aea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015aec:	eef0 2a47 	vmov.f32	s5, s14
 8015af0:	bf08      	it	eq
 8015af2:	4613      	moveq	r3, r2
 8015af4:	e72c      	b.n	8015950 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8015af6:	140f      	asrs	r7, r1, #16
 8015af8:	d453      	bmi.n	8015ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8015afa:	f8de 5008 	ldr.w	r5, [lr, #8]
 8015afe:	42bd      	cmp	r5, r7
 8015b00:	dd4f      	ble.n	8015ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8015b02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8015b06:	d44c      	bmi.n	8015ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8015b08:	f8de 000c 	ldr.w	r0, [lr, #12]
 8015b0c:	4560      	cmp	r0, ip
 8015b0e:	dd48      	ble.n	8015ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8015b10:	9803      	ldr	r0, [sp, #12]
 8015b12:	b22d      	sxth	r5, r5
 8015b14:	fb0c 0505 	mla	r5, ip, r5, r0
 8015b18:	5de8      	ldrb	r0, [r5, r7]
 8015b1a:	9d04      	ldr	r5, [sp, #16]
 8015b1c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8015b20:	f06f 0501 	mvn.w	r5, #1
 8015b24:	fb05 fb08 	mul.w	fp, r5, r8
 8015b28:	f834 500b 	ldrh.w	r5, [r4, fp]
 8015b2c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8015b30:	122f      	asrs	r7, r5, #8
 8015b32:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015b36:	fb17 f706 	smulbb	r7, r7, r6
 8015b3a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8015b3e:	00ed      	lsls	r5, r5, #3
 8015b40:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015b44:	b2ed      	uxtb	r5, r5
 8015b46:	fb19 f906 	smulbb	r9, r9, r6
 8015b4a:	fb15 f506 	smulbb	r5, r5, r6
 8015b4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015b52:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8015b56:	10c7      	asrs	r7, r0, #3
 8015b58:	00c0      	lsls	r0, r0, #3
 8015b5a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015b5e:	b2c0      	uxtb	r0, r0
 8015b60:	fb07 970a 	mla	r7, r7, sl, r9
 8015b64:	fb00 500a 	mla	r0, r0, sl, r5
 8015b68:	fa1f fc8c 	uxth.w	ip, ip
 8015b6c:	b2bf      	uxth	r7, r7
 8015b6e:	b280      	uxth	r0, r0
 8015b70:	f10c 0501 	add.w	r5, ip, #1
 8015b74:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015b78:	f107 0901 	add.w	r9, r7, #1
 8015b7c:	1c45      	adds	r5, r0, #1
 8015b7e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015b82:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8015b86:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015b8a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015b8e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8015b92:	ea45 0c0c 	orr.w	ip, r5, ip
 8015b96:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8015b9a:	ea4c 0c09 	orr.w	ip, ip, r9
 8015b9e:	f824 c00b 	strh.w	ip, [r4, fp]
 8015ba2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8015ba8:	4401      	add	r1, r0
 8015baa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015bac:	4402      	add	r2, r0
 8015bae:	e75c      	b.n	8015a6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015bb0:	b007      	add	sp, #28
 8015bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bbe:	b085      	sub	sp, #20
 8015bc0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015bc2:	4693      	mov	fp, r2
 8015bc4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015bc8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8015bcc:	6870      	ldr	r0, [r6, #4]
 8015bce:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8015bd0:	fb00 2404 	mla	r4, r0, r4, r2
 8015bd4:	6832      	ldr	r2, [r6, #0]
 8015bd6:	9100      	str	r1, [sp, #0]
 8015bd8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015bdc:	682a      	ldr	r2, [r5, #0]
 8015bde:	9201      	str	r2, [sp, #4]
 8015be0:	686a      	ldr	r2, [r5, #4]
 8015be2:	3204      	adds	r2, #4
 8015be4:	9202      	str	r2, [sp, #8]
 8015be6:	9a00      	ldr	r2, [sp, #0]
 8015be8:	2a00      	cmp	r2, #0
 8015bea:	dc03      	bgt.n	8015bf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8015bec:	f1bb 0f00 	cmp.w	fp, #0
 8015bf0:	f340 80a0 	ble.w	8015d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8015bf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015bf6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8015bfa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c00:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8015c04:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	dd0c      	ble.n	8015c26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015c0c:	1406      	asrs	r6, r0, #16
 8015c0e:	d405      	bmi.n	8015c1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015c10:	454e      	cmp	r6, r9
 8015c12:	da03      	bge.n	8015c1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015c14:	1416      	asrs	r6, r2, #16
 8015c16:	d401      	bmi.n	8015c1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015c18:	4546      	cmp	r6, r8
 8015c1a:	db05      	blt.n	8015c28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015c1c:	4470      	add	r0, lr
 8015c1e:	4462      	add	r2, ip
 8015c20:	3b01      	subs	r3, #1
 8015c22:	3402      	adds	r4, #2
 8015c24:	e7f0      	b.n	8015c08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8015c26:	d00f      	beq.n	8015c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8015c28:	1e5e      	subs	r6, r3, #1
 8015c2a:	fb0e 0706 	mla	r7, lr, r6, r0
 8015c2e:	143f      	asrs	r7, r7, #16
 8015c30:	d541      	bpl.n	8015cb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8015c32:	4698      	mov	r8, r3
 8015c34:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8015c38:	9603      	str	r6, [sp, #12]
 8015c3a:	f1b8 0f00 	cmp.w	r8, #0
 8015c3e:	dc59      	bgt.n	8015cf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8015c40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c44:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015c48:	9b00      	ldr	r3, [sp, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	dd72      	ble.n	8015d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8015c4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015c56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015c5a:	eeb0 6a62 	vmov.f32	s12, s5
 8015c5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015c62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015c66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015c6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015c72:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015c76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015c7a:	eeb0 6a43 	vmov.f32	s12, s6
 8015c7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015c82:	ee12 2a90 	vmov	r2, s5
 8015c86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c90:	fb92 fef3 	sdiv	lr, r2, r3
 8015c94:	ee13 2a10 	vmov	r2, s6
 8015c98:	fb92 fcf3 	sdiv	ip, r2, r3
 8015c9c:	9b00      	ldr	r3, [sp, #0]
 8015c9e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015ca2:	3b01      	subs	r3, #1
 8015ca4:	9300      	str	r3, [sp, #0]
 8015ca6:	eeb0 3a67 	vmov.f32	s6, s15
 8015caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cac:	eef0 2a47 	vmov.f32	s5, s14
 8015cb0:	bf08      	it	eq
 8015cb2:	465b      	moveq	r3, fp
 8015cb4:	e797      	b.n	8015be6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8015cb6:	454f      	cmp	r7, r9
 8015cb8:	dabb      	bge.n	8015c32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015cba:	fb0c 2606 	mla	r6, ip, r6, r2
 8015cbe:	1436      	asrs	r6, r6, #16
 8015cc0:	d4b7      	bmi.n	8015c32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015cc2:	4546      	cmp	r6, r8
 8015cc4:	dab5      	bge.n	8015c32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015cc6:	461e      	mov	r6, r3
 8015cc8:	46a0      	mov	r8, r4
 8015cca:	2e00      	cmp	r6, #0
 8015ccc:	ddb8      	ble.n	8015c40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8015cce:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8015cd2:	9901      	ldr	r1, [sp, #4]
 8015cd4:	1417      	asrs	r7, r2, #16
 8015cd6:	fb0a 1707 	mla	r7, sl, r7, r1
 8015cda:	ea4f 4920 	mov.w	r9, r0, asr #16
 8015cde:	f817 7009 	ldrb.w	r7, [r7, r9]
 8015ce2:	9902      	ldr	r1, [sp, #8]
 8015ce4:	4470      	add	r0, lr
 8015ce6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8015cea:	4462      	add	r2, ip
 8015cec:	f828 7b02 	strh.w	r7, [r8], #2
 8015cf0:	3e01      	subs	r6, #1
 8015cf2:	e7ea      	b.n	8015cca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8015cf4:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015cf8:	d417      	bmi.n	8015d2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015cfa:	68ae      	ldr	r6, [r5, #8]
 8015cfc:	454e      	cmp	r6, r9
 8015cfe:	dd14      	ble.n	8015d2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015d00:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015d04:	d411      	bmi.n	8015d2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015d06:	68ef      	ldr	r7, [r5, #12]
 8015d08:	4557      	cmp	r7, sl
 8015d0a:	dd0e      	ble.n	8015d2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015d0c:	f06f 0101 	mvn.w	r1, #1
 8015d10:	9f01      	ldr	r7, [sp, #4]
 8015d12:	b236      	sxth	r6, r6
 8015d14:	fb0a 7606 	mla	r6, sl, r6, r7
 8015d18:	9f02      	ldr	r7, [sp, #8]
 8015d1a:	f816 6009 	ldrb.w	r6, [r6, r9]
 8015d1e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8015d22:	fb01 f608 	mul.w	r6, r1, r8
 8015d26:	9903      	ldr	r1, [sp, #12]
 8015d28:	538f      	strh	r7, [r1, r6]
 8015d2a:	4470      	add	r0, lr
 8015d2c:	4462      	add	r2, ip
 8015d2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015d32:	e782      	b.n	8015c3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015d34:	b005      	add	sp, #20
 8015d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3e:	b087      	sub	sp, #28
 8015d40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015d42:	9102      	str	r1, [sp, #8]
 8015d44:	9205      	str	r2, [sp, #20]
 8015d46:	6861      	ldr	r1, [r4, #4]
 8015d48:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015d4c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8015d50:	9203      	str	r2, [sp, #12]
 8015d52:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8015d56:	fb01 2000 	mla	r0, r1, r0, r2
 8015d5a:	6822      	ldr	r2, [r4, #0]
 8015d5c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015d60:	9200      	str	r2, [sp, #0]
 8015d62:	f8dc 2000 	ldr.w	r2, [ip]
 8015d66:	9204      	str	r2, [sp, #16]
 8015d68:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015d6c:	3204      	adds	r2, #4
 8015d6e:	9201      	str	r2, [sp, #4]
 8015d70:	9a03      	ldr	r2, [sp, #12]
 8015d72:	43d5      	mvns	r5, r2
 8015d74:	b2ed      	uxtb	r5, r5
 8015d76:	9a02      	ldr	r2, [sp, #8]
 8015d78:	2a00      	cmp	r2, #0
 8015d7a:	dc03      	bgt.n	8015d84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015d7c:	9a05      	ldr	r2, [sp, #20]
 8015d7e:	2a00      	cmp	r2, #0
 8015d80:	f340 812c 	ble.w	8015fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8015d84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d86:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015d8a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d90:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015d94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd10      	ble.n	8015dbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015d9c:	140c      	asrs	r4, r1, #16
 8015d9e:	d405      	bmi.n	8015dac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015da0:	4574      	cmp	r4, lr
 8015da2:	da03      	bge.n	8015dac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015da4:	1414      	asrs	r4, r2, #16
 8015da6:	d401      	bmi.n	8015dac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015da8:	42bc      	cmp	r4, r7
 8015daa:	db09      	blt.n	8015dc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015dac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dae:	9800      	ldr	r0, [sp, #0]
 8015db0:	4421      	add	r1, r4
 8015db2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015db4:	3002      	adds	r0, #2
 8015db6:	4422      	add	r2, r4
 8015db8:	3b01      	subs	r3, #1
 8015dba:	9000      	str	r0, [sp, #0]
 8015dbc:	e7ec      	b.n	8015d98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015dbe:	d071      	beq.n	8015ea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015dc0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015dc2:	1e5c      	subs	r4, r3, #1
 8015dc4:	fb06 1604 	mla	r6, r6, r4, r1
 8015dc8:	1436      	asrs	r6, r6, #16
 8015dca:	d45d      	bmi.n	8015e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015dcc:	4576      	cmp	r6, lr
 8015dce:	da5b      	bge.n	8015e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015dd0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015dd2:	fb06 2404 	mla	r4, r6, r4, r2
 8015dd6:	1424      	asrs	r4, r4, #16
 8015dd8:	d456      	bmi.n	8015e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015dda:	42bc      	cmp	r4, r7
 8015ddc:	da54      	bge.n	8015e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015dde:	4698      	mov	r8, r3
 8015de0:	f8dd 9000 	ldr.w	r9, [sp]
 8015de4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8015de8:	f1b8 0f00 	cmp.w	r8, #0
 8015dec:	dd54      	ble.n	8015e98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015dee:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8015df2:	9804      	ldr	r0, [sp, #16]
 8015df4:	1414      	asrs	r4, r2, #16
 8015df6:	fb07 0404 	mla	r4, r7, r4, r0
 8015dfa:	140e      	asrs	r6, r1, #16
 8015dfc:	f814 e006 	ldrb.w	lr, [r4, r6]
 8015e00:	9801      	ldr	r0, [sp, #4]
 8015e02:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015e06:	eb00 0b0e 	add.w	fp, r0, lr
 8015e0a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015e0e:	f8b9 4000 	ldrh.w	r4, [r9]
 8015e12:	fb16 f60a 	smulbb	r6, r6, sl
 8015e16:	1227      	asrs	r7, r4, #8
 8015e18:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015e1c:	fb07 6705 	mla	r7, r7, r5, r6
 8015e20:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015e24:	10e6      	asrs	r6, r4, #3
 8015e26:	00e4      	lsls	r4, r4, #3
 8015e28:	b2e4      	uxtb	r4, r4
 8015e2a:	fb1b fb0a 	smulbb	fp, fp, sl
 8015e2e:	fb14 f405 	smulbb	r4, r4, r5
 8015e32:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8015e36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015e3a:	fb06 b605 	mla	r6, r6, r5, fp
 8015e3e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8015e42:	b2bf      	uxth	r7, r7
 8015e44:	b2b6      	uxth	r6, r6
 8015e46:	fa1f fe8e 	uxth.w	lr, lr
 8015e4a:	1c7c      	adds	r4, r7, #1
 8015e4c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8015e50:	f106 0b01 	add.w	fp, r6, #1
 8015e54:	f10e 0401 	add.w	r4, lr, #1
 8015e58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015e5a:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8015e5e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8015e62:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015e66:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015e6a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015e6e:	4327      	orrs	r7, r4
 8015e70:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015e74:	4401      	add	r1, r0
 8015e76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015e78:	ea47 070b 	orr.w	r7, r7, fp
 8015e7c:	f829 7b02 	strh.w	r7, [r9], #2
 8015e80:	4402      	add	r2, r0
 8015e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e86:	e7af      	b.n	8015de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8015e88:	f04f 0e00 	mov.w	lr, #0
 8015e8c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8015e90:	eb03 040e 	add.w	r4, r3, lr
 8015e94:	2c00      	cmp	r4, #0
 8015e96:	dc43      	bgt.n	8015f20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8015e98:	9a00      	ldr	r2, [sp, #0]
 8015e9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e9e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	9b02      	ldr	r3, [sp, #8]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	f340 8098 	ble.w	8015fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8015eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015eb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015eb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015eb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ebc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ec0:	eef0 6a62 	vmov.f32	s13, s5
 8015ec4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015ec8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ecc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ed0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ed4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ed8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8015edc:	eef0 6a43 	vmov.f32	s13, s6
 8015ee0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015ee4:	ee12 2a90 	vmov	r2, s5
 8015ee8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015eee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ef6:	ee13 2a10 	vmov	r2, s6
 8015efa:	9313      	str	r3, [sp, #76]	; 0x4c
 8015efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015efe:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8015f02:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f06:	9314      	str	r3, [sp, #80]	; 0x50
 8015f08:	9b02      	ldr	r3, [sp, #8]
 8015f0a:	9a05      	ldr	r2, [sp, #20]
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	9302      	str	r3, [sp, #8]
 8015f10:	eeb0 3a67 	vmov.f32	s6, s15
 8015f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f16:	eef0 2a47 	vmov.f32	s5, s14
 8015f1a:	bf08      	it	eq
 8015f1c:	4613      	moveq	r3, r2
 8015f1e:	e72a      	b.n	8015d76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015f20:	140f      	asrs	r7, r1, #16
 8015f22:	d454      	bmi.n	8015fce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015f24:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015f28:	42be      	cmp	r6, r7
 8015f2a:	dd50      	ble.n	8015fce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015f2c:	ea5f 4822 	movs.w	r8, r2, asr #16
 8015f30:	d44d      	bmi.n	8015fce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015f32:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8015f36:	4544      	cmp	r4, r8
 8015f38:	dd49      	ble.n	8015fce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015f3a:	f06f 0001 	mvn.w	r0, #1
 8015f3e:	9c04      	ldr	r4, [sp, #16]
 8015f40:	b236      	sxth	r6, r6
 8015f42:	fb08 4606 	mla	r6, r8, r6, r4
 8015f46:	f816 8007 	ldrb.w	r8, [r6, r7]
 8015f4a:	9c01      	ldr	r4, [sp, #4]
 8015f4c:	fb00 fa0e 	mul.w	sl, r0, lr
 8015f50:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015f54:	eb04 0b08 	add.w	fp, r4, r8
 8015f58:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015f5c:	9800      	ldr	r0, [sp, #0]
 8015f5e:	fb16 f609 	smulbb	r6, r6, r9
 8015f62:	f830 400a 	ldrh.w	r4, [r0, sl]
 8015f66:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015f6a:	1227      	asrs	r7, r4, #8
 8015f6c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015f70:	fb07 6705 	mla	r7, r7, r5, r6
 8015f74:	10e6      	asrs	r6, r4, #3
 8015f76:	00e4      	lsls	r4, r4, #3
 8015f78:	b2e4      	uxtb	r4, r4
 8015f7a:	fb1b fb09 	smulbb	fp, fp, r9
 8015f7e:	9801      	ldr	r0, [sp, #4]
 8015f80:	fb14 f405 	smulbb	r4, r4, r5
 8015f84:	f810 8008 	ldrb.w	r8, [r0, r8]
 8015f88:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015f8c:	fb06 b605 	mla	r6, r6, r5, fp
 8015f90:	fb08 4809 	mla	r8, r8, r9, r4
 8015f94:	b2bf      	uxth	r7, r7
 8015f96:	b2b6      	uxth	r6, r6
 8015f98:	fa1f f888 	uxth.w	r8, r8
 8015f9c:	1c7c      	adds	r4, r7, #1
 8015f9e:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8015fa2:	f106 0b01 	add.w	fp, r6, #1
 8015fa6:	f108 0401 	add.w	r4, r8, #1
 8015faa:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8015fae:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8015fb2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015fb6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015fba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015fbe:	4327      	orrs	r7, r4
 8015fc0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015fc4:	9800      	ldr	r0, [sp, #0]
 8015fc6:	ea47 070b 	orr.w	r7, r7, fp
 8015fca:	f820 700a 	strh.w	r7, [r0, sl]
 8015fce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015fd0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015fd4:	4401      	add	r1, r0
 8015fd6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015fd8:	4402      	add	r2, r0
 8015fda:	e759      	b.n	8015e90 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015fdc:	b007      	add	sp, #28
 8015fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015fe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fec:	b085      	sub	sp, #20
 8015fee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015ff0:	9203      	str	r2, [sp, #12]
 8015ff2:	6870      	ldr	r0, [r6, #4]
 8015ff4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015ff8:	fb00 2404 	mla	r4, r0, r4, r2
 8015ffc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8015ffe:	6832      	ldr	r2, [r6, #0]
 8016000:	686f      	ldr	r7, [r5, #4]
 8016002:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016006:	682a      	ldr	r2, [r5, #0]
 8016008:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801600c:	9101      	str	r1, [sp, #4]
 801600e:	9202      	str	r2, [sp, #8]
 8016010:	3704      	adds	r7, #4
 8016012:	9a01      	ldr	r2, [sp, #4]
 8016014:	2a00      	cmp	r2, #0
 8016016:	dc03      	bgt.n	8016020 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016018:	9a03      	ldr	r2, [sp, #12]
 801601a:	2a00      	cmp	r2, #0
 801601c:	f340 80cc 	ble.w	80161b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8016020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016022:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016026:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801602a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801602c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8016030:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016034:	2b00      	cmp	r3, #0
 8016036:	dd0d      	ble.n	8016054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016038:	1406      	asrs	r6, r0, #16
 801603a:	d405      	bmi.n	8016048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801603c:	454e      	cmp	r6, r9
 801603e:	da03      	bge.n	8016048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016040:	1416      	asrs	r6, r2, #16
 8016042:	d401      	bmi.n	8016048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016044:	4546      	cmp	r6, r8
 8016046:	db06      	blt.n	8016056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016048:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801604a:	4460      	add	r0, ip
 801604c:	4432      	add	r2, r6
 801604e:	3b01      	subs	r3, #1
 8016050:	3402      	adds	r4, #2
 8016052:	e7ef      	b.n	8016034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016054:	d00f      	beq.n	8016076 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016056:	1e5e      	subs	r6, r3, #1
 8016058:	fb0c 0e06 	mla	lr, ip, r6, r0
 801605c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8016060:	d543      	bpl.n	80160ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8016062:	4698      	mov	r8, r3
 8016064:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8016068:	f1b8 0f00 	cmp.w	r8, #0
 801606c:	dc71      	bgt.n	8016152 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801606e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016072:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016076:	9b01      	ldr	r3, [sp, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	f340 809d 	ble.w	80161b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801607e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016086:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801608a:	eeb0 6a62 	vmov.f32	s12, s5
 801608e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016092:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016096:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801609a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801609e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80160a2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80160a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160aa:	eeb0 6a43 	vmov.f32	s12, s6
 80160ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80160b2:	ee12 2a90 	vmov	r2, s5
 80160b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80160c0:	fb92 fcf3 	sdiv	ip, r2, r3
 80160c4:	ee13 2a10 	vmov	r2, s6
 80160c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80160cc:	9312      	str	r3, [sp, #72]	; 0x48
 80160ce:	9b01      	ldr	r3, [sp, #4]
 80160d0:	9a03      	ldr	r2, [sp, #12]
 80160d2:	3b01      	subs	r3, #1
 80160d4:	9301      	str	r3, [sp, #4]
 80160d6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80160da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160dc:	eeb0 3a67 	vmov.f32	s6, s15
 80160e0:	bf08      	it	eq
 80160e2:	4613      	moveq	r3, r2
 80160e4:	eef0 2a47 	vmov.f32	s5, s14
 80160e8:	e793      	b.n	8016012 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80160ea:	45ce      	cmp	lr, r9
 80160ec:	dab9      	bge.n	8016062 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80160ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80160f0:	fb01 2606 	mla	r6, r1, r6, r2
 80160f4:	1436      	asrs	r6, r6, #16
 80160f6:	d4b4      	bmi.n	8016062 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80160f8:	4546      	cmp	r6, r8
 80160fa:	dab2      	bge.n	8016062 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80160fc:	4698      	mov	r8, r3
 80160fe:	46a2      	mov	sl, r4
 8016100:	f1b8 0f00 	cmp.w	r8, #0
 8016104:	ddb3      	ble.n	801606e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8016106:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801610a:	9902      	ldr	r1, [sp, #8]
 801610c:	1416      	asrs	r6, r2, #16
 801610e:	fb09 1606 	mla	r6, r9, r6, r1
 8016112:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8016116:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801611a:	4929      	ldr	r1, [pc, #164]	; (80161c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801611c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016120:	eb07 0b0e 	add.w	fp, r7, lr
 8016124:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8016128:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801612c:	00f6      	lsls	r6, r6, #3
 801612e:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8016132:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016136:	ea49 0606 	orr.w	r6, r9, r6
 801613a:	f817 900e 	ldrb.w	r9, [r7, lr]
 801613e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016140:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8016144:	f82a 6b02 	strh.w	r6, [sl], #2
 8016148:	4460      	add	r0, ip
 801614a:	440a      	add	r2, r1
 801614c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016150:	e7d6      	b.n	8016100 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016152:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016156:	d429      	bmi.n	80161ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016158:	68ae      	ldr	r6, [r5, #8]
 801615a:	454e      	cmp	r6, r9
 801615c:	dd26      	ble.n	80161ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801615e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016162:	d423      	bmi.n	80161ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016164:	68e9      	ldr	r1, [r5, #12]
 8016166:	4559      	cmp	r1, fp
 8016168:	dd20      	ble.n	80161ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801616a:	9902      	ldr	r1, [sp, #8]
 801616c:	fa0f fe86 	sxth.w	lr, r6
 8016170:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8016174:	f06f 0101 	mvn.w	r1, #1
 8016178:	f81e e009 	ldrb.w	lr, [lr, r9]
 801617c:	fb01 f908 	mul.w	r9, r1, r8
 8016180:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016184:	eb07 060e 	add.w	r6, r7, lr
 8016188:	f896 b002 	ldrb.w	fp, [r6, #2]
 801618c:	7876      	ldrb	r6, [r6, #1]
 801618e:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8016192:	00f6      	lsls	r6, r6, #3
 8016194:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8016198:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801619c:	ea4b 0606 	orr.w	r6, fp, r6
 80161a0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80161a4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80161a8:	f82a 6009 	strh.w	r6, [sl, r9]
 80161ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80161ae:	4460      	add	r0, ip
 80161b0:	440a      	add	r2, r1
 80161b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80161b6:	e757      	b.n	8016068 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80161b8:	b005      	add	sp, #20
 80161ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161be:	bf00      	nop
 80161c0:	fffff800 	.word	0xfffff800

080161c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80161c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161cc:	b087      	sub	sp, #28
 80161ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80161d0:	468b      	mov	fp, r1
 80161d2:	9204      	str	r2, [sp, #16]
 80161d4:	6841      	ldr	r1, [r0, #4]
 80161d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80161da:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80161de:	9205      	str	r2, [sp, #20]
 80161e0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80161e4:	fb01 2404 	mla	r4, r1, r4, r2
 80161e8:	6802      	ldr	r2, [r0, #0]
 80161ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80161ee:	f8dc 2000 	ldr.w	r2, [ip]
 80161f2:	9201      	str	r2, [sp, #4]
 80161f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80161f8:	3204      	adds	r2, #4
 80161fa:	9202      	str	r2, [sp, #8]
 80161fc:	f1bb 0f00 	cmp.w	fp, #0
 8016200:	dc03      	bgt.n	801620a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016202:	9a04      	ldr	r2, [sp, #16]
 8016204:	2a00      	cmp	r2, #0
 8016206:	f340 8138 	ble.w	801647a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801620a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801620c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8016210:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016216:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801621a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801621e:	2b00      	cmp	r3, #0
 8016220:	dd0e      	ble.n	8016240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016222:	1402      	asrs	r2, r0, #16
 8016224:	d405      	bmi.n	8016232 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016226:	42ba      	cmp	r2, r7
 8016228:	da03      	bge.n	8016232 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801622a:	140a      	asrs	r2, r1, #16
 801622c:	d401      	bmi.n	8016232 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801622e:	42b2      	cmp	r2, r6
 8016230:	db07      	blt.n	8016242 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016234:	3b01      	subs	r3, #1
 8016236:	4410      	add	r0, r2
 8016238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801623a:	3402      	adds	r4, #2
 801623c:	4411      	add	r1, r2
 801623e:	e7ee      	b.n	801621e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016240:	d019      	beq.n	8016276 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016242:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016244:	1e5a      	subs	r2, r3, #1
 8016246:	fb05 0502 	mla	r5, r5, r2, r0
 801624a:	142d      	asrs	r5, r5, #16
 801624c:	d409      	bmi.n	8016262 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801624e:	42bd      	cmp	r5, r7
 8016250:	da07      	bge.n	8016262 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016252:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016254:	fb05 1202 	mla	r2, r5, r2, r1
 8016258:	1412      	asrs	r2, r2, #16
 801625a:	d402      	bmi.n	8016262 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801625c:	42b2      	cmp	r2, r6
 801625e:	f2c0 80ac 	blt.w	80163ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8016262:	f04f 0e00 	mov.w	lr, #0
 8016266:	eb03 020e 	add.w	r2, r3, lr
 801626a:	2a00      	cmp	r2, #0
 801626c:	dc3e      	bgt.n	80162ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801626e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016272:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016276:	f1bb 0f00 	cmp.w	fp, #0
 801627a:	f340 80fe 	ble.w	801647a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801627e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016282:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016286:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801628a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801628e:	eeb0 6a62 	vmov.f32	s12, s5
 8016292:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016296:	ee77 2a62 	vsub.f32	s5, s14, s5
 801629a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801629e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80162a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80162aa:	eeb0 6a43 	vmov.f32	s12, s6
 80162ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80162b2:	ee12 2a90 	vmov	r2, s5
 80162b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80162ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80162c4:	ee13 2a10 	vmov	r2, s6
 80162c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80162ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162cc:	f1bb 0b01 	subs.w	fp, fp, #1
 80162d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80162d4:	9a04      	ldr	r2, [sp, #16]
 80162d6:	9314      	str	r3, [sp, #80]	; 0x50
 80162d8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80162dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162de:	eeb0 3a67 	vmov.f32	s6, s15
 80162e2:	bf08      	it	eq
 80162e4:	4613      	moveq	r3, r2
 80162e6:	eef0 2a47 	vmov.f32	s5, s14
 80162ea:	e787      	b.n	80161fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80162ec:	1406      	asrs	r6, r0, #16
 80162ee:	d45d      	bmi.n	80163ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80162f0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80162f4:	42b5      	cmp	r5, r6
 80162f6:	dd59      	ble.n	80163ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80162f8:	140f      	asrs	r7, r1, #16
 80162fa:	d457      	bmi.n	80163ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80162fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016300:	42ba      	cmp	r2, r7
 8016302:	dd53      	ble.n	80163ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016304:	9a01      	ldr	r2, [sp, #4]
 8016306:	b22d      	sxth	r5, r5
 8016308:	fb07 2505 	mla	r5, r7, r5, r2
 801630c:	5daa      	ldrb	r2, [r5, r6]
 801630e:	9d02      	ldr	r5, [sp, #8]
 8016310:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016314:	0e2e      	lsrs	r6, r5, #24
 8016316:	d049      	beq.n	80163ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016318:	f06f 0201 	mvn.w	r2, #1
 801631c:	fb02 f20e 	mul.w	r2, r2, lr
 8016320:	f834 8002 	ldrh.w	r8, [r4, r2]
 8016324:	9203      	str	r2, [sp, #12]
 8016326:	9a05      	ldr	r2, [sp, #20]
 8016328:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801632c:	4356      	muls	r6, r2
 801632e:	1c72      	adds	r2, r6, #1
 8016330:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016334:	1212      	asrs	r2, r2, #8
 8016336:	fa1f f982 	uxth.w	r9, r2
 801633a:	43d2      	mvns	r2, r2
 801633c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016340:	fb16 f609 	smulbb	r6, r6, r9
 8016344:	b2ed      	uxtb	r5, r5
 8016346:	ea4f 2728 	mov.w	r7, r8, asr #8
 801634a:	fb15 f509 	smulbb	r5, r5, r9
 801634e:	b2d2      	uxtb	r2, r2
 8016350:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016354:	fb07 6702 	mla	r7, r7, r2, r6
 8016358:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801635c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016360:	fb1a fa09 	smulbb	sl, sl, r9
 8016364:	fa5f f888 	uxtb.w	r8, r8
 8016368:	fb08 5502 	mla	r5, r8, r2, r5
 801636c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016370:	fb06 a602 	mla	r6, r6, r2, sl
 8016374:	b2bf      	uxth	r7, r7
 8016376:	b2ad      	uxth	r5, r5
 8016378:	1c7a      	adds	r2, r7, #1
 801637a:	f105 0a01 	add.w	sl, r5, #1
 801637e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016382:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016386:	b2b6      	uxth	r6, r6
 8016388:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801638c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016390:	ea4a 0707 	orr.w	r7, sl, r7
 8016394:	f106 0a01 	add.w	sl, r6, #1
 8016398:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801639c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80163a0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80163a4:	9a03      	ldr	r2, [sp, #12]
 80163a6:	ea47 070a 	orr.w	r7, r7, sl
 80163aa:	52a7      	strh	r7, [r4, r2]
 80163ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80163ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80163b2:	4410      	add	r0, r2
 80163b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80163b6:	4411      	add	r1, r2
 80163b8:	e755      	b.n	8016266 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80163ba:	f04f 0800 	mov.w	r8, #0
 80163be:	eba3 0208 	sub.w	r2, r3, r8
 80163c2:	2a00      	cmp	r2, #0
 80163c4:	f77f af53 	ble.w	801626e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80163c8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80163cc:	9f01      	ldr	r7, [sp, #4]
 80163ce:	140a      	asrs	r2, r1, #16
 80163d0:	fb06 7202 	mla	r2, r6, r2, r7
 80163d4:	1405      	asrs	r5, r0, #16
 80163d6:	5d52      	ldrb	r2, [r2, r5]
 80163d8:	9d02      	ldr	r5, [sp, #8]
 80163da:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80163de:	0e2e      	lsrs	r6, r5, #24
 80163e0:	d044      	beq.n	801646c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80163e2:	9a05      	ldr	r2, [sp, #20]
 80163e4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80163e8:	4356      	muls	r6, r2
 80163ea:	1c72      	adds	r2, r6, #1
 80163ec:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80163f0:	1212      	asrs	r2, r2, #8
 80163f2:	fa1f f982 	uxth.w	r9, r2
 80163f6:	43d2      	mvns	r2, r2
 80163f8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80163fc:	fb16 f609 	smulbb	r6, r6, r9
 8016400:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016404:	b2ed      	uxtb	r5, r5
 8016406:	ea4f 272e 	mov.w	r7, lr, asr #8
 801640a:	fb15 f509 	smulbb	r5, r5, r9
 801640e:	b2d2      	uxtb	r2, r2
 8016410:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016414:	fb07 6702 	mla	r7, r7, r2, r6
 8016418:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801641c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016420:	fb1a fa09 	smulbb	sl, sl, r9
 8016424:	fa5f fe8e 	uxtb.w	lr, lr
 8016428:	fb0e 5502 	mla	r5, lr, r2, r5
 801642c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016430:	fb06 a602 	mla	r6, r6, r2, sl
 8016434:	b2bf      	uxth	r7, r7
 8016436:	b2ad      	uxth	r5, r5
 8016438:	1c7a      	adds	r2, r7, #1
 801643a:	f105 0a01 	add.w	sl, r5, #1
 801643e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016442:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016446:	b2b6      	uxth	r6, r6
 8016448:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801644c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016450:	ea4a 0707 	orr.w	r7, sl, r7
 8016454:	f106 0a01 	add.w	sl, r6, #1
 8016458:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801645c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016460:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016464:	ea47 070a 	orr.w	r7, r7, sl
 8016468:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801646c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801646e:	f108 0801 	add.w	r8, r8, #1
 8016472:	4410      	add	r0, r2
 8016474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016476:	4411      	add	r1, r2
 8016478:	e7a1      	b.n	80163be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801647a:	b007      	add	sp, #28
 801647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016480 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016488:	b085      	sub	sp, #20
 801648a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801648c:	468b      	mov	fp, r1
 801648e:	6841      	ldr	r1, [r0, #4]
 8016490:	9203      	str	r2, [sp, #12]
 8016492:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016496:	fb01 2404 	mla	r4, r1, r4, r2
 801649a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801649e:	6802      	ldr	r2, [r0, #0]
 80164a0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80164a4:	f8de 2000 	ldr.w	r2, [lr]
 80164a8:	9200      	str	r2, [sp, #0]
 80164aa:	f8de 2004 	ldr.w	r2, [lr, #4]
 80164ae:	3204      	adds	r2, #4
 80164b0:	9201      	str	r2, [sp, #4]
 80164b2:	f1bb 0f00 	cmp.w	fp, #0
 80164b6:	dc03      	bgt.n	80164c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80164b8:	9a03      	ldr	r2, [sp, #12]
 80164ba:	2a00      	cmp	r2, #0
 80164bc:	f340 8153 	ble.w	8016766 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80164c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164c2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80164c6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80164ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80164cc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80164d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	dd0e      	ble.n	80164f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80164d8:	1408      	asrs	r0, r1, #16
 80164da:	d405      	bmi.n	80164e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80164dc:	42b8      	cmp	r0, r7
 80164de:	da03      	bge.n	80164e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80164e0:	1410      	asrs	r0, r2, #16
 80164e2:	d401      	bmi.n	80164e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80164e4:	42b0      	cmp	r0, r6
 80164e6:	db07      	blt.n	80164f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80164e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80164ea:	3b01      	subs	r3, #1
 80164ec:	4401      	add	r1, r0
 80164ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80164f0:	3402      	adds	r4, #2
 80164f2:	4402      	add	r2, r0
 80164f4:	e7ee      	b.n	80164d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80164f6:	d017      	beq.n	8016528 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80164f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80164fa:	1e58      	subs	r0, r3, #1
 80164fc:	fb05 1500 	mla	r5, r5, r0, r1
 8016500:	142d      	asrs	r5, r5, #16
 8016502:	d409      	bmi.n	8016518 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016504:	42bd      	cmp	r5, r7
 8016506:	da07      	bge.n	8016518 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016508:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801650a:	fb05 2000 	mla	r0, r5, r0, r2
 801650e:	1400      	asrs	r0, r0, #16
 8016510:	d402      	bmi.n	8016518 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016512:	42b0      	cmp	r0, r6
 8016514:	f2c0 80bc 	blt.w	8016690 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8016518:	2600      	movs	r6, #0
 801651a:	1998      	adds	r0, r3, r6
 801651c:	2800      	cmp	r0, #0
 801651e:	dc3e      	bgt.n	801659e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8016520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016524:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016528:	f1bb 0f00 	cmp.w	fp, #0
 801652c:	f340 811b 	ble.w	8016766 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8016530:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016534:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016538:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801653c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016540:	eeb0 6a62 	vmov.f32	s12, s5
 8016544:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016548:	ee77 2a62 	vsub.f32	s5, s14, s5
 801654c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016550:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016554:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016558:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801655c:	eeb0 6a43 	vmov.f32	s12, s6
 8016560:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016564:	ee12 2a90 	vmov	r2, s5
 8016568:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801656c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801656e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016572:	fb92 f3f3 	sdiv	r3, r2, r3
 8016576:	ee13 2a10 	vmov	r2, s6
 801657a:	9311      	str	r3, [sp, #68]	; 0x44
 801657c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801657e:	f1bb 0b01 	subs.w	fp, fp, #1
 8016582:	fb92 f3f3 	sdiv	r3, r2, r3
 8016586:	9a03      	ldr	r2, [sp, #12]
 8016588:	9312      	str	r3, [sp, #72]	; 0x48
 801658a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801658e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016590:	eeb0 3a67 	vmov.f32	s6, s15
 8016594:	bf08      	it	eq
 8016596:	4613      	moveq	r3, r2
 8016598:	eef0 2a47 	vmov.f32	s5, s14
 801659c:	e789      	b.n	80164b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801659e:	140f      	asrs	r7, r1, #16
 80165a0:	d426      	bmi.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80165a2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80165a6:	42bd      	cmp	r5, r7
 80165a8:	dd22      	ble.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80165aa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80165ae:	d41f      	bmi.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80165b0:	f8de 000c 	ldr.w	r0, [lr, #12]
 80165b4:	4560      	cmp	r0, ip
 80165b6:	dd1b      	ble.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80165b8:	9800      	ldr	r0, [sp, #0]
 80165ba:	b22d      	sxth	r5, r5
 80165bc:	fb0c 0505 	mla	r5, ip, r5, r0
 80165c0:	5de8      	ldrb	r0, [r5, r7]
 80165c2:	9d01      	ldr	r5, [sp, #4]
 80165c4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80165c8:	0e07      	lsrs	r7, r0, #24
 80165ca:	2fff      	cmp	r7, #255	; 0xff
 80165cc:	d116      	bne.n	80165fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80165ce:	f06f 0501 	mvn.w	r5, #1
 80165d2:	fb05 f706 	mul.w	r7, r5, r6
 80165d6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80165da:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80165de:	0945      	lsrs	r5, r0, #5
 80165e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80165e4:	ea4c 0505 	orr.w	r5, ip, r5
 80165e8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80165ec:	4305      	orrs	r5, r0
 80165ee:	53e5      	strh	r5, [r4, r7]
 80165f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80165f2:	3e01      	subs	r6, #1
 80165f4:	4401      	add	r1, r0
 80165f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80165f8:	4402      	add	r2, r0
 80165fa:	e78e      	b.n	801651a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80165fc:	b2fd      	uxtb	r5, r7
 80165fe:	2f00      	cmp	r7, #0
 8016600:	d0f6      	beq.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016602:	f06f 0701 	mvn.w	r7, #1
 8016606:	fa1f f985 	uxth.w	r9, r5
 801660a:	43ed      	mvns	r5, r5
 801660c:	4377      	muls	r7, r6
 801660e:	f834 8007 	ldrh.w	r8, [r4, r7]
 8016612:	9702      	str	r7, [sp, #8]
 8016614:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016618:	fb17 f709 	smulbb	r7, r7, r9
 801661c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8016620:	b2c0      	uxtb	r0, r0
 8016622:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8016626:	fb10 f009 	smulbb	r0, r0, r9
 801662a:	b2ed      	uxtb	r5, r5
 801662c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016630:	fb0c 7c05 	mla	ip, ip, r5, r7
 8016634:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8016638:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801663c:	fb1a fa09 	smulbb	sl, sl, r9
 8016640:	fa5f f888 	uxtb.w	r8, r8
 8016644:	fb08 0005 	mla	r0, r8, r5, r0
 8016648:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801664c:	fb07 a705 	mla	r7, r7, r5, sl
 8016650:	b280      	uxth	r0, r0
 8016652:	fa1f fc8c 	uxth.w	ip, ip
 8016656:	f100 0a01 	add.w	sl, r0, #1
 801665a:	f10c 0501 	add.w	r5, ip, #1
 801665e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8016662:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016666:	b2bf      	uxth	r7, r7
 8016668:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801666c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016670:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016674:	f107 0a01 	add.w	sl, r7, #1
 8016678:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801667c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016680:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016684:	9802      	ldr	r0, [sp, #8]
 8016686:	ea4c 0c0a 	orr.w	ip, ip, sl
 801668a:	f824 c000 	strh.w	ip, [r4, r0]
 801668e:	e7af      	b.n	80165f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8016690:	f04f 0800 	mov.w	r8, #0
 8016694:	eba3 0008 	sub.w	r0, r3, r8
 8016698:	2800      	cmp	r0, #0
 801669a:	f77f af41 	ble.w	8016520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801669e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80166a2:	9f00      	ldr	r7, [sp, #0]
 80166a4:	1410      	asrs	r0, r2, #16
 80166a6:	fb06 7000 	mla	r0, r6, r0, r7
 80166aa:	140d      	asrs	r5, r1, #16
 80166ac:	5d40      	ldrb	r0, [r0, r5]
 80166ae:	9d01      	ldr	r5, [sp, #4]
 80166b0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80166b4:	0e2e      	lsrs	r6, r5, #24
 80166b6:	2eff      	cmp	r6, #255	; 0xff
 80166b8:	d112      	bne.n	80166e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80166ba:	482c      	ldr	r0, [pc, #176]	; (801676c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80166bc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80166c0:	0968      	lsrs	r0, r5, #5
 80166c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80166c6:	4330      	orrs	r0, r6
 80166c8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80166cc:	4328      	orrs	r0, r5
 80166ce:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80166d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80166d4:	f108 0801 	add.w	r8, r8, #1
 80166d8:	4401      	add	r1, r0
 80166da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80166dc:	4402      	add	r2, r0
 80166de:	e7d9      	b.n	8016694 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80166e0:	b2f0      	uxtb	r0, r6
 80166e2:	2e00      	cmp	r6, #0
 80166e4:	d0f5      	beq.n	80166d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80166e6:	fa1f f980 	uxth.w	r9, r0
 80166ea:	43c0      	mvns	r0, r0
 80166ec:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80166f0:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80166f4:	fb16 f609 	smulbb	r6, r6, r9
 80166f8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80166fc:	b2ed      	uxtb	r5, r5
 80166fe:	ea4f 272c 	mov.w	r7, ip, asr #8
 8016702:	fb15 f509 	smulbb	r5, r5, r9
 8016706:	b2c0      	uxtb	r0, r0
 8016708:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801670c:	fb07 6700 	mla	r7, r7, r0, r6
 8016710:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8016714:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016718:	fb1a fa09 	smulbb	sl, sl, r9
 801671c:	fa5f fc8c 	uxtb.w	ip, ip
 8016720:	fb0c 5500 	mla	r5, ip, r0, r5
 8016724:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016728:	fb06 a600 	mla	r6, r6, r0, sl
 801672c:	b2bf      	uxth	r7, r7
 801672e:	b2ad      	uxth	r5, r5
 8016730:	1c78      	adds	r0, r7, #1
 8016732:	f105 0a01 	add.w	sl, r5, #1
 8016736:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801673a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801673e:	b2b6      	uxth	r6, r6
 8016740:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016744:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016748:	ea4a 0707 	orr.w	r7, sl, r7
 801674c:	f106 0a01 	add.w	sl, r6, #1
 8016750:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016754:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016758:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801675c:	ea47 070a 	orr.w	r7, r7, sl
 8016760:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8016764:	e7b5      	b.n	80166d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8016766:	b005      	add	sp, #20
 8016768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676c:	fffff800 	.word	0xfffff800

08016770 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016778:	b087      	sub	sp, #28
 801677a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801677c:	468b      	mov	fp, r1
 801677e:	9204      	str	r2, [sp, #16]
 8016780:	6861      	ldr	r1, [r4, #4]
 8016782:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016786:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801678a:	9205      	str	r2, [sp, #20]
 801678c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8016790:	fb01 2000 	mla	r0, r1, r0, r2
 8016794:	6822      	ldr	r2, [r4, #0]
 8016796:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801679a:	f8de 2000 	ldr.w	r2, [lr]
 801679e:	9201      	str	r2, [sp, #4]
 80167a0:	f8de 2004 	ldr.w	r2, [lr, #4]
 80167a4:	9202      	str	r2, [sp, #8]
 80167a6:	f1bb 0f00 	cmp.w	fp, #0
 80167aa:	dc03      	bgt.n	80167b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80167ac:	9a04      	ldr	r2, [sp, #16]
 80167ae:	2a00      	cmp	r2, #0
 80167b0:	f340 8142 	ble.w	8016a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80167b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80167b6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80167ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80167be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167c0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80167c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	dd0e      	ble.n	80167ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80167cc:	140c      	asrs	r4, r1, #16
 80167ce:	d405      	bmi.n	80167dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80167d0:	42bc      	cmp	r4, r7
 80167d2:	da03      	bge.n	80167dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80167d4:	1414      	asrs	r4, r2, #16
 80167d6:	d401      	bmi.n	80167dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80167d8:	42b4      	cmp	r4, r6
 80167da:	db07      	blt.n	80167ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80167dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80167de:	3b01      	subs	r3, #1
 80167e0:	4421      	add	r1, r4
 80167e2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80167e4:	3002      	adds	r0, #2
 80167e6:	4422      	add	r2, r4
 80167e8:	e7ee      	b.n	80167c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80167ea:	d019      	beq.n	8016820 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80167ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80167ee:	1e5c      	subs	r4, r3, #1
 80167f0:	fb05 1504 	mla	r5, r5, r4, r1
 80167f4:	142d      	asrs	r5, r5, #16
 80167f6:	d409      	bmi.n	801680c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80167f8:	42bd      	cmp	r5, r7
 80167fa:	da07      	bge.n	801680c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80167fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80167fe:	fb05 2404 	mla	r4, r5, r4, r2
 8016802:	1424      	asrs	r4, r4, #16
 8016804:	d402      	bmi.n	801680c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016806:	42b4      	cmp	r4, r6
 8016808:	f2c0 80b1 	blt.w	801696e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801680c:	f04f 0800 	mov.w	r8, #0
 8016810:	eb03 0408 	add.w	r4, r3, r8
 8016814:	2c00      	cmp	r4, #0
 8016816:	dc3e      	bgt.n	8016896 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801681c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016820:	f1bb 0f00 	cmp.w	fp, #0
 8016824:	f340 8108 	ble.w	8016a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8016828:	ee30 0a04 	vadd.f32	s0, s0, s8
 801682c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016830:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016834:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016838:	eeb0 6a62 	vmov.f32	s12, s5
 801683c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016840:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016844:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016848:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801684c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016850:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016854:	eeb0 6a43 	vmov.f32	s12, s6
 8016858:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801685c:	ee12 2a90 	vmov	r2, s5
 8016860:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016866:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801686a:	fb92 f3f3 	sdiv	r3, r2, r3
 801686e:	ee13 2a10 	vmov	r2, s6
 8016872:	9313      	str	r3, [sp, #76]	; 0x4c
 8016874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016876:	f1bb 0b01 	subs.w	fp, fp, #1
 801687a:	fb92 f3f3 	sdiv	r3, r2, r3
 801687e:	9a04      	ldr	r2, [sp, #16]
 8016880:	9314      	str	r3, [sp, #80]	; 0x50
 8016882:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016888:	eeb0 3a67 	vmov.f32	s6, s15
 801688c:	bf08      	it	eq
 801688e:	4613      	moveq	r3, r2
 8016890:	eef0 2a47 	vmov.f32	s5, s14
 8016894:	e787      	b.n	80167a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016896:	140e      	asrs	r6, r1, #16
 8016898:	d462      	bmi.n	8016960 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801689a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801689e:	42b5      	cmp	r5, r6
 80168a0:	dd5e      	ble.n	8016960 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80168a2:	1417      	asrs	r7, r2, #16
 80168a4:	d45c      	bmi.n	8016960 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80168a6:	f8de 400c 	ldr.w	r4, [lr, #12]
 80168aa:	42bc      	cmp	r4, r7
 80168ac:	dd58      	ble.n	8016960 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80168ae:	b22d      	sxth	r5, r5
 80168b0:	fb07 6505 	mla	r5, r7, r5, r6
 80168b4:	9c02      	ldr	r4, [sp, #8]
 80168b6:	5d66      	ldrb	r6, [r4, r5]
 80168b8:	2e00      	cmp	r6, #0
 80168ba:	d051      	beq.n	8016960 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80168bc:	9c01      	ldr	r4, [sp, #4]
 80168be:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80168c2:	f06f 0401 	mvn.w	r4, #1
 80168c6:	fb04 f408 	mul.w	r4, r4, r8
 80168ca:	5b05      	ldrh	r5, [r0, r4]
 80168cc:	9403      	str	r4, [sp, #12]
 80168ce:	9c05      	ldr	r4, [sp, #20]
 80168d0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80168d4:	4366      	muls	r6, r4
 80168d6:	1c74      	adds	r4, r6, #1
 80168d8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80168dc:	1224      	asrs	r4, r4, #8
 80168de:	b2a7      	uxth	r7, r4
 80168e0:	43e4      	mvns	r4, r4
 80168e2:	122e      	asrs	r6, r5, #8
 80168e4:	b2e4      	uxtb	r4, r4
 80168e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80168ea:	fb16 f604 	smulbb	r6, r6, r4
 80168ee:	00ed      	lsls	r5, r5, #3
 80168f0:	b2ed      	uxtb	r5, r5
 80168f2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80168f6:	fb15 f504 	smulbb	r5, r5, r4
 80168fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80168fe:	fb0c 6c07 	mla	ip, ip, r7, r6
 8016902:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8016906:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801690a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801690e:	fb1a fa04 	smulbb	sl, sl, r4
 8016912:	fa5f f989 	uxtb.w	r9, r9
 8016916:	fb09 5507 	mla	r5, r9, r7, r5
 801691a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801691e:	fb06 a607 	mla	r6, r6, r7, sl
 8016922:	fa1f fc8c 	uxth.w	ip, ip
 8016926:	b2ad      	uxth	r5, r5
 8016928:	f10c 0401 	add.w	r4, ip, #1
 801692c:	f105 0a01 	add.w	sl, r5, #1
 8016930:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8016934:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016938:	b2b6      	uxth	r6, r6
 801693a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801693e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016942:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016946:	f106 0a01 	add.w	sl, r6, #1
 801694a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801694e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016952:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016956:	9c03      	ldr	r4, [sp, #12]
 8016958:	ea4c 0c0a 	orr.w	ip, ip, sl
 801695c:	f820 c004 	strh.w	ip, [r0, r4]
 8016960:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016962:	f108 38ff 	add.w	r8, r8, #4294967295
 8016966:	4421      	add	r1, r4
 8016968:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801696a:	4422      	add	r2, r4
 801696c:	e750      	b.n	8016810 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801696e:	f04f 0900 	mov.w	r9, #0
 8016972:	eba3 0409 	sub.w	r4, r3, r9
 8016976:	2c00      	cmp	r4, #0
 8016978:	f77f af4e 	ble.w	8016818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801697c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8016980:	140d      	asrs	r5, r1, #16
 8016982:	1414      	asrs	r4, r2, #16
 8016984:	fb06 5404 	mla	r4, r6, r4, r5
 8016988:	9d02      	ldr	r5, [sp, #8]
 801698a:	5d2e      	ldrb	r6, [r5, r4]
 801698c:	2e00      	cmp	r6, #0
 801698e:	d04c      	beq.n	8016a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016990:	9d01      	ldr	r5, [sp, #4]
 8016992:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8016996:	9c05      	ldr	r4, [sp, #20]
 8016998:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801699c:	4366      	muls	r6, r4
 801699e:	1c74      	adds	r4, r6, #1
 80169a0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80169a4:	1224      	asrs	r4, r4, #8
 80169a6:	b2a7      	uxth	r7, r4
 80169a8:	43e4      	mvns	r4, r4
 80169aa:	122e      	asrs	r6, r5, #8
 80169ac:	b2e4      	uxtb	r4, r4
 80169ae:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80169b2:	fb16 f604 	smulbb	r6, r6, r4
 80169b6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80169ba:	00ed      	lsls	r5, r5, #3
 80169bc:	b2ed      	uxtb	r5, r5
 80169be:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80169c2:	fb15 f504 	smulbb	r5, r5, r4
 80169c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80169ca:	fb0c 6c07 	mla	ip, ip, r7, r6
 80169ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80169d2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80169d6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80169da:	fb1a fa04 	smulbb	sl, sl, r4
 80169de:	fa5f f888 	uxtb.w	r8, r8
 80169e2:	fb08 5507 	mla	r5, r8, r7, r5
 80169e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80169ea:	fb06 a607 	mla	r6, r6, r7, sl
 80169ee:	fa1f fc8c 	uxth.w	ip, ip
 80169f2:	b2ad      	uxth	r5, r5
 80169f4:	f10c 0401 	add.w	r4, ip, #1
 80169f8:	f105 0a01 	add.w	sl, r5, #1
 80169fc:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8016a00:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016a04:	b2b6      	uxth	r6, r6
 8016a06:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016a0a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016a0e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016a12:	f106 0a01 	add.w	sl, r6, #1
 8016a16:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016a1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016a1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016a22:	ea4c 0c0a 	orr.w	ip, ip, sl
 8016a26:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8016a2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016a2c:	f109 0901 	add.w	r9, r9, #1
 8016a30:	4421      	add	r1, r4
 8016a32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016a34:	4422      	add	r2, r4
 8016a36:	e79c      	b.n	8016972 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8016a38:	b007      	add	sp, #28
 8016a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a3e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a46:	b085      	sub	sp, #20
 8016a48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016a4a:	468b      	mov	fp, r1
 8016a4c:	6861      	ldr	r1, [r4, #4]
 8016a4e:	9203      	str	r2, [sp, #12]
 8016a50:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8016a54:	fb01 2000 	mla	r0, r1, r0, r2
 8016a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016a5c:	6822      	ldr	r2, [r4, #0]
 8016a5e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8016a62:	f8d8 2000 	ldr.w	r2, [r8]
 8016a66:	9200      	str	r2, [sp, #0]
 8016a68:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016a6c:	9201      	str	r2, [sp, #4]
 8016a6e:	f1bb 0f00 	cmp.w	fp, #0
 8016a72:	dc03      	bgt.n	8016a7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8016a74:	9a03      	ldr	r2, [sp, #12]
 8016a76:	2a00      	cmp	r2, #0
 8016a78:	f340 8146 	ble.w	8016d08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8016a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a7e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8016a82:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016a86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a88:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8016a8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	dd0e      	ble.n	8016ab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016a94:	140c      	asrs	r4, r1, #16
 8016a96:	d405      	bmi.n	8016aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016a98:	42bc      	cmp	r4, r7
 8016a9a:	da03      	bge.n	8016aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016a9c:	1414      	asrs	r4, r2, #16
 8016a9e:	d401      	bmi.n	8016aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016aa0:	42b4      	cmp	r4, r6
 8016aa2:	db07      	blt.n	8016ab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016aa4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016aa6:	3b01      	subs	r3, #1
 8016aa8:	4421      	add	r1, r4
 8016aaa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016aac:	3002      	adds	r0, #2
 8016aae:	4422      	add	r2, r4
 8016ab0:	e7ee      	b.n	8016a90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8016ab2:	d017      	beq.n	8016ae4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016ab4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016ab6:	1e5c      	subs	r4, r3, #1
 8016ab8:	fb05 1504 	mla	r5, r5, r4, r1
 8016abc:	142d      	asrs	r5, r5, #16
 8016abe:	d409      	bmi.n	8016ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016ac0:	42bd      	cmp	r5, r7
 8016ac2:	da07      	bge.n	8016ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016ac4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016ac6:	fb05 2404 	mla	r4, r5, r4, r2
 8016aca:	1424      	asrs	r4, r4, #16
 8016acc:	d402      	bmi.n	8016ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016ace:	42b4      	cmp	r4, r6
 8016ad0:	f2c0 80b3 	blt.w	8016c3a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8016ad4:	2600      	movs	r6, #0
 8016ad6:	199c      	adds	r4, r3, r6
 8016ad8:	2c00      	cmp	r4, #0
 8016ada:	dc3e      	bgt.n	8016b5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016adc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ae0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016ae4:	f1bb 0f00 	cmp.w	fp, #0
 8016ae8:	f340 810e 	ble.w	8016d08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8016aec:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016af0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016af4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016af8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016afc:	eeb0 6a62 	vmov.f32	s12, s5
 8016b00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b14:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016b18:	eeb0 6a43 	vmov.f32	s12, s6
 8016b1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b20:	ee12 2a90 	vmov	r2, s5
 8016b24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b32:	ee13 2a10 	vmov	r2, s6
 8016b36:	9311      	str	r3, [sp, #68]	; 0x44
 8016b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b3a:	f1bb 0b01 	subs.w	fp, fp, #1
 8016b3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b42:	9a03      	ldr	r2, [sp, #12]
 8016b44:	9312      	str	r3, [sp, #72]	; 0x48
 8016b46:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b4c:	eeb0 3a67 	vmov.f32	s6, s15
 8016b50:	bf08      	it	eq
 8016b52:	4613      	moveq	r3, r2
 8016b54:	eef0 2a47 	vmov.f32	s5, s14
 8016b58:	e789      	b.n	8016a6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8016b5a:	140f      	asrs	r7, r1, #16
 8016b5c:	d418      	bmi.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016b5e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016b62:	42bd      	cmp	r5, r7
 8016b64:	dd14      	ble.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016b66:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016b6a:	d411      	bmi.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016b6c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8016b70:	4564      	cmp	r4, ip
 8016b72:	dd0d      	ble.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016b74:	b22d      	sxth	r5, r5
 8016b76:	fb0c 7505 	mla	r5, ip, r5, r7
 8016b7a:	9c01      	ldr	r4, [sp, #4]
 8016b7c:	5d64      	ldrb	r4, [r4, r5]
 8016b7e:	2cff      	cmp	r4, #255	; 0xff
 8016b80:	d10c      	bne.n	8016b9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8016b82:	9c00      	ldr	r4, [sp, #0]
 8016b84:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8016b88:	f06f 0401 	mvn.w	r4, #1
 8016b8c:	4374      	muls	r4, r6
 8016b8e:	5305      	strh	r5, [r0, r4]
 8016b90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016b92:	3e01      	subs	r6, #1
 8016b94:	4421      	add	r1, r4
 8016b96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016b98:	4422      	add	r2, r4
 8016b9a:	e79c      	b.n	8016ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016b9c:	2c00      	cmp	r4, #0
 8016b9e:	d0f7      	beq.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016ba0:	9f00      	ldr	r7, [sp, #0]
 8016ba2:	fa1f fc84 	uxth.w	ip, r4
 8016ba6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8016baa:	f06f 0501 	mvn.w	r5, #1
 8016bae:	43e4      	mvns	r4, r4
 8016bb0:	4375      	muls	r5, r6
 8016bb2:	9502      	str	r5, [sp, #8]
 8016bb4:	5b45      	ldrh	r5, [r0, r5]
 8016bb6:	b2e4      	uxtb	r4, r4
 8016bb8:	122f      	asrs	r7, r5, #8
 8016bba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016bbe:	fb17 f704 	smulbb	r7, r7, r4
 8016bc2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8016bc6:	00ed      	lsls	r5, r5, #3
 8016bc8:	b2ed      	uxtb	r5, r5
 8016bca:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8016bce:	fb15 f504 	smulbb	r5, r5, r4
 8016bd2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8016bd6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8016bda:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8016bde:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8016be2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8016be6:	fb1a fa04 	smulbb	sl, sl, r4
 8016bea:	fa5f f989 	uxtb.w	r9, r9
 8016bee:	fb09 550c 	mla	r5, r9, ip, r5
 8016bf2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016bf6:	fb07 a70c 	mla	r7, r7, ip, sl
 8016bfa:	fa1f fe8e 	uxth.w	lr, lr
 8016bfe:	b2ad      	uxth	r5, r5
 8016c00:	f10e 0401 	add.w	r4, lr, #1
 8016c04:	f105 0a01 	add.w	sl, r5, #1
 8016c08:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8016c0c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016c10:	b2bf      	uxth	r7, r7
 8016c12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016c16:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8016c1a:	ea4a 0e0e 	orr.w	lr, sl, lr
 8016c1e:	f107 0a01 	add.w	sl, r7, #1
 8016c22:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8016c26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016c2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016c2e:	9c02      	ldr	r4, [sp, #8]
 8016c30:	ea4e 0e0a 	orr.w	lr, lr, sl
 8016c34:	f820 e004 	strh.w	lr, [r0, r4]
 8016c38:	e7aa      	b.n	8016b90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016c3a:	f04f 0900 	mov.w	r9, #0
 8016c3e:	eba3 0409 	sub.w	r4, r3, r9
 8016c42:	2c00      	cmp	r4, #0
 8016c44:	f77f af4a 	ble.w	8016adc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016c48:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8016c4c:	1414      	asrs	r4, r2, #16
 8016c4e:	140d      	asrs	r5, r1, #16
 8016c50:	fb06 5504 	mla	r5, r6, r4, r5
 8016c54:	9c01      	ldr	r4, [sp, #4]
 8016c56:	5d64      	ldrb	r4, [r4, r5]
 8016c58:	2cff      	cmp	r4, #255	; 0xff
 8016c5a:	d10b      	bne.n	8016c74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8016c5c:	9c00      	ldr	r4, [sp, #0]
 8016c5e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8016c62:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8016c66:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016c68:	f109 0901 	add.w	r9, r9, #1
 8016c6c:	4421      	add	r1, r4
 8016c6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016c70:	4422      	add	r2, r4
 8016c72:	e7e4      	b.n	8016c3e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8016c74:	2c00      	cmp	r4, #0
 8016c76:	d0f6      	beq.n	8016c66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8016c78:	b2a7      	uxth	r7, r4
 8016c7a:	43e4      	mvns	r4, r4
 8016c7c:	9e00      	ldr	r6, [sp, #0]
 8016c7e:	b2e4      	uxtb	r4, r4
 8016c80:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8016c84:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8016c88:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016c8c:	122e      	asrs	r6, r5, #8
 8016c8e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8016c92:	fb16 f604 	smulbb	r6, r6, r4
 8016c96:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8016c9a:	00ed      	lsls	r5, r5, #3
 8016c9c:	b2ed      	uxtb	r5, r5
 8016c9e:	fb15 f504 	smulbb	r5, r5, r4
 8016ca2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016ca6:	fb0c 6c07 	mla	ip, ip, r7, r6
 8016caa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8016cae:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016cb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016cb6:	fb1a fa04 	smulbb	sl, sl, r4
 8016cba:	fa5f fe8e 	uxtb.w	lr, lr
 8016cbe:	fb0e 5507 	mla	r5, lr, r7, r5
 8016cc2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016cc6:	fb06 a607 	mla	r6, r6, r7, sl
 8016cca:	fa1f fc8c 	uxth.w	ip, ip
 8016cce:	b2ad      	uxth	r5, r5
 8016cd0:	f10c 0401 	add.w	r4, ip, #1
 8016cd4:	f105 0a01 	add.w	sl, r5, #1
 8016cd8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8016cdc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016ce0:	b2b6      	uxth	r6, r6
 8016ce2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016ce6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016cea:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016cee:	f106 0a01 	add.w	sl, r6, #1
 8016cf2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016cf6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016cfa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016cfe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8016d02:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8016d06:	e7ae      	b.n	8016c66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8016d08:	b005      	add	sp, #20
 8016d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d12:	b085      	sub	sp, #20
 8016d14:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016d16:	9100      	str	r1, [sp, #0]
 8016d18:	9203      	str	r2, [sp, #12]
 8016d1a:	6841      	ldr	r1, [r0, #4]
 8016d1c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016d20:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8016d24:	9201      	str	r2, [sp, #4]
 8016d26:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016d2a:	fb01 2404 	mla	r4, r1, r4, r2
 8016d2e:	6802      	ldr	r2, [r0, #0]
 8016d30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016d34:	f8de 2000 	ldr.w	r2, [lr]
 8016d38:	9202      	str	r2, [sp, #8]
 8016d3a:	9a01      	ldr	r2, [sp, #4]
 8016d3c:	43d6      	mvns	r6, r2
 8016d3e:	b2f6      	uxtb	r6, r6
 8016d40:	9a00      	ldr	r2, [sp, #0]
 8016d42:	2a00      	cmp	r2, #0
 8016d44:	dc03      	bgt.n	8016d4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016d46:	9a03      	ldr	r2, [sp, #12]
 8016d48:	2a00      	cmp	r2, #0
 8016d4a:	f340 8124 	ble.w	8016f96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d50:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016d54:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016d58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d5a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016d5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	dd0e      	ble.n	8016d84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016d66:	1408      	asrs	r0, r1, #16
 8016d68:	d405      	bmi.n	8016d76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d6a:	4560      	cmp	r0, ip
 8016d6c:	da03      	bge.n	8016d76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d6e:	1410      	asrs	r0, r2, #16
 8016d70:	d401      	bmi.n	8016d76 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d72:	42b8      	cmp	r0, r7
 8016d74:	db07      	blt.n	8016d86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016d76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	4401      	add	r1, r0
 8016d7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016d7e:	3402      	adds	r4, #2
 8016d80:	4402      	add	r2, r0
 8016d82:	e7ee      	b.n	8016d62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016d84:	d06e      	beq.n	8016e64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016d86:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016d88:	1e58      	subs	r0, r3, #1
 8016d8a:	fb05 1500 	mla	r5, r5, r0, r1
 8016d8e:	142d      	asrs	r5, r5, #16
 8016d90:	d45c      	bmi.n	8016e4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016d92:	4565      	cmp	r5, ip
 8016d94:	da5a      	bge.n	8016e4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016d96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016d98:	fb05 2000 	mla	r0, r5, r0, r2
 8016d9c:	1400      	asrs	r0, r0, #16
 8016d9e:	d455      	bmi.n	8016e4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016da0:	42b8      	cmp	r0, r7
 8016da2:	da53      	bge.n	8016e4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016da4:	4699      	mov	r9, r3
 8016da6:	46a2      	mov	sl, r4
 8016da8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8016dac:	f1b9 0f00 	cmp.w	r9, #0
 8016db0:	dd54      	ble.n	8016e5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8016db2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016db6:	140d      	asrs	r5, r1, #16
 8016db8:	1410      	asrs	r0, r2, #16
 8016dba:	fb07 5000 	mla	r0, r7, r0, r5
 8016dbe:	9d02      	ldr	r5, [sp, #8]
 8016dc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016dc4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016dc8:	f8ba 5000 	ldrh.w	r5, [sl]
 8016dcc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016dd0:	122f      	asrs	r7, r5, #8
 8016dd2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016dd6:	fb17 f706 	smulbb	r7, r7, r6
 8016dda:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8016dde:	00ed      	lsls	r5, r5, #3
 8016de0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016de4:	b2ed      	uxtb	r5, r5
 8016de6:	fb18 f806 	smulbb	r8, r8, r6
 8016dea:	fb15 f506 	smulbb	r5, r5, r6
 8016dee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016df2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8016df6:	10c7      	asrs	r7, r0, #3
 8016df8:	00c0      	lsls	r0, r0, #3
 8016dfa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016dfe:	b2c0      	uxtb	r0, r0
 8016e00:	fb07 870b 	mla	r7, r7, fp, r8
 8016e04:	fb00 500b 	mla	r0, r0, fp, r5
 8016e08:	fa1f fc8c 	uxth.w	ip, ip
 8016e0c:	b280      	uxth	r0, r0
 8016e0e:	b2bf      	uxth	r7, r7
 8016e10:	f10c 0501 	add.w	r5, ip, #1
 8016e14:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016e18:	f107 0801 	add.w	r8, r7, #1
 8016e1c:	1c45      	adds	r5, r0, #1
 8016e1e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016e22:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016e26:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016e28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016e2c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016e30:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016e34:	ea45 0c0c 	orr.w	ip, r5, ip
 8016e38:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016e3c:	4401      	add	r1, r0
 8016e3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016e40:	ea4c 0c08 	orr.w	ip, ip, r8
 8016e44:	f82a cb02 	strh.w	ip, [sl], #2
 8016e48:	4402      	add	r2, r0
 8016e4a:	e7af      	b.n	8016dac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016e4c:	f04f 0800 	mov.w	r8, #0
 8016e50:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8016e54:	eb03 0008 	add.w	r0, r3, r8
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	dc41      	bgt.n	8016ee0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8016e5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e60:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016e64:	9b00      	ldr	r3, [sp, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f340 8095 	ble.w	8016f96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016e7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e80:	eef0 6a62 	vmov.f32	s13, s5
 8016e84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016e94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e98:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8016e9c:	eef0 6a43 	vmov.f32	s13, s6
 8016ea0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016ea4:	ee12 2a90 	vmov	r2, s5
 8016ea8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016eae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016eb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016eb6:	ee13 2a10 	vmov	r2, s6
 8016eba:	9311      	str	r3, [sp, #68]	; 0x44
 8016ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ebe:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8016ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ec6:	9312      	str	r3, [sp, #72]	; 0x48
 8016ec8:	9b00      	ldr	r3, [sp, #0]
 8016eca:	9a03      	ldr	r2, [sp, #12]
 8016ecc:	3b01      	subs	r3, #1
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	eeb0 3a67 	vmov.f32	s6, s15
 8016ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ed6:	eef0 2a47 	vmov.f32	s5, s14
 8016eda:	bf08      	it	eq
 8016edc:	4613      	moveq	r3, r2
 8016ede:	e72f      	b.n	8016d40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8016ee0:	140f      	asrs	r7, r1, #16
 8016ee2:	d451      	bmi.n	8016f88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016ee4:	f8de 5008 	ldr.w	r5, [lr, #8]
 8016ee8:	42bd      	cmp	r5, r7
 8016eea:	dd4d      	ble.n	8016f88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016eec:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016ef0:	d44a      	bmi.n	8016f88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016ef2:	f8de 000c 	ldr.w	r0, [lr, #12]
 8016ef6:	4560      	cmp	r0, ip
 8016ef8:	dd46      	ble.n	8016f88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016efa:	b22d      	sxth	r5, r5
 8016efc:	fb0c 7505 	mla	r5, ip, r5, r7
 8016f00:	9802      	ldr	r0, [sp, #8]
 8016f02:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8016f06:	f06f 0501 	mvn.w	r5, #1
 8016f0a:	fb05 fb08 	mul.w	fp, r5, r8
 8016f0e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8016f12:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016f16:	122f      	asrs	r7, r5, #8
 8016f18:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016f1c:	fb17 f706 	smulbb	r7, r7, r6
 8016f20:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016f24:	00ed      	lsls	r5, r5, #3
 8016f26:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8016f2a:	b2ed      	uxtb	r5, r5
 8016f2c:	fb19 f906 	smulbb	r9, r9, r6
 8016f30:	fb15 f506 	smulbb	r5, r5, r6
 8016f34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016f38:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8016f3c:	10c7      	asrs	r7, r0, #3
 8016f3e:	00c0      	lsls	r0, r0, #3
 8016f40:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016f44:	b2c0      	uxtb	r0, r0
 8016f46:	fb07 970a 	mla	r7, r7, sl, r9
 8016f4a:	fb00 500a 	mla	r0, r0, sl, r5
 8016f4e:	fa1f fc8c 	uxth.w	ip, ip
 8016f52:	b2bf      	uxth	r7, r7
 8016f54:	b280      	uxth	r0, r0
 8016f56:	f10c 0501 	add.w	r5, ip, #1
 8016f5a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016f5e:	f107 0901 	add.w	r9, r7, #1
 8016f62:	1c45      	adds	r5, r0, #1
 8016f64:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016f68:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8016f6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016f70:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016f74:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8016f78:	ea45 0c0c 	orr.w	ip, r5, ip
 8016f7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8016f80:	ea4c 0c09 	orr.w	ip, ip, r9
 8016f84:	f824 c00b 	strh.w	ip, [r4, fp]
 8016f88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016f8e:	4401      	add	r1, r0
 8016f90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016f92:	4402      	add	r2, r0
 8016f94:	e75e      	b.n	8016e54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016f96:	b005      	add	sp, #20
 8016f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa4:	b085      	sub	sp, #20
 8016fa6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016fa8:	4693      	mov	fp, r2
 8016faa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016fae:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8016fb2:	6870      	ldr	r0, [r6, #4]
 8016fb4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016fb6:	fb00 2404 	mla	r4, r0, r4, r2
 8016fba:	6832      	ldr	r2, [r6, #0]
 8016fbc:	9101      	str	r1, [sp, #4]
 8016fbe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016fc2:	682a      	ldr	r2, [r5, #0]
 8016fc4:	9202      	str	r2, [sp, #8]
 8016fc6:	9a01      	ldr	r2, [sp, #4]
 8016fc8:	2a00      	cmp	r2, #0
 8016fca:	dc03      	bgt.n	8016fd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016fcc:	f1bb 0f00 	cmp.w	fp, #0
 8016fd0:	f340 809a 	ble.w	8017108 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016fd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fd6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016fda:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016fde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fe0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8016fe4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	dd0c      	ble.n	8017006 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016fec:	1406      	asrs	r6, r0, #16
 8016fee:	d405      	bmi.n	8016ffc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016ff0:	454e      	cmp	r6, r9
 8016ff2:	da03      	bge.n	8016ffc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016ff4:	1416      	asrs	r6, r2, #16
 8016ff6:	d401      	bmi.n	8016ffc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016ff8:	4546      	cmp	r6, r8
 8016ffa:	db05      	blt.n	8017008 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016ffc:	4470      	add	r0, lr
 8016ffe:	4462      	add	r2, ip
 8017000:	3b01      	subs	r3, #1
 8017002:	3402      	adds	r4, #2
 8017004:	e7f0      	b.n	8016fe8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017006:	d00f      	beq.n	8017028 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8017008:	1e5e      	subs	r6, r3, #1
 801700a:	fb0e 0706 	mla	r7, lr, r6, r0
 801700e:	143f      	asrs	r7, r7, #16
 8017010:	d541      	bpl.n	8017096 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8017012:	4698      	mov	r8, r3
 8017014:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017018:	9603      	str	r6, [sp, #12]
 801701a:	f1b8 0f00 	cmp.w	r8, #0
 801701e:	dc56      	bgt.n	80170ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8017020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017024:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017028:	9b01      	ldr	r3, [sp, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	dd6c      	ble.n	8017108 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801702e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017032:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017036:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801703a:	eeb0 6a62 	vmov.f32	s12, s5
 801703e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017042:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017046:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801704a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801704e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017052:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017056:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801705a:	eeb0 6a43 	vmov.f32	s12, s6
 801705e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017062:	ee12 2a90 	vmov	r2, s5
 8017066:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801706a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801706c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017070:	fb92 fef3 	sdiv	lr, r2, r3
 8017074:	ee13 2a10 	vmov	r2, s6
 8017078:	fb92 fcf3 	sdiv	ip, r2, r3
 801707c:	9b01      	ldr	r3, [sp, #4]
 801707e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017082:	3b01      	subs	r3, #1
 8017084:	9301      	str	r3, [sp, #4]
 8017086:	eeb0 3a67 	vmov.f32	s6, s15
 801708a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801708c:	eef0 2a47 	vmov.f32	s5, s14
 8017090:	bf08      	it	eq
 8017092:	465b      	moveq	r3, fp
 8017094:	e797      	b.n	8016fc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8017096:	454f      	cmp	r7, r9
 8017098:	dabb      	bge.n	8017012 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801709a:	fb0c 2606 	mla	r6, ip, r6, r2
 801709e:	1436      	asrs	r6, r6, #16
 80170a0:	d4b7      	bmi.n	8017012 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80170a2:	4546      	cmp	r6, r8
 80170a4:	dab5      	bge.n	8017012 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80170a6:	461e      	mov	r6, r3
 80170a8:	46a0      	mov	r8, r4
 80170aa:	2e00      	cmp	r6, #0
 80170ac:	ddb8      	ble.n	8017020 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80170ae:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80170b2:	1417      	asrs	r7, r2, #16
 80170b4:	ea4f 4920 	mov.w	r9, r0, asr #16
 80170b8:	fb0a 9707 	mla	r7, sl, r7, r9
 80170bc:	9902      	ldr	r1, [sp, #8]
 80170be:	4470      	add	r0, lr
 80170c0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80170c4:	4462      	add	r2, ip
 80170c6:	f828 7b02 	strh.w	r7, [r8], #2
 80170ca:	3e01      	subs	r6, #1
 80170cc:	e7ed      	b.n	80170aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80170ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 80170d2:	d414      	bmi.n	80170fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80170d4:	68ae      	ldr	r6, [r5, #8]
 80170d6:	454e      	cmp	r6, r9
 80170d8:	dd11      	ble.n	80170fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80170da:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80170de:	d40e      	bmi.n	80170fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80170e0:	68ef      	ldr	r7, [r5, #12]
 80170e2:	4557      	cmp	r7, sl
 80170e4:	dd0b      	ble.n	80170fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80170e6:	f06f 0101 	mvn.w	r1, #1
 80170ea:	b236      	sxth	r6, r6
 80170ec:	fb0a 9606 	mla	r6, sl, r6, r9
 80170f0:	9f02      	ldr	r7, [sp, #8]
 80170f2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80170f6:	fb01 f608 	mul.w	r6, r1, r8
 80170fa:	9903      	ldr	r1, [sp, #12]
 80170fc:	538f      	strh	r7, [r1, r6]
 80170fe:	4470      	add	r0, lr
 8017100:	4462      	add	r2, ip
 8017102:	f108 38ff 	add.w	r8, r8, #4294967295
 8017106:	e788      	b.n	801701a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017108:	b005      	add	sp, #20
 801710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801710e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017116:	b087      	sub	sp, #28
 8017118:	9815      	ldr	r0, [sp, #84]	; 0x54
 801711a:	468b      	mov	fp, r1
 801711c:	9203      	str	r2, [sp, #12]
 801711e:	6841      	ldr	r1, [r0, #4]
 8017120:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017124:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8017128:	9204      	str	r2, [sp, #16]
 801712a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801712e:	fb01 2505 	mla	r5, r1, r5, r2
 8017132:	6802      	ldr	r2, [r0, #0]
 8017134:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8017138:	f8d9 2000 	ldr.w	r2, [r9]
 801713c:	9201      	str	r2, [sp, #4]
 801713e:	f1bb 0f00 	cmp.w	fp, #0
 8017142:	dc03      	bgt.n	801714c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017144:	9a03      	ldr	r2, [sp, #12]
 8017146:	2a00      	cmp	r2, #0
 8017148:	f340 8159 	ble.w	80173fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801714c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801714e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8017152:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017158:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801715c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017160:	2b00      	cmp	r3, #0
 8017162:	dd0e      	ble.n	8017182 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017164:	1402      	asrs	r2, r0, #16
 8017166:	d405      	bmi.n	8017174 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017168:	42ba      	cmp	r2, r7
 801716a:	da03      	bge.n	8017174 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801716c:	140a      	asrs	r2, r1, #16
 801716e:	d401      	bmi.n	8017174 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017170:	42b2      	cmp	r2, r6
 8017172:	db07      	blt.n	8017184 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017174:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017176:	3b01      	subs	r3, #1
 8017178:	4410      	add	r0, r2
 801717a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801717c:	3502      	adds	r5, #2
 801717e:	4411      	add	r1, r2
 8017180:	e7ee      	b.n	8017160 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017182:	d017      	beq.n	80171b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017184:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017186:	1e5a      	subs	r2, r3, #1
 8017188:	fb04 0402 	mla	r4, r4, r2, r0
 801718c:	1424      	asrs	r4, r4, #16
 801718e:	d409      	bmi.n	80171a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017190:	42bc      	cmp	r4, r7
 8017192:	da07      	bge.n	80171a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017194:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017196:	fb04 1202 	mla	r2, r4, r2, r1
 801719a:	1412      	asrs	r2, r2, #16
 801719c:	d402      	bmi.n	80171a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801719e:	42b2      	cmp	r2, r6
 80171a0:	f2c0 80bf 	blt.w	8017322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80171a4:	2700      	movs	r7, #0
 80171a6:	19da      	adds	r2, r3, r7
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	dc3e      	bgt.n	801722a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80171ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80171b4:	f1bb 0f00 	cmp.w	fp, #0
 80171b8:	f340 8121 	ble.w	80173fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80171bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80171c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80171c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80171c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80171cc:	eeb0 6a62 	vmov.f32	s12, s5
 80171d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80171d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80171d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80171dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80171e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80171e8:	eeb0 6a43 	vmov.f32	s12, s6
 80171ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80171f0:	ee12 2a90 	vmov	r2, s5
 80171f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80171f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017202:	ee13 2a10 	vmov	r2, s6
 8017206:	9313      	str	r3, [sp, #76]	; 0x4c
 8017208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801720a:	f1bb 0b01 	subs.w	fp, fp, #1
 801720e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017212:	9a03      	ldr	r2, [sp, #12]
 8017214:	9314      	str	r3, [sp, #80]	; 0x50
 8017216:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801721a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801721c:	eeb0 3a67 	vmov.f32	s6, s15
 8017220:	bf08      	it	eq
 8017222:	4613      	moveq	r3, r2
 8017224:	eef0 2a47 	vmov.f32	s5, s14
 8017228:	e789      	b.n	801713e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801722a:	1406      	asrs	r6, r0, #16
 801722c:	d42d      	bmi.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801722e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8017232:	42b4      	cmp	r4, r6
 8017234:	dd29      	ble.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017236:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801723a:	d426      	bmi.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801723c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017240:	4562      	cmp	r2, ip
 8017242:	dd22      	ble.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017244:	b224      	sxth	r4, r4
 8017246:	fb0c 6404 	mla	r4, ip, r4, r6
 801724a:	9a01      	ldr	r2, [sp, #4]
 801724c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8017250:	0e22      	lsrs	r2, r4, #24
 8017252:	d01a      	beq.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017254:	9e04      	ldr	r6, [sp, #16]
 8017256:	4372      	muls	r2, r6
 8017258:	1c56      	adds	r6, r2, #1
 801725a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801725e:	1212      	asrs	r2, r2, #8
 8017260:	0a26      	lsrs	r6, r4, #8
 8017262:	2aff      	cmp	r2, #255	; 0xff
 8017264:	9605      	str	r6, [sp, #20]
 8017266:	d116      	bne.n	8017296 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8017268:	f06f 0201 	mvn.w	r2, #1
 801726c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017270:	fb02 fc07 	mul.w	ip, r2, r7
 8017274:	0962      	lsrs	r2, r4, #5
 8017276:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801727a:	f026 0607 	bic.w	r6, r6, #7
 801727e:	4316      	orrs	r6, r2
 8017280:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017284:	4326      	orrs	r6, r4
 8017286:	f825 600c 	strh.w	r6, [r5, ip]
 801728a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801728c:	3f01      	subs	r7, #1
 801728e:	4410      	add	r0, r2
 8017290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017292:	4411      	add	r1, r2
 8017294:	e787      	b.n	80171a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017296:	f06f 0601 	mvn.w	r6, #1
 801729a:	fa1f fa82 	uxth.w	sl, r2
 801729e:	43d2      	mvns	r2, r2
 80172a0:	437e      	muls	r6, r7
 80172a2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80172a6:	f835 8006 	ldrh.w	r8, [r5, r6]
 80172aa:	fb1c fc0a 	smulbb	ip, ip, sl
 80172ae:	b2e4      	uxtb	r4, r4
 80172b0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80172b4:	fb14 f40a 	smulbb	r4, r4, sl
 80172b8:	b2d2      	uxtb	r2, r2
 80172ba:	9602      	str	r6, [sp, #8]
 80172bc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80172c0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80172c4:	fb0e ce02 	mla	lr, lr, r2, ip
 80172c8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80172cc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80172d0:	fb16 f60a 	smulbb	r6, r6, sl
 80172d4:	fa5f f888 	uxtb.w	r8, r8
 80172d8:	fb08 4402 	mla	r4, r8, r2, r4
 80172dc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80172e0:	fb0c 6c02 	mla	ip, ip, r2, r6
 80172e4:	fa1f fe8e 	uxth.w	lr, lr
 80172e8:	b2a4      	uxth	r4, r4
 80172ea:	f10e 0201 	add.w	r2, lr, #1
 80172ee:	1c66      	adds	r6, r4, #1
 80172f0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80172f4:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80172f8:	fa1f fc8c 	uxth.w	ip, ip
 80172fc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017300:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8017304:	ea46 0e0e 	orr.w	lr, r6, lr
 8017308:	f10c 0601 	add.w	r6, ip, #1
 801730c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8017310:	0976      	lsrs	r6, r6, #5
 8017312:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017316:	9a02      	ldr	r2, [sp, #8]
 8017318:	ea4e 0e06 	orr.w	lr, lr, r6
 801731c:	f825 e002 	strh.w	lr, [r5, r2]
 8017320:	e7b3      	b.n	801728a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017322:	f04f 0800 	mov.w	r8, #0
 8017326:	eba3 0208 	sub.w	r2, r3, r8
 801732a:	2a00      	cmp	r2, #0
 801732c:	f77f af3e 	ble.w	80171ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017330:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8017334:	1404      	asrs	r4, r0, #16
 8017336:	140a      	asrs	r2, r1, #16
 8017338:	fb06 4202 	mla	r2, r6, r2, r4
 801733c:	9c01      	ldr	r4, [sp, #4]
 801733e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8017342:	0e22      	lsrs	r2, r4, #24
 8017344:	d016      	beq.n	8017374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8017346:	9e04      	ldr	r6, [sp, #16]
 8017348:	4372      	muls	r2, r6
 801734a:	1c56      	adds	r6, r2, #1
 801734c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017350:	1212      	asrs	r2, r2, #8
 8017352:	2aff      	cmp	r2, #255	; 0xff
 8017354:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8017358:	d113      	bne.n	8017382 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801735a:	0962      	lsrs	r2, r4, #5
 801735c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017360:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017364:	f026 0607 	bic.w	r6, r6, #7
 8017368:	4316      	orrs	r6, r2
 801736a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801736e:	4326      	orrs	r6, r4
 8017370:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8017374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017376:	f108 0801 	add.w	r8, r8, #1
 801737a:	4410      	add	r0, r2
 801737c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801737e:	4411      	add	r1, r2
 8017380:	e7d1      	b.n	8017326 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8017382:	fa1f fa82 	uxth.w	sl, r2
 8017386:	43d2      	mvns	r2, r2
 8017388:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801738c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8017390:	fb17 f70a 	smulbb	r7, r7, sl
 8017394:	b2e4      	uxtb	r4, r4
 8017396:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801739a:	fb14 f40a 	smulbb	r4, r4, sl
 801739e:	b2d2      	uxtb	r2, r2
 80173a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80173a4:	fb0c 7c02 	mla	ip, ip, r2, r7
 80173a8:	b2f6      	uxtb	r6, r6
 80173aa:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80173ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80173b2:	fb16 f60a 	smulbb	r6, r6, sl
 80173b6:	fa5f fe8e 	uxtb.w	lr, lr
 80173ba:	fb0e 4402 	mla	r4, lr, r2, r4
 80173be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80173c2:	fb07 6702 	mla	r7, r7, r2, r6
 80173c6:	fa1f fc8c 	uxth.w	ip, ip
 80173ca:	b2a4      	uxth	r4, r4
 80173cc:	f10c 0201 	add.w	r2, ip, #1
 80173d0:	1c66      	adds	r6, r4, #1
 80173d2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80173d6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80173da:	b2bf      	uxth	r7, r7
 80173dc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80173e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80173e4:	ea46 0c0c 	orr.w	ip, r6, ip
 80173e8:	1c7e      	adds	r6, r7, #1
 80173ea:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80173ee:	0976      	lsrs	r6, r6, #5
 80173f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80173f4:	ea4c 0c06 	orr.w	ip, ip, r6
 80173f8:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80173fc:	e7ba      	b.n	8017374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80173fe:	b007      	add	sp, #28
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801740c:	b085      	sub	sp, #20
 801740e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017410:	468b      	mov	fp, r1
 8017412:	6841      	ldr	r1, [r0, #4]
 8017414:	9203      	str	r2, [sp, #12]
 8017416:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801741a:	fb01 2404 	mla	r4, r1, r4, r2
 801741e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017422:	6802      	ldr	r2, [r0, #0]
 8017424:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017428:	f8d8 2000 	ldr.w	r2, [r8]
 801742c:	9201      	str	r2, [sp, #4]
 801742e:	f1bb 0f00 	cmp.w	fp, #0
 8017432:	dc03      	bgt.n	801743c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017434:	9a03      	ldr	r2, [sp, #12]
 8017436:	2a00      	cmp	r2, #0
 8017438:	f340 814f 	ble.w	80176da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801743c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801743e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017442:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017448:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801744c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017450:	2b00      	cmp	r3, #0
 8017452:	dd0e      	ble.n	8017472 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017454:	1408      	asrs	r0, r1, #16
 8017456:	d405      	bmi.n	8017464 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017458:	42b8      	cmp	r0, r7
 801745a:	da03      	bge.n	8017464 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801745c:	1410      	asrs	r0, r2, #16
 801745e:	d401      	bmi.n	8017464 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017460:	42b0      	cmp	r0, r6
 8017462:	db07      	blt.n	8017474 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017464:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017466:	3b01      	subs	r3, #1
 8017468:	4401      	add	r1, r0
 801746a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801746c:	3402      	adds	r4, #2
 801746e:	4402      	add	r2, r0
 8017470:	e7ee      	b.n	8017450 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017472:	d017      	beq.n	80174a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017474:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017476:	1e58      	subs	r0, r3, #1
 8017478:	fb05 1500 	mla	r5, r5, r0, r1
 801747c:	142d      	asrs	r5, r5, #16
 801747e:	d409      	bmi.n	8017494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017480:	42bd      	cmp	r5, r7
 8017482:	da07      	bge.n	8017494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017484:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017486:	fb05 2000 	mla	r0, r5, r0, r2
 801748a:	1400      	asrs	r0, r0, #16
 801748c:	d402      	bmi.n	8017494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801748e:	42b0      	cmp	r0, r6
 8017490:	f2c0 80ba 	blt.w	8017608 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8017494:	2600      	movs	r6, #0
 8017496:	1998      	adds	r0, r3, r6
 8017498:	2800      	cmp	r0, #0
 801749a:	dc3e      	bgt.n	801751a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801749c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80174a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80174a4:	f1bb 0f00 	cmp.w	fp, #0
 80174a8:	f340 8117 	ble.w	80176da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80174ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80174b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80174b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80174b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80174bc:	eeb0 6a62 	vmov.f32	s12, s5
 80174c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80174c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80174c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80174cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80174d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80174d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80174d8:	eeb0 6a43 	vmov.f32	s12, s6
 80174dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80174e0:	ee12 2a90 	vmov	r2, s5
 80174e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80174e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80174ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80174f2:	ee13 2a10 	vmov	r2, s6
 80174f6:	9311      	str	r3, [sp, #68]	; 0x44
 80174f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174fa:	f1bb 0b01 	subs.w	fp, fp, #1
 80174fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017502:	9a03      	ldr	r2, [sp, #12]
 8017504:	9312      	str	r3, [sp, #72]	; 0x48
 8017506:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801750a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801750c:	eeb0 3a67 	vmov.f32	s6, s15
 8017510:	bf08      	it	eq
 8017512:	4613      	moveq	r3, r2
 8017514:	eef0 2a47 	vmov.f32	s5, s14
 8017518:	e789      	b.n	801742e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801751a:	140f      	asrs	r7, r1, #16
 801751c:	d424      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801751e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017522:	42bd      	cmp	r5, r7
 8017524:	dd20      	ble.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017526:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801752a:	d41d      	bmi.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801752c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8017530:	4560      	cmp	r0, ip
 8017532:	dd19      	ble.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017534:	b22d      	sxth	r5, r5
 8017536:	fb0c 7505 	mla	r5, ip, r5, r7
 801753a:	9801      	ldr	r0, [sp, #4]
 801753c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017540:	0e07      	lsrs	r7, r0, #24
 8017542:	2fff      	cmp	r7, #255	; 0xff
 8017544:	d116      	bne.n	8017574 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017546:	f06f 0501 	mvn.w	r5, #1
 801754a:	fb05 f706 	mul.w	r7, r5, r6
 801754e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8017552:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8017556:	0945      	lsrs	r5, r0, #5
 8017558:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801755c:	ea4c 0505 	orr.w	r5, ip, r5
 8017560:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8017564:	4305      	orrs	r5, r0
 8017566:	53e5      	strh	r5, [r4, r7]
 8017568:	9811      	ldr	r0, [sp, #68]	; 0x44
 801756a:	3e01      	subs	r6, #1
 801756c:	4401      	add	r1, r0
 801756e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017570:	4402      	add	r2, r0
 8017572:	e790      	b.n	8017496 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017574:	b2fd      	uxtb	r5, r7
 8017576:	2f00      	cmp	r7, #0
 8017578:	d0f6      	beq.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801757a:	f06f 0701 	mvn.w	r7, #1
 801757e:	fa1f f985 	uxth.w	r9, r5
 8017582:	43ed      	mvns	r5, r5
 8017584:	4377      	muls	r7, r6
 8017586:	f834 e007 	ldrh.w	lr, [r4, r7]
 801758a:	9702      	str	r7, [sp, #8]
 801758c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017590:	fb17 f709 	smulbb	r7, r7, r9
 8017594:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017598:	b2c0      	uxtb	r0, r0
 801759a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801759e:	fb10 f009 	smulbb	r0, r0, r9
 80175a2:	b2ed      	uxtb	r5, r5
 80175a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80175a8:	fb0c 7c05 	mla	ip, ip, r5, r7
 80175ac:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80175b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80175b4:	fb1a fa09 	smulbb	sl, sl, r9
 80175b8:	fa5f fe8e 	uxtb.w	lr, lr
 80175bc:	fb0e 0005 	mla	r0, lr, r5, r0
 80175c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80175c4:	fb07 a705 	mla	r7, r7, r5, sl
 80175c8:	b280      	uxth	r0, r0
 80175ca:	fa1f fc8c 	uxth.w	ip, ip
 80175ce:	f100 0a01 	add.w	sl, r0, #1
 80175d2:	f10c 0501 	add.w	r5, ip, #1
 80175d6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80175da:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80175de:	b2bf      	uxth	r7, r7
 80175e0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80175e4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80175e8:	ea4a 0c0c 	orr.w	ip, sl, ip
 80175ec:	f107 0a01 	add.w	sl, r7, #1
 80175f0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80175f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80175f8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80175fc:	9802      	ldr	r0, [sp, #8]
 80175fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017602:	f824 c000 	strh.w	ip, [r4, r0]
 8017606:	e7af      	b.n	8017568 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017608:	f04f 0e00 	mov.w	lr, #0
 801760c:	eba3 000e 	sub.w	r0, r3, lr
 8017610:	2800      	cmp	r0, #0
 8017612:	f77f af43 	ble.w	801749c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017616:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801761a:	140d      	asrs	r5, r1, #16
 801761c:	1410      	asrs	r0, r2, #16
 801761e:	fb06 5000 	mla	r0, r6, r0, r5
 8017622:	9d01      	ldr	r5, [sp, #4]
 8017624:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017628:	0e2e      	lsrs	r6, r5, #24
 801762a:	2eff      	cmp	r6, #255	; 0xff
 801762c:	d112      	bne.n	8017654 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801762e:	482c      	ldr	r0, [pc, #176]	; (80176e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8017630:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017634:	0968      	lsrs	r0, r5, #5
 8017636:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801763a:	4330      	orrs	r0, r6
 801763c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017640:	4328      	orrs	r0, r5
 8017642:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8017646:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017648:	f10e 0e01 	add.w	lr, lr, #1
 801764c:	4401      	add	r1, r0
 801764e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017650:	4402      	add	r2, r0
 8017652:	e7db      	b.n	801760c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017654:	b2f0      	uxtb	r0, r6
 8017656:	2e00      	cmp	r6, #0
 8017658:	d0f5      	beq.n	8017646 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801765a:	fa1f f980 	uxth.w	r9, r0
 801765e:	43c0      	mvns	r0, r0
 8017660:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017664:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8017668:	fb16 f609 	smulbb	r6, r6, r9
 801766c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017670:	b2ed      	uxtb	r5, r5
 8017672:	ea4f 272c 	mov.w	r7, ip, asr #8
 8017676:	fb15 f509 	smulbb	r5, r5, r9
 801767a:	b2c0      	uxtb	r0, r0
 801767c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017680:	fb07 6700 	mla	r7, r7, r0, r6
 8017684:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8017688:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801768c:	fb1a fa09 	smulbb	sl, sl, r9
 8017690:	fa5f fc8c 	uxtb.w	ip, ip
 8017694:	fb0c 5500 	mla	r5, ip, r0, r5
 8017698:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801769c:	fb06 a600 	mla	r6, r6, r0, sl
 80176a0:	b2bf      	uxth	r7, r7
 80176a2:	b2ad      	uxth	r5, r5
 80176a4:	1c78      	adds	r0, r7, #1
 80176a6:	f105 0a01 	add.w	sl, r5, #1
 80176aa:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80176ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80176b2:	b2b6      	uxth	r6, r6
 80176b4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80176b8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80176bc:	ea4a 0707 	orr.w	r7, sl, r7
 80176c0:	f106 0a01 	add.w	sl, r6, #1
 80176c4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80176c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80176cc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80176d0:	ea47 070a 	orr.w	r7, r7, sl
 80176d4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80176d8:	e7b5      	b.n	8017646 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80176da:	b005      	add	sp, #20
 80176dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e0:	fffff800 	.word	0xfffff800

080176e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80176e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	b087      	sub	sp, #28
 80176ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80176f0:	468b      	mov	fp, r1
 80176f2:	9203      	str	r2, [sp, #12]
 80176f4:	6841      	ldr	r1, [r0, #4]
 80176f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80176fa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80176fe:	9204      	str	r2, [sp, #16]
 8017700:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017704:	fb01 2404 	mla	r4, r1, r4, r2
 8017708:	6802      	ldr	r2, [r0, #0]
 801770a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801770e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8017712:	3201      	adds	r2, #1
 8017714:	f022 0201 	bic.w	r2, r2, #1
 8017718:	9200      	str	r2, [sp, #0]
 801771a:	f8d9 2000 	ldr.w	r2, [r9]
 801771e:	9201      	str	r2, [sp, #4]
 8017720:	f1bb 0f00 	cmp.w	fp, #0
 8017724:	dc03      	bgt.n	801772e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017726:	9a03      	ldr	r2, [sp, #12]
 8017728:	2a00      	cmp	r2, #0
 801772a:	f340 816a 	ble.w	8017a02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801772e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017730:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8017734:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017738:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801773a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801773e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017742:	2b00      	cmp	r3, #0
 8017744:	dd0e      	ble.n	8017764 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017746:	1402      	asrs	r2, r0, #16
 8017748:	d405      	bmi.n	8017756 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801774a:	42ba      	cmp	r2, r7
 801774c:	da03      	bge.n	8017756 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801774e:	140a      	asrs	r2, r1, #16
 8017750:	d401      	bmi.n	8017756 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017752:	42b2      	cmp	r2, r6
 8017754:	db07      	blt.n	8017766 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8017756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017758:	3b01      	subs	r3, #1
 801775a:	4410      	add	r0, r2
 801775c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801775e:	3402      	adds	r4, #2
 8017760:	4411      	add	r1, r2
 8017762:	e7ee      	b.n	8017742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017764:	d017      	beq.n	8017796 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017766:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017768:	1e5a      	subs	r2, r3, #1
 801776a:	fb05 0502 	mla	r5, r5, r2, r0
 801776e:	142d      	asrs	r5, r5, #16
 8017770:	d409      	bmi.n	8017786 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017772:	42bd      	cmp	r5, r7
 8017774:	da07      	bge.n	8017786 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017776:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017778:	fb05 1202 	mla	r2, r5, r2, r1
 801777c:	1412      	asrs	r2, r2, #16
 801777e:	d402      	bmi.n	8017786 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017780:	42b2      	cmp	r2, r6
 8017782:	f2c0 80c8 	blt.w	8017916 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017786:	2700      	movs	r7, #0
 8017788:	19da      	adds	r2, r3, r7
 801778a:	2a00      	cmp	r2, #0
 801778c:	dc3e      	bgt.n	801780c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801778e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017792:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017796:	f1bb 0f00 	cmp.w	fp, #0
 801779a:	f340 8132 	ble.w	8017a02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801779e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80177a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80177a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80177aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80177ae:	eeb0 6a62 	vmov.f32	s12, s5
 80177b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80177b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80177ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80177be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80177c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80177c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80177ca:	eeb0 6a43 	vmov.f32	s12, s6
 80177ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80177d2:	ee12 2a90 	vmov	r2, s5
 80177d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80177da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80177e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80177e4:	ee13 2a10 	vmov	r2, s6
 80177e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80177ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177ec:	f1bb 0b01 	subs.w	fp, fp, #1
 80177f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80177f4:	9a03      	ldr	r2, [sp, #12]
 80177f6:	9314      	str	r3, [sp, #80]	; 0x50
 80177f8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80177fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177fe:	eeb0 3a67 	vmov.f32	s6, s15
 8017802:	bf08      	it	eq
 8017804:	4613      	moveq	r3, r2
 8017806:	eef0 2a47 	vmov.f32	s5, s14
 801780a:	e789      	b.n	8017720 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801780c:	1405      	asrs	r5, r0, #16
 801780e:	d436      	bmi.n	801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017810:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8017814:	42aa      	cmp	r2, r5
 8017816:	dd32      	ble.n	801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017818:	140e      	asrs	r6, r1, #16
 801781a:	d430      	bmi.n	801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801781c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017820:	42b2      	cmp	r2, r6
 8017822:	dd2c      	ble.n	801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017824:	9a00      	ldr	r2, [sp, #0]
 8017826:	fb06 5502 	mla	r5, r6, r2, r5
 801782a:	9e01      	ldr	r6, [sp, #4]
 801782c:	086a      	lsrs	r2, r5, #1
 801782e:	5cb2      	ldrb	r2, [r6, r2]
 8017830:	07ee      	lsls	r6, r5, #31
 8017832:	bf54      	ite	pl
 8017834:	f002 020f 	andpl.w	r2, r2, #15
 8017838:	1112      	asrmi	r2, r2, #4
 801783a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801783e:	b2d2      	uxtb	r2, r2
 8017840:	b1ea      	cbz	r2, 801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017842:	9d04      	ldr	r5, [sp, #16]
 8017844:	436a      	muls	r2, r5
 8017846:	1c55      	adds	r5, r2, #1
 8017848:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801784c:	4d6e      	ldr	r5, [pc, #440]	; (8017a08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801784e:	1212      	asrs	r2, r2, #8
 8017850:	682d      	ldr	r5, [r5, #0]
 8017852:	2aff      	cmp	r2, #255	; 0xff
 8017854:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8017858:	9605      	str	r6, [sp, #20]
 801785a:	d116      	bne.n	801788a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801785c:	f06f 0201 	mvn.w	r2, #1
 8017860:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017864:	fb02 fc07 	mul.w	ip, r2, r7
 8017868:	096a      	lsrs	r2, r5, #5
 801786a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801786e:	f026 0607 	bic.w	r6, r6, #7
 8017872:	4316      	orrs	r6, r2
 8017874:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017878:	432e      	orrs	r6, r5
 801787a:	f824 600c 	strh.w	r6, [r4, ip]
 801787e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017880:	3f01      	subs	r7, #1
 8017882:	4410      	add	r0, r2
 8017884:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017886:	4411      	add	r1, r2
 8017888:	e77e      	b.n	8017788 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801788a:	f06f 0601 	mvn.w	r6, #1
 801788e:	fa1f fa82 	uxth.w	sl, r2
 8017892:	43d2      	mvns	r2, r2
 8017894:	437e      	muls	r6, r7
 8017896:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801789a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801789e:	fb1c fc0a 	smulbb	ip, ip, sl
 80178a2:	b2ed      	uxtb	r5, r5
 80178a4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80178a8:	fb15 f50a 	smulbb	r5, r5, sl
 80178ac:	b2d2      	uxtb	r2, r2
 80178ae:	9602      	str	r6, [sp, #8]
 80178b0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80178b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80178b8:	fb0e ce02 	mla	lr, lr, r2, ip
 80178bc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80178c0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80178c4:	fb16 f60a 	smulbb	r6, r6, sl
 80178c8:	fa5f f888 	uxtb.w	r8, r8
 80178cc:	fb08 5502 	mla	r5, r8, r2, r5
 80178d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80178d4:	fb0c 6c02 	mla	ip, ip, r2, r6
 80178d8:	fa1f fe8e 	uxth.w	lr, lr
 80178dc:	b2ad      	uxth	r5, r5
 80178de:	f10e 0201 	add.w	r2, lr, #1
 80178e2:	1c6e      	adds	r6, r5, #1
 80178e4:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80178e8:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80178ec:	fa1f fc8c 	uxth.w	ip, ip
 80178f0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80178f4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80178f8:	ea46 0e0e 	orr.w	lr, r6, lr
 80178fc:	f10c 0601 	add.w	r6, ip, #1
 8017900:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8017904:	0976      	lsrs	r6, r6, #5
 8017906:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801790a:	9a02      	ldr	r2, [sp, #8]
 801790c:	ea4e 0e06 	orr.w	lr, lr, r6
 8017910:	f824 e002 	strh.w	lr, [r4, r2]
 8017914:	e7b3      	b.n	801787e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8017916:	f04f 0800 	mov.w	r8, #0
 801791a:	eba3 0208 	sub.w	r2, r3, r8
 801791e:	2a00      	cmp	r2, #0
 8017920:	f77f af35 	ble.w	801778e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017924:	9e00      	ldr	r6, [sp, #0]
 8017926:	1402      	asrs	r2, r0, #16
 8017928:	140d      	asrs	r5, r1, #16
 801792a:	fb06 2505 	mla	r5, r6, r5, r2
 801792e:	9e01      	ldr	r6, [sp, #4]
 8017930:	086a      	lsrs	r2, r5, #1
 8017932:	5cb2      	ldrb	r2, [r6, r2]
 8017934:	07ed      	lsls	r5, r5, #31
 8017936:	bf54      	ite	pl
 8017938:	f002 020f 	andpl.w	r2, r2, #15
 801793c:	1112      	asrmi	r2, r2, #4
 801793e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017942:	b2d2      	uxtb	r2, r2
 8017944:	b1c2      	cbz	r2, 8017978 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017946:	9d04      	ldr	r5, [sp, #16]
 8017948:	436a      	muls	r2, r5
 801794a:	1c55      	adds	r5, r2, #1
 801794c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8017950:	4d2d      	ldr	r5, [pc, #180]	; (8017a08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8017952:	1212      	asrs	r2, r2, #8
 8017954:	682e      	ldr	r6, [r5, #0]
 8017956:	2aff      	cmp	r2, #255	; 0xff
 8017958:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801795c:	d113      	bne.n	8017986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801795e:	0972      	lsrs	r2, r6, #5
 8017960:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8017964:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017968:	f025 0507 	bic.w	r5, r5, #7
 801796c:	4315      	orrs	r5, r2
 801796e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8017972:	4335      	orrs	r5, r6
 8017974:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8017978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801797a:	f108 0801 	add.w	r8, r8, #1
 801797e:	4410      	add	r0, r2
 8017980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017982:	4411      	add	r1, r2
 8017984:	e7c9      	b.n	801791a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8017986:	fa1f fa82 	uxth.w	sl, r2
 801798a:	43d2      	mvns	r2, r2
 801798c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8017990:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8017994:	fb17 f70a 	smulbb	r7, r7, sl
 8017998:	b2f6      	uxtb	r6, r6
 801799a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801799e:	fb16 f60a 	smulbb	r6, r6, sl
 80179a2:	b2d2      	uxtb	r2, r2
 80179a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80179a8:	fb0c 7c02 	mla	ip, ip, r2, r7
 80179ac:	b2ed      	uxtb	r5, r5
 80179ae:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80179b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80179b6:	fb15 f50a 	smulbb	r5, r5, sl
 80179ba:	fa5f fe8e 	uxtb.w	lr, lr
 80179be:	fb0e 6602 	mla	r6, lr, r2, r6
 80179c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80179c6:	fb07 5702 	mla	r7, r7, r2, r5
 80179ca:	fa1f fc8c 	uxth.w	ip, ip
 80179ce:	b2b6      	uxth	r6, r6
 80179d0:	f10c 0201 	add.w	r2, ip, #1
 80179d4:	1c75      	adds	r5, r6, #1
 80179d6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80179da:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80179de:	b2bf      	uxth	r7, r7
 80179e0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80179e4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80179e8:	ea45 0c0c 	orr.w	ip, r5, ip
 80179ec:	1c7d      	adds	r5, r7, #1
 80179ee:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80179f2:	096d      	lsrs	r5, r5, #5
 80179f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80179f8:	ea4c 0c05 	orr.w	ip, ip, r5
 80179fc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8017a00:	e7ba      	b.n	8017978 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017a02:	b007      	add	sp, #28
 8017a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a08:	2001fda8 	.word	0x2001fda8

08017a0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a14:	b087      	sub	sp, #28
 8017a16:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017a18:	9101      	str	r1, [sp, #4]
 8017a1a:	6841      	ldr	r1, [r0, #4]
 8017a1c:	9205      	str	r2, [sp, #20]
 8017a1e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017a22:	fb01 2404 	mla	r4, r1, r4, r2
 8017a26:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8017a2a:	6802      	ldr	r2, [r0, #0]
 8017a2c:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8017d20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8017a30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017a34:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017a38:	3201      	adds	r2, #1
 8017a3a:	f022 0201 	bic.w	r2, r2, #1
 8017a3e:	9202      	str	r2, [sp, #8]
 8017a40:	f8db 2000 	ldr.w	r2, [fp]
 8017a44:	9203      	str	r2, [sp, #12]
 8017a46:	9a01      	ldr	r2, [sp, #4]
 8017a48:	2a00      	cmp	r2, #0
 8017a4a:	dc03      	bgt.n	8017a54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017a4c:	9a05      	ldr	r2, [sp, #20]
 8017a4e:	2a00      	cmp	r2, #0
 8017a50:	f340 8162 	ble.w	8017d18 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8017a54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a56:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8017a5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017a5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a60:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8017a64:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	dd0e      	ble.n	8017a8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017a6c:	1402      	asrs	r2, r0, #16
 8017a6e:	d405      	bmi.n	8017a7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a70:	42ba      	cmp	r2, r7
 8017a72:	da03      	bge.n	8017a7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a74:	140a      	asrs	r2, r1, #16
 8017a76:	d401      	bmi.n	8017a7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a78:	42b2      	cmp	r2, r6
 8017a7a:	db07      	blt.n	8017a8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a7e:	3b01      	subs	r3, #1
 8017a80:	4410      	add	r0, r2
 8017a82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a84:	3402      	adds	r4, #2
 8017a86:	4411      	add	r1, r2
 8017a88:	e7ee      	b.n	8017a68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017a8a:	d017      	beq.n	8017abc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017a8c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017a8e:	1e5a      	subs	r2, r3, #1
 8017a90:	fb05 0502 	mla	r5, r5, r2, r0
 8017a94:	142d      	asrs	r5, r5, #16
 8017a96:	d409      	bmi.n	8017aac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017a98:	42bd      	cmp	r5, r7
 8017a9a:	da07      	bge.n	8017aac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017a9c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017a9e:	fb05 1202 	mla	r2, r5, r2, r1
 8017aa2:	1412      	asrs	r2, r2, #16
 8017aa4:	d402      	bmi.n	8017aac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017aa6:	42b2      	cmp	r2, r6
 8017aa8:	f2c0 80c3 	blt.w	8017c32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8017aac:	2500      	movs	r5, #0
 8017aae:	195a      	adds	r2, r3, r5
 8017ab0:	2a00      	cmp	r2, #0
 8017ab2:	dc3f      	bgt.n	8017b34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ab8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017abc:	9b01      	ldr	r3, [sp, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	f340 812a 	ble.w	8017d18 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8017ac4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017ac8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017acc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017ad0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017ad4:	eeb0 6a62 	vmov.f32	s12, s5
 8017ad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017adc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017ae0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017ae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ae8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017aec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017af0:	eeb0 6a43 	vmov.f32	s12, s6
 8017af4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017af8:	ee12 2a90 	vmov	r2, s5
 8017afc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b0a:	ee13 2a10 	vmov	r2, s6
 8017b0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b12:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b1a:	9314      	str	r3, [sp, #80]	; 0x50
 8017b1c:	9b01      	ldr	r3, [sp, #4]
 8017b1e:	9a05      	ldr	r2, [sp, #20]
 8017b20:	3b01      	subs	r3, #1
 8017b22:	9301      	str	r3, [sp, #4]
 8017b24:	eeb0 3a67 	vmov.f32	s6, s15
 8017b28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b2a:	eef0 2a47 	vmov.f32	s5, s14
 8017b2e:	bf08      	it	eq
 8017b30:	4613      	moveq	r3, r2
 8017b32:	e788      	b.n	8017a46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017b34:	1406      	asrs	r6, r0, #16
 8017b36:	d42c      	bmi.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017b38:	f8db 2008 	ldr.w	r2, [fp, #8]
 8017b3c:	42b2      	cmp	r2, r6
 8017b3e:	dd28      	ble.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017b40:	140f      	asrs	r7, r1, #16
 8017b42:	d426      	bmi.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017b44:	f8db 200c 	ldr.w	r2, [fp, #12]
 8017b48:	42ba      	cmp	r2, r7
 8017b4a:	dd22      	ble.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017b4c:	9a02      	ldr	r2, [sp, #8]
 8017b4e:	fb07 6602 	mla	r6, r7, r2, r6
 8017b52:	9f03      	ldr	r7, [sp, #12]
 8017b54:	0872      	lsrs	r2, r6, #1
 8017b56:	5cba      	ldrb	r2, [r7, r2]
 8017b58:	07f6      	lsls	r6, r6, #31
 8017b5a:	bf54      	ite	pl
 8017b5c:	f002 020f 	andpl.w	r2, r2, #15
 8017b60:	1112      	asrmi	r2, r2, #4
 8017b62:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017b66:	b2d2      	uxtb	r2, r2
 8017b68:	2aff      	cmp	r2, #255	; 0xff
 8017b6a:	d118      	bne.n	8017b9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8017b6c:	f06f 0601 	mvn.w	r6, #1
 8017b70:	f8d8 2000 	ldr.w	r2, [r8]
 8017b74:	fb06 f705 	mul.w	r7, r6, r5
 8017b78:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8017b7c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8017b80:	0956      	lsrs	r6, r2, #5
 8017b82:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017b86:	ea4c 0606 	orr.w	r6, ip, r6
 8017b8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8017b8e:	4316      	orrs	r6, r2
 8017b90:	53e6      	strh	r6, [r4, r7]
 8017b92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b94:	3d01      	subs	r5, #1
 8017b96:	4410      	add	r0, r2
 8017b98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b9a:	4411      	add	r1, r2
 8017b9c:	e787      	b.n	8017aae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	d0f7      	beq.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017ba2:	f06f 0601 	mvn.w	r6, #1
 8017ba6:	fa1f f982 	uxth.w	r9, r2
 8017baa:	43d2      	mvns	r2, r2
 8017bac:	436e      	muls	r6, r5
 8017bae:	f8d8 c000 	ldr.w	ip, [r8]
 8017bb2:	f834 e006 	ldrh.w	lr, [r4, r6]
 8017bb6:	9604      	str	r6, [sp, #16]
 8017bb8:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8017bbc:	fb16 f609 	smulbb	r6, r6, r9
 8017bc0:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8017bc4:	fa5f fc8c 	uxtb.w	ip, ip
 8017bc8:	ea4f 272e 	mov.w	r7, lr, asr #8
 8017bcc:	fb1c fc09 	smulbb	ip, ip, r9
 8017bd0:	b2d2      	uxtb	r2, r2
 8017bd2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017bd6:	fb07 6702 	mla	r7, r7, r2, r6
 8017bda:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8017bde:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017be2:	fb1a fa09 	smulbb	sl, sl, r9
 8017be6:	fa5f fe8e 	uxtb.w	lr, lr
 8017bea:	fb0e cc02 	mla	ip, lr, r2, ip
 8017bee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017bf2:	fb06 a602 	mla	r6, r6, r2, sl
 8017bf6:	b2bf      	uxth	r7, r7
 8017bf8:	fa1f fc8c 	uxth.w	ip, ip
 8017bfc:	1c7a      	adds	r2, r7, #1
 8017bfe:	f10c 0a01 	add.w	sl, ip, #1
 8017c02:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017c06:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8017c0a:	b2b6      	uxth	r6, r6
 8017c0c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017c10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017c14:	ea4a 0707 	orr.w	r7, sl, r7
 8017c18:	f106 0a01 	add.w	sl, r6, #1
 8017c1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017c20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017c24:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017c28:	9a04      	ldr	r2, [sp, #16]
 8017c2a:	ea47 070a 	orr.w	r7, r7, sl
 8017c2e:	52a7      	strh	r7, [r4, r2]
 8017c30:	e7af      	b.n	8017b92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8017c32:	f04f 0e00 	mov.w	lr, #0
 8017c36:	eba3 020e 	sub.w	r2, r3, lr
 8017c3a:	2a00      	cmp	r2, #0
 8017c3c:	f77f af3a 	ble.w	8017ab4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017c40:	9e02      	ldr	r6, [sp, #8]
 8017c42:	1402      	asrs	r2, r0, #16
 8017c44:	140d      	asrs	r5, r1, #16
 8017c46:	fb06 2505 	mla	r5, r6, r5, r2
 8017c4a:	9e03      	ldr	r6, [sp, #12]
 8017c4c:	086a      	lsrs	r2, r5, #1
 8017c4e:	5cb2      	ldrb	r2, [r6, r2]
 8017c50:	07ed      	lsls	r5, r5, #31
 8017c52:	bf54      	ite	pl
 8017c54:	f002 020f 	andpl.w	r2, r2, #15
 8017c58:	1112      	asrmi	r2, r2, #4
 8017c5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017c5e:	b2d2      	uxtb	r2, r2
 8017c60:	2aff      	cmp	r2, #255	; 0xff
 8017c62:	d115      	bne.n	8017c90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017c64:	f8d8 5000 	ldr.w	r5, [r8]
 8017c68:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8017c6c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8017c70:	096a      	lsrs	r2, r5, #5
 8017c72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017c76:	4332      	orrs	r2, r6
 8017c78:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017c7c:	432a      	orrs	r2, r5
 8017c7e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8017c82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c84:	f10e 0e01 	add.w	lr, lr, #1
 8017c88:	4410      	add	r0, r2
 8017c8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c8c:	4411      	add	r1, r2
 8017c8e:	e7d2      	b.n	8017c36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8017c90:	2a00      	cmp	r2, #0
 8017c92:	d0f6      	beq.n	8017c82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017c94:	fa1f f982 	uxth.w	r9, r2
 8017c98:	43d2      	mvns	r2, r2
 8017c9a:	f8d8 7000 	ldr.w	r7, [r8]
 8017c9e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8017ca2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8017ca6:	fb15 f509 	smulbb	r5, r5, r9
 8017caa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017cae:	b2ff      	uxtb	r7, r7
 8017cb0:	ea4f 262c 	mov.w	r6, ip, asr #8
 8017cb4:	fb17 f709 	smulbb	r7, r7, r9
 8017cb8:	b2d2      	uxtb	r2, r2
 8017cba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017cbe:	fb06 5602 	mla	r6, r6, r2, r5
 8017cc2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8017cc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017cca:	fb1a fa09 	smulbb	sl, sl, r9
 8017cce:	fa5f fc8c 	uxtb.w	ip, ip
 8017cd2:	fb0c 7702 	mla	r7, ip, r2, r7
 8017cd6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8017cda:	fb05 a502 	mla	r5, r5, r2, sl
 8017cde:	b2b6      	uxth	r6, r6
 8017ce0:	b2bf      	uxth	r7, r7
 8017ce2:	1c72      	adds	r2, r6, #1
 8017ce4:	f107 0a01 	add.w	sl, r7, #1
 8017ce8:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8017cec:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017cf0:	b2ad      	uxth	r5, r5
 8017cf2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017cf6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8017cfa:	ea4a 0606 	orr.w	r6, sl, r6
 8017cfe:	f105 0a01 	add.w	sl, r5, #1
 8017d02:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017d06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017d0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017d0e:	ea46 060a 	orr.w	r6, r6, sl
 8017d12:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8017d16:	e7b4      	b.n	8017c82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017d18:	b007      	add	sp, #28
 8017d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1e:	bf00      	nop
 8017d20:	2001fda8 	.word	0x2001fda8

08017d24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017d24:	4770      	bx	lr

08017d26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017d26:	4770      	bx	lr

08017d28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8017d28:	4770      	bx	lr

08017d2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017d2a:	4770      	bx	lr

08017d2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017d2c:	4770      	bx	lr

08017d2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017d2e:	4770      	bx	lr

08017d30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017d30:	4770      	bx	lr

08017d32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017d32:	4770      	bx	lr

08017d34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017d34:	4770      	bx	lr

08017d36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8017d36:	4770      	bx	lr

08017d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017d38:	4770      	bx	lr

08017d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017d3a:	4770      	bx	lr

08017d3c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017d3c:	4770      	bx	lr

08017d3e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8017d3e:	4770      	bx	lr

08017d40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017d40:	4770      	bx	lr

08017d42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017d42:	4770      	bx	lr

08017d44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017d44:	4770      	bx	lr

08017d46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017d46:	4770      	bx	lr

08017d48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017d48:	4770      	bx	lr

08017d4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017d4a:	4770      	bx	lr

08017d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017d4c:	4770      	bx	lr

08017d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017d4e:	4770      	bx	lr

08017d50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017d50:	4770      	bx	lr

08017d52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017d52:	4770      	bx	lr

08017d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017d54:	4770      	bx	lr

08017d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8017d56:	4770      	bx	lr

08017d58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017d58:	4770      	bx	lr

08017d5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8017d5a:	4770      	bx	lr

08017d5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d60:	b088      	sub	sp, #32
 8017d62:	ac08      	add	r4, sp, #32
 8017d64:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017d68:	4606      	mov	r6, r0
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	4688      	mov	r8, r1
 8017d6e:	4691      	mov	r9, r2
 8017d70:	f7fd fc66 	bl	8015640 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017d74:	6833      	ldr	r3, [r6, #0]
 8017d76:	4605      	mov	r5, r0
 8017d78:	4620      	mov	r0, r4
 8017d7a:	699f      	ldr	r7, [r3, #24]
 8017d7c:	f7fd fb74 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017d80:	4682      	mov	sl, r0
 8017d82:	4620      	mov	r0, r4
 8017d84:	f7fd fba4 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017d88:	9500      	str	r5, [sp, #0]
 8017d8a:	e9cd a001 	strd	sl, r0, [sp, #4]
 8017d8e:	464b      	mov	r3, r9
 8017d90:	a806      	add	r0, sp, #24
 8017d92:	4642      	mov	r2, r8
 8017d94:	4631      	mov	r1, r6
 8017d96:	47b8      	blx	r7
 8017d98:	4628      	mov	r0, r5
 8017d9a:	b008      	add	sp, #32
 8017d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017da0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017da4:	2300      	movs	r3, #0
 8017da6:	9300      	str	r3, [sp, #0]
 8017da8:	4b3d      	ldr	r3, [pc, #244]	; (8017ea0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8017daa:	781b      	ldrb	r3, [r3, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d137      	bne.n	8017e20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8017db0:	4a3c      	ldr	r2, [pc, #240]	; (8017ea4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017db2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017db6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d132      	bne.n	8017e24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8017dbe:	4b3a      	ldr	r3, [pc, #232]	; (8017ea8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017dc4:	6808      	ldr	r0, [r1, #0]
 8017dc6:	6849      	ldr	r1, [r1, #4]
 8017dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017dcc:	ac02      	add	r4, sp, #8
 8017dce:	ab02      	add	r3, sp, #8
 8017dd0:	c303      	stmia	r3!, {r0, r1}
 8017dd2:	4669      	mov	r1, sp
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7fa fdb9 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017dda:	4668      	mov	r0, sp
 8017ddc:	f7fa fd8e 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017de0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017de4:	f8bd 2000 	ldrh.w	r2, [sp]
 8017de8:	4d30      	ldr	r5, [pc, #192]	; (8017eac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8017dea:	4413      	add	r3, r2
 8017dec:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017df0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017df4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017df8:	6828      	ldr	r0, [r5, #0]
 8017dfa:	4413      	add	r3, r2
 8017dfc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017e00:	6803      	ldr	r3, [r0, #0]
 8017e02:	462f      	mov	r7, r5
 8017e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e06:	4798      	blx	r3
 8017e08:	f010 0f01 	tst.w	r0, #1
 8017e0c:	d00c      	beq.n	8017e28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8017e0e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017e12:	6828      	ldr	r0, [r5, #0]
 8017e14:	6803      	ldr	r3, [r0, #0]
 8017e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e18:	4798      	blx	r3
 8017e1a:	b004      	add	sp, #16
 8017e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e20:	4a21      	ldr	r2, [pc, #132]	; (8017ea8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017e22:	e7c6      	b.n	8017db2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017e24:	4b1f      	ldr	r3, [pc, #124]	; (8017ea4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017e26:	e7cb      	b.n	8017dc0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017e28:	6838      	ldr	r0, [r7, #0]
 8017e2a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017e2e:	6803      	ldr	r3, [r0, #0]
 8017e30:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8017e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e36:	4798      	blx	r3
 8017e38:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017e3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017e40:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8017e44:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017e48:	fb16 3602 	smlabb	r6, r6, r2, r3
 8017e4c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017e50:	6838      	ldr	r0, [r7, #0]
 8017e52:	6803      	ldr	r3, [r0, #0]
 8017e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e56:	4798      	blx	r3
 8017e58:	4a12      	ldr	r2, [pc, #72]	; (8017ea4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017e5a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8017e5e:	4691      	mov	r9, r2
 8017e60:	8813      	ldrh	r3, [r2, #0]
 8017e62:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8017e66:	435d      	muls	r5, r3
 8017e68:	fb03 1404 	mla	r4, r3, r4, r1
 8017e6c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017e70:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017e74:	6838      	ldr	r0, [r7, #0]
 8017e76:	42ac      	cmp	r4, r5
 8017e78:	6803      	ldr	r3, [r0, #0]
 8017e7a:	d20e      	bcs.n	8017e9a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8017e7c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8017e80:	4632      	mov	r2, r6
 8017e82:	4643      	mov	r3, r8
 8017e84:	4621      	mov	r1, r4
 8017e86:	47d0      	blx	sl
 8017e88:	f8b9 3000 	ldrh.w	r3, [r9]
 8017e8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017e90:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017e94:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8017e98:	e7ec      	b.n	8017e74 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8017e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e9c:	4798      	blx	r3
 8017e9e:	e7bc      	b.n	8017e1a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017ea0:	2001fd98 	.word	0x2001fd98
 8017ea4:	2001fd9a 	.word	0x2001fd9a
 8017ea8:	2001fd9c 	.word	0x2001fd9c
 8017eac:	2001fda0 	.word	0x2001fda0

08017eb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	b08b      	sub	sp, #44	; 0x2c
 8017eb6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8017eba:	460f      	mov	r7, r1
 8017ebc:	4616      	mov	r6, r2
 8017ebe:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8017ec2:	f1bb 0f00 	cmp.w	fp, #0
 8017ec6:	d049      	beq.n	8017f5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8017ec8:	6810      	ldr	r0, [r2, #0]
 8017eca:	6851      	ldr	r1, [r2, #4]
 8017ecc:	ad06      	add	r5, sp, #24
 8017ece:	c503      	stmia	r5!, {r0, r1}
 8017ed0:	6818      	ldr	r0, [r3, #0]
 8017ed2:	6859      	ldr	r1, [r3, #4]
 8017ed4:	ad08      	add	r5, sp, #32
 8017ed6:	c503      	stmia	r5!, {r0, r1}
 8017ed8:	a806      	add	r0, sp, #24
 8017eda:	f7fa fd0f 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ede:	4631      	mov	r1, r6
 8017ee0:	a808      	add	r0, sp, #32
 8017ee2:	f7fa fd33 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ee6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017eea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017eee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017ef2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017ef6:	fb16 2103 	smlabb	r1, r6, r3, r2
 8017efa:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8017efe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017f02:	4f60      	ldr	r7, [pc, #384]	; (8018084 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8017f04:	440a      	add	r2, r1
 8017f06:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017f0a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017f0e:	6838      	ldr	r0, [r7, #0]
 8017f10:	4413      	add	r3, r2
 8017f12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017f16:	6803      	ldr	r3, [r0, #0]
 8017f18:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8017f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f1e:	4798      	blx	r3
 8017f20:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017f24:	46b9      	mov	r9, r7
 8017f26:	d01c      	beq.n	8017f62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8017f28:	f010 0f04 	tst.w	r0, #4
 8017f2c:	d01d      	beq.n	8017f6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8017f2e:	2700      	movs	r7, #0
 8017f30:	f8d9 0000 	ldr.w	r0, [r9]
 8017f34:	b2ad      	uxth	r5, r5
 8017f36:	6801      	ldr	r1, [r0, #0]
 8017f38:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8017f3c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8017f40:	f8cd b00c 	str.w	fp, [sp, #12]
 8017f44:	9402      	str	r4, [sp, #8]
 8017f46:	fa1f f488 	uxth.w	r4, r8
 8017f4a:	9501      	str	r5, [sp, #4]
 8017f4c:	9400      	str	r4, [sp, #0]
 8017f4e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8017f50:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017f54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017f58:	4631      	mov	r1, r6
 8017f5a:	47a0      	blx	r4
 8017f5c:	b00b      	add	sp, #44	; 0x2c
 8017f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f62:	b914      	cbnz	r4, 8017f6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8017f64:	f010 0f01 	tst.w	r0, #1
 8017f68:	e7e0      	b.n	8017f2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8017f6a:	f8d9 0000 	ldr.w	r0, [r9]
 8017f6e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8017f72:	6803      	ldr	r3, [r0, #0]
 8017f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f76:	4798      	blx	r3
 8017f78:	4b43      	ldr	r3, [pc, #268]	; (8018088 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8017f7a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8017f7e:	881a      	ldrh	r2, [r3, #0]
 8017f80:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8017f84:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8017f88:	fb02 1404 	mla	r4, r2, r4, r1
 8017f8c:	469a      	mov	sl, r3
 8017f8e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017f92:	fb05 f502 	mul.w	r5, r5, r2
 8017f96:	d059      	beq.n	801804c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8017f98:	469e      	mov	lr, r3
 8017f9a:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8017f9e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8017fa2:	fa1f f28b 	uxth.w	r2, fp
 8017fa6:	fa1f f989 	uxth.w	r9, r9
 8017faa:	42ac      	cmp	r4, r5
 8017fac:	d264      	bcs.n	8018078 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8017fae:	eb04 0a07 	add.w	sl, r4, r7
 8017fb2:	4554      	cmp	r4, sl
 8017fb4:	d23d      	bcs.n	8018032 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8017fb6:	8821      	ldrh	r1, [r4, #0]
 8017fb8:	f836 3b02 	ldrh.w	r3, [r6], #2
 8017fbc:	1208      	asrs	r0, r1, #8
 8017fbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8017fc2:	fb10 f009 	smulbb	r0, r0, r9
 8017fc6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8017fca:	00c9      	lsls	r1, r1, #3
 8017fcc:	b2c9      	uxtb	r1, r1
 8017fce:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017fd2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8017fd6:	fb11 f109 	smulbb	r1, r1, r9
 8017fda:	fb1b fb09 	smulbb	fp, fp, r9
 8017fde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017fe2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017fe6:	10d8      	asrs	r0, r3, #3
 8017fe8:	00db      	lsls	r3, r3, #3
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017ff0:	fb03 1302 	mla	r3, r3, r2, r1
 8017ff4:	fb00 b002 	mla	r0, r0, r2, fp
 8017ff8:	fa1f fc8c 	uxth.w	ip, ip
 8017ffc:	f10c 0b01 	add.w	fp, ip, #1
 8018000:	b29b      	uxth	r3, r3
 8018002:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018006:	b280      	uxth	r0, r0
 8018008:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801800c:	f103 0c01 	add.w	ip, r3, #1
 8018010:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018014:	1c43      	adds	r3, r0, #1
 8018016:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801801a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801801e:	0940      	lsrs	r0, r0, #5
 8018020:	ea4c 0c0b 	orr.w	ip, ip, fp
 8018024:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018028:	ea4c 0c00 	orr.w	ip, ip, r0
 801802c:	f824 cb02 	strh.w	ip, [r4], #2
 8018030:	e7bf      	b.n	8017fb2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8018032:	f8be 3000 	ldrh.w	r3, [lr]
 8018036:	eba3 0308 	sub.w	r3, r3, r8
 801803a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801803e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018042:	eba3 0308 	sub.w	r3, r3, r8
 8018046:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801804a:	e7ae      	b.n	8017faa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801804c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018050:	f8d9 0000 	ldr.w	r0, [r9]
 8018054:	42ac      	cmp	r4, r5
 8018056:	6803      	ldr	r3, [r0, #0]
 8018058:	d20e      	bcs.n	8018078 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801805a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801805e:	4632      	mov	r2, r6
 8018060:	463b      	mov	r3, r7
 8018062:	4621      	mov	r1, r4
 8018064:	47c0      	blx	r8
 8018066:	f8ba 3000 	ldrh.w	r3, [sl]
 801806a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801806e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018072:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018076:	e7eb      	b.n	8018050 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8018078:	4b02      	ldr	r3, [pc, #8]	; (8018084 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801807a:	6818      	ldr	r0, [r3, #0]
 801807c:	6803      	ldr	r3, [r0, #0]
 801807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018080:	4798      	blx	r3
 8018082:	e76b      	b.n	8017f5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8018084:	2001fda0 	.word	0x2001fda0
 8018088:	2001fd9a 	.word	0x2001fd9a

0801808c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801808c:	b510      	push	{r4, lr}
 801808e:	4604      	mov	r4, r0
 8018090:	2104      	movs	r1, #4
 8018092:	f008 ff9a 	bl	8020fca <_ZdlPvj>
 8018096:	4620      	mov	r0, r4
 8018098:	bd10      	pop	{r4, pc}

0801809a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801809a:	b510      	push	{r4, lr}
 801809c:	4604      	mov	r4, r0
 801809e:	2104      	movs	r1, #4
 80180a0:	f008 ff93 	bl	8020fca <_ZdlPvj>
 80180a4:	4620      	mov	r0, r4
 80180a6:	bd10      	pop	{r4, pc}

080180a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80180a8:	b510      	push	{r4, lr}
 80180aa:	4604      	mov	r4, r0
 80180ac:	2104      	movs	r1, #4
 80180ae:	f008 ff8c 	bl	8020fca <_ZdlPvj>
 80180b2:	4620      	mov	r0, r4
 80180b4:	bd10      	pop	{r4, pc}

080180b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80180b6:	b510      	push	{r4, lr}
 80180b8:	4604      	mov	r4, r0
 80180ba:	2104      	movs	r1, #4
 80180bc:	f008 ff85 	bl	8020fca <_ZdlPvj>
 80180c0:	4620      	mov	r0, r4
 80180c2:	bd10      	pop	{r4, pc}

080180c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	4604      	mov	r4, r0
 80180c8:	2104      	movs	r1, #4
 80180ca:	f008 ff7e 	bl	8020fca <_ZdlPvj>
 80180ce:	4620      	mov	r0, r4
 80180d0:	bd10      	pop	{r4, pc}

080180d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80180d2:	b510      	push	{r4, lr}
 80180d4:	4604      	mov	r4, r0
 80180d6:	2104      	movs	r1, #4
 80180d8:	f008 ff77 	bl	8020fca <_ZdlPvj>
 80180dc:	4620      	mov	r0, r4
 80180de:	bd10      	pop	{r4, pc}

080180e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80180e0:	b510      	push	{r4, lr}
 80180e2:	4604      	mov	r4, r0
 80180e4:	2104      	movs	r1, #4
 80180e6:	f008 ff70 	bl	8020fca <_ZdlPvj>
 80180ea:	4620      	mov	r0, r4
 80180ec:	bd10      	pop	{r4, pc}

080180ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80180ee:	b510      	push	{r4, lr}
 80180f0:	4604      	mov	r4, r0
 80180f2:	2104      	movs	r1, #4
 80180f4:	f008 ff69 	bl	8020fca <_ZdlPvj>
 80180f8:	4620      	mov	r0, r4
 80180fa:	bd10      	pop	{r4, pc}

080180fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80180fc:	b510      	push	{r4, lr}
 80180fe:	4604      	mov	r4, r0
 8018100:	2104      	movs	r1, #4
 8018102:	f008 ff62 	bl	8020fca <_ZdlPvj>
 8018106:	4620      	mov	r0, r4
 8018108:	bd10      	pop	{r4, pc}

0801810a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801810a:	b510      	push	{r4, lr}
 801810c:	4604      	mov	r4, r0
 801810e:	2104      	movs	r1, #4
 8018110:	f008 ff5b 	bl	8020fca <_ZdlPvj>
 8018114:	4620      	mov	r0, r4
 8018116:	bd10      	pop	{r4, pc}

08018118 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018118:	b510      	push	{r4, lr}
 801811a:	4604      	mov	r4, r0
 801811c:	2104      	movs	r1, #4
 801811e:	f008 ff54 	bl	8020fca <_ZdlPvj>
 8018122:	4620      	mov	r0, r4
 8018124:	bd10      	pop	{r4, pc}

08018126 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018126:	b510      	push	{r4, lr}
 8018128:	4604      	mov	r4, r0
 801812a:	2104      	movs	r1, #4
 801812c:	f008 ff4d 	bl	8020fca <_ZdlPvj>
 8018130:	4620      	mov	r0, r4
 8018132:	bd10      	pop	{r4, pc}

08018134 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018134:	b510      	push	{r4, lr}
 8018136:	4604      	mov	r4, r0
 8018138:	2104      	movs	r1, #4
 801813a:	f008 ff46 	bl	8020fca <_ZdlPvj>
 801813e:	4620      	mov	r0, r4
 8018140:	bd10      	pop	{r4, pc}

08018142 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8018142:	b510      	push	{r4, lr}
 8018144:	4604      	mov	r4, r0
 8018146:	2104      	movs	r1, #4
 8018148:	f008 ff3f 	bl	8020fca <_ZdlPvj>
 801814c:	4620      	mov	r0, r4
 801814e:	bd10      	pop	{r4, pc}

08018150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018150:	b510      	push	{r4, lr}
 8018152:	4604      	mov	r4, r0
 8018154:	2104      	movs	r1, #4
 8018156:	f008 ff38 	bl	8020fca <_ZdlPvj>
 801815a:	4620      	mov	r0, r4
 801815c:	bd10      	pop	{r4, pc}

0801815e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801815e:	b510      	push	{r4, lr}
 8018160:	4604      	mov	r4, r0
 8018162:	2104      	movs	r1, #4
 8018164:	f008 ff31 	bl	8020fca <_ZdlPvj>
 8018168:	4620      	mov	r0, r4
 801816a:	bd10      	pop	{r4, pc}

0801816c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801816c:	b510      	push	{r4, lr}
 801816e:	4604      	mov	r4, r0
 8018170:	2104      	movs	r1, #4
 8018172:	f008 ff2a 	bl	8020fca <_ZdlPvj>
 8018176:	4620      	mov	r0, r4
 8018178:	bd10      	pop	{r4, pc}

0801817a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801817a:	b510      	push	{r4, lr}
 801817c:	4604      	mov	r4, r0
 801817e:	2104      	movs	r1, #4
 8018180:	f008 ff23 	bl	8020fca <_ZdlPvj>
 8018184:	4620      	mov	r0, r4
 8018186:	bd10      	pop	{r4, pc}

08018188 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018188:	b510      	push	{r4, lr}
 801818a:	4604      	mov	r4, r0
 801818c:	2104      	movs	r1, #4
 801818e:	f008 ff1c 	bl	8020fca <_ZdlPvj>
 8018192:	4620      	mov	r0, r4
 8018194:	bd10      	pop	{r4, pc}

08018196 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018196:	b510      	push	{r4, lr}
 8018198:	4604      	mov	r4, r0
 801819a:	2104      	movs	r1, #4
 801819c:	f008 ff15 	bl	8020fca <_ZdlPvj>
 80181a0:	4620      	mov	r0, r4
 80181a2:	bd10      	pop	{r4, pc}

080181a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80181a4:	b510      	push	{r4, lr}
 80181a6:	4604      	mov	r4, r0
 80181a8:	2104      	movs	r1, #4
 80181aa:	f008 ff0e 	bl	8020fca <_ZdlPvj>
 80181ae:	4620      	mov	r0, r4
 80181b0:	bd10      	pop	{r4, pc}

080181b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80181b2:	b510      	push	{r4, lr}
 80181b4:	4604      	mov	r4, r0
 80181b6:	2104      	movs	r1, #4
 80181b8:	f008 ff07 	bl	8020fca <_ZdlPvj>
 80181bc:	4620      	mov	r0, r4
 80181be:	bd10      	pop	{r4, pc}

080181c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80181c0:	b510      	push	{r4, lr}
 80181c2:	4604      	mov	r4, r0
 80181c4:	2104      	movs	r1, #4
 80181c6:	f008 ff00 	bl	8020fca <_ZdlPvj>
 80181ca:	4620      	mov	r0, r4
 80181cc:	bd10      	pop	{r4, pc}

080181ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80181ce:	b510      	push	{r4, lr}
 80181d0:	4604      	mov	r4, r0
 80181d2:	2104      	movs	r1, #4
 80181d4:	f008 fef9 	bl	8020fca <_ZdlPvj>
 80181d8:	4620      	mov	r0, r4
 80181da:	bd10      	pop	{r4, pc}

080181dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80181dc:	b510      	push	{r4, lr}
 80181de:	4604      	mov	r4, r0
 80181e0:	2104      	movs	r1, #4
 80181e2:	f008 fef2 	bl	8020fca <_ZdlPvj>
 80181e6:	4620      	mov	r0, r4
 80181e8:	bd10      	pop	{r4, pc}

080181ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80181ea:	b510      	push	{r4, lr}
 80181ec:	4604      	mov	r4, r0
 80181ee:	2104      	movs	r1, #4
 80181f0:	f008 feeb 	bl	8020fca <_ZdlPvj>
 80181f4:	4620      	mov	r0, r4
 80181f6:	bd10      	pop	{r4, pc}

080181f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80181f8:	b510      	push	{r4, lr}
 80181fa:	4604      	mov	r4, r0
 80181fc:	2104      	movs	r1, #4
 80181fe:	f008 fee4 	bl	8020fca <_ZdlPvj>
 8018202:	4620      	mov	r0, r4
 8018204:	bd10      	pop	{r4, pc}

08018206 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8018206:	b510      	push	{r4, lr}
 8018208:	4604      	mov	r4, r0
 801820a:	2104      	movs	r1, #4
 801820c:	f008 fedd 	bl	8020fca <_ZdlPvj>
 8018210:	4620      	mov	r0, r4
 8018212:	bd10      	pop	{r4, pc}

08018214 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018218:	469b      	mov	fp, r3
 801821a:	4616      	mov	r6, r2
 801821c:	b091      	sub	sp, #68	; 0x44
 801821e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018222:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8018226:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801822a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801822e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8018232:	4604      	mov	r4, r0
 8018234:	460d      	mov	r5, r1
 8018236:	4640      	mov	r0, r8
 8018238:	4659      	mov	r1, fp
 801823a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801823e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018242:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8018246:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801824a:	f7f8 fb45 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 801824e:	4631      	mov	r1, r6
 8018250:	4640      	mov	r0, r8
 8018252:	f7f8 fb41 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 8018256:	4b74      	ldr	r3, [pc, #464]	; (8018428 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8018258:	8818      	ldrh	r0, [r3, #0]
 801825a:	4b74      	ldr	r3, [pc, #464]	; (801842c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801825c:	b202      	sxth	r2, r0
 801825e:	8819      	ldrh	r1, [r3, #0]
 8018260:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018264:	b20e      	sxth	r6, r1
 8018266:	2b00      	cmp	r3, #0
 8018268:	da07      	bge.n	801827a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801826a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801826e:	4463      	add	r3, ip
 8018270:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018274:	2300      	movs	r3, #0
 8018276:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801827a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801827e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8018282:	1ad2      	subs	r2, r2, r3
 8018284:	4594      	cmp	ip, r2
 8018286:	bfc4      	itt	gt
 8018288:	1ac2      	subgt	r2, r0, r3
 801828a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801828e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018292:	2a00      	cmp	r2, #0
 8018294:	da07      	bge.n	80182a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8018296:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801829a:	4462      	add	r2, ip
 801829c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80182a0:	2200      	movs	r2, #0
 80182a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80182a6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80182aa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80182ae:	eba6 060a 	sub.w	r6, r6, sl
 80182b2:	42b2      	cmp	r2, r6
 80182b4:	bfc4      	itt	gt
 80182b6:	eba1 020a 	subgt.w	r2, r1, sl
 80182ba:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 80182be:	4a5c      	ldr	r2, [pc, #368]	; (8018430 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80182c0:	7812      	ldrb	r2, [r2, #0]
 80182c2:	b9a2      	cbnz	r2, 80182ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80182c4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80182c8:	4286      	cmp	r6, r0
 80182ca:	4640      	mov	r0, r8
 80182cc:	9303      	str	r3, [sp, #12]
 80182ce:	bf14      	ite	ne
 80182d0:	2600      	movne	r6, #0
 80182d2:	2601      	moveq	r6, #1
 80182d4:	f7f8 fb43 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80182d8:	9b03      	ldr	r3, [sp, #12]
 80182da:	b160      	cbz	r0, 80182f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80182dc:	2300      	movs	r3, #0
 80182de:	8023      	strh	r3, [r4, #0]
 80182e0:	8063      	strh	r3, [r4, #2]
 80182e2:	80a3      	strh	r3, [r4, #4]
 80182e4:	4620      	mov	r0, r4
 80182e6:	80e3      	strh	r3, [r4, #6]
 80182e8:	b011      	add	sp, #68	; 0x44
 80182ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ee:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80182f2:	428e      	cmp	r6, r1
 80182f4:	e7e9      	b.n	80182ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80182f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80182fa:	a90e      	add	r1, sp, #56	; 0x38
 80182fc:	9205      	str	r2, [sp, #20]
 80182fe:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018302:	900e      	str	r0, [sp, #56]	; 0x38
 8018304:	9206      	str	r2, [sp, #24]
 8018306:	f8bb 2000 	ldrh.w	r2, [fp]
 801830a:	a80c      	add	r0, sp, #48	; 0x30
 801830c:	1a9b      	subs	r3, r3, r2
 801830e:	b21b      	sxth	r3, r3
 8018310:	9303      	str	r3, [sp, #12]
 8018312:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018316:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801831a:	ebaa 0a03 	sub.w	sl, sl, r3
 801831e:	fa0f f38a 	sxth.w	r3, sl
 8018322:	9304      	str	r3, [sp, #16]
 8018324:	9b03      	ldr	r3, [sp, #12]
 8018326:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801832a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801832e:	9b04      	ldr	r3, [sp, #16]
 8018330:	f8df b104 	ldr.w	fp, [pc, #260]	; 8018438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018334:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018338:	9b05      	ldr	r3, [sp, #20]
 801833a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801833e:	9b06      	ldr	r3, [sp, #24]
 8018340:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018344:	f7fa fb02 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018348:	4640      	mov	r0, r8
 801834a:	f7fa fad7 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801834e:	a80e      	add	r0, sp, #56	; 0x38
 8018350:	f7fa fad4 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018354:	4b37      	ldr	r3, [pc, #220]	; (8018434 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018356:	4628      	mov	r0, r5
 8018358:	881b      	ldrh	r3, [r3, #0]
 801835a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801835e:	9307      	str	r3, [sp, #28]
 8018360:	682b      	ldr	r3, [r5, #0]
 8018362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018364:	4798      	blx	r3
 8018366:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801836a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801836e:	4681      	mov	r9, r0
 8018370:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8018374:	f8db 0000 	ldr.w	r0, [fp]
 8018378:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801837a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801837e:	6803      	ldr	r3, [r0, #0]
 8018380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018382:	4798      	blx	r3
 8018384:	4607      	mov	r7, r0
 8018386:	f8db 0000 	ldr.w	r0, [fp]
 801838a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801838e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018392:	6803      	ldr	r3, [r0, #0]
 8018394:	9109      	str	r1, [sp, #36]	; 0x24
 8018396:	9208      	str	r2, [sp, #32]
 8018398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801839a:	4798      	blx	r3
 801839c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80183a0:	f010 0f01 	tst.w	r0, #1
 80183a4:	d012      	beq.n	80183cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80183a6:	f8db 0000 	ldr.w	r0, [fp]
 80183aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80183ae:	6803      	ldr	r3, [r0, #0]
 80183b0:	9200      	str	r2, [sp, #0]
 80183b2:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80183b4:	e898 0006 	ldmia.w	r8, {r1, r2}
 80183b8:	462b      	mov	r3, r5
 80183ba:	47b0      	blx	r6
 80183bc:	9b03      	ldr	r3, [sp, #12]
 80183be:	8023      	strh	r3, [r4, #0]
 80183c0:	9b04      	ldr	r3, [sp, #16]
 80183c2:	8063      	strh	r3, [r4, #2]
 80183c4:	9b05      	ldr	r3, [sp, #20]
 80183c6:	80a3      	strh	r3, [r4, #4]
 80183c8:	9b06      	ldr	r3, [sp, #24]
 80183ca:	e78b      	b.n	80182e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80183cc:	fb09 f202 	mul.w	r2, r9, r2
 80183d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80183d4:	440f      	add	r7, r1
 80183d6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80183da:	b166      	cbz	r6, 80183f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80183dc:	9a07      	ldr	r2, [sp, #28]
 80183de:	4592      	cmp	sl, r2
 80183e0:	d109      	bne.n	80183f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80183e2:	f8db 0000 	ldr.w	r0, [fp]
 80183e6:	fb09 f303 	mul.w	r3, r9, r3
 80183ea:	6802      	ldr	r2, [r0, #0]
 80183ec:	4629      	mov	r1, r5
 80183ee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80183f0:	463a      	mov	r2, r7
 80183f2:	47b0      	blx	r6
 80183f4:	e7e2      	b.n	80183bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80183f6:	fb0a f303 	mul.w	r3, sl, r3
 80183fa:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8018438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80183fe:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8018402:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8018406:	4545      	cmp	r5, r8
 8018408:	d2d8      	bcs.n	80183bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801840a:	f8db 0000 	ldr.w	r0, [fp]
 801840e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018412:	6802      	ldr	r2, [r0, #0]
 8018414:	4629      	mov	r1, r5
 8018416:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	463a      	mov	r2, r7
 801841e:	47d0      	blx	sl
 8018420:	444f      	add	r7, r9
 8018422:	4435      	add	r5, r6
 8018424:	e7ef      	b.n	8018406 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8018426:	bf00      	nop
 8018428:	2001fd94 	.word	0x2001fd94
 801842c:	2001fd96 	.word	0x2001fd96
 8018430:	2001fd98 	.word	0x2001fd98
 8018434:	2001fd9a 	.word	0x2001fd9a
 8018438:	2001fda0 	.word	0x2001fda0

0801843c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801843e:	4606      	mov	r6, r0
 8018440:	b087      	sub	sp, #28
 8018442:	460c      	mov	r4, r1
 8018444:	4617      	mov	r7, r2
 8018446:	461d      	mov	r5, r3
 8018448:	b333      	cbz	r3, 8018498 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801844a:	4608      	mov	r0, r1
 801844c:	f7f8 fa87 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018450:	bb10      	cbnz	r0, 8018498 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018452:	6820      	ldr	r0, [r4, #0]
 8018454:	6861      	ldr	r1, [r4, #4]
 8018456:	ab04      	add	r3, sp, #16
 8018458:	4c1b      	ldr	r4, [pc, #108]	; (80184c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801845a:	c303      	stmia	r3!, {r0, r1}
 801845c:	a804      	add	r0, sp, #16
 801845e:	f7fa fa4d 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018462:	6820      	ldr	r0, [r4, #0]
 8018464:	6803      	ldr	r3, [r0, #0]
 8018466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018468:	4798      	blx	r3
 801846a:	2dff      	cmp	r5, #255	; 0xff
 801846c:	d016      	beq.n	801849c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801846e:	f010 0f08 	tst.w	r0, #8
 8018472:	6820      	ldr	r0, [r4, #0]
 8018474:	d015      	beq.n	80184a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018476:	2400      	movs	r4, #0
 8018478:	6801      	ldr	r1, [r0, #0]
 801847a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801847e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018482:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018486:	9401      	str	r4, [sp, #4]
 8018488:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801848c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018490:	9400      	str	r4, [sp, #0]
 8018492:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8018494:	4639      	mov	r1, r7
 8018496:	47a0      	blx	r4
 8018498:	b007      	add	sp, #28
 801849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801849c:	f010 0f02 	tst.w	r0, #2
 80184a0:	e7e7      	b.n	8018472 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80184a2:	6803      	ldr	r3, [r0, #0]
 80184a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184a6:	4798      	blx	r3
 80184a8:	4b08      	ldr	r3, [pc, #32]	; (80184cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80184aa:	4601      	mov	r1, r0
 80184ac:	881a      	ldrh	r2, [r3, #0]
 80184ae:	e9cd 7500 	strd	r7, r5, [sp]
 80184b2:	6833      	ldr	r3, [r6, #0]
 80184b4:	4630      	mov	r0, r6
 80184b6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80184b8:	ab04      	add	r3, sp, #16
 80184ba:	47a8      	blx	r5
 80184bc:	6820      	ldr	r0, [r4, #0]
 80184be:	6803      	ldr	r3, [r0, #0]
 80184c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184c2:	4798      	blx	r3
 80184c4:	e7e8      	b.n	8018498 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80184c6:	bf00      	nop
 80184c8:	2001fda0 	.word	0x2001fda0
 80184cc:	2001fd9a 	.word	0x2001fd9a

080184d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80184d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184d4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80184d8:	4688      	mov	r8, r1
 80184da:	4614      	mov	r4, r2
 80184dc:	461d      	mov	r5, r3
 80184de:	9e08      	ldr	r6, [sp, #32]
 80184e0:	2f00      	cmp	r7, #0
 80184e2:	f000 80a9 	beq.w	8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f8 fa39 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 80184ec:	2800      	cmp	r0, #0
 80184ee:	f040 80a3 	bne.w	8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80184f2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80184f6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80184fa:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80184fe:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8018502:	fb04 1303 	mla	r3, r4, r3, r1
 8018506:	4365      	muls	r5, r4
 8018508:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801850c:	2fff      	cmp	r7, #255	; 0xff
 801850e:	eba4 0200 	sub.w	r2, r4, r0
 8018512:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8018516:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801851a:	d04a      	beq.n	80185b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801851c:	b2bc      	uxth	r4, r7
 801851e:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8018522:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8018526:	fa5f f788 	uxtb.w	r7, r8
 801852a:	b2f3      	uxtb	r3, r6
 801852c:	fb0e fe04 	mul.w	lr, lr, r4
 8018530:	4367      	muls	r7, r4
 8018532:	4363      	muls	r3, r4
 8018534:	0040      	lsls	r0, r0, #1
 8018536:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801853a:	fa1f fc8c 	uxth.w	ip, ip
 801853e:	42a9      	cmp	r1, r5
 8018540:	d27a      	bcs.n	8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018542:	eb01 0900 	add.w	r9, r1, r0
 8018546:	4549      	cmp	r1, r9
 8018548:	d231      	bcs.n	80185ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801854a:	880a      	ldrh	r2, [r1, #0]
 801854c:	1214      	asrs	r4, r2, #8
 801854e:	10d6      	asrs	r6, r2, #3
 8018550:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8018554:	00d2      	lsls	r2, r2, #3
 8018556:	b2d2      	uxtb	r2, r2
 8018558:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801855c:	fb14 f40c 	smulbb	r4, r4, ip
 8018560:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018564:	fb12 f20c 	smulbb	r2, r2, ip
 8018568:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801856c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8018570:	4474      	add	r4, lr
 8018572:	fb16 f60c 	smulbb	r6, r6, ip
 8018576:	b2a4      	uxth	r4, r4
 8018578:	441a      	add	r2, r3
 801857a:	b292      	uxth	r2, r2
 801857c:	f104 0a01 	add.w	sl, r4, #1
 8018580:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018584:	f102 0a01 	add.w	sl, r2, #1
 8018588:	443e      	add	r6, r7
 801858a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801858e:	b2b6      	uxth	r6, r6
 8018590:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8018594:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018598:	4322      	orrs	r2, r4
 801859a:	1c74      	adds	r4, r6, #1
 801859c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80185a0:	0976      	lsrs	r6, r6, #5
 80185a2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80185a6:	4332      	orrs	r2, r6
 80185a8:	f821 2b02 	strh.w	r2, [r1], #2
 80185ac:	e7cb      	b.n	8018546 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 80185ae:	4441      	add	r1, r8
 80185b0:	e7c5      	b.n	801853e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80185b2:	4f22      	ldr	r7, [pc, #136]	; (801863c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80185b4:	0973      	lsrs	r3, r6, #5
 80185b6:	ea08 0707 	and.w	r7, r8, r7
 80185ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80185be:	433b      	orrs	r3, r7
 80185c0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80185c4:	4333      	orrs	r3, r6
 80185c6:	07e7      	lsls	r7, r4, #31
 80185c8:	b29b      	uxth	r3, r3
 80185ca:	d50b      	bpl.n	80185e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80185cc:	0040      	lsls	r0, r0, #1
 80185ce:	0052      	lsls	r2, r2, #1
 80185d0:	42a9      	cmp	r1, r5
 80185d2:	d231      	bcs.n	8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80185d4:	180c      	adds	r4, r1, r0
 80185d6:	42a1      	cmp	r1, r4
 80185d8:	d202      	bcs.n	80185e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80185da:	f821 3b02 	strh.w	r3, [r1], #2
 80185de:	e7fa      	b.n	80185d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80185e0:	4411      	add	r1, r2
 80185e2:	e7f5      	b.n	80185d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80185e4:	078e      	lsls	r6, r1, #30
 80185e6:	d008      	beq.n	80185fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80185e8:	460a      	mov	r2, r1
 80185ea:	0066      	lsls	r6, r4, #1
 80185ec:	42aa      	cmp	r2, r5
 80185ee:	d202      	bcs.n	80185f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80185f0:	8013      	strh	r3, [r2, #0]
 80185f2:	4432      	add	r2, r6
 80185f4:	e7fa      	b.n	80185ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80185f6:	3102      	adds	r1, #2
 80185f8:	3801      	subs	r0, #1
 80185fa:	07c2      	lsls	r2, r0, #31
 80185fc:	d50b      	bpl.n	8018616 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80185fe:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8018602:	3a01      	subs	r2, #1
 8018604:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8018608:	0066      	lsls	r6, r4, #1
 801860a:	42aa      	cmp	r2, r5
 801860c:	d202      	bcs.n	8018614 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801860e:	8013      	strh	r3, [r2, #0]
 8018610:	4432      	add	r2, r6
 8018612:	e7fa      	b.n	801860a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8018614:	3801      	subs	r0, #1
 8018616:	b178      	cbz	r0, 8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018618:	1040      	asrs	r0, r0, #1
 801861a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801861e:	0080      	lsls	r0, r0, #2
 8018620:	0064      	lsls	r4, r4, #1
 8018622:	42a9      	cmp	r1, r5
 8018624:	d208      	bcs.n	8018638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018626:	460a      	mov	r2, r1
 8018628:	180e      	adds	r6, r1, r0
 801862a:	42b2      	cmp	r2, r6
 801862c:	d202      	bcs.n	8018634 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801862e:	f842 3b04 	str.w	r3, [r2], #4
 8018632:	e7fa      	b.n	801862a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8018634:	4421      	add	r1, r4
 8018636:	e7f4      	b.n	8018622 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8018638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801863c:	00fff800 	.word	0x00fff800

08018640 <_ZN8touchgfx8LCD16bppC1Ev>:
 8018640:	2200      	movs	r2, #0
 8018642:	4910      	ldr	r1, [pc, #64]	; (8018684 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8018644:	6042      	str	r2, [r0, #4]
 8018646:	6001      	str	r1, [r0, #0]
 8018648:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801864c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8018650:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018654:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8018658:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801865c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8018660:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8018664:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8018668:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801866c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8018670:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8018674:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8018678:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801867c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	08023bf8 	.word	0x08023bf8

08018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8018688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801868c:	460d      	mov	r5, r1
 801868e:	4604      	mov	r4, r0
 8018690:	4699      	mov	r9, r3
 8018692:	b08d      	sub	sp, #52	; 0x34
 8018694:	6808      	ldr	r0, [r1, #0]
 8018696:	6849      	ldr	r1, [r1, #4]
 8018698:	ab08      	add	r3, sp, #32
 801869a:	c303      	stmia	r3!, {r0, r1}
 801869c:	6810      	ldr	r0, [r2, #0]
 801869e:	6851      	ldr	r1, [r2, #4]
 80186a0:	ab0a      	add	r3, sp, #40	; 0x28
 80186a2:	c303      	stmia	r3!, {r0, r1}
 80186a4:	a808      	add	r0, sp, #32
 80186a6:	f7fa f929 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80186aa:	4629      	mov	r1, r5
 80186ac:	a80a      	add	r0, sp, #40	; 0x28
 80186ae:	f7fa f94d 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80186b2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80186b6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80186ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80186be:	4d63      	ldr	r5, [pc, #396]	; (801884c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80186c0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80186c4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80186c8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80186cc:	6828      	ldr	r0, [r5, #0]
 80186ce:	440a      	add	r2, r1
 80186d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80186d4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80186d8:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80186dc:	4413      	add	r3, r2
 80186de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80186e2:	6803      	ldr	r3, [r0, #0]
 80186e4:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80186e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186ea:	4798      	blx	r3
 80186ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80186f0:	d119      	bne.n	8018726 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80186f2:	f010 0f20 	tst.w	r0, #32
 80186f6:	6828      	ldr	r0, [r5, #0]
 80186f8:	d018      	beq.n	801872c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80186fa:	2500      	movs	r5, #0
 80186fc:	6801      	ldr	r1, [r0, #0]
 80186fe:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8018702:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8018706:	b2b6      	uxth	r6, r6
 8018708:	9502      	str	r5, [sp, #8]
 801870a:	fa1f f588 	uxth.w	r5, r8
 801870e:	9601      	str	r6, [sp, #4]
 8018710:	9500      	str	r5, [sp, #0]
 8018712:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8018714:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018718:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801871c:	4621      	mov	r1, r4
 801871e:	47a8      	blx	r5
 8018720:	b00d      	add	sp, #52	; 0x34
 8018722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018726:	f010 0f40 	tst.w	r0, #64	; 0x40
 801872a:	e7e4      	b.n	80186f6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801872c:	6803      	ldr	r3, [r0, #0]
 801872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018730:	4798      	blx	r3
 8018732:	4947      	ldr	r1, [pc, #284]	; (8018850 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8018734:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018738:	468a      	mov	sl, r1
 801873a:	880b      	ldrh	r3, [r1, #0]
 801873c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8018740:	fb03 5202 	mla	r2, r3, r2, r5
 8018744:	4373      	muls	r3, r6
 8018746:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801874a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801874e:	9307      	str	r3, [sp, #28]
 8018750:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018754:	9306      	str	r3, [sp, #24]
 8018756:	9b07      	ldr	r3, [sp, #28]
 8018758:	4298      	cmp	r0, r3
 801875a:	d270      	bcs.n	801883e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801875c:	4621      	mov	r1, r4
 801875e:	9b06      	ldr	r3, [sp, #24]
 8018760:	eb00 0b03 	add.w	fp, r0, r3
 8018764:	4558      	cmp	r0, fp
 8018766:	d25d      	bcs.n	8018824 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8018768:	f851 4b04 	ldr.w	r4, [r1], #4
 801876c:	0e23      	lsrs	r3, r4, #24
 801876e:	d014      	beq.n	801879a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8018770:	2bff      	cmp	r3, #255	; 0xff
 8018772:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8018776:	d112      	bne.n	801879e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8018778:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801877c:	d10f      	bne.n	801879e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801877e:	0963      	lsrs	r3, r4, #5
 8018780:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8018784:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018788:	f02c 0c07 	bic.w	ip, ip, #7
 801878c:	ea43 0c0c 	orr.w	ip, r3, ip
 8018790:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018794:	ea4c 0404 	orr.w	r4, ip, r4
 8018798:	8004      	strh	r4, [r0, #0]
 801879a:	3002      	adds	r0, #2
 801879c:	e7e2      	b.n	8018764 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801879e:	fb09 f303 	mul.w	r3, r9, r3
 80187a2:	1c5a      	adds	r2, r3, #1
 80187a4:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80187a8:	1212      	asrs	r2, r2, #8
 80187aa:	b293      	uxth	r3, r2
 80187ac:	43d2      	mvns	r2, r2
 80187ae:	8807      	ldrh	r7, [r0, #0]
 80187b0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80187b4:	fb1e fe03 	smulbb	lr, lr, r3
 80187b8:	123e      	asrs	r6, r7, #8
 80187ba:	fa5f fc8c 	uxtb.w	ip, ip
 80187be:	b2e4      	uxtb	r4, r4
 80187c0:	fb1c fc03 	smulbb	ip, ip, r3
 80187c4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80187c8:	fb14 f403 	smulbb	r4, r4, r3
 80187cc:	b2d2      	uxtb	r2, r2
 80187ce:	10fd      	asrs	r5, r7, #3
 80187d0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80187d4:	00ff      	lsls	r7, r7, #3
 80187d6:	fb06 e602 	mla	r6, r6, r2, lr
 80187da:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80187de:	b2ff      	uxtb	r7, r7
 80187e0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80187e4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80187e8:	fb05 c502 	mla	r5, r5, r2, ip
 80187ec:	fb07 4702 	mla	r7, r7, r2, r4
 80187f0:	b2b6      	uxth	r6, r6
 80187f2:	f106 0e01 	add.w	lr, r6, #1
 80187f6:	b2ad      	uxth	r5, r5
 80187f8:	b2bf      	uxth	r7, r7
 80187fa:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80187fe:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8018802:	f105 0c01 	add.w	ip, r5, #1
 8018806:	1c7e      	adds	r6, r7, #1
 8018808:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801880c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8018810:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018814:	096d      	lsrs	r5, r5, #5
 8018816:	ea46 060e 	orr.w	r6, r6, lr
 801881a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801881e:	432e      	orrs	r6, r5
 8018820:	8006      	strh	r6, [r0, #0]
 8018822:	e7ba      	b.n	801879a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8018824:	f8ba 3000 	ldrh.w	r3, [sl]
 8018828:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801882c:	eba3 0308 	sub.w	r3, r3, r8
 8018830:	eba4 0408 	sub.w	r4, r4, r8
 8018834:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018838:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801883c:	e78b      	b.n	8018756 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801883e:	4b03      	ldr	r3, [pc, #12]	; (801884c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8018840:	6818      	ldr	r0, [r3, #0]
 8018842:	6803      	ldr	r3, [r0, #0]
 8018844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018846:	4798      	blx	r3
 8018848:	e76a      	b.n	8018720 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801884a:	bf00      	nop
 801884c:	2001fda0 	.word	0x2001fda0
 8018850:	2001fd9a 	.word	0x2001fd9a

08018854 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8018854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018858:	b085      	sub	sp, #20
 801885a:	466d      	mov	r5, sp
 801885c:	4616      	mov	r6, r2
 801885e:	460c      	mov	r4, r1
 8018860:	6810      	ldr	r0, [r2, #0]
 8018862:	6851      	ldr	r1, [r2, #4]
 8018864:	c503      	stmia	r5!, {r0, r1}
 8018866:	6818      	ldr	r0, [r3, #0]
 8018868:	6859      	ldr	r1, [r3, #4]
 801886a:	c503      	stmia	r5!, {r0, r1}
 801886c:	4668      	mov	r0, sp
 801886e:	f7fa f845 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018872:	4631      	mov	r1, r6
 8018874:	a802      	add	r0, sp, #8
 8018876:	f7fa f869 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801887a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801887e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8018882:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8018886:	4d28      	ldr	r5, [pc, #160]	; (8018928 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8018888:	fb11 2103 	smlabb	r1, r1, r3, r2
 801888c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018890:	f8bd 1000 	ldrh.w	r1, [sp]
 8018894:	6828      	ldr	r0, [r5, #0]
 8018896:	440a      	add	r2, r1
 8018898:	f8ad 2008 	strh.w	r2, [sp, #8]
 801889c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80188a0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80188a4:	4413      	add	r3, r2
 80188a6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80188b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188b2:	4798      	blx	r3
 80188b4:	4e1d      	ldr	r6, [pc, #116]	; (801892c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80188b6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80188ba:	8833      	ldrh	r3, [r6, #0]
 80188bc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80188c0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8018930 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80188c4:	fb03 1202 	mla	r2, r3, r2, r1
 80188c8:	fb08 f303 	mul.w	r3, r8, r3
 80188cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80188d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80188d4:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80188d8:	4298      	cmp	r0, r3
 80188da:	d21d      	bcs.n	8018918 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80188dc:	eb00 080c 	add.w	r8, r0, ip
 80188e0:	4540      	cmp	r0, r8
 80188e2:	d20f      	bcs.n	8018904 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80188e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80188e8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80188ec:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80188f0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80188f4:	ea42 0209 	orr.w	r2, r2, r9
 80188f8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80188fc:	430a      	orrs	r2, r1
 80188fe:	f820 2b02 	strh.w	r2, [r0], #2
 8018902:	e7ed      	b.n	80188e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8018904:	8832      	ldrh	r2, [r6, #0]
 8018906:	1bd2      	subs	r2, r2, r7
 8018908:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801890c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018910:	1bd2      	subs	r2, r2, r7
 8018912:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8018916:	e7df      	b.n	80188d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8018918:	6828      	ldr	r0, [r5, #0]
 801891a:	6803      	ldr	r3, [r0, #0]
 801891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801891e:	4798      	blx	r3
 8018920:	b005      	add	sp, #20
 8018922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018926:	bf00      	nop
 8018928:	2001fda0 	.word	0x2001fda0
 801892c:	2001fd9a 	.word	0x2001fd9a
 8018930:	fffff800 	.word	0xfffff800

08018934 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8018934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018938:	460e      	mov	r6, r1
 801893a:	4604      	mov	r4, r0
 801893c:	461d      	mov	r5, r3
 801893e:	b08e      	sub	sp, #56	; 0x38
 8018940:	6808      	ldr	r0, [r1, #0]
 8018942:	6849      	ldr	r1, [r1, #4]
 8018944:	ab0a      	add	r3, sp, #40	; 0x28
 8018946:	c303      	stmia	r3!, {r0, r1}
 8018948:	6810      	ldr	r0, [r2, #0]
 801894a:	6851      	ldr	r1, [r2, #4]
 801894c:	ab0c      	add	r3, sp, #48	; 0x30
 801894e:	c303      	stmia	r3!, {r0, r1}
 8018950:	a80a      	add	r0, sp, #40	; 0x28
 8018952:	f7f9 ffd3 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018956:	4631      	mov	r1, r6
 8018958:	a80c      	add	r0, sp, #48	; 0x30
 801895a:	f7f9 fff7 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801895e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8018962:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018966:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801896a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018b1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801896e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018972:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018976:	440c      	add	r4, r1
 8018978:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801897c:	f8d8 0000 	ldr.w	r0, [r8]
 8018980:	440a      	add	r2, r1
 8018982:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8018986:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801898a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801898e:	4413      	add	r3, r2
 8018990:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018994:	6803      	ldr	r3, [r0, #0]
 8018996:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801899c:	4798      	blx	r3
 801899e:	2dff      	cmp	r5, #255	; 0xff
 80189a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8018b20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80189a4:	d124      	bne.n	80189f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80189a6:	f010 0f01 	tst.w	r0, #1
 80189aa:	f8d8 0000 	ldr.w	r0, [r8]
 80189ae:	d022      	beq.n	80189f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80189b0:	2100      	movs	r1, #0
 80189b2:	f04f 0e01 	mov.w	lr, #1
 80189b6:	f8d0 c000 	ldr.w	ip, [r0]
 80189ba:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80189be:	f8cd e018 	str.w	lr, [sp, #24]
 80189c2:	f8b9 e000 	ldrh.w	lr, [r9]
 80189c6:	b2b6      	uxth	r6, r6
 80189c8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80189cc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80189d0:	b2bf      	uxth	r7, r7
 80189d2:	9102      	str	r1, [sp, #8]
 80189d4:	9503      	str	r5, [sp, #12]
 80189d6:	9601      	str	r6, [sp, #4]
 80189d8:	9700      	str	r7, [sp, #0]
 80189da:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80189de:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80189e2:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80189e6:	4621      	mov	r1, r4
 80189e8:	47a8      	blx	r5
 80189ea:	b00e      	add	sp, #56	; 0x38
 80189ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189f0:	f010 0f04 	tst.w	r0, #4
 80189f4:	e7d9      	b.n	80189aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80189f6:	6803      	ldr	r3, [r0, #0]
 80189f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189fa:	4798      	blx	r3
 80189fc:	f8b9 3000 	ldrh.w	r3, [r9]
 8018a00:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8018a04:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018a08:	435e      	muls	r6, r3
 8018a0a:	fb03 1202 	mla	r2, r3, r2, r1
 8018a0e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8018a12:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018a16:	ebac 0c07 	sub.w	ip, ip, r7
 8018a1a:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8018a1e:	2dff      	cmp	r5, #255	; 0xff
 8018a20:	eba3 0707 	sub.w	r7, r3, r7
 8018a24:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018a28:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018a2c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8018a30:	d049      	beq.n	8018ac6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8018a32:	43eb      	mvns	r3, r5
 8018a34:	fa1f f985 	uxth.w	r9, r5
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	42b0      	cmp	r0, r6
 8018a3c:	d266      	bcs.n	8018b0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8018a3e:	eb00 0a0e 	add.w	sl, r0, lr
 8018a42:	4550      	cmp	r0, sl
 8018a44:	4621      	mov	r1, r4
 8018a46:	f104 0403 	add.w	r4, r4, #3
 8018a4a:	d25b      	bcs.n	8018b04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8018a4c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8018a50:	8802      	ldrh	r2, [r0, #0]
 8018a52:	fb11 f109 	smulbb	r1, r1, r9
 8018a56:	ea4f 2822 	mov.w	r8, r2, asr #8
 8018a5a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8018a5e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8018a62:	fb08 1803 	mla	r8, r8, r3, r1
 8018a66:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8018a6a:	10d5      	asrs	r5, r2, #3
 8018a6c:	fb11 f109 	smulbb	r1, r1, r9
 8018a70:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8018a74:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8018a78:	fb05 1503 	mla	r5, r5, r3, r1
 8018a7c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8018a80:	00d2      	lsls	r2, r2, #3
 8018a82:	fb11 f109 	smulbb	r1, r1, r9
 8018a86:	b2d2      	uxtb	r2, r2
 8018a88:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018a8c:	fb02 1203 	mla	r2, r2, r3, r1
 8018a90:	fa1f f888 	uxth.w	r8, r8
 8018a94:	b292      	uxth	r2, r2
 8018a96:	f108 0101 	add.w	r1, r8, #1
 8018a9a:	b2ad      	uxth	r5, r5
 8018a9c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8018aa0:	1c51      	adds	r1, r2, #1
 8018aa2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018aa6:	1c69      	adds	r1, r5, #1
 8018aa8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8018aac:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8018ab0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018ab4:	096d      	lsrs	r5, r5, #5
 8018ab6:	ea42 0208 	orr.w	r2, r2, r8
 8018aba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018abe:	432a      	orrs	r2, r5
 8018ac0:	f820 2b02 	strh.w	r2, [r0], #2
 8018ac4:	e7bd      	b.n	8018a42 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8018ac6:	4a14      	ldr	r2, [pc, #80]	; (8018b18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8018ac8:	42b0      	cmp	r0, r6
 8018aca:	d21f      	bcs.n	8018b0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8018acc:	eb00 050e 	add.w	r5, r0, lr
 8018ad0:	42a8      	cmp	r0, r5
 8018ad2:	4621      	mov	r1, r4
 8018ad4:	f104 0403 	add.w	r4, r4, #3
 8018ad8:	d210      	bcs.n	8018afc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8018ada:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8018ade:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8018ae8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018aec:	430b      	orrs	r3, r1
 8018aee:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8018af2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8018af6:	f820 3b02 	strh.w	r3, [r0], #2
 8018afa:	e7e9      	b.n	8018ad0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8018afc:	4438      	add	r0, r7
 8018afe:	eb01 040c 	add.w	r4, r1, ip
 8018b02:	e7e1      	b.n	8018ac8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8018b04:	4438      	add	r0, r7
 8018b06:	eb01 040c 	add.w	r4, r1, ip
 8018b0a:	e796      	b.n	8018a3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8018b0c:	4b03      	ldr	r3, [pc, #12]	; (8018b1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8018b0e:	6818      	ldr	r0, [r3, #0]
 8018b10:	6803      	ldr	r3, [r0, #0]
 8018b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b14:	4798      	blx	r3
 8018b16:	e768      	b.n	80189ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8018b18:	fffff800 	.word	0xfffff800
 8018b1c:	2001fda0 	.word	0x2001fda0
 8018b20:	2001fd9a 	.word	0x2001fd9a

08018b24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8018b24:	b4f0      	push	{r4, r5, r6, r7}
 8018b26:	4616      	mov	r6, r2
 8018b28:	2e01      	cmp	r6, #1
 8018b2a:	461c      	mov	r4, r3
 8018b2c:	460d      	mov	r5, r1
 8018b2e:	9a04      	ldr	r2, [sp, #16]
 8018b30:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018b34:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8018b38:	d012      	beq.n	8018b60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8018b3a:	d303      	bcc.n	8018b44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8018b3c:	2e02      	cmp	r6, #2
 8018b3e:	d00a      	beq.n	8018b56 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8018b40:	bcf0      	pop	{r4, r5, r6, r7}
 8018b42:	4770      	bx	lr
 8018b44:	6805      	ldr	r5, [r0, #0]
 8018b46:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8018b4a:	68ed      	ldr	r5, [r5, #12]
 8018b4c:	4613      	mov	r3, r2
 8018b4e:	46ac      	mov	ip, r5
 8018b50:	4622      	mov	r2, r4
 8018b52:	bcf0      	pop	{r4, r5, r6, r7}
 8018b54:	4760      	bx	ip
 8018b56:	4621      	mov	r1, r4
 8018b58:	4628      	mov	r0, r5
 8018b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8018b5c:	f7ff bd94 	b.w	8018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018b60:	4621      	mov	r1, r4
 8018b62:	4628      	mov	r0, r5
 8018b64:	bcf0      	pop	{r4, r5, r6, r7}
 8018b66:	f7ff bee5 	b.w	8018934 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08018b6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	4616      	mov	r6, r2
 8018b72:	4681      	mov	r9, r0
 8018b74:	b093      	sub	sp, #76	; 0x4c
 8018b76:	6810      	ldr	r0, [r2, #0]
 8018b78:	4688      	mov	r8, r1
 8018b7a:	6851      	ldr	r1, [r2, #4]
 8018b7c:	ac0e      	add	r4, sp, #56	; 0x38
 8018b7e:	c403      	stmia	r4!, {r0, r1}
 8018b80:	6818      	ldr	r0, [r3, #0]
 8018b82:	6859      	ldr	r1, [r3, #4]
 8018b84:	ac10      	add	r4, sp, #64	; 0x40
 8018b86:	c403      	stmia	r4!, {r0, r1}
 8018b88:	a80e      	add	r0, sp, #56	; 0x38
 8018b8a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8018b8e:	f7f9 feb5 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b92:	4631      	mov	r1, r6
 8018b94:	a810      	add	r0, sp, #64	; 0x40
 8018b96:	f7f9 fed9 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b9a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8018b9e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8018ba2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8018ba6:	4e62      	ldr	r6, [pc, #392]	; (8018d30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8018ba8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018bac:	4489      	add	r9, r1
 8018bae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8018bb2:	6830      	ldr	r0, [r6, #0]
 8018bb4:	440a      	add	r2, r1
 8018bb6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018bba:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018bbe:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8018bc2:	4413      	add	r3, r2
 8018bc4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018bc8:	6803      	ldr	r3, [r0, #0]
 8018bca:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8018bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bd0:	4798      	blx	r3
 8018bd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018bd6:	4f57      	ldr	r7, [pc, #348]	; (8018d34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8018bd8:	6830      	ldr	r0, [r6, #0]
 8018bda:	d01d      	beq.n	8018c18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8018bdc:	2200      	movs	r2, #0
 8018bde:	6801      	ldr	r1, [r0, #0]
 8018be0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8018be4:	220b      	movs	r2, #11
 8018be6:	9207      	str	r2, [sp, #28]
 8018be8:	883a      	ldrh	r2, [r7, #0]
 8018bea:	b2a4      	uxth	r4, r4
 8018bec:	9206      	str	r2, [sp, #24]
 8018bee:	2201      	movs	r2, #1
 8018bf0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8018bf4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018bf8:	b2ad      	uxth	r5, r5
 8018bfa:	9203      	str	r2, [sp, #12]
 8018bfc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018c00:	9502      	str	r5, [sp, #8]
 8018c02:	9200      	str	r2, [sp, #0]
 8018c04:	9401      	str	r4, [sp, #4]
 8018c06:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8018c08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018c0c:	4642      	mov	r2, r8
 8018c0e:	4649      	mov	r1, r9
 8018c10:	47a0      	blx	r4
 8018c12:	b013      	add	sp, #76	; 0x4c
 8018c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c18:	6803      	ldr	r3, [r0, #0]
 8018c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c1c:	4798      	blx	r3
 8018c1e:	f04f 0e04 	mov.w	lr, #4
 8018c22:	883b      	ldrh	r3, [r7, #0]
 8018c24:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8018c28:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8018c2c:	435d      	muls	r5, r3
 8018c2e:	fb03 1202 	mla	r2, r3, r2, r1
 8018c32:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018c36:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8018c3a:	920c      	str	r2, [sp, #48]	; 0x30
 8018c3c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8018c40:	1b12      	subs	r2, r2, r4
 8018c42:	920d      	str	r2, [sp, #52]	; 0x34
 8018c44:	0062      	lsls	r2, r4, #1
 8018c46:	1b1c      	subs	r4, r3, r4
 8018c48:	0063      	lsls	r3, r4, #1
 8018c4a:	920a      	str	r2, [sp, #40]	; 0x28
 8018c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c50:	4298      	cmp	r0, r3
 8018c52:	d266      	bcs.n	8018d22 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8018c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c56:	eb00 0b03 	add.w	fp, r0, r3
 8018c5a:	4558      	cmp	r0, fp
 8018c5c:	d25c      	bcs.n	8018d18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8018c5e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018c62:	fb1e e303 	smlabb	r3, lr, r3, lr
 8018c66:	f858 2003 	ldr.w	r2, [r8, r3]
 8018c6a:	0e11      	lsrs	r1, r2, #24
 8018c6c:	d012      	beq.n	8018c94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018c6e:	29ff      	cmp	r1, #255	; 0xff
 8018c70:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8018c74:	d110      	bne.n	8018c98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018c76:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018c7a:	d10d      	bne.n	8018c98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018c7c:	0953      	lsrs	r3, r2, #5
 8018c7e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8018c82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018c86:	f027 0707 	bic.w	r7, r7, #7
 8018c8a:	431f      	orrs	r7, r3
 8018c8c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8018c90:	433a      	orrs	r2, r7
 8018c92:	8002      	strh	r2, [r0, #0]
 8018c94:	3002      	adds	r0, #2
 8018c96:	e7e0      	b.n	8018c5a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8018c98:	fb0a f101 	mul.w	r1, sl, r1
 8018c9c:	1c4b      	adds	r3, r1, #1
 8018c9e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8018ca2:	121b      	asrs	r3, r3, #8
 8018ca4:	b299      	uxth	r1, r3
 8018ca6:	43db      	mvns	r3, r3
 8018ca8:	8806      	ldrh	r6, [r0, #0]
 8018caa:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018cae:	b2d2      	uxtb	r2, r2
 8018cb0:	fb1c fc01 	smulbb	ip, ip, r1
 8018cb4:	fb12 f201 	smulbb	r2, r2, r1
 8018cb8:	1235      	asrs	r5, r6, #8
 8018cba:	10f4      	asrs	r4, r6, #3
 8018cbc:	00f6      	lsls	r6, r6, #3
 8018cbe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018cc2:	b2f6      	uxtb	r6, r6
 8018cc4:	b2ff      	uxtb	r7, r7
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	fb17 f701 	smulbb	r7, r7, r1
 8018ccc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8018cd0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8018cd4:	fb05 c503 	mla	r5, r5, r3, ip
 8018cd8:	fb06 2203 	mla	r2, r6, r3, r2
 8018cdc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8018ce0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8018ce4:	fb04 7403 	mla	r4, r4, r3, r7
 8018ce8:	b2ad      	uxth	r5, r5
 8018cea:	b292      	uxth	r2, r2
 8018cec:	f105 0c01 	add.w	ip, r5, #1
 8018cf0:	1c57      	adds	r7, r2, #1
 8018cf2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8018cf6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018cfa:	b2a4      	uxth	r4, r4
 8018cfc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8018d00:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8018d04:	433d      	orrs	r5, r7
 8018d06:	1c67      	adds	r7, r4, #1
 8018d08:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8018d0c:	0964      	lsrs	r4, r4, #5
 8018d0e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8018d12:	4325      	orrs	r5, r4
 8018d14:	8005      	strh	r5, [r0, #0]
 8018d16:	e7bd      	b.n	8018c94 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d1a:	4418      	add	r0, r3
 8018d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d1e:	4499      	add	r9, r3
 8018d20:	e795      	b.n	8018c4e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8018d22:	4b03      	ldr	r3, [pc, #12]	; (8018d30 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8018d24:	6818      	ldr	r0, [r3, #0]
 8018d26:	6803      	ldr	r3, [r0, #0]
 8018d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d2a:	4798      	blx	r3
 8018d2c:	e771      	b.n	8018c12 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8018d2e:	bf00      	nop
 8018d30:	2001fda0 	.word	0x2001fda0
 8018d34:	2001fd9a 	.word	0x2001fd9a

08018d38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8018d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d3c:	b087      	sub	sp, #28
 8018d3e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8018d42:	4680      	mov	r8, r0
 8018d44:	460d      	mov	r5, r1
 8018d46:	4614      	mov	r4, r2
 8018d48:	2e00      	cmp	r6, #0
 8018d4a:	f000 80b9 	beq.w	8018ec0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8018d4e:	6810      	ldr	r0, [r2, #0]
 8018d50:	6851      	ldr	r1, [r2, #4]
 8018d52:	af02      	add	r7, sp, #8
 8018d54:	c703      	stmia	r7!, {r0, r1}
 8018d56:	6818      	ldr	r0, [r3, #0]
 8018d58:	6859      	ldr	r1, [r3, #4]
 8018d5a:	af04      	add	r7, sp, #16
 8018d5c:	c703      	stmia	r7!, {r0, r1}
 8018d5e:	a802      	add	r0, sp, #8
 8018d60:	f7f9 fdcc 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018d64:	4621      	mov	r1, r4
 8018d66:	a804      	add	r0, sp, #16
 8018d68:	f7f9 fdf0 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018d6c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018d70:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018d74:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8018d78:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8018d7c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8018d80:	eb08 0401 	add.w	r4, r8, r1
 8018d84:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018d88:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8018d8c:	440a      	add	r2, r1
 8018d8e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018d92:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018d96:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8018d9a:	4413      	add	r3, r2
 8018d9c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018da0:	4b49      	ldr	r3, [pc, #292]	; (8018ec8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8018da2:	6818      	ldr	r0, [r3, #0]
 8018da4:	6803      	ldr	r3, [r0, #0]
 8018da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018da8:	4798      	blx	r3
 8018daa:	4b48      	ldr	r3, [pc, #288]	; (8018ecc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8018dac:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8018db0:	881a      	ldrh	r2, [r3, #0]
 8018db2:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8018db6:	2eff      	cmp	r6, #255	; 0xff
 8018db8:	fb02 c101 	mla	r1, r2, r1, ip
 8018dbc:	fb02 f207 	mul.w	r2, r2, r7
 8018dc0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018dc4:	f105 0104 	add.w	r1, r5, #4
 8018dc8:	461d      	mov	r5, r3
 8018dca:	d05a      	beq.n	8018e82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8018dcc:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8018dd0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018dd4:	b2b6      	uxth	r6, r6
 8018dd6:	fa1f fe8e 	uxth.w	lr, lr
 8018dda:	9301      	str	r3, [sp, #4]
 8018ddc:	4282      	cmp	r2, r0
 8018dde:	d96a      	bls.n	8018eb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8018de0:	eb00 0b0a 	add.w	fp, r0, sl
 8018de4:	4583      	cmp	fp, r0
 8018de6:	d940      	bls.n	8018e6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8018de8:	8805      	ldrh	r5, [r0, #0]
 8018dea:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018dee:	122f      	asrs	r7, r5, #8
 8018df0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018df4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018df8:	fb17 f70e 	smulbb	r7, r7, lr
 8018dfc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018e00:	00ed      	lsls	r5, r5, #3
 8018e02:	b2ed      	uxtb	r5, r5
 8018e04:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8018e08:	fb15 f50e 	smulbb	r5, r5, lr
 8018e0c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018e10:	fb0c 7c06 	mla	ip, ip, r6, r7
 8018e14:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018e18:	10df      	asrs	r7, r3, #3
 8018e1a:	00db      	lsls	r3, r3, #3
 8018e1c:	fb19 f90e 	smulbb	r9, r9, lr
 8018e20:	b2db      	uxtb	r3, r3
 8018e22:	fb03 5306 	mla	r3, r3, r6, r5
 8018e26:	fa1f fc8c 	uxth.w	ip, ip
 8018e2a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018e2e:	fb07 9706 	mla	r7, r7, r6, r9
 8018e32:	f10c 0901 	add.w	r9, ip, #1
 8018e36:	b29b      	uxth	r3, r3
 8018e38:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8018e3c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8018e40:	f103 0c01 	add.w	ip, r3, #1
 8018e44:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018e48:	b2bf      	uxth	r7, r7
 8018e4a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018e4e:	ea4c 0c09 	orr.w	ip, ip, r9
 8018e52:	f107 0901 	add.w	r9, r7, #1
 8018e56:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8018e5a:	097f      	lsrs	r7, r7, #5
 8018e5c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018e60:	ea4c 0c07 	orr.w	ip, ip, r7
 8018e64:	f820 cb02 	strh.w	ip, [r0], #2
 8018e68:	e7bc      	b.n	8018de4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8018e6a:	9b01      	ldr	r3, [sp, #4]
 8018e6c:	881b      	ldrh	r3, [r3, #0]
 8018e6e:	eba3 0308 	sub.w	r3, r3, r8
 8018e72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018e76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018e7a:	eba3 0308 	sub.w	r3, r3, r8
 8018e7e:	441c      	add	r4, r3
 8018e80:	e7ac      	b.n	8018ddc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8018e82:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018e86:	4282      	cmp	r2, r0
 8018e88:	d915      	bls.n	8018eb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8018e8a:	eb00 060a 	add.w	r6, r0, sl
 8018e8e:	4286      	cmp	r6, r0
 8018e90:	d906      	bls.n	8018ea0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8018e92:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018e9a:	f820 3b02 	strh.w	r3, [r0], #2
 8018e9e:	e7f6      	b.n	8018e8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8018ea0:	882b      	ldrh	r3, [r5, #0]
 8018ea2:	eba3 0308 	sub.w	r3, r3, r8
 8018ea6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018eaa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018eae:	eba3 0308 	sub.w	r3, r3, r8
 8018eb2:	441c      	add	r4, r3
 8018eb4:	e7e7      	b.n	8018e86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8018eb6:	4b04      	ldr	r3, [pc, #16]	; (8018ec8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8018eb8:	6818      	ldr	r0, [r3, #0]
 8018eba:	6803      	ldr	r3, [r0, #0]
 8018ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ebe:	4798      	blx	r3
 8018ec0:	b007      	add	sp, #28
 8018ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec6:	bf00      	nop
 8018ec8:	2001fda0 	.word	0x2001fda0
 8018ecc:	2001fd9a 	.word	0x2001fd9a

08018ed0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8018ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed4:	b091      	sub	sp, #68	; 0x44
 8018ed6:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8018eda:	4680      	mov	r8, r0
 8018edc:	460f      	mov	r7, r1
 8018ede:	4614      	mov	r4, r2
 8018ee0:	2d00      	cmp	r5, #0
 8018ee2:	d051      	beq.n	8018f88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8018ee4:	6810      	ldr	r0, [r2, #0]
 8018ee6:	6851      	ldr	r1, [r2, #4]
 8018ee8:	ae0c      	add	r6, sp, #48	; 0x30
 8018eea:	c603      	stmia	r6!, {r0, r1}
 8018eec:	6818      	ldr	r0, [r3, #0]
 8018eee:	6859      	ldr	r1, [r3, #4]
 8018ef0:	ae0e      	add	r6, sp, #56	; 0x38
 8018ef2:	c603      	stmia	r6!, {r0, r1}
 8018ef4:	a80c      	add	r0, sp, #48	; 0x30
 8018ef6:	f7f9 fd01 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018efa:	4621      	mov	r1, r4
 8018efc:	a80e      	add	r0, sp, #56	; 0x38
 8018efe:	f7f9 fd25 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018f02:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018f06:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018f0a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018f0e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 80190ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8018f12:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018f16:	eb08 0401 	add.w	r4, r8, r1
 8018f1a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018f1e:	f8d9 0000 	ldr.w	r0, [r9]
 8018f22:	440a      	add	r2, r1
 8018f24:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018f28:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018f2c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8018f30:	4413      	add	r3, r2
 8018f32:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018f36:	6803      	ldr	r3, [r0, #0]
 8018f38:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8018f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f3e:	4798      	blx	r3
 8018f40:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018f44:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80190f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8018f48:	f8d9 0000 	ldr.w	r0, [r9]
 8018f4c:	d01f      	beq.n	8018f8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8018f4e:	2200      	movs	r2, #0
 8018f50:	6801      	ldr	r1, [r0, #0]
 8018f52:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8018f56:	220b      	movs	r2, #11
 8018f58:	9207      	str	r2, [sp, #28]
 8018f5a:	f8b8 2000 	ldrh.w	r2, [r8]
 8018f5e:	b2b6      	uxth	r6, r6
 8018f60:	9206      	str	r2, [sp, #24]
 8018f62:	2201      	movs	r2, #1
 8018f64:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8018f68:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8018f6c:	9601      	str	r6, [sp, #4]
 8018f6e:	9203      	str	r2, [sp, #12]
 8018f70:	fa1f f28a 	uxth.w	r2, sl
 8018f74:	9202      	str	r2, [sp, #8]
 8018f76:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018f7a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018f7e:	9200      	str	r2, [sp, #0]
 8018f80:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8018f82:	463a      	mov	r2, r7
 8018f84:	4621      	mov	r1, r4
 8018f86:	47a8      	blx	r5
 8018f88:	b011      	add	sp, #68	; 0x44
 8018f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f8e:	6803      	ldr	r3, [r0, #0]
 8018f90:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8018f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f96:	4798      	blx	r3
 8018f98:	f8b8 2000 	ldrh.w	r2, [r8]
 8018f9c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018fa0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8018fa4:	2dff      	cmp	r5, #255	; 0xff
 8018fa6:	fb02 1303 	mla	r3, r2, r3, r1
 8018faa:	fb0a fa02 	mul.w	sl, sl, r2
 8018fae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018fb2:	d062      	beq.n	801907a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8018fb4:	ea6f 0c05 	mvn.w	ip, r5
 8018fb8:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8018fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8018fbe:	b2ad      	uxth	r5, r5
 8018fc0:	fa5f fc8c 	uxtb.w	ip, ip
 8018fc4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8018fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fca:	4298      	cmp	r0, r3
 8018fcc:	f080 8085 	bcs.w	80190da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8018fd0:	eb00 0b09 	add.w	fp, r0, r9
 8018fd4:	4558      	cmp	r0, fp
 8018fd6:	d246      	bcs.n	8019066 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8018fd8:	2303      	movs	r3, #3
 8018fda:	2204      	movs	r2, #4
 8018fdc:	f814 eb01 	ldrb.w	lr, [r4], #1
 8018fe0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8018fe4:	eb07 0a0e 	add.w	sl, r7, lr
 8018fe8:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8018fec:	8803      	ldrh	r3, [r0, #0]
 8018fee:	fb18 f805 	smulbb	r8, r8, r5
 8018ff2:	1219      	asrs	r1, r3, #8
 8018ff4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8018ff8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8018ffc:	fb01 810c 	mla	r1, r1, ip, r8
 8019000:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019004:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019008:	fb1e fe05 	smulbb	lr, lr, r5
 801900c:	fb18 f805 	smulbb	r8, r8, r5
 8019010:	10da      	asrs	r2, r3, #3
 8019012:	00db      	lsls	r3, r3, #3
 8019014:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019018:	b2db      	uxtb	r3, r3
 801901a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801901e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8019022:	fb02 820c 	mla	r2, r2, ip, r8
 8019026:	fb03 e30c 	mla	r3, r3, ip, lr
 801902a:	b289      	uxth	r1, r1
 801902c:	b292      	uxth	r2, r2
 801902e:	b29b      	uxth	r3, r3
 8019030:	f101 0801 	add.w	r8, r1, #1
 8019034:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019038:	f103 0e01 	add.w	lr, r3, #1
 801903c:	f102 0801 	add.w	r8, r2, #1
 8019040:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8019044:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8019048:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801904c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019050:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019054:	ea4e 0101 	orr.w	r1, lr, r1
 8019058:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801905c:	ea41 0108 	orr.w	r1, r1, r8
 8019060:	f820 1b02 	strh.w	r1, [r0], #2
 8019064:	e7b6      	b.n	8018fd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8019066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019068:	881b      	ldrh	r3, [r3, #0]
 801906a:	1b9b      	subs	r3, r3, r6
 801906c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019070:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019074:	1b9b      	subs	r3, r3, r6
 8019076:	441c      	add	r4, r3
 8019078:	e7a6      	b.n	8018fc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801907a:	2203      	movs	r2, #3
 801907c:	2504      	movs	r5, #4
 801907e:	491a      	ldr	r1, [pc, #104]	; (80190e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8019080:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8019084:	4550      	cmp	r0, sl
 8019086:	d228      	bcs.n	80190da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019088:	eb00 0c09 	add.w	ip, r0, r9
 801908c:	4560      	cmp	r0, ip
 801908e:	4623      	mov	r3, r4
 8019090:	d219      	bcs.n	80190c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8019092:	f893 e000 	ldrb.w	lr, [r3]
 8019096:	3401      	adds	r4, #1
 8019098:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801909c:	eb07 0b0e 	add.w	fp, r7, lr
 80190a0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80190a4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80190a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80190ac:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80190b0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80190b4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80190b8:	ea43 030b 	orr.w	r3, r3, fp
 80190bc:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80190c0:	f820 3b02 	strh.w	r3, [r0], #2
 80190c4:	e7e2      	b.n	801908c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80190c6:	f8b8 3000 	ldrh.w	r3, [r8]
 80190ca:	1b9b      	subs	r3, r3, r6
 80190cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80190d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80190d4:	1b9b      	subs	r3, r3, r6
 80190d6:	441c      	add	r4, r3
 80190d8:	e7d4      	b.n	8019084 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80190da:	4b04      	ldr	r3, [pc, #16]	; (80190ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80190dc:	6818      	ldr	r0, [r3, #0]
 80190de:	6803      	ldr	r3, [r0, #0]
 80190e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190e2:	4798      	blx	r3
 80190e4:	e750      	b.n	8018f88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80190e6:	bf00      	nop
 80190e8:	fffff800 	.word	0xfffff800
 80190ec:	2001fda0 	.word	0x2001fda0
 80190f0:	2001fd9a 	.word	0x2001fd9a

080190f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80190f4:	b430      	push	{r4, r5}
 80190f6:	780d      	ldrb	r5, [r1, #0]
 80190f8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80190fc:	2d01      	cmp	r5, #1
 80190fe:	d00a      	beq.n	8019116 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8019100:	d305      	bcc.n	801910e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8019102:	2d02      	cmp	r5, #2
 8019104:	d10b      	bne.n	801911e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8019106:	9402      	str	r4, [sp, #8]
 8019108:	bc30      	pop	{r4, r5}
 801910a:	f7ff be15 	b.w	8018d38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801910e:	9402      	str	r4, [sp, #8]
 8019110:	bc30      	pop	{r4, r5}
 8019112:	f7ff bd2b 	b.w	8018b6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8019116:	9402      	str	r4, [sp, #8]
 8019118:	bc30      	pop	{r4, r5}
 801911a:	f7ff bed9 	b.w	8018ed0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801911e:	bc30      	pop	{r4, r5}
 8019120:	4770      	bx	lr
	...

08019124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8019124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019128:	4617      	mov	r7, r2
 801912a:	4604      	mov	r4, r0
 801912c:	460e      	mov	r6, r1
 801912e:	b087      	sub	sp, #28
 8019130:	6810      	ldr	r0, [r2, #0]
 8019132:	6851      	ldr	r1, [r2, #4]
 8019134:	ad02      	add	r5, sp, #8
 8019136:	c503      	stmia	r5!, {r0, r1}
 8019138:	6818      	ldr	r0, [r3, #0]
 801913a:	6859      	ldr	r1, [r3, #4]
 801913c:	ad04      	add	r5, sp, #16
 801913e:	c503      	stmia	r5!, {r0, r1}
 8019140:	a802      	add	r0, sp, #8
 8019142:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8019146:	f7f9 fbd9 	bl	80128fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801914a:	4639      	mov	r1, r7
 801914c:	a804      	add	r0, sp, #16
 801914e:	f7f9 fbfd 	bl	801294c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019152:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019156:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801915a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801915e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019162:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019166:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801916a:	440e      	add	r6, r1
 801916c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019170:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8019174:	440a      	add	r2, r1
 8019176:	f8ad 2010 	strh.w	r2, [sp, #16]
 801917a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801917e:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801936c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8019182:	4413      	add	r3, r2
 8019184:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019188:	4b77      	ldr	r3, [pc, #476]	; (8019368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801918a:	6818      	ldr	r0, [r3, #0]
 801918c:	6803      	ldr	r3, [r0, #0]
 801918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019190:	4798      	blx	r3
 8019192:	f8b9 b000 	ldrh.w	fp, [r9]
 8019196:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801919a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801919e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80191a2:	fb0b 2303 	mla	r3, fp, r3, r2
 80191a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80191aa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80191ae:	fb05 f50b 	mul.w	r5, r5, fp
 80191b2:	9300      	str	r3, [sp, #0]
 80191b4:	d069      	beq.n	801928a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80191b6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80191ba:	4558      	cmp	r0, fp
 80191bc:	f080 80cc 	bcs.w	8019358 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80191c0:	4631      	mov	r1, r6
 80191c2:	9b00      	ldr	r3, [sp, #0]
 80191c4:	18c3      	adds	r3, r0, r3
 80191c6:	9301      	str	r3, [sp, #4]
 80191c8:	9b01      	ldr	r3, [sp, #4]
 80191ca:	4298      	cmp	r0, r3
 80191cc:	d24f      	bcs.n	801926e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80191ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80191d2:	2a00      	cmp	r2, #0
 80191d4:	d048      	beq.n	8019268 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80191d6:	fb0a f202 	mul.w	r2, sl, r2
 80191da:	1c53      	adds	r3, r2, #1
 80191dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80191e0:	121b      	asrs	r3, r3, #8
 80191e2:	d041      	beq.n	8019268 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80191e4:	b29e      	uxth	r6, r3
 80191e6:	43db      	mvns	r3, r3
 80191e8:	8802      	ldrh	r2, [r0, #0]
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	1215      	asrs	r5, r2, #8
 80191ee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80191f2:	f8b4 c000 	ldrh.w	ip, [r4]
 80191f6:	fb15 f503 	smulbb	r5, r5, r3
 80191fa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80191fe:	00d2      	lsls	r2, r2, #3
 8019200:	b2d2      	uxtb	r2, r2
 8019202:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019206:	fb12 f203 	smulbb	r2, r2, r3
 801920a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801920e:	fb07 5706 	mla	r7, r7, r6, r5
 8019212:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019216:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801921a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801921e:	fb1e fe03 	smulbb	lr, lr, r3
 8019222:	fa5f fc8c 	uxtb.w	ip, ip
 8019226:	fb0c 2c06 	mla	ip, ip, r6, r2
 801922a:	b2bf      	uxth	r7, r7
 801922c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019230:	fb05 e506 	mla	r5, r5, r6, lr
 8019234:	f107 0e01 	add.w	lr, r7, #1
 8019238:	fa1f fc8c 	uxth.w	ip, ip
 801923c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019240:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8019244:	f10c 0701 	add.w	r7, ip, #1
 8019248:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801924c:	b2ad      	uxth	r5, r5
 801924e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019252:	ea47 070e 	orr.w	r7, r7, lr
 8019256:	f105 0e01 	add.w	lr, r5, #1
 801925a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801925e:	096d      	lsrs	r5, r5, #5
 8019260:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019264:	432f      	orrs	r7, r5
 8019266:	8007      	strh	r7, [r0, #0]
 8019268:	3002      	adds	r0, #2
 801926a:	3402      	adds	r4, #2
 801926c:	e7ac      	b.n	80191c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801926e:	f8b9 3000 	ldrh.w	r3, [r9]
 8019272:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019276:	eba3 0308 	sub.w	r3, r3, r8
 801927a:	eba6 0608 	sub.w	r6, r6, r8
 801927e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019282:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019286:	440e      	add	r6, r1
 8019288:	e797      	b.n	80191ba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801928a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801928e:	42a8      	cmp	r0, r5
 8019290:	d262      	bcs.n	8019358 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019292:	4631      	mov	r1, r6
 8019294:	9b00      	ldr	r3, [sp, #0]
 8019296:	eb00 0b03 	add.w	fp, r0, r3
 801929a:	4558      	cmp	r0, fp
 801929c:	d24e      	bcs.n	801933c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801929e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192a2:	b12b      	cbz	r3, 80192b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80192a4:	2bff      	cmp	r3, #255	; 0xff
 80192a6:	f8b4 e000 	ldrh.w	lr, [r4]
 80192aa:	d104      	bne.n	80192b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80192ac:	f8a0 e000 	strh.w	lr, [r0]
 80192b0:	3002      	adds	r0, #2
 80192b2:	3402      	adds	r4, #2
 80192b4:	e7f1      	b.n	801929a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80192b6:	b29f      	uxth	r7, r3
 80192b8:	43db      	mvns	r3, r3
 80192ba:	8802      	ldrh	r2, [r0, #0]
 80192bc:	b2db      	uxtb	r3, r3
 80192be:	1216      	asrs	r6, r2, #8
 80192c0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80192c4:	fb16 f603 	smulbb	r6, r6, r3
 80192c8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80192cc:	00d2      	lsls	r2, r2, #3
 80192ce:	b2d2      	uxtb	r2, r2
 80192d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80192d4:	fb1a fa03 	smulbb	sl, sl, r3
 80192d8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80192dc:	fb12 f303 	smulbb	r3, r2, r3
 80192e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80192e4:	fb0c 6c07 	mla	ip, ip, r7, r6
 80192e8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80192ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80192f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80192f4:	fa5f fe8e 	uxtb.w	lr, lr
 80192f8:	fb06 a607 	mla	r6, r6, r7, sl
 80192fc:	fb0e 3307 	mla	r3, lr, r7, r3
 8019300:	fa1f fc8c 	uxth.w	ip, ip
 8019304:	f10c 0201 	add.w	r2, ip, #1
 8019308:	b2b6      	uxth	r6, r6
 801930a:	b29b      	uxth	r3, r3
 801930c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019310:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8019314:	f106 0a01 	add.w	sl, r6, #1
 8019318:	f103 0c01 	add.w	ip, r3, #1
 801931c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019320:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019324:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019328:	0976      	lsrs	r6, r6, #5
 801932a:	ea4c 0c02 	orr.w	ip, ip, r2
 801932e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019332:	ea4c 0c06 	orr.w	ip, ip, r6
 8019336:	f8a0 c000 	strh.w	ip, [r0]
 801933a:	e7b9      	b.n	80192b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801933c:	f8b9 3000 	ldrh.w	r3, [r9]
 8019340:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019344:	eba3 0308 	sub.w	r3, r3, r8
 8019348:	eba6 0608 	sub.w	r6, r6, r8
 801934c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019350:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019354:	440e      	add	r6, r1
 8019356:	e79a      	b.n	801928e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8019358:	4b03      	ldr	r3, [pc, #12]	; (8019368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801935a:	6818      	ldr	r0, [r3, #0]
 801935c:	6803      	ldr	r3, [r0, #0]
 801935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019360:	4798      	blx	r3
 8019362:	b007      	add	sp, #28
 8019364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019368:	2001fda0 	.word	0x2001fda0
 801936c:	2001fd9a 	.word	0x2001fd9a

08019370 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019374:	b089      	sub	sp, #36	; 0x24
 8019376:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801937a:	4682      	mov	sl, r0
 801937c:	460f      	mov	r7, r1
 801937e:	4691      	mov	r9, r2
 8019380:	4698      	mov	r8, r3
 8019382:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019384:	2e00      	cmp	r6, #0
 8019386:	d036      	beq.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019388:	4608      	mov	r0, r1
 801938a:	f7fc f86d 	bl	8015468 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801938e:	4605      	mov	r5, r0
 8019390:	4638      	mov	r0, r7
 8019392:	f7fc f89d 	bl	80154d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019396:	f8ad 000e 	strh.w	r0, [sp, #14]
 801939a:	4638      	mov	r0, r7
 801939c:	f8ad 9008 	strh.w	r9, [sp, #8]
 80193a0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80193a4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80193a8:	f7fc f94a 	bl	8015640 <_ZNK8touchgfx6Bitmap7getDataEv>
 80193ac:	4605      	mov	r5, r0
 80193ae:	4638      	mov	r0, r7
 80193b0:	f7fc f976 	bl	80156a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80193b4:	4681      	mov	r9, r0
 80193b6:	4638      	mov	r0, r7
 80193b8:	f7fc f9c6 	bl	8015748 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80193bc:	280b      	cmp	r0, #11
 80193be:	d81a      	bhi.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80193c0:	e8df f000 	tbb	[pc, r0]
 80193c4:	1906aebd 	.word	0x1906aebd
 80193c8:	19191919 	.word	0x19191919
 80193cc:	b5191919 	.word	0xb5191919
 80193d0:	4bb0      	ldr	r3, [pc, #704]	; (8019694 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 80193d2:	6818      	ldr	r0, [r3, #0]
 80193d4:	6803      	ldr	r3, [r0, #0]
 80193d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193d8:	4798      	blx	r3
 80193da:	2eff      	cmp	r6, #255	; 0xff
 80193dc:	d121      	bne.n	8019422 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80193de:	0683      	lsls	r3, r0, #26
 80193e0:	d41f      	bmi.n	8019422 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80193e2:	4638      	mov	r0, r7
 80193e4:	f7fc f8f4 	bl	80155d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80193e8:	b940      	cbnz	r0, 80193fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80193ea:	4623      	mov	r3, r4
 80193ec:	aa02      	add	r2, sp, #8
 80193ee:	4629      	mov	r1, r5
 80193f0:	4650      	mov	r0, sl
 80193f2:	f7ff fa2f 	bl	8018854 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80193f6:	b009      	add	sp, #36	; 0x24
 80193f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193fc:	f10d 0818 	add.w	r8, sp, #24
 8019400:	4639      	mov	r1, r7
 8019402:	4640      	mov	r0, r8
 8019404:	af04      	add	r7, sp, #16
 8019406:	f7fc f897 	bl	8015538 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801940a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801940e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019412:	4638      	mov	r0, r7
 8019414:	4621      	mov	r1, r4
 8019416:	f7f7 fa5f 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 801941a:	4638      	mov	r0, r7
 801941c:	f7f7 fa9f 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019420:	b130      	cbz	r0, 8019430 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8019422:	4633      	mov	r3, r6
 8019424:	4622      	mov	r2, r4
 8019426:	a902      	add	r1, sp, #8
 8019428:	4628      	mov	r0, r5
 801942a:	f7ff f92d 	bl	8018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801942e:	e7e2      	b.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019430:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019434:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019438:	4293      	cmp	r3, r2
 801943a:	dd12      	ble.n	8019462 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801943c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019440:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019444:	1a9b      	subs	r3, r3, r2
 8019446:	f8ad 0018 	strh.w	r0, [sp, #24]
 801944a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801944e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019452:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019456:	4642      	mov	r2, r8
 8019458:	4633      	mov	r3, r6
 801945a:	a902      	add	r1, sp, #8
 801945c:	4628      	mov	r0, r5
 801945e:	f7ff f913 	bl	8018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019462:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019466:	f9b4 2000 	ldrsh.w	r2, [r4]
 801946a:	4293      	cmp	r3, r2
 801946c:	dd12      	ble.n	8019494 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801946e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019472:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8019476:	1a9b      	subs	r3, r3, r2
 8019478:	f8ad 2018 	strh.w	r2, [sp, #24]
 801947c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019480:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019484:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019488:	23ff      	movs	r3, #255	; 0xff
 801948a:	4642      	mov	r2, r8
 801948c:	a902      	add	r1, sp, #8
 801948e:	4628      	mov	r0, r5
 8019490:	f7ff f8fa 	bl	8018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019494:	463b      	mov	r3, r7
 8019496:	aa02      	add	r2, sp, #8
 8019498:	4629      	mov	r1, r5
 801949a:	4650      	mov	r0, sl
 801949c:	f7ff f9da 	bl	8018854 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80194a0:	88a2      	ldrh	r2, [r4, #4]
 80194a2:	8823      	ldrh	r3, [r4, #0]
 80194a4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80194a8:	4413      	add	r3, r2
 80194aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	440a      	add	r2, r1
 80194b2:	b292      	uxth	r2, r2
 80194b4:	b211      	sxth	r1, r2
 80194b6:	b218      	sxth	r0, r3
 80194b8:	4288      	cmp	r0, r1
 80194ba:	dd12      	ble.n	80194e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 80194bc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80194c0:	1a9b      	subs	r3, r3, r2
 80194c2:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80194c6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80194ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80194ce:	f8ad 001e 	strh.w	r0, [sp, #30]
 80194d2:	23ff      	movs	r3, #255	; 0xff
 80194d4:	4642      	mov	r2, r8
 80194d6:	a902      	add	r1, sp, #8
 80194d8:	4628      	mov	r0, r5
 80194da:	f8ad 601a 	strh.w	r6, [sp, #26]
 80194de:	f7ff f8d3 	bl	8018688 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80194e2:	88e2      	ldrh	r2, [r4, #6]
 80194e4:	8863      	ldrh	r3, [r4, #2]
 80194e6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80194ea:	4413      	add	r3, r2
 80194ec:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	440a      	add	r2, r1
 80194f4:	b292      	uxth	r2, r2
 80194f6:	b211      	sxth	r1, r2
 80194f8:	b218      	sxth	r0, r3
 80194fa:	4288      	cmp	r0, r1
 80194fc:	f77f af7b 	ble.w	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019500:	f9b4 6000 	ldrsh.w	r6, [r4]
 8019504:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019508:	1a9b      	subs	r3, r3, r2
 801950a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801950e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019512:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019516:	f8ad 001c 	strh.w	r0, [sp, #28]
 801951a:	23ff      	movs	r3, #255	; 0xff
 801951c:	4642      	mov	r2, r8
 801951e:	e782      	b.n	8019426 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8019520:	4633      	mov	r3, r6
 8019522:	4622      	mov	r2, r4
 8019524:	a902      	add	r1, sp, #8
 8019526:	4628      	mov	r0, r5
 8019528:	f7ff fa04 	bl	8018934 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801952c:	e763      	b.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801952e:	9600      	str	r6, [sp, #0]
 8019530:	4623      	mov	r3, r4
 8019532:	aa02      	add	r2, sp, #8
 8019534:	4649      	mov	r1, r9
 8019536:	4628      	mov	r0, r5
 8019538:	f7ff fddc 	bl	80190f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801953c:	e75b      	b.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801953e:	4638      	mov	r0, r7
 8019540:	f7fc f846 	bl	80155d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019544:	b950      	cbnz	r0, 801955c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8019546:	e9cd 6000 	strd	r6, r0, [sp]
 801954a:	f8da 3000 	ldr.w	r3, [sl]
 801954e:	aa02      	add	r2, sp, #8
 8019550:	68de      	ldr	r6, [r3, #12]
 8019552:	4629      	mov	r1, r5
 8019554:	4623      	mov	r3, r4
 8019556:	4650      	mov	r0, sl
 8019558:	47b0      	blx	r6
 801955a:	e74c      	b.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801955c:	f10d 0818 	add.w	r8, sp, #24
 8019560:	4639      	mov	r1, r7
 8019562:	4640      	mov	r0, r8
 8019564:	af04      	add	r7, sp, #16
 8019566:	f7fb ffe7 	bl	8015538 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801956a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801956e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019572:	4638      	mov	r0, r7
 8019574:	4621      	mov	r1, r4
 8019576:	f7f7 f9af 	bl	80108d8 <_ZN8touchgfx4RectaNERKS0_>
 801957a:	4638      	mov	r0, r7
 801957c:	f7f7 f9ef 	bl	801095e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019580:	b138      	cbz	r0, 8019592 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8019582:	4623      	mov	r3, r4
 8019584:	9600      	str	r6, [sp, #0]
 8019586:	aa02      	add	r2, sp, #8
 8019588:	4649      	mov	r1, r9
 801958a:	4628      	mov	r0, r5
 801958c:	f7ff fdca 	bl	8019124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019590:	e731      	b.n	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019592:	e9cd 6000 	strd	r6, r0, [sp]
 8019596:	f8da 3000 	ldr.w	r3, [sl]
 801959a:	aa02      	add	r2, sp, #8
 801959c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80195a0:	4629      	mov	r1, r5
 80195a2:	463b      	mov	r3, r7
 80195a4:	4650      	mov	r0, sl
 80195a6:	47d8      	blx	fp
 80195a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80195ac:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80195b0:	4293      	cmp	r3, r2
 80195b2:	dd13      	ble.n	80195dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 80195b4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80195b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80195bc:	1a9b      	subs	r3, r3, r2
 80195be:	f8ad 0018 	strh.w	r0, [sp, #24]
 80195c2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80195c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80195ca:	f8ad 301e 	strh.w	r3, [sp, #30]
 80195ce:	9600      	str	r6, [sp, #0]
 80195d0:	4643      	mov	r3, r8
 80195d2:	aa02      	add	r2, sp, #8
 80195d4:	4649      	mov	r1, r9
 80195d6:	4628      	mov	r0, r5
 80195d8:	f7ff fda4 	bl	8019124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80195dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80195e0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80195e4:	4293      	cmp	r3, r2
 80195e6:	dd13      	ble.n	8019610 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 80195e8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80195ec:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80195f0:	1a9b      	subs	r3, r3, r2
 80195f2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80195f6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80195fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80195fe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019602:	9600      	str	r6, [sp, #0]
 8019604:	4643      	mov	r3, r8
 8019606:	aa02      	add	r2, sp, #8
 8019608:	4649      	mov	r1, r9
 801960a:	4628      	mov	r0, r5
 801960c:	f7ff fd8a 	bl	8019124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019610:	88a2      	ldrh	r2, [r4, #4]
 8019612:	8823      	ldrh	r3, [r4, #0]
 8019614:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019618:	4413      	add	r3, r2
 801961a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801961e:	b29b      	uxth	r3, r3
 8019620:	440a      	add	r2, r1
 8019622:	b292      	uxth	r2, r2
 8019624:	b211      	sxth	r1, r2
 8019626:	b218      	sxth	r0, r3
 8019628:	4288      	cmp	r0, r1
 801962a:	dd13      	ble.n	8019654 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801962c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8019630:	1a9b      	subs	r3, r3, r2
 8019632:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8019636:	f8ad 1018 	strh.w	r1, [sp, #24]
 801963a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801963e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019642:	9600      	str	r6, [sp, #0]
 8019644:	4643      	mov	r3, r8
 8019646:	aa02      	add	r2, sp, #8
 8019648:	4649      	mov	r1, r9
 801964a:	4628      	mov	r0, r5
 801964c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019650:	f7ff fd68 	bl	8019124 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8019654:	88e2      	ldrh	r2, [r4, #6]
 8019656:	8863      	ldrh	r3, [r4, #2]
 8019658:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801965c:	4413      	add	r3, r2
 801965e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019662:	b29b      	uxth	r3, r3
 8019664:	440a      	add	r2, r1
 8019666:	b292      	uxth	r2, r2
 8019668:	b211      	sxth	r1, r2
 801966a:	b218      	sxth	r0, r3
 801966c:	4288      	cmp	r0, r1
 801966e:	f77f aec2 	ble.w	80193f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019672:	f9b4 7000 	ldrsh.w	r7, [r4]
 8019676:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801967a:	1a9b      	subs	r3, r3, r2
 801967c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019680:	f8ad 7018 	strh.w	r7, [sp, #24]
 8019684:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019688:	f8ad 001c 	strh.w	r0, [sp, #28]
 801968c:	9600      	str	r6, [sp, #0]
 801968e:	4643      	mov	r3, r8
 8019690:	e779      	b.n	8019586 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8019692:	bf00      	nop
 8019694:	2001fda0 	.word	0x2001fda0

08019698 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8019698:	b180      	cbz	r0, 80196bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801969a:	2903      	cmp	r1, #3
 801969c:	d81c      	bhi.n	80196d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801969e:	e8df f001 	tbb	[pc, r1]
 80196a2:	1d02      	.short	0x1d02
 80196a4:	1f08      	.short	0x1f08
 80196a6:	4b10      	ldr	r3, [pc, #64]	; (80196e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80196a8:	8818      	ldrh	r0, [r3, #0]
 80196aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80196ae:	4240      	negs	r0, r0
 80196b0:	4770      	bx	lr
 80196b2:	4b0d      	ldr	r3, [pc, #52]	; (80196e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80196b4:	8818      	ldrh	r0, [r3, #0]
 80196b6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80196ba:	4770      	bx	lr
 80196bc:	2903      	cmp	r1, #3
 80196be:	d80b      	bhi.n	80196d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80196c0:	a301      	add	r3, pc, #4	; (adr r3, 80196c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 80196c2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80196c6:	bf00      	nop
 80196c8:	080196dd 	.word	0x080196dd
 80196cc:	080196b3 	.word	0x080196b3
 80196d0:	080196e1 	.word	0x080196e1
 80196d4:	080196a7 	.word	0x080196a7
 80196d8:	2000      	movs	r0, #0
 80196da:	4770      	bx	lr
 80196dc:	2001      	movs	r0, #1
 80196de:	4770      	bx	lr
 80196e0:	f04f 30ff 	mov.w	r0, #4294967295
 80196e4:	4770      	bx	lr
 80196e6:	bf00      	nop
 80196e8:	2001fd9a 	.word	0x2001fd9a

080196ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80196ec:	b180      	cbz	r0, 8019710 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80196ee:	2903      	cmp	r1, #3
 80196f0:	d81c      	bhi.n	801972c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80196f2:	e8df f001 	tbb	[pc, r1]
 80196f6:	021d      	.short	0x021d
 80196f8:	071f      	.short	0x071f
 80196fa:	4b10      	ldr	r3, [pc, #64]	; (801973c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80196fc:	8818      	ldrh	r0, [r3, #0]
 80196fe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8019702:	4770      	bx	lr
 8019704:	4b0d      	ldr	r3, [pc, #52]	; (801973c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8019706:	8818      	ldrh	r0, [r3, #0]
 8019708:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801970c:	4240      	negs	r0, r0
 801970e:	4770      	bx	lr
 8019710:	2903      	cmp	r1, #3
 8019712:	d80b      	bhi.n	801972c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8019714:	a301      	add	r3, pc, #4	; (adr r3, 801971c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8019716:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801971a:	bf00      	nop
 801971c:	080196fb 	.word	0x080196fb
 8019720:	08019735 	.word	0x08019735
 8019724:	08019705 	.word	0x08019705
 8019728:	08019731 	.word	0x08019731
 801972c:	2000      	movs	r0, #0
 801972e:	4770      	bx	lr
 8019730:	2001      	movs	r0, #1
 8019732:	4770      	bx	lr
 8019734:	f04f 30ff 	mov.w	r0, #4294967295
 8019738:	4770      	bx	lr
 801973a:	bf00      	nop
 801973c:	2001fd9a 	.word	0x2001fd9a

08019740 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019744:	b099      	sub	sp, #100	; 0x64
 8019746:	910b      	str	r1, [sp, #44]	; 0x2c
 8019748:	a914      	add	r1, sp, #80	; 0x50
 801974a:	e881 000c 	stmia.w	r1, {r2, r3}
 801974e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8019752:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8019756:	f891 900d 	ldrb.w	r9, [r1, #13]
 801975a:	9309      	str	r3, [sp, #36]	; 0x24
 801975c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8019760:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8019764:	9310      	str	r3, [sp, #64]	; 0x40
 8019766:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801976a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801976e:	930c      	str	r3, [sp, #48]	; 0x30
 8019770:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8019774:	798f      	ldrb	r7, [r1, #6]
 8019776:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801977a:	431f      	orrs	r7, r3
 801977c:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8019780:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8019784:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8019788:	f000 8194 	beq.w	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801978c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8019790:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019794:	f891 9007 	ldrb.w	r9, [r1, #7]
 8019798:	ea59 0903 	orrs.w	r9, r9, r3
 801979c:	f000 818a 	beq.w	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80197a0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80197a4:	b29b      	uxth	r3, r3
 80197a6:	2d00      	cmp	r5, #0
 80197a8:	f000 812f 	beq.w	8019a0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 80197ac:	1aed      	subs	r5, r5, r3
 80197ae:	b2ad      	uxth	r5, r5
 80197b0:	042b      	lsls	r3, r5, #16
 80197b2:	d502      	bpl.n	80197ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80197b4:	1b64      	subs	r4, r4, r5
 80197b6:	2500      	movs	r5, #0
 80197b8:	b224      	sxth	r4, r4
 80197ba:	f9b2 1000 	ldrsh.w	r1, [r2]
 80197be:	a814      	add	r0, sp, #80	; 0x50
 80197c0:	428c      	cmp	r4, r1
 80197c2:	b28b      	uxth	r3, r1
 80197c4:	bfbf      	itttt	lt
 80197c6:	18ed      	addlt	r5, r5, r3
 80197c8:	1b2c      	sublt	r4, r5, r4
 80197ca:	b2a5      	uxthlt	r5, r4
 80197cc:	460c      	movlt	r4, r1
 80197ce:	8891      	ldrh	r1, [r2, #4]
 80197d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80197d4:	440b      	add	r3, r1
 80197d6:	b21b      	sxth	r3, r3
 80197d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80197da:	88d3      	ldrh	r3, [r2, #6]
 80197dc:	8852      	ldrh	r2, [r2, #2]
 80197de:	4621      	mov	r1, r4
 80197e0:	4413      	add	r3, r2
 80197e2:	b21b      	sxth	r3, r3
 80197e4:	930d      	str	r3, [sp, #52]	; 0x34
 80197e6:	4bbd      	ldr	r3, [pc, #756]	; (8019adc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 80197e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197ea:	f893 b000 	ldrb.w	fp, [r3]
 80197ee:	f10b 3cff 	add.w	ip, fp, #4294967295
 80197f2:	f1dc 0300 	rsbs	r3, ip, #0
 80197f6:	eb43 030c 	adc.w	r3, r3, ip
 80197fa:	930e      	str	r3, [sp, #56]	; 0x38
 80197fc:	4653      	mov	r3, sl
 80197fe:	f7f8 fef7 	bl	80125f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019802:	4621      	mov	r1, r4
 8019804:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8019808:	4653      	mov	r3, sl
 801980a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801980c:	a814      	add	r0, sp, #80	; 0x50
 801980e:	f7f8 ff0c 	bl	801262a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019812:	a918      	add	r1, sp, #96	; 0x60
 8019814:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019818:	a817      	add	r0, sp, #92	; 0x5c
 801981a:	f7f9 f82d 	bl	8012878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801981e:	f1ba 0f00 	cmp.w	sl, #0
 8019822:	f040 80f5 	bne.w	8019a10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 8019826:	f1bb 0f01 	cmp.w	fp, #1
 801982a:	f040 80f9 	bne.w	8019a20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801982e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019830:	2b00      	cmp	r3, #0
 8019832:	f040 8144 	bne.w	8019abe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 8019836:	b2ba      	uxth	r2, r7
 8019838:	b905      	cbnz	r5, 801983c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801983a:	b16e      	cbz	r6, 8019858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801983c:	4631      	mov	r1, r6
 801983e:	fb06 5302 	mla	r3, r6, r2, r5
 8019842:	fb08 f303 	mul.w	r3, r8, r3
 8019846:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8019848:	f003 0607 	and.w	r6, r3, #7
 801984c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8019850:	9328      	str	r3, [sp, #160]	; 0xa0
 8019852:	eba9 0301 	sub.w	r3, r9, r1
 8019856:	930a      	str	r3, [sp, #40]	; 0x28
 8019858:	4651      	mov	r1, sl
 801985a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801985c:	f7ff ff1c 	bl	8019698 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8019860:	4681      	mov	r9, r0
 8019862:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019864:	f7ff ff42 	bl	80196ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8019868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801986a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801986c:	4683      	mov	fp, r0
 801986e:	eba3 0a01 	sub.w	sl, r3, r1
 8019872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019874:	459a      	cmp	sl, r3
 8019876:	bfa8      	it	ge
 8019878:	469a      	movge	sl, r3
 801987a:	f1ba 0f00 	cmp.w	sl, #0
 801987e:	f340 8119 	ble.w	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8019882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019884:	1b64      	subs	r4, r4, r5
 8019886:	1b1c      	subs	r4, r3, r4
 8019888:	42bc      	cmp	r4, r7
 801988a:	bfd4      	ite	le
 801988c:	ebc5 0504 	rsble	r5, r5, r4
 8019890:	ebc5 0507 	rsbgt	r5, r5, r7
 8019894:	2d00      	cmp	r5, #0
 8019896:	f340 810d 	ble.w	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801989a:	1b52      	subs	r2, r2, r5
 801989c:	fb08 f302 	mul.w	r3, r8, r2
 80198a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80198a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	f040 8115 	bne.w	8019ad4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 80198aa:	4b8d      	ldr	r3, [pc, #564]	; (8019ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80198ac:	6818      	ldr	r0, [r3, #0]
 80198ae:	6803      	ldr	r3, [r0, #0]
 80198b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198b2:	4798      	blx	r3
 80198b4:	2301      	movs	r3, #1
 80198b6:	fa03 f308 	lsl.w	r3, r3, r8
 80198ba:	4a8a      	ldr	r2, [pc, #552]	; (8019ae4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80198bc:	3b01      	subs	r3, #1
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	8811      	ldrh	r1, [r2, #0]
 80198c2:	930e      	str	r3, [sp, #56]	; 0x38
 80198c4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80198c8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80198cc:	fb01 2303 	mla	r3, r1, r3, r2
 80198d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80198d4:	930a      	str	r3, [sp, #40]	; 0x28
 80198d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80198d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80198dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80198de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80198e0:	0a19      	lsrs	r1, r3, #8
 80198e2:	b2cb      	uxtb	r3, r1
 80198e4:	9312      	str	r3, [sp, #72]	; 0x48
 80198e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80198e8:	b2db      	uxtb	r3, r3
 80198ea:	9311      	str	r3, [sp, #68]	; 0x44
 80198ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80198ee:	095a      	lsrs	r2, r3, #5
 80198f0:	4b7d      	ldr	r3, [pc, #500]	; (8019ae8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80198f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80198f6:	400b      	ands	r3, r1
 80198f8:	4313      	orrs	r3, r2
 80198fa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80198fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019900:	4313      	orrs	r3, r2
 8019902:	b29b      	uxth	r3, r3
 8019904:	9310      	str	r3, [sp, #64]	; 0x40
 8019906:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019908:	781a      	ldrb	r2, [r3, #0]
 801990a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801990e:	fb05 b919 	mls	r9, r5, r9, fp
 8019912:	fb03 fb05 	mul.w	fp, r3, r5
 8019916:	4132      	asrs	r2, r6
 8019918:	b2d2      	uxtb	r2, r2
 801991a:	930d      	str	r3, [sp, #52]	; 0x34
 801991c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8019920:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019924:	f0c0 80f3 	bcc.w	8019b0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8019928:	46ae      	mov	lr, r5
 801992a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801992e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8019932:	f0c0 80db 	bcc.w	8019aec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8019936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019938:	4013      	ands	r3, r2
 801993a:	d055      	beq.n	80199e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801993c:	20ff      	movs	r0, #255	; 0xff
 801993e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019940:	fb90 f1f1 	sdiv	r1, r0, r1
 8019944:	434b      	muls	r3, r1
 8019946:	2bfe      	cmp	r3, #254	; 0xfe
 8019948:	dd03      	ble.n	8019952 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801994a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801994c:	4281      	cmp	r1, r0
 801994e:	f000 80c3 	beq.w	8019ad8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8019952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019954:	f8bc 4000 	ldrh.w	r4, [ip]
 8019958:	fb11 f303 	smulbb	r3, r1, r3
 801995c:	b29b      	uxth	r3, r3
 801995e:	1c59      	adds	r1, r3, #1
 8019960:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019964:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019968:	b29f      	uxth	r7, r3
 801996a:	43db      	mvns	r3, r3
 801996c:	b2db      	uxtb	r3, r3
 801996e:	9309      	str	r3, [sp, #36]	; 0x24
 8019970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019972:	1220      	asrs	r0, r4, #8
 8019974:	fb13 f907 	smulbb	r9, r3, r7
 8019978:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801997e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8019982:	fb00 9003 	mla	r0, r0, r3, r9
 8019986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019988:	10e1      	asrs	r1, r4, #3
 801998a:	fb13 f907 	smulbb	r9, r3, r7
 801998e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019994:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8019998:	fb01 9103 	mla	r1, r1, r3, r9
 801999c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801999e:	00e4      	lsls	r4, r4, #3
 80199a0:	fb13 f707 	smulbb	r7, r3, r7
 80199a4:	b2e4      	uxtb	r4, r4
 80199a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80199ac:	fb04 7403 	mla	r4, r4, r3, r7
 80199b0:	b280      	uxth	r0, r0
 80199b2:	b2a4      	uxth	r4, r4
 80199b4:	1c43      	adds	r3, r0, #1
 80199b6:	f104 0901 	add.w	r9, r4, #1
 80199ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80199be:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80199c2:	b289      	uxth	r1, r1
 80199c4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80199c8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80199cc:	ea49 0000 	orr.w	r0, r9, r0
 80199d0:	f101 0901 	add.w	r9, r1, #1
 80199d4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80199d8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80199dc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80199e0:	ea40 0009 	orr.w	r0, r0, r9
 80199e4:	f8ac 0000 	strh.w	r0, [ip]
 80199e8:	4446      	add	r6, r8
 80199ea:	b2b6      	uxth	r6, r6
 80199ec:	2e07      	cmp	r6, #7
 80199ee:	bf89      	itett	hi
 80199f0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80199f2:	fa42 f208 	asrls.w	r2, r2, r8
 80199f6:	785a      	ldrbhi	r2, [r3, #1]
 80199f8:	3301      	addhi	r3, #1
 80199fa:	bf88      	it	hi
 80199fc:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80199fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a00:	bf94      	ite	ls
 8019a02:	b2d2      	uxtbls	r2, r2
 8019a04:	2600      	movhi	r6, #0
 8019a06:	449c      	add	ip, r3
 8019a08:	e791      	b.n	801992e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8019a0a:	441c      	add	r4, r3
 8019a0c:	b224      	sxth	r4, r4
 8019a0e:	e6d4      	b.n	80197ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8019a10:	f1ba 0f01 	cmp.w	sl, #1
 8019a14:	f47f af0b 	bne.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a18:	f1bb 0f01 	cmp.w	fp, #1
 8019a1c:	f47f af07 	bne.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a20:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8019ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8019a24:	f8db 0000 	ldr.w	r0, [fp]
 8019a28:	6803      	ldr	r3, [r0, #0]
 8019a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a2c:	4798      	blx	r3
 8019a2e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8019a32:	465a      	mov	r2, fp
 8019a34:	d006      	beq.n	8019a44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8019a36:	f1b8 0f04 	cmp.w	r8, #4
 8019a3a:	d13e      	bne.n	8019aba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8019a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a3e:	3300      	adds	r3, #0
 8019a40:	bf18      	it	ne
 8019a42:	2301      	movne	r3, #1
 8019a44:	0580      	lsls	r0, r0, #22
 8019a46:	d56b      	bpl.n	8019b20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 8019a48:	f1b8 0f08 	cmp.w	r8, #8
 8019a4c:	d168      	bne.n	8019b20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	bf0c      	ite	eq
 8019a52:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8019a56:	f44f 7180 	movne.w	r1, #256	; 0x100
 8019a5a:	2d00      	cmp	r5, #0
 8019a5c:	f47f aee7 	bne.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a60:	2e00      	cmp	r6, #0
 8019a62:	f47f aee4 	bne.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a66:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019a68:	19e3      	adds	r3, r4, r7
 8019a6a:	4283      	cmp	r3, r0
 8019a6c:	f73f aedf 	bgt.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019a74:	444b      	add	r3, r9
 8019a76:	4283      	cmp	r3, r0
 8019a78:	f73f aed9 	bgt.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019a7c:	2500      	movs	r5, #0
 8019a7e:	6810      	ldr	r0, [r2, #0]
 8019a80:	b2bf      	uxth	r7, r7
 8019a82:	6804      	ldr	r4, [r0, #0]
 8019a84:	f1b8 0f08 	cmp.w	r8, #8
 8019a88:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8019a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a8e:	bf1c      	itt	ne
 8019a90:	3701      	addne	r7, #1
 8019a92:	f027 0701 	bicne.w	r7, r7, #1
 8019a96:	9104      	str	r1, [sp, #16]
 8019a98:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019a9a:	bf18      	it	ne
 8019a9c:	b2bf      	uxthne	r7, r7
 8019a9e:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8019aa2:	e9cd 7900 	strd	r7, r9, [sp]
 8019aa6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8019aaa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8019aae:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8019ab0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019ab2:	47a0      	blx	r4
 8019ab4:	b019      	add	sp, #100	; 0x64
 8019ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aba:	2300      	movs	r3, #0
 8019abc:	e7c2      	b.n	8019a44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8019abe:	2208      	movs	r2, #8
 8019ac0:	fb92 f3f8 	sdiv	r3, r2, r8
 8019ac4:	1e5a      	subs	r2, r3, #1
 8019ac6:	443a      	add	r2, r7
 8019ac8:	fb92 f2f3 	sdiv	r2, r2, r3
 8019acc:	fb12 f203 	smulbb	r2, r2, r3
 8019ad0:	b292      	uxth	r2, r2
 8019ad2:	e6b1      	b.n	8019838 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8019ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019ad6:	e6ed      	b.n	80198b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8019ad8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019ada:	e783      	b.n	80199e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8019adc:	2001fd98 	.word	0x2001fd98
 8019ae0:	2001fda0 	.word	0x2001fda0
 8019ae4:	2001fd9a 	.word	0x2001fd9a
 8019ae8:	00fff800 	.word	0x00fff800
 8019aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019aee:	b153      	cbz	r3, 8019b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 8019af0:	441e      	add	r6, r3
 8019af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019af4:	b2b6      	uxth	r6, r6
 8019af6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8019afa:	781a      	ldrb	r2, [r3, #0]
 8019afc:	f006 0607 	and.w	r6, r6, #7
 8019b00:	4132      	asrs	r2, r6
 8019b02:	9328      	str	r3, [sp, #160]	; 0xa0
 8019b04:	b2d2      	uxtb	r2, r2
 8019b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b08:	445b      	add	r3, fp
 8019b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8019b0c:	e708      	b.n	8019920 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8019b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d1cf      	bne.n	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8019b14:	4b05      	ldr	r3, [pc, #20]	; (8019b2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 8019b16:	6818      	ldr	r0, [r3, #0]
 8019b18:	6803      	ldr	r3, [r0, #0]
 8019b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b1c:	4798      	blx	r3
 8019b1e:	e7c9      	b.n	8019ab4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	f43f ae84 	beq.w	801982e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8019b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019b2a:	e796      	b.n	8019a5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 8019b2c:	2001fda0 	.word	0x2001fda0

08019b30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8019b30:	b538      	push	{r3, r4, r5, lr}
 8019b32:	4605      	mov	r5, r0
 8019b34:	4c13      	ldr	r4, [pc, #76]	; (8019b84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 8019b36:	e8d4 3f8f 	ldab	r3, [r4]
 8019b3a:	07da      	lsls	r2, r3, #31
 8019b3c:	d40b      	bmi.n	8019b56 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8019b3e:	4620      	mov	r0, r4
 8019b40:	f007 fa45 	bl	8020fce <__cxa_guard_acquire>
 8019b44:	b138      	cbz	r0, 8019b56 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8019b46:	4620      	mov	r0, r4
 8019b48:	f007 fa4d 	bl	8020fe6 <__cxa_guard_release>
 8019b4c:	4a0e      	ldr	r2, [pc, #56]	; (8019b88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8019b4e:	490f      	ldr	r1, [pc, #60]	; (8019b8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8019b50:	480f      	ldr	r0, [pc, #60]	; (8019b90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8019b52:	f007 fa35 	bl	8020fc0 <__aeabi_atexit>
 8019b56:	4c0f      	ldr	r4, [pc, #60]	; (8019b94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8019b58:	e8d4 3f8f 	ldab	r3, [r4]
 8019b5c:	07db      	lsls	r3, r3, #31
 8019b5e:	d40b      	bmi.n	8019b78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8019b60:	4620      	mov	r0, r4
 8019b62:	f007 fa34 	bl	8020fce <__cxa_guard_acquire>
 8019b66:	b138      	cbz	r0, 8019b78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8019b68:	4620      	mov	r0, r4
 8019b6a:	f007 fa3c 	bl	8020fe6 <__cxa_guard_release>
 8019b6e:	4a06      	ldr	r2, [pc, #24]	; (8019b88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8019b70:	4909      	ldr	r1, [pc, #36]	; (8019b98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8019b72:	480a      	ldr	r0, [pc, #40]	; (8019b9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8019b74:	f007 fa24 	bl	8020fc0 <__aeabi_atexit>
 8019b78:	4b05      	ldr	r3, [pc, #20]	; (8019b90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8019b7a:	612b      	str	r3, [r5, #16]
 8019b7c:	4b07      	ldr	r3, [pc, #28]	; (8019b9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8019b7e:	616b      	str	r3, [r5, #20]
 8019b80:	bd38      	pop	{r3, r4, r5, pc}
 8019b82:	bf00      	nop
 8019b84:	2001fe6c 	.word	0x2001fe6c
 8019b88:	20000000 	.word	0x20000000
 8019b8c:	08017d57 	.word	0x08017d57
 8019b90:	20000060 	.word	0x20000060
 8019b94:	2001fe70 	.word	0x2001fe70
 8019b98:	08017d55 	.word	0x08017d55
 8019b9c:	20000064 	.word	0x20000064

08019ba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8019ba0:	b538      	push	{r3, r4, r5, lr}
 8019ba2:	4605      	mov	r5, r0
 8019ba4:	4c13      	ldr	r4, [pc, #76]	; (8019bf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 8019ba6:	e8d4 3f8f 	ldab	r3, [r4]
 8019baa:	07da      	lsls	r2, r3, #31
 8019bac:	d40b      	bmi.n	8019bc6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8019bae:	4620      	mov	r0, r4
 8019bb0:	f007 fa0d 	bl	8020fce <__cxa_guard_acquire>
 8019bb4:	b138      	cbz	r0, 8019bc6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	f007 fa15 	bl	8020fe6 <__cxa_guard_release>
 8019bbc:	4a0e      	ldr	r2, [pc, #56]	; (8019bf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8019bbe:	490f      	ldr	r1, [pc, #60]	; (8019bfc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8019bc0:	480f      	ldr	r0, [pc, #60]	; (8019c00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8019bc2:	f007 f9fd 	bl	8020fc0 <__aeabi_atexit>
 8019bc6:	4c0f      	ldr	r4, [pc, #60]	; (8019c04 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8019bc8:	e8d4 3f8f 	ldab	r3, [r4]
 8019bcc:	07db      	lsls	r3, r3, #31
 8019bce:	d40b      	bmi.n	8019be8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	f007 f9fc 	bl	8020fce <__cxa_guard_acquire>
 8019bd6:	b138      	cbz	r0, 8019be8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f007 fa04 	bl	8020fe6 <__cxa_guard_release>
 8019bde:	4a06      	ldr	r2, [pc, #24]	; (8019bf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8019be0:	4909      	ldr	r1, [pc, #36]	; (8019c08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8019be2:	480a      	ldr	r0, [pc, #40]	; (8019c0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8019be4:	f007 f9ec 	bl	8020fc0 <__aeabi_atexit>
 8019be8:	4b05      	ldr	r3, [pc, #20]	; (8019c00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8019bea:	60ab      	str	r3, [r5, #8]
 8019bec:	4b07      	ldr	r3, [pc, #28]	; (8019c0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8019bee:	60eb      	str	r3, [r5, #12]
 8019bf0:	bd38      	pop	{r3, r4, r5, pc}
 8019bf2:	bf00      	nop
 8019bf4:	2001fe44 	.word	0x2001fe44
 8019bf8:	20000000 	.word	0x20000000
 8019bfc:	08017d5b 	.word	0x08017d5b
 8019c00:	20000038 	.word	0x20000038
 8019c04:	2001fe48 	.word	0x2001fe48
 8019c08:	08017d59 	.word	0x08017d59
 8019c0c:	2000003c 	.word	0x2000003c

08019c10 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8019c10:	b510      	push	{r4, lr}
 8019c12:	4604      	mov	r4, r0
 8019c14:	f7ff ff8c 	bl	8019b30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8019c18:	4620      	mov	r0, r4
 8019c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c1e:	f7ff bfbf 	b.w	8019ba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08019c24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019c24:	b538      	push	{r3, r4, r5, lr}
 8019c26:	4605      	mov	r5, r0
 8019c28:	4c13      	ldr	r4, [pc, #76]	; (8019c78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 8019c2a:	e8d4 3f8f 	ldab	r3, [r4]
 8019c2e:	07da      	lsls	r2, r3, #31
 8019c30:	d40b      	bmi.n	8019c4a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8019c32:	4620      	mov	r0, r4
 8019c34:	f007 f9cb 	bl	8020fce <__cxa_guard_acquire>
 8019c38:	b138      	cbz	r0, 8019c4a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	f007 f9d3 	bl	8020fe6 <__cxa_guard_release>
 8019c40:	4a0e      	ldr	r2, [pc, #56]	; (8019c7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8019c42:	490f      	ldr	r1, [pc, #60]	; (8019c80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019c44:	480f      	ldr	r0, [pc, #60]	; (8019c84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8019c46:	f007 f9bb 	bl	8020fc0 <__aeabi_atexit>
 8019c4a:	4c0f      	ldr	r4, [pc, #60]	; (8019c88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019c4c:	e8d4 3f8f 	ldab	r3, [r4]
 8019c50:	07db      	lsls	r3, r3, #31
 8019c52:	d40b      	bmi.n	8019c6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8019c54:	4620      	mov	r0, r4
 8019c56:	f007 f9ba 	bl	8020fce <__cxa_guard_acquire>
 8019c5a:	b138      	cbz	r0, 8019c6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	f007 f9c2 	bl	8020fe6 <__cxa_guard_release>
 8019c62:	4a06      	ldr	r2, [pc, #24]	; (8019c7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8019c64:	4909      	ldr	r1, [pc, #36]	; (8019c8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019c66:	480a      	ldr	r0, [pc, #40]	; (8019c90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8019c68:	f007 f9aa 	bl	8020fc0 <__aeabi_atexit>
 8019c6c:	4b05      	ldr	r3, [pc, #20]	; (8019c84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8019c6e:	622b      	str	r3, [r5, #32]
 8019c70:	4b07      	ldr	r3, [pc, #28]	; (8019c90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8019c72:	626b      	str	r3, [r5, #36]	; 0x24
 8019c74:	bd38      	pop	{r3, r4, r5, pc}
 8019c76:	bf00      	nop
 8019c78:	2001fe74 	.word	0x2001fe74
 8019c7c:	20000000 	.word	0x20000000
 8019c80:	08017d4f 	.word	0x08017d4f
 8019c84:	20000068 	.word	0x20000068
 8019c88:	2001fe78 	.word	0x2001fe78
 8019c8c:	08017d4d 	.word	0x08017d4d
 8019c90:	2000006c 	.word	0x2000006c

08019c94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4605      	mov	r5, r0
 8019c98:	4c13      	ldr	r4, [pc, #76]	; (8019ce8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 8019c9a:	e8d4 3f8f 	ldab	r3, [r4]
 8019c9e:	07da      	lsls	r2, r3, #31
 8019ca0:	d40b      	bmi.n	8019cba <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	f007 f993 	bl	8020fce <__cxa_guard_acquire>
 8019ca8:	b138      	cbz	r0, 8019cba <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8019caa:	4620      	mov	r0, r4
 8019cac:	f007 f99b 	bl	8020fe6 <__cxa_guard_release>
 8019cb0:	4a0e      	ldr	r2, [pc, #56]	; (8019cec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8019cb2:	490f      	ldr	r1, [pc, #60]	; (8019cf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019cb4:	480f      	ldr	r0, [pc, #60]	; (8019cf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8019cb6:	f007 f983 	bl	8020fc0 <__aeabi_atexit>
 8019cba:	4c0f      	ldr	r4, [pc, #60]	; (8019cf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019cbc:	e8d4 3f8f 	ldab	r3, [r4]
 8019cc0:	07db      	lsls	r3, r3, #31
 8019cc2:	d40b      	bmi.n	8019cdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	f007 f982 	bl	8020fce <__cxa_guard_acquire>
 8019cca:	b138      	cbz	r0, 8019cdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8019ccc:	4620      	mov	r0, r4
 8019cce:	f007 f98a 	bl	8020fe6 <__cxa_guard_release>
 8019cd2:	4a06      	ldr	r2, [pc, #24]	; (8019cec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8019cd4:	4909      	ldr	r1, [pc, #36]	; (8019cfc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8019cd6:	480a      	ldr	r0, [pc, #40]	; (8019d00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019cd8:	f007 f972 	bl	8020fc0 <__aeabi_atexit>
 8019cdc:	4b05      	ldr	r3, [pc, #20]	; (8019cf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8019cde:	61ab      	str	r3, [r5, #24]
 8019ce0:	4b07      	ldr	r3, [pc, #28]	; (8019d00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019ce2:	61eb      	str	r3, [r5, #28]
 8019ce4:	bd38      	pop	{r3, r4, r5, pc}
 8019ce6:	bf00      	nop
 8019ce8:	2001fe4c 	.word	0x2001fe4c
 8019cec:	20000000 	.word	0x20000000
 8019cf0:	08017d53 	.word	0x08017d53
 8019cf4:	20000040 	.word	0x20000040
 8019cf8:	2001fe50 	.word	0x2001fe50
 8019cfc:	08017d51 	.word	0x08017d51
 8019d00:	20000044 	.word	0x20000044

08019d04 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8019d04:	b510      	push	{r4, lr}
 8019d06:	4604      	mov	r4, r0
 8019d08:	f7ff ff8c 	bl	8019c24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d12:	f7ff bfbf 	b.w	8019c94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08019d18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	4c13      	ldr	r4, [pc, #76]	; (8019d6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 8019d1e:	e8d4 3f8f 	ldab	r3, [r4]
 8019d22:	07da      	lsls	r2, r3, #31
 8019d24:	d40b      	bmi.n	8019d3e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8019d26:	4620      	mov	r0, r4
 8019d28:	f007 f951 	bl	8020fce <__cxa_guard_acquire>
 8019d2c:	b138      	cbz	r0, 8019d3e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8019d2e:	4620      	mov	r0, r4
 8019d30:	f007 f959 	bl	8020fe6 <__cxa_guard_release>
 8019d34:	4a0e      	ldr	r2, [pc, #56]	; (8019d70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019d36:	490f      	ldr	r1, [pc, #60]	; (8019d74 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019d38:	480f      	ldr	r0, [pc, #60]	; (8019d78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019d3a:	f007 f941 	bl	8020fc0 <__aeabi_atexit>
 8019d3e:	4c0f      	ldr	r4, [pc, #60]	; (8019d7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019d40:	e8d4 3f8f 	ldab	r3, [r4]
 8019d44:	07db      	lsls	r3, r3, #31
 8019d46:	d40b      	bmi.n	8019d60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8019d48:	4620      	mov	r0, r4
 8019d4a:	f007 f940 	bl	8020fce <__cxa_guard_acquire>
 8019d4e:	b138      	cbz	r0, 8019d60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8019d50:	4620      	mov	r0, r4
 8019d52:	f007 f948 	bl	8020fe6 <__cxa_guard_release>
 8019d56:	4a06      	ldr	r2, [pc, #24]	; (8019d70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019d58:	4909      	ldr	r1, [pc, #36]	; (8019d80 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8019d5a:	480a      	ldr	r0, [pc, #40]	; (8019d84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8019d5c:	f007 f930 	bl	8020fc0 <__aeabi_atexit>
 8019d60:	4b05      	ldr	r3, [pc, #20]	; (8019d78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019d62:	632b      	str	r3, [r5, #48]	; 0x30
 8019d64:	4b07      	ldr	r3, [pc, #28]	; (8019d84 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8019d66:	636b      	str	r3, [r5, #52]	; 0x34
 8019d68:	bd38      	pop	{r3, r4, r5, pc}
 8019d6a:	bf00      	nop
 8019d6c:	2001fe84 	.word	0x2001fe84
 8019d70:	20000000 	.word	0x20000000
 8019d74:	08017d47 	.word	0x08017d47
 8019d78:	20000078 	.word	0x20000078
 8019d7c:	2001fe88 	.word	0x2001fe88
 8019d80:	08017d45 	.word	0x08017d45
 8019d84:	2000007c 	.word	0x2000007c

08019d88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8019d88:	b538      	push	{r3, r4, r5, lr}
 8019d8a:	4605      	mov	r5, r0
 8019d8c:	4c13      	ldr	r4, [pc, #76]	; (8019ddc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 8019d8e:	e8d4 3f8f 	ldab	r3, [r4]
 8019d92:	07da      	lsls	r2, r3, #31
 8019d94:	d40b      	bmi.n	8019dae <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8019d96:	4620      	mov	r0, r4
 8019d98:	f007 f919 	bl	8020fce <__cxa_guard_acquire>
 8019d9c:	b138      	cbz	r0, 8019dae <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f007 f921 	bl	8020fe6 <__cxa_guard_release>
 8019da4:	4a0e      	ldr	r2, [pc, #56]	; (8019de0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8019da6:	490f      	ldr	r1, [pc, #60]	; (8019de4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8019da8:	480f      	ldr	r0, [pc, #60]	; (8019de8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8019daa:	f007 f909 	bl	8020fc0 <__aeabi_atexit>
 8019dae:	4c0f      	ldr	r4, [pc, #60]	; (8019dec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019db0:	e8d4 3f8f 	ldab	r3, [r4]
 8019db4:	07db      	lsls	r3, r3, #31
 8019db6:	d40b      	bmi.n	8019dd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8019db8:	4620      	mov	r0, r4
 8019dba:	f007 f908 	bl	8020fce <__cxa_guard_acquire>
 8019dbe:	b138      	cbz	r0, 8019dd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8019dc0:	4620      	mov	r0, r4
 8019dc2:	f007 f910 	bl	8020fe6 <__cxa_guard_release>
 8019dc6:	4a06      	ldr	r2, [pc, #24]	; (8019de0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8019dc8:	4909      	ldr	r1, [pc, #36]	; (8019df0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8019dca:	480a      	ldr	r0, [pc, #40]	; (8019df4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8019dcc:	f007 f8f8 	bl	8020fc0 <__aeabi_atexit>
 8019dd0:	4b05      	ldr	r3, [pc, #20]	; (8019de8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8019dd2:	62ab      	str	r3, [r5, #40]	; 0x28
 8019dd4:	4b07      	ldr	r3, [pc, #28]	; (8019df4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8019dd6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}
 8019dda:	bf00      	nop
 8019ddc:	2001fe54 	.word	0x2001fe54
 8019de0:	20000000 	.word	0x20000000
 8019de4:	08017d4b 	.word	0x08017d4b
 8019de8:	20000048 	.word	0x20000048
 8019dec:	2001fe58 	.word	0x2001fe58
 8019df0:	08017d49 	.word	0x08017d49
 8019df4:	2000004c 	.word	0x2000004c

08019df8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	4604      	mov	r4, r0
 8019dfc:	f7ff ff8c 	bl	8019d18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8019e00:	4620      	mov	r0, r4
 8019e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e06:	f7ff bfbf 	b.w	8019d88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08019e0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8019e0c:	b538      	push	{r3, r4, r5, lr}
 8019e0e:	4605      	mov	r5, r0
 8019e10:	4c13      	ldr	r4, [pc, #76]	; (8019e60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 8019e12:	e8d4 3f8f 	ldab	r3, [r4]
 8019e16:	07da      	lsls	r2, r3, #31
 8019e18:	d40b      	bmi.n	8019e32 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8019e1a:	4620      	mov	r0, r4
 8019e1c:	f007 f8d7 	bl	8020fce <__cxa_guard_acquire>
 8019e20:	b138      	cbz	r0, 8019e32 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8019e22:	4620      	mov	r0, r4
 8019e24:	f007 f8df 	bl	8020fe6 <__cxa_guard_release>
 8019e28:	4a0e      	ldr	r2, [pc, #56]	; (8019e64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8019e2a:	490f      	ldr	r1, [pc, #60]	; (8019e68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8019e2c:	480f      	ldr	r0, [pc, #60]	; (8019e6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8019e2e:	f007 f8c7 	bl	8020fc0 <__aeabi_atexit>
 8019e32:	4c0f      	ldr	r4, [pc, #60]	; (8019e70 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8019e34:	e8d4 3f8f 	ldab	r3, [r4]
 8019e38:	07db      	lsls	r3, r3, #31
 8019e3a:	d40b      	bmi.n	8019e54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	f007 f8c6 	bl	8020fce <__cxa_guard_acquire>
 8019e42:	b138      	cbz	r0, 8019e54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8019e44:	4620      	mov	r0, r4
 8019e46:	f007 f8ce 	bl	8020fe6 <__cxa_guard_release>
 8019e4a:	4a06      	ldr	r2, [pc, #24]	; (8019e64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8019e4c:	4909      	ldr	r1, [pc, #36]	; (8019e74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8019e4e:	480a      	ldr	r0, [pc, #40]	; (8019e78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8019e50:	f007 f8b6 	bl	8020fc0 <__aeabi_atexit>
 8019e54:	4b05      	ldr	r3, [pc, #20]	; (8019e6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8019e56:	652b      	str	r3, [r5, #80]	; 0x50
 8019e58:	4b07      	ldr	r3, [pc, #28]	; (8019e78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8019e5a:	656b      	str	r3, [r5, #84]	; 0x54
 8019e5c:	bd38      	pop	{r3, r4, r5, pc}
 8019e5e:	bf00      	nop
 8019e60:	2001fe8c 	.word	0x2001fe8c
 8019e64:	20000000 	.word	0x20000000
 8019e68:	08017d37 	.word	0x08017d37
 8019e6c:	20000080 	.word	0x20000080
 8019e70:	2001fe90 	.word	0x2001fe90
 8019e74:	08017d35 	.word	0x08017d35
 8019e78:	20000084 	.word	0x20000084

08019e7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4605      	mov	r5, r0
 8019e80:	4c13      	ldr	r4, [pc, #76]	; (8019ed0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 8019e82:	e8d4 3f8f 	ldab	r3, [r4]
 8019e86:	07da      	lsls	r2, r3, #31
 8019e88:	d40b      	bmi.n	8019ea2 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	f007 f89f 	bl	8020fce <__cxa_guard_acquire>
 8019e90:	b138      	cbz	r0, 8019ea2 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8019e92:	4620      	mov	r0, r4
 8019e94:	f007 f8a7 	bl	8020fe6 <__cxa_guard_release>
 8019e98:	4a0e      	ldr	r2, [pc, #56]	; (8019ed4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8019e9a:	490f      	ldr	r1, [pc, #60]	; (8019ed8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8019e9c:	480f      	ldr	r0, [pc, #60]	; (8019edc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8019e9e:	f007 f88f 	bl	8020fc0 <__aeabi_atexit>
 8019ea2:	4c0f      	ldr	r4, [pc, #60]	; (8019ee0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8019ea4:	e8d4 3f8f 	ldab	r3, [r4]
 8019ea8:	07db      	lsls	r3, r3, #31
 8019eaa:	d40b      	bmi.n	8019ec4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8019eac:	4620      	mov	r0, r4
 8019eae:	f007 f88e 	bl	8020fce <__cxa_guard_acquire>
 8019eb2:	b138      	cbz	r0, 8019ec4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f007 f896 	bl	8020fe6 <__cxa_guard_release>
 8019eba:	4a06      	ldr	r2, [pc, #24]	; (8019ed4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8019ebc:	4909      	ldr	r1, [pc, #36]	; (8019ee4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8019ebe:	480a      	ldr	r0, [pc, #40]	; (8019ee8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8019ec0:	f007 f87e 	bl	8020fc0 <__aeabi_atexit>
 8019ec4:	4b05      	ldr	r3, [pc, #20]	; (8019edc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8019ec6:	64ab      	str	r3, [r5, #72]	; 0x48
 8019ec8:	4b07      	ldr	r3, [pc, #28]	; (8019ee8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8019eca:	64eb      	str	r3, [r5, #76]	; 0x4c
 8019ecc:	bd38      	pop	{r3, r4, r5, pc}
 8019ece:	bf00      	nop
 8019ed0:	2001fe94 	.word	0x2001fe94
 8019ed4:	20000000 	.word	0x20000000
 8019ed8:	08017d3b 	.word	0x08017d3b
 8019edc:	20000088 	.word	0x20000088
 8019ee0:	2001fe98 	.word	0x2001fe98
 8019ee4:	08017d39 	.word	0x08017d39
 8019ee8:	2000008c 	.word	0x2000008c

08019eec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8019eec:	b538      	push	{r3, r4, r5, lr}
 8019eee:	4605      	mov	r5, r0
 8019ef0:	4c13      	ldr	r4, [pc, #76]	; (8019f40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 8019ef2:	e8d4 3f8f 	ldab	r3, [r4]
 8019ef6:	07da      	lsls	r2, r3, #31
 8019ef8:	d40b      	bmi.n	8019f12 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8019efa:	4620      	mov	r0, r4
 8019efc:	f007 f867 	bl	8020fce <__cxa_guard_acquire>
 8019f00:	b138      	cbz	r0, 8019f12 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8019f02:	4620      	mov	r0, r4
 8019f04:	f007 f86f 	bl	8020fe6 <__cxa_guard_release>
 8019f08:	4a0e      	ldr	r2, [pc, #56]	; (8019f44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8019f0a:	490f      	ldr	r1, [pc, #60]	; (8019f48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8019f0c:	480f      	ldr	r0, [pc, #60]	; (8019f4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8019f0e:	f007 f857 	bl	8020fc0 <__aeabi_atexit>
 8019f12:	4c0f      	ldr	r4, [pc, #60]	; (8019f50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8019f14:	e8d4 3f8f 	ldab	r3, [r4]
 8019f18:	07db      	lsls	r3, r3, #31
 8019f1a:	d40b      	bmi.n	8019f34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f007 f856 	bl	8020fce <__cxa_guard_acquire>
 8019f22:	b138      	cbz	r0, 8019f34 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8019f24:	4620      	mov	r0, r4
 8019f26:	f007 f85e 	bl	8020fe6 <__cxa_guard_release>
 8019f2a:	4a06      	ldr	r2, [pc, #24]	; (8019f44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8019f2c:	4909      	ldr	r1, [pc, #36]	; (8019f54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8019f2e:	480a      	ldr	r0, [pc, #40]	; (8019f58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8019f30:	f007 f846 	bl	8020fc0 <__aeabi_atexit>
 8019f34:	4b05      	ldr	r3, [pc, #20]	; (8019f4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8019f36:	642b      	str	r3, [r5, #64]	; 0x40
 8019f38:	4b07      	ldr	r3, [pc, #28]	; (8019f58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8019f3a:	646b      	str	r3, [r5, #68]	; 0x44
 8019f3c:	bd38      	pop	{r3, r4, r5, pc}
 8019f3e:	bf00      	nop
 8019f40:	2001fe5c 	.word	0x2001fe5c
 8019f44:	20000000 	.word	0x20000000
 8019f48:	08017d3f 	.word	0x08017d3f
 8019f4c:	20000050 	.word	0x20000050
 8019f50:	2001fe60 	.word	0x2001fe60
 8019f54:	08017d3d 	.word	0x08017d3d
 8019f58:	20000054 	.word	0x20000054

08019f5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8019f5c:	b538      	push	{r3, r4, r5, lr}
 8019f5e:	4605      	mov	r5, r0
 8019f60:	4c13      	ldr	r4, [pc, #76]	; (8019fb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 8019f62:	e8d4 3f8f 	ldab	r3, [r4]
 8019f66:	07da      	lsls	r2, r3, #31
 8019f68:	d40b      	bmi.n	8019f82 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	f007 f82f 	bl	8020fce <__cxa_guard_acquire>
 8019f70:	b138      	cbz	r0, 8019f82 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8019f72:	4620      	mov	r0, r4
 8019f74:	f007 f837 	bl	8020fe6 <__cxa_guard_release>
 8019f78:	4a0e      	ldr	r2, [pc, #56]	; (8019fb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8019f7a:	490f      	ldr	r1, [pc, #60]	; (8019fb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8019f7c:	480f      	ldr	r0, [pc, #60]	; (8019fbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8019f7e:	f007 f81f 	bl	8020fc0 <__aeabi_atexit>
 8019f82:	4c0f      	ldr	r4, [pc, #60]	; (8019fc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8019f84:	e8d4 3f8f 	ldab	r3, [r4]
 8019f88:	07db      	lsls	r3, r3, #31
 8019f8a:	d40b      	bmi.n	8019fa4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f007 f81e 	bl	8020fce <__cxa_guard_acquire>
 8019f92:	b138      	cbz	r0, 8019fa4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8019f94:	4620      	mov	r0, r4
 8019f96:	f007 f826 	bl	8020fe6 <__cxa_guard_release>
 8019f9a:	4a06      	ldr	r2, [pc, #24]	; (8019fb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8019f9c:	4909      	ldr	r1, [pc, #36]	; (8019fc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8019f9e:	480a      	ldr	r0, [pc, #40]	; (8019fc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8019fa0:	f007 f80e 	bl	8020fc0 <__aeabi_atexit>
 8019fa4:	4b05      	ldr	r3, [pc, #20]	; (8019fbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8019fa6:	63ab      	str	r3, [r5, #56]	; 0x38
 8019fa8:	4b07      	ldr	r3, [pc, #28]	; (8019fc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8019faa:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019fac:	bd38      	pop	{r3, r4, r5, pc}
 8019fae:	bf00      	nop
 8019fb0:	2001fe7c 	.word	0x2001fe7c
 8019fb4:	20000000 	.word	0x20000000
 8019fb8:	08017d43 	.word	0x08017d43
 8019fbc:	20000070 	.word	0x20000070
 8019fc0:	2001fe80 	.word	0x2001fe80
 8019fc4:	08017d41 	.word	0x08017d41
 8019fc8:	20000074 	.word	0x20000074

08019fcc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8019fcc:	b510      	push	{r4, lr}
 8019fce:	4604      	mov	r4, r0
 8019fd0:	f7ff ff1c 	bl	8019e0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	f7ff ff89 	bl	8019eec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f7ff ff4e 	bl	8019e7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fe6:	f7ff bfb9 	b.w	8019f5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08019fec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8019fec:	b538      	push	{r3, r4, r5, lr}
 8019fee:	4605      	mov	r5, r0
 8019ff0:	4c13      	ldr	r4, [pc, #76]	; (801a040 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 8019ff2:	e8d4 3f8f 	ldab	r3, [r4]
 8019ff6:	07da      	lsls	r2, r3, #31
 8019ff8:	d40b      	bmi.n	801a012 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f006 ffe7 	bl	8020fce <__cxa_guard_acquire>
 801a000:	b138      	cbz	r0, 801a012 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801a002:	4620      	mov	r0, r4
 801a004:	f006 ffef 	bl	8020fe6 <__cxa_guard_release>
 801a008:	4a0e      	ldr	r2, [pc, #56]	; (801a044 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801a00a:	490f      	ldr	r1, [pc, #60]	; (801a048 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a00c:	480f      	ldr	r0, [pc, #60]	; (801a04c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801a00e:	f006 ffd7 	bl	8020fc0 <__aeabi_atexit>
 801a012:	4c0f      	ldr	r4, [pc, #60]	; (801a050 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a014:	e8d4 3f8f 	ldab	r3, [r4]
 801a018:	07db      	lsls	r3, r3, #31
 801a01a:	d40b      	bmi.n	801a034 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801a01c:	4620      	mov	r0, r4
 801a01e:	f006 ffd6 	bl	8020fce <__cxa_guard_acquire>
 801a022:	b138      	cbz	r0, 801a034 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801a024:	4620      	mov	r0, r4
 801a026:	f006 ffde 	bl	8020fe6 <__cxa_guard_release>
 801a02a:	4a06      	ldr	r2, [pc, #24]	; (801a044 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801a02c:	4909      	ldr	r1, [pc, #36]	; (801a054 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801a02e:	480a      	ldr	r0, [pc, #40]	; (801a058 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801a030:	f006 ffc6 	bl	8020fc0 <__aeabi_atexit>
 801a034:	4b05      	ldr	r3, [pc, #20]	; (801a04c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801a036:	662b      	str	r3, [r5, #96]	; 0x60
 801a038:	4b07      	ldr	r3, [pc, #28]	; (801a058 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801a03a:	666b      	str	r3, [r5, #100]	; 0x64
 801a03c:	bd38      	pop	{r3, r4, r5, pc}
 801a03e:	bf00      	nop
 801a040:	2001fe64 	.word	0x2001fe64
 801a044:	20000000 	.word	0x20000000
 801a048:	08017d2f 	.word	0x08017d2f
 801a04c:	20000058 	.word	0x20000058
 801a050:	2001fe68 	.word	0x2001fe68
 801a054:	08017d2d 	.word	0x08017d2d
 801a058:	2000005c 	.word	0x2000005c

0801a05c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801a05c:	b538      	push	{r3, r4, r5, lr}
 801a05e:	4605      	mov	r5, r0
 801a060:	4c13      	ldr	r4, [pc, #76]	; (801a0b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801a062:	e8d4 3f8f 	ldab	r3, [r4]
 801a066:	07da      	lsls	r2, r3, #31
 801a068:	d40b      	bmi.n	801a082 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801a06a:	4620      	mov	r0, r4
 801a06c:	f006 ffaf 	bl	8020fce <__cxa_guard_acquire>
 801a070:	b138      	cbz	r0, 801a082 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801a072:	4620      	mov	r0, r4
 801a074:	f006 ffb7 	bl	8020fe6 <__cxa_guard_release>
 801a078:	4a0e      	ldr	r2, [pc, #56]	; (801a0b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801a07a:	490f      	ldr	r1, [pc, #60]	; (801a0b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a07c:	480f      	ldr	r0, [pc, #60]	; (801a0bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801a07e:	f006 ff9f 	bl	8020fc0 <__aeabi_atexit>
 801a082:	4c0f      	ldr	r4, [pc, #60]	; (801a0c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a084:	e8d4 3f8f 	ldab	r3, [r4]
 801a088:	07db      	lsls	r3, r3, #31
 801a08a:	d40b      	bmi.n	801a0a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801a08c:	4620      	mov	r0, r4
 801a08e:	f006 ff9e 	bl	8020fce <__cxa_guard_acquire>
 801a092:	b138      	cbz	r0, 801a0a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801a094:	4620      	mov	r0, r4
 801a096:	f006 ffa6 	bl	8020fe6 <__cxa_guard_release>
 801a09a:	4a06      	ldr	r2, [pc, #24]	; (801a0b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801a09c:	4909      	ldr	r1, [pc, #36]	; (801a0c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801a09e:	480a      	ldr	r0, [pc, #40]	; (801a0c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801a0a0:	f006 ff8e 	bl	8020fc0 <__aeabi_atexit>
 801a0a4:	4b05      	ldr	r3, [pc, #20]	; (801a0bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801a0a6:	65ab      	str	r3, [r5, #88]	; 0x58
 801a0a8:	4b07      	ldr	r3, [pc, #28]	; (801a0c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801a0aa:	65eb      	str	r3, [r5, #92]	; 0x5c
 801a0ac:	bd38      	pop	{r3, r4, r5, pc}
 801a0ae:	bf00      	nop
 801a0b0:	2001fe3c 	.word	0x2001fe3c
 801a0b4:	20000000 	.word	0x20000000
 801a0b8:	08017d33 	.word	0x08017d33
 801a0bc:	20000030 	.word	0x20000030
 801a0c0:	2001fe40 	.word	0x2001fe40
 801a0c4:	08017d31 	.word	0x08017d31
 801a0c8:	20000034 	.word	0x20000034

0801a0cc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801a0cc:	b510      	push	{r4, lr}
 801a0ce:	4604      	mov	r4, r0
 801a0d0:	f7ff ff8c 	bl	8019fec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801a0d4:	4620      	mov	r0, r4
 801a0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0da:	f7ff bfbf 	b.w	801a05c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801a0e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801a0e0:	b538      	push	{r3, r4, r5, lr}
 801a0e2:	4605      	mov	r5, r0
 801a0e4:	4c13      	ldr	r4, [pc, #76]	; (801a134 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801a0e6:	e8d4 3f8f 	ldab	r3, [r4]
 801a0ea:	07da      	lsls	r2, r3, #31
 801a0ec:	d40b      	bmi.n	801a106 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	f006 ff6d 	bl	8020fce <__cxa_guard_acquire>
 801a0f4:	b138      	cbz	r0, 801a106 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801a0f6:	4620      	mov	r0, r4
 801a0f8:	f006 ff75 	bl	8020fe6 <__cxa_guard_release>
 801a0fc:	4a0e      	ldr	r2, [pc, #56]	; (801a138 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801a0fe:	490f      	ldr	r1, [pc, #60]	; (801a13c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a100:	480f      	ldr	r0, [pc, #60]	; (801a140 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801a102:	f006 ff5d 	bl	8020fc0 <__aeabi_atexit>
 801a106:	4c0f      	ldr	r4, [pc, #60]	; (801a144 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a108:	e8d4 3f8f 	ldab	r3, [r4]
 801a10c:	07db      	lsls	r3, r3, #31
 801a10e:	d40b      	bmi.n	801a128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801a110:	4620      	mov	r0, r4
 801a112:	f006 ff5c 	bl	8020fce <__cxa_guard_acquire>
 801a116:	b138      	cbz	r0, 801a128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801a118:	4620      	mov	r0, r4
 801a11a:	f006 ff64 	bl	8020fe6 <__cxa_guard_release>
 801a11e:	4a06      	ldr	r2, [pc, #24]	; (801a138 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801a120:	4909      	ldr	r1, [pc, #36]	; (801a148 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801a122:	480a      	ldr	r0, [pc, #40]	; (801a14c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801a124:	f006 ff4c 	bl	8020fc0 <__aeabi_atexit>
 801a128:	4b05      	ldr	r3, [pc, #20]	; (801a140 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801a12a:	672b      	str	r3, [r5, #112]	; 0x70
 801a12c:	4b07      	ldr	r3, [pc, #28]	; (801a14c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801a12e:	676b      	str	r3, [r5, #116]	; 0x74
 801a130:	bd38      	pop	{r3, r4, r5, pc}
 801a132:	bf00      	nop
 801a134:	2001fe34 	.word	0x2001fe34
 801a138:	20000000 	.word	0x20000000
 801a13c:	08017d27 	.word	0x08017d27
 801a140:	20000028 	.word	0x20000028
 801a144:	2001fe38 	.word	0x2001fe38
 801a148:	08017d25 	.word	0x08017d25
 801a14c:	2000002c 	.word	0x2000002c

0801a150 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801a150:	b538      	push	{r3, r4, r5, lr}
 801a152:	4605      	mov	r5, r0
 801a154:	4c13      	ldr	r4, [pc, #76]	; (801a1a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801a156:	e8d4 3f8f 	ldab	r3, [r4]
 801a15a:	07da      	lsls	r2, r3, #31
 801a15c:	d40b      	bmi.n	801a176 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801a15e:	4620      	mov	r0, r4
 801a160:	f006 ff35 	bl	8020fce <__cxa_guard_acquire>
 801a164:	b138      	cbz	r0, 801a176 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801a166:	4620      	mov	r0, r4
 801a168:	f006 ff3d 	bl	8020fe6 <__cxa_guard_release>
 801a16c:	4a0e      	ldr	r2, [pc, #56]	; (801a1a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801a16e:	490f      	ldr	r1, [pc, #60]	; (801a1ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a170:	480f      	ldr	r0, [pc, #60]	; (801a1b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801a172:	f006 ff25 	bl	8020fc0 <__aeabi_atexit>
 801a176:	4c0f      	ldr	r4, [pc, #60]	; (801a1b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a178:	e8d4 3f8f 	ldab	r3, [r4]
 801a17c:	07db      	lsls	r3, r3, #31
 801a17e:	d40b      	bmi.n	801a198 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801a180:	4620      	mov	r0, r4
 801a182:	f006 ff24 	bl	8020fce <__cxa_guard_acquire>
 801a186:	b138      	cbz	r0, 801a198 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801a188:	4620      	mov	r0, r4
 801a18a:	f006 ff2c 	bl	8020fe6 <__cxa_guard_release>
 801a18e:	4a06      	ldr	r2, [pc, #24]	; (801a1a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801a190:	4909      	ldr	r1, [pc, #36]	; (801a1b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801a192:	480a      	ldr	r0, [pc, #40]	; (801a1bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801a194:	f006 ff14 	bl	8020fc0 <__aeabi_atexit>
 801a198:	4b05      	ldr	r3, [pc, #20]	; (801a1b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801a19a:	66ab      	str	r3, [r5, #104]	; 0x68
 801a19c:	4b07      	ldr	r3, [pc, #28]	; (801a1bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801a19e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801a1a0:	bd38      	pop	{r3, r4, r5, pc}
 801a1a2:	bf00      	nop
 801a1a4:	2001fe2c 	.word	0x2001fe2c
 801a1a8:	20000000 	.word	0x20000000
 801a1ac:	08017d2b 	.word	0x08017d2b
 801a1b0:	20000020 	.word	0x20000020
 801a1b4:	2001fe30 	.word	0x2001fe30
 801a1b8:	08017d29 	.word	0x08017d29
 801a1bc:	20000024 	.word	0x20000024

0801a1c0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801a1c0:	b510      	push	{r4, lr}
 801a1c2:	4604      	mov	r4, r0
 801a1c4:	f7ff ff8c 	bl	801a0e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1ce:	f7ff bfbf 	b.w	801a150 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801a1d2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801a1d2:	b510      	push	{r4, lr}
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	f7ff fff3 	bl	801a1c0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801a1da:	4620      	mov	r0, r4
 801a1dc:	f7ff ff76 	bl	801a0cc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f7ff fe09 	bl	8019df8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f7ff fd12 	bl	8019c10 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	f7ff fd89 	bl	8019d04 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1f8:	f7ff bee8 	b.w	8019fcc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801a1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a200:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801a204:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801a208:	fb05 4c0e 	mla	ip, r5, lr, r4
 801a20c:	2d00      	cmp	r5, #0
 801a20e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801a212:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801a216:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a21a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801a21e:	eb02 0a0c 	add.w	sl, r2, ip
 801a222:	8808      	ldrh	r0, [r1, #0]
 801a224:	f2c0 80b0 	blt.w	801a388 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801a228:	45ab      	cmp	fp, r5
 801a22a:	f340 80ad 	ble.w	801a388 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801a22e:	2c00      	cmp	r4, #0
 801a230:	f2c0 80a8 	blt.w	801a384 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801a234:	45a6      	cmp	lr, r4
 801a236:	f340 80a5 	ble.w	801a384 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801a23a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801a23e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801a242:	1c62      	adds	r2, r4, #1
 801a244:	f100 80a3 	bmi.w	801a38e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801a248:	4596      	cmp	lr, r2
 801a24a:	f340 80a0 	ble.w	801a38e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801a24e:	f1b9 0f00 	cmp.w	r9, #0
 801a252:	f000 809c 	beq.w	801a38e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801a256:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801a25a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801a25e:	3501      	adds	r5, #1
 801a260:	f100 8099 	bmi.w	801a396 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801a264:	45ab      	cmp	fp, r5
 801a266:	f340 8096 	ble.w	801a396 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801a26a:	2f00      	cmp	r7, #0
 801a26c:	f000 8093 	beq.w	801a396 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801a270:	2c00      	cmp	r4, #0
 801a272:	f2c0 808e 	blt.w	801a392 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801a276:	45a6      	cmp	lr, r4
 801a278:	f340 808b 	ble.w	801a392 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801a27c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801a280:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801a284:	3401      	adds	r4, #1
 801a286:	f100 8089 	bmi.w	801a39c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801a28a:	45a6      	cmp	lr, r4
 801a28c:	f340 8086 	ble.w	801a39c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801a290:	f1b9 0f00 	cmp.w	r9, #0
 801a294:	f000 8082 	beq.w	801a39c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801a298:	44d6      	add	lr, sl
 801a29a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a29e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a2a2:	fb19 fe07 	smulbb	lr, r9, r7
 801a2a6:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801a2aa:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801a2ae:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a2b2:	ea44 0808 	orr.w	r8, r4, r8
 801a2b6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801a2ba:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801a2be:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801a2c2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a2c6:	ea44 0c0c 	orr.w	ip, r4, ip
 801a2ca:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801a2ce:	fb04 f40c 	mul.w	r4, r4, ip
 801a2d2:	f1c7 0210 	rsb	r2, r7, #16
 801a2d6:	eba2 0209 	sub.w	r2, r2, r9
 801a2da:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801a2de:	fb02 4808 	mla	r8, r2, r8, r4
 801a2e2:	b2b4      	uxth	r4, r6
 801a2e4:	43f6      	mvns	r6, r6
 801a2e6:	041a      	lsls	r2, r3, #16
 801a2e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a2ec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a2f0:	4313      	orrs	r3, r2
 801a2f2:	fb0e 8303 	mla	r3, lr, r3, r8
 801a2f6:	042a      	lsls	r2, r5, #16
 801a2f8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a2fc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801a300:	432a      	orrs	r2, r5
 801a302:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801a306:	fb07 3202 	mla	r2, r7, r2, r3
 801a30a:	0d53      	lsrs	r3, r2, #21
 801a30c:	0952      	lsrs	r2, r2, #5
 801a30e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a312:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a316:	431a      	orrs	r2, r3
 801a318:	b293      	uxth	r3, r2
 801a31a:	1202      	asrs	r2, r0, #8
 801a31c:	b2f6      	uxtb	r6, r6
 801a31e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801a322:	fb12 f206 	smulbb	r2, r2, r6
 801a326:	10c7      	asrs	r7, r0, #3
 801a328:	00c0      	lsls	r0, r0, #3
 801a32a:	b2c0      	uxtb	r0, r0
 801a32c:	121d      	asrs	r5, r3, #8
 801a32e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a332:	fb10 f006 	smulbb	r0, r0, r6
 801a336:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a33a:	fb17 f706 	smulbb	r7, r7, r6
 801a33e:	fb05 2504 	mla	r5, r5, r4, r2
 801a342:	10da      	asrs	r2, r3, #3
 801a344:	00db      	lsls	r3, r3, #3
 801a346:	b2db      	uxtb	r3, r3
 801a348:	fb03 0004 	mla	r0, r3, r4, r0
 801a34c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a350:	fb02 7204 	mla	r2, r2, r4, r7
 801a354:	b2ad      	uxth	r5, r5
 801a356:	b280      	uxth	r0, r0
 801a358:	1c6b      	adds	r3, r5, #1
 801a35a:	b292      	uxth	r2, r2
 801a35c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a360:	1c43      	adds	r3, r0, #1
 801a362:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a366:	1c50      	adds	r0, r2, #1
 801a368:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a36c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a370:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a374:	0952      	lsrs	r2, r2, #5
 801a376:	432b      	orrs	r3, r5
 801a378:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a37c:	4313      	orrs	r3, r2
 801a37e:	800b      	strh	r3, [r1, #0]
 801a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a384:	4680      	mov	r8, r0
 801a386:	e75c      	b.n	801a242 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801a388:	4684      	mov	ip, r0
 801a38a:	4680      	mov	r8, r0
 801a38c:	e767      	b.n	801a25e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801a38e:	4684      	mov	ip, r0
 801a390:	e765      	b.n	801a25e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801a392:	4605      	mov	r5, r0
 801a394:	e776      	b.n	801a284 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801a396:	4603      	mov	r3, r0
 801a398:	4605      	mov	r5, r0
 801a39a:	e782      	b.n	801a2a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801a39c:	4603      	mov	r3, r0
 801a39e:	e780      	b.n	801a2a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801a3a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3a4:	b099      	sub	sp, #100	; 0x64
 801a3a6:	9215      	str	r2, [sp, #84]	; 0x54
 801a3a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a3aa:	9016      	str	r0, [sp, #88]	; 0x58
 801a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a3ae:	6850      	ldr	r0, [r2, #4]
 801a3b0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801a3b4:	910c      	str	r1, [sp, #48]	; 0x30
 801a3b6:	930d      	str	r3, [sp, #52]	; 0x34
 801a3b8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801a3bc:	fb00 1303 	mla	r3, r0, r3, r1
 801a3c0:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801a3c4:	6812      	ldr	r2, [r2, #0]
 801a3c6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801a3ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3d2:	685e      	ldr	r6, [r3, #4]
 801a3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3d6:	3604      	adds	r6, #4
 801a3d8:	43db      	mvns	r3, r3
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	930a      	str	r3, [sp, #40]	; 0x28
 801a3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	dc03      	bgt.n	801a3ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	f340 8225 	ble.w	801a836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801a3ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a3f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a3f6:	1e48      	subs	r0, r1, #1
 801a3f8:	1e57      	subs	r7, r2, #1
 801a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	f340 80e3 	ble.w	801a5c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a402:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801a406:	ea4f 4325 	mov.w	r3, r5, asr #16
 801a40a:	d406      	bmi.n	801a41a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a40c:	4584      	cmp	ip, r0
 801a40e:	da04      	bge.n	801a41a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a410:	2b00      	cmp	r3, #0
 801a412:	db02      	blt.n	801a41a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a414:	42bb      	cmp	r3, r7
 801a416:	f2c0 80d8 	blt.w	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a41a:	f11c 0c01 	adds.w	ip, ip, #1
 801a41e:	f100 80c9 	bmi.w	801a5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a422:	4561      	cmp	r1, ip
 801a424:	f2c0 80c6 	blt.w	801a5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a428:	3301      	adds	r3, #1
 801a42a:	f100 80c3 	bmi.w	801a5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a42e:	429a      	cmp	r2, r3
 801a430:	f2c0 80c0 	blt.w	801a5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a434:	4647      	mov	r7, r8
 801a436:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a43a:	f1bb 0f00 	cmp.w	fp, #0
 801a43e:	f340 80e3 	ble.w	801a608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801a442:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a444:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a446:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a44a:	ea5f 422a 	movs.w	r2, sl, asr #16
 801a44e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a452:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801a456:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a45a:	689b      	ldr	r3, [r3, #8]
 801a45c:	f100 8121 	bmi.w	801a6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801a460:	f103 39ff 	add.w	r9, r3, #4294967295
 801a464:	454a      	cmp	r2, r9
 801a466:	f280 811c 	bge.w	801a6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801a46a:	f1bc 0f00 	cmp.w	ip, #0
 801a46e:	f2c0 8118 	blt.w	801a6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801a472:	f10e 39ff 	add.w	r9, lr, #4294967295
 801a476:	45cc      	cmp	ip, r9
 801a478:	f280 8113 	bge.w	801a6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801a47c:	b21b      	sxth	r3, r3
 801a47e:	fb0c 2203 	mla	r2, ip, r3, r2
 801a482:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a484:	eb04 0902 	add.w	r9, r4, r2
 801a488:	5ca2      	ldrb	r2, [r4, r2]
 801a48a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801a48e:	2800      	cmp	r0, #0
 801a490:	f000 80fe 	beq.w	801a690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801a494:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a498:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801a49c:	9211      	str	r2, [sp, #68]	; 0x44
 801a49e:	b151      	cbz	r1, 801a4b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a4a0:	eb09 0203 	add.w	r2, r9, r3
 801a4a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a4a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a4ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4ae:	7853      	ldrb	r3, [r2, #1]
 801a4b0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a4b4:	9312      	str	r3, [sp, #72]	; 0x48
 801a4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a4b8:	fb10 f201 	smulbb	r2, r0, r1
 801a4bc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a4c0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a4c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a4c8:	ea4c 0c03 	orr.w	ip, ip, r3
 801a4cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a4ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4d0:	041b      	lsls	r3, r3, #16
 801a4d2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801a4d6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a4da:	10d2      	asrs	r2, r2, #3
 801a4dc:	4323      	orrs	r3, r4
 801a4de:	4353      	muls	r3, r2
 801a4e0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801a4e4:	fb09 330c 	mla	r3, r9, ip, r3
 801a4e8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801a4ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a4f0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a4f4:	ea4c 0e0e 	orr.w	lr, ip, lr
 801a4f8:	f1c1 0c10 	rsb	ip, r1, #16
 801a4fc:	ebac 0c00 	sub.w	ip, ip, r0
 801a500:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801a504:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801a508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a50a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801a50e:	0418      	lsls	r0, r3, #16
 801a510:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a514:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a518:	4318      	orrs	r0, r3
 801a51a:	fb02 c200 	mla	r2, r2, r0, ip
 801a51e:	8838      	ldrh	r0, [r7, #0]
 801a520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a522:	0d53      	lsrs	r3, r2, #21
 801a524:	1201      	asrs	r1, r0, #8
 801a526:	0952      	lsrs	r2, r2, #5
 801a528:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a52c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a530:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a534:	431a      	orrs	r2, r3
 801a536:	fb11 f104 	smulbb	r1, r1, r4
 801a53a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801a53e:	00c0      	lsls	r0, r0, #3
 801a540:	b292      	uxth	r2, r2
 801a542:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a546:	b2c0      	uxtb	r0, r0
 801a548:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801a54c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801a550:	fb1e fe04 	smulbb	lr, lr, r4
 801a554:	fb10 f004 	smulbb	r0, r0, r4
 801a558:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a55c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801a560:	10d1      	asrs	r1, r2, #3
 801a562:	00d2      	lsls	r2, r2, #3
 801a564:	b2d2      	uxtb	r2, r2
 801a566:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a56a:	fb01 e103 	mla	r1, r1, r3, lr
 801a56e:	fb02 0303 	mla	r3, r2, r3, r0
 801a572:	fa1f fc8c 	uxth.w	ip, ip
 801a576:	b29a      	uxth	r2, r3
 801a578:	f10c 0301 	add.w	r3, ip, #1
 801a57c:	b289      	uxth	r1, r1
 801a57e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a582:	1c53      	adds	r3, r2, #1
 801a584:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a588:	1c4a      	adds	r2, r1, #1
 801a58a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a58e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a592:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a596:	0949      	lsrs	r1, r1, #5
 801a598:	ea43 030c 	orr.w	r3, r3, ip
 801a59c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a5a0:	430b      	orrs	r3, r1
 801a5a2:	803b      	strh	r3, [r7, #0]
 801a5a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a5a6:	3702      	adds	r7, #2
 801a5a8:	449a      	add	sl, r3
 801a5aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a5ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5b0:	441d      	add	r5, r3
 801a5b2:	e742      	b.n	801a43a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a5b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a5b6:	f108 0802 	add.w	r8, r8, #2
 801a5ba:	449a      	add	sl, r3
 801a5bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a5be:	441d      	add	r5, r3
 801a5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5c2:	3b01      	subs	r3, #1
 801a5c4:	9309      	str	r3, [sp, #36]	; 0x24
 801a5c6:	e718      	b.n	801a3fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a5c8:	d023      	beq.n	801a612 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801a5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5cc:	9825      	ldr	r0, [sp, #148]	; 0x94
 801a5ce:	3b01      	subs	r3, #1
 801a5d0:	fb00 a003 	mla	r0, r0, r3, sl
 801a5d4:	1400      	asrs	r0, r0, #16
 801a5d6:	f53f af2d 	bmi.w	801a434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a5da:	3901      	subs	r1, #1
 801a5dc:	4288      	cmp	r0, r1
 801a5de:	f6bf af29 	bge.w	801a434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a5e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801a5e4:	fb01 5303 	mla	r3, r1, r3, r5
 801a5e8:	141b      	asrs	r3, r3, #16
 801a5ea:	f53f af23 	bmi.w	801a434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a5ee:	3a01      	subs	r2, #1
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	f6bf af1f 	bge.w	801a434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a5f6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801a5fa:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801a5fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a602:	f1be 0f00 	cmp.w	lr, #0
 801a606:	dc6c      	bgt.n	801a6e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801a608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a60a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a60e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801a612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a614:	2b00      	cmp	r3, #0
 801a616:	f340 810e 	ble.w	801a836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801a61a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a61e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a622:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a626:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a62a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a62e:	eef0 6a62 	vmov.f32	s13, s5
 801a632:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a636:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a63a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a63e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a642:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a646:	ee16 aa90 	vmov	sl, s13
 801a64a:	eef0 6a43 	vmov.f32	s13, s6
 801a64e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a652:	ee12 2a90 	vmov	r2, s5
 801a656:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a65a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a65c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a660:	fb92 f3f3 	sdiv	r3, r2, r3
 801a664:	ee13 2a10 	vmov	r2, s6
 801a668:	9325      	str	r3, [sp, #148]	; 0x94
 801a66a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a66c:	ee16 5a90 	vmov	r5, s13
 801a670:	fb92 f3f3 	sdiv	r3, r2, r3
 801a674:	9326      	str	r3, [sp, #152]	; 0x98
 801a676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a67a:	3b01      	subs	r3, #1
 801a67c:	930c      	str	r3, [sp, #48]	; 0x30
 801a67e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a680:	bf08      	it	eq
 801a682:	4613      	moveq	r3, r2
 801a684:	eeb0 3a67 	vmov.f32	s6, s15
 801a688:	9309      	str	r3, [sp, #36]	; 0x24
 801a68a:	eef0 2a47 	vmov.f32	s5, s14
 801a68e:	e6a6      	b.n	801a3de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a690:	2900      	cmp	r1, #0
 801a692:	f43f af10 	beq.w	801a4b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a696:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a69a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a69e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a6a0:	e709      	b.n	801a4b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a6a2:	f112 0901 	adds.w	r9, r2, #1
 801a6a6:	f53f af7d 	bmi.w	801a5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a6aa:	454b      	cmp	r3, r9
 801a6ac:	f6ff af7a 	blt.w	801a5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a6b0:	f11c 0901 	adds.w	r9, ip, #1
 801a6b4:	f53f af76 	bmi.w	801a5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a6b8:	45ce      	cmp	lr, r9
 801a6ba:	f6ff af73 	blt.w	801a5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a6be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a6c0:	9202      	str	r2, [sp, #8]
 801a6c2:	b21b      	sxth	r3, r3
 801a6c4:	fa0f f28e 	sxth.w	r2, lr
 801a6c8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a6cc:	e9cd c003 	strd	ip, r0, [sp, #12]
 801a6d0:	9201      	str	r2, [sp, #4]
 801a6d2:	9300      	str	r3, [sp, #0]
 801a6d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6d6:	4633      	mov	r3, r6
 801a6d8:	4639      	mov	r1, r7
 801a6da:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a6dc:	f7ff fd8e 	bl	801a1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801a6e0:	e760      	b.n	801a5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a6e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a6e4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801a6e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a6ec:	1429      	asrs	r1, r5, #16
 801a6ee:	fb03 2101 	mla	r1, r3, r1, r2
 801a6f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6f6:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801a6fa:	440a      	add	r2, r1
 801a6fc:	5c61      	ldrb	r1, [r4, r1]
 801a6fe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a702:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801a706:	f1bc 0f00 	cmp.w	ip, #0
 801a70a:	f000 808c 	beq.w	801a826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801a70e:	7857      	ldrb	r7, [r2, #1]
 801a710:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801a714:	9413      	str	r4, [sp, #76]	; 0x4c
 801a716:	b140      	cbz	r0, 801a72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a718:	18d7      	adds	r7, r2, r3
 801a71a:	5cd3      	ldrb	r3, [r2, r3]
 801a71c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a720:	9310      	str	r3, [sp, #64]	; 0x40
 801a722:	787b      	ldrb	r3, [r7, #1]
 801a724:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a728:	9314      	str	r3, [sp, #80]	; 0x50
 801a72a:	fb1c f200 	smulbb	r2, ip, r0
 801a72e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a730:	10d2      	asrs	r2, r2, #3
 801a732:	041f      	lsls	r7, r3, #16
 801a734:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801a738:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a73c:	431f      	orrs	r7, r3
 801a73e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801a742:	9317      	str	r3, [sp, #92]	; 0x5c
 801a744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a746:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a748:	041b      	lsls	r3, r3, #16
 801a74a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801a74e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a752:	ea43 030b 	orr.w	r3, r3, fp
 801a756:	4353      	muls	r3, r2
 801a758:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a75a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a75e:	fb04 3707 	mla	r7, r4, r7, r3
 801a762:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a766:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801a76a:	ea43 0b01 	orr.w	fp, r3, r1
 801a76e:	f1c0 0110 	rsb	r1, r0, #16
 801a772:	eba1 0c0c 	sub.w	ip, r1, ip
 801a776:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801a77a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a77c:	fb0c 770b 	mla	r7, ip, fp, r7
 801a780:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a784:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801a788:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a78c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801a790:	ea4c 0c0b 	orr.w	ip, ip, fp
 801a794:	fb02 770c 	mla	r7, r2, ip, r7
 801a798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a79a:	0d79      	lsrs	r1, r7, #21
 801a79c:	8812      	ldrh	r2, [r2, #0]
 801a79e:	097f      	lsrs	r7, r7, #5
 801a7a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a7a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a7a8:	430f      	orrs	r7, r1
 801a7aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a7ac:	1211      	asrs	r1, r2, #8
 801a7ae:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a7b2:	b2bb      	uxth	r3, r7
 801a7b4:	fb11 f104 	smulbb	r1, r1, r4
 801a7b8:	10d7      	asrs	r7, r2, #3
 801a7ba:	00d2      	lsls	r2, r2, #3
 801a7bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a7c0:	b2d2      	uxtb	r2, r2
 801a7c2:	1218      	asrs	r0, r3, #8
 801a7c4:	fb17 f704 	smulbb	r7, r7, r4
 801a7c8:	fb12 f204 	smulbb	r2, r2, r4
 801a7cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a7d0:	fb00 1009 	mla	r0, r0, r9, r1
 801a7d4:	10d9      	asrs	r1, r3, #3
 801a7d6:	00db      	lsls	r3, r3, #3
 801a7d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a7dc:	b2db      	uxtb	r3, r3
 801a7de:	fb01 7109 	mla	r1, r1, r9, r7
 801a7e2:	fb03 2309 	mla	r3, r3, r9, r2
 801a7e6:	b280      	uxth	r0, r0
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	b289      	uxth	r1, r1
 801a7ec:	1c42      	adds	r2, r0, #1
 801a7ee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a7f2:	1c4f      	adds	r7, r1, #1
 801a7f4:	1c5a      	adds	r2, r3, #1
 801a7f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a7fa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a7fe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a802:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a806:	0949      	lsrs	r1, r1, #5
 801a808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a80a:	4310      	orrs	r0, r2
 801a80c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a810:	4308      	orrs	r0, r1
 801a812:	f823 0b02 	strh.w	r0, [r3], #2
 801a816:	930e      	str	r3, [sp, #56]	; 0x38
 801a818:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a81a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a81e:	449a      	add	sl, r3
 801a820:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a822:	441d      	add	r5, r3
 801a824:	e6ed      	b.n	801a602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801a826:	2800      	cmp	r0, #0
 801a828:	f43f af7f 	beq.w	801a72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a82c:	5cd3      	ldrb	r3, [r2, r3]
 801a82e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a832:	9310      	str	r3, [sp, #64]	; 0x40
 801a834:	e779      	b.n	801a72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a836:	b019      	add	sp, #100	; 0x64
 801a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a83c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a840:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a844:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801a848:	fb08 470e 	mla	r7, r8, lr, r4
 801a84c:	f1b8 0f00 	cmp.w	r8, #0
 801a850:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801a854:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801a858:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801a85c:	eb02 0907 	add.w	r9, r2, r7
 801a860:	8808      	ldrh	r0, [r1, #0]
 801a862:	db67      	blt.n	801a934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801a864:	45c2      	cmp	sl, r8
 801a866:	dd65      	ble.n	801a934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801a868:	2c00      	cmp	r4, #0
 801a86a:	db61      	blt.n	801a930 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801a86c:	45a6      	cmp	lr, r4
 801a86e:	dd5f      	ble.n	801a930 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801a870:	5dd2      	ldrb	r2, [r2, r7]
 801a872:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801a876:	1c62      	adds	r2, r4, #1
 801a878:	d45f      	bmi.n	801a93a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a87a:	4596      	cmp	lr, r2
 801a87c:	dd5d      	ble.n	801a93a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a87e:	2d00      	cmp	r5, #0
 801a880:	d05b      	beq.n	801a93a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a882:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a886:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801a88a:	f118 0801 	adds.w	r8, r8, #1
 801a88e:	d458      	bmi.n	801a942 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a890:	45c2      	cmp	sl, r8
 801a892:	dd56      	ble.n	801a942 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a894:	2e00      	cmp	r6, #0
 801a896:	d054      	beq.n	801a942 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a898:	2c00      	cmp	r4, #0
 801a89a:	db50      	blt.n	801a93e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801a89c:	45a6      	cmp	lr, r4
 801a89e:	dd4e      	ble.n	801a93e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801a8a0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801a8a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a8a8:	3401      	adds	r4, #1
 801a8aa:	d407      	bmi.n	801a8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a8ac:	45a6      	cmp	lr, r4
 801a8ae:	dd05      	ble.n	801a8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a8b0:	b125      	cbz	r5, 801a8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a8b2:	44ce      	add	lr, r9
 801a8b4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801a8b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a8bc:	fb15 f406 	smulbb	r4, r5, r6
 801a8c0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801a8c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a8c8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801a8cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a8d0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801a8d4:	ea43 0c0c 	orr.w	ip, r3, ip
 801a8d8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a8dc:	f1c6 0310 	rsb	r3, r6, #16
 801a8e0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a8e4:	1b5b      	subs	r3, r3, r5
 801a8e6:	ea4e 0707 	orr.w	r7, lr, r7
 801a8ea:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801a8ee:	437d      	muls	r5, r7
 801a8f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a8f4:	fb03 5c0c 	mla	ip, r3, ip, r5
 801a8f8:	0403      	lsls	r3, r0, #16
 801a8fa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a8fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a902:	4318      	orrs	r0, r3
 801a904:	fb04 c000 	mla	r0, r4, r0, ip
 801a908:	0413      	lsls	r3, r2, #16
 801a90a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a90e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a912:	4313      	orrs	r3, r2
 801a914:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801a918:	fb06 0003 	mla	r0, r6, r3, r0
 801a91c:	0d43      	lsrs	r3, r0, #21
 801a91e:	0940      	lsrs	r0, r0, #5
 801a920:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a924:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a928:	4318      	orrs	r0, r3
 801a92a:	8008      	strh	r0, [r1, #0]
 801a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a930:	4684      	mov	ip, r0
 801a932:	e7a0      	b.n	801a876 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801a934:	4607      	mov	r7, r0
 801a936:	4684      	mov	ip, r0
 801a938:	e7a7      	b.n	801a88a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801a93a:	4607      	mov	r7, r0
 801a93c:	e7a5      	b.n	801a88a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801a93e:	4602      	mov	r2, r0
 801a940:	e7b2      	b.n	801a8a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801a942:	4602      	mov	r2, r0
 801a944:	e7ba      	b.n	801a8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801a946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a94a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a94e:	b093      	sub	sp, #76	; 0x4c
 801a950:	920f      	str	r2, [sp, #60]	; 0x3c
 801a952:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a954:	9010      	str	r0, [sp, #64]	; 0x40
 801a956:	6850      	ldr	r0, [r2, #4]
 801a958:	9108      	str	r1, [sp, #32]
 801a95a:	9306      	str	r3, [sp, #24]
 801a95c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801a960:	fb00 1303 	mla	r3, r0, r3, r1
 801a964:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801a968:	6812      	ldr	r2, [r2, #0]
 801a96a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801a96e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	9307      	str	r3, [sp, #28]
 801a974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a976:	685f      	ldr	r7, [r3, #4]
 801a978:	3704      	adds	r7, #4
 801a97a:	9b08      	ldr	r3, [sp, #32]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	dc03      	bgt.n	801a988 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a982:	2b00      	cmp	r3, #0
 801a984:	f340 81b2 	ble.w	801acec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801a988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a98a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a98e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a992:	1e48      	subs	r0, r1, #1
 801a994:	f102 3cff 	add.w	ip, r2, #4294967295
 801a998:	9b06      	ldr	r3, [sp, #24]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f340 80a9 	ble.w	801aaf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a9a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801a9a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a9a8:	d406      	bmi.n	801a9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a9aa:	4586      	cmp	lr, r0
 801a9ac:	da04      	bge.n	801a9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	db02      	blt.n	801a9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a9b2:	4563      	cmp	r3, ip
 801a9b4:	f2c0 809e 	blt.w	801aaf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801a9b8:	f11e 0e01 	adds.w	lr, lr, #1
 801a9bc:	f100 808f 	bmi.w	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a9c0:	4571      	cmp	r1, lr
 801a9c2:	f2c0 808c 	blt.w	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a9c6:	3301      	adds	r3, #1
 801a9c8:	f100 8089 	bmi.w	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	f2c0 8086 	blt.w	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a9d2:	46c8      	mov	r8, r9
 801a9d4:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a9d8:	f1bb 0f00 	cmp.w	fp, #0
 801a9dc:	f340 80a6 	ble.w	801ab2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a9e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a9e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a9e8:	1422      	asrs	r2, r4, #16
 801a9ea:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a9ee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a9f2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a9f6:	689b      	ldr	r3, [r3, #8]
 801a9f8:	f100 80e3 	bmi.w	801abc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a9fc:	f103 3aff 	add.w	sl, r3, #4294967295
 801aa00:	4552      	cmp	r2, sl
 801aa02:	f280 80de 	bge.w	801abc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801aa06:	f1bc 0f00 	cmp.w	ip, #0
 801aa0a:	f2c0 80da 	blt.w	801abc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801aa0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801aa12:	45d4      	cmp	ip, sl
 801aa14:	f280 80d5 	bge.w	801abc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801aa18:	b21b      	sxth	r3, r3
 801aa1a:	fb0c 2203 	mla	r2, ip, r3, r2
 801aa1e:	9d07      	ldr	r5, [sp, #28]
 801aa20:	eb05 0a02 	add.w	sl, r5, r2
 801aa24:	5caa      	ldrb	r2, [r5, r2]
 801aa26:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801aa2a:	2800      	cmp	r0, #0
 801aa2c:	f000 80c0 	beq.w	801abb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aa30:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801aa34:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801aa38:	920b      	str	r2, [sp, #44]	; 0x2c
 801aa3a:	b151      	cbz	r1, 801aa52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801aa3c:	eb0a 0203 	add.w	r2, sl, r3
 801aa40:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801aa44:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801aa48:	9309      	str	r3, [sp, #36]	; 0x24
 801aa4a:	7853      	ldrb	r3, [r2, #1]
 801aa4c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801aa50:	930c      	str	r3, [sp, #48]	; 0x30
 801aa52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa54:	fb10 f201 	smulbb	r2, r0, r1
 801aa58:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801aa5c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801aa60:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801aa64:	ea4c 0c03 	orr.w	ip, ip, r3
 801aa68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa6c:	041b      	lsls	r3, r3, #16
 801aa6e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801aa72:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801aa76:	10d2      	asrs	r2, r2, #3
 801aa78:	432b      	orrs	r3, r5
 801aa7a:	4353      	muls	r3, r2
 801aa7c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801aa80:	fb0a 330c 	mla	r3, sl, ip, r3
 801aa84:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801aa88:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801aa8c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801aa90:	ea4c 0e0e 	orr.w	lr, ip, lr
 801aa94:	f1c1 0c10 	rsb	ip, r1, #16
 801aa98:	ebac 0c00 	sub.w	ip, ip, r0
 801aa9c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801aaa0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801aaa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801aaaa:	0418      	lsls	r0, r3, #16
 801aaac:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801aab0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801aab4:	4318      	orrs	r0, r3
 801aab6:	fb02 c200 	mla	r2, r2, r0, ip
 801aaba:	0d53      	lsrs	r3, r2, #21
 801aabc:	0952      	lsrs	r2, r2, #5
 801aabe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aac2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801aac6:	431a      	orrs	r2, r3
 801aac8:	f8a8 2000 	strh.w	r2, [r8]
 801aacc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801aace:	f108 0802 	add.w	r8, r8, #2
 801aad2:	441c      	add	r4, r3
 801aad4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aada:	441e      	add	r6, r3
 801aadc:	e77c      	b.n	801a9d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aade:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801aae0:	f109 0902 	add.w	r9, r9, #2
 801aae4:	441c      	add	r4, r3
 801aae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aae8:	441e      	add	r6, r3
 801aaea:	9b06      	ldr	r3, [sp, #24]
 801aaec:	3b01      	subs	r3, #1
 801aaee:	9306      	str	r3, [sp, #24]
 801aaf0:	e752      	b.n	801a998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801aaf2:	d020      	beq.n	801ab36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aaf4:	9b06      	ldr	r3, [sp, #24]
 801aaf6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801aaf8:	3b01      	subs	r3, #1
 801aafa:	fb00 4003 	mla	r0, r0, r3, r4
 801aafe:	1400      	asrs	r0, r0, #16
 801ab00:	f53f af67 	bmi.w	801a9d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ab04:	3901      	subs	r1, #1
 801ab06:	4288      	cmp	r0, r1
 801ab08:	f6bf af63 	bge.w	801a9d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ab0c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ab0e:	fb01 6303 	mla	r3, r1, r3, r6
 801ab12:	141b      	asrs	r3, r3, #16
 801ab14:	f53f af5d 	bmi.w	801a9d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ab18:	3a01      	subs	r2, #1
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	f6bf af59 	bge.w	801a9d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ab20:	46ca      	mov	sl, r9
 801ab22:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ab26:	f1b8 0f00 	cmp.w	r8, #0
 801ab2a:	dc67      	bgt.n	801abfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ab2c:	9b06      	ldr	r3, [sp, #24]
 801ab2e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ab32:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ab36:	9b08      	ldr	r3, [sp, #32]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	f340 80d7 	ble.w	801acec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ab3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab4e:	eeb0 6a62 	vmov.f32	s12, s5
 801ab52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab66:	ee16 4a10 	vmov	r4, s12
 801ab6a:	eeb0 6a43 	vmov.f32	s12, s6
 801ab6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab72:	ee12 2a90 	vmov	r2, s5
 801ab76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ab7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab84:	ee13 2a10 	vmov	r2, s6
 801ab88:	931f      	str	r3, [sp, #124]	; 0x7c
 801ab8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ab8c:	ee16 6a10 	vmov	r6, s12
 801ab90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab94:	9320      	str	r3, [sp, #128]	; 0x80
 801ab96:	9b08      	ldr	r3, [sp, #32]
 801ab98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab9a:	3b01      	subs	r3, #1
 801ab9c:	9308      	str	r3, [sp, #32]
 801ab9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aba0:	bf08      	it	eq
 801aba2:	4613      	moveq	r3, r2
 801aba4:	eeb0 3a67 	vmov.f32	s6, s15
 801aba8:	9306      	str	r3, [sp, #24]
 801abaa:	eef0 2a47 	vmov.f32	s5, s14
 801abae:	e6e4      	b.n	801a97a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801abb0:	2900      	cmp	r1, #0
 801abb2:	f43f af4e 	beq.w	801aa52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801abb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801abba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801abbe:	9309      	str	r3, [sp, #36]	; 0x24
 801abc0:	e747      	b.n	801aa52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801abc2:	f112 0a01 	adds.w	sl, r2, #1
 801abc6:	d481      	bmi.n	801aacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801abc8:	4553      	cmp	r3, sl
 801abca:	f6ff af7f 	blt.w	801aacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801abce:	f11c 0a01 	adds.w	sl, ip, #1
 801abd2:	f53f af7b 	bmi.w	801aacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801abd6:	45d6      	cmp	lr, sl
 801abd8:	f6ff af78 	blt.w	801aacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801abdc:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801abe0:	b21b      	sxth	r3, r3
 801abe2:	fa0f f28e 	sxth.w	r2, lr
 801abe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abea:	9201      	str	r2, [sp, #4]
 801abec:	9300      	str	r3, [sp, #0]
 801abee:	9a07      	ldr	r2, [sp, #28]
 801abf0:	463b      	mov	r3, r7
 801abf2:	4641      	mov	r1, r8
 801abf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801abf6:	f7ff fe21 	bl	801a83c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801abfa:	e767      	b.n	801aacc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801abfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801abfe:	1422      	asrs	r2, r4, #16
 801ac00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ac04:	1431      	asrs	r1, r6, #16
 801ac06:	fb03 2101 	mla	r1, r3, r1, r2
 801ac0a:	9d07      	ldr	r5, [sp, #28]
 801ac0c:	9a07      	ldr	r2, [sp, #28]
 801ac0e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801ac12:	440a      	add	r2, r1
 801ac14:	5c69      	ldrb	r1, [r5, r1]
 801ac16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ac1a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801ac1e:	f1be 0f00 	cmp.w	lr, #0
 801ac22:	d05c      	beq.n	801acde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801ac24:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ac28:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801ac2c:	950d      	str	r5, [sp, #52]	; 0x34
 801ac2e:	b150      	cbz	r0, 801ac46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ac30:	eb02 0c03 	add.w	ip, r2, r3
 801ac34:	5cd3      	ldrb	r3, [r2, r3]
 801ac36:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ac3a:	930a      	str	r3, [sp, #40]	; 0x28
 801ac3c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ac40:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ac44:	930e      	str	r3, [sp, #56]	; 0x38
 801ac46:	fb1e f200 	smulbb	r2, lr, r0
 801ac4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac4c:	10d2      	asrs	r2, r2, #3
 801ac4e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ac52:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ac56:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ac5a:	ea4c 0c03 	orr.w	ip, ip, r3
 801ac5e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801ac62:	9311      	str	r3, [sp, #68]	; 0x44
 801ac64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ac68:	041b      	lsls	r3, r3, #16
 801ac6a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801ac6e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ac72:	ea43 030b 	orr.w	r3, r3, fp
 801ac76:	4353      	muls	r3, r2
 801ac78:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ac7a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ac7e:	fb05 3c0c 	mla	ip, r5, ip, r3
 801ac82:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ac86:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ac8a:	ea43 0b01 	orr.w	fp, r3, r1
 801ac8e:	f1c0 0110 	rsb	r1, r0, #16
 801ac92:	eba1 0e0e 	sub.w	lr, r1, lr
 801ac96:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801ac9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac9c:	fb0e cc0b 	mla	ip, lr, fp, ip
 801aca0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801aca4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801aca8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801acac:	ea4b 0e0e 	orr.w	lr, fp, lr
 801acb0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801acb4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801acb8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801acbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801acc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acc4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801acc8:	ea43 0c0c 	orr.w	ip, r3, ip
 801accc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801acce:	f82a cb02 	strh.w	ip, [sl], #2
 801acd2:	441c      	add	r4, r3
 801acd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801acd6:	f108 38ff 	add.w	r8, r8, #4294967295
 801acda:	441e      	add	r6, r3
 801acdc:	e723      	b.n	801ab26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801acde:	2800      	cmp	r0, #0
 801ace0:	d0b1      	beq.n	801ac46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ace2:	5cd3      	ldrb	r3, [r2, r3]
 801ace4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ace8:	930a      	str	r3, [sp, #40]	; 0x28
 801acea:	e7ac      	b.n	801ac46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801acec:	b013      	add	sp, #76	; 0x4c
 801acee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801acf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801acf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf6:	880d      	ldrh	r5, [r1, #0]
 801acf8:	b087      	sub	sp, #28
 801acfa:	10ef      	asrs	r7, r5, #3
 801acfc:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ad00:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ad04:	00ed      	lsls	r5, r5, #3
 801ad06:	9701      	str	r7, [sp, #4]
 801ad08:	b2ed      	uxtb	r5, r5
 801ad0a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801ad0e:	9502      	str	r5, [sp, #8]
 801ad10:	9d01      	ldr	r5, [sp, #4]
 801ad12:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ad16:	fb06 0709 	mla	r7, r6, r9, r0
 801ad1a:	9103      	str	r1, [sp, #12]
 801ad1c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801ad20:	022d      	lsls	r5, r5, #8
 801ad22:	9902      	ldr	r1, [sp, #8]
 801ad24:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ad28:	430d      	orrs	r5, r1
 801ad2a:	2e00      	cmp	r6, #0
 801ad2c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ad30:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ad34:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ad38:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801ad3c:	eb02 0c07 	add.w	ip, r2, r7
 801ad40:	9505      	str	r5, [sp, #20]
 801ad42:	f2c0 80b6 	blt.w	801aeb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ad46:	45b3      	cmp	fp, r6
 801ad48:	f340 80b3 	ble.w	801aeb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ad4c:	2800      	cmp	r0, #0
 801ad4e:	f2c0 80ae 	blt.w	801aeae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ad52:	4581      	cmp	r9, r0
 801ad54:	f340 80ab 	ble.w	801aeae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ad58:	5dd7      	ldrb	r7, [r2, r7]
 801ad5a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ad5e:	441f      	add	r7, r3
 801ad60:	1c42      	adds	r2, r0, #1
 801ad62:	f100 80a9 	bmi.w	801aeb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ad66:	4591      	cmp	r9, r2
 801ad68:	f340 80a6 	ble.w	801aeb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ad6c:	2c00      	cmp	r4, #0
 801ad6e:	f000 80a3 	beq.w	801aeb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ad72:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ad76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ad7a:	441d      	add	r5, r3
 801ad7c:	3601      	adds	r6, #1
 801ad7e:	f100 809f 	bmi.w	801aec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ad82:	45b3      	cmp	fp, r6
 801ad84:	f340 809c 	ble.w	801aec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ad88:	f1be 0f00 	cmp.w	lr, #0
 801ad8c:	f000 8098 	beq.w	801aec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	f2c0 8093 	blt.w	801aebc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ad96:	4581      	cmp	r9, r0
 801ad98:	f340 8090 	ble.w	801aebc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ad9c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801ada0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ada4:	441e      	add	r6, r3
 801ada6:	3001      	adds	r0, #1
 801ada8:	f100 808d 	bmi.w	801aec6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801adac:	4581      	cmp	r9, r0
 801adae:	f340 808a 	ble.w	801aec6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801adb2:	2c00      	cmp	r4, #0
 801adb4:	f000 8087 	beq.w	801aec6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801adb8:	44e1      	add	r9, ip
 801adba:	f899 2001 	ldrb.w	r2, [r9, #1]
 801adbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801adc2:	4413      	add	r3, r2
 801adc4:	b2a4      	uxth	r4, r4
 801adc6:	fa1f fe8e 	uxth.w	lr, lr
 801adca:	fb04 fb0e 	mul.w	fp, r4, lr
 801adce:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801add2:	fa1f f08e 	uxth.w	r0, lr
 801add6:	fa1f fe88 	uxth.w	lr, r8
 801adda:	ea6f 0808 	mvn.w	r8, r8
 801adde:	0124      	lsls	r4, r4, #4
 801ade0:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801ade4:	eba4 040b 	sub.w	r4, r4, fp
 801ade8:	b2a2      	uxth	r2, r4
 801adea:	78ac      	ldrb	r4, [r5, #2]
 801adec:	f897 c002 	ldrb.w	ip, [r7, #2]
 801adf0:	4354      	muls	r4, r2
 801adf2:	eba9 0900 	sub.w	r9, r9, r0
 801adf6:	fa1f f989 	uxth.w	r9, r9
 801adfa:	fb09 440c 	mla	r4, r9, ip, r4
 801adfe:	f896 c002 	ldrb.w	ip, [r6, #2]
 801ae02:	fa5f f888 	uxtb.w	r8, r8
 801ae06:	fb00 440c 	mla	r4, r0, ip, r4
 801ae0a:	f893 c002 	ldrb.w	ip, [r3, #2]
 801ae0e:	fb1a fa08 	smulbb	sl, sl, r8
 801ae12:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ae16:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ae1a:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ae1e:	f895 a001 	ldrb.w	sl, [r5, #1]
 801ae22:	782d      	ldrb	r5, [r5, #0]
 801ae24:	fb02 fa0a 	mul.w	sl, r2, sl
 801ae28:	436a      	muls	r2, r5
 801ae2a:	787c      	ldrb	r4, [r7, #1]
 801ae2c:	783f      	ldrb	r7, [r7, #0]
 801ae2e:	fb09 aa04 	mla	sl, r9, r4, sl
 801ae32:	fb09 2207 	mla	r2, r9, r7, r2
 801ae36:	7874      	ldrb	r4, [r6, #1]
 801ae38:	7835      	ldrb	r5, [r6, #0]
 801ae3a:	fb00 aa04 	mla	sl, r0, r4, sl
 801ae3e:	fb00 2005 	mla	r0, r0, r5, r2
 801ae42:	785c      	ldrb	r4, [r3, #1]
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	fb0b a404 	mla	r4, fp, r4, sl
 801ae4a:	9901      	ldr	r1, [sp, #4]
 801ae4c:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ae50:	9b02      	ldr	r3, [sp, #8]
 801ae52:	fb11 fa08 	smulbb	sl, r1, r8
 801ae56:	fb13 f808 	smulbb	r8, r3, r8
 801ae5a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ae5e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ae62:	fb04 a40e 	mla	r4, r4, lr, sl
 801ae66:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801ae6a:	fa1f fc8c 	uxth.w	ip, ip
 801ae6e:	f10c 0301 	add.w	r3, ip, #1
 801ae72:	fa1f fe8e 	uxth.w	lr, lr
 801ae76:	b2a4      	uxth	r4, r4
 801ae78:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ae7c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801ae80:	f104 0a01 	add.w	sl, r4, #1
 801ae84:	f10e 0c01 	add.w	ip, lr, #1
 801ae88:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ae8c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ae90:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ae94:	0964      	lsrs	r4, r4, #5
 801ae96:	ea4c 0c03 	orr.w	ip, ip, r3
 801ae9a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801ae9e:	9b03      	ldr	r3, [sp, #12]
 801aea0:	ea4c 0c04 	orr.w	ip, ip, r4
 801aea4:	f8a3 c000 	strh.w	ip, [r3]
 801aea8:	b007      	add	sp, #28
 801aeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeae:	af05      	add	r7, sp, #20
 801aeb0:	e756      	b.n	801ad60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801aeb2:	ad05      	add	r5, sp, #20
 801aeb4:	462f      	mov	r7, r5
 801aeb6:	e761      	b.n	801ad7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801aeb8:	ad05      	add	r5, sp, #20
 801aeba:	e75f      	b.n	801ad7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801aebc:	ae05      	add	r6, sp, #20
 801aebe:	e772      	b.n	801ada6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801aec0:	ab05      	add	r3, sp, #20
 801aec2:	461e      	mov	r6, r3
 801aec4:	e77e      	b.n	801adc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801aec6:	ab05      	add	r3, sp, #20
 801aec8:	e77c      	b.n	801adc4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801aeca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aeca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aece:	b095      	sub	sp, #84	; 0x54
 801aed0:	9212      	str	r2, [sp, #72]	; 0x48
 801aed2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801aed4:	9013      	str	r0, [sp, #76]	; 0x4c
 801aed6:	9309      	str	r3, [sp, #36]	; 0x24
 801aed8:	6850      	ldr	r0, [r2, #4]
 801aeda:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801aede:	910e      	str	r1, [sp, #56]	; 0x38
 801aee0:	930f      	str	r3, [sp, #60]	; 0x3c
 801aee2:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801aee6:	fb00 1303 	mla	r3, r0, r3, r1
 801aeea:	6812      	ldr	r2, [r2, #0]
 801aeec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801aef0:	930a      	str	r3, [sp, #40]	; 0x28
 801aef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	930d      	str	r3, [sp, #52]	; 0x34
 801aef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801aefa:	685c      	ldr	r4, [r3, #4]
 801aefc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aefe:	3404      	adds	r4, #4
 801af00:	43db      	mvns	r3, r3
 801af02:	b2db      	uxtb	r3, r3
 801af04:	930b      	str	r3, [sp, #44]	; 0x2c
 801af06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af08:	2b00      	cmp	r3, #0
 801af0a:	dc03      	bgt.n	801af14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801af0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af0e:	2b00      	cmp	r3, #0
 801af10:	f340 8255 	ble.w	801b3be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801af14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801af16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801af1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801af1e:	1e48      	subs	r0, r1, #1
 801af20:	1e55      	subs	r5, r2, #1
 801af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af24:	2b00      	cmp	r3, #0
 801af26:	f340 80f9 	ble.w	801b11c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801af2a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801af2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801af2e:	1436      	asrs	r6, r6, #16
 801af30:	ea4f 4323 	mov.w	r3, r3, asr #16
 801af34:	d406      	bmi.n	801af44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af36:	4286      	cmp	r6, r0
 801af38:	da04      	bge.n	801af44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	db02      	blt.n	801af44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af3e:	42ab      	cmp	r3, r5
 801af40:	f2c0 80ed 	blt.w	801b11e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801af44:	3601      	adds	r6, #1
 801af46:	f100 80da 	bmi.w	801b0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801af4a:	42b1      	cmp	r1, r6
 801af4c:	f2c0 80d7 	blt.w	801b0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801af50:	3301      	adds	r3, #1
 801af52:	f100 80d4 	bmi.w	801b0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801af56:	429a      	cmp	r2, r3
 801af58:	f2c0 80d1 	blt.w	801b0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af5e:	9311      	str	r3, [sp, #68]	; 0x44
 801af60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af62:	930c      	str	r3, [sp, #48]	; 0x30
 801af64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af66:	2b00      	cmp	r3, #0
 801af68:	f340 80fa 	ble.w	801b160 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801af6c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801af6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801af70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801af72:	68c6      	ldr	r6, [r0, #12]
 801af74:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801af76:	141d      	asrs	r5, r3, #16
 801af78:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801af7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801af7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801af80:	1400      	asrs	r0, r0, #16
 801af82:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801af86:	6892      	ldr	r2, [r2, #8]
 801af88:	f100 813e 	bmi.w	801b208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801af8c:	1e57      	subs	r7, r2, #1
 801af8e:	42b8      	cmp	r0, r7
 801af90:	f280 813a 	bge.w	801b208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801af94:	2d00      	cmp	r5, #0
 801af96:	f2c0 8137 	blt.w	801b208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801af9a:	1e77      	subs	r7, r6, #1
 801af9c:	42bd      	cmp	r5, r7
 801af9e:	f280 8133 	bge.w	801b208 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801afa2:	b212      	sxth	r2, r2
 801afa4:	fb05 0002 	mla	r0, r5, r2, r0
 801afa8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801afaa:	f815 a000 	ldrb.w	sl, [r5, r0]
 801afae:	182e      	adds	r6, r5, r0
 801afb0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801afb4:	eb04 050a 	add.w	r5, r4, sl
 801afb8:	2b00      	cmp	r3, #0
 801afba:	f000 8117 	beq.w	801b1ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801afbe:	f896 c001 	ldrb.w	ip, [r6, #1]
 801afc2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801afc6:	44a4      	add	ip, r4
 801afc8:	2900      	cmp	r1, #0
 801afca:	f000 8117 	beq.w	801b1fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801afce:	18b0      	adds	r0, r6, r2
 801afd0:	7840      	ldrb	r0, [r0, #1]
 801afd2:	5cb2      	ldrb	r2, [r6, r2]
 801afd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801afd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801afdc:	4422      	add	r2, r4
 801afde:	4420      	add	r0, r4
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	b289      	uxth	r1, r1
 801afe4:	fb03 f901 	mul.w	r9, r3, r1
 801afe8:	011b      	lsls	r3, r3, #4
 801afea:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801afee:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801aff2:	eba3 0309 	sub.w	r3, r3, r9
 801aff6:	b29b      	uxth	r3, r3
 801aff8:	435f      	muls	r7, r3
 801affa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801affe:	b289      	uxth	r1, r1
 801b000:	f895 b002 	ldrb.w	fp, [r5, #2]
 801b004:	eba8 0801 	sub.w	r8, r8, r1
 801b008:	fa1f f888 	uxth.w	r8, r8
 801b00c:	fb08 770b 	mla	r7, r8, fp, r7
 801b010:	f892 b002 	ldrb.w	fp, [r2, #2]
 801b014:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b016:	fb01 770b 	mla	r7, r1, fp, r7
 801b01a:	f8b6 e000 	ldrh.w	lr, [r6]
 801b01e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801b022:	9310      	str	r3, [sp, #64]	; 0x40
 801b024:	fb09 770b 	mla	r7, r9, fp, r7
 801b028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b02a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801b02e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801b032:	fb1b fb03 	smulbb	fp, fp, r3
 801b036:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801b03a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801b03e:	fb07 b706 	mla	r7, r7, r6, fp
 801b042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b044:	f895 b001 	ldrb.w	fp, [r5, #1]
 801b048:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801b04c:	f89c c000 	ldrb.w	ip, [ip]
 801b050:	435d      	muls	r5, r3
 801b052:	fb08 550b 	mla	r5, r8, fp, r5
 801b056:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b05c:	fb01 550b 	mla	r5, r1, fp, r5
 801b060:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b064:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801b068:	fb09 550b 	mla	r5, r9, fp, r5
 801b06c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801b070:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b074:	fb1b fb03 	smulbb	fp, fp, r3
 801b078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b07a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b07e:	fb03 f30c 	mul.w	r3, r3, ip
 801b082:	fb08 330a 	mla	r3, r8, sl, r3
 801b086:	f892 c000 	ldrb.w	ip, [r2]
 801b08a:	fa5f fe8e 	uxtb.w	lr, lr
 801b08e:	fb01 330c 	mla	r3, r1, ip, r3
 801b092:	f890 c000 	ldrb.w	ip, [r0]
 801b096:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801b09a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0a0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b0a4:	fb1e fe03 	smulbb	lr, lr, r3
 801b0a8:	fb05 b506 	mla	r5, r5, r6, fp
 801b0ac:	fb0c e606 	mla	r6, ip, r6, lr
 801b0b0:	b2bf      	uxth	r7, r7
 801b0b2:	1c7b      	adds	r3, r7, #1
 801b0b4:	b2ad      	uxth	r5, r5
 801b0b6:	b2b6      	uxth	r6, r6
 801b0b8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b0bc:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801b0c0:	f105 0b01 	add.w	fp, r5, #1
 801b0c4:	1c77      	adds	r7, r6, #1
 801b0c6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801b0ca:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801b0ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b0d2:	096d      	lsrs	r5, r5, #5
 801b0d4:	431f      	orrs	r7, r3
 801b0d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0dc:	433d      	orrs	r5, r7
 801b0de:	801d      	strh	r5, [r3, #0]
 801b0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b0e4:	3302      	adds	r3, #2
 801b0e6:	930c      	str	r3, [sp, #48]	; 0x30
 801b0e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b0ea:	4413      	add	r3, r2
 801b0ec:	931f      	str	r3, [sp, #124]	; 0x7c
 801b0ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b0f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b0f2:	4413      	add	r3, r2
 801b0f4:	9320      	str	r3, [sp, #128]	; 0x80
 801b0f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b0f8:	3b01      	subs	r3, #1
 801b0fa:	9311      	str	r3, [sp, #68]	; 0x44
 801b0fc:	e732      	b.n	801af64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b0fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b100:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801b102:	4433      	add	r3, r6
 801b104:	931f      	str	r3, [sp, #124]	; 0x7c
 801b106:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801b108:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b10a:	4433      	add	r3, r6
 801b10c:	9320      	str	r3, [sp, #128]	; 0x80
 801b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b110:	3b01      	subs	r3, #1
 801b112:	9309      	str	r3, [sp, #36]	; 0x24
 801b114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b116:	3302      	adds	r3, #2
 801b118:	930a      	str	r3, [sp, #40]	; 0x28
 801b11a:	e702      	b.n	801af22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b11c:	d027      	beq.n	801b16e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801b11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b120:	9821      	ldr	r0, [sp, #132]	; 0x84
 801b122:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801b124:	3b01      	subs	r3, #1
 801b126:	fb00 5003 	mla	r0, r0, r3, r5
 801b12a:	1400      	asrs	r0, r0, #16
 801b12c:	f53f af16 	bmi.w	801af5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b130:	3901      	subs	r1, #1
 801b132:	4288      	cmp	r0, r1
 801b134:	f6bf af12 	bge.w	801af5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b138:	9922      	ldr	r1, [sp, #136]	; 0x88
 801b13a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801b13c:	fb01 0303 	mla	r3, r1, r3, r0
 801b140:	141b      	asrs	r3, r3, #16
 801b142:	f53f af0b 	bmi.w	801af5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b146:	3a01      	subs	r2, #1
 801b148:	4293      	cmp	r3, r2
 801b14a:	f6bf af07 	bge.w	801af5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b150:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801b154:	9311      	str	r3, [sp, #68]	; 0x44
 801b156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b158:	930c      	str	r3, [sp, #48]	; 0x30
 801b15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	dc70      	bgt.n	801b242 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b164:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b168:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b16c:	930a      	str	r3, [sp, #40]	; 0x28
 801b16e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b170:	2b00      	cmp	r3, #0
 801b172:	f340 8124 	ble.w	801b3be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801b176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b17a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b17e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b182:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b186:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b18a:	eef0 6a62 	vmov.f32	s13, s5
 801b18e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b192:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b196:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b19a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b19e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1a2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801b1a6:	eef0 6a43 	vmov.f32	s13, s6
 801b1aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1ae:	ee12 2a90 	vmov	r2, s5
 801b1b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b1b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b1bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1c0:	ee13 2a10 	vmov	r2, s6
 801b1c4:	9321      	str	r3, [sp, #132]	; 0x84
 801b1c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b1c8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801b1cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1d0:	9322      	str	r3, [sp, #136]	; 0x88
 801b1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b1d6:	3b01      	subs	r3, #1
 801b1d8:	930e      	str	r3, [sp, #56]	; 0x38
 801b1da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b1dc:	bf08      	it	eq
 801b1de:	4613      	moveq	r3, r2
 801b1e0:	eeb0 3a67 	vmov.f32	s6, s15
 801b1e4:	9309      	str	r3, [sp, #36]	; 0x24
 801b1e6:	eef0 2a47 	vmov.f32	s5, s14
 801b1ea:	e68c      	b.n	801af06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b1ec:	b149      	cbz	r1, 801b202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	5cb2      	ldrb	r2, [r6, r2]
 801b1f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b1f6:	4422      	add	r2, r4
 801b1f8:	46ac      	mov	ip, r5
 801b1fa:	e6f1      	b.n	801afe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b1fc:	4628      	mov	r0, r5
 801b1fe:	462a      	mov	r2, r5
 801b200:	e6ee      	b.n	801afe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b202:	4628      	mov	r0, r5
 801b204:	462a      	mov	r2, r5
 801b206:	e7f7      	b.n	801b1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801b208:	1c47      	adds	r7, r0, #1
 801b20a:	f53f af69 	bmi.w	801b0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b20e:	42ba      	cmp	r2, r7
 801b210:	f6ff af66 	blt.w	801b0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b214:	1c6f      	adds	r7, r5, #1
 801b216:	f53f af63 	bmi.w	801b0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b21a:	42be      	cmp	r6, r7
 801b21c:	f6ff af60 	blt.w	801b0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b220:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b222:	b236      	sxth	r6, r6
 801b224:	b212      	sxth	r2, r2
 801b226:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801b22a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801b22e:	9002      	str	r0, [sp, #8]
 801b230:	9200      	str	r2, [sp, #0]
 801b232:	9601      	str	r6, [sp, #4]
 801b234:	4623      	mov	r3, r4
 801b236:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801b23a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b23c:	f7ff fd59 	bl	801acf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801b240:	e74e      	b.n	801b0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b242:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b244:	9820      	ldr	r0, [sp, #128]	; 0x80
 801b246:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b24a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801b24c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801b24e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b252:	142d      	asrs	r5, r5, #16
 801b254:	1400      	asrs	r0, r0, #16
 801b256:	fb02 5000 	mla	r0, r2, r0, r5
 801b25a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b25c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b25e:	f815 9000 	ldrb.w	r9, [r5, r0]
 801b262:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801b266:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b26a:	182e      	adds	r6, r5, r0
 801b26c:	eb04 0509 	add.w	r5, r4, r9
 801b270:	2b00      	cmp	r3, #0
 801b272:	f000 8096 	beq.w	801b3a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801b276:	7877      	ldrb	r7, [r6, #1]
 801b278:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b27c:	4427      	add	r7, r4
 801b27e:	2900      	cmp	r1, #0
 801b280:	f000 8097 	beq.w	801b3b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801b284:	18b0      	adds	r0, r6, r2
 801b286:	7840      	ldrb	r0, [r0, #1]
 801b288:	5cb2      	ldrb	r2, [r6, r2]
 801b28a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b28e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b292:	4422      	add	r2, r4
 801b294:	4420      	add	r0, r4
 801b296:	b29b      	uxth	r3, r3
 801b298:	b289      	uxth	r1, r1
 801b29a:	fb03 f801 	mul.w	r8, r3, r1
 801b29e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b2a0:	011b      	lsls	r3, r3, #4
 801b2a2:	f8b6 c000 	ldrh.w	ip, [r6]
 801b2a6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b2aa:	78be      	ldrb	r6, [r7, #2]
 801b2ac:	eba3 0308 	sub.w	r3, r3, r8
 801b2b0:	b29b      	uxth	r3, r3
 801b2b2:	435e      	muls	r6, r3
 801b2b4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801b2b8:	b289      	uxth	r1, r1
 801b2ba:	f895 b002 	ldrb.w	fp, [r5, #2]
 801b2be:	ebae 0e01 	sub.w	lr, lr, r1
 801b2c2:	fa1f fe8e 	uxth.w	lr, lr
 801b2c6:	fb0e 660b 	mla	r6, lr, fp, r6
 801b2ca:	f892 b002 	ldrb.w	fp, [r2, #2]
 801b2ce:	9310      	str	r3, [sp, #64]	; 0x40
 801b2d0:	fb01 660b 	mla	r6, r1, fp, r6
 801b2d4:	f890 b002 	ldrb.w	fp, [r0, #2]
 801b2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2da:	fb08 660b 	mla	r6, r8, fp, r6
 801b2de:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801b2e2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801b2e6:	fb1b fb03 	smulbb	fp, fp, r3
 801b2ea:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b2ee:	fb06 b60a 	mla	r6, r6, sl, fp
 801b2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b2f4:	f895 b001 	ldrb.w	fp, [r5, #1]
 801b2f8:	787d      	ldrb	r5, [r7, #1]
 801b2fa:	783f      	ldrb	r7, [r7, #0]
 801b2fc:	435d      	muls	r5, r3
 801b2fe:	fb0e 550b 	mla	r5, lr, fp, r5
 801b302:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b308:	fb01 550b 	mla	r5, r1, fp, r5
 801b30c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b310:	f814 9009 	ldrb.w	r9, [r4, r9]
 801b314:	fb08 550b 	mla	r5, r8, fp, r5
 801b318:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801b31c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b320:	fb1b fb03 	smulbb	fp, fp, r3
 801b324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b326:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b32a:	437b      	muls	r3, r7
 801b32c:	fb0e 3309 	mla	r3, lr, r9, r3
 801b330:	7817      	ldrb	r7, [r2, #0]
 801b332:	fa5f fc8c 	uxtb.w	ip, ip
 801b336:	fb01 3307 	mla	r3, r1, r7, r3
 801b33a:	7807      	ldrb	r7, [r0, #0]
 801b33c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801b340:	fb08 3707 	mla	r7, r8, r7, r3
 801b344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b346:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801b34a:	fb1c fc03 	smulbb	ip, ip, r3
 801b34e:	fb05 b50a 	mla	r5, r5, sl, fp
 801b352:	fb07 c70a 	mla	r7, r7, sl, ip
 801b356:	b2b6      	uxth	r6, r6
 801b358:	b2ad      	uxth	r5, r5
 801b35a:	b2bf      	uxth	r7, r7
 801b35c:	1c73      	adds	r3, r6, #1
 801b35e:	1c7a      	adds	r2, r7, #1
 801b360:	f105 0b01 	add.w	fp, r5, #1
 801b364:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b368:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801b36c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801b370:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b374:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b378:	096d      	lsrs	r5, r5, #5
 801b37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b37c:	4316      	orrs	r6, r2
 801b37e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b382:	432e      	orrs	r6, r5
 801b384:	f823 6b02 	strh.w	r6, [r3], #2
 801b388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b38a:	930c      	str	r3, [sp, #48]	; 0x30
 801b38c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b38e:	4413      	add	r3, r2
 801b390:	931f      	str	r3, [sp, #124]	; 0x7c
 801b392:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b396:	4413      	add	r3, r2
 801b398:	9320      	str	r3, [sp, #128]	; 0x80
 801b39a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b39c:	3b01      	subs	r3, #1
 801b39e:	9311      	str	r3, [sp, #68]	; 0x44
 801b3a0:	e6db      	b.n	801b15a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801b3a2:	b149      	cbz	r1, 801b3b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801b3a4:	4628      	mov	r0, r5
 801b3a6:	5cb2      	ldrb	r2, [r6, r2]
 801b3a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b3ac:	4422      	add	r2, r4
 801b3ae:	462f      	mov	r7, r5
 801b3b0:	e771      	b.n	801b296 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801b3b2:	4628      	mov	r0, r5
 801b3b4:	462a      	mov	r2, r5
 801b3b6:	e76e      	b.n	801b296 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801b3b8:	4628      	mov	r0, r5
 801b3ba:	462a      	mov	r2, r5
 801b3bc:	e7f7      	b.n	801b3ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b3be:	b015      	add	sp, #84	; 0x54
 801b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801b3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c8:	880f      	ldrh	r7, [r1, #0]
 801b3ca:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801b3ce:	023c      	lsls	r4, r7, #8
 801b3d0:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801b3d4:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801b3d8:	fb05 ca0e 	mla	sl, r5, lr, ip
 801b3dc:	017c      	lsls	r4, r7, #5
 801b3de:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801b3e2:	00ff      	lsls	r7, r7, #3
 801b3e4:	ea4b 0404 	orr.w	r4, fp, r4
 801b3e8:	b2ff      	uxtb	r7, r7
 801b3ea:	4327      	orrs	r7, r4
 801b3ec:	2d00      	cmp	r5, #0
 801b3ee:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801b3f2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801b3f6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801b3fa:	eb02 080a 	add.w	r8, r2, sl
 801b3fe:	9701      	str	r7, [sp, #4]
 801b400:	db7e      	blt.n	801b500 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801b402:	45a9      	cmp	r9, r5
 801b404:	dd7c      	ble.n	801b500 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801b406:	f1bc 0f00 	cmp.w	ip, #0
 801b40a:	db77      	blt.n	801b4fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801b40c:	45e6      	cmp	lr, ip
 801b40e:	dd75      	ble.n	801b4fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801b410:	f812 700a 	ldrb.w	r7, [r2, sl]
 801b414:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b418:	441f      	add	r7, r3
 801b41a:	f11c 0201 	adds.w	r2, ip, #1
 801b41e:	d472      	bmi.n	801b506 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801b420:	4596      	cmp	lr, r2
 801b422:	dd70      	ble.n	801b506 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801b424:	2800      	cmp	r0, #0
 801b426:	d06e      	beq.n	801b506 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801b428:	f898 4001 	ldrb.w	r4, [r8, #1]
 801b42c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b430:	441c      	add	r4, r3
 801b432:	3501      	adds	r5, #1
 801b434:	d46b      	bmi.n	801b50e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801b436:	45a9      	cmp	r9, r5
 801b438:	dd69      	ble.n	801b50e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801b43a:	2e00      	cmp	r6, #0
 801b43c:	d067      	beq.n	801b50e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801b43e:	f1bc 0f00 	cmp.w	ip, #0
 801b442:	db62      	blt.n	801b50a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801b444:	45e6      	cmp	lr, ip
 801b446:	dd60      	ble.n	801b50a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801b448:	f818 500e 	ldrb.w	r5, [r8, lr]
 801b44c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b450:	441d      	add	r5, r3
 801b452:	f11c 0201 	adds.w	r2, ip, #1
 801b456:	d45d      	bmi.n	801b514 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801b458:	4596      	cmp	lr, r2
 801b45a:	dd5b      	ble.n	801b514 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801b45c:	2800      	cmp	r0, #0
 801b45e:	d059      	beq.n	801b514 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801b460:	44c6      	add	lr, r8
 801b462:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b466:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b46a:	4413      	add	r3, r2
 801b46c:	b280      	uxth	r0, r0
 801b46e:	b2b2      	uxth	r2, r6
 801b470:	fb00 f602 	mul.w	r6, r0, r2
 801b474:	0100      	lsls	r0, r0, #4
 801b476:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801b47a:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801b47e:	1b80      	subs	r0, r0, r6
 801b480:	fa1f fc82 	uxth.w	ip, r2
 801b484:	b282      	uxth	r2, r0
 801b486:	78a0      	ldrb	r0, [r4, #2]
 801b488:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b48c:	4350      	muls	r0, r2
 801b48e:	eba8 080c 	sub.w	r8, r8, ip
 801b492:	fa1f f888 	uxth.w	r8, r8
 801b496:	fb08 0e0e 	mla	lr, r8, lr, r0
 801b49a:	78a8      	ldrb	r0, [r5, #2]
 801b49c:	f897 9000 	ldrb.w	r9, [r7]
 801b4a0:	fb0c e000 	mla	r0, ip, r0, lr
 801b4a4:	f893 e002 	ldrb.w	lr, [r3, #2]
 801b4a8:	787f      	ldrb	r7, [r7, #1]
 801b4aa:	fb06 0e0e 	mla	lr, r6, lr, r0
 801b4ae:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801b4b2:	f894 e000 	ldrb.w	lr, [r4]
 801b4b6:	fb02 fe0e 	mul.w	lr, r2, lr
 801b4ba:	fb08 e909 	mla	r9, r8, r9, lr
 801b4be:	f895 e000 	ldrb.w	lr, [r5]
 801b4c2:	fb0c 990e 	mla	r9, ip, lr, r9
 801b4c6:	f893 e000 	ldrb.w	lr, [r3]
 801b4ca:	785b      	ldrb	r3, [r3, #1]
 801b4cc:	fb06 9e0e 	mla	lr, r6, lr, r9
 801b4d0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b4d4:	ea4e 0e00 	orr.w	lr, lr, r0
 801b4d8:	7860      	ldrb	r0, [r4, #1]
 801b4da:	4350      	muls	r0, r2
 801b4dc:	fb08 0007 	mla	r0, r8, r7, r0
 801b4e0:	786a      	ldrb	r2, [r5, #1]
 801b4e2:	fb0c 0202 	mla	r2, ip, r2, r0
 801b4e6:	fb06 2303 	mla	r3, r6, r3, r2
 801b4ea:	095b      	lsrs	r3, r3, #5
 801b4ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b4f0:	ea4e 0303 	orr.w	r3, lr, r3
 801b4f4:	800b      	strh	r3, [r1, #0]
 801b4f6:	b003      	add	sp, #12
 801b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4fc:	af01      	add	r7, sp, #4
 801b4fe:	e78c      	b.n	801b41a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801b500:	ac01      	add	r4, sp, #4
 801b502:	4627      	mov	r7, r4
 801b504:	e795      	b.n	801b432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801b506:	ac01      	add	r4, sp, #4
 801b508:	e793      	b.n	801b432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801b50a:	ad01      	add	r5, sp, #4
 801b50c:	e7a1      	b.n	801b452 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801b50e:	ab01      	add	r3, sp, #4
 801b510:	461d      	mov	r5, r3
 801b512:	e7ab      	b.n	801b46c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801b514:	ab01      	add	r3, sp, #4
 801b516:	e7a9      	b.n	801b46c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801b518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b51c:	b08f      	sub	sp, #60	; 0x3c
 801b51e:	920c      	str	r2, [sp, #48]	; 0x30
 801b520:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b522:	900d      	str	r0, [sp, #52]	; 0x34
 801b524:	6850      	ldr	r0, [r2, #4]
 801b526:	910a      	str	r1, [sp, #40]	; 0x28
 801b528:	9306      	str	r3, [sp, #24]
 801b52a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801b52e:	fb00 1303 	mla	r3, r0, r3, r1
 801b532:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801b536:	6812      	ldr	r2, [r2, #0]
 801b538:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b53c:	9307      	str	r3, [sp, #28]
 801b53e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	9308      	str	r3, [sp, #32]
 801b544:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b546:	685c      	ldr	r4, [r3, #4]
 801b548:	3404      	adds	r4, #4
 801b54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	dc03      	bgt.n	801b558 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b552:	2b00      	cmp	r3, #0
 801b554:	f340 81d6 	ble.w	801b904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801b558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b55a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b55e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b562:	1e48      	subs	r0, r1, #1
 801b564:	1e56      	subs	r6, r2, #1
 801b566:	9b06      	ldr	r3, [sp, #24]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	f340 80b7 	ble.w	801b6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801b56e:	ea5f 472b 	movs.w	r7, fp, asr #16
 801b572:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b576:	d406      	bmi.n	801b586 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b578:	4287      	cmp	r7, r0
 801b57a:	da04      	bge.n	801b586 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	db02      	blt.n	801b586 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b580:	42b3      	cmp	r3, r6
 801b582:	f2c0 80ac 	blt.w	801b6de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b586:	3701      	adds	r7, #1
 801b588:	f100 809d 	bmi.w	801b6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b58c:	42b9      	cmp	r1, r7
 801b58e:	f2c0 809a 	blt.w	801b6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b592:	3301      	adds	r3, #1
 801b594:	f100 8097 	bmi.w	801b6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b598:	429a      	cmp	r2, r3
 801b59a:	f2c0 8094 	blt.w	801b6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b59e:	9b06      	ldr	r3, [sp, #24]
 801b5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b5a2:	9b07      	ldr	r3, [sp, #28]
 801b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	f340 80b5 	ble.w	801b718 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b5ae:	9820      	ldr	r0, [sp, #128]	; 0x80
 801b5b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b5b2:	68c7      	ldr	r7, [r0, #12]
 801b5b4:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b5b8:	ea4f 4625 	mov.w	r6, r5, asr #16
 801b5bc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b5c0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b5c4:	6892      	ldr	r2, [r2, #8]
 801b5c6:	f100 80fb 	bmi.w	801b7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b5ca:	f102 3cff 	add.w	ip, r2, #4294967295
 801b5ce:	4560      	cmp	r0, ip
 801b5d0:	f280 80f6 	bge.w	801b7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b5d4:	2e00      	cmp	r6, #0
 801b5d6:	f2c0 80f3 	blt.w	801b7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b5da:	f107 3cff 	add.w	ip, r7, #4294967295
 801b5de:	4566      	cmp	r6, ip
 801b5e0:	f280 80ee 	bge.w	801b7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b5e4:	b212      	sxth	r2, r2
 801b5e6:	fb06 0002 	mla	r0, r6, r2, r0
 801b5ea:	9e08      	ldr	r6, [sp, #32]
 801b5ec:	1837      	adds	r7, r6, r0
 801b5ee:	5c30      	ldrb	r0, [r6, r0]
 801b5f0:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801b5f4:	eb04 0c08 	add.w	ip, r4, r8
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	f000 80d3 	beq.w	801b7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b5fe:	787e      	ldrb	r6, [r7, #1]
 801b600:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b604:	4426      	add	r6, r4
 801b606:	2900      	cmp	r1, #0
 801b608:	f000 80d4 	beq.w	801b7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801b60c:	18b8      	adds	r0, r7, r2
 801b60e:	7840      	ldrb	r0, [r0, #1]
 801b610:	5cba      	ldrb	r2, [r7, r2]
 801b612:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b61a:	4422      	add	r2, r4
 801b61c:	4420      	add	r0, r4
 801b61e:	b29b      	uxth	r3, r3
 801b620:	b289      	uxth	r1, r1
 801b622:	fb03 f901 	mul.w	r9, r3, r1
 801b626:	011b      	lsls	r3, r3, #4
 801b628:	78b7      	ldrb	r7, [r6, #2]
 801b62a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b62e:	eba3 0309 	sub.w	r3, r3, r9
 801b632:	b29b      	uxth	r3, r3
 801b634:	435f      	muls	r7, r3
 801b636:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b63a:	b289      	uxth	r1, r1
 801b63c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801b640:	ebae 0e01 	sub.w	lr, lr, r1
 801b644:	fa1f fe8e 	uxth.w	lr, lr
 801b648:	fb0e 770a 	mla	r7, lr, sl, r7
 801b64c:	f892 a002 	ldrb.w	sl, [r2, #2]
 801b650:	f89c c001 	ldrb.w	ip, [ip, #1]
 801b654:	fb01 770a 	mla	r7, r1, sl, r7
 801b658:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b65c:	fb09 7a0a 	mla	sl, r9, sl, r7
 801b660:	f814 7008 	ldrb.w	r7, [r4, r8]
 801b664:	f896 8000 	ldrb.w	r8, [r6]
 801b668:	7876      	ldrb	r6, [r6, #1]
 801b66a:	fb03 f808 	mul.w	r8, r3, r8
 801b66e:	fb0e 8807 	mla	r8, lr, r7, r8
 801b672:	7817      	ldrb	r7, [r2, #0]
 801b674:	4373      	muls	r3, r6
 801b676:	fb01 8807 	mla	r8, r1, r7, r8
 801b67a:	7807      	ldrb	r7, [r0, #0]
 801b67c:	fb0e 330c 	mla	r3, lr, ip, r3
 801b680:	fb09 8707 	mla	r7, r9, r7, r8
 801b684:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801b688:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b68c:	ea47 070a 	orr.w	r7, r7, sl
 801b690:	f892 a001 	ldrb.w	sl, [r2, #1]
 801b694:	fb01 310a 	mla	r1, r1, sl, r3
 801b698:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b69e:	fb09 1a0a 	mla	sl, r9, sl, r1
 801b6a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b6a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b6aa:	ea47 070a 	orr.w	r7, r7, sl
 801b6ae:	801f      	strh	r7, [r3, #0]
 801b6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6b2:	3302      	adds	r3, #2
 801b6b4:	9309      	str	r3, [sp, #36]	; 0x24
 801b6b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6b8:	449b      	add	fp, r3
 801b6ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b6bc:	441d      	add	r5, r3
 801b6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6c0:	3b01      	subs	r3, #1
 801b6c2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6c4:	e76f      	b.n	801b5a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6c8:	449b      	add	fp, r3
 801b6ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b6cc:	441d      	add	r5, r3
 801b6ce:	9b06      	ldr	r3, [sp, #24]
 801b6d0:	3b01      	subs	r3, #1
 801b6d2:	9306      	str	r3, [sp, #24]
 801b6d4:	9b07      	ldr	r3, [sp, #28]
 801b6d6:	3302      	adds	r3, #2
 801b6d8:	9307      	str	r3, [sp, #28]
 801b6da:	e744      	b.n	801b566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b6dc:	d023      	beq.n	801b726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b6de:	9b06      	ldr	r3, [sp, #24]
 801b6e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b6e2:	3b01      	subs	r3, #1
 801b6e4:	fb00 b003 	mla	r0, r0, r3, fp
 801b6e8:	1400      	asrs	r0, r0, #16
 801b6ea:	f53f af58 	bmi.w	801b59e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b6ee:	3901      	subs	r1, #1
 801b6f0:	4288      	cmp	r0, r1
 801b6f2:	f6bf af54 	bge.w	801b59e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b6f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b6f8:	fb01 5303 	mla	r3, r1, r3, r5
 801b6fc:	141b      	asrs	r3, r3, #16
 801b6fe:	f53f af4e 	bmi.w	801b59e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b702:	3a01      	subs	r2, #1
 801b704:	4293      	cmp	r3, r2
 801b706:	f6bf af4a 	bge.w	801b59e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b70a:	9b06      	ldr	r3, [sp, #24]
 801b70c:	9309      	str	r3, [sp, #36]	; 0x24
 801b70e:	9b07      	ldr	r3, [sp, #28]
 801b710:	930b      	str	r3, [sp, #44]	; 0x2c
 801b712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b714:	2b00      	cmp	r3, #0
 801b716:	dc70      	bgt.n	801b7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801b718:	9b06      	ldr	r3, [sp, #24]
 801b71a:	9a07      	ldr	r2, [sp, #28]
 801b71c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b720:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b724:	9307      	str	r3, [sp, #28]
 801b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f340 80eb 	ble.w	801b904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801b72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b732:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b736:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b73a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b73e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b742:	eef0 6a62 	vmov.f32	s13, s5
 801b746:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b74a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b74e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b752:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b756:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b75a:	ee16 ba90 	vmov	fp, s13
 801b75e:	eef0 6a43 	vmov.f32	s13, s6
 801b762:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b766:	ee12 2a90 	vmov	r2, s5
 801b76a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b76e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b770:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b774:	fb92 f3f3 	sdiv	r3, r2, r3
 801b778:	ee13 2a10 	vmov	r2, s6
 801b77c:	931b      	str	r3, [sp, #108]	; 0x6c
 801b77e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b780:	ee16 5a90 	vmov	r5, s13
 801b784:	fb92 f3f3 	sdiv	r3, r2, r3
 801b788:	931c      	str	r3, [sp, #112]	; 0x70
 801b78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b78c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b78e:	3b01      	subs	r3, #1
 801b790:	930a      	str	r3, [sp, #40]	; 0x28
 801b792:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b794:	bf08      	it	eq
 801b796:	4613      	moveq	r3, r2
 801b798:	eeb0 3a67 	vmov.f32	s6, s15
 801b79c:	9306      	str	r3, [sp, #24]
 801b79e:	eef0 2a47 	vmov.f32	s5, s14
 801b7a2:	e6d2      	b.n	801b54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b7a4:	b149      	cbz	r1, 801b7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b7a6:	4660      	mov	r0, ip
 801b7a8:	5cba      	ldrb	r2, [r7, r2]
 801b7aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7ae:	4422      	add	r2, r4
 801b7b0:	4666      	mov	r6, ip
 801b7b2:	e734      	b.n	801b61e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b7b4:	4660      	mov	r0, ip
 801b7b6:	4662      	mov	r2, ip
 801b7b8:	e731      	b.n	801b61e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b7ba:	4660      	mov	r0, ip
 801b7bc:	4662      	mov	r2, ip
 801b7be:	e7f7      	b.n	801b7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801b7c0:	f110 0c01 	adds.w	ip, r0, #1
 801b7c4:	f53f af74 	bmi.w	801b6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b7c8:	4562      	cmp	r2, ip
 801b7ca:	f6ff af71 	blt.w	801b6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b7ce:	f116 0c01 	adds.w	ip, r6, #1
 801b7d2:	f53f af6d 	bmi.w	801b6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b7d6:	4567      	cmp	r7, ip
 801b7d8:	f6ff af6a 	blt.w	801b6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b7dc:	b23f      	sxth	r7, r7
 801b7de:	b212      	sxth	r2, r2
 801b7e0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801b7e4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801b7e8:	9200      	str	r2, [sp, #0]
 801b7ea:	9701      	str	r7, [sp, #4]
 801b7ec:	4623      	mov	r3, r4
 801b7ee:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b7f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b7f4:	f7ff fde6 	bl	801b3c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801b7f8:	e75a      	b.n	801b6b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b7fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b7fc:	ea4f 462b 	mov.w	r6, fp, asr #16
 801b800:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b804:	1428      	asrs	r0, r5, #16
 801b806:	fb02 6000 	mla	r0, r2, r0, r6
 801b80a:	9e08      	ldr	r6, [sp, #32]
 801b80c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b810:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b814:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b818:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b81c:	1837      	adds	r7, r6, r0
 801b81e:	eb04 0c08 	add.w	ip, r4, r8
 801b822:	2b00      	cmp	r3, #0
 801b824:	d060      	beq.n	801b8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801b826:	787e      	ldrb	r6, [r7, #1]
 801b828:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b82c:	4426      	add	r6, r4
 801b82e:	2900      	cmp	r1, #0
 801b830:	d062      	beq.n	801b8f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801b832:	18b8      	adds	r0, r7, r2
 801b834:	7840      	ldrb	r0, [r0, #1]
 801b836:	5cba      	ldrb	r2, [r7, r2]
 801b838:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b83c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b840:	4422      	add	r2, r4
 801b842:	4420      	add	r0, r4
 801b844:	b29b      	uxth	r3, r3
 801b846:	b289      	uxth	r1, r1
 801b848:	fb03 f901 	mul.w	r9, r3, r1
 801b84c:	011b      	lsls	r3, r3, #4
 801b84e:	78b7      	ldrb	r7, [r6, #2]
 801b850:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b854:	eba3 0309 	sub.w	r3, r3, r9
 801b858:	b29b      	uxth	r3, r3
 801b85a:	435f      	muls	r7, r3
 801b85c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b860:	b289      	uxth	r1, r1
 801b862:	f89c a002 	ldrb.w	sl, [ip, #2]
 801b866:	ebae 0e01 	sub.w	lr, lr, r1
 801b86a:	fa1f fe8e 	uxth.w	lr, lr
 801b86e:	fb0e 770a 	mla	r7, lr, sl, r7
 801b872:	f892 a002 	ldrb.w	sl, [r2, #2]
 801b876:	f89c c001 	ldrb.w	ip, [ip, #1]
 801b87a:	fb01 770a 	mla	r7, r1, sl, r7
 801b87e:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b882:	fb09 7a0a 	mla	sl, r9, sl, r7
 801b886:	f814 7008 	ldrb.w	r7, [r4, r8]
 801b88a:	f896 8000 	ldrb.w	r8, [r6]
 801b88e:	7876      	ldrb	r6, [r6, #1]
 801b890:	fb03 f808 	mul.w	r8, r3, r8
 801b894:	fb0e 8807 	mla	r8, lr, r7, r8
 801b898:	7817      	ldrb	r7, [r2, #0]
 801b89a:	4373      	muls	r3, r6
 801b89c:	fb01 8807 	mla	r8, r1, r7, r8
 801b8a0:	7807      	ldrb	r7, [r0, #0]
 801b8a2:	fb0e 330c 	mla	r3, lr, ip, r3
 801b8a6:	fb09 8707 	mla	r7, r9, r7, r8
 801b8aa:	7856      	ldrb	r6, [r2, #1]
 801b8ac:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801b8b0:	fb01 3306 	mla	r3, r1, r6, r3
 801b8b4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b8b8:	ea47 070a 	orr.w	r7, r7, sl
 801b8bc:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b8c0:	fb09 3a0a 	mla	sl, r9, sl, r3
 801b8c4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8ca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b8ce:	ea47 070a 	orr.w	r7, r7, sl
 801b8d2:	f823 7b02 	strh.w	r7, [r3], #2
 801b8d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b8da:	449b      	add	fp, r3
 801b8dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b8de:	441d      	add	r5, r3
 801b8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8e2:	3b01      	subs	r3, #1
 801b8e4:	9309      	str	r3, [sp, #36]	; 0x24
 801b8e6:	e714      	b.n	801b712 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b8e8:	b149      	cbz	r1, 801b8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801b8ea:	4660      	mov	r0, ip
 801b8ec:	5cba      	ldrb	r2, [r7, r2]
 801b8ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b8f2:	4422      	add	r2, r4
 801b8f4:	4666      	mov	r6, ip
 801b8f6:	e7a5      	b.n	801b844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b8f8:	4660      	mov	r0, ip
 801b8fa:	4662      	mov	r2, ip
 801b8fc:	e7a2      	b.n	801b844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b8fe:	4660      	mov	r0, ip
 801b900:	4662      	mov	r2, ip
 801b902:	e7f7      	b.n	801b8f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801b904:	b00f      	add	sp, #60	; 0x3c
 801b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b90a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801b90a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90e:	b085      	sub	sp, #20
 801b910:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801b914:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801b918:	9102      	str	r1, [sp, #8]
 801b91a:	fb04 710c 	mla	r1, r4, ip, r7
 801b91e:	2c00      	cmp	r4, #0
 801b920:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801b924:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801b928:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801b92c:	eb02 0e01 	add.w	lr, r2, r1
 801b930:	f2c0 8122 	blt.w	801bb78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801b934:	45a0      	cmp	r8, r4
 801b936:	f340 811f 	ble.w	801bb78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801b93a:	2f00      	cmp	r7, #0
 801b93c:	f2c0 811a 	blt.w	801bb74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801b940:	45bc      	cmp	ip, r7
 801b942:	f340 8117 	ble.w	801bb74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801b946:	5c52      	ldrb	r2, [r2, r1]
 801b948:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b94c:	1c7a      	adds	r2, r7, #1
 801b94e:	f100 8116 	bmi.w	801bb7e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801b952:	4594      	cmp	ip, r2
 801b954:	f340 8113 	ble.w	801bb7e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801b958:	2e00      	cmp	r6, #0
 801b95a:	f000 8112 	beq.w	801bb82 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801b95e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b962:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b966:	3401      	adds	r4, #1
 801b968:	f100 810f 	bmi.w	801bb8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801b96c:	45a0      	cmp	r8, r4
 801b96e:	f340 810c 	ble.w	801bb8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801b972:	2800      	cmp	r0, #0
 801b974:	f000 810c 	beq.w	801bb90 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801b978:	2f00      	cmp	r7, #0
 801b97a:	f2c0 8104 	blt.w	801bb86 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801b97e:	45bc      	cmp	ip, r7
 801b980:	f340 8101 	ble.w	801bb86 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801b984:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801b988:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801b98c:	3701      	adds	r7, #1
 801b98e:	f100 8102 	bmi.w	801bb96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801b992:	45bc      	cmp	ip, r7
 801b994:	f340 80ff 	ble.w	801bb96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801b998:	2e00      	cmp	r6, #0
 801b99a:	f000 80fe 	beq.w	801bb9a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801b99e:	44f4      	add	ip, lr
 801b9a0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b9a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b9a8:	b2b6      	uxth	r6, r6
 801b9aa:	b280      	uxth	r0, r0
 801b9ac:	fb00 fe06 	mul.w	lr, r0, r6
 801b9b0:	0136      	lsls	r6, r6, #4
 801b9b2:	eba6 070e 	sub.w	r7, r6, lr
 801b9b6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801b9ba:	b2bf      	uxth	r7, r7
 801b9bc:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801b9c0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801b9c4:	fb0a f607 	mul.w	r6, sl, r7
 801b9c8:	b280      	uxth	r0, r0
 801b9ca:	1a1b      	subs	r3, r3, r0
 801b9cc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801b9d0:	b29b      	uxth	r3, r3
 801b9d2:	fb0b 6603 	mla	r6, fp, r3, r6
 801b9d6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b9da:	fb00 6609 	mla	r6, r0, r9, r6
 801b9de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b9e2:	fb0e 6608 	mla	r6, lr, r8, r6
 801b9e6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b9ea:	9600      	str	r6, [sp, #0]
 801b9ec:	2e00      	cmp	r6, #0
 801b9ee:	f000 80be 	beq.w	801bb6e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801b9f2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801b9f6:	fb0b fc0c 	mul.w	ip, fp, ip
 801b9fa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b9fe:	fb0b f505 	mul.w	r5, fp, r5
 801ba02:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ba06:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ba0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ba0e:	44dc      	add	ip, fp
 801ba10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba14:	9501      	str	r5, [sp, #4]
 801ba16:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ba1a:	9503      	str	r5, [sp, #12]
 801ba1c:	9d01      	ldr	r5, [sp, #4]
 801ba1e:	9e02      	ldr	r6, [sp, #8]
 801ba20:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801ba24:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ba28:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801ba2c:	fb0a fc0c 	mul.w	ip, sl, ip
 801ba30:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801ba34:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801ba38:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ba3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ba40:	4465      	add	r5, ip
 801ba42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ba46:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ba4a:	fb09 fc0c 	mul.w	ip, r9, ip
 801ba4e:	fb09 f904 	mul.w	r9, r9, r4
 801ba52:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ba56:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ba5a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801ba5e:	fb08 f404 	mul.w	r4, r8, r4
 801ba62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ba66:	fb08 f802 	mul.w	r8, r8, r2
 801ba6a:	0a2d      	lsrs	r5, r5, #8
 801ba6c:	0a22      	lsrs	r2, r4, #8
 801ba6e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ba72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ba76:	437d      	muls	r5, r7
 801ba78:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ba7c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801ba80:	4414      	add	r4, r2
 801ba82:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801ba86:	fb0a fa01 	mul.w	sl, sl, r1
 801ba8a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ba8e:	9a03      	ldr	r2, [sp, #12]
 801ba90:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801ba94:	fb02 5503 	mla	r5, r2, r3, r5
 801ba98:	0a24      	lsrs	r4, r4, #8
 801ba9a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801ba9e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801baa2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801baa6:	fb04 540e 	mla	r4, r4, lr, r5
 801baaa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801baae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bab2:	4461      	add	r1, ip
 801bab4:	0a09      	lsrs	r1, r1, #8
 801bab6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801baba:	fb01 4100 	mla	r1, r1, r0, r4
 801babe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bac2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bac6:	fb07 f70a 	mul.w	r7, r7, sl
 801baca:	0a09      	lsrs	r1, r1, #8
 801bacc:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801bad0:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801bad4:	fb03 7101 	mla	r1, r3, r1, r7
 801bad8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801badc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bae0:	fb0e 1e08 	mla	lr, lr, r8, r1
 801bae4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bae8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801baec:	fb00 e101 	mla	r1, r0, r1, lr
 801baf0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801baf4:	9a00      	ldr	r2, [sp, #0]
 801baf6:	b287      	uxth	r7, r0
 801baf8:	437a      	muls	r2, r7
 801bafa:	1c53      	adds	r3, r2, #1
 801bafc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bb00:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801bb04:	0a09      	lsrs	r1, r1, #8
 801bb06:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801bb0a:	4321      	orrs	r1, r4
 801bb0c:	0c0a      	lsrs	r2, r1, #16
 801bb0e:	8836      	ldrh	r6, [r6, #0]
 801bb10:	fb12 f207 	smulbb	r2, r2, r7
 801bb14:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801bb18:	b2c8      	uxtb	r0, r1
 801bb1a:	1235      	asrs	r5, r6, #8
 801bb1c:	fb14 f407 	smulbb	r4, r4, r7
 801bb20:	fb10 f007 	smulbb	r0, r0, r7
 801bb24:	b2db      	uxtb	r3, r3
 801bb26:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801bb2a:	fb05 2503 	mla	r5, r5, r3, r2
 801bb2e:	10f2      	asrs	r2, r6, #3
 801bb30:	00f6      	lsls	r6, r6, #3
 801bb32:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801bb36:	b2f6      	uxtb	r6, r6
 801bb38:	fb02 4203 	mla	r2, r2, r3, r4
 801bb3c:	fb06 0303 	mla	r3, r6, r3, r0
 801bb40:	b2ad      	uxth	r5, r5
 801bb42:	b299      	uxth	r1, r3
 801bb44:	b294      	uxth	r4, r2
 801bb46:	1c6b      	adds	r3, r5, #1
 801bb48:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801bb4c:	1c62      	adds	r2, r4, #1
 801bb4e:	1c4b      	adds	r3, r1, #1
 801bb50:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bb54:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801bb58:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801bb5c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bb60:	0952      	lsrs	r2, r2, #5
 801bb62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb66:	432b      	orrs	r3, r5
 801bb68:	4313      	orrs	r3, r2
 801bb6a:	9a02      	ldr	r2, [sp, #8]
 801bb6c:	8013      	strh	r3, [r2, #0]
 801bb6e:	b005      	add	sp, #20
 801bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb74:	2500      	movs	r5, #0
 801bb76:	e6e9      	b.n	801b94c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801bb78:	2100      	movs	r1, #0
 801bb7a:	460d      	mov	r5, r1
 801bb7c:	e6f3      	b.n	801b966 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801bb7e:	2100      	movs	r1, #0
 801bb80:	e6f1      	b.n	801b966 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801bb82:	4631      	mov	r1, r6
 801bb84:	e6ef      	b.n	801b966 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801bb86:	2400      	movs	r4, #0
 801bb88:	e700      	b.n	801b98c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	4614      	mov	r4, r2
 801bb8e:	e70b      	b.n	801b9a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801bb90:	4602      	mov	r2, r0
 801bb92:	4604      	mov	r4, r0
 801bb94:	e708      	b.n	801b9a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801bb96:	2200      	movs	r2, #0
 801bb98:	e706      	b.n	801b9a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801bb9a:	4632      	mov	r2, r6
 801bb9c:	e704      	b.n	801b9a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801bb9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bba2:	b09f      	sub	sp, #124	; 0x7c
 801bba4:	921b      	str	r2, [sp, #108]	; 0x6c
 801bba6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801bba8:	901d      	str	r0, [sp, #116]	; 0x74
 801bbaa:	9309      	str	r3, [sp, #36]	; 0x24
 801bbac:	6850      	ldr	r0, [r2, #4]
 801bbae:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801bbb2:	9119      	str	r1, [sp, #100]	; 0x64
 801bbb4:	931c      	str	r3, [sp, #112]	; 0x70
 801bbb6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801bbba:	fb00 1303 	mla	r3, r0, r3, r1
 801bbbe:	6812      	ldr	r2, [r2, #0]
 801bbc0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801bbc2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bbc6:	930c      	str	r3, [sp, #48]	; 0x30
 801bbc8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	9312      	str	r3, [sp, #72]	; 0x48
 801bbce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bbd0:	685e      	ldr	r6, [r3, #4]
 801bbd2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801bbd6:	3604      	adds	r6, #4
 801bbd8:	930d      	str	r3, [sp, #52]	; 0x34
 801bbda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	dc03      	bgt.n	801bbe8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bbe0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	f340 8387 	ble.w	801c2f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801bbe8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bbea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bbee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bbf2:	1e48      	subs	r0, r1, #1
 801bbf4:	1e57      	subs	r7, r2, #1
 801bbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	f340 8194 	ble.w	801bf26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801bbfe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801bc00:	142b      	asrs	r3, r5, #16
 801bc02:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801bc06:	d406      	bmi.n	801bc16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bc08:	4584      	cmp	ip, r0
 801bc0a:	da04      	bge.n	801bc16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	db02      	blt.n	801bc16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bc10:	42bb      	cmp	r3, r7
 801bc12:	f2c0 8189 	blt.w	801bf28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bc16:	f11c 0c01 	adds.w	ip, ip, #1
 801bc1a:	f100 8177 	bmi.w	801bf0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801bc1e:	4561      	cmp	r1, ip
 801bc20:	f2c0 8174 	blt.w	801bf0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801bc24:	3301      	adds	r3, #1
 801bc26:	f100 8171 	bmi.w	801bf0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	f2c0 816e 	blt.w	801bf0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bc34:	931a      	str	r3, [sp, #104]	; 0x68
 801bc36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	f340 8193 	ble.w	801bf64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bc3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bc40:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801bc44:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bc48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bc4a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bc4e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801bc52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bc54:	141b      	asrs	r3, r3, #16
 801bc56:	f100 81d6 	bmi.w	801c006 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801bc5a:	f100 38ff 	add.w	r8, r0, #4294967295
 801bc5e:	4543      	cmp	r3, r8
 801bc60:	f280 81d1 	bge.w	801c006 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801bc64:	f1bc 0f00 	cmp.w	ip, #0
 801bc68:	f2c0 81cd 	blt.w	801c006 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801bc6c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bc70:	45c4      	cmp	ip, r8
 801bc72:	f280 81c8 	bge.w	801c006 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801bc76:	b200      	sxth	r0, r0
 801bc78:	fb0c 3300 	mla	r3, ip, r0, r3
 801bc7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bc7e:	eb04 0803 	add.w	r8, r4, r3
 801bc82:	5ce3      	ldrb	r3, [r4, r3]
 801bc84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bc88:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801bc8c:	2a00      	cmp	r2, #0
 801bc8e:	f000 81af 	beq.w	801bff0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801bc92:	f898 c001 	ldrb.w	ip, [r8, #1]
 801bc96:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801bc9a:	940e      	str	r4, [sp, #56]	; 0x38
 801bc9c:	0e24      	lsrs	r4, r4, #24
 801bc9e:	9415      	str	r4, [sp, #84]	; 0x54
 801bca0:	b179      	cbz	r1, 801bcc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801bca2:	eb08 0c00 	add.w	ip, r8, r0
 801bca6:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bcaa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801bcae:	900a      	str	r0, [sp, #40]	; 0x28
 801bcb0:	0e00      	lsrs	r0, r0, #24
 801bcb2:	9013      	str	r0, [sp, #76]	; 0x4c
 801bcb4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801bcb8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801bcbc:	900f      	str	r0, [sp, #60]	; 0x3c
 801bcbe:	0e00      	lsrs	r0, r0, #24
 801bcc0:	9016      	str	r0, [sp, #88]	; 0x58
 801bcc2:	b292      	uxth	r2, r2
 801bcc4:	b289      	uxth	r1, r1
 801bcc6:	fb02 f901 	mul.w	r9, r2, r1
 801bcca:	0112      	lsls	r2, r2, #4
 801bccc:	eba2 0809 	sub.w	r8, r2, r9
 801bcd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bcd2:	fa1f f888 	uxth.w	r8, r8
 801bcd6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bcda:	fb08 f000 	mul.w	r0, r8, r0
 801bcde:	b289      	uxth	r1, r1
 801bce0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801bce4:	1a52      	subs	r2, r2, r1
 801bce6:	b292      	uxth	r2, r2
 801bce8:	fb02 000e 	mla	r0, r2, lr, r0
 801bcec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bcee:	fb01 0004 	mla	r0, r1, r4, r0
 801bcf2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bcf4:	fb09 0004 	mla	r0, r9, r4, r0
 801bcf8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bcfc:	2800      	cmp	r0, #0
 801bcfe:	f000 80fa 	beq.w	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801bd02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801bd06:	d01b      	beq.n	801bd40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801bd08:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801bd0c:	fb0e fa0a 	mul.w	sl, lr, sl
 801bd10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bd14:	fb0e fe03 	mul.w	lr, lr, r3
 801bd18:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bd1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bd20:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bd24:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bd28:	4453      	add	r3, sl
 801bd2a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bd2e:	0a1b      	lsrs	r3, r3, #8
 801bd30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bd38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd3c:	ea43 030c 	orr.w	r3, r3, ip
 801bd40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bd42:	2cff      	cmp	r4, #255	; 0xff
 801bd44:	d021      	beq.n	801bd8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801bd46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bd48:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bd4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bd4e:	fb04 fb0b 	mul.w	fp, r4, fp
 801bd52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bd54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bd58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bd5c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bd5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bd62:	fb04 fa0a 	mul.w	sl, r4, sl
 801bd66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bd6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bd6e:	44de      	add	lr, fp
 801bd70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bd74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bd78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bd7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bd80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bd84:	ea4e 040a 	orr.w	r4, lr, sl
 801bd88:	940e      	str	r4, [sp, #56]	; 0x38
 801bd8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bd8c:	2cff      	cmp	r4, #255	; 0xff
 801bd8e:	d021      	beq.n	801bdd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bd90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bd92:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bd96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bd98:	fb04 fb0b 	mul.w	fp, r4, fp
 801bd9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bd9e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bda2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bda6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bda8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdac:	fb04 fa0a 	mul.w	sl, r4, sl
 801bdb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bdb4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bdb8:	44de      	add	lr, fp
 801bdba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bdbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bdc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bdc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bdce:	ea4e 040a 	orr.w	r4, lr, sl
 801bdd2:	940a      	str	r4, [sp, #40]	; 0x28
 801bdd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bdd6:	2cff      	cmp	r4, #255	; 0xff
 801bdd8:	d021      	beq.n	801be1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801bdda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bddc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bde0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bde2:	fb04 fb0b 	mul.w	fp, r4, fp
 801bde6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bde8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bdec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bdf0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bdf2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdf6:	fb04 fa0a 	mul.w	sl, r4, sl
 801bdfa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bdfe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801be02:	44de      	add	lr, fp
 801be04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801be08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801be10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801be18:	ea4e 040a 	orr.w	r4, lr, sl
 801be1c:	940f      	str	r4, [sp, #60]	; 0x3c
 801be1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801be20:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801be24:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801be28:	fb08 fc0c 	mul.w	ip, r8, ip
 801be2c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801be30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801be32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801be36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be3a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801be3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801be40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801be46:	fb09 cc0e 	mla	ip, r9, lr, ip
 801be4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801be4e:	fb08 f80e 	mul.w	r8, r8, lr
 801be52:	fb02 8303 	mla	r3, r2, r3, r8
 801be56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801be60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801be62:	fb01 330a 	mla	r3, r1, sl, r3
 801be66:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801be6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801be6c:	fb09 3901 	mla	r9, r9, r1, r3
 801be70:	4342      	muls	r2, r0
 801be72:	1c50      	adds	r0, r2, #1
 801be74:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801be78:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801be7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801be80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801be84:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801be88:	ea4c 0c09 	orr.w	ip, ip, r9
 801be8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801be8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801be92:	883b      	ldrh	r3, [r7, #0]
 801be94:	fb12 f204 	smulbb	r2, r2, r4
 801be98:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801be9c:	fa5f fc8c 	uxtb.w	ip, ip
 801bea0:	1219      	asrs	r1, r3, #8
 801bea2:	fb1c fc04 	smulbb	ip, ip, r4
 801bea6:	b2c0      	uxtb	r0, r0
 801bea8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801beac:	fb01 2100 	mla	r1, r1, r0, r2
 801beb0:	10da      	asrs	r2, r3, #3
 801beb2:	00db      	lsls	r3, r3, #3
 801beb4:	fb1e fe04 	smulbb	lr, lr, r4
 801beb8:	b2db      	uxtb	r3, r3
 801beba:	fb03 c300 	mla	r3, r3, r0, ip
 801bebe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801bec2:	b289      	uxth	r1, r1
 801bec4:	fb02 e200 	mla	r2, r2, r0, lr
 801bec8:	fa1f fc83 	uxth.w	ip, r3
 801becc:	1c4b      	adds	r3, r1, #1
 801bece:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801bed2:	f10c 0301 	add.w	r3, ip, #1
 801bed6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801beda:	b292      	uxth	r2, r2
 801bedc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801bee0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bee4:	430b      	orrs	r3, r1
 801bee6:	1c51      	adds	r1, r2, #1
 801bee8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801beec:	0952      	lsrs	r2, r2, #5
 801beee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bef2:	4313      	orrs	r3, r2
 801bef4:	803b      	strh	r3, [r7, #0]
 801bef6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bef8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801befa:	3702      	adds	r7, #2
 801befc:	441a      	add	r2, r3
 801befe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bf00:	9229      	str	r2, [sp, #164]	; 0xa4
 801bf02:	441d      	add	r5, r3
 801bf04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801bf06:	3b01      	subs	r3, #1
 801bf08:	931a      	str	r3, [sp, #104]	; 0x68
 801bf0a:	e694      	b.n	801bc36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bf0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bf0e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801bf10:	441c      	add	r4, r3
 801bf12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bf14:	9429      	str	r4, [sp, #164]	; 0xa4
 801bf16:	441d      	add	r5, r3
 801bf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf1a:	3b01      	subs	r3, #1
 801bf1c:	9309      	str	r3, [sp, #36]	; 0x24
 801bf1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf20:	3302      	adds	r3, #2
 801bf22:	930c      	str	r3, [sp, #48]	; 0x30
 801bf24:	e667      	b.n	801bbf6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bf26:	d024      	beq.n	801bf72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf2a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801bf2c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801bf2e:	3b01      	subs	r3, #1
 801bf30:	fb00 4003 	mla	r0, r0, r3, r4
 801bf34:	1400      	asrs	r0, r0, #16
 801bf36:	f53f ae7b 	bmi.w	801bc30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf3a:	3901      	subs	r1, #1
 801bf3c:	4288      	cmp	r0, r1
 801bf3e:	f6bf ae77 	bge.w	801bc30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf42:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801bf44:	fb01 5303 	mla	r3, r1, r3, r5
 801bf48:	141b      	asrs	r3, r3, #16
 801bf4a:	f53f ae71 	bmi.w	801bc30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf4e:	3a01      	subs	r2, #1
 801bf50:	4293      	cmp	r3, r2
 801bf52:	f6bf ae6d 	bge.w	801bc30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf56:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801bf5a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801bf5e:	f1bb 0f00 	cmp.w	fp, #0
 801bf62:	dc70      	bgt.n	801c046 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801bf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bf6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf6c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801bf70:	930c      	str	r3, [sp, #48]	; 0x30
 801bf72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	f340 81be 	ble.w	801c2f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801bf7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf8e:	eef0 6a62 	vmov.f32	s13, s5
 801bf92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfa2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfa6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801bfaa:	eef0 6a43 	vmov.f32	s13, s6
 801bfae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfb2:	ee12 2a90 	vmov	r2, s5
 801bfb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bfbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfc0:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfc4:	ee13 2a10 	vmov	r2, s6
 801bfc8:	932b      	str	r3, [sp, #172]	; 0xac
 801bfca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bfcc:	ee16 5a90 	vmov	r5, s13
 801bfd0:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfd4:	932c      	str	r3, [sp, #176]	; 0xb0
 801bfd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bfd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801bfda:	3b01      	subs	r3, #1
 801bfdc:	9319      	str	r3, [sp, #100]	; 0x64
 801bfde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bfe0:	bf08      	it	eq
 801bfe2:	4613      	moveq	r3, r2
 801bfe4:	eeb0 3a67 	vmov.f32	s6, s15
 801bfe8:	9309      	str	r3, [sp, #36]	; 0x24
 801bfea:	eef0 2a47 	vmov.f32	s5, s14
 801bfee:	e5f4      	b.n	801bbda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bff0:	2900      	cmp	r1, #0
 801bff2:	f43f ae66 	beq.w	801bcc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801bff6:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bffa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801bffe:	900a      	str	r0, [sp, #40]	; 0x28
 801c000:	0e00      	lsrs	r0, r0, #24
 801c002:	9013      	str	r0, [sp, #76]	; 0x4c
 801c004:	e65d      	b.n	801bcc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c006:	f113 0801 	adds.w	r8, r3, #1
 801c00a:	f53f af74 	bmi.w	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c00e:	4540      	cmp	r0, r8
 801c010:	f6ff af71 	blt.w	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c014:	f11c 0801 	adds.w	r8, ip, #1
 801c018:	f53f af6d 	bmi.w	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c01c:	45c6      	cmp	lr, r8
 801c01e:	f6ff af6a 	blt.w	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c022:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c024:	9302      	str	r3, [sp, #8]
 801c026:	b200      	sxth	r0, r0
 801c028:	fa0f f38e 	sxth.w	r3, lr
 801c02c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c030:	e9cd c203 	strd	ip, r2, [sp, #12]
 801c034:	9301      	str	r3, [sp, #4]
 801c036:	9000      	str	r0, [sp, #0]
 801c038:	4633      	mov	r3, r6
 801c03a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c03c:	4639      	mov	r1, r7
 801c03e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801c040:	f7ff fc63 	bl	801b90a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801c044:	e757      	b.n	801bef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c046:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c048:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c04a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c04e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c050:	1427      	asrs	r7, r4, #16
 801c052:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c056:	142b      	asrs	r3, r5, #16
 801c058:	fb01 7303 	mla	r3, r1, r3, r7
 801c05c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c05e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c062:	18e7      	adds	r7, r4, r3
 801c064:	5ce3      	ldrb	r3, [r4, r3]
 801c066:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c06a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c06e:	2a00      	cmp	r2, #0
 801c070:	f000 8137 	beq.w	801c2e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801c074:	f897 e001 	ldrb.w	lr, [r7, #1]
 801c078:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801c07c:	9410      	str	r4, [sp, #64]	; 0x40
 801c07e:	0e24      	lsrs	r4, r4, #24
 801c080:	9417      	str	r4, [sp, #92]	; 0x5c
 801c082:	b170      	cbz	r0, 801c0a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801c084:	eb07 0e01 	add.w	lr, r7, r1
 801c088:	5c79      	ldrb	r1, [r7, r1]
 801c08a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c08e:	910b      	str	r1, [sp, #44]	; 0x2c
 801c090:	0e09      	lsrs	r1, r1, #24
 801c092:	9114      	str	r1, [sp, #80]	; 0x50
 801c094:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801c098:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c09c:	9111      	str	r1, [sp, #68]	; 0x44
 801c09e:	0e09      	lsrs	r1, r1, #24
 801c0a0:	9118      	str	r1, [sp, #96]	; 0x60
 801c0a2:	b292      	uxth	r2, r2
 801c0a4:	b280      	uxth	r0, r0
 801c0a6:	fb02 f800 	mul.w	r8, r2, r0
 801c0aa:	0112      	lsls	r2, r2, #4
 801c0ac:	eba2 0e08 	sub.w	lr, r2, r8
 801c0b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801c0b2:	fa1f fe8e 	uxth.w	lr, lr
 801c0b6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801c0ba:	fb0e f101 	mul.w	r1, lr, r1
 801c0be:	b280      	uxth	r0, r0
 801c0c0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c0c4:	1a12      	subs	r2, r2, r0
 801c0c6:	b292      	uxth	r2, r2
 801c0c8:	fb02 110c 	mla	r1, r2, ip, r1
 801c0cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0ce:	fb00 1104 	mla	r1, r0, r4, r1
 801c0d2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801c0d4:	fb08 1104 	mla	r1, r8, r4, r1
 801c0d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c0dc:	2900      	cmp	r1, #0
 801c0de:	f000 80f5 	beq.w	801c2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801c0e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c0e6:	d019      	beq.n	801c11c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801c0e8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c0ec:	fb0c fa0a 	mul.w	sl, ip, sl
 801c0f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c0f4:	fb0c fc03 	mul.w	ip, ip, r3
 801c0f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c0fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c100:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c104:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c108:	4453      	add	r3, sl
 801c10a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c10e:	0a1b      	lsrs	r3, r3, #8
 801c110:	0a3f      	lsrs	r7, r7, #8
 801c112:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c116:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c11a:	433b      	orrs	r3, r7
 801c11c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c11e:	2cff      	cmp	r4, #255	; 0xff
 801c120:	d020      	beq.n	801c164 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801c122:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c124:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c128:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c12a:	4367      	muls	r7, r4
 801c12c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c12e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c132:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c136:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c138:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c13c:	fb04 fa0a 	mul.w	sl, r4, sl
 801c140:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c144:	44bc      	add	ip, r7
 801c146:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c14a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c14e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c152:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c15a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c15e:	ea4c 040a 	orr.w	r4, ip, sl
 801c162:	9410      	str	r4, [sp, #64]	; 0x40
 801c164:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c166:	2cff      	cmp	r4, #255	; 0xff
 801c168:	d020      	beq.n	801c1ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801c16a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c16c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c170:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c172:	4367      	muls	r7, r4
 801c174:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c176:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c17a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c17e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c180:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c184:	fb04 fa0a 	mul.w	sl, r4, sl
 801c188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c18c:	44bc      	add	ip, r7
 801c18e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c192:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c196:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c19a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c19e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c1a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c1a6:	ea4c 040a 	orr.w	r4, ip, sl
 801c1aa:	940b      	str	r4, [sp, #44]	; 0x2c
 801c1ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801c1ae:	2cff      	cmp	r4, #255	; 0xff
 801c1b0:	d020      	beq.n	801c1f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801c1b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c1b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c1b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801c1ba:	4367      	muls	r7, r4
 801c1bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c1be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c1c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c1c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801c1c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c1cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801c1d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c1d4:	44bc      	add	ip, r7
 801c1d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c1da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c1de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c1e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c1ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c1ee:	ea4c 040a 	orr.w	r4, ip, sl
 801c1f2:	9411      	str	r4, [sp, #68]	; 0x44
 801c1f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c1f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c1fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c1fe:	fb0e f707 	mul.w	r7, lr, r7
 801c202:	fb02 770c 	mla	r7, r2, ip, r7
 801c206:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c20c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c210:	fb00 770c 	mla	r7, r0, ip, r7
 801c214:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c216:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c21a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c21c:	fb08 770c 	mla	r7, r8, ip, r7
 801c220:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c224:	fb0e fe0c 	mul.w	lr, lr, ip
 801c228:	fb02 e303 	mla	r3, r2, r3, lr
 801c22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c22e:	0a3f      	lsrs	r7, r7, #8
 801c230:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c234:	fb00 330a 	mla	r3, r0, sl, r3
 801c238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c23a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c23e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c242:	fb08 3c0c 	mla	ip, r8, ip, r3
 801c246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c24c:	434b      	muls	r3, r1
 801c24e:	1c59      	adds	r1, r3, #1
 801c250:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c254:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c258:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c25c:	ea47 070c 	orr.w	r7, r7, ip
 801c260:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c262:	0c3b      	lsrs	r3, r7, #16
 801c264:	f8b9 0000 	ldrh.w	r0, [r9]
 801c268:	fb13 f304 	smulbb	r3, r3, r4
 801c26c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801c270:	b2ff      	uxtb	r7, r7
 801c272:	1202      	asrs	r2, r0, #8
 801c274:	fb17 f704 	smulbb	r7, r7, r4
 801c278:	b2c9      	uxtb	r1, r1
 801c27a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c27e:	fb02 3201 	mla	r2, r2, r1, r3
 801c282:	10c3      	asrs	r3, r0, #3
 801c284:	00c0      	lsls	r0, r0, #3
 801c286:	fb1c fc04 	smulbb	ip, ip, r4
 801c28a:	b2c0      	uxtb	r0, r0
 801c28c:	fb00 7001 	mla	r0, r0, r1, r7
 801c290:	b292      	uxth	r2, r2
 801c292:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801c296:	fb03 c301 	mla	r3, r3, r1, ip
 801c29a:	f102 0c01 	add.w	ip, r2, #1
 801c29e:	b280      	uxth	r0, r0
 801c2a0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c2a4:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801c2a8:	1c42      	adds	r2, r0, #1
 801c2aa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c2ae:	b29b      	uxth	r3, r3
 801c2b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c2b4:	ea42 020c 	orr.w	r2, r2, ip
 801c2b8:	f103 0c01 	add.w	ip, r3, #1
 801c2bc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801c2c0:	095b      	lsrs	r3, r3, #5
 801c2c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c2c6:	431a      	orrs	r2, r3
 801c2c8:	f8a9 2000 	strh.w	r2, [r9]
 801c2cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c2ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c2d0:	f109 0902 	add.w	r9, r9, #2
 801c2d4:	441a      	add	r2, r3
 801c2d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c2d8:	9229      	str	r2, [sp, #164]	; 0xa4
 801c2da:	441d      	add	r5, r3
 801c2dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2e0:	e63d      	b.n	801bf5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c2e2:	2800      	cmp	r0, #0
 801c2e4:	f43f aedd 	beq.w	801c0a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801c2e8:	5c79      	ldrb	r1, [r7, r1]
 801c2ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c2ee:	910b      	str	r1, [sp, #44]	; 0x2c
 801c2f0:	0e09      	lsrs	r1, r1, #24
 801c2f2:	9114      	str	r1, [sp, #80]	; 0x50
 801c2f4:	e6d5      	b.n	801c0a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801c2f6:	b01f      	add	sp, #124	; 0x7c
 801c2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c300:	b089      	sub	sp, #36	; 0x24
 801c302:	9101      	str	r1, [sp, #4]
 801c304:	9801      	ldr	r0, [sp, #4]
 801c306:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801c30a:	8800      	ldrh	r0, [r0, #0]
 801c30c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801c310:	1206      	asrs	r6, r0, #8
 801c312:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c316:	9602      	str	r6, [sp, #8]
 801c318:	10c6      	asrs	r6, r0, #3
 801c31a:	00c0      	lsls	r0, r0, #3
 801c31c:	b2c0      	uxtb	r0, r0
 801c31e:	9004      	str	r0, [sp, #16]
 801c320:	fb07 100c 	mla	r0, r7, ip, r1
 801c324:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c328:	2f00      	cmp	r7, #0
 801c32a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801c32e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801c332:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801c336:	9603      	str	r6, [sp, #12]
 801c338:	eb02 0e00 	add.w	lr, r2, r0
 801c33c:	f2c0 810a 	blt.w	801c554 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801c340:	45b8      	cmp	r8, r7
 801c342:	f340 8107 	ble.w	801c554 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801c346:	2900      	cmp	r1, #0
 801c348:	f2c0 8102 	blt.w	801c550 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801c34c:	458c      	cmp	ip, r1
 801c34e:	f340 80ff 	ble.w	801c550 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801c352:	5c12      	ldrb	r2, [r2, r0]
 801c354:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c358:	1c4a      	adds	r2, r1, #1
 801c35a:	f100 80fe 	bmi.w	801c55a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801c35e:	4594      	cmp	ip, r2
 801c360:	f340 80fb 	ble.w	801c55a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801c364:	2d00      	cmp	r5, #0
 801c366:	f000 80fa 	beq.w	801c55e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801c36a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c36e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c372:	3701      	adds	r7, #1
 801c374:	f100 80f7 	bmi.w	801c566 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801c378:	45b8      	cmp	r8, r7
 801c37a:	f340 80f4 	ble.w	801c566 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801c37e:	2c00      	cmp	r4, #0
 801c380:	f000 80f4 	beq.w	801c56c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801c384:	2900      	cmp	r1, #0
 801c386:	eb0e 020c 	add.w	r2, lr, ip
 801c38a:	f2c0 80ea 	blt.w	801c562 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801c38e:	458c      	cmp	ip, r1
 801c390:	f340 80e7 	ble.w	801c562 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801c394:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801c398:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801c39c:	3101      	adds	r1, #1
 801c39e:	f100 80e8 	bmi.w	801c572 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801c3a2:	458c      	cmp	ip, r1
 801c3a4:	f340 80e5 	ble.w	801c572 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801c3a8:	2d00      	cmp	r5, #0
 801c3aa:	f000 80e4 	beq.w	801c576 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801c3ae:	7852      	ldrb	r2, [r2, #1]
 801c3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c3b4:	0e0b      	lsrs	r3, r1, #24
 801c3b6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c3ba:	9300      	str	r3, [sp, #0]
 801c3bc:	b2a4      	uxth	r4, r4
 801c3be:	b2ab      	uxth	r3, r5
 801c3c0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801c3c4:	fb03 f904 	mul.w	r9, r3, r4
 801c3c8:	fb0a f505 	mul.w	r5, sl, r5
 801c3cc:	011b      	lsls	r3, r3, #4
 801c3ce:	eba3 0e09 	sub.w	lr, r3, r9
 801c3d2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801c3d6:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801c3da:	0a28      	lsrs	r0, r5, #8
 801c3dc:	fb0a f303 	mul.w	r3, sl, r3
 801c3e0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c3e4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801c3e8:	4405      	add	r5, r0
 801c3ea:	0a2d      	lsrs	r5, r5, #8
 801c3ec:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801c3f0:	9005      	str	r0, [sp, #20]
 801c3f2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801c3f6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c3fa:	0a1b      	lsrs	r3, r3, #8
 801c3fc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c400:	9306      	str	r3, [sp, #24]
 801c402:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801c406:	fb0b f303 	mul.w	r3, fp, r3
 801c40a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c40e:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801c412:	fb0b f606 	mul.w	r6, fp, r6
 801c416:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801c41a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c41e:	fb08 f707 	mul.w	r7, r8, r7
 801c422:	0a1d      	lsrs	r5, r3, #8
 801c424:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c428:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801c42c:	441d      	add	r5, r3
 801c42e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801c432:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c436:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c43a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801c43e:	fb08 fc0c 	mul.w	ip, r8, ip
 801c442:	0a1b      	lsrs	r3, r3, #8
 801c444:	9307      	str	r3, [sp, #28]
 801c446:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801c44a:	0e0b      	lsrs	r3, r1, #24
 801c44c:	0a2d      	lsrs	r5, r5, #8
 801c44e:	fa1f fe8e 	uxth.w	lr, lr
 801c452:	435f      	muls	r7, r3
 801c454:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c458:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801c45c:	fb05 f50e 	mul.w	r5, r5, lr
 801c460:	b2a4      	uxth	r4, r4
 801c462:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801c466:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c46a:	4359      	muls	r1, r3
 801c46c:	1b12      	subs	r2, r2, r4
 801c46e:	9b05      	ldr	r3, [sp, #20]
 801c470:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c474:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c478:	b292      	uxth	r2, r2
 801c47a:	4460      	add	r0, ip
 801c47c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c480:	fb03 5502 	mla	r5, r3, r2, r5
 801c484:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c488:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c48c:	44bc      	add	ip, r7
 801c48e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c492:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c496:	0a36      	lsrs	r6, r6, #8
 801c498:	fb0c 5509 	mla	r5, ip, r9, r5
 801c49c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c4a0:	fb0e f606 	mul.w	r6, lr, r6
 801c4a4:	9b06      	ldr	r3, [sp, #24]
 801c4a6:	0a00      	lsrs	r0, r0, #8
 801c4a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c4ac:	fb00 5504 	mla	r5, r0, r4, r5
 801c4b0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801c4b4:	fb02 6000 	mla	r0, r2, r0, r6
 801c4b8:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801c4bc:	fb0e fe0b 	mul.w	lr, lr, fp
 801c4c0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801c4c4:	0a09      	lsrs	r1, r1, #8
 801c4c6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c4ca:	fb09 0001 	mla	r0, r9, r1, r0
 801c4ce:	fb02 e20a 	mla	r2, r2, sl, lr
 801c4d2:	9b07      	ldr	r3, [sp, #28]
 801c4d4:	0a2d      	lsrs	r5, r5, #8
 801c4d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c4da:	fb04 0003 	mla	r0, r4, r3, r0
 801c4de:	fb04 2408 	mla	r4, r4, r8, r2
 801c4e2:	9b00      	ldr	r3, [sp, #0]
 801c4e4:	9a04      	ldr	r2, [sp, #16]
 801c4e6:	fb09 4903 	mla	r9, r9, r3, r4
 801c4ea:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801c4ee:	9b02      	ldr	r3, [sp, #8]
 801c4f0:	fa5f f989 	uxtb.w	r9, r9
 801c4f4:	fb03 f109 	mul.w	r1, r3, r9
 801c4f8:	9b03      	ldr	r3, [sp, #12]
 801c4fa:	0a00      	lsrs	r0, r0, #8
 801c4fc:	fb03 f309 	mul.w	r3, r3, r9
 801c500:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c504:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c508:	4305      	orrs	r5, r0
 801c50a:	fb02 f909 	mul.w	r9, r2, r9
 801c50e:	1c58      	adds	r0, r3, #1
 801c510:	1c4a      	adds	r2, r1, #1
 801c512:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c516:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c51a:	0a2b      	lsrs	r3, r5, #8
 801c51c:	0c2a      	lsrs	r2, r5, #16
 801c51e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c522:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801c526:	00db      	lsls	r3, r3, #3
 801c528:	0212      	lsls	r2, r2, #8
 801c52a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801c52e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c532:	4313      	orrs	r3, r2
 801c534:	f109 0201 	add.w	r2, r9, #1
 801c538:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c53c:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801c540:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c544:	431d      	orrs	r5, r3
 801c546:	9b01      	ldr	r3, [sp, #4]
 801c548:	801d      	strh	r5, [r3, #0]
 801c54a:	b009      	add	sp, #36	; 0x24
 801c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c550:	2000      	movs	r0, #0
 801c552:	e701      	b.n	801c358 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801c554:	2600      	movs	r6, #0
 801c556:	4630      	mov	r0, r6
 801c558:	e70b      	b.n	801c372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801c55a:	2600      	movs	r6, #0
 801c55c:	e709      	b.n	801c372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801c55e:	462e      	mov	r6, r5
 801c560:	e707      	b.n	801c372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801c562:	2700      	movs	r7, #0
 801c564:	e71a      	b.n	801c39c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801c566:	2100      	movs	r1, #0
 801c568:	460f      	mov	r7, r1
 801c56a:	e723      	b.n	801c3b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801c56c:	4621      	mov	r1, r4
 801c56e:	4627      	mov	r7, r4
 801c570:	e720      	b.n	801c3b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801c572:	2100      	movs	r1, #0
 801c574:	e71e      	b.n	801c3b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801c576:	4629      	mov	r1, r5
 801c578:	e71c      	b.n	801c3b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

0801c57c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c580:	b09b      	sub	sp, #108	; 0x6c
 801c582:	9218      	str	r2, [sp, #96]	; 0x60
 801c584:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c586:	9019      	str	r0, [sp, #100]	; 0x64
 801c588:	6850      	ldr	r0, [r2, #4]
 801c58a:	9116      	str	r1, [sp, #88]	; 0x58
 801c58c:	9307      	str	r3, [sp, #28]
 801c58e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801c592:	fb00 1303 	mla	r3, r0, r3, r1
 801c596:	6812      	ldr	r2, [r2, #0]
 801c598:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801c59a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c59e:	930a      	str	r3, [sp, #40]	; 0x28
 801c5a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c5a8:	685e      	ldr	r6, [r3, #4]
 801c5aa:	3604      	adds	r6, #4
 801c5ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	dc03      	bgt.n	801c5ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c5b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	f340 8373 	ble.w	801cca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801c5ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c5bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c5c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c5c4:	1e48      	subs	r0, r1, #1
 801c5c6:	1e57      	subs	r7, r2, #1
 801c5c8:	9b07      	ldr	r3, [sp, #28]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	f340 818f 	ble.w	801c8ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801c5d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801c5d2:	142b      	asrs	r3, r5, #16
 801c5d4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c5d8:	d406      	bmi.n	801c5e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c5da:	4584      	cmp	ip, r0
 801c5dc:	da04      	bge.n	801c5e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	db02      	blt.n	801c5e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c5e2:	42bb      	cmp	r3, r7
 801c5e4:	f2c0 8184 	blt.w	801c8f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801c5e8:	f11c 0c01 	adds.w	ip, ip, #1
 801c5ec:	f100 8172 	bmi.w	801c8d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c5f0:	4561      	cmp	r1, ip
 801c5f2:	f2c0 816f 	blt.w	801c8d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	f100 816c 	bmi.w	801c8d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c5fc:	429a      	cmp	r2, r3
 801c5fe:	f2c0 8169 	blt.w	801c8d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c602:	9b07      	ldr	r3, [sp, #28]
 801c604:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c606:	9317      	str	r3, [sp, #92]	; 0x5c
 801c608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f340 818e 	ble.w	801c92c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801c610:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c612:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c616:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c61a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c61c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c620:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801c624:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c626:	141b      	asrs	r3, r3, #16
 801c628:	f100 81d1 	bmi.w	801c9ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c62c:	f101 38ff 	add.w	r8, r1, #4294967295
 801c630:	4543      	cmp	r3, r8
 801c632:	f280 81cc 	bge.w	801c9ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c636:	f1bc 0f00 	cmp.w	ip, #0
 801c63a:	f2c0 81c8 	blt.w	801c9ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c63e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c642:	45c4      	cmp	ip, r8
 801c644:	f280 81c3 	bge.w	801c9ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c648:	b209      	sxth	r1, r1
 801c64a:	fb0c 3301 	mla	r3, ip, r1, r3
 801c64e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c650:	eb04 0803 	add.w	r8, r4, r3
 801c654:	5ce3      	ldrb	r3, [r4, r3]
 801c656:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c65a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c65e:	2a00      	cmp	r2, #0
 801c660:	f000 81aa 	beq.w	801c9b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801c664:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c668:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c66c:	940b      	str	r4, [sp, #44]	; 0x2c
 801c66e:	0e24      	lsrs	r4, r4, #24
 801c670:	9412      	str	r4, [sp, #72]	; 0x48
 801c672:	b178      	cbz	r0, 801c694 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c674:	eb08 0c01 	add.w	ip, r8, r1
 801c678:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c67c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c680:	9108      	str	r1, [sp, #32]
 801c682:	0e09      	lsrs	r1, r1, #24
 801c684:	9110      	str	r1, [sp, #64]	; 0x40
 801c686:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801c68a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c68e:	910c      	str	r1, [sp, #48]	; 0x30
 801c690:	0e09      	lsrs	r1, r1, #24
 801c692:	9113      	str	r1, [sp, #76]	; 0x4c
 801c694:	b292      	uxth	r2, r2
 801c696:	b280      	uxth	r0, r0
 801c698:	fb02 f900 	mul.w	r9, r2, r0
 801c69c:	0112      	lsls	r2, r2, #4
 801c69e:	eba2 0809 	sub.w	r8, r2, r9
 801c6a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c6a4:	fa1f f888 	uxth.w	r8, r8
 801c6a8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c6ac:	fb08 f101 	mul.w	r1, r8, r1
 801c6b0:	b280      	uxth	r0, r0
 801c6b2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c6b6:	1a12      	subs	r2, r2, r0
 801c6b8:	b292      	uxth	r2, r2
 801c6ba:	fb02 110e 	mla	r1, r2, lr, r1
 801c6be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c6c0:	fb00 1104 	mla	r1, r0, r4, r1
 801c6c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c6c6:	fb09 1104 	mla	r1, r9, r4, r1
 801c6ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c6ce:	2900      	cmp	r1, #0
 801c6d0:	f000 80f5 	beq.w	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c6d4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c6d8:	d01b      	beq.n	801c712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801c6da:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c6de:	fb0e fa0a 	mul.w	sl, lr, sl
 801c6e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c6e6:	fb0e fe03 	mul.w	lr, lr, r3
 801c6ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c6ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c6f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c6f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c6fa:	4453      	add	r3, sl
 801c6fc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c700:	0a1b      	lsrs	r3, r3, #8
 801c702:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c706:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c70a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c70e:	ea43 030c 	orr.w	r3, r3, ip
 801c712:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c714:	2cff      	cmp	r4, #255	; 0xff
 801c716:	d021      	beq.n	801c75c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c718:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c71a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c71e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c720:	fb04 fb0b 	mul.w	fp, r4, fp
 801c724:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c726:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c72a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c72e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c730:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c734:	fb04 fa0a 	mul.w	sl, r4, sl
 801c738:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c73c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c740:	44de      	add	lr, fp
 801c742:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c746:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c74a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c74e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c752:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c756:	ea4e 040a 	orr.w	r4, lr, sl
 801c75a:	940b      	str	r4, [sp, #44]	; 0x2c
 801c75c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c75e:	2cff      	cmp	r4, #255	; 0xff
 801c760:	d021      	beq.n	801c7a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c762:	9c08      	ldr	r4, [sp, #32]
 801c764:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c768:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c76a:	fb04 fb0b 	mul.w	fp, r4, fp
 801c76e:	9c08      	ldr	r4, [sp, #32]
 801c770:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c774:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c778:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c77a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c77e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c782:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c786:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c78a:	44de      	add	lr, fp
 801c78c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c790:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c798:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c79c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c7a0:	ea4e 040a 	orr.w	r4, lr, sl
 801c7a4:	9408      	str	r4, [sp, #32]
 801c7a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7a8:	2cff      	cmp	r4, #255	; 0xff
 801c7aa:	d021      	beq.n	801c7f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801c7ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c7ae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c7b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7b4:	fb04 fb0b 	mul.w	fp, r4, fp
 801c7b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c7ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c7be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c7c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7c8:	fb04 fa0a 	mul.w	sl, r4, sl
 801c7cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c7d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c7d4:	44de      	add	lr, fp
 801c7d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c7da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c7de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c7e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c7ea:	ea4e 040a 	orr.w	r4, lr, sl
 801c7ee:	940c      	str	r4, [sp, #48]	; 0x30
 801c7f0:	43c9      	mvns	r1, r1
 801c7f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c7f4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c7f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c7fc:	fb08 fc0c 	mul.w	ip, r8, ip
 801c800:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c804:	9c08      	ldr	r4, [sp, #32]
 801c806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c80a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c80e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c812:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c814:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c818:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c81a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c81e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c822:	fb08 f80e 	mul.w	r8, r8, lr
 801c826:	fb02 8303 	mla	r3, r2, r3, r8
 801c82a:	9a08      	ldr	r2, [sp, #32]
 801c82c:	f8b7 8000 	ldrh.w	r8, [r7]
 801c830:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c834:	fb00 330a 	mla	r3, r0, sl, r3
 801c838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c83a:	fa5f fe81 	uxtb.w	lr, r1
 801c83e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801c842:	fb09 3900 	mla	r9, r9, r0, r3
 801c846:	ea4f 2228 	mov.w	r2, r8, asr #8
 801c84a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c84e:	fb02 f20e 	mul.w	r2, r2, lr
 801c852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c856:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c85a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801c85e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c862:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c866:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c86a:	ea4c 0c09 	orr.w	ip, ip, r9
 801c86e:	fb00 f00e 	mul.w	r0, r0, lr
 801c872:	1c53      	adds	r3, r2, #1
 801c874:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c878:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801c87c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c880:	4a62      	ldr	r2, [pc, #392]	; (801ca0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801c882:	b2db      	uxtb	r3, r3
 801c884:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c888:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801c88c:	b2c9      	uxtb	r1, r1
 801c88e:	1c43      	adds	r3, r0, #1
 801c890:	fb01 f10e 	mul.w	r1, r1, lr
 801c894:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c898:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c89c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c8a0:	00db      	lsls	r3, r3, #3
 801c8a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c8a6:	4313      	orrs	r3, r2
 801c8a8:	1c4a      	adds	r2, r1, #1
 801c8aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c8ae:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c8b2:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801c8b6:	ea4c 0c03 	orr.w	ip, ip, r3
 801c8ba:	f8a7 c000 	strh.w	ip, [r7]
 801c8be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c8c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c8c2:	3702      	adds	r7, #2
 801c8c4:	441a      	add	r2, r3
 801c8c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c8c8:	9225      	str	r2, [sp, #148]	; 0x94
 801c8ca:	441d      	add	r5, r3
 801c8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	9317      	str	r3, [sp, #92]	; 0x5c
 801c8d2:	e699      	b.n	801c608 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c8d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c8d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801c8d8:	441c      	add	r4, r3
 801c8da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c8dc:	9425      	str	r4, [sp, #148]	; 0x94
 801c8de:	441d      	add	r5, r3
 801c8e0:	9b07      	ldr	r3, [sp, #28]
 801c8e2:	3b01      	subs	r3, #1
 801c8e4:	9307      	str	r3, [sp, #28]
 801c8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8e8:	3302      	adds	r3, #2
 801c8ea:	930a      	str	r3, [sp, #40]	; 0x28
 801c8ec:	e66c      	b.n	801c5c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c8ee:	d024      	beq.n	801c93a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801c8f0:	9b07      	ldr	r3, [sp, #28]
 801c8f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c8f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801c8f6:	3b01      	subs	r3, #1
 801c8f8:	fb00 4003 	mla	r0, r0, r3, r4
 801c8fc:	1400      	asrs	r0, r0, #16
 801c8fe:	f53f ae80 	bmi.w	801c602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c902:	3901      	subs	r1, #1
 801c904:	4288      	cmp	r0, r1
 801c906:	f6bf ae7c 	bge.w	801c602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c90a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c90c:	fb01 5303 	mla	r3, r1, r3, r5
 801c910:	141b      	asrs	r3, r3, #16
 801c912:	f53f ae76 	bmi.w	801c602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c916:	3a01      	subs	r2, #1
 801c918:	4293      	cmp	r3, r2
 801c91a:	f6bf ae72 	bge.w	801c602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c91e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c922:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801c926:	f1bb 0f00 	cmp.w	fp, #0
 801c92a:	dc71      	bgt.n	801ca10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801c92c:	9b07      	ldr	r3, [sp, #28]
 801c92e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c934:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c938:	930a      	str	r3, [sp, #40]	; 0x28
 801c93a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	f340 81af 	ble.w	801cca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801c942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c946:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c94a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c94e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c952:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c956:	eef0 6a62 	vmov.f32	s13, s5
 801c95a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c95e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c962:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c96a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c96e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801c972:	eef0 6a43 	vmov.f32	s13, s6
 801c976:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c97a:	ee12 2a90 	vmov	r2, s5
 801c97e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c982:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c984:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c988:	fb92 f3f3 	sdiv	r3, r2, r3
 801c98c:	ee13 2a10 	vmov	r2, s6
 801c990:	9327      	str	r3, [sp, #156]	; 0x9c
 801c992:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c994:	ee16 5a90 	vmov	r5, s13
 801c998:	fb92 f3f3 	sdiv	r3, r2, r3
 801c99c:	9328      	str	r3, [sp, #160]	; 0xa0
 801c99e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c9a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c9a2:	3b01      	subs	r3, #1
 801c9a4:	9316      	str	r3, [sp, #88]	; 0x58
 801c9a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c9a8:	bf08      	it	eq
 801c9aa:	4613      	moveq	r3, r2
 801c9ac:	eeb0 3a67 	vmov.f32	s6, s15
 801c9b0:	9307      	str	r3, [sp, #28]
 801c9b2:	eef0 2a47 	vmov.f32	s5, s14
 801c9b6:	e5f9      	b.n	801c5ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c9b8:	2800      	cmp	r0, #0
 801c9ba:	f43f ae6b 	beq.w	801c694 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c9be:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c9c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c9c6:	9108      	str	r1, [sp, #32]
 801c9c8:	0e09      	lsrs	r1, r1, #24
 801c9ca:	9110      	str	r1, [sp, #64]	; 0x40
 801c9cc:	e662      	b.n	801c694 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801c9ce:	f113 0801 	adds.w	r8, r3, #1
 801c9d2:	f53f af74 	bmi.w	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c9d6:	4541      	cmp	r1, r8
 801c9d8:	f6ff af71 	blt.w	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c9dc:	f11c 0801 	adds.w	r8, ip, #1
 801c9e0:	f53f af6d 	bmi.w	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c9e4:	45c6      	cmp	lr, r8
 801c9e6:	f6ff af6a 	blt.w	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c9ea:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801c9ee:	b209      	sxth	r1, r1
 801c9f0:	fa0f f38e 	sxth.w	r3, lr
 801c9f4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801c9f8:	9301      	str	r3, [sp, #4]
 801c9fa:	9100      	str	r1, [sp, #0]
 801c9fc:	4633      	mov	r3, r6
 801c9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca00:	4639      	mov	r1, r7
 801ca02:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ca04:	f7ff fc7a 	bl	801c2fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ca08:	e759      	b.n	801c8be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ca0a:	bf00      	nop
 801ca0c:	fffff800 	.word	0xfffff800
 801ca10:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ca12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ca14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ca18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ca1a:	1427      	asrs	r7, r4, #16
 801ca1c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ca20:	142b      	asrs	r3, r5, #16
 801ca22:	fb01 7303 	mla	r3, r1, r3, r7
 801ca26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ca28:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ca2c:	18e7      	adds	r7, r4, r3
 801ca2e:	5ce3      	ldrb	r3, [r4, r3]
 801ca30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ca34:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ca38:	2a00      	cmp	r2, #0
 801ca3a:	f000 8127 	beq.w	801cc8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ca3e:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ca42:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ca46:	940d      	str	r4, [sp, #52]	; 0x34
 801ca48:	0e24      	lsrs	r4, r4, #24
 801ca4a:	9414      	str	r4, [sp, #80]	; 0x50
 801ca4c:	b170      	cbz	r0, 801ca6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ca4e:	eb07 0e01 	add.w	lr, r7, r1
 801ca52:	5c79      	ldrb	r1, [r7, r1]
 801ca54:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ca58:	9109      	str	r1, [sp, #36]	; 0x24
 801ca5a:	0e09      	lsrs	r1, r1, #24
 801ca5c:	9111      	str	r1, [sp, #68]	; 0x44
 801ca5e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ca62:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ca66:	910e      	str	r1, [sp, #56]	; 0x38
 801ca68:	0e09      	lsrs	r1, r1, #24
 801ca6a:	9115      	str	r1, [sp, #84]	; 0x54
 801ca6c:	b292      	uxth	r2, r2
 801ca6e:	b280      	uxth	r0, r0
 801ca70:	fb02 f800 	mul.w	r8, r2, r0
 801ca74:	0112      	lsls	r2, r2, #4
 801ca76:	eba2 0e08 	sub.w	lr, r2, r8
 801ca7a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ca7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca80:	fa1f fe8e 	uxth.w	lr, lr
 801ca84:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ca88:	fb0e f202 	mul.w	r2, lr, r2
 801ca8c:	b280      	uxth	r0, r0
 801ca8e:	1a09      	subs	r1, r1, r0
 801ca90:	b289      	uxth	r1, r1
 801ca92:	fb01 220c 	mla	r2, r1, ip, r2
 801ca96:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ca98:	fb00 2204 	mla	r2, r0, r4, r2
 801ca9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ca9e:	fb08 2204 	mla	r2, r8, r4, r2
 801caa2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801caa6:	2a00      	cmp	r2, #0
 801caa8:	f000 80e5 	beq.w	801cc76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801caac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cab0:	d019      	beq.n	801cae6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801cab2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cab6:	fb0c fa0a 	mul.w	sl, ip, sl
 801caba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cabe:	fb0c fc03 	mul.w	ip, ip, r3
 801cac2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801caca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cace:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cad2:	4453      	add	r3, sl
 801cad4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cad8:	0a1b      	lsrs	r3, r3, #8
 801cada:	0a3f      	lsrs	r7, r7, #8
 801cadc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cae0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cae4:	433b      	orrs	r3, r7
 801cae6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cae8:	2cff      	cmp	r4, #255	; 0xff
 801caea:	d020      	beq.n	801cb2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801caec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801caee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801caf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801caf4:	4367      	muls	r7, r4
 801caf6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801caf8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cafc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cb06:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb0e:	44bc      	add	ip, r7
 801cb10:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cb14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cb18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb28:	ea4c 040a 	orr.w	r4, ip, sl
 801cb2c:	940d      	str	r4, [sp, #52]	; 0x34
 801cb2e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cb30:	2cff      	cmp	r4, #255	; 0xff
 801cb32:	d020      	beq.n	801cb76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801cb34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cb36:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cb3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cb3c:	4367      	muls	r7, r4
 801cb3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cb40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cb44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cb4a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cb4e:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb56:	44bc      	add	ip, r7
 801cb58:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cb5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cb60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb70:	ea4c 040a 	orr.w	r4, ip, sl
 801cb74:	9409      	str	r4, [sp, #36]	; 0x24
 801cb76:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cb78:	2cff      	cmp	r4, #255	; 0xff
 801cb7a:	d020      	beq.n	801cbbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801cb7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cb7e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cb82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cb84:	4367      	muls	r7, r4
 801cb86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cb88:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cb8c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb90:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cb92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cb96:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb9e:	44bc      	add	ip, r7
 801cba0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cba4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cba8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cbb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cbb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cbb8:	ea4c 040a 	orr.w	r4, ip, sl
 801cbbc:	940e      	str	r4, [sp, #56]	; 0x38
 801cbbe:	43d2      	mvns	r2, r2
 801cbc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cbc2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801cbc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cbca:	fb0e f707 	mul.w	r7, lr, r7
 801cbce:	fb01 770c 	mla	r7, r1, ip, r7
 801cbd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cbd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cbd8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cbdc:	fb00 770c 	mla	r7, r0, ip, r7
 801cbe0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cbe2:	b2d2      	uxtb	r2, r2
 801cbe4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cbe8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cbea:	fb08 770c 	mla	r7, r8, ip, r7
 801cbee:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cbf2:	fb0e fe0c 	mul.w	lr, lr, ip
 801cbf6:	fb01 e303 	mla	r3, r1, r3, lr
 801cbfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cbfc:	0a3f      	lsrs	r7, r7, #8
 801cbfe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801cc02:	fb00 330a 	mla	r3, r0, sl, r3
 801cc06:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cc08:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cc0c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801cc10:	fb08 3c0c 	mla	ip, r8, ip, r3
 801cc14:	f8b9 3000 	ldrh.w	r3, [r9]
 801cc18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc1c:	1218      	asrs	r0, r3, #8
 801cc1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cc22:	4350      	muls	r0, r2
 801cc24:	10d9      	asrs	r1, r3, #3
 801cc26:	00db      	lsls	r3, r3, #3
 801cc28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cc2c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	ea47 070c 	orr.w	r7, r7, ip
 801cc36:	4351      	muls	r1, r2
 801cc38:	4353      	muls	r3, r2
 801cc3a:	1c42      	adds	r2, r0, #1
 801cc3c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cc40:	0c3a      	lsrs	r2, r7, #16
 801cc42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cc46:	4a18      	ldr	r2, [pc, #96]	; (801cca8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801cc48:	b2c0      	uxtb	r0, r0
 801cc4a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801cc4e:	1c4a      	adds	r2, r1, #1
 801cc50:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cc54:	0a3a      	lsrs	r2, r7, #8
 801cc56:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cc5a:	00c9      	lsls	r1, r1, #3
 801cc5c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cc60:	4301      	orrs	r1, r0
 801cc62:	1c58      	adds	r0, r3, #1
 801cc64:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cc68:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801cc6c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801cc70:	4308      	orrs	r0, r1
 801cc72:	f8a9 0000 	strh.w	r0, [r9]
 801cc76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cc78:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cc7a:	f109 0902 	add.w	r9, r9, #2
 801cc7e:	441a      	add	r2, r3
 801cc80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc82:	9225      	str	r2, [sp, #148]	; 0x94
 801cc84:	441d      	add	r5, r3
 801cc86:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc8a:	e64c      	b.n	801c926 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	f43f aeed 	beq.w	801ca6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801cc92:	5c79      	ldrb	r1, [r7, r1]
 801cc94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cc98:	9109      	str	r1, [sp, #36]	; 0x24
 801cc9a:	0e09      	lsrs	r1, r1, #24
 801cc9c:	9111      	str	r1, [sp, #68]	; 0x44
 801cc9e:	e6e5      	b.n	801ca6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801cca0:	b01b      	add	sp, #108	; 0x6c
 801cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca6:	bf00      	nop
 801cca8:	fffff800 	.word	0xfffff800

0801ccac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb0:	b085      	sub	sp, #20
 801ccb2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801ccb6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801ccba:	fb00 7406 	mla	r4, r0, r6, r7
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801ccc4:	9103      	str	r1, [sp, #12]
 801ccc6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801ccca:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801ccce:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ccd2:	9501      	str	r5, [sp, #4]
 801ccd4:	eb03 0904 	add.w	r9, r3, r4
 801ccd8:	f2c0 8150 	blt.w	801cf7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801ccdc:	4583      	cmp	fp, r0
 801ccde:	f340 814d 	ble.w	801cf7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801cce2:	2f00      	cmp	r7, #0
 801cce4:	f2c0 8146 	blt.w	801cf74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801cce8:	42be      	cmp	r6, r7
 801ccea:	f340 8143 	ble.w	801cf74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ccee:	f813 c004 	ldrb.w	ip, [r3, r4]
 801ccf2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801ccf6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801ccfa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ccfe:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801cd02:	4355      	muls	r5, r2
 801cd04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd08:	fb0c f203 	mul.w	r2, ip, r3
 801cd0c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801cd10:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801cd14:	441d      	add	r5, r3
 801cd16:	f102 0320 	add.w	r3, r2, #32
 801cd1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cd1e:	0a1b      	lsrs	r3, r3, #8
 801cd20:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801cd24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd28:	431c      	orrs	r4, r3
 801cd2a:	1c7b      	adds	r3, r7, #1
 801cd2c:	f100 812b 	bmi.w	801cf86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801cd30:	429e      	cmp	r6, r3
 801cd32:	f340 8128 	ble.w	801cf86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801cd36:	2900      	cmp	r1, #0
 801cd38:	f000 8128 	beq.w	801cf8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801cd3c:	9a01      	ldr	r2, [sp, #4]
 801cd3e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801cd42:	8855      	ldrh	r5, [r2, #2]
 801cd44:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801cd48:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801cd4c:	fb08 f802 	mul.w	r8, r8, r2
 801cd50:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801cd54:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cd58:	435d      	muls	r5, r3
 801cd5a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801cd5e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801cd62:	44d0      	add	r8, sl
 801cd64:	f105 0a20 	add.w	sl, r5, #32
 801cd68:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801cd6c:	0a2d      	lsrs	r5, r5, #8
 801cd6e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801cd72:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cd76:	432a      	orrs	r2, r5
 801cd78:	3001      	adds	r0, #1
 801cd7a:	f100 810d 	bmi.w	801cf98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801cd7e:	4583      	cmp	fp, r0
 801cd80:	f340 810a 	ble.w	801cf98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801cd84:	f1be 0f00 	cmp.w	lr, #0
 801cd88:	f000 810b 	beq.w	801cfa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801cd8c:	2f00      	cmp	r7, #0
 801cd8e:	f2c0 8100 	blt.w	801cf92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801cd92:	42be      	cmp	r6, r7
 801cd94:	f340 80fd 	ble.w	801cf92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801cd98:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801cd9c:	9801      	ldr	r0, [sp, #4]
 801cd9e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801cda2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801cda6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cdaa:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801cdae:	fb0a fa00 	mul.w	sl, sl, r0
 801cdb2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801cdb6:	fb05 f808 	mul.w	r8, r5, r8
 801cdba:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801cdbe:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801cdc2:	4482      	add	sl, r0
 801cdc4:	f108 0020 	add.w	r0, r8, #32
 801cdc8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801cdcc:	0a00      	lsrs	r0, r0, #8
 801cdce:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801cdd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cdd6:	ea4b 0b00 	orr.w	fp, fp, r0
 801cdda:	3701      	adds	r7, #1
 801cddc:	f100 80e6 	bmi.w	801cfac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801cde0:	42be      	cmp	r6, r7
 801cde2:	f340 80e3 	ble.w	801cfac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801cde6:	2900      	cmp	r1, #0
 801cde8:	f000 80e3 	beq.w	801cfb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801cdec:	9801      	ldr	r0, [sp, #4]
 801cdee:	3601      	adds	r6, #1
 801cdf0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801cdf4:	f819 7006 	ldrb.w	r7, [r9, r6]
 801cdf8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801cdfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ce00:	fb07 f800 	mul.w	r8, r7, r0
 801ce04:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801ce08:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801ce0c:	fb09 f906 	mul.w	r9, r9, r6
 801ce10:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801ce14:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801ce18:	44d1      	add	r9, sl
 801ce1a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801ce1e:	f108 0020 	add.w	r0, r8, #32
 801ce22:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ce26:	0a00      	lsrs	r0, r0, #8
 801ce28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ce2c:	4330      	orrs	r0, r6
 801ce2e:	b28e      	uxth	r6, r1
 801ce30:	fa1f f98e 	uxth.w	r9, lr
 801ce34:	fb06 f809 	mul.w	r8, r6, r9
 801ce38:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801ce3c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ce40:	0136      	lsls	r6, r6, #4
 801ce42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ce46:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ce4a:	9601      	str	r6, [sp, #4]
 801ce4c:	ea4a 0404 	orr.w	r4, sl, r4
 801ce50:	fa1f f689 	uxth.w	r6, r9
 801ce54:	9602      	str	r6, [sp, #8]
 801ce56:	4626      	mov	r6, r4
 801ce58:	fb11 f90e 	smulbb	r9, r1, lr
 801ce5c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ce60:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801ce64:	f1ce 0410 	rsb	r4, lr, #16
 801ce68:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ce6c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ce70:	1a64      	subs	r4, r4, r1
 801ce72:	ea4a 0202 	orr.w	r2, sl, r2
 801ce76:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801ce7a:	434a      	muls	r2, r1
 801ce7c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801ce80:	fb04 2406 	mla	r4, r4, r6, r2
 801ce84:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ce88:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ce8c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ce90:	ea4a 0000 	orr.w	r0, sl, r0
 801ce94:	fb09 4200 	mla	r2, r9, r0, r4
 801ce98:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801ce9c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801cea0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801cea4:	ea44 0b0b 	orr.w	fp, r4, fp
 801cea8:	9c01      	ldr	r4, [sp, #4]
 801ceaa:	9e02      	ldr	r6, [sp, #8]
 801ceac:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801ceb0:	1ba4      	subs	r4, r4, r6
 801ceb2:	9e01      	ldr	r6, [sp, #4]
 801ceb4:	b2a4      	uxth	r4, r4
 801ceb6:	eba6 0608 	sub.w	r6, r6, r8
 801ceba:	b2b6      	uxth	r6, r6
 801cebc:	4373      	muls	r3, r6
 801cebe:	fb0c 3304 	mla	r3, ip, r4, r3
 801cec2:	9c02      	ldr	r4, [sp, #8]
 801cec4:	9903      	ldr	r1, [sp, #12]
 801cec6:	fb04 3505 	mla	r5, r4, r5, r3
 801ceca:	fb08 5707 	mla	r7, r8, r7, r5
 801cece:	8808      	ldrh	r0, [r1, #0]
 801ced0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801ced4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ced8:	b289      	uxth	r1, r1
 801ceda:	434f      	muls	r7, r1
 801cedc:	1c7b      	adds	r3, r7, #1
 801cede:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cee2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801cee6:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801ceea:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801ceee:	1203      	asrs	r3, r0, #8
 801cef0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801cef4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801cef8:	b2ff      	uxtb	r7, r7
 801cefa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cefe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801cf02:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801cf06:	fb13 f307 	smulbb	r3, r3, r7
 801cf0a:	ea42 0e0e 	orr.w	lr, r2, lr
 801cf0e:	fa1f f28e 	uxth.w	r2, lr
 801cf12:	1215      	asrs	r5, r2, #8
 801cf14:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cf18:	fb05 3501 	mla	r5, r5, r1, r3
 801cf1c:	10c3      	asrs	r3, r0, #3
 801cf1e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801cf22:	fb13 f307 	smulbb	r3, r3, r7
 801cf26:	10d4      	asrs	r4, r2, #3
 801cf28:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cf2c:	fb04 3401 	mla	r4, r4, r1, r3
 801cf30:	00c3      	lsls	r3, r0, #3
 801cf32:	b2db      	uxtb	r3, r3
 801cf34:	fb13 f307 	smulbb	r3, r3, r7
 801cf38:	00d2      	lsls	r2, r2, #3
 801cf3a:	b2d2      	uxtb	r2, r2
 801cf3c:	fb02 3101 	mla	r1, r2, r1, r3
 801cf40:	b2ad      	uxth	r5, r5
 801cf42:	b289      	uxth	r1, r1
 801cf44:	b2a4      	uxth	r4, r4
 801cf46:	1c6b      	adds	r3, r5, #1
 801cf48:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cf4c:	1c62      	adds	r2, r4, #1
 801cf4e:	1c4b      	adds	r3, r1, #1
 801cf50:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801cf54:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801cf58:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cf5c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801cf60:	0964      	lsrs	r4, r4, #5
 801cf62:	432b      	orrs	r3, r5
 801cf64:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cf68:	9a03      	ldr	r2, [sp, #12]
 801cf6a:	4323      	orrs	r3, r4
 801cf6c:	8013      	strh	r3, [r2, #0]
 801cf6e:	b005      	add	sp, #20
 801cf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf74:	f04f 0c00 	mov.w	ip, #0
 801cf78:	4664      	mov	r4, ip
 801cf7a:	e6d6      	b.n	801cd2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	469c      	mov	ip, r3
 801cf80:	461a      	mov	r2, r3
 801cf82:	461c      	mov	r4, r3
 801cf84:	e6f8      	b.n	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801cf86:	2300      	movs	r3, #0
 801cf88:	461a      	mov	r2, r3
 801cf8a:	e6f5      	b.n	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	460a      	mov	r2, r1
 801cf90:	e6f2      	b.n	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801cf92:	2500      	movs	r5, #0
 801cf94:	46ab      	mov	fp, r5
 801cf96:	e720      	b.n	801cdda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801cf98:	2700      	movs	r7, #0
 801cf9a:	463d      	mov	r5, r7
 801cf9c:	4638      	mov	r0, r7
 801cf9e:	46bb      	mov	fp, r7
 801cfa0:	e745      	b.n	801ce2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801cfa2:	4677      	mov	r7, lr
 801cfa4:	4675      	mov	r5, lr
 801cfa6:	4670      	mov	r0, lr
 801cfa8:	46f3      	mov	fp, lr
 801cfaa:	e740      	b.n	801ce2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801cfac:	2700      	movs	r7, #0
 801cfae:	4638      	mov	r0, r7
 801cfb0:	e73d      	b.n	801ce2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801cfb2:	460f      	mov	r7, r1
 801cfb4:	4608      	mov	r0, r1
 801cfb6:	e73a      	b.n	801ce2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801cfb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfbc:	b097      	sub	sp, #92	; 0x5c
 801cfbe:	9214      	str	r2, [sp, #80]	; 0x50
 801cfc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cfc2:	9015      	str	r0, [sp, #84]	; 0x54
 801cfc4:	9308      	str	r3, [sp, #32]
 801cfc6:	6850      	ldr	r0, [r2, #4]
 801cfc8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801cfcc:	9111      	str	r1, [sp, #68]	; 0x44
 801cfce:	9312      	str	r3, [sp, #72]	; 0x48
 801cfd0:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801cfd4:	fb00 1303 	mla	r3, r0, r3, r1
 801cfd8:	6812      	ldr	r2, [r2, #0]
 801cfda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cfde:	9309      	str	r3, [sp, #36]	; 0x24
 801cfe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	930b      	str	r3, [sp, #44]	; 0x2c
 801cfe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cfe8:	685b      	ldr	r3, [r3, #4]
 801cfea:	930c      	str	r3, [sp, #48]	; 0x30
 801cfec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801cff0:	930a      	str	r3, [sp, #40]	; 0x28
 801cff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	dc03      	bgt.n	801d000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	f340 83cb 	ble.w	801d796 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801d000:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d002:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d006:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d00a:	1e48      	subs	r0, r1, #1
 801d00c:	1e55      	subs	r5, r2, #1
 801d00e:	9b08      	ldr	r3, [sp, #32]
 801d010:	2b00      	cmp	r3, #0
 801d012:	f340 81a3 	ble.w	801d35c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d016:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801d018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d01a:	1436      	asrs	r6, r6, #16
 801d01c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d020:	d406      	bmi.n	801d030 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d022:	4286      	cmp	r6, r0
 801d024:	da04      	bge.n	801d030 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d026:	2b00      	cmp	r3, #0
 801d028:	db02      	blt.n	801d030 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d02a:	42ab      	cmp	r3, r5
 801d02c:	f2c0 8197 	blt.w	801d35e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801d030:	3601      	adds	r6, #1
 801d032:	f100 8184 	bmi.w	801d33e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801d036:	42b1      	cmp	r1, r6
 801d038:	f2c0 8181 	blt.w	801d33e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801d03c:	3301      	adds	r3, #1
 801d03e:	f100 817e 	bmi.w	801d33e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801d042:	429a      	cmp	r2, r3
 801d044:	f2c0 817b 	blt.w	801d33e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801d048:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801d04c:	9b08      	ldr	r3, [sp, #32]
 801d04e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d050:	9313      	str	r3, [sp, #76]	; 0x4c
 801d052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d054:	2b00      	cmp	r3, #0
 801d056:	f340 81a4 	ble.w	801d3a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d05a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d05c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801d05e:	1418      	asrs	r0, r3, #16
 801d060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d062:	142d      	asrs	r5, r5, #16
 801d064:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801d068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d06a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801d06e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d070:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d074:	f100 81f8 	bmi.w	801d468 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801d078:	f102 3eff 	add.w	lr, r2, #4294967295
 801d07c:	4575      	cmp	r5, lr
 801d07e:	f280 81f3 	bge.w	801d468 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801d082:	2800      	cmp	r0, #0
 801d084:	f2c0 81f0 	blt.w	801d468 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801d088:	f103 3eff 	add.w	lr, r3, #4294967295
 801d08c:	4570      	cmp	r0, lr
 801d08e:	f280 81eb 	bge.w	801d468 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801d092:	b212      	sxth	r2, r2
 801d094:	fb00 5002 	mla	r0, r0, r2, r5
 801d098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d09a:	fa1f fe81 	uxth.w	lr, r1
 801d09e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801d0a2:	eb03 0a00 	add.w	sl, r3, r0
 801d0a6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801d0aa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801d0ae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d0b2:	b29b      	uxth	r3, r3
 801d0b4:	f1bc 0f00 	cmp.w	ip, #0
 801d0b8:	f000 81b9 	beq.w	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801d0bc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801d0c0:	eb0a 0b02 	add.w	fp, sl, r2
 801d0c4:	fa1f fa8c 	uxth.w	sl, ip
 801d0c8:	fb0a fe0e 	mul.w	lr, sl, lr
 801d0cc:	eba5 050e 	sub.w	r5, r5, lr
 801d0d0:	b2ad      	uxth	r5, r5
 801d0d2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801d0d6:	fb08 f505 	mul.w	r5, r8, r5
 801d0da:	fa1f fa8a 	uxth.w	sl, sl
 801d0de:	eba3 030a 	sub.w	r3, r3, sl
 801d0e2:	b29b      	uxth	r3, r3
 801d0e4:	940d      	str	r4, [sp, #52]	; 0x34
 801d0e6:	fb09 5303 	mla	r3, r9, r3, r5
 801d0ea:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d0ee:	940e      	str	r4, [sp, #56]	; 0x38
 801d0f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d0f2:	fb0a 3304 	mla	r3, sl, r4, r3
 801d0f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d0f8:	fb0e 3304 	mla	r3, lr, r4, r3
 801d0fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d100:	2b00      	cmp	r3, #0
 801d102:	f000 810f 	beq.w	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d106:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d108:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d10c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801d110:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801d114:	f000 8190 	beq.w	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801d118:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801d11c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801d120:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d124:	fb09 f000 	mul.w	r0, r9, r0
 801d128:	fb0a fe0e 	mul.w	lr, sl, lr
 801d12c:	f100 0b20 	add.w	fp, r0, #32
 801d130:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801d134:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801d138:	44ce      	add	lr, r9
 801d13a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801d13e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d142:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801d146:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d14a:	ea4e 0909 	orr.w	r9, lr, r9
 801d14e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d152:	8868      	ldrh	r0, [r5, #2]
 801d154:	d019      	beq.n	801d18a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d156:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801d15a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801d15e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d162:	fb08 f800 	mul.w	r8, r8, r0
 801d166:	fb0a fe0e 	mul.w	lr, sl, lr
 801d16a:	f108 0b20 	add.w	fp, r8, #32
 801d16e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801d172:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801d176:	4486      	add	lr, r0
 801d178:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801d17c:	0a00      	lsrs	r0, r0, #8
 801d17e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801d182:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d186:	ea4e 0000 	orr.w	r0, lr, r0
 801d18a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801d18e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d192:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d196:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d19a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d19e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d1a2:	ea4e 0909 	orr.w	r9, lr, r9
 801d1a6:	ea4a 0000 	orr.w	r0, sl, r0
 801d1aa:	f1bc 0f00 	cmp.w	ip, #0
 801d1ae:	f000 8145 	beq.w	801d43c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801d1b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801d1b6:	3a01      	subs	r2, #1
 801d1b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d1ba:	0052      	lsls	r2, r2, #1
 801d1bc:	3202      	adds	r2, #2
 801d1be:	2cff      	cmp	r4, #255	; 0xff
 801d1c0:	eb05 0e02 	add.w	lr, r5, r2
 801d1c4:	5aaa      	ldrh	r2, [r5, r2]
 801d1c6:	d018      	beq.n	801d1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d1c8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801d1cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d1d0:	fb04 fa02 	mul.w	sl, r4, r2
 801d1d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d1d8:	fb08 f805 	mul.w	r8, r8, r5
 801d1dc:	f10a 0520 	add.w	r5, sl, #32
 801d1e0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801d1e4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801d1e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d1ec:	4442      	add	r2, r8
 801d1ee:	0a2d      	lsrs	r5, r5, #8
 801d1f0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801d1f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d1f8:	432a      	orrs	r2, r5
 801d1fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d1fc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801d200:	2cff      	cmp	r4, #255	; 0xff
 801d202:	d01a      	beq.n	801d23a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d204:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801d208:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d20c:	fb04 fa05 	mul.w	sl, r4, r5
 801d210:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d214:	fb08 f80e 	mul.w	r8, r8, lr
 801d218:	f10a 0e20 	add.w	lr, sl, #32
 801d21c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801d220:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801d224:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d228:	4445      	add	r5, r8
 801d22a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d22e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801d232:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801d236:	ea45 050e 	orr.w	r5, r5, lr
 801d23a:	fb1c fe01 	smulbb	lr, ip, r1
 801d23e:	f1cc 0810 	rsb	r8, ip, #16
 801d242:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801d246:	eba8 0801 	sub.w	r8, r8, r1
 801d24a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801d24e:	4341      	muls	r1, r0
 801d250:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801d254:	fb09 1108 	mla	r1, r9, r8, r1
 801d258:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d25c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d260:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d264:	ea4a 0202 	orr.w	r2, sl, r2
 801d268:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801d26c:	fb0c 1102 	mla	r1, ip, r2, r1
 801d270:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801d274:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d278:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801d27c:	ea4b 0505 	orr.w	r5, fp, r5
 801d280:	fb0e 1e05 	mla	lr, lr, r5, r1
 801d284:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d288:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d28c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d290:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d294:	ea42 0e0e 	orr.w	lr, r2, lr
 801d298:	fa1f f28e 	uxth.w	r2, lr
 801d29c:	2bff      	cmp	r3, #255	; 0xff
 801d29e:	d103      	bne.n	801d2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d2a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d2a2:	29ff      	cmp	r1, #255	; 0xff
 801d2a4:	f000 80de 	beq.w	801d464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801d2a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d2aa:	8838      	ldrh	r0, [r7, #0]
 801d2ac:	434b      	muls	r3, r1
 801d2ae:	f103 0c01 	add.w	ip, r3, #1
 801d2b2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801d2b6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801d2ba:	fa5f fc83 	uxtb.w	ip, r3
 801d2be:	1203      	asrs	r3, r0, #8
 801d2c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d2c4:	fb13 f30c 	smulbb	r3, r3, ip
 801d2c8:	1215      	asrs	r5, r2, #8
 801d2ca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d2ce:	fb05 3501 	mla	r5, r5, r1, r3
 801d2d2:	10c3      	asrs	r3, r0, #3
 801d2d4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d2d8:	fb13 f30c 	smulbb	r3, r3, ip
 801d2dc:	10d1      	asrs	r1, r2, #3
 801d2de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d2e0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d2e4:	fb01 3104 	mla	r1, r1, r4, r3
 801d2e8:	00c3      	lsls	r3, r0, #3
 801d2ea:	b2db      	uxtb	r3, r3
 801d2ec:	fb13 f30c 	smulbb	r3, r3, ip
 801d2f0:	00d2      	lsls	r2, r2, #3
 801d2f2:	b2d2      	uxtb	r2, r2
 801d2f4:	fb02 3304 	mla	r3, r2, r4, r3
 801d2f8:	b2ad      	uxth	r5, r5
 801d2fa:	b29a      	uxth	r2, r3
 801d2fc:	1c6b      	adds	r3, r5, #1
 801d2fe:	b289      	uxth	r1, r1
 801d300:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d304:	1c53      	adds	r3, r2, #1
 801d306:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d30a:	1c4a      	adds	r2, r1, #1
 801d30c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d310:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d314:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d318:	0949      	lsrs	r1, r1, #5
 801d31a:	432b      	orrs	r3, r5
 801d31c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d320:	430b      	orrs	r3, r1
 801d322:	803b      	strh	r3, [r7, #0]
 801d324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d326:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d328:	3702      	adds	r7, #2
 801d32a:	4413      	add	r3, r2
 801d32c:	9321      	str	r3, [sp, #132]	; 0x84
 801d32e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d332:	441a      	add	r2, r3
 801d334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d336:	9222      	str	r2, [sp, #136]	; 0x88
 801d338:	3b01      	subs	r3, #1
 801d33a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d33c:	e689      	b.n	801d052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d340:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801d342:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801d344:	4433      	add	r3, r6
 801d346:	9321      	str	r3, [sp, #132]	; 0x84
 801d348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d34a:	441c      	add	r4, r3
 801d34c:	9b08      	ldr	r3, [sp, #32]
 801d34e:	9422      	str	r4, [sp, #136]	; 0x88
 801d350:	3b01      	subs	r3, #1
 801d352:	9308      	str	r3, [sp, #32]
 801d354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d356:	3302      	adds	r3, #2
 801d358:	9309      	str	r3, [sp, #36]	; 0x24
 801d35a:	e658      	b.n	801d00e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d35c:	d028      	beq.n	801d3b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801d35e:	9b08      	ldr	r3, [sp, #32]
 801d360:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d362:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801d364:	3b01      	subs	r3, #1
 801d366:	fb00 5003 	mla	r0, r0, r3, r5
 801d36a:	1400      	asrs	r0, r0, #16
 801d36c:	f53f ae6c 	bmi.w	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d370:	3901      	subs	r1, #1
 801d372:	4288      	cmp	r0, r1
 801d374:	f6bf ae68 	bge.w	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d378:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d37a:	9822      	ldr	r0, [sp, #136]	; 0x88
 801d37c:	fb01 0303 	mla	r3, r1, r3, r0
 801d380:	141b      	asrs	r3, r3, #16
 801d382:	f53f ae61 	bmi.w	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d386:	3a01      	subs	r2, #1
 801d388:	4293      	cmp	r3, r2
 801d38a:	f6bf ae5d 	bge.w	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d38e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801d392:	9b08      	ldr	r3, [sp, #32]
 801d394:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801d398:	9313      	str	r3, [sp, #76]	; 0x4c
 801d39a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	f300 8082 	bgt.w	801d4a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d3a2:	9b08      	ldr	r3, [sp, #32]
 801d3a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d3ae:	9309      	str	r3, [sp, #36]	; 0x24
 801d3b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	f340 81ef 	ble.w	801d796 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801d3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d3bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d3c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3cc:	eef0 6a62 	vmov.f32	s13, s5
 801d3d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3e4:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801d3e8:	eef0 6a43 	vmov.f32	s13, s6
 801d3ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3f0:	ee12 2a90 	vmov	r2, s5
 801d3f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d3fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d402:	ee13 2a10 	vmov	r2, s6
 801d406:	9323      	str	r3, [sp, #140]	; 0x8c
 801d408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d40a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801d40e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d412:	9324      	str	r3, [sp, #144]	; 0x90
 801d414:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d416:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d418:	3b01      	subs	r3, #1
 801d41a:	9311      	str	r3, [sp, #68]	; 0x44
 801d41c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d41e:	bf08      	it	eq
 801d420:	4613      	moveq	r3, r2
 801d422:	eeb0 3a67 	vmov.f32	s6, s15
 801d426:	9308      	str	r3, [sp, #32]
 801d428:	eef0 2a47 	vmov.f32	s5, s14
 801d42c:	e5e1      	b.n	801cff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d42e:	fb08 f505 	mul.w	r5, r8, r5
 801d432:	fb09 5303 	mla	r3, r9, r3, r5
 801d436:	e661      	b.n	801d0fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801d438:	4681      	mov	r9, r0
 801d43a:	e688      	b.n	801d14e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d43c:	f1c1 0210 	rsb	r2, r1, #16
 801d440:	4341      	muls	r1, r0
 801d442:	fb09 1902 	mla	r9, r9, r2, r1
 801d446:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d44a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801d44e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d452:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d456:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d45a:	ea42 0909 	orr.w	r9, r2, r9
 801d45e:	fa1f f289 	uxth.w	r2, r9
 801d462:	e71b      	b.n	801d29c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d464:	803a      	strh	r2, [r7, #0]
 801d466:	e75d      	b.n	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d468:	f115 0e01 	adds.w	lr, r5, #1
 801d46c:	f53f af5a 	bmi.w	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d470:	4572      	cmp	r2, lr
 801d472:	f6ff af57 	blt.w	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d476:	f110 0e01 	adds.w	lr, r0, #1
 801d47a:	f53f af53 	bmi.w	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d47e:	4573      	cmp	r3, lr
 801d480:	f6ff af50 	blt.w	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d484:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d486:	b21b      	sxth	r3, r3
 801d488:	b212      	sxth	r2, r2
 801d48a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801d48e:	9301      	str	r3, [sp, #4]
 801d490:	9200      	str	r2, [sp, #0]
 801d492:	e9cd c405 	strd	ip, r4, [sp, #20]
 801d496:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801d49a:	9502      	str	r5, [sp, #8]
 801d49c:	4639      	mov	r1, r7
 801d49e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d4a0:	f7ff fc04 	bl	801ccac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801d4a4:	e73e      	b.n	801d324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d4a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d4ae:	fa1f fc82 	uxth.w	ip, r2
 801d4b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801d4b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4b8:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801d4bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d4c2:	141f      	asrs	r7, r3, #16
 801d4c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d4c6:	141b      	asrs	r3, r3, #16
 801d4c8:	fb01 3707 	mla	r7, r1, r7, r3
 801d4cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4ce:	eb03 0a07 	add.w	sl, r3, r7
 801d4d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 801d4d6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801d4da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	2d00      	cmp	r5, #0
 801d4e2:	f000 813d 	beq.w	801d760 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801d4e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801d4ea:	eb0a 0b01 	add.w	fp, sl, r1
 801d4ee:	fa1f fa85 	uxth.w	sl, r5
 801d4f2:	fb0a fc0c 	mul.w	ip, sl, ip
 801d4f6:	eba0 000c 	sub.w	r0, r0, ip
 801d4fa:	b280      	uxth	r0, r0
 801d4fc:	fb08 f000 	mul.w	r0, r8, r0
 801d500:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801d504:	fa1f fa8a 	uxth.w	sl, sl
 801d508:	eba3 030a 	sub.w	r3, r3, sl
 801d50c:	b29b      	uxth	r3, r3
 801d50e:	fb09 0303 	mla	r3, r9, r3, r0
 801d512:	940f      	str	r4, [sp, #60]	; 0x3c
 801d514:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d516:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d51a:	fb0a 3300 	mla	r3, sl, r0, r3
 801d51e:	fb0c 3304 	mla	r3, ip, r4, r3
 801d522:	9410      	str	r4, [sp, #64]	; 0x40
 801d524:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d528:	2b00      	cmp	r3, #0
 801d52a:	f000 810b 	beq.w	801d744 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801d52e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d530:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d532:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d536:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801d53a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801d53e:	f000 8114 	beq.w	801d76a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 801d542:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801d546:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801d54a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d54e:	fb09 f707 	mul.w	r7, r9, r7
 801d552:	fb0a fc0c 	mul.w	ip, sl, ip
 801d556:	f107 0b20 	add.w	fp, r7, #32
 801d55a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801d55e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801d562:	44cc      	add	ip, r9
 801d564:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801d568:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d56c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801d570:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d574:	ea4c 0909 	orr.w	r9, ip, r9
 801d578:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d57c:	8847      	ldrh	r7, [r0, #2]
 801d57e:	d019      	beq.n	801d5b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 801d580:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801d584:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801d588:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d58c:	fb08 f807 	mul.w	r8, r8, r7
 801d590:	fb0a fc0c 	mul.w	ip, sl, ip
 801d594:	f108 0b20 	add.w	fp, r8, #32
 801d598:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801d59c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801d5a0:	44bc      	add	ip, r7
 801d5a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801d5a6:	0a3f      	lsrs	r7, r7, #8
 801d5a8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801d5ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d5b0:	ea4c 0707 	orr.w	r7, ip, r7
 801d5b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801d5b8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801d5bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d5c0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d5c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d5c8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801d5cc:	ea4c 0909 	orr.w	r9, ip, r9
 801d5d0:	ea4a 0707 	orr.w	r7, sl, r7
 801d5d4:	2d00      	cmp	r5, #0
 801d5d6:	f000 80ca 	beq.w	801d76e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801d5da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801d5de:	3901      	subs	r1, #1
 801d5e0:	0049      	lsls	r1, r1, #1
 801d5e2:	3102      	adds	r1, #2
 801d5e4:	eb00 0c01 	add.w	ip, r0, r1
 801d5e8:	5a41      	ldrh	r1, [r0, r1]
 801d5ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d5ec:	28ff      	cmp	r0, #255	; 0xff
 801d5ee:	d019      	beq.n	801d624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 801d5f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d5f2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801d5f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d5fa:	fb04 fa01 	mul.w	sl, r4, r1
 801d5fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d602:	fb08 f800 	mul.w	r8, r8, r0
 801d606:	f10a 0020 	add.w	r0, sl, #32
 801d60a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801d60e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801d612:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d616:	4441      	add	r1, r8
 801d618:	0a00      	lsrs	r0, r0, #8
 801d61a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801d61e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d622:	4301      	orrs	r1, r0
 801d624:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d626:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801d62a:	2cff      	cmp	r4, #255	; 0xff
 801d62c:	d01a      	beq.n	801d664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 801d62e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801d632:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d636:	fb04 fa00 	mul.w	sl, r4, r0
 801d63a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d63e:	fb08 f80c 	mul.w	r8, r8, ip
 801d642:	f10a 0c20 	add.w	ip, sl, #32
 801d646:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801d64a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801d64e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d652:	4440      	add	r0, r8
 801d654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d658:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801d65c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801d660:	ea40 000c 	orr.w	r0, r0, ip
 801d664:	fb15 fc02 	smulbb	ip, r5, r2
 801d668:	f1c5 0810 	rsb	r8, r5, #16
 801d66c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801d670:	eba8 0802 	sub.w	r8, r8, r2
 801d674:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801d678:	437a      	muls	r2, r7
 801d67a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801d67e:	fb09 2208 	mla	r2, r9, r8, r2
 801d682:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801d686:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d68a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d68e:	ea4a 0101 	orr.w	r1, sl, r1
 801d692:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801d696:	fb05 2201 	mla	r2, r5, r1, r2
 801d69a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801d69e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d6a2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d6a6:	ea4b 0000 	orr.w	r0, fp, r0
 801d6aa:	fb0c 2200 	mla	r2, ip, r0, r2
 801d6ae:	0d57      	lsrs	r7, r2, #21
 801d6b0:	0952      	lsrs	r2, r2, #5
 801d6b2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d6b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d6ba:	433a      	orrs	r2, r7
 801d6bc:	2bff      	cmp	r3, #255	; 0xff
 801d6be:	b292      	uxth	r2, r2
 801d6c0:	d102      	bne.n	801d6c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801d6c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d6c4:	29ff      	cmp	r1, #255	; 0xff
 801d6c6:	d063      	beq.n	801d790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 801d6c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d6ca:	f8be 1000 	ldrh.w	r1, [lr]
 801d6ce:	4343      	muls	r3, r0
 801d6d0:	1c58      	adds	r0, r3, #1
 801d6d2:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801d6d6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801d6da:	1208      	asrs	r0, r1, #8
 801d6dc:	b2db      	uxtb	r3, r3
 801d6de:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d6e2:	fb10 f003 	smulbb	r0, r0, r3
 801d6e6:	10cf      	asrs	r7, r1, #3
 801d6e8:	00c9      	lsls	r1, r1, #3
 801d6ea:	b2c9      	uxtb	r1, r1
 801d6ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d6ee:	1215      	asrs	r5, r2, #8
 801d6f0:	fb11 f103 	smulbb	r1, r1, r3
 801d6f4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d6f8:	fb05 0504 	mla	r5, r5, r4, r0
 801d6fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d700:	10d0      	asrs	r0, r2, #3
 801d702:	00d2      	lsls	r2, r2, #3
 801d704:	fb17 f703 	smulbb	r7, r7, r3
 801d708:	b2d2      	uxtb	r2, r2
 801d70a:	fb02 1204 	mla	r2, r2, r4, r1
 801d70e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d712:	fb00 7004 	mla	r0, r0, r4, r7
 801d716:	b2ad      	uxth	r5, r5
 801d718:	b292      	uxth	r2, r2
 801d71a:	1c6b      	adds	r3, r5, #1
 801d71c:	1c57      	adds	r7, r2, #1
 801d71e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d722:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d726:	b280      	uxth	r0, r0
 801d728:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d72c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d730:	433d      	orrs	r5, r7
 801d732:	1c47      	adds	r7, r0, #1
 801d734:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801d738:	097f      	lsrs	r7, r7, #5
 801d73a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d73e:	433d      	orrs	r5, r7
 801d740:	f8ae 5000 	strh.w	r5, [lr]
 801d744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d746:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d748:	f10e 0e02 	add.w	lr, lr, #2
 801d74c:	4413      	add	r3, r2
 801d74e:	9321      	str	r3, [sp, #132]	; 0x84
 801d750:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d754:	441a      	add	r2, r3
 801d756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d758:	9222      	str	r2, [sp, #136]	; 0x88
 801d75a:	3b01      	subs	r3, #1
 801d75c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d75e:	e61c      	b.n	801d39a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801d760:	fb08 f000 	mul.w	r0, r8, r0
 801d764:	fb09 0303 	mla	r3, r9, r3, r0
 801d768:	e6dc      	b.n	801d524 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 801d76a:	46b9      	mov	r9, r7
 801d76c:	e704      	b.n	801d578 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 801d76e:	f1c2 0110 	rsb	r1, r2, #16
 801d772:	437a      	muls	r2, r7
 801d774:	fb09 2901 	mla	r9, r9, r1, r2
 801d778:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d77c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801d780:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801d784:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d788:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d78c:	4302      	orrs	r2, r0
 801d78e:	e795      	b.n	801d6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801d790:	f8ae 2000 	strh.w	r2, [lr]
 801d794:	e7d6      	b.n	801d744 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801d796:	b017      	add	sp, #92	; 0x5c
 801d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d79c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a0:	b085      	sub	sp, #20
 801d7a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801d7a6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801d7aa:	fb00 7406 	mla	r4, r0, r6, r7
 801d7ae:	2800      	cmp	r0, #0
 801d7b0:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801d7b4:	9103      	str	r1, [sp, #12]
 801d7b6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801d7ba:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801d7be:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801d7c2:	9501      	str	r5, [sp, #4]
 801d7c4:	eb02 0904 	add.w	r9, r2, r4
 801d7c8:	f2c0 8141 	blt.w	801da4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801d7cc:	4583      	cmp	fp, r0
 801d7ce:	f340 813e 	ble.w	801da4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801d7d2:	2f00      	cmp	r7, #0
 801d7d4:	f2c0 8137 	blt.w	801da46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801d7d8:	42be      	cmp	r6, r7
 801d7da:	f340 8134 	ble.w	801da46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801d7de:	f812 c004 	ldrb.w	ip, [r2, r4]
 801d7e2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801d7e6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801d7ea:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801d7ee:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801d7f2:	4355      	muls	r5, r2
 801d7f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7f8:	fb0c f203 	mul.w	r2, ip, r3
 801d7fc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801d800:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801d804:	441d      	add	r5, r3
 801d806:	f102 0320 	add.w	r3, r2, #32
 801d80a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d80e:	0a1b      	lsrs	r3, r3, #8
 801d810:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801d814:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d818:	431c      	orrs	r4, r3
 801d81a:	1c7b      	adds	r3, r7, #1
 801d81c:	f100 811c 	bmi.w	801da58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801d820:	429e      	cmp	r6, r3
 801d822:	f340 8119 	ble.w	801da58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801d826:	2900      	cmp	r1, #0
 801d828:	f000 8119 	beq.w	801da5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801d82c:	9a01      	ldr	r2, [sp, #4]
 801d82e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d832:	8855      	ldrh	r5, [r2, #2]
 801d834:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801d838:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801d83c:	fb08 f802 	mul.w	r8, r8, r2
 801d840:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801d844:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d848:	435d      	muls	r5, r3
 801d84a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801d84e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d852:	44d0      	add	r8, sl
 801d854:	f105 0a20 	add.w	sl, r5, #32
 801d858:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d85c:	0a2d      	lsrs	r5, r5, #8
 801d85e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801d862:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d866:	432a      	orrs	r2, r5
 801d868:	3001      	adds	r0, #1
 801d86a:	f100 80fe 	bmi.w	801da6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801d86e:	4583      	cmp	fp, r0
 801d870:	f340 80fb 	ble.w	801da6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801d874:	f1be 0f00 	cmp.w	lr, #0
 801d878:	f000 80fc 	beq.w	801da74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801d87c:	2f00      	cmp	r7, #0
 801d87e:	f2c0 80f1 	blt.w	801da64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801d882:	42be      	cmp	r6, r7
 801d884:	f340 80ee 	ble.w	801da64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801d888:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801d88c:	9801      	ldr	r0, [sp, #4]
 801d88e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801d892:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801d896:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d89a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801d89e:	fb0a fa00 	mul.w	sl, sl, r0
 801d8a2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d8a6:	fb05 f808 	mul.w	r8, r5, r8
 801d8aa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801d8ae:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801d8b2:	4482      	add	sl, r0
 801d8b4:	f108 0020 	add.w	r0, r8, #32
 801d8b8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d8bc:	0a00      	lsrs	r0, r0, #8
 801d8be:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801d8c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8c6:	ea4b 0b00 	orr.w	fp, fp, r0
 801d8ca:	3701      	adds	r7, #1
 801d8cc:	f100 80d7 	bmi.w	801da7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801d8d0:	42be      	cmp	r6, r7
 801d8d2:	f340 80d4 	ble.w	801da7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801d8d6:	2900      	cmp	r1, #0
 801d8d8:	f000 80d4 	beq.w	801da84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801d8dc:	9801      	ldr	r0, [sp, #4]
 801d8de:	3601      	adds	r6, #1
 801d8e0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801d8e4:	f819 7006 	ldrb.w	r7, [r9, r6]
 801d8e8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801d8ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8f0:	fb07 f800 	mul.w	r8, r7, r0
 801d8f4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801d8f8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801d8fc:	fb09 f906 	mul.w	r9, r9, r6
 801d900:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801d904:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801d908:	44d1      	add	r9, sl
 801d90a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801d90e:	f108 0020 	add.w	r0, r8, #32
 801d912:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d916:	0a00      	lsrs	r0, r0, #8
 801d918:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d91c:	4330      	orrs	r0, r6
 801d91e:	b28e      	uxth	r6, r1
 801d920:	fa1f f98e 	uxth.w	r9, lr
 801d924:	fb06 f809 	mul.w	r8, r6, r9
 801d928:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801d92c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801d930:	0136      	lsls	r6, r6, #4
 801d932:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d936:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801d93a:	9601      	str	r6, [sp, #4]
 801d93c:	ea4a 0404 	orr.w	r4, sl, r4
 801d940:	fa1f f689 	uxth.w	r6, r9
 801d944:	9602      	str	r6, [sp, #8]
 801d946:	4626      	mov	r6, r4
 801d948:	fb11 f90e 	smulbb	r9, r1, lr
 801d94c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d950:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801d954:	f1ce 0410 	rsb	r4, lr, #16
 801d958:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d95c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d960:	1a64      	subs	r4, r4, r1
 801d962:	ea4a 0202 	orr.w	r2, sl, r2
 801d966:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801d96a:	434a      	muls	r2, r1
 801d96c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801d970:	fb04 2406 	mla	r4, r4, r6, r2
 801d974:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d978:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d97c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d980:	ea4a 0000 	orr.w	r0, sl, r0
 801d984:	fb09 4200 	mla	r2, r9, r0, r4
 801d988:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801d98c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d990:	9801      	ldr	r0, [sp, #4]
 801d992:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801d996:	ea44 0b0b 	orr.w	fp, r4, fp
 801d99a:	9c02      	ldr	r4, [sp, #8]
 801d99c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801d9a0:	1b00      	subs	r0, r0, r4
 801d9a2:	9c01      	ldr	r4, [sp, #4]
 801d9a4:	b280      	uxth	r0, r0
 801d9a6:	eba4 0608 	sub.w	r6, r4, r8
 801d9aa:	b2b6      	uxth	r6, r6
 801d9ac:	4373      	muls	r3, r6
 801d9ae:	fb0c 3300 	mla	r3, ip, r0, r3
 801d9b2:	9802      	ldr	r0, [sp, #8]
 801d9b4:	9903      	ldr	r1, [sp, #12]
 801d9b6:	fb00 3505 	mla	r5, r0, r5, r3
 801d9ba:	fb08 5707 	mla	r7, r8, r7, r5
 801d9be:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801d9c2:	8809      	ldrh	r1, [r1, #0]
 801d9c4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801d9c8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801d9cc:	120b      	asrs	r3, r1, #8
 801d9ce:	b2ff      	uxtb	r7, r7
 801d9d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d9d4:	437b      	muls	r3, r7
 801d9d6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d9da:	10c8      	asrs	r0, r1, #3
 801d9dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d9e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d9e4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d9e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d9ec:	00c9      	lsls	r1, r1, #3
 801d9ee:	4378      	muls	r0, r7
 801d9f0:	ea42 0e0e 	orr.w	lr, r2, lr
 801d9f4:	b2c9      	uxtb	r1, r1
 801d9f6:	fa1f f28e 	uxth.w	r2, lr
 801d9fa:	434f      	muls	r7, r1
 801d9fc:	1c59      	adds	r1, r3, #1
 801d9fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801da02:	1213      	asrs	r3, r2, #8
 801da04:	f023 0307 	bic.w	r3, r3, #7
 801da08:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801da0c:	1c41      	adds	r1, r0, #1
 801da0e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801da12:	10d1      	asrs	r1, r2, #3
 801da14:	f021 0103 	bic.w	r1, r1, #3
 801da18:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801da1c:	021b      	lsls	r3, r3, #8
 801da1e:	00c9      	lsls	r1, r1, #3
 801da20:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801da24:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801da28:	430b      	orrs	r3, r1
 801da2a:	1c79      	adds	r1, r7, #1
 801da2c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801da30:	00d2      	lsls	r2, r2, #3
 801da32:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801da36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801da3a:	431a      	orrs	r2, r3
 801da3c:	9b03      	ldr	r3, [sp, #12]
 801da3e:	801a      	strh	r2, [r3, #0]
 801da40:	b005      	add	sp, #20
 801da42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da46:	f04f 0c00 	mov.w	ip, #0
 801da4a:	4664      	mov	r4, ip
 801da4c:	e6e5      	b.n	801d81a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801da4e:	2300      	movs	r3, #0
 801da50:	469c      	mov	ip, r3
 801da52:	461a      	mov	r2, r3
 801da54:	461c      	mov	r4, r3
 801da56:	e707      	b.n	801d868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801da58:	2300      	movs	r3, #0
 801da5a:	461a      	mov	r2, r3
 801da5c:	e704      	b.n	801d868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801da5e:	460b      	mov	r3, r1
 801da60:	460a      	mov	r2, r1
 801da62:	e701      	b.n	801d868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801da64:	2500      	movs	r5, #0
 801da66:	46ab      	mov	fp, r5
 801da68:	e72f      	b.n	801d8ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801da6a:	2700      	movs	r7, #0
 801da6c:	463d      	mov	r5, r7
 801da6e:	4638      	mov	r0, r7
 801da70:	46bb      	mov	fp, r7
 801da72:	e754      	b.n	801d91e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801da74:	4677      	mov	r7, lr
 801da76:	4675      	mov	r5, lr
 801da78:	4670      	mov	r0, lr
 801da7a:	46f3      	mov	fp, lr
 801da7c:	e74f      	b.n	801d91e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801da7e:	2700      	movs	r7, #0
 801da80:	4638      	mov	r0, r7
 801da82:	e74c      	b.n	801d91e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801da84:	460f      	mov	r7, r1
 801da86:	4608      	mov	r0, r1
 801da88:	e749      	b.n	801d91e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801da8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da90:	b093      	sub	sp, #76	; 0x4c
 801da92:	9210      	str	r2, [sp, #64]	; 0x40
 801da94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801da96:	9011      	str	r0, [sp, #68]	; 0x44
 801da98:	6850      	ldr	r0, [r2, #4]
 801da9a:	910e      	str	r1, [sp, #56]	; 0x38
 801da9c:	9306      	str	r3, [sp, #24]
 801da9e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801daa2:	fb00 1303 	mla	r3, r0, r3, r1
 801daa6:	6812      	ldr	r2, [r2, #0]
 801daa8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801daac:	9307      	str	r3, [sp, #28]
 801daae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	9308      	str	r3, [sp, #32]
 801dab4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dab6:	685b      	ldr	r3, [r3, #4]
 801dab8:	9309      	str	r3, [sp, #36]	; 0x24
 801daba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	dc03      	bgt.n	801dac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	f340 83b4 	ble.w	801e230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801dac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801daca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dace:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dad2:	1e48      	subs	r0, r1, #1
 801dad4:	1e55      	subs	r5, r2, #1
 801dad6:	9b06      	ldr	r3, [sp, #24]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	f340 8163 	ble.w	801dda4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dade:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801dae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dae2:	1436      	asrs	r6, r6, #16
 801dae4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dae8:	d406      	bmi.n	801daf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801daea:	4286      	cmp	r6, r0
 801daec:	da04      	bge.n	801daf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801daee:	2b00      	cmp	r3, #0
 801daf0:	db02      	blt.n	801daf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801daf2:	42ab      	cmp	r3, r5
 801daf4:	f2c0 8157 	blt.w	801dda6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801daf8:	3601      	adds	r6, #1
 801dafa:	f100 8144 	bmi.w	801dd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801dafe:	42b1      	cmp	r1, r6
 801db00:	f2c0 8141 	blt.w	801dd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801db04:	3301      	adds	r3, #1
 801db06:	f100 813e 	bmi.w	801dd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801db0a:	429a      	cmp	r2, r3
 801db0c:	f2c0 813b 	blt.w	801dd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801db10:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801db14:	9b06      	ldr	r3, [sp, #24]
 801db16:	9f07      	ldr	r7, [sp, #28]
 801db18:	930f      	str	r3, [sp, #60]	; 0x3c
 801db1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	f340 8164 	ble.w	801ddea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801db22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801db24:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801db26:	1418      	asrs	r0, r3, #16
 801db28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801db2a:	142d      	asrs	r5, r5, #16
 801db2c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801db30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801db32:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801db36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801db38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801db3c:	f100 81ee 	bmi.w	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801db40:	f102 3eff 	add.w	lr, r2, #4294967295
 801db44:	4575      	cmp	r5, lr
 801db46:	f280 81e9 	bge.w	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801db4a:	2800      	cmp	r0, #0
 801db4c:	f2c0 81e6 	blt.w	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801db50:	f103 3eff 	add.w	lr, r3, #4294967295
 801db54:	4570      	cmp	r0, lr
 801db56:	f280 81e1 	bge.w	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801db5a:	b212      	sxth	r2, r2
 801db5c:	fb00 5002 	mla	r0, r0, r2, r5
 801db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db62:	fa1f fe81 	uxth.w	lr, r1
 801db66:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801db6a:	eb03 0a00 	add.w	sl, r3, r0
 801db6e:	f813 9000 	ldrb.w	r9, [r3, r0]
 801db72:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801db76:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801db7a:	b29b      	uxth	r3, r3
 801db7c:	f1bc 0f00 	cmp.w	ip, #0
 801db80:	f000 8179 	beq.w	801de76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801db84:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801db88:	eb0a 0b02 	add.w	fp, sl, r2
 801db8c:	fa1f fa8c 	uxth.w	sl, ip
 801db90:	fb0a fe0e 	mul.w	lr, sl, lr
 801db94:	eba5 050e 	sub.w	r5, r5, lr
 801db98:	b2ad      	uxth	r5, r5
 801db9a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801db9e:	fb08 f505 	mul.w	r5, r8, r5
 801dba2:	fa1f fa8a 	uxth.w	sl, sl
 801dba6:	eba3 030a 	sub.w	r3, r3, sl
 801dbaa:	b29b      	uxth	r3, r3
 801dbac:	940a      	str	r4, [sp, #40]	; 0x28
 801dbae:	fb09 5303 	mla	r3, r9, r3, r5
 801dbb2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801dbb6:	940b      	str	r4, [sp, #44]	; 0x2c
 801dbb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dbba:	fb0a 3304 	mla	r3, sl, r4, r3
 801dbbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dbc0:	fb0e 3304 	mla	r3, lr, r4, r3
 801dbc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	f000 80cf 	beq.w	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801dbce:	9c08      	ldr	r4, [sp, #32]
 801dbd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dbd4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801dbd8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801dbdc:	f000 8150 	beq.w	801de80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801dbe0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dbe4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801dbe8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dbec:	fb09 f000 	mul.w	r0, r9, r0
 801dbf0:	fb0a fe0e 	mul.w	lr, sl, lr
 801dbf4:	f100 0b20 	add.w	fp, r0, #32
 801dbf8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801dbfc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dc00:	44ce      	add	lr, r9
 801dc02:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801dc06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc0a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc0e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dc12:	ea4e 0909 	orr.w	r9, lr, r9
 801dc16:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc1a:	8868      	ldrh	r0, [r5, #2]
 801dc1c:	d019      	beq.n	801dc52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801dc1e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dc22:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801dc26:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc2a:	fb08 f800 	mul.w	r8, r8, r0
 801dc2e:	fb0a fe0e 	mul.w	lr, sl, lr
 801dc32:	f108 0b20 	add.w	fp, r8, #32
 801dc36:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801dc3a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dc3e:	4486      	add	lr, r0
 801dc40:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801dc44:	0a00      	lsrs	r0, r0, #8
 801dc46:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc4e:	ea4e 0000 	orr.w	r0, lr, r0
 801dc52:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801dc56:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801dc5a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801dc5e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801dc62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dc66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801dc6a:	ea4e 0909 	orr.w	r9, lr, r9
 801dc6e:	ea4a 0000 	orr.w	r0, sl, r0
 801dc72:	f1bc 0f00 	cmp.w	ip, #0
 801dc76:	f000 8105 	beq.w	801de84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801dc7a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801dc7e:	3a01      	subs	r2, #1
 801dc80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dc82:	0052      	lsls	r2, r2, #1
 801dc84:	3202      	adds	r2, #2
 801dc86:	2cff      	cmp	r4, #255	; 0xff
 801dc88:	eb05 0e02 	add.w	lr, r5, r2
 801dc8c:	5aaa      	ldrh	r2, [r5, r2]
 801dc8e:	d018      	beq.n	801dcc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801dc90:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801dc94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dc98:	fb04 fa02 	mul.w	sl, r4, r2
 801dc9c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dca0:	fb08 f805 	mul.w	r8, r8, r5
 801dca4:	f10a 0520 	add.w	r5, sl, #32
 801dca8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801dcac:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801dcb0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dcb4:	4442      	add	r2, r8
 801dcb6:	0a2d      	lsrs	r5, r5, #8
 801dcb8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801dcbc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcc0:	432a      	orrs	r2, r5
 801dcc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dcc4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801dcc8:	2cff      	cmp	r4, #255	; 0xff
 801dcca:	d01a      	beq.n	801dd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801dccc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801dcd0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcd4:	fb04 fa05 	mul.w	sl, r4, r5
 801dcd8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dcdc:	fb08 f80e 	mul.w	r8, r8, lr
 801dce0:	f10a 0e20 	add.w	lr, sl, #32
 801dce4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801dce8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801dcec:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dcf0:	4445      	add	r5, r8
 801dcf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcf6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801dcfa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801dcfe:	ea45 050e 	orr.w	r5, r5, lr
 801dd02:	fb1c fe01 	smulbb	lr, ip, r1
 801dd06:	f1cc 0810 	rsb	r8, ip, #16
 801dd0a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801dd0e:	eba8 0801 	sub.w	r8, r8, r1
 801dd12:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801dd16:	4341      	muls	r1, r0
 801dd18:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801dd1c:	fb09 1108 	mla	r1, r9, r8, r1
 801dd20:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801dd24:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dd28:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801dd2c:	ea4a 0202 	orr.w	r2, sl, r2
 801dd30:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801dd34:	fb0c 1102 	mla	r1, ip, r2, r1
 801dd38:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801dd3c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801dd40:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801dd44:	ea4b 0505 	orr.w	r5, fp, r5
 801dd48:	fb0e 1e05 	mla	lr, lr, r5, r1
 801dd4c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801dd50:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801dd54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dd58:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801dd5c:	ea42 0e0e 	orr.w	lr, r2, lr
 801dd60:	fa1f f28e 	uxth.w	r2, lr
 801dd64:	2bff      	cmp	r3, #255	; 0xff
 801dd66:	f040 80a1 	bne.w	801deac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801dd6a:	803a      	strh	r2, [r7, #0]
 801dd6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dd6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dd70:	3702      	adds	r7, #2
 801dd72:	4413      	add	r3, r2
 801dd74:	931d      	str	r3, [sp, #116]	; 0x74
 801dd76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801dd78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dd7a:	441a      	add	r2, r3
 801dd7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd7e:	921e      	str	r2, [sp, #120]	; 0x78
 801dd80:	3b01      	subs	r3, #1
 801dd82:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd84:	e6c9      	b.n	801db1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801dd86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dd88:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801dd8a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801dd8c:	4433      	add	r3, r6
 801dd8e:	931d      	str	r3, [sp, #116]	; 0x74
 801dd90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dd92:	441c      	add	r4, r3
 801dd94:	9b06      	ldr	r3, [sp, #24]
 801dd96:	941e      	str	r4, [sp, #120]	; 0x78
 801dd98:	3b01      	subs	r3, #1
 801dd9a:	9306      	str	r3, [sp, #24]
 801dd9c:	9b07      	ldr	r3, [sp, #28]
 801dd9e:	3302      	adds	r3, #2
 801dda0:	9307      	str	r3, [sp, #28]
 801dda2:	e698      	b.n	801dad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dda4:	d028      	beq.n	801ddf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801dda6:	9b06      	ldr	r3, [sp, #24]
 801dda8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ddaa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ddac:	3b01      	subs	r3, #1
 801ddae:	fb00 5003 	mla	r0, r0, r3, r5
 801ddb2:	1400      	asrs	r0, r0, #16
 801ddb4:	f53f aeac 	bmi.w	801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ddb8:	3901      	subs	r1, #1
 801ddba:	4288      	cmp	r0, r1
 801ddbc:	f6bf aea8 	bge.w	801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ddc0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ddc2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ddc4:	fb01 0303 	mla	r3, r1, r3, r0
 801ddc8:	141b      	asrs	r3, r3, #16
 801ddca:	f53f aea1 	bmi.w	801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ddce:	3a01      	subs	r2, #1
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	f6bf ae9d 	bge.w	801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ddd6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ddda:	9b06      	ldr	r3, [sp, #24]
 801dddc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801dde0:	930f      	str	r3, [sp, #60]	; 0x3c
 801dde2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	f300 80b6 	bgt.w	801df56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 801ddea:	9b06      	ldr	r3, [sp, #24]
 801ddec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ddf0:	9b07      	ldr	r3, [sp, #28]
 801ddf2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ddf6:	9307      	str	r3, [sp, #28]
 801ddf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	f340 8218 	ble.w	801e230 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801de00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de14:	eef0 6a62 	vmov.f32	s13, s5
 801de18:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de2c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801de30:	eef0 6a43 	vmov.f32	s13, s6
 801de34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de38:	ee12 2a90 	vmov	r2, s5
 801de3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de46:	fb92 f3f3 	sdiv	r3, r2, r3
 801de4a:	ee13 2a10 	vmov	r2, s6
 801de4e:	931f      	str	r3, [sp, #124]	; 0x7c
 801de50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de52:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801de56:	fb92 f3f3 	sdiv	r3, r2, r3
 801de5a:	9320      	str	r3, [sp, #128]	; 0x80
 801de5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de60:	3b01      	subs	r3, #1
 801de62:	930e      	str	r3, [sp, #56]	; 0x38
 801de64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de66:	bf08      	it	eq
 801de68:	4613      	moveq	r3, r2
 801de6a:	eeb0 3a67 	vmov.f32	s6, s15
 801de6e:	9306      	str	r3, [sp, #24]
 801de70:	eef0 2a47 	vmov.f32	s5, s14
 801de74:	e621      	b.n	801daba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801de76:	fb08 f505 	mul.w	r5, r8, r5
 801de7a:	fb09 5303 	mla	r3, r9, r3, r5
 801de7e:	e6a1      	b.n	801dbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801de80:	4681      	mov	r9, r0
 801de82:	e6c8      	b.n	801dc16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801de84:	f1c1 0210 	rsb	r2, r1, #16
 801de88:	4341      	muls	r1, r0
 801de8a:	fb09 1902 	mla	r9, r9, r2, r1
 801de8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801de92:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801de96:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801de9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de9e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801dea2:	ea42 0909 	orr.w	r9, r2, r9
 801dea6:	fa1f f289 	uxth.w	r2, r9
 801deaa:	e75b      	b.n	801dd64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801deac:	43db      	mvns	r3, r3
 801deae:	f8b7 c000 	ldrh.w	ip, [r7]
 801deb2:	fa5f fe83 	uxtb.w	lr, r3
 801deb6:	ea4f 202c 	mov.w	r0, ip, asr #8
 801deba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801debe:	fb00 f00e 	mul.w	r0, r0, lr
 801dec2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dec6:	1c41      	adds	r1, r0, #1
 801dec8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801decc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801ded0:	fb05 f50e 	mul.w	r5, r5, lr
 801ded4:	1211      	asrs	r1, r2, #8
 801ded6:	f021 0107 	bic.w	r1, r1, #7
 801deda:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801dede:	48d6      	ldr	r0, [pc, #856]	; (801e238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801dee0:	b2c9      	uxtb	r1, r1
 801dee2:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801dee6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801deea:	1c69      	adds	r1, r5, #1
 801deec:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801def0:	b2db      	uxtb	r3, r3
 801def2:	10d1      	asrs	r1, r2, #3
 801def4:	fb03 f30e 	mul.w	r3, r3, lr
 801def8:	f021 0103 	bic.w	r1, r1, #3
 801defc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801df00:	00c9      	lsls	r1, r1, #3
 801df02:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801df06:	4301      	orrs	r1, r0
 801df08:	1c58      	adds	r0, r3, #1
 801df0a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801df0e:	00d2      	lsls	r2, r2, #3
 801df10:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801df14:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801df18:	430a      	orrs	r2, r1
 801df1a:	e726      	b.n	801dd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 801df1c:	f115 0e01 	adds.w	lr, r5, #1
 801df20:	f53f af24 	bmi.w	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801df24:	4572      	cmp	r2, lr
 801df26:	f6ff af21 	blt.w	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801df2a:	f110 0e01 	adds.w	lr, r0, #1
 801df2e:	f53f af1d 	bmi.w	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801df32:	4573      	cmp	r3, lr
 801df34:	f6ff af1a 	blt.w	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801df38:	b21b      	sxth	r3, r3
 801df3a:	b212      	sxth	r2, r2
 801df3c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801df40:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801df44:	9301      	str	r3, [sp, #4]
 801df46:	9200      	str	r2, [sp, #0]
 801df48:	4639      	mov	r1, r7
 801df4a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801df4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801df50:	f7ff fc24 	bl	801d79c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801df54:	e70a      	b.n	801dd6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801df56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801df5e:	fa1f fc82 	uxth.w	ip, r2
 801df62:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801df66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df68:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801df6c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801df72:	141f      	asrs	r7, r3, #16
 801df74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df76:	141b      	asrs	r3, r3, #16
 801df78:	fb01 3707 	mla	r7, r1, r7, r3
 801df7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df7e:	eb03 0a07 	add.w	sl, r3, r7
 801df82:	f813 9007 	ldrb.w	r9, [r3, r7]
 801df86:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801df8a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801df8e:	b29b      	uxth	r3, r3
 801df90:	2d00      	cmp	r5, #0
 801df92:	f000 80fe 	beq.w	801e192 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801df96:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801df9a:	eb0a 0b01 	add.w	fp, sl, r1
 801df9e:	fa1f fa85 	uxth.w	sl, r5
 801dfa2:	fb0a fc0c 	mul.w	ip, sl, ip
 801dfa6:	eba0 000c 	sub.w	r0, r0, ip
 801dfaa:	b280      	uxth	r0, r0
 801dfac:	fb08 f000 	mul.w	r0, r8, r0
 801dfb0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801dfb4:	fa1f fa8a 	uxth.w	sl, sl
 801dfb8:	eba3 030a 	sub.w	r3, r3, sl
 801dfbc:	b29b      	uxth	r3, r3
 801dfbe:	fb09 0303 	mla	r3, r9, r3, r0
 801dfc2:	940c      	str	r4, [sp, #48]	; 0x30
 801dfc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801dfc6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801dfca:	fb0a 3300 	mla	r3, sl, r0, r3
 801dfce:	fb0c 3304 	mla	r3, ip, r4, r3
 801dfd2:	940d      	str	r4, [sp, #52]	; 0x34
 801dfd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	f000 80cc 	beq.w	801e176 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801dfde:	9808      	ldr	r0, [sp, #32]
 801dfe0:	9c08      	ldr	r4, [sp, #32]
 801dfe2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dfe6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801dfea:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801dfee:	f000 80d5 	beq.w	801e19c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801dff2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801dff6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801dffa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801dffe:	fb09 f707 	mul.w	r7, r9, r7
 801e002:	fb0a fc0c 	mul.w	ip, sl, ip
 801e006:	f107 0b20 	add.w	fp, r7, #32
 801e00a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801e00e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e012:	44cc      	add	ip, r9
 801e014:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801e018:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e01c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e020:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e024:	ea4c 0909 	orr.w	r9, ip, r9
 801e028:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e02c:	8847      	ldrh	r7, [r0, #2]
 801e02e:	d019      	beq.n	801e064 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 801e030:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e034:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e038:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e03c:	fb08 f807 	mul.w	r8, r8, r7
 801e040:	fb0a fc0c 	mul.w	ip, sl, ip
 801e044:	f108 0b20 	add.w	fp, r8, #32
 801e048:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801e04c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e050:	44bc      	add	ip, r7
 801e052:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801e056:	0a3f      	lsrs	r7, r7, #8
 801e058:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e05c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e060:	ea4c 0707 	orr.w	r7, ip, r7
 801e064:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801e068:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801e06c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e070:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e074:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e078:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e07c:	ea4c 0909 	orr.w	r9, ip, r9
 801e080:	ea4a 0707 	orr.w	r7, sl, r7
 801e084:	2d00      	cmp	r5, #0
 801e086:	f000 808b 	beq.w	801e1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801e08a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801e08e:	3901      	subs	r1, #1
 801e090:	0049      	lsls	r1, r1, #1
 801e092:	3102      	adds	r1, #2
 801e094:	eb00 0c01 	add.w	ip, r0, r1
 801e098:	5a41      	ldrh	r1, [r0, r1]
 801e09a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e09c:	28ff      	cmp	r0, #255	; 0xff
 801e09e:	d019      	beq.n	801e0d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 801e0a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e0a2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801e0a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e0aa:	fb04 fa01 	mul.w	sl, r4, r1
 801e0ae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e0b2:	fb08 f800 	mul.w	r8, r8, r0
 801e0b6:	f10a 0020 	add.w	r0, sl, #32
 801e0ba:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801e0be:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801e0c2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e0c6:	4441      	add	r1, r8
 801e0c8:	0a00      	lsrs	r0, r0, #8
 801e0ca:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801e0ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e0d2:	4301      	orrs	r1, r0
 801e0d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0d6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801e0da:	2cff      	cmp	r4, #255	; 0xff
 801e0dc:	d01a      	beq.n	801e114 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801e0de:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801e0e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e0e6:	fb04 fa00 	mul.w	sl, r4, r0
 801e0ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e0ee:	fb08 f80c 	mul.w	r8, r8, ip
 801e0f2:	f10a 0c20 	add.w	ip, sl, #32
 801e0f6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801e0fa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801e0fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e102:	4440      	add	r0, r8
 801e104:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e108:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801e10c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e110:	ea40 000c 	orr.w	r0, r0, ip
 801e114:	fb15 fc02 	smulbb	ip, r5, r2
 801e118:	f1c5 0810 	rsb	r8, r5, #16
 801e11c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801e120:	eba8 0802 	sub.w	r8, r8, r2
 801e124:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801e128:	437a      	muls	r2, r7
 801e12a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801e12e:	fb09 2208 	mla	r2, r9, r8, r2
 801e132:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801e136:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e13a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e13e:	ea4a 0101 	orr.w	r1, sl, r1
 801e142:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801e146:	fb05 2201 	mla	r2, r5, r1, r2
 801e14a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801e14e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e152:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e156:	ea4b 0000 	orr.w	r0, fp, r0
 801e15a:	fb0c 2200 	mla	r2, ip, r0, r2
 801e15e:	0d57      	lsrs	r7, r2, #21
 801e160:	0952      	lsrs	r2, r2, #5
 801e162:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e166:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e16a:	433a      	orrs	r2, r7
 801e16c:	2bff      	cmp	r3, #255	; 0xff
 801e16e:	b292      	uxth	r2, r2
 801e170:	d127      	bne.n	801e1c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801e172:	f8ae 2000 	strh.w	r2, [lr]
 801e176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e178:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e17a:	f10e 0e02 	add.w	lr, lr, #2
 801e17e:	4413      	add	r3, r2
 801e180:	931d      	str	r3, [sp, #116]	; 0x74
 801e182:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e184:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e186:	441a      	add	r2, r3
 801e188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e18a:	921e      	str	r2, [sp, #120]	; 0x78
 801e18c:	3b01      	subs	r3, #1
 801e18e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e190:	e627      	b.n	801dde2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e192:	fb08 f000 	mul.w	r0, r8, r0
 801e196:	fb09 0303 	mla	r3, r9, r3, r0
 801e19a:	e71b      	b.n	801dfd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 801e19c:	46b9      	mov	r9, r7
 801e19e:	e743      	b.n	801e028 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 801e1a0:	f1c2 0110 	rsb	r1, r2, #16
 801e1a4:	437a      	muls	r2, r7
 801e1a6:	fb09 2901 	mla	r9, r9, r1, r2
 801e1aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e1ae:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801e1b2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801e1b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e1ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e1be:	4302      	orrs	r2, r0
 801e1c0:	e7d4      	b.n	801e16c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801e1c2:	43db      	mvns	r3, r3
 801e1c4:	f8be 7000 	ldrh.w	r7, [lr]
 801e1c8:	fa5f fc83 	uxtb.w	ip, r3
 801e1cc:	1238      	asrs	r0, r7, #8
 801e1ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e1d2:	fb00 f00c 	mul.w	r0, r0, ip
 801e1d6:	10fd      	asrs	r5, r7, #3
 801e1d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e1dc:	fb05 f10c 	mul.w	r1, r5, ip
 801e1e0:	1c45      	adds	r5, r0, #1
 801e1e2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e1e6:	1215      	asrs	r5, r2, #8
 801e1e8:	f025 0507 	bic.w	r5, r5, #7
 801e1ec:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e1f0:	00fb      	lsls	r3, r7, #3
 801e1f2:	1c4d      	adds	r5, r1, #1
 801e1f4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801e1f8:	b2db      	uxtb	r3, r3
 801e1fa:	10d1      	asrs	r1, r2, #3
 801e1fc:	fb03 f30c 	mul.w	r3, r3, ip
 801e200:	f021 0103 	bic.w	r1, r1, #3
 801e204:	4c0c      	ldr	r4, [pc, #48]	; (801e238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801e206:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e20a:	b2c0      	uxtb	r0, r0
 801e20c:	00c9      	lsls	r1, r1, #3
 801e20e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e212:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801e216:	4308      	orrs	r0, r1
 801e218:	1c59      	adds	r1, r3, #1
 801e21a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e21e:	00d2      	lsls	r2, r2, #3
 801e220:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e224:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801e228:	4318      	orrs	r0, r3
 801e22a:	f8ae 0000 	strh.w	r0, [lr]
 801e22e:	e7a2      	b.n	801e176 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801e230:	b013      	add	sp, #76	; 0x4c
 801e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e236:	bf00      	nop
 801e238:	fffff800 	.word	0xfffff800

0801e23c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801e23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e240:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801e244:	fb05 4c03 	mla	ip, r5, r3, r4
 801e248:	2d00      	cmp	r5, #0
 801e24a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801e24e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801e252:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801e256:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801e25a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801e25e:	8808      	ldrh	r0, [r1, #0]
 801e260:	f2c0 80a7 	blt.w	801e3b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801e264:	45aa      	cmp	sl, r5
 801e266:	f340 80a4 	ble.w	801e3b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801e26a:	2c00      	cmp	r4, #0
 801e26c:	f2c0 809f 	blt.w	801e3ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801e270:	42a3      	cmp	r3, r4
 801e272:	f340 809c 	ble.w	801e3ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801e276:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801e27a:	1c62      	adds	r2, r4, #1
 801e27c:	f100 809c 	bmi.w	801e3b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801e280:	4293      	cmp	r3, r2
 801e282:	f340 8099 	ble.w	801e3b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801e286:	f1b9 0f00 	cmp.w	r9, #0
 801e28a:	f000 8095 	beq.w	801e3b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801e28e:	f8be c002 	ldrh.w	ip, [lr, #2]
 801e292:	3501      	adds	r5, #1
 801e294:	f100 8094 	bmi.w	801e3c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801e298:	45aa      	cmp	sl, r5
 801e29a:	f340 8091 	ble.w	801e3c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801e29e:	2f00      	cmp	r7, #0
 801e2a0:	f000 808e 	beq.w	801e3c0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801e2a4:	2c00      	cmp	r4, #0
 801e2a6:	f2c0 8089 	blt.w	801e3bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801e2aa:	42a3      	cmp	r3, r4
 801e2ac:	f340 8086 	ble.w	801e3bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801e2b0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801e2b4:	3401      	adds	r4, #1
 801e2b6:	f100 8086 	bmi.w	801e3c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801e2ba:	42a3      	cmp	r3, r4
 801e2bc:	f340 8083 	ble.w	801e3c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801e2c0:	f1b9 0f00 	cmp.w	r9, #0
 801e2c4:	d07f      	beq.n	801e3c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801e2c6:	3301      	adds	r3, #1
 801e2c8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801e2cc:	fb19 fe07 	smulbb	lr, r9, r7
 801e2d0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e2d4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e2d8:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e2dc:	ea44 0808 	orr.w	r8, r4, r8
 801e2e0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e2e4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e2e8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e2ec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e2f0:	ea44 0c0c 	orr.w	ip, r4, ip
 801e2f4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e2f8:	fb04 f40c 	mul.w	r4, r4, ip
 801e2fc:	f1c7 0210 	rsb	r2, r7, #16
 801e300:	eba2 0209 	sub.w	r2, r2, r9
 801e304:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e308:	fb02 4808 	mla	r8, r2, r8, r4
 801e30c:	b2b4      	uxth	r4, r6
 801e30e:	43f6      	mvns	r6, r6
 801e310:	041a      	lsls	r2, r3, #16
 801e312:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e316:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e31a:	4313      	orrs	r3, r2
 801e31c:	fb0e 8303 	mla	r3, lr, r3, r8
 801e320:	042a      	lsls	r2, r5, #16
 801e322:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e326:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e32a:	432a      	orrs	r2, r5
 801e32c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e330:	fb07 3202 	mla	r2, r7, r2, r3
 801e334:	0d53      	lsrs	r3, r2, #21
 801e336:	0952      	lsrs	r2, r2, #5
 801e338:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e33c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e340:	431a      	orrs	r2, r3
 801e342:	b293      	uxth	r3, r2
 801e344:	1202      	asrs	r2, r0, #8
 801e346:	b2f6      	uxtb	r6, r6
 801e348:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e34c:	fb12 f206 	smulbb	r2, r2, r6
 801e350:	10c7      	asrs	r7, r0, #3
 801e352:	00c0      	lsls	r0, r0, #3
 801e354:	b2c0      	uxtb	r0, r0
 801e356:	121d      	asrs	r5, r3, #8
 801e358:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e35c:	fb10 f006 	smulbb	r0, r0, r6
 801e360:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e364:	fb17 f706 	smulbb	r7, r7, r6
 801e368:	fb05 2504 	mla	r5, r5, r4, r2
 801e36c:	10da      	asrs	r2, r3, #3
 801e36e:	00db      	lsls	r3, r3, #3
 801e370:	b2db      	uxtb	r3, r3
 801e372:	fb03 0004 	mla	r0, r3, r4, r0
 801e376:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e37a:	fb02 7204 	mla	r2, r2, r4, r7
 801e37e:	b2ad      	uxth	r5, r5
 801e380:	b280      	uxth	r0, r0
 801e382:	1c6b      	adds	r3, r5, #1
 801e384:	b292      	uxth	r2, r2
 801e386:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e38a:	1c43      	adds	r3, r0, #1
 801e38c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e390:	1c50      	adds	r0, r2, #1
 801e392:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e396:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e39a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e39e:	0952      	lsrs	r2, r2, #5
 801e3a0:	432b      	orrs	r3, r5
 801e3a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e3a6:	4313      	orrs	r3, r2
 801e3a8:	800b      	strh	r3, [r1, #0]
 801e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3ae:	4680      	mov	r8, r0
 801e3b0:	e763      	b.n	801e27a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801e3b2:	4684      	mov	ip, r0
 801e3b4:	4680      	mov	r8, r0
 801e3b6:	e76c      	b.n	801e292 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801e3b8:	4684      	mov	ip, r0
 801e3ba:	e76a      	b.n	801e292 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801e3bc:	4605      	mov	r5, r0
 801e3be:	e779      	b.n	801e2b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	4605      	mov	r5, r0
 801e3c4:	e782      	b.n	801e2cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	e780      	b.n	801e2cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801e3ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ce:	b093      	sub	sp, #76	; 0x4c
 801e3d0:	461d      	mov	r5, r3
 801e3d2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801e3d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3d8:	910a      	str	r1, [sp, #40]	; 0x28
 801e3da:	9210      	str	r2, [sp, #64]	; 0x40
 801e3dc:	6859      	ldr	r1, [r3, #4]
 801e3de:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	920b      	str	r2, [sp, #44]	; 0x2c
 801e3e6:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801e3ea:	fb01 2707 	mla	r7, r1, r7, r2
 801e3ee:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801e3f2:	9307      	str	r3, [sp, #28]
 801e3f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e3f6:	9011      	str	r0, [sp, #68]	; 0x44
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	9309      	str	r3, [sp, #36]	; 0x24
 801e3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3fe:	43db      	mvns	r3, r3
 801e400:	b2db      	uxtb	r3, r3
 801e402:	9308      	str	r3, [sp, #32]
 801e404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e406:	2b00      	cmp	r3, #0
 801e408:	dc03      	bgt.n	801e412 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e40a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	f340 8203 	ble.w	801e818 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e412:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e414:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e418:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e41c:	1e48      	subs	r0, r1, #1
 801e41e:	f102 3cff 	add.w	ip, r2, #4294967295
 801e422:	2d00      	cmp	r5, #0
 801e424:	f340 80da 	ble.w	801e5dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801e428:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e42c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e430:	d406      	bmi.n	801e440 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e432:	4586      	cmp	lr, r0
 801e434:	da04      	bge.n	801e440 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e436:	2b00      	cmp	r3, #0
 801e438:	db02      	blt.n	801e440 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e43a:	4563      	cmp	r3, ip
 801e43c:	f2c0 80cf 	blt.w	801e5de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e440:	f11e 0e01 	adds.w	lr, lr, #1
 801e444:	f100 80c1 	bmi.w	801e5ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e448:	4571      	cmp	r1, lr
 801e44a:	f2c0 80be 	blt.w	801e5ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e44e:	3301      	adds	r3, #1
 801e450:	f100 80bb 	bmi.w	801e5ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e454:	429a      	cmp	r2, r3
 801e456:	f2c0 80b8 	blt.w	801e5ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e45a:	46a9      	mov	r9, r5
 801e45c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801e460:	f1b9 0f00 	cmp.w	r9, #0
 801e464:	f340 80d8 	ble.w	801e618 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801e468:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e46a:	1421      	asrs	r1, r4, #16
 801e46c:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e470:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e474:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e478:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e47c:	f100 8111 	bmi.w	801e6a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e480:	f10e 3aff 	add.w	sl, lr, #4294967295
 801e484:	4551      	cmp	r1, sl
 801e486:	f280 810c 	bge.w	801e6a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e48a:	2800      	cmp	r0, #0
 801e48c:	f2c0 8109 	blt.w	801e6a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e490:	f103 3aff 	add.w	sl, r3, #4294967295
 801e494:	4550      	cmp	r0, sl
 801e496:	f280 8104 	bge.w	801e6a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e49a:	fa0f f38e 	sxth.w	r3, lr
 801e49e:	fb00 1103 	mla	r1, r0, r3, r1
 801e4a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e4a4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801e4a8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801e4ac:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801e4b0:	f1bc 0f00 	cmp.w	ip, #0
 801e4b4:	d007      	beq.n	801e4c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e4b6:	005b      	lsls	r3, r3, #1
 801e4b8:	eb0a 0003 	add.w	r0, sl, r3
 801e4bc:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801e4c0:	930c      	str	r3, [sp, #48]	; 0x30
 801e4c2:	8843      	ldrh	r3, [r0, #2]
 801e4c4:	930d      	str	r3, [sp, #52]	; 0x34
 801e4c6:	fb12 f30c 	smulbb	r3, r2, ip
 801e4ca:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801e4ce:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801e4d2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e4d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e4da:	10db      	asrs	r3, r3, #3
 801e4dc:	ea40 000e 	orr.w	r0, r0, lr
 801e4e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e4e4:	f1cc 0e10 	rsb	lr, ip, #16
 801e4e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e4ec:	ebae 0e02 	sub.w	lr, lr, r2
 801e4f0:	ea4a 0101 	orr.w	r1, sl, r1
 801e4f4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e4f8:	4351      	muls	r1, r2
 801e4fa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801e4fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e500:	fb0e 1e00 	mla	lr, lr, r0, r1
 801e504:	0410      	lsls	r0, r2, #16
 801e506:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e50a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e50e:	4310      	orrs	r0, r2
 801e510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e512:	fb03 e000 	mla	r0, r3, r0, lr
 801e516:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e518:	0412      	lsls	r2, r2, #16
 801e51a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801e51e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e522:	ea42 020e 	orr.w	r2, r2, lr
 801e526:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801e52a:	fb03 0302 	mla	r3, r3, r2, r0
 801e52e:	f8b8 0000 	ldrh.w	r0, [r8]
 801e532:	9f08      	ldr	r7, [sp, #32]
 801e534:	0d5a      	lsrs	r2, r3, #21
 801e536:	1201      	asrs	r1, r0, #8
 801e538:	095b      	lsrs	r3, r3, #5
 801e53a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e53e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e542:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e546:	4313      	orrs	r3, r2
 801e548:	fb11 f107 	smulbb	r1, r1, r7
 801e54c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e550:	00c0      	lsls	r0, r0, #3
 801e552:	b29b      	uxth	r3, r3
 801e554:	b2c0      	uxtb	r0, r0
 801e556:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e55a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e55e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e562:	fb10 f007 	smulbb	r0, r0, r7
 801e566:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e56a:	fb1e fe07 	smulbb	lr, lr, r7
 801e56e:	fb0c 1c02 	mla	ip, ip, r2, r1
 801e572:	10d9      	asrs	r1, r3, #3
 801e574:	00db      	lsls	r3, r3, #3
 801e576:	b2db      	uxtb	r3, r3
 801e578:	fb03 0302 	mla	r3, r3, r2, r0
 801e57c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e580:	fb01 e102 	mla	r1, r1, r2, lr
 801e584:	fa1f fc8c 	uxth.w	ip, ip
 801e588:	b29a      	uxth	r2, r3
 801e58a:	f10c 0301 	add.w	r3, ip, #1
 801e58e:	b289      	uxth	r1, r1
 801e590:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e594:	1c53      	adds	r3, r2, #1
 801e596:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e59a:	1c4a      	adds	r2, r1, #1
 801e59c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e5a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e5a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e5a8:	0949      	lsrs	r1, r1, #5
 801e5aa:	ea43 030c 	orr.w	r3, r3, ip
 801e5ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e5b2:	430b      	orrs	r3, r1
 801e5b4:	f8a8 3000 	strh.w	r3, [r8]
 801e5b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e5ba:	f108 0802 	add.w	r8, r8, #2
 801e5be:	441c      	add	r4, r3
 801e5c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e5c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e5c6:	441e      	add	r6, r3
 801e5c8:	e74a      	b.n	801e460 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e5cc:	3d01      	subs	r5, #1
 801e5ce:	441c      	add	r4, r3
 801e5d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e5d2:	441e      	add	r6, r3
 801e5d4:	9b07      	ldr	r3, [sp, #28]
 801e5d6:	3302      	adds	r3, #2
 801e5d8:	9307      	str	r3, [sp, #28]
 801e5da:	e722      	b.n	801e422 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e5dc:	d022      	beq.n	801e624 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801e5de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e5e0:	1e6b      	subs	r3, r5, #1
 801e5e2:	fb00 4003 	mla	r0, r0, r3, r4
 801e5e6:	1400      	asrs	r0, r0, #16
 801e5e8:	f53f af37 	bmi.w	801e45a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e5ec:	3901      	subs	r1, #1
 801e5ee:	4288      	cmp	r0, r1
 801e5f0:	f6bf af33 	bge.w	801e45a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e5f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e5f6:	fb01 6303 	mla	r3, r1, r3, r6
 801e5fa:	141b      	asrs	r3, r3, #16
 801e5fc:	f53f af2d 	bmi.w	801e45a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e600:	3a01      	subs	r2, #1
 801e602:	4293      	cmp	r3, r2
 801e604:	f6bf af29 	bge.w	801e45a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e608:	46a8      	mov	r8, r5
 801e60a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801e60e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801e612:	f1b8 0f00 	cmp.w	r8, #0
 801e616:	dc5e      	bgt.n	801e6d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e618:	9b07      	ldr	r3, [sp, #28]
 801e61a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801e61e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801e622:	9307      	str	r3, [sp, #28]
 801e624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e626:	2b00      	cmp	r3, #0
 801e628:	f340 80f6 	ble.w	801e818 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801e62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e630:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e638:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e63c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e640:	eef0 6a62 	vmov.f32	s13, s5
 801e644:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e648:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e64c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e650:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e654:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e658:	ee16 4a90 	vmov	r4, s13
 801e65c:	eef0 6a43 	vmov.f32	s13, s6
 801e660:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e664:	ee12 2a90 	vmov	r2, s5
 801e668:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e66c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e66e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e672:	fb92 f3f3 	sdiv	r3, r2, r3
 801e676:	ee13 2a10 	vmov	r2, s6
 801e67a:	931f      	str	r3, [sp, #124]	; 0x7c
 801e67c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e67e:	ee16 6a90 	vmov	r6, s13
 801e682:	fb92 f3f3 	sdiv	r3, r2, r3
 801e686:	9320      	str	r3, [sp, #128]	; 0x80
 801e688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e68a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e68c:	3b01      	subs	r3, #1
 801e68e:	930a      	str	r3, [sp, #40]	; 0x28
 801e690:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e692:	bf0c      	ite	eq
 801e694:	4615      	moveq	r5, r2
 801e696:	461d      	movne	r5, r3
 801e698:	eeb0 3a67 	vmov.f32	s6, s15
 801e69c:	eef0 2a47 	vmov.f32	s5, s14
 801e6a0:	e6b0      	b.n	801e404 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e6a2:	f111 0a01 	adds.w	sl, r1, #1
 801e6a6:	d487      	bmi.n	801e5b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e6a8:	45d6      	cmp	lr, sl
 801e6aa:	db85      	blt.n	801e5b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e6ac:	f110 0a01 	adds.w	sl, r0, #1
 801e6b0:	d482      	bmi.n	801e5b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e6b2:	4553      	cmp	r3, sl
 801e6b4:	db80      	blt.n	801e5b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e6b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e6b8:	b21b      	sxth	r3, r3
 801e6ba:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801e6be:	9101      	str	r1, [sp, #4]
 801e6c0:	9300      	str	r3, [sp, #0]
 801e6c2:	e9cd c704 	strd	ip, r7, [sp, #16]
 801e6c6:	fa0f f38e 	sxth.w	r3, lr
 801e6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6cc:	4641      	mov	r1, r8
 801e6ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e6d0:	f7ff fdb4 	bl	801e23c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801e6d4:	e770      	b.n	801e5b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e6d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e6d8:	1430      	asrs	r0, r6, #16
 801e6da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e6de:	1423      	asrs	r3, r4, #16
 801e6e0:	fb01 3000 	mla	r0, r1, r0, r3
 801e6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e6e8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801e6ec:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801e6f0:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801e6f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e6f8:	8858      	ldrh	r0, [r3, #2]
 801e6fa:	f1be 0f00 	cmp.w	lr, #0
 801e6fe:	d00b      	beq.n	801e718 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801e700:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801e704:	3901      	subs	r1, #1
 801e706:	0049      	lsls	r1, r1, #1
 801e708:	3102      	adds	r1, #2
 801e70a:	eb03 0b01 	add.w	fp, r3, r1
 801e70e:	5a5b      	ldrh	r3, [r3, r1]
 801e710:	930e      	str	r3, [sp, #56]	; 0x38
 801e712:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801e716:	930f      	str	r3, [sp, #60]	; 0x3c
 801e718:	fb12 f30e 	smulbb	r3, r2, lr
 801e71c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801e720:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801e724:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e728:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801e72c:	10db      	asrs	r3, r3, #3
 801e72e:	ea41 010c 	orr.w	r1, r1, ip
 801e732:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e736:	f1ce 0c10 	rsb	ip, lr, #16
 801e73a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e73e:	ebac 0c02 	sub.w	ip, ip, r2
 801e742:	ea4b 0000 	orr.w	r0, fp, r0
 801e746:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e74a:	4350      	muls	r0, r2
 801e74c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801e750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e752:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e756:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801e75a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e75e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801e762:	ea4b 0101 	orr.w	r1, fp, r1
 801e766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e768:	fb03 c101 	mla	r1, r3, r1, ip
 801e76c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e76e:	0412      	lsls	r2, r2, #16
 801e770:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e774:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e778:	4302      	orrs	r2, r0
 801e77a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801e77e:	fb03 1202 	mla	r2, r3, r2, r1
 801e782:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801e786:	0952      	lsrs	r2, r2, #5
 801e788:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801e78c:	f8b9 2000 	ldrh.w	r2, [r9]
 801e790:	9f08      	ldr	r7, [sp, #32]
 801e792:	1211      	asrs	r1, r2, #8
 801e794:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e798:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e79c:	fb11 f107 	smulbb	r1, r1, r7
 801e7a0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801e7a4:	ea4b 0303 	orr.w	r3, fp, r3
 801e7a8:	00d2      	lsls	r2, r2, #3
 801e7aa:	b29b      	uxth	r3, r3
 801e7ac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e7b0:	b2d2      	uxtb	r2, r2
 801e7b2:	1218      	asrs	r0, r3, #8
 801e7b4:	fb1c fc07 	smulbb	ip, ip, r7
 801e7b8:	fb12 f207 	smulbb	r2, r2, r7
 801e7bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e7c0:	fb00 100a 	mla	r0, r0, sl, r1
 801e7c4:	10d9      	asrs	r1, r3, #3
 801e7c6:	00db      	lsls	r3, r3, #3
 801e7c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e7cc:	b2db      	uxtb	r3, r3
 801e7ce:	fb01 c10a 	mla	r1, r1, sl, ip
 801e7d2:	fb03 230a 	mla	r3, r3, sl, r2
 801e7d6:	b280      	uxth	r0, r0
 801e7d8:	b29b      	uxth	r3, r3
 801e7da:	b289      	uxth	r1, r1
 801e7dc:	1c42      	adds	r2, r0, #1
 801e7de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e7e2:	f101 0c01 	add.w	ip, r1, #1
 801e7e6:	1c5a      	adds	r2, r3, #1
 801e7e8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e7ec:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e7f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e7f2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e7f6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e7fa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e7fe:	4310      	orrs	r0, r2
 801e800:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e804:	441c      	add	r4, r3
 801e806:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e808:	ea40 000c 	orr.w	r0, r0, ip
 801e80c:	f829 0b02 	strh.w	r0, [r9], #2
 801e810:	441e      	add	r6, r3
 801e812:	f108 38ff 	add.w	r8, r8, #4294967295
 801e816:	e6fc      	b.n	801e612 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e818:	b013      	add	sp, #76	; 0x4c
 801e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e81e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801e81e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e822:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801e826:	fb0e 4703 	mla	r7, lr, r3, r4
 801e82a:	f1be 0f00 	cmp.w	lr, #0
 801e82e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801e832:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801e836:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801e83a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801e83e:	8808      	ldrh	r0, [r1, #0]
 801e840:	db60      	blt.n	801e904 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801e842:	45f1      	cmp	r9, lr
 801e844:	dd5e      	ble.n	801e904 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801e846:	2c00      	cmp	r4, #0
 801e848:	db5a      	blt.n	801e900 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801e84a:	42a3      	cmp	r3, r4
 801e84c:	dd58      	ble.n	801e900 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801e84e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801e852:	1c62      	adds	r2, r4, #1
 801e854:	d459      	bmi.n	801e90a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e856:	4293      	cmp	r3, r2
 801e858:	dd57      	ble.n	801e90a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e85a:	2d00      	cmp	r5, #0
 801e85c:	d055      	beq.n	801e90a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e85e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801e862:	f11e 0e01 	adds.w	lr, lr, #1
 801e866:	d454      	bmi.n	801e912 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e868:	45f1      	cmp	r9, lr
 801e86a:	dd52      	ble.n	801e912 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e86c:	2e00      	cmp	r6, #0
 801e86e:	d050      	beq.n	801e912 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e870:	2c00      	cmp	r4, #0
 801e872:	db4c      	blt.n	801e90e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801e874:	42a3      	cmp	r3, r4
 801e876:	dd4a      	ble.n	801e90e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801e878:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801e87c:	3401      	adds	r4, #1
 801e87e:	d405      	bmi.n	801e88c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e880:	42a3      	cmp	r3, r4
 801e882:	dd03      	ble.n	801e88c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e884:	b115      	cbz	r5, 801e88c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e886:	3301      	adds	r3, #1
 801e888:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801e88c:	fb15 f406 	smulbb	r4, r5, r6
 801e890:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801e894:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e898:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801e89c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e8a0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801e8a4:	ea43 0c0c 	orr.w	ip, r3, ip
 801e8a8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e8ac:	f1c6 0310 	rsb	r3, r6, #16
 801e8b0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e8b4:	1b5b      	subs	r3, r3, r5
 801e8b6:	ea4e 0707 	orr.w	r7, lr, r7
 801e8ba:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801e8be:	437d      	muls	r5, r7
 801e8c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e8c4:	fb03 5c0c 	mla	ip, r3, ip, r5
 801e8c8:	0403      	lsls	r3, r0, #16
 801e8ca:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e8ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e8d2:	4318      	orrs	r0, r3
 801e8d4:	fb04 c000 	mla	r0, r4, r0, ip
 801e8d8:	0413      	lsls	r3, r2, #16
 801e8da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e8de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e8e2:	4313      	orrs	r3, r2
 801e8e4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801e8e8:	fb06 0003 	mla	r0, r6, r3, r0
 801e8ec:	0d43      	lsrs	r3, r0, #21
 801e8ee:	0940      	lsrs	r0, r0, #5
 801e8f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e8f4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e8f8:	4318      	orrs	r0, r3
 801e8fa:	8008      	strh	r0, [r1, #0]
 801e8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e900:	4684      	mov	ip, r0
 801e902:	e7a6      	b.n	801e852 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801e904:	4607      	mov	r7, r0
 801e906:	4684      	mov	ip, r0
 801e908:	e7ab      	b.n	801e862 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801e90a:	4607      	mov	r7, r0
 801e90c:	e7a9      	b.n	801e862 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801e90e:	4602      	mov	r2, r0
 801e910:	e7b4      	b.n	801e87c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801e912:	4602      	mov	r2, r0
 801e914:	e7ba      	b.n	801e88c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801e916 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e91a:	b08f      	sub	sp, #60	; 0x3c
 801e91c:	461d      	mov	r5, r3
 801e91e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801e922:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e924:	9107      	str	r1, [sp, #28]
 801e926:	6859      	ldr	r1, [r3, #4]
 801e928:	920c      	str	r2, [sp, #48]	; 0x30
 801e92a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801e92e:	fb01 2707 	mla	r7, r1, r7, r2
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	900d      	str	r0, [sp, #52]	; 0x34
 801e936:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801e93a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e93c:	f8d3 8000 	ldr.w	r8, [r3]
 801e940:	9b07      	ldr	r3, [sp, #28]
 801e942:	2b00      	cmp	r3, #0
 801e944:	dc03      	bgt.n	801e94e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e948:	2b00      	cmp	r3, #0
 801e94a:	f340 8181 	ble.w	801ec50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e94e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e950:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e954:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e958:	1e48      	subs	r0, r1, #1
 801e95a:	f102 3cff 	add.w	ip, r2, #4294967295
 801e95e:	2d00      	cmp	r5, #0
 801e960:	f340 809b 	ble.w	801ea9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e964:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e968:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e96c:	d406      	bmi.n	801e97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e96e:	4586      	cmp	lr, r0
 801e970:	da04      	bge.n	801e97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e972:	2b00      	cmp	r3, #0
 801e974:	db02      	blt.n	801e97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e976:	4563      	cmp	r3, ip
 801e978:	f2c0 8090 	blt.w	801ea9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e97c:	f11e 0e01 	adds.w	lr, lr, #1
 801e980:	f100 8084 	bmi.w	801ea8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e984:	4571      	cmp	r1, lr
 801e986:	f2c0 8081 	blt.w	801ea8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e98a:	3301      	adds	r3, #1
 801e98c:	d47e      	bmi.n	801ea8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e98e:	429a      	cmp	r2, r3
 801e990:	db7c      	blt.n	801ea8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e992:	46aa      	mov	sl, r5
 801e994:	46b9      	mov	r9, r7
 801e996:	f1ba 0f00 	cmp.w	sl, #0
 801e99a:	f340 8099 	ble.w	801ead0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e99e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e9a0:	1421      	asrs	r1, r4, #16
 801e9a2:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e9a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e9aa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e9ae:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e9b2:	f100 80d0 	bmi.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e9b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e9ba:	4559      	cmp	r1, fp
 801e9bc:	f280 80cb 	bge.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e9c0:	2800      	cmp	r0, #0
 801e9c2:	f2c0 80c8 	blt.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e9c6:	f103 3bff 	add.w	fp, r3, #4294967295
 801e9ca:	4558      	cmp	r0, fp
 801e9cc:	f280 80c3 	bge.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e9d0:	fa0f fe8e 	sxth.w	lr, lr
 801e9d4:	fb00 110e 	mla	r1, r0, lr, r1
 801e9d8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801e9dc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801e9e0:	8841      	ldrh	r1, [r0, #2]
 801e9e2:	f1bc 0f00 	cmp.w	ip, #0
 801e9e6:	d00b      	beq.n	801ea00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e9e8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801e9ec:	3b01      	subs	r3, #1
 801e9ee:	005b      	lsls	r3, r3, #1
 801e9f0:	3302      	adds	r3, #2
 801e9f2:	eb00 0e03 	add.w	lr, r0, r3
 801e9f6:	5ac3      	ldrh	r3, [r0, r3]
 801e9f8:	9308      	str	r3, [sp, #32]
 801e9fa:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801e9fe:	9309      	str	r3, [sp, #36]	; 0x24
 801ea00:	fb12 f30c 	smulbb	r3, r2, ip
 801ea04:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801ea08:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ea0c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ea10:	ea40 000b 	orr.w	r0, r0, fp
 801ea14:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ea18:	10db      	asrs	r3, r3, #3
 801ea1a:	f1cc 0e10 	rsb	lr, ip, #16
 801ea1e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ea22:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ea26:	ebae 0e02 	sub.w	lr, lr, r2
 801ea2a:	ea4b 0101 	orr.w	r1, fp, r1
 801ea2e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ea32:	4351      	muls	r1, r2
 801ea34:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801ea38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea3a:	fb0e 1e00 	mla	lr, lr, r0, r1
 801ea3e:	0410      	lsls	r0, r2, #16
 801ea40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ea44:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ea48:	4310      	orrs	r0, r2
 801ea4a:	9a08      	ldr	r2, [sp, #32]
 801ea4c:	fb03 e000 	mla	r0, r3, r0, lr
 801ea50:	9908      	ldr	r1, [sp, #32]
 801ea52:	0412      	lsls	r2, r2, #16
 801ea54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ea58:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801ea5c:	ea42 020e 	orr.w	r2, r2, lr
 801ea60:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ea64:	fb03 0302 	mla	r3, r3, r2, r0
 801ea68:	0d5a      	lsrs	r2, r3, #21
 801ea6a:	095b      	lsrs	r3, r3, #5
 801ea6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea70:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ea74:	4313      	orrs	r3, r2
 801ea76:	f8a9 3000 	strh.w	r3, [r9]
 801ea7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ea7c:	f109 0902 	add.w	r9, r9, #2
 801ea80:	441c      	add	r4, r3
 801ea82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea84:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea88:	441e      	add	r6, r3
 801ea8a:	e784      	b.n	801e996 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ea8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ea8e:	3d01      	subs	r5, #1
 801ea90:	441c      	add	r4, r3
 801ea92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea94:	3702      	adds	r7, #2
 801ea96:	441e      	add	r6, r3
 801ea98:	e761      	b.n	801e95e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ea9a:	d01d      	beq.n	801ead8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801ea9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ea9e:	1e6b      	subs	r3, r5, #1
 801eaa0:	fb00 4003 	mla	r0, r0, r3, r4
 801eaa4:	1400      	asrs	r0, r0, #16
 801eaa6:	f53f af74 	bmi.w	801e992 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eaaa:	3901      	subs	r1, #1
 801eaac:	4288      	cmp	r0, r1
 801eaae:	f6bf af70 	bge.w	801e992 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eab2:	991c      	ldr	r1, [sp, #112]	; 0x70
 801eab4:	fb01 6303 	mla	r3, r1, r3, r6
 801eab8:	141b      	asrs	r3, r3, #16
 801eaba:	f53f af6a 	bmi.w	801e992 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eabe:	3a01      	subs	r2, #1
 801eac0:	4293      	cmp	r3, r2
 801eac2:	f6bf af66 	bge.w	801e992 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eac6:	46a9      	mov	r9, r5
 801eac8:	46ba      	mov	sl, r7
 801eaca:	f1b9 0f00 	cmp.w	r9, #0
 801eace:	dc5a      	bgt.n	801eb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801ead0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801ead4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801ead8:	9b07      	ldr	r3, [sp, #28]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	f340 80b8 	ble.w	801ec50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801eae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eae4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eaf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eaf4:	eef0 6a62 	vmov.f32	s13, s5
 801eaf8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eafc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb0c:	ee16 4a90 	vmov	r4, s13
 801eb10:	eef0 6a43 	vmov.f32	s13, s6
 801eb14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb18:	ee12 2a90 	vmov	r2, s5
 801eb1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb26:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb2a:	ee13 2a10 	vmov	r2, s6
 801eb2e:	931b      	str	r3, [sp, #108]	; 0x6c
 801eb30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb32:	ee16 6a90 	vmov	r6, s13
 801eb36:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb3a:	931c      	str	r3, [sp, #112]	; 0x70
 801eb3c:	9b07      	ldr	r3, [sp, #28]
 801eb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb40:	3b01      	subs	r3, #1
 801eb42:	9307      	str	r3, [sp, #28]
 801eb44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb46:	bf0c      	ite	eq
 801eb48:	4615      	moveq	r5, r2
 801eb4a:	461d      	movne	r5, r3
 801eb4c:	eeb0 3a67 	vmov.f32	s6, s15
 801eb50:	eef0 2a47 	vmov.f32	s5, s14
 801eb54:	e6f4      	b.n	801e940 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801eb56:	f111 0b01 	adds.w	fp, r1, #1
 801eb5a:	d48e      	bmi.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eb5c:	45de      	cmp	lr, fp
 801eb5e:	db8c      	blt.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eb60:	f110 0b01 	adds.w	fp, r0, #1
 801eb64:	d489      	bmi.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eb66:	455b      	cmp	r3, fp
 801eb68:	db87      	blt.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eb6a:	b21b      	sxth	r3, r3
 801eb6c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801eb70:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801eb74:	9300      	str	r3, [sp, #0]
 801eb76:	4642      	mov	r2, r8
 801eb78:	fa0f f38e 	sxth.w	r3, lr
 801eb7c:	4649      	mov	r1, r9
 801eb7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eb80:	f7ff fe4d 	bl	801e81e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801eb84:	e779      	b.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eb86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eb88:	1420      	asrs	r0, r4, #16
 801eb8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801eb8e:	1431      	asrs	r1, r6, #16
 801eb90:	fb03 0101 	mla	r1, r3, r1, r0
 801eb94:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801eb98:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801eb9c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801eba0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801eba4:	8841      	ldrh	r1, [r0, #2]
 801eba6:	f1be 0f00 	cmp.w	lr, #0
 801ebaa:	d00b      	beq.n	801ebc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801ebac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ebb0:	3b01      	subs	r3, #1
 801ebb2:	005b      	lsls	r3, r3, #1
 801ebb4:	3302      	adds	r3, #2
 801ebb6:	eb00 0b03 	add.w	fp, r0, r3
 801ebba:	5ac3      	ldrh	r3, [r0, r3]
 801ebbc:	930a      	str	r3, [sp, #40]	; 0x28
 801ebbe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801ebc2:	930b      	str	r3, [sp, #44]	; 0x2c
 801ebc4:	fb12 f30e 	smulbb	r3, r2, lr
 801ebc8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801ebcc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ebd0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ebd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ebd8:	10db      	asrs	r3, r3, #3
 801ebda:	ea40 000c 	orr.w	r0, r0, ip
 801ebde:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ebe2:	f1ce 0c10 	rsb	ip, lr, #16
 801ebe6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ebea:	ebac 0c02 	sub.w	ip, ip, r2
 801ebee:	ea4b 0101 	orr.w	r1, fp, r1
 801ebf2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ebf6:	4351      	muls	r1, r2
 801ebf8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801ebfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ebfe:	fb0c 1c00 	mla	ip, ip, r0, r1
 801ec02:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801ec06:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ec0a:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801ec0e:	ea4b 0000 	orr.w	r0, fp, r0
 801ec12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec14:	fb03 c000 	mla	r0, r3, r0, ip
 801ec18:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec1a:	0412      	lsls	r2, r2, #16
 801ec1c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ec20:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801ec24:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801ec28:	ea42 0b0b 	orr.w	fp, r2, fp
 801ec2c:	fb03 000b 	mla	r0, r3, fp, r0
 801ec30:	0d43      	lsrs	r3, r0, #21
 801ec32:	0940      	lsrs	r0, r0, #5
 801ec34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ec38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ec3c:	4318      	orrs	r0, r3
 801ec3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec40:	f82a 0b02 	strh.w	r0, [sl], #2
 801ec44:	441c      	add	r4, r3
 801ec46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ec48:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec4c:	441e      	add	r6, r3
 801ec4e:	e73c      	b.n	801eaca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ec50:	b00f      	add	sp, #60	; 0x3c
 801ec52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801ec56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec5a:	b085      	sub	sp, #20
 801ec5c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801ec60:	9102      	str	r1, [sp, #8]
 801ec62:	fb04 7103 	mla	r1, r4, r3, r7
 801ec66:	2c00      	cmp	r4, #0
 801ec68:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801ec6c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801ec70:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801ec74:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801ec78:	f2c0 811b 	blt.w	801eeb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801ec7c:	45a6      	cmp	lr, r4
 801ec7e:	f340 8118 	ble.w	801eeb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801ec82:	2f00      	cmp	r7, #0
 801ec84:	f2c0 8113 	blt.w	801eeae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801ec88:	42bb      	cmp	r3, r7
 801ec8a:	f340 8110 	ble.w	801eeae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801ec8e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801ec92:	1c7a      	adds	r2, r7, #1
 801ec94:	f100 8110 	bmi.w	801eeb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801ec98:	4293      	cmp	r3, r2
 801ec9a:	f340 810d 	ble.w	801eeb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801ec9e:	2e00      	cmp	r6, #0
 801eca0:	f000 810c 	beq.w	801eebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801eca4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801eca8:	3401      	adds	r4, #1
 801ecaa:	f100 810b 	bmi.w	801eec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801ecae:	45a6      	cmp	lr, r4
 801ecb0:	f340 8108 	ble.w	801eec4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801ecb4:	2800      	cmp	r0, #0
 801ecb6:	f000 8108 	beq.w	801eeca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801ecba:	2f00      	cmp	r7, #0
 801ecbc:	f2c0 8100 	blt.w	801eec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801ecc0:	42bb      	cmp	r3, r7
 801ecc2:	f340 80fd 	ble.w	801eec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801ecc6:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801ecca:	3701      	adds	r7, #1
 801eccc:	f100 8100 	bmi.w	801eed0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801ecd0:	42bb      	cmp	r3, r7
 801ecd2:	f340 80fd 	ble.w	801eed0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801ecd6:	2e00      	cmp	r6, #0
 801ecd8:	f000 80fc 	beq.w	801eed4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801ecdc:	3301      	adds	r3, #1
 801ecde:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ece2:	b2b6      	uxth	r6, r6
 801ece4:	b280      	uxth	r0, r0
 801ece6:	fb00 fe06 	mul.w	lr, r0, r6
 801ecea:	0136      	lsls	r6, r6, #4
 801ecec:	eba6 070e 	sub.w	r7, r6, lr
 801ecf0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ecf4:	b2bf      	uxth	r7, r7
 801ecf6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801ecfa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801ecfe:	fb0a f607 	mul.w	r6, sl, r7
 801ed02:	b280      	uxth	r0, r0
 801ed04:	1a1b      	subs	r3, r3, r0
 801ed06:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801ed0a:	b29b      	uxth	r3, r3
 801ed0c:	fb0b 6603 	mla	r6, fp, r3, r6
 801ed10:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ed14:	fb00 6609 	mla	r6, r0, r9, r6
 801ed18:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ed1c:	fb0e 6608 	mla	r6, lr, r8, r6
 801ed20:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ed24:	9600      	str	r6, [sp, #0]
 801ed26:	2e00      	cmp	r6, #0
 801ed28:	f000 80be 	beq.w	801eea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801ed2c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801ed30:	fb0b fc0c 	mul.w	ip, fp, ip
 801ed34:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ed38:	fb0b f505 	mul.w	r5, fp, r5
 801ed3c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ed40:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ed44:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed48:	44dc      	add	ip, fp
 801ed4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed4e:	9501      	str	r5, [sp, #4]
 801ed50:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ed54:	9503      	str	r5, [sp, #12]
 801ed56:	9d01      	ldr	r5, [sp, #4]
 801ed58:	9e02      	ldr	r6, [sp, #8]
 801ed5a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801ed5e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ed62:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801ed66:	fb0a fc0c 	mul.w	ip, sl, ip
 801ed6a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801ed6e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801ed72:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ed76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed7a:	4465      	add	r5, ip
 801ed7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ed80:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ed84:	fb09 fc0c 	mul.w	ip, r9, ip
 801ed88:	fb09 f904 	mul.w	r9, r9, r4
 801ed8c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ed90:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ed94:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801ed98:	fb08 f404 	mul.w	r4, r8, r4
 801ed9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eda0:	fb08 f802 	mul.w	r8, r8, r2
 801eda4:	0a2d      	lsrs	r5, r5, #8
 801eda6:	0a22      	lsrs	r2, r4, #8
 801eda8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801edac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801edb0:	437d      	muls	r5, r7
 801edb2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801edb6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801edba:	4414      	add	r4, r2
 801edbc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801edc0:	fb0a fa01 	mul.w	sl, sl, r1
 801edc4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801edc8:	9a03      	ldr	r2, [sp, #12]
 801edca:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801edce:	fb02 5503 	mla	r5, r2, r3, r5
 801edd2:	0a24      	lsrs	r4, r4, #8
 801edd4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801edd8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801eddc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801ede0:	fb04 540e 	mla	r4, r4, lr, r5
 801ede4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801ede8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801edec:	4461      	add	r1, ip
 801edee:	0a09      	lsrs	r1, r1, #8
 801edf0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801edf4:	fb01 4100 	mla	r1, r1, r0, r4
 801edf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee00:	fb07 f70a 	mul.w	r7, r7, sl
 801ee04:	0a09      	lsrs	r1, r1, #8
 801ee06:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801ee0a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801ee0e:	fb03 7101 	mla	r1, r3, r1, r7
 801ee12:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ee16:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ee1a:	fb0e 1e08 	mla	lr, lr, r8, r1
 801ee1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ee22:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801ee26:	fb00 e101 	mla	r1, r0, r1, lr
 801ee2a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801ee2e:	9a00      	ldr	r2, [sp, #0]
 801ee30:	b287      	uxth	r7, r0
 801ee32:	437a      	muls	r2, r7
 801ee34:	1c53      	adds	r3, r2, #1
 801ee36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee3a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ee3e:	0a09      	lsrs	r1, r1, #8
 801ee40:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801ee44:	4321      	orrs	r1, r4
 801ee46:	0c0a      	lsrs	r2, r1, #16
 801ee48:	8836      	ldrh	r6, [r6, #0]
 801ee4a:	fb12 f207 	smulbb	r2, r2, r7
 801ee4e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801ee52:	b2c8      	uxtb	r0, r1
 801ee54:	1235      	asrs	r5, r6, #8
 801ee56:	fb14 f407 	smulbb	r4, r4, r7
 801ee5a:	fb10 f007 	smulbb	r0, r0, r7
 801ee5e:	b2db      	uxtb	r3, r3
 801ee60:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ee64:	fb05 2503 	mla	r5, r5, r3, r2
 801ee68:	10f2      	asrs	r2, r6, #3
 801ee6a:	00f6      	lsls	r6, r6, #3
 801ee6c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ee70:	b2f6      	uxtb	r6, r6
 801ee72:	fb02 4203 	mla	r2, r2, r3, r4
 801ee76:	fb06 0303 	mla	r3, r6, r3, r0
 801ee7a:	b2ad      	uxth	r5, r5
 801ee7c:	b299      	uxth	r1, r3
 801ee7e:	b294      	uxth	r4, r2
 801ee80:	1c6b      	adds	r3, r5, #1
 801ee82:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ee86:	1c62      	adds	r2, r4, #1
 801ee88:	1c4b      	adds	r3, r1, #1
 801ee8a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ee8e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ee92:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ee96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee9a:	0952      	lsrs	r2, r2, #5
 801ee9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eea0:	432b      	orrs	r3, r5
 801eea2:	4313      	orrs	r3, r2
 801eea4:	9a02      	ldr	r2, [sp, #8]
 801eea6:	8013      	strh	r3, [r2, #0]
 801eea8:	b005      	add	sp, #20
 801eeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeae:	2500      	movs	r5, #0
 801eeb0:	e6ef      	b.n	801ec92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801eeb2:	2100      	movs	r1, #0
 801eeb4:	460d      	mov	r5, r1
 801eeb6:	e6f7      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801eeb8:	2100      	movs	r1, #0
 801eeba:	e6f5      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801eebc:	4631      	mov	r1, r6
 801eebe:	e6f3      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801eec0:	2400      	movs	r4, #0
 801eec2:	e702      	b.n	801ecca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801eec4:	2200      	movs	r2, #0
 801eec6:	4614      	mov	r4, r2
 801eec8:	e70b      	b.n	801ece2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801eeca:	4602      	mov	r2, r0
 801eecc:	4604      	mov	r4, r0
 801eece:	e708      	b.n	801ece2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801eed0:	2200      	movs	r2, #0
 801eed2:	e706      	b.n	801ece2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801eed4:	4632      	mov	r2, r6
 801eed6:	e704      	b.n	801ece2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801eed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eedc:	b09d      	sub	sp, #116	; 0x74
 801eede:	9219      	str	r2, [sp, #100]	; 0x64
 801eee0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eee2:	901b      	str	r0, [sp, #108]	; 0x6c
 801eee4:	9307      	str	r3, [sp, #28]
 801eee6:	6850      	ldr	r0, [r2, #4]
 801eee8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801eeec:	9117      	str	r1, [sp, #92]	; 0x5c
 801eeee:	931a      	str	r3, [sp, #104]	; 0x68
 801eef0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801eef4:	fb00 1303 	mla	r3, r0, r3, r1
 801eef8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801eefc:	6812      	ldr	r2, [r2, #0]
 801eefe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ef02:	930a      	str	r3, [sp, #40]	; 0x28
 801ef04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	9310      	str	r3, [sp, #64]	; 0x40
 801ef0a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801ef0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	dc03      	bgt.n	801ef1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ef16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	f340 8375 	ble.w	801f608 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801ef1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef28:	1e48      	subs	r0, r1, #1
 801ef2a:	1e57      	subs	r7, r2, #1
 801ef2c:	9b07      	ldr	r3, [sp, #28]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	f340 818e 	ble.w	801f250 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801ef34:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ef38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ef3c:	d406      	bmi.n	801ef4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ef3e:	4584      	cmp	ip, r0
 801ef40:	da04      	bge.n	801ef4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	db02      	blt.n	801ef4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ef46:	42bb      	cmp	r3, r7
 801ef48:	f2c0 8183 	blt.w	801f252 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801ef4c:	f11c 0c01 	adds.w	ip, ip, #1
 801ef50:	f100 8173 	bmi.w	801f23a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801ef54:	4561      	cmp	r1, ip
 801ef56:	f2c0 8170 	blt.w	801f23a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801ef5a:	3301      	adds	r3, #1
 801ef5c:	f100 816d 	bmi.w	801f23a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801ef60:	429a      	cmp	r2, r3
 801ef62:	f2c0 816a 	blt.w	801f23a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801ef66:	9b07      	ldr	r3, [sp, #28]
 801ef68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ef6a:	9318      	str	r3, [sp, #96]	; 0x60
 801ef6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	f340 818c 	ble.w	801f28c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801ef74:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ef76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ef78:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ef7c:	1422      	asrs	r2, r4, #16
 801ef7e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ef82:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ef86:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ef8a:	689b      	ldr	r3, [r3, #8]
 801ef8c:	f100 81cd 	bmi.w	801f32a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ef90:	f103 38ff 	add.w	r8, r3, #4294967295
 801ef94:	4542      	cmp	r2, r8
 801ef96:	f280 81c8 	bge.w	801f32a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ef9a:	f1bc 0f00 	cmp.w	ip, #0
 801ef9e:	f2c0 81c4 	blt.w	801f32a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801efa2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801efa6:	45c4      	cmp	ip, r8
 801efa8:	f280 81bf 	bge.w	801f32a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801efac:	b21b      	sxth	r3, r3
 801efae:	fb0c 2203 	mla	r2, ip, r3, r2
 801efb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801efb4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801efb8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801efbc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801efc0:	2800      	cmp	r0, #0
 801efc2:	f000 81a9 	beq.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801efc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801efca:	950c      	str	r5, [sp, #48]	; 0x30
 801efcc:	0e2d      	lsrs	r5, r5, #24
 801efce:	9513      	str	r5, [sp, #76]	; 0x4c
 801efd0:	b181      	cbz	r1, 801eff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801efd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801efd6:	3b01      	subs	r3, #1
 801efd8:	009b      	lsls	r3, r3, #2
 801efda:	3304      	adds	r3, #4
 801efdc:	eb08 0c03 	add.w	ip, r8, r3
 801efe0:	f858 3003 	ldr.w	r3, [r8, r3]
 801efe4:	9308      	str	r3, [sp, #32]
 801efe6:	0e1b      	lsrs	r3, r3, #24
 801efe8:	9311      	str	r3, [sp, #68]	; 0x44
 801efea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801efee:	930d      	str	r3, [sp, #52]	; 0x34
 801eff0:	0e1b      	lsrs	r3, r3, #24
 801eff2:	9314      	str	r3, [sp, #80]	; 0x50
 801eff4:	b280      	uxth	r0, r0
 801eff6:	b289      	uxth	r1, r1
 801eff8:	fb00 f901 	mul.w	r9, r0, r1
 801effc:	0100      	lsls	r0, r0, #4
 801effe:	eba0 0809 	sub.w	r8, r0, r9
 801f002:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f006:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f008:	fa1f f888 	uxth.w	r8, r8
 801f00c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f010:	fb08 f000 	mul.w	r0, r8, r0
 801f014:	b289      	uxth	r1, r1
 801f016:	1a5b      	subs	r3, r3, r1
 801f018:	b29b      	uxth	r3, r3
 801f01a:	fb03 000e 	mla	r0, r3, lr, r0
 801f01e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f020:	fb01 0005 	mla	r0, r1, r5, r0
 801f024:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f026:	fb09 0005 	mla	r0, r9, r5, r0
 801f02a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f02e:	2800      	cmp	r0, #0
 801f030:	f000 80fa 	beq.w	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f034:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f038:	d01b      	beq.n	801f072 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f03a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801f03e:	fb0e fa0a 	mul.w	sl, lr, sl
 801f042:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f046:	fb0e fe02 	mul.w	lr, lr, r2
 801f04a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f04e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f052:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f056:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f05a:	4452      	add	r2, sl
 801f05c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f060:	0a12      	lsrs	r2, r2, #8
 801f062:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f066:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f06a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f06e:	ea42 020c 	orr.w	r2, r2, ip
 801f072:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f074:	2dff      	cmp	r5, #255	; 0xff
 801f076:	d021      	beq.n	801f0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801f078:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f07a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f07e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f080:	fb05 fb0b 	mul.w	fp, r5, fp
 801f084:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f086:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f08a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f08e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f090:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f094:	fb05 fa0a 	mul.w	sl, r5, sl
 801f098:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f09c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f0a0:	44de      	add	lr, fp
 801f0a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f0a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f0b6:	ea4e 050a 	orr.w	r5, lr, sl
 801f0ba:	950c      	str	r5, [sp, #48]	; 0x30
 801f0bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f0be:	2dff      	cmp	r5, #255	; 0xff
 801f0c0:	d021      	beq.n	801f106 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f0c2:	9d08      	ldr	r5, [sp, #32]
 801f0c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f0c8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f0ca:	fb05 fb0b 	mul.w	fp, r5, fp
 801f0ce:	9d08      	ldr	r5, [sp, #32]
 801f0d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f0d4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f0d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f0da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0de:	fb05 fa0a 	mul.w	sl, r5, sl
 801f0e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f0e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f0ea:	44de      	add	lr, fp
 801f0ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f0f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f0fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f100:	ea4e 050a 	orr.w	r5, lr, sl
 801f104:	9508      	str	r5, [sp, #32]
 801f106:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f108:	2dff      	cmp	r5, #255	; 0xff
 801f10a:	d021      	beq.n	801f150 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f10c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f10e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f112:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f114:	fb05 fb0b 	mul.w	fp, r5, fp
 801f118:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f11a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f11e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f122:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f124:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f128:	fb05 fa0a 	mul.w	sl, r5, sl
 801f12c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f130:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f134:	44de      	add	lr, fp
 801f136:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f13a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f13e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f142:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f146:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f14a:	ea4e 050a 	orr.w	r5, lr, sl
 801f14e:	950d      	str	r5, [sp, #52]	; 0x34
 801f150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f152:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f156:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f15a:	fb08 fc0c 	mul.w	ip, r8, ip
 801f15e:	fb03 cc0e 	mla	ip, r3, lr, ip
 801f162:	9d08      	ldr	r5, [sp, #32]
 801f164:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f168:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801f16c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f170:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f172:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801f176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f178:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f17c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801f180:	fb08 f80e 	mul.w	r8, r8, lr
 801f184:	fb03 8202 	mla	r2, r3, r2, r8
 801f188:	9b08      	ldr	r3, [sp, #32]
 801f18a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f18e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801f192:	fb01 220a 	mla	r2, r1, sl, r2
 801f196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f19c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801f1a0:	fb09 2901 	mla	r9, r9, r1, r2
 801f1a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f1aa:	4342      	muls	r2, r0
 801f1ac:	1c50      	adds	r0, r2, #1
 801f1ae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f1b2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f1b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f1ba:	ea4c 0c09 	orr.w	ip, ip, r9
 801f1be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f1c0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801f1c4:	883b      	ldrh	r3, [r7, #0]
 801f1c6:	fb12 f205 	smulbb	r2, r2, r5
 801f1ca:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801f1ce:	fa5f fc8c 	uxtb.w	ip, ip
 801f1d2:	1219      	asrs	r1, r3, #8
 801f1d4:	fb1c fc05 	smulbb	ip, ip, r5
 801f1d8:	b2c0      	uxtb	r0, r0
 801f1da:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f1de:	fb01 2100 	mla	r1, r1, r0, r2
 801f1e2:	10da      	asrs	r2, r3, #3
 801f1e4:	00db      	lsls	r3, r3, #3
 801f1e6:	fb1e fe05 	smulbb	lr, lr, r5
 801f1ea:	b2db      	uxtb	r3, r3
 801f1ec:	fb03 c300 	mla	r3, r3, r0, ip
 801f1f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f1f4:	b289      	uxth	r1, r1
 801f1f6:	fb02 e200 	mla	r2, r2, r0, lr
 801f1fa:	fa1f fc83 	uxth.w	ip, r3
 801f1fe:	1c4b      	adds	r3, r1, #1
 801f200:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f204:	f10c 0301 	add.w	r3, ip, #1
 801f208:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801f20c:	b292      	uxth	r2, r2
 801f20e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801f212:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f216:	430b      	orrs	r3, r1
 801f218:	1c51      	adds	r1, r2, #1
 801f21a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f21e:	0952      	lsrs	r2, r2, #5
 801f220:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f224:	4313      	orrs	r3, r2
 801f226:	803b      	strh	r3, [r7, #0]
 801f228:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f22a:	3702      	adds	r7, #2
 801f22c:	441c      	add	r4, r3
 801f22e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f230:	441e      	add	r6, r3
 801f232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f234:	3b01      	subs	r3, #1
 801f236:	9318      	str	r3, [sp, #96]	; 0x60
 801f238:	e698      	b.n	801ef6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f23a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f23c:	441c      	add	r4, r3
 801f23e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f240:	441e      	add	r6, r3
 801f242:	9b07      	ldr	r3, [sp, #28]
 801f244:	3b01      	subs	r3, #1
 801f246:	9307      	str	r3, [sp, #28]
 801f248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f24a:	3302      	adds	r3, #2
 801f24c:	930a      	str	r3, [sp, #40]	; 0x28
 801f24e:	e66d      	b.n	801ef2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f250:	d023      	beq.n	801f29a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801f252:	9b07      	ldr	r3, [sp, #28]
 801f254:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f256:	3b01      	subs	r3, #1
 801f258:	fb00 4003 	mla	r0, r0, r3, r4
 801f25c:	1400      	asrs	r0, r0, #16
 801f25e:	f53f ae82 	bmi.w	801ef66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f262:	3901      	subs	r1, #1
 801f264:	4288      	cmp	r0, r1
 801f266:	f6bf ae7e 	bge.w	801ef66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f26a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f26c:	fb01 6303 	mla	r3, r1, r3, r6
 801f270:	141b      	asrs	r3, r3, #16
 801f272:	f53f ae78 	bmi.w	801ef66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f276:	3a01      	subs	r2, #1
 801f278:	4293      	cmp	r3, r2
 801f27a:	f6bf ae74 	bge.w	801ef66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f27e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f282:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801f286:	f1bb 0f00 	cmp.w	fp, #0
 801f28a:	dc6c      	bgt.n	801f366 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801f28c:	9b07      	ldr	r3, [sp, #28]
 801f28e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f294:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801f298:	930a      	str	r3, [sp, #40]	; 0x28
 801f29a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	f340 81b3 	ble.w	801f608 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801f2a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f2b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2b6:	eef0 6a62 	vmov.f32	s13, s5
 801f2ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2ce:	ee16 4a90 	vmov	r4, s13
 801f2d2:	eef0 6a43 	vmov.f32	s13, s6
 801f2d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2da:	ee12 2a90 	vmov	r2, s5
 801f2de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ec:	ee13 2a10 	vmov	r2, s6
 801f2f0:	9329      	str	r3, [sp, #164]	; 0xa4
 801f2f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2f4:	ee16 6a90 	vmov	r6, s13
 801f2f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2fc:	932a      	str	r3, [sp, #168]	; 0xa8
 801f2fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f302:	3b01      	subs	r3, #1
 801f304:	9317      	str	r3, [sp, #92]	; 0x5c
 801f306:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f308:	bf08      	it	eq
 801f30a:	4613      	moveq	r3, r2
 801f30c:	eeb0 3a67 	vmov.f32	s6, s15
 801f310:	9307      	str	r3, [sp, #28]
 801f312:	eef0 2a47 	vmov.f32	s5, s14
 801f316:	e5fb      	b.n	801ef10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f318:	2900      	cmp	r1, #0
 801f31a:	f43f ae6b 	beq.w	801eff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f31e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f322:	9308      	str	r3, [sp, #32]
 801f324:	0e1b      	lsrs	r3, r3, #24
 801f326:	9311      	str	r3, [sp, #68]	; 0x44
 801f328:	e664      	b.n	801eff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f32a:	f112 0801 	adds.w	r8, r2, #1
 801f32e:	f53f af7b 	bmi.w	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f332:	4543      	cmp	r3, r8
 801f334:	f6ff af78 	blt.w	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f338:	f11c 0801 	adds.w	r8, ip, #1
 801f33c:	f53f af74 	bmi.w	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f340:	45c6      	cmp	lr, r8
 801f342:	f6ff af71 	blt.w	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f346:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f348:	9201      	str	r2, [sp, #4]
 801f34a:	fa0f f28e 	sxth.w	r2, lr
 801f34e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801f352:	e9cd c002 	strd	ip, r0, [sp, #8]
 801f356:	9200      	str	r2, [sp, #0]
 801f358:	b21b      	sxth	r3, r3
 801f35a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f35c:	4639      	mov	r1, r7
 801f35e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f360:	f7ff fc79 	bl	801ec56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801f364:	e760      	b.n	801f228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f368:	1427      	asrs	r7, r4, #16
 801f36a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f36e:	1433      	asrs	r3, r6, #16
 801f370:	fb01 7303 	mla	r3, r1, r3, r7
 801f374:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f376:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f37a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801f37e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f382:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f386:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f38a:	2a00      	cmp	r2, #0
 801f38c:	f000 8133 	beq.w	801f5f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801f390:	687d      	ldr	r5, [r7, #4]
 801f392:	950e      	str	r5, [sp, #56]	; 0x38
 801f394:	0e2d      	lsrs	r5, r5, #24
 801f396:	9515      	str	r5, [sp, #84]	; 0x54
 801f398:	b178      	cbz	r0, 801f3ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801f39a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801f39e:	3901      	subs	r1, #1
 801f3a0:	0089      	lsls	r1, r1, #2
 801f3a2:	3104      	adds	r1, #4
 801f3a4:	eb07 0e01 	add.w	lr, r7, r1
 801f3a8:	5879      	ldr	r1, [r7, r1]
 801f3aa:	9109      	str	r1, [sp, #36]	; 0x24
 801f3ac:	0e09      	lsrs	r1, r1, #24
 801f3ae:	9112      	str	r1, [sp, #72]	; 0x48
 801f3b0:	f8de 1004 	ldr.w	r1, [lr, #4]
 801f3b4:	910f      	str	r1, [sp, #60]	; 0x3c
 801f3b6:	0e09      	lsrs	r1, r1, #24
 801f3b8:	9116      	str	r1, [sp, #88]	; 0x58
 801f3ba:	b292      	uxth	r2, r2
 801f3bc:	b280      	uxth	r0, r0
 801f3be:	fb02 f800 	mul.w	r8, r2, r0
 801f3c2:	0112      	lsls	r2, r2, #4
 801f3c4:	eba2 0e08 	sub.w	lr, r2, r8
 801f3c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f3ca:	fa1f fe8e 	uxth.w	lr, lr
 801f3ce:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801f3d2:	fb0e f101 	mul.w	r1, lr, r1
 801f3d6:	b280      	uxth	r0, r0
 801f3d8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f3dc:	1a12      	subs	r2, r2, r0
 801f3de:	b292      	uxth	r2, r2
 801f3e0:	fb02 110c 	mla	r1, r2, ip, r1
 801f3e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f3e6:	fb00 1105 	mla	r1, r0, r5, r1
 801f3ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f3ec:	fb08 1105 	mla	r1, r8, r5, r1
 801f3f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f3f4:	2900      	cmp	r1, #0
 801f3f6:	f000 80f5 	beq.w	801f5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801f3fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f3fe:	d019      	beq.n	801f434 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801f400:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f404:	fb0c fa0a 	mul.w	sl, ip, sl
 801f408:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f40c:	fb0c fc03 	mul.w	ip, ip, r3
 801f410:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f414:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f418:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f41c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f420:	4453      	add	r3, sl
 801f422:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f426:	0a1b      	lsrs	r3, r3, #8
 801f428:	0a3f      	lsrs	r7, r7, #8
 801f42a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f42e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f432:	433b      	orrs	r3, r7
 801f434:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f436:	2dff      	cmp	r5, #255	; 0xff
 801f438:	d020      	beq.n	801f47c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801f43a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f43c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801f440:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f442:	436f      	muls	r7, r5
 801f444:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f446:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f44a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f44e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f450:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f454:	fb05 fa0a 	mul.w	sl, r5, sl
 801f458:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f45c:	44bc      	add	ip, r7
 801f45e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f462:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f466:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f46a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f46e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f472:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f476:	ea4c 050a 	orr.w	r5, ip, sl
 801f47a:	950e      	str	r5, [sp, #56]	; 0x38
 801f47c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f47e:	2dff      	cmp	r5, #255	; 0xff
 801f480:	d020      	beq.n	801f4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801f482:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f484:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801f488:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f48a:	436f      	muls	r7, r5
 801f48c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f48e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f492:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f496:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f498:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f49c:	fb05 fa0a 	mul.w	sl, r5, sl
 801f4a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4a4:	44bc      	add	ip, r7
 801f4a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f4aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f4ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f4be:	ea4c 050a 	orr.w	r5, ip, sl
 801f4c2:	9509      	str	r5, [sp, #36]	; 0x24
 801f4c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4c6:	2dff      	cmp	r5, #255	; 0xff
 801f4c8:	d020      	beq.n	801f50c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801f4ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f4cc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801f4d0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4d2:	436f      	muls	r7, r5
 801f4d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f4d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f4da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801f4de:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f4e4:	fb05 fa0a 	mul.w	sl, r5, sl
 801f4e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4ec:	44bc      	add	ip, r7
 801f4ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f4f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f4f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f502:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f506:	ea4c 050a 	orr.w	r5, ip, sl
 801f50a:	950f      	str	r5, [sp, #60]	; 0x3c
 801f50c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f50e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f512:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801f516:	fb0e f707 	mul.w	r7, lr, r7
 801f51a:	fb02 770c 	mla	r7, r2, ip, r7
 801f51e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f524:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f528:	fb00 770c 	mla	r7, r0, ip, r7
 801f52c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f52e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f532:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f534:	fb08 770c 	mla	r7, r8, ip, r7
 801f538:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801f53c:	fb0e fe0c 	mul.w	lr, lr, ip
 801f540:	fb02 e303 	mla	r3, r2, r3, lr
 801f544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f546:	0a3f      	lsrs	r7, r7, #8
 801f548:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f54c:	fb00 330a 	mla	r3, r0, sl, r3
 801f550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f552:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f556:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f55a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801f55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f560:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f564:	4359      	muls	r1, r3
 801f566:	1c4b      	adds	r3, r1, #1
 801f568:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f56c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f570:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f574:	ea47 070c 	orr.w	r7, r7, ip
 801f578:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f57a:	0c3b      	lsrs	r3, r7, #16
 801f57c:	f8b9 0000 	ldrh.w	r0, [r9]
 801f580:	fb13 f305 	smulbb	r3, r3, r5
 801f584:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801f588:	b2ff      	uxtb	r7, r7
 801f58a:	1202      	asrs	r2, r0, #8
 801f58c:	fb17 f705 	smulbb	r7, r7, r5
 801f590:	b2c9      	uxtb	r1, r1
 801f592:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f596:	fb02 3201 	mla	r2, r2, r1, r3
 801f59a:	10c3      	asrs	r3, r0, #3
 801f59c:	00c0      	lsls	r0, r0, #3
 801f59e:	fb1c fc05 	smulbb	ip, ip, r5
 801f5a2:	b2c0      	uxtb	r0, r0
 801f5a4:	fb00 7001 	mla	r0, r0, r1, r7
 801f5a8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f5ac:	fb03 c301 	mla	r3, r3, r1, ip
 801f5b0:	b292      	uxth	r2, r2
 801f5b2:	b280      	uxth	r0, r0
 801f5b4:	1c51      	adds	r1, r2, #1
 801f5b6:	f100 0c01 	add.w	ip, r0, #1
 801f5ba:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f5be:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801f5c2:	b29b      	uxth	r3, r3
 801f5c4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f5c8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801f5cc:	ea4c 0202 	orr.w	r2, ip, r2
 801f5d0:	f103 0c01 	add.w	ip, r3, #1
 801f5d4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f5d8:	095b      	lsrs	r3, r3, #5
 801f5da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f5de:	431a      	orrs	r2, r3
 801f5e0:	f8a9 2000 	strh.w	r2, [r9]
 801f5e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f5e6:	f109 0902 	add.w	r9, r9, #2
 801f5ea:	441c      	add	r4, r3
 801f5ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f5ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f5f2:	441e      	add	r6, r3
 801f5f4:	e647      	b.n	801f286 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	f43f aedf 	beq.w	801f3ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801f5fc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801f600:	9109      	str	r1, [sp, #36]	; 0x24
 801f602:	0e09      	lsrs	r1, r1, #24
 801f604:	9112      	str	r1, [sp, #72]	; 0x48
 801f606:	e6d8      	b.n	801f3ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801f608:	b01d      	add	sp, #116	; 0x74
 801f60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f60e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801f60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f612:	b085      	sub	sp, #20
 801f614:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801f618:	9102      	str	r1, [sp, #8]
 801f61a:	fb04 7103 	mla	r1, r4, r3, r7
 801f61e:	2c00      	cmp	r4, #0
 801f620:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801f624:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f628:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f62c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801f630:	f2c0 810c 	blt.w	801f84c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801f634:	45a6      	cmp	lr, r4
 801f636:	f340 8109 	ble.w	801f84c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801f63a:	2f00      	cmp	r7, #0
 801f63c:	f2c0 8104 	blt.w	801f848 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801f640:	42bb      	cmp	r3, r7
 801f642:	f340 8101 	ble.w	801f848 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801f646:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801f64a:	1c7a      	adds	r2, r7, #1
 801f64c:	f100 8101 	bmi.w	801f852 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801f650:	4293      	cmp	r3, r2
 801f652:	f340 80fe 	ble.w	801f852 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801f656:	2e00      	cmp	r6, #0
 801f658:	f000 80fd 	beq.w	801f856 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 801f65c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f660:	3401      	adds	r4, #1
 801f662:	f100 80fc 	bmi.w	801f85e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801f666:	45a6      	cmp	lr, r4
 801f668:	f340 80f9 	ble.w	801f85e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801f66c:	2800      	cmp	r0, #0
 801f66e:	f000 80f9 	beq.w	801f864 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 801f672:	2f00      	cmp	r7, #0
 801f674:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 801f678:	f2c0 80ef 	blt.w	801f85a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801f67c:	42bb      	cmp	r3, r7
 801f67e:	f340 80ec 	ble.w	801f85a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801f682:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801f686:	3701      	adds	r7, #1
 801f688:	f100 80ef 	bmi.w	801f86a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801f68c:	42bb      	cmp	r3, r7
 801f68e:	f340 80ec 	ble.w	801f86a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801f692:	2e00      	cmp	r6, #0
 801f694:	f000 80eb 	beq.w	801f86e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 801f698:	6852      	ldr	r2, [r2, #4]
 801f69a:	b2b6      	uxth	r6, r6
 801f69c:	b280      	uxth	r0, r0
 801f69e:	fb00 fe06 	mul.w	lr, r0, r6
 801f6a2:	0136      	lsls	r6, r6, #4
 801f6a4:	eba6 070e 	sub.w	r7, r6, lr
 801f6a8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f6ac:	b2bf      	uxth	r7, r7
 801f6ae:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801f6b2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f6b6:	fb07 f60a 	mul.w	r6, r7, sl
 801f6ba:	b280      	uxth	r0, r0
 801f6bc:	1a1b      	subs	r3, r3, r0
 801f6be:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801f6c2:	b29b      	uxth	r3, r3
 801f6c4:	fb0b 6603 	mla	r6, fp, r3, r6
 801f6c8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f6cc:	fb00 6609 	mla	r6, r0, r9, r6
 801f6d0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f6d4:	fb0e 6608 	mla	r6, lr, r8, r6
 801f6d8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f6dc:	9600      	str	r6, [sp, #0]
 801f6de:	2e00      	cmp	r6, #0
 801f6e0:	f000 80af 	beq.w	801f842 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 801f6e4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f6e8:	fb0b fc0c 	mul.w	ip, fp, ip
 801f6ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f6f0:	fb0b f505 	mul.w	r5, fp, r5
 801f6f4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f6f8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f6fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f700:	44dc      	add	ip, fp
 801f702:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f706:	9501      	str	r5, [sp, #4]
 801f708:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f70c:	9503      	str	r5, [sp, #12]
 801f70e:	9d01      	ldr	r5, [sp, #4]
 801f710:	9e02      	ldr	r6, [sp, #8]
 801f712:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f716:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f71a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801f71e:	fb0a fc0c 	mul.w	ip, sl, ip
 801f722:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f726:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f72a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f72e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f732:	4465      	add	r5, ip
 801f734:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f738:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f73c:	fb09 fc0c 	mul.w	ip, r9, ip
 801f740:	fb09 f904 	mul.w	r9, r9, r4
 801f744:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f748:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f74c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801f750:	fb08 f404 	mul.w	r4, r8, r4
 801f754:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f758:	fb08 f802 	mul.w	r8, r8, r2
 801f75c:	0a2d      	lsrs	r5, r5, #8
 801f75e:	0a22      	lsrs	r2, r4, #8
 801f760:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f764:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f768:	437d      	muls	r5, r7
 801f76a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f76e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f772:	4414      	add	r4, r2
 801f774:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f778:	fb0a fa01 	mul.w	sl, sl, r1
 801f77c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f780:	9a03      	ldr	r2, [sp, #12]
 801f782:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801f786:	fb02 5503 	mla	r5, r2, r3, r5
 801f78a:	0a24      	lsrs	r4, r4, #8
 801f78c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f790:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f794:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f798:	fb04 540e 	mla	r4, r4, lr, r5
 801f79c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f7a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f7a4:	4461      	add	r1, ip
 801f7a6:	0a09      	lsrs	r1, r1, #8
 801f7a8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f7ac:	fb01 4100 	mla	r1, r1, r0, r4
 801f7b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7b8:	fb07 f70a 	mul.w	r7, r7, sl
 801f7bc:	0a09      	lsrs	r1, r1, #8
 801f7be:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801f7c2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801f7c6:	fb03 7101 	mla	r1, r3, r1, r7
 801f7ca:	9b00      	ldr	r3, [sp, #0]
 801f7cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f7d0:	43da      	mvns	r2, r3
 801f7d2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f7d6:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f7da:	8836      	ldrh	r6, [r6, #0]
 801f7dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7e0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801f7e4:	fb00 e101 	mla	r1, r0, r1, lr
 801f7e8:	1233      	asrs	r3, r6, #8
 801f7ea:	b2d2      	uxtb	r2, r2
 801f7ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f7f0:	4353      	muls	r3, r2
 801f7f2:	10f0      	asrs	r0, r6, #3
 801f7f4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f7f8:	4350      	muls	r0, r2
 801f7fa:	0a09      	lsrs	r1, r1, #8
 801f7fc:	00f6      	lsls	r6, r6, #3
 801f7fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f802:	b2f6      	uxtb	r6, r6
 801f804:	4321      	orrs	r1, r4
 801f806:	4356      	muls	r6, r2
 801f808:	1c5a      	adds	r2, r3, #1
 801f80a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f80e:	0c0b      	lsrs	r3, r1, #16
 801f810:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f814:	1c42      	adds	r2, r0, #1
 801f816:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f81a:	0a0a      	lsrs	r2, r1, #8
 801f81c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f820:	021b      	lsls	r3, r3, #8
 801f822:	00d2      	lsls	r2, r2, #3
 801f824:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f828:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f82c:	4313      	orrs	r3, r2
 801f82e:	1c72      	adds	r2, r6, #1
 801f830:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f834:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 801f838:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801f83c:	4319      	orrs	r1, r3
 801f83e:	9b02      	ldr	r3, [sp, #8]
 801f840:	8019      	strh	r1, [r3, #0]
 801f842:	b005      	add	sp, #20
 801f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f848:	2500      	movs	r5, #0
 801f84a:	e6fe      	b.n	801f64a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 801f84c:	2100      	movs	r1, #0
 801f84e:	460d      	mov	r5, r1
 801f850:	e706      	b.n	801f660 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f852:	2100      	movs	r1, #0
 801f854:	e704      	b.n	801f660 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f856:	4631      	mov	r1, r6
 801f858:	e702      	b.n	801f660 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f85a:	2400      	movs	r4, #0
 801f85c:	e713      	b.n	801f686 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 801f85e:	2200      	movs	r2, #0
 801f860:	4614      	mov	r4, r2
 801f862:	e71a      	b.n	801f69a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f864:	4602      	mov	r2, r0
 801f866:	4604      	mov	r4, r0
 801f868:	e717      	b.n	801f69a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f86a:	2200      	movs	r2, #0
 801f86c:	e715      	b.n	801f69a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f86e:	4632      	mov	r2, r6
 801f870:	e713      	b.n	801f69a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0801f874 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f878:	b09b      	sub	sp, #108	; 0x6c
 801f87a:	9218      	str	r2, [sp, #96]	; 0x60
 801f87c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f87e:	9019      	str	r0, [sp, #100]	; 0x64
 801f880:	6850      	ldr	r0, [r2, #4]
 801f882:	9116      	str	r1, [sp, #88]	; 0x58
 801f884:	9307      	str	r3, [sp, #28]
 801f886:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f88a:	fb00 1303 	mla	r3, r0, r3, r1
 801f88e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801f892:	6812      	ldr	r2, [r2, #0]
 801f894:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f898:	930a      	str	r3, [sp, #40]	; 0x28
 801f89a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f8a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	dc03      	bgt.n	801f8ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f8a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	f340 8387 	ble.w	801ffbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801f8ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f8b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f8b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f8b8:	1e48      	subs	r0, r1, #1
 801f8ba:	1e57      	subs	r7, r2, #1
 801f8bc:	9b07      	ldr	r3, [sp, #28]
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	f340 8166 	ble.w	801fb90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f8c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f8c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f8cc:	d406      	bmi.n	801f8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8ce:	4584      	cmp	ip, r0
 801f8d0:	da04      	bge.n	801f8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	db02      	blt.n	801f8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8d6:	42bb      	cmp	r3, r7
 801f8d8:	f2c0 815b 	blt.w	801fb92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f8dc:	f11c 0c01 	adds.w	ip, ip, #1
 801f8e0:	f100 814b 	bmi.w	801fb7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f8e4:	4561      	cmp	r1, ip
 801f8e6:	f2c0 8148 	blt.w	801fb7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f8ea:	3301      	adds	r3, #1
 801f8ec:	f100 8145 	bmi.w	801fb7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f8f0:	429a      	cmp	r2, r3
 801f8f2:	f2c0 8142 	blt.w	801fb7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f8f6:	9b07      	ldr	r3, [sp, #28]
 801f8f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f8fa:	9317      	str	r3, [sp, #92]	; 0x5c
 801f8fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	f340 8165 	ble.w	801fbce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801f904:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f906:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f908:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f90c:	1422      	asrs	r2, r4, #16
 801f90e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f912:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f916:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f91a:	689b      	ldr	r3, [r3, #8]
 801f91c:	f100 81d5 	bmi.w	801fcca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f920:	f103 38ff 	add.w	r8, r3, #4294967295
 801f924:	4542      	cmp	r2, r8
 801f926:	f280 81d0 	bge.w	801fcca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f92a:	f1bc 0f00 	cmp.w	ip, #0
 801f92e:	f2c0 81cc 	blt.w	801fcca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f932:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f936:	45c4      	cmp	ip, r8
 801f938:	f280 81c7 	bge.w	801fcca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f93c:	b21b      	sxth	r3, r3
 801f93e:	fb0c 2203 	mla	r2, ip, r3, r2
 801f942:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f944:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801f948:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f94c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f950:	2900      	cmp	r1, #0
 801f952:	f000 8182 	beq.w	801fc5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801f956:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f95a:	950b      	str	r5, [sp, #44]	; 0x2c
 801f95c:	0e2d      	lsrs	r5, r5, #24
 801f95e:	9512      	str	r5, [sp, #72]	; 0x48
 801f960:	b180      	cbz	r0, 801f984 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801f962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f966:	3b01      	subs	r3, #1
 801f968:	009b      	lsls	r3, r3, #2
 801f96a:	3304      	adds	r3, #4
 801f96c:	eb08 0c03 	add.w	ip, r8, r3
 801f970:	f858 3003 	ldr.w	r3, [r8, r3]
 801f974:	9308      	str	r3, [sp, #32]
 801f976:	0e1b      	lsrs	r3, r3, #24
 801f978:	9310      	str	r3, [sp, #64]	; 0x40
 801f97a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f97e:	930c      	str	r3, [sp, #48]	; 0x30
 801f980:	0e1b      	lsrs	r3, r3, #24
 801f982:	9313      	str	r3, [sp, #76]	; 0x4c
 801f984:	b289      	uxth	r1, r1
 801f986:	b280      	uxth	r0, r0
 801f988:	fb01 f900 	mul.w	r9, r1, r0
 801f98c:	0109      	lsls	r1, r1, #4
 801f98e:	eba1 0809 	sub.w	r8, r1, r9
 801f992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f994:	fa1f f888 	uxth.w	r8, r8
 801f998:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f99c:	fb08 f303 	mul.w	r3, r8, r3
 801f9a0:	b280      	uxth	r0, r0
 801f9a2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f9a6:	1a09      	subs	r1, r1, r0
 801f9a8:	b289      	uxth	r1, r1
 801f9aa:	fb01 330e 	mla	r3, r1, lr, r3
 801f9ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f9b0:	fb00 3305 	mla	r3, r0, r5, r3
 801f9b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f9b6:	fb09 3305 	mla	r3, r9, r5, r3
 801f9ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	f000 80d2 	beq.w	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f9c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f9c8:	d01b      	beq.n	801fa02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 801f9ca:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801f9ce:	fb0e fa0a 	mul.w	sl, lr, sl
 801f9d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f9d6:	fb0e fe02 	mul.w	lr, lr, r2
 801f9da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f9de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f9e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f9e6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f9ea:	4452      	add	r2, sl
 801f9ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f9f0:	0a12      	lsrs	r2, r2, #8
 801f9f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f9fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f9fe:	ea42 020c 	orr.w	r2, r2, ip
 801fa02:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fa04:	2dff      	cmp	r5, #255	; 0xff
 801fa06:	d021      	beq.n	801fa4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801fa08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fa0a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fa0e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fa10:	fb05 fb0b 	mul.w	fp, r5, fp
 801fa14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fa16:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fa1a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fa1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fa20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa24:	fb05 fa0a 	mul.w	sl, r5, sl
 801fa28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fa2c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fa30:	44de      	add	lr, fp
 801fa32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fa36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fa46:	ea4e 050a 	orr.w	r5, lr, sl
 801fa4a:	950b      	str	r5, [sp, #44]	; 0x2c
 801fa4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fa4e:	2dff      	cmp	r5, #255	; 0xff
 801fa50:	d021      	beq.n	801fa96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801fa52:	9d08      	ldr	r5, [sp, #32]
 801fa54:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fa58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fa5a:	fb05 fb0b 	mul.w	fp, r5, fp
 801fa5e:	9d08      	ldr	r5, [sp, #32]
 801fa60:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801fa64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fa66:	fb05 fa0e 	mul.w	sl, r5, lr
 801fa6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fa6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fa76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fa7a:	44de      	add	lr, fp
 801fa7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fa80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fa8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fa90:	ea4e 050a 	orr.w	r5, lr, sl
 801fa94:	9508      	str	r5, [sp, #32]
 801fa96:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fa98:	2dff      	cmp	r5, #255	; 0xff
 801fa9a:	d021      	beq.n	801fae0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801fa9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fa9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801faa2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801faa4:	fb05 fb0b 	mul.w	fp, r5, fp
 801faa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801faaa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801faae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fab2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fab4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fab8:	fb05 fa0a 	mul.w	sl, r5, sl
 801fabc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fac0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fac4:	44de      	add	lr, fp
 801fac6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801faca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801face:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fad2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fad6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fada:	ea4e 050a 	orr.w	r5, lr, sl
 801fade:	950c      	str	r5, [sp, #48]	; 0x30
 801fae0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fae2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fae6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801faea:	fb08 fc0c 	mul.w	ip, r8, ip
 801faee:	fb01 cc0e 	mla	ip, r1, lr, ip
 801faf2:	9d08      	ldr	r5, [sp, #32]
 801faf4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801faf8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fafc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fb00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb02:	2bff      	cmp	r3, #255	; 0xff
 801fb04:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fb08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fb0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fb0e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801fb12:	fb08 f80e 	mul.w	r8, r8, lr
 801fb16:	fb01 8202 	mla	r2, r1, r2, r8
 801fb1a:	9908      	ldr	r1, [sp, #32]
 801fb1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb20:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801fb24:	fb00 220a 	mla	r2, r0, sl, r2
 801fb28:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fb2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb2e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801fb32:	fb09 2900 	mla	r9, r9, r0, r2
 801fb36:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fb3a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fb3e:	ea4c 0c09 	orr.w	ip, ip, r9
 801fb42:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801fb46:	f040 8091 	bne.w	801fc6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801fb4a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801fb4e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801fb52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb56:	f022 0207 	bic.w	r2, r2, #7
 801fb5a:	431a      	orrs	r2, r3
 801fb5c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801fb60:	ea4c 0c02 	orr.w	ip, ip, r2
 801fb64:	f8a7 c000 	strh.w	ip, [r7]
 801fb68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fb6a:	3702      	adds	r7, #2
 801fb6c:	441c      	add	r4, r3
 801fb6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fb70:	441e      	add	r6, r3
 801fb72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb74:	3b01      	subs	r3, #1
 801fb76:	9317      	str	r3, [sp, #92]	; 0x5c
 801fb78:	e6c0      	b.n	801f8fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801fb7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fb7c:	441c      	add	r4, r3
 801fb7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fb80:	441e      	add	r6, r3
 801fb82:	9b07      	ldr	r3, [sp, #28]
 801fb84:	3b01      	subs	r3, #1
 801fb86:	9307      	str	r3, [sp, #28]
 801fb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb8a:	3302      	adds	r3, #2
 801fb8c:	930a      	str	r3, [sp, #40]	; 0x28
 801fb8e:	e695      	b.n	801f8bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fb90:	d024      	beq.n	801fbdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fb92:	9b07      	ldr	r3, [sp, #28]
 801fb94:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fb96:	3b01      	subs	r3, #1
 801fb98:	fb00 4003 	mla	r0, r0, r3, r4
 801fb9c:	1400      	asrs	r0, r0, #16
 801fb9e:	f53f aeaa 	bmi.w	801f8f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fba2:	3901      	subs	r1, #1
 801fba4:	4288      	cmp	r0, r1
 801fba6:	f6bf aea6 	bge.w	801f8f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fbaa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fbac:	fb01 6303 	mla	r3, r1, r3, r6
 801fbb0:	141b      	asrs	r3, r3, #16
 801fbb2:	f53f aea0 	bmi.w	801f8f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fbb6:	3a01      	subs	r2, #1
 801fbb8:	4293      	cmp	r3, r2
 801fbba:	f6bf ae9c 	bge.w	801f8f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fbbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fbc2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801fbc6:	f1bb 0f00 	cmp.w	fp, #0
 801fbca:	f300 809a 	bgt.w	801fd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801fbce:	9b07      	ldr	r3, [sp, #28]
 801fbd0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801fbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbd6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fbda:	930a      	str	r3, [sp, #40]	; 0x28
 801fbdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	f340 81ec 	ble.w	801ffbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801fbe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fbe8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbf0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fbf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbf8:	eef0 6a62 	vmov.f32	s13, s5
 801fbfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc04:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc10:	ee16 4a90 	vmov	r4, s13
 801fc14:	eef0 6a43 	vmov.f32	s13, s6
 801fc18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc1c:	ee12 2a90 	vmov	r2, s5
 801fc20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc2e:	ee13 2a10 	vmov	r2, s6
 801fc32:	9327      	str	r3, [sp, #156]	; 0x9c
 801fc34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc36:	ee16 6a90 	vmov	r6, s13
 801fc3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc3e:	9328      	str	r3, [sp, #160]	; 0xa0
 801fc40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fc42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc44:	3b01      	subs	r3, #1
 801fc46:	9316      	str	r3, [sp, #88]	; 0x58
 801fc48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc4a:	bf08      	it	eq
 801fc4c:	4613      	moveq	r3, r2
 801fc4e:	eeb0 3a67 	vmov.f32	s6, s15
 801fc52:	9307      	str	r3, [sp, #28]
 801fc54:	eef0 2a47 	vmov.f32	s5, s14
 801fc58:	e622      	b.n	801f8a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801fc5a:	2800      	cmp	r0, #0
 801fc5c:	f43f ae92 	beq.w	801f984 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801fc60:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fc64:	9308      	str	r3, [sp, #32]
 801fc66:	0e1b      	lsrs	r3, r3, #24
 801fc68:	9310      	str	r3, [sp, #64]	; 0x40
 801fc6a:	e68b      	b.n	801f984 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801fc6c:	43db      	mvns	r3, r3
 801fc6e:	8839      	ldrh	r1, [r7, #0]
 801fc70:	fa5f f883 	uxtb.w	r8, r3
 801fc74:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801fc78:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fc7c:	fb0e fe08 	mul.w	lr, lr, r8
 801fc80:	10c8      	asrs	r0, r1, #3
 801fc82:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fc86:	fb00 f008 	mul.w	r0, r0, r8
 801fc8a:	00cb      	lsls	r3, r1, #3
 801fc8c:	f10e 0101 	add.w	r1, lr, #1
 801fc90:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801fc94:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801fc98:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801fc9c:	b2db      	uxtb	r3, r3
 801fc9e:	f100 0e01 	add.w	lr, r0, #1
 801fca2:	fb03 f308 	mul.w	r3, r3, r8
 801fca6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801fcaa:	4dc6      	ldr	r5, [pc, #792]	; (801ffc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801fcac:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fcb0:	b2c9      	uxtb	r1, r1
 801fcb2:	00d2      	lsls	r2, r2, #3
 801fcb4:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 801fcb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fcbc:	430a      	orrs	r2, r1
 801fcbe:	1c59      	adds	r1, r3, #1
 801fcc0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fcc4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fcc8:	e748      	b.n	801fb5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801fcca:	f112 0801 	adds.w	r8, r2, #1
 801fcce:	f53f af4b 	bmi.w	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fcd2:	4543      	cmp	r3, r8
 801fcd4:	f6ff af48 	blt.w	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fcd8:	f11c 0801 	adds.w	r8, ip, #1
 801fcdc:	f53f af44 	bmi.w	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fce0:	45c6      	cmp	lr, r8
 801fce2:	f6ff af41 	blt.w	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fce6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801fcea:	fa0f f28e 	sxth.w	r2, lr
 801fcee:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801fcf2:	9200      	str	r2, [sp, #0]
 801fcf4:	b21b      	sxth	r3, r3
 801fcf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcf8:	4639      	mov	r1, r7
 801fcfa:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fcfc:	f7ff fc87 	bl	801f60e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801fd00:	e732      	b.n	801fb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fd02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd04:	1421      	asrs	r1, r4, #16
 801fd06:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801fd0a:	1433      	asrs	r3, r6, #16
 801fd0c:	fb07 1303 	mla	r3, r7, r3, r1
 801fd10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801fd12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fd14:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fd18:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fd1c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd20:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fd24:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fd28:	2a00      	cmp	r2, #0
 801fd2a:	f000 8108 	beq.w	801ff3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 801fd2e:	684d      	ldr	r5, [r1, #4]
 801fd30:	950d      	str	r5, [sp, #52]	; 0x34
 801fd32:	0e2d      	lsrs	r5, r5, #24
 801fd34:	9514      	str	r5, [sp, #80]	; 0x50
 801fd36:	b178      	cbz	r0, 801fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801fd38:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801fd3c:	3f01      	subs	r7, #1
 801fd3e:	00bf      	lsls	r7, r7, #2
 801fd40:	3704      	adds	r7, #4
 801fd42:	eb01 0e07 	add.w	lr, r1, r7
 801fd46:	59c9      	ldr	r1, [r1, r7]
 801fd48:	9109      	str	r1, [sp, #36]	; 0x24
 801fd4a:	0e09      	lsrs	r1, r1, #24
 801fd4c:	9111      	str	r1, [sp, #68]	; 0x44
 801fd4e:	f8de 1004 	ldr.w	r1, [lr, #4]
 801fd52:	910e      	str	r1, [sp, #56]	; 0x38
 801fd54:	0e09      	lsrs	r1, r1, #24
 801fd56:	9115      	str	r1, [sp, #84]	; 0x54
 801fd58:	b292      	uxth	r2, r2
 801fd5a:	b280      	uxth	r0, r0
 801fd5c:	fb02 f900 	mul.w	r9, r2, r0
 801fd60:	0112      	lsls	r2, r2, #4
 801fd62:	eba2 0e09 	sub.w	lr, r2, r9
 801fd66:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fd6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd6c:	fa1f fe8e 	uxth.w	lr, lr
 801fd70:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fd74:	fb0e f202 	mul.w	r2, lr, r2
 801fd78:	b280      	uxth	r0, r0
 801fd7a:	1a09      	subs	r1, r1, r0
 801fd7c:	b289      	uxth	r1, r1
 801fd7e:	fb01 220c 	mla	r2, r1, ip, r2
 801fd82:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fd84:	fb00 2205 	mla	r2, r0, r5, r2
 801fd88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fd8a:	fb09 2205 	mla	r2, r9, r5, r2
 801fd8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fd92:	2a00      	cmp	r2, #0
 801fd94:	f000 80ca 	beq.w	801ff2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801fd98:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fd9c:	d019      	beq.n	801fdd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 801fd9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fda2:	fb0c fa0a 	mul.w	sl, ip, sl
 801fda6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdaa:	fb0c fc03 	mul.w	ip, ip, r3
 801fdae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fdb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdb6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fdba:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fdbe:	4453      	add	r3, sl
 801fdc0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fdc4:	0a1b      	lsrs	r3, r3, #8
 801fdc6:	0a3f      	lsrs	r7, r7, #8
 801fdc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdcc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fdd0:	433b      	orrs	r3, r7
 801fdd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fdd4:	2dff      	cmp	r5, #255	; 0xff
 801fdd6:	d020      	beq.n	801fe1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 801fdd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fdda:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801fdde:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fde0:	436f      	muls	r7, r5
 801fde2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fde4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fde8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fdec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fdee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fdf2:	fb05 fa0a 	mul.w	sl, r5, sl
 801fdf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdfa:	44bc      	add	ip, r7
 801fdfc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fe00:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe14:	ea4c 050a 	orr.w	r5, ip, sl
 801fe18:	950d      	str	r5, [sp, #52]	; 0x34
 801fe1a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe1c:	2dff      	cmp	r5, #255	; 0xff
 801fe1e:	d020      	beq.n	801fe62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 801fe20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fe22:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801fe26:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe28:	436f      	muls	r7, r5
 801fe2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fe2c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801fe30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe32:	fb05 fa0c 	mul.w	sl, r5, ip
 801fe36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fe42:	44bc      	add	ip, r7
 801fe44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fe48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fe5c:	ea4c 050a 	orr.w	r5, ip, sl
 801fe60:	9509      	str	r5, [sp, #36]	; 0x24
 801fe62:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fe64:	2dff      	cmp	r5, #255	; 0xff
 801fe66:	d020      	beq.n	801feaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 801fe68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fe6a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801fe6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fe70:	436f      	muls	r7, r5
 801fe72:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fe74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe78:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fe7c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fe7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fe82:	fb05 fa0a 	mul.w	sl, r5, sl
 801fe86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe8a:	44bc      	add	ip, r7
 801fe8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fe90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fea4:	ea4c 050a 	orr.w	r5, ip, sl
 801fea8:	950e      	str	r5, [sp, #56]	; 0x38
 801feaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801feac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801feb0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801feb4:	fb0e f707 	mul.w	r7, lr, r7
 801feb8:	fb01 770c 	mla	r7, r1, ip, r7
 801febc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801febe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fec2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fec6:	fb00 770c 	mla	r7, r0, ip, r7
 801feca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fecc:	2aff      	cmp	r2, #255	; 0xff
 801fece:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fed2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fed4:	fb09 770c 	mla	r7, r9, ip, r7
 801fed8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801fedc:	fb0e fe0c 	mul.w	lr, lr, ip
 801fee0:	fb01 e303 	mla	r3, r1, r3, lr
 801fee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fee6:	ea4f 2717 	mov.w	r7, r7, lsr #8
 801feea:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801feee:	fb00 330a 	mla	r3, r0, sl, r3
 801fef2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fef4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fef8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801fefc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ff00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff08:	ea47 070c 	orr.w	r7, r7, ip
 801ff0c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801ff10:	d11e      	bne.n	801ff50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801ff12:	097a      	lsrs	r2, r7, #5
 801ff14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ff18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff1c:	f023 0307 	bic.w	r3, r3, #7
 801ff20:	4313      	orrs	r3, r2
 801ff22:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801ff26:	431f      	orrs	r7, r3
 801ff28:	f8a8 7000 	strh.w	r7, [r8]
 801ff2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ff2e:	f108 0802 	add.w	r8, r8, #2
 801ff32:	441c      	add	r4, r3
 801ff34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ff36:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ff3a:	441e      	add	r6, r3
 801ff3c:	e643      	b.n	801fbc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801ff3e:	2800      	cmp	r0, #0
 801ff40:	f43f af0a 	beq.w	801fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ff44:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801ff48:	9109      	str	r1, [sp, #36]	; 0x24
 801ff4a:	0e09      	lsrs	r1, r1, #24
 801ff4c:	9111      	str	r1, [sp, #68]	; 0x44
 801ff4e:	e703      	b.n	801fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ff50:	43d2      	mvns	r2, r2
 801ff52:	f8b8 1000 	ldrh.w	r1, [r8]
 801ff56:	fa5f fe82 	uxtb.w	lr, r2
 801ff5a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801ff5e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ff62:	fb0c fc0e 	mul.w	ip, ip, lr
 801ff66:	10c8      	asrs	r0, r1, #3
 801ff68:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ff6c:	fb00 f00e 	mul.w	r0, r0, lr
 801ff70:	00ca      	lsls	r2, r1, #3
 801ff72:	f10c 0101 	add.w	r1, ip, #1
 801ff76:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801ff7a:	b2d2      	uxtb	r2, r2
 801ff7c:	0c39      	lsrs	r1, r7, #16
 801ff7e:	fb02 f20e 	mul.w	r2, r2, lr
 801ff82:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801ff86:	490f      	ldr	r1, [pc, #60]	; (801ffc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801ff88:	fa5f fc8c 	uxtb.w	ip, ip
 801ff8c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801ff90:	1c41      	adds	r1, r0, #1
 801ff92:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801ff96:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ff9a:	1c51      	adds	r1, r2, #1
 801ff9c:	00c0      	lsls	r0, r0, #3
 801ff9e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ffa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffa6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ffaa:	ea4c 0c00 	orr.w	ip, ip, r0
 801ffae:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801ffb2:	ea47 0c0c 	orr.w	ip, r7, ip
 801ffb6:	f8a8 c000 	strh.w	ip, [r8]
 801ffba:	e7b7      	b.n	801ff2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801ffbc:	b01b      	add	sp, #108	; 0x6c
 801ffbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffc2:	bf00      	nop
 801ffc4:	fffff800 	.word	0xfffff800

0801ffc8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffcc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 801ffd0:	2d00      	cmp	r5, #0
 801ffd2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ffd6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ffda:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801ffde:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801ffe2:	fb05 0e03 	mla	lr, r5, r3, r0
 801ffe6:	f2c0 808c 	blt.w	8020102 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801ffea:	45a9      	cmp	r9, r5
 801ffec:	f340 8089 	ble.w	8020102 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801fff0:	2800      	cmp	r0, #0
 801fff2:	f2c0 8084 	blt.w	80200fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801fff6:	4580      	cmp	r8, r0
 801fff8:	f340 8081 	ble.w	80200fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801fffc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020000:	5d16      	ldrb	r6, [r2, r4]
 8020002:	f01e 0f01 	tst.w	lr, #1
 8020006:	bf0c      	ite	eq
 8020008:	f006 060f 	andeq.w	r6, r6, #15
 802000c:	1136      	asrne	r6, r6, #4
 802000e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020012:	b2f6      	uxtb	r6, r6
 8020014:	1c44      	adds	r4, r0, #1
 8020016:	d477      	bmi.n	8020108 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8020018:	45a0      	cmp	r8, r4
 802001a:	dd75      	ble.n	8020108 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802001c:	2f00      	cmp	r7, #0
 802001e:	d075      	beq.n	802010c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8020020:	f10e 0a01 	add.w	sl, lr, #1
 8020024:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8020028:	5d14      	ldrb	r4, [r2, r4]
 802002a:	f01a 0f01 	tst.w	sl, #1
 802002e:	bf0c      	ite	eq
 8020030:	f004 040f 	andeq.w	r4, r4, #15
 8020034:	1124      	asrne	r4, r4, #4
 8020036:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802003a:	b2e4      	uxtb	r4, r4
 802003c:	3501      	adds	r5, #1
 802003e:	d469      	bmi.n	8020114 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020040:	45a9      	cmp	r9, r5
 8020042:	dd67      	ble.n	8020114 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020044:	f1bc 0f00 	cmp.w	ip, #0
 8020048:	d067      	beq.n	802011a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802004a:	2800      	cmp	r0, #0
 802004c:	db60      	blt.n	8020110 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802004e:	4580      	cmp	r8, r0
 8020050:	dd5e      	ble.n	8020110 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8020052:	eb03 090e 	add.w	r9, r3, lr
 8020056:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802005a:	5d55      	ldrb	r5, [r2, r5]
 802005c:	f019 0f01 	tst.w	r9, #1
 8020060:	bf0c      	ite	eq
 8020062:	f005 050f 	andeq.w	r5, r5, #15
 8020066:	112d      	asrne	r5, r5, #4
 8020068:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802006c:	b2ed      	uxtb	r5, r5
 802006e:	3001      	adds	r0, #1
 8020070:	d456      	bmi.n	8020120 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020072:	4580      	cmp	r8, r0
 8020074:	dd54      	ble.n	8020120 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020076:	2f00      	cmp	r7, #0
 8020078:	d054      	beq.n	8020124 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802007a:	3301      	adds	r3, #1
 802007c:	449e      	add	lr, r3
 802007e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020082:	5cd0      	ldrb	r0, [r2, r3]
 8020084:	f01e 0f01 	tst.w	lr, #1
 8020088:	bf0c      	ite	eq
 802008a:	f000 000f 	andeq.w	r0, r0, #15
 802008e:	1100      	asrne	r0, r0, #4
 8020090:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020094:	b2c3      	uxtb	r3, r0
 8020096:	b2ba      	uxth	r2, r7
 8020098:	fa1f fc8c 	uxth.w	ip, ip
 802009c:	fb02 f00c 	mul.w	r0, r2, ip
 80200a0:	0112      	lsls	r2, r2, #4
 80200a2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80200a6:	1a12      	subs	r2, r2, r0
 80200a8:	b292      	uxth	r2, r2
 80200aa:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80200ae:	4362      	muls	r2, r4
 80200b0:	fa1f fc8c 	uxth.w	ip, ip
 80200b4:	eba7 070c 	sub.w	r7, r7, ip
 80200b8:	b2bf      	uxth	r7, r7
 80200ba:	fb06 2207 	mla	r2, r6, r7, r2
 80200be:	fb0c 2505 	mla	r5, ip, r5, r2
 80200c2:	fb00 5303 	mla	r3, r0, r3, r5
 80200c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80200ca:	b1b3      	cbz	r3, 80200fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80200cc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80200d0:	435a      	muls	r2, r3
 80200d2:	1c53      	adds	r3, r2, #1
 80200d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80200d8:	4a2d      	ldr	r2, [pc, #180]	; (8020190 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80200da:	121b      	asrs	r3, r3, #8
 80200dc:	6812      	ldr	r2, [r2, #0]
 80200de:	2bff      	cmp	r3, #255	; 0xff
 80200e0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80200e4:	d120      	bne.n	8020128 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80200e6:	4b2b      	ldr	r3, [pc, #172]	; (8020194 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80200e8:	0950      	lsrs	r0, r2, #5
 80200ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80200ee:	4033      	ands	r3, r6
 80200f0:	4318      	orrs	r0, r3
 80200f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80200f6:	4302      	orrs	r2, r0
 80200f8:	800a      	strh	r2, [r1, #0]
 80200fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200fe:	2600      	movs	r6, #0
 8020100:	e788      	b.n	8020014 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8020102:	2400      	movs	r4, #0
 8020104:	4626      	mov	r6, r4
 8020106:	e799      	b.n	802003c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020108:	2400      	movs	r4, #0
 802010a:	e797      	b.n	802003c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802010c:	463c      	mov	r4, r7
 802010e:	e795      	b.n	802003c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020110:	2500      	movs	r5, #0
 8020112:	e7ac      	b.n	802006e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8020114:	2300      	movs	r3, #0
 8020116:	461d      	mov	r5, r3
 8020118:	e7bd      	b.n	8020096 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802011a:	4663      	mov	r3, ip
 802011c:	4665      	mov	r5, ip
 802011e:	e7ba      	b.n	8020096 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020120:	2300      	movs	r3, #0
 8020122:	e7b8      	b.n	8020096 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020124:	463b      	mov	r3, r7
 8020126:	e7b6      	b.n	8020096 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020128:	b29f      	uxth	r7, r3
 802012a:	43db      	mvns	r3, r3
 802012c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8020130:	880d      	ldrh	r5, [r1, #0]
 8020132:	fb10 f007 	smulbb	r0, r0, r7
 8020136:	b2f6      	uxtb	r6, r6
 8020138:	b2d2      	uxtb	r2, r2
 802013a:	122c      	asrs	r4, r5, #8
 802013c:	fb12 f207 	smulbb	r2, r2, r7
 8020140:	fb16 f607 	smulbb	r6, r6, r7
 8020144:	b2db      	uxtb	r3, r3
 8020146:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802014a:	fb04 0403 	mla	r4, r4, r3, r0
 802014e:	10e8      	asrs	r0, r5, #3
 8020150:	00ed      	lsls	r5, r5, #3
 8020152:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020156:	b2ed      	uxtb	r5, r5
 8020158:	fb00 6603 	mla	r6, r0, r3, r6
 802015c:	fb05 2303 	mla	r3, r5, r3, r2
 8020160:	b2a4      	uxth	r4, r4
 8020162:	b29a      	uxth	r2, r3
 8020164:	1c63      	adds	r3, r4, #1
 8020166:	b2b0      	uxth	r0, r6
 8020168:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802016c:	1c53      	adds	r3, r2, #1
 802016e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020172:	1c42      	adds	r2, r0, #1
 8020174:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020178:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802017c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020180:	0940      	lsrs	r0, r0, #5
 8020182:	4323      	orrs	r3, r4
 8020184:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020188:	4303      	orrs	r3, r0
 802018a:	800b      	strh	r3, [r1, #0]
 802018c:	e7b5      	b.n	80200fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802018e:	bf00      	nop
 8020190:	2001fda8 	.word	0x2001fda8
 8020194:	00fff800 	.word	0x00fff800

08020198 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019c:	b097      	sub	sp, #92	; 0x5c
 802019e:	9214      	str	r2, [sp, #80]	; 0x50
 80201a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80201a2:	9015      	str	r0, [sp, #84]	; 0x54
 80201a4:	9309      	str	r3, [sp, #36]	; 0x24
 80201a6:	6850      	ldr	r0, [r2, #4]
 80201a8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80201ac:	910d      	str	r1, [sp, #52]	; 0x34
 80201ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80201b0:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80201b4:	fb00 1303 	mla	r3, r0, r3, r1
 80201b8:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80201bc:	6812      	ldr	r2, [r2, #0]
 80201be:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80201c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201c4:	689b      	ldr	r3, [r3, #8]
 80201c6:	3301      	adds	r3, #1
 80201c8:	f023 0301 	bic.w	r3, r3, #1
 80201cc:	930a      	str	r3, [sp, #40]	; 0x28
 80201ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201d0:	681f      	ldr	r7, [r3, #0]
 80201d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	dc03      	bgt.n	80201e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80201d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80201da:	2b00      	cmp	r3, #0
 80201dc:	f340 8287 	ble.w	80206ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80201e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80201e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80201e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80201ea:	1e48      	subs	r0, r1, #1
 80201ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80201f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	f340 80c3 	ble.w	802037e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80201f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80201fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020200:	d406      	bmi.n	8020210 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020202:	4586      	cmp	lr, r0
 8020204:	da04      	bge.n	8020210 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020206:	2b00      	cmp	r3, #0
 8020208:	db02      	blt.n	8020210 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802020a:	4563      	cmp	r3, ip
 802020c:	f2c0 80b8 	blt.w	8020380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020210:	f11e 0e01 	adds.w	lr, lr, #1
 8020214:	f100 80a9 	bmi.w	802036a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020218:	4571      	cmp	r1, lr
 802021a:	f2c0 80a6 	blt.w	802036a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802021e:	3301      	adds	r3, #1
 8020220:	f100 80a3 	bmi.w	802036a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020224:	429a      	cmp	r2, r3
 8020226:	f2c0 80a0 	blt.w	802036a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802022a:	46c8      	mov	r8, r9
 802022c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802022e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8020232:	930e      	str	r3, [sp, #56]	; 0x38
 8020234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020236:	2b00      	cmp	r3, #0
 8020238:	f340 80c2 	ble.w	80203c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802023c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802023e:	1430      	asrs	r0, r6, #16
 8020240:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020244:	1423      	asrs	r3, r4, #16
 8020246:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802024a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802024e:	f100 814d 	bmi.w	80204ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020252:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020256:	455b      	cmp	r3, fp
 8020258:	f280 8148 	bge.w	80204ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802025c:	2800      	cmp	r0, #0
 802025e:	f2c0 8145 	blt.w	80204ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020262:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020266:	4558      	cmp	r0, fp
 8020268:	f280 8140 	bge.w	80204ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802026c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802026e:	fb00 3305 	mla	r3, r0, r5, r3
 8020272:	0858      	lsrs	r0, r3, #1
 8020274:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020278:	07dd      	lsls	r5, r3, #31
 802027a:	bf54      	ite	pl
 802027c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020280:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020284:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020288:	fa5f fc8c 	uxtb.w	ip, ip
 802028c:	2a00      	cmp	r2, #0
 802028e:	f000 80db 	beq.w	8020448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020292:	1c58      	adds	r0, r3, #1
 8020294:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020298:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802029c:	07c0      	lsls	r0, r0, #31
 802029e:	bf54      	ite	pl
 80202a0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80202a4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80202a8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80202ac:	fa5f f08e 	uxtb.w	r0, lr
 80202b0:	9010      	str	r0, [sp, #64]	; 0x40
 80202b2:	b1c9      	cbz	r1, 80202e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80202b4:	4453      	add	r3, sl
 80202b6:	0858      	lsrs	r0, r3, #1
 80202b8:	5c38      	ldrb	r0, [r7, r0]
 80202ba:	07dd      	lsls	r5, r3, #31
 80202bc:	bf54      	ite	pl
 80202be:	f000 000f 	andpl.w	r0, r0, #15
 80202c2:	1100      	asrmi	r0, r0, #4
 80202c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80202c8:	3301      	adds	r3, #1
 80202ca:	b2c0      	uxtb	r0, r0
 80202cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80202ce:	0858      	lsrs	r0, r3, #1
 80202d0:	f817 e000 	ldrb.w	lr, [r7, r0]
 80202d4:	07dd      	lsls	r5, r3, #31
 80202d6:	bf54      	ite	pl
 80202d8:	f00e 030f 	andpl.w	r3, lr, #15
 80202dc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80202e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80202e4:	b2db      	uxtb	r3, r3
 80202e6:	9311      	str	r3, [sp, #68]	; 0x44
 80202e8:	b292      	uxth	r2, r2
 80202ea:	b289      	uxth	r1, r1
 80202ec:	fb02 f301 	mul.w	r3, r2, r1
 80202f0:	0112      	lsls	r2, r2, #4
 80202f2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80202f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80202f8:	1ad2      	subs	r2, r2, r3
 80202fa:	b292      	uxth	r2, r2
 80202fc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020300:	436a      	muls	r2, r5
 8020302:	b289      	uxth	r1, r1
 8020304:	1a40      	subs	r0, r0, r1
 8020306:	b280      	uxth	r0, r0
 8020308:	fb0c 2c00 	mla	ip, ip, r0, r2
 802030c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802030e:	fb01 c102 	mla	r1, r1, r2, ip
 8020312:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020314:	fb03 1302 	mla	r3, r3, r2, r1
 8020318:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802031c:	b1db      	cbz	r3, 8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802031e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020320:	4353      	muls	r3, r2
 8020322:	1c5a      	adds	r2, r3, #1
 8020324:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020328:	4ac6      	ldr	r2, [pc, #792]	; (8020644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802032a:	121b      	asrs	r3, r3, #8
 802032c:	6812      	ldr	r2, [r2, #0]
 802032e:	2bff      	cmp	r3, #255	; 0xff
 8020330:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020334:	f040 8099 	bne.w	802046a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8020338:	0953      	lsrs	r3, r2, #5
 802033a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802033e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020342:	f02c 0c07 	bic.w	ip, ip, #7
 8020346:	ea43 0c0c 	orr.w	ip, r3, ip
 802034a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802034e:	ea4c 0202 	orr.w	r2, ip, r2
 8020352:	f8a8 2000 	strh.w	r2, [r8]
 8020356:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020358:	f108 0802 	add.w	r8, r8, #2
 802035c:	441c      	add	r4, r3
 802035e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020360:	441e      	add	r6, r3
 8020362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020364:	3b01      	subs	r3, #1
 8020366:	930e      	str	r3, [sp, #56]	; 0x38
 8020368:	e764      	b.n	8020234 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802036a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802036c:	f109 0902 	add.w	r9, r9, #2
 8020370:	441c      	add	r4, r3
 8020372:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020374:	441e      	add	r6, r3
 8020376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020378:	3b01      	subs	r3, #1
 802037a:	9309      	str	r3, [sp, #36]	; 0x24
 802037c:	e738      	b.n	80201f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802037e:	d024      	beq.n	80203ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020382:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020384:	3b01      	subs	r3, #1
 8020386:	fb00 4003 	mla	r0, r0, r3, r4
 802038a:	1400      	asrs	r0, r0, #16
 802038c:	f53f af4d 	bmi.w	802022a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020390:	3901      	subs	r1, #1
 8020392:	4288      	cmp	r0, r1
 8020394:	f6bf af49 	bge.w	802022a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020398:	9924      	ldr	r1, [sp, #144]	; 0x90
 802039a:	fb01 6303 	mla	r3, r1, r3, r6
 802039e:	141b      	asrs	r3, r3, #16
 80203a0:	f53f af43 	bmi.w	802022a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80203a4:	3a01      	subs	r2, #1
 80203a6:	4293      	cmp	r3, r2
 80203a8:	f6bf af3f 	bge.w	802022a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80203ac:	46c8      	mov	r8, r9
 80203ae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80203b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80203b6:	930e      	str	r3, [sp, #56]	; 0x38
 80203b8:	f1bb 0f00 	cmp.w	fp, #0
 80203bc:	f300 80b7 	bgt.w	802052e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80203c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203c2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80203c6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80203ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	f340 818e 	ble.w	80206ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80203d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80203d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80203e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203e6:	eef0 6a62 	vmov.f32	s13, s5
 80203ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203fe:	ee16 4a90 	vmov	r4, s13
 8020402:	eef0 6a43 	vmov.f32	s13, s6
 8020406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802040a:	ee12 2a90 	vmov	r2, s5
 802040e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020412:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020414:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020418:	fb92 f3f3 	sdiv	r3, r2, r3
 802041c:	ee13 2a10 	vmov	r2, s6
 8020420:	9323      	str	r3, [sp, #140]	; 0x8c
 8020422:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020424:	ee16 6a90 	vmov	r6, s13
 8020428:	fb92 f3f3 	sdiv	r3, r2, r3
 802042c:	9324      	str	r3, [sp, #144]	; 0x90
 802042e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020432:	3b01      	subs	r3, #1
 8020434:	930d      	str	r3, [sp, #52]	; 0x34
 8020436:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020438:	bf08      	it	eq
 802043a:	4613      	moveq	r3, r2
 802043c:	eeb0 3a67 	vmov.f32	s6, s15
 8020440:	9309      	str	r3, [sp, #36]	; 0x24
 8020442:	eef0 2a47 	vmov.f32	s5, s14
 8020446:	e6c4      	b.n	80201d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020448:	2900      	cmp	r1, #0
 802044a:	f43f af4d 	beq.w	80202e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802044e:	eb0a 0003 	add.w	r0, sl, r3
 8020452:	0843      	lsrs	r3, r0, #1
 8020454:	5cfb      	ldrb	r3, [r7, r3]
 8020456:	07c0      	lsls	r0, r0, #31
 8020458:	bf54      	ite	pl
 802045a:	f003 030f 	andpl.w	r3, r3, #15
 802045e:	111b      	asrmi	r3, r3, #4
 8020460:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020464:	b2db      	uxtb	r3, r3
 8020466:	930b      	str	r3, [sp, #44]	; 0x2c
 8020468:	e73e      	b.n	80202e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802046a:	fa1f fb83 	uxth.w	fp, r3
 802046e:	43db      	mvns	r3, r3
 8020470:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020474:	f8b8 e000 	ldrh.w	lr, [r8]
 8020478:	fb11 f10b 	smulbb	r1, r1, fp
 802047c:	fa5f fc8c 	uxtb.w	ip, ip
 8020480:	b2d2      	uxtb	r2, r2
 8020482:	ea4f 202e 	mov.w	r0, lr, asr #8
 8020486:	fb1c fc0b 	smulbb	ip, ip, fp
 802048a:	fb12 fb0b 	smulbb	fp, r2, fp
 802048e:	b2db      	uxtb	r3, r3
 8020490:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020494:	fb00 1003 	mla	r0, r0, r3, r1
 8020498:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802049c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80204a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80204a4:	fa5f fe8e 	uxtb.w	lr, lr
 80204a8:	fb01 cc03 	mla	ip, r1, r3, ip
 80204ac:	fb0e bb03 	mla	fp, lr, r3, fp
 80204b0:	b280      	uxth	r0, r0
 80204b2:	1c43      	adds	r3, r0, #1
 80204b4:	fa1f fc8c 	uxth.w	ip, ip
 80204b8:	fa1f fb8b 	uxth.w	fp, fp
 80204bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80204c0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80204c4:	f10c 0101 	add.w	r1, ip, #1
 80204c8:	f10b 0001 	add.w	r0, fp, #1
 80204cc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80204d0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80204d4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80204d8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80204dc:	4318      	orrs	r0, r3
 80204de:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80204e2:	ea40 000c 	orr.w	r0, r0, ip
 80204e6:	f8a8 0000 	strh.w	r0, [r8]
 80204ea:	e734      	b.n	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80204ec:	f113 0b01 	adds.w	fp, r3, #1
 80204f0:	f53f af31 	bmi.w	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80204f4:	45dc      	cmp	ip, fp
 80204f6:	f6ff af2e 	blt.w	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80204fa:	f110 0b01 	adds.w	fp, r0, #1
 80204fe:	f53f af2a 	bmi.w	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020502:	45de      	cmp	lr, fp
 8020504:	f6ff af27 	blt.w	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020508:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802050a:	9302      	str	r3, [sp, #8]
 802050c:	fa0f f38e 	sxth.w	r3, lr
 8020510:	9301      	str	r3, [sp, #4]
 8020512:	fa0f f38c 	sxth.w	r3, ip
 8020516:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802051a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802051e:	9300      	str	r3, [sp, #0]
 8020520:	463a      	mov	r2, r7
 8020522:	4653      	mov	r3, sl
 8020524:	4641      	mov	r1, r8
 8020526:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020528:	f7ff fd4e 	bl	801ffc8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802052c:	e713      	b.n	8020356 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802052e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020530:	1422      	asrs	r2, r4, #16
 8020532:	1433      	asrs	r3, r6, #16
 8020534:	fb05 2303 	mla	r3, r5, r3, r2
 8020538:	085a      	lsrs	r2, r3, #1
 802053a:	5cba      	ldrb	r2, [r7, r2]
 802053c:	07dd      	lsls	r5, r3, #31
 802053e:	bf54      	ite	pl
 8020540:	f002 020f 	andpl.w	r2, r2, #15
 8020544:	1112      	asrmi	r2, r2, #4
 8020546:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802054a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802054e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020552:	b2d2      	uxtb	r2, r2
 8020554:	2900      	cmp	r1, #0
 8020556:	d077      	beq.n	8020648 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8020558:	f103 0e01 	add.w	lr, r3, #1
 802055c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020560:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020564:	f01e 0f01 	tst.w	lr, #1
 8020568:	bf0c      	ite	eq
 802056a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802056e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020572:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020576:	fa5f f58c 	uxtb.w	r5, ip
 802057a:	9512      	str	r5, [sp, #72]	; 0x48
 802057c:	b300      	cbz	r0, 80205c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802057e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020580:	442b      	add	r3, r5
 8020582:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020586:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802058a:	07dd      	lsls	r5, r3, #31
 802058c:	bf54      	ite	pl
 802058e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020592:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020596:	3301      	adds	r3, #1
 8020598:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802059c:	fa5f f58c 	uxtb.w	r5, ip
 80205a0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80205a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80205a8:	950c      	str	r5, [sp, #48]	; 0x30
 80205aa:	07dd      	lsls	r5, r3, #31
 80205ac:	bf54      	ite	pl
 80205ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80205b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80205b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80205ba:	fa5f f38c 	uxtb.w	r3, ip
 80205be:	9313      	str	r3, [sp, #76]	; 0x4c
 80205c0:	b289      	uxth	r1, r1
 80205c2:	b280      	uxth	r0, r0
 80205c4:	fb01 f300 	mul.w	r3, r1, r0
 80205c8:	0109      	lsls	r1, r1, #4
 80205ca:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80205ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80205d0:	1ac9      	subs	r1, r1, r3
 80205d2:	b289      	uxth	r1, r1
 80205d4:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80205d8:	4369      	muls	r1, r5
 80205da:	b280      	uxth	r0, r0
 80205dc:	ebac 0c00 	sub.w	ip, ip, r0
 80205e0:	fa1f fc8c 	uxth.w	ip, ip
 80205e4:	fb02 120c 	mla	r2, r2, ip, r1
 80205e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80205ea:	fb00 2001 	mla	r0, r0, r1, r2
 80205ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80205f0:	fb03 0302 	mla	r3, r3, r2, r0
 80205f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80205f8:	b1d3      	cbz	r3, 8020630 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80205fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80205fc:	4353      	muls	r3, r2
 80205fe:	1c5a      	adds	r2, r3, #1
 8020600:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020604:	4a0f      	ldr	r2, [pc, #60]	; (8020644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8020606:	121b      	asrs	r3, r3, #8
 8020608:	6812      	ldr	r2, [r2, #0]
 802060a:	2bff      	cmp	r3, #255	; 0xff
 802060c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020610:	d12e      	bne.n	8020670 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020612:	0953      	lsrs	r3, r2, #5
 8020614:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020618:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802061c:	f02c 0c07 	bic.w	ip, ip, #7
 8020620:	ea43 0c0c 	orr.w	ip, r3, ip
 8020624:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020628:	ea4c 0202 	orr.w	r2, ip, r2
 802062c:	f8a8 2000 	strh.w	r2, [r8]
 8020630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020632:	f108 0802 	add.w	r8, r8, #2
 8020636:	441c      	add	r4, r3
 8020638:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802063a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802063e:	441e      	add	r6, r3
 8020640:	e6ba      	b.n	80203b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020642:	bf00      	nop
 8020644:	2001fda8 	.word	0x2001fda8
 8020648:	2800      	cmp	r0, #0
 802064a:	d0b9      	beq.n	80205c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802064c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802064e:	442b      	add	r3, r5
 8020650:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020654:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020658:	07db      	lsls	r3, r3, #31
 802065a:	bf54      	ite	pl
 802065c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020660:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020664:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020668:	fa5f f38c 	uxtb.w	r3, ip
 802066c:	930c      	str	r3, [sp, #48]	; 0x30
 802066e:	e7a7      	b.n	80205c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8020670:	fa1f fa83 	uxth.w	sl, r3
 8020674:	43db      	mvns	r3, r3
 8020676:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802067a:	f8b8 e000 	ldrh.w	lr, [r8]
 802067e:	fb11 f10a 	smulbb	r1, r1, sl
 8020682:	b2d2      	uxtb	r2, r2
 8020684:	ea4f 202e 	mov.w	r0, lr, asr #8
 8020688:	fb12 f20a 	smulbb	r2, r2, sl
 802068c:	b2db      	uxtb	r3, r3
 802068e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020692:	fb00 1003 	mla	r0, r0, r3, r1
 8020696:	fa5f fc8c 	uxtb.w	ip, ip
 802069a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802069e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80206a2:	fb1c fc0a 	smulbb	ip, ip, sl
 80206a6:	fa5f fe8e 	uxtb.w	lr, lr
 80206aa:	fb0e 2203 	mla	r2, lr, r3, r2
 80206ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80206b2:	fb01 cc03 	mla	ip, r1, r3, ip
 80206b6:	b280      	uxth	r0, r0
 80206b8:	b292      	uxth	r2, r2
 80206ba:	1c43      	adds	r3, r0, #1
 80206bc:	1c51      	adds	r1, r2, #1
 80206be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80206c2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80206c6:	fa1f fc8c 	uxth.w	ip, ip
 80206ca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80206ce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80206d2:	4308      	orrs	r0, r1
 80206d4:	f10c 0101 	add.w	r1, ip, #1
 80206d8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80206dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80206e0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80206e4:	ea40 000c 	orr.w	r0, r0, ip
 80206e8:	f8a8 0000 	strh.w	r0, [r8]
 80206ec:	e7a0      	b.n	8020630 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80206ee:	b017      	add	sp, #92	; 0x5c
 80206f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80206f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206f8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80206fc:	2d00      	cmp	r5, #0
 80206fe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8020702:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020706:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802070a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802070e:	fb05 0e03 	mla	lr, r5, r3, r0
 8020712:	f2c0 80b0 	blt.w	8020876 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8020716:	45a9      	cmp	r9, r5
 8020718:	f340 80ad 	ble.w	8020876 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802071c:	2800      	cmp	r0, #0
 802071e:	f2c0 80a8 	blt.w	8020872 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8020722:	4580      	cmp	r8, r0
 8020724:	f340 80a5 	ble.w	8020872 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8020728:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802072c:	5d16      	ldrb	r6, [r2, r4]
 802072e:	f01e 0f01 	tst.w	lr, #1
 8020732:	bf0c      	ite	eq
 8020734:	f006 060f 	andeq.w	r6, r6, #15
 8020738:	1136      	asrne	r6, r6, #4
 802073a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802073e:	b2f6      	uxtb	r6, r6
 8020740:	1c44      	adds	r4, r0, #1
 8020742:	f100 809b 	bmi.w	802087c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8020746:	45a0      	cmp	r8, r4
 8020748:	f340 8098 	ble.w	802087c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802074c:	2f00      	cmp	r7, #0
 802074e:	f000 8097 	beq.w	8020880 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8020752:	f10e 0a01 	add.w	sl, lr, #1
 8020756:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802075a:	5d14      	ldrb	r4, [r2, r4]
 802075c:	f01a 0f01 	tst.w	sl, #1
 8020760:	bf0c      	ite	eq
 8020762:	f004 040f 	andeq.w	r4, r4, #15
 8020766:	1124      	asrne	r4, r4, #4
 8020768:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802076c:	b2e4      	uxtb	r4, r4
 802076e:	3501      	adds	r5, #1
 8020770:	f100 808a 	bmi.w	8020888 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8020774:	45a9      	cmp	r9, r5
 8020776:	f340 8087 	ble.w	8020888 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802077a:	f1bc 0f00 	cmp.w	ip, #0
 802077e:	f000 8086 	beq.w	802088e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8020782:	2800      	cmp	r0, #0
 8020784:	db7e      	blt.n	8020884 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8020786:	4580      	cmp	r8, r0
 8020788:	dd7c      	ble.n	8020884 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802078a:	eb03 090e 	add.w	r9, r3, lr
 802078e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8020792:	5d55      	ldrb	r5, [r2, r5]
 8020794:	f019 0f01 	tst.w	r9, #1
 8020798:	bf0c      	ite	eq
 802079a:	f005 050f 	andeq.w	r5, r5, #15
 802079e:	112d      	asrne	r5, r5, #4
 80207a0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80207a4:	b2ed      	uxtb	r5, r5
 80207a6:	3001      	adds	r0, #1
 80207a8:	d474      	bmi.n	8020894 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80207aa:	4580      	cmp	r8, r0
 80207ac:	dd72      	ble.n	8020894 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80207ae:	2f00      	cmp	r7, #0
 80207b0:	d072      	beq.n	8020898 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80207b2:	3301      	adds	r3, #1
 80207b4:	449e      	add	lr, r3
 80207b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80207ba:	5cd0      	ldrb	r0, [r2, r3]
 80207bc:	f01e 0f01 	tst.w	lr, #1
 80207c0:	bf0c      	ite	eq
 80207c2:	f000 000f 	andeq.w	r0, r0, #15
 80207c6:	1100      	asrne	r0, r0, #4
 80207c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80207cc:	b2c3      	uxtb	r3, r0
 80207ce:	b2ba      	uxth	r2, r7
 80207d0:	fa1f fc8c 	uxth.w	ip, ip
 80207d4:	fb02 f00c 	mul.w	r0, r2, ip
 80207d8:	0112      	lsls	r2, r2, #4
 80207da:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80207de:	1a12      	subs	r2, r2, r0
 80207e0:	b292      	uxth	r2, r2
 80207e2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80207e6:	4362      	muls	r2, r4
 80207e8:	fa1f fc8c 	uxth.w	ip, ip
 80207ec:	eba7 070c 	sub.w	r7, r7, ip
 80207f0:	b2bf      	uxth	r7, r7
 80207f2:	fb06 2207 	mla	r2, r6, r7, r2
 80207f6:	fb0c 2505 	mla	r5, ip, r5, r2
 80207fa:	fb00 5303 	mla	r3, r0, r3, r5
 80207fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020802:	b3a3      	cbz	r3, 802086e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8020804:	4a25      	ldr	r2, [pc, #148]	; (802089c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8020806:	880e      	ldrh	r6, [r1, #0]
 8020808:	6815      	ldr	r5, [r2, #0]
 802080a:	b29a      	uxth	r2, r3
 802080c:	43db      	mvns	r3, r3
 802080e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8020812:	fb10 f002 	smulbb	r0, r0, r2
 8020816:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802081a:	b2ed      	uxtb	r5, r5
 802081c:	1234      	asrs	r4, r6, #8
 802081e:	fb17 f702 	smulbb	r7, r7, r2
 8020822:	fb15 f202 	smulbb	r2, r5, r2
 8020826:	b2db      	uxtb	r3, r3
 8020828:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802082c:	fb04 0403 	mla	r4, r4, r3, r0
 8020830:	10f0      	asrs	r0, r6, #3
 8020832:	00f6      	lsls	r6, r6, #3
 8020834:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020838:	b2f6      	uxtb	r6, r6
 802083a:	fb00 7003 	mla	r0, r0, r3, r7
 802083e:	fb06 2303 	mla	r3, r6, r3, r2
 8020842:	b2a4      	uxth	r4, r4
 8020844:	b29a      	uxth	r2, r3
 8020846:	1c63      	adds	r3, r4, #1
 8020848:	b280      	uxth	r0, r0
 802084a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802084e:	1c53      	adds	r3, r2, #1
 8020850:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020854:	1c42      	adds	r2, r0, #1
 8020856:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802085a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802085e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020862:	0940      	lsrs	r0, r0, #5
 8020864:	4323      	orrs	r3, r4
 8020866:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802086a:	4303      	orrs	r3, r0
 802086c:	800b      	strh	r3, [r1, #0]
 802086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020872:	2600      	movs	r6, #0
 8020874:	e764      	b.n	8020740 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8020876:	2400      	movs	r4, #0
 8020878:	4626      	mov	r6, r4
 802087a:	e778      	b.n	802076e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802087c:	2400      	movs	r4, #0
 802087e:	e776      	b.n	802076e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8020880:	463c      	mov	r4, r7
 8020882:	e774      	b.n	802076e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8020884:	2500      	movs	r5, #0
 8020886:	e78e      	b.n	80207a6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8020888:	2300      	movs	r3, #0
 802088a:	461d      	mov	r5, r3
 802088c:	e79f      	b.n	80207ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802088e:	4663      	mov	r3, ip
 8020890:	4665      	mov	r5, ip
 8020892:	e79c      	b.n	80207ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8020894:	2300      	movs	r3, #0
 8020896:	e79a      	b.n	80207ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8020898:	463b      	mov	r3, r7
 802089a:	e798      	b.n	80207ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802089c:	2001fda8 	.word	0x2001fda8

080208a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208a4:	b093      	sub	sp, #76	; 0x4c
 80208a6:	920c      	str	r2, [sp, #48]	; 0x30
 80208a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80208aa:	9011      	str	r0, [sp, #68]	; 0x44
 80208ac:	6850      	ldr	r0, [r2, #4]
 80208ae:	9107      	str	r1, [sp, #28]
 80208b0:	461d      	mov	r5, r3
 80208b2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80208b6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80208ba:	fb00 1303 	mla	r3, r0, r3, r1
 80208be:	6812      	ldr	r2, [r2, #0]
 80208c0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80208c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80208c6:	689b      	ldr	r3, [r3, #8]
 80208c8:	3301      	adds	r3, #1
 80208ca:	f023 0301 	bic.w	r3, r3, #1
 80208ce:	9306      	str	r3, [sp, #24]
 80208d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80208d2:	681f      	ldr	r7, [r3, #0]
 80208d4:	9b07      	ldr	r3, [sp, #28]
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	dc03      	bgt.n	80208e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80208da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208dc:	2b00      	cmp	r3, #0
 80208de:	f340 8265 	ble.w	8020dac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80208e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80208e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80208ec:	1e48      	subs	r0, r1, #1
 80208ee:	f102 3cff 	add.w	ip, r2, #4294967295
 80208f2:	2d00      	cmp	r5, #0
 80208f4:	f340 80b7 	ble.w	8020a66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80208f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80208fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020900:	d406      	bmi.n	8020910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020902:	4586      	cmp	lr, r0
 8020904:	da04      	bge.n	8020910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020906:	2b00      	cmp	r3, #0
 8020908:	db02      	blt.n	8020910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802090a:	4563      	cmp	r3, ip
 802090c:	f2c0 80ac 	blt.w	8020a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020910:	f11e 0e01 	adds.w	lr, lr, #1
 8020914:	f100 809f 	bmi.w	8020a56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020918:	4571      	cmp	r1, lr
 802091a:	f2c0 809c 	blt.w	8020a56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802091e:	3301      	adds	r3, #1
 8020920:	f100 8099 	bmi.w	8020a56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020924:	429a      	cmp	r2, r3
 8020926:	f2c0 8096 	blt.w	8020a56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802092a:	46c8      	mov	r8, r9
 802092c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8020930:	9509      	str	r5, [sp, #36]	; 0x24
 8020932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020934:	2b00      	cmp	r3, #0
 8020936:	f340 80b5 	ble.w	8020aa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802093a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802093e:	9308      	str	r3, [sp, #32]
 8020940:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020942:	1430      	asrs	r0, r6, #16
 8020944:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020948:	1423      	asrs	r3, r4, #16
 802094a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802094e:	f100 813e 	bmi.w	8020bce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8020952:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020956:	455b      	cmp	r3, fp
 8020958:	f280 8139 	bge.w	8020bce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802095c:	2800      	cmp	r0, #0
 802095e:	f2c0 8136 	blt.w	8020bce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8020962:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020966:	4558      	cmp	r0, fp
 8020968:	f280 8131 	bge.w	8020bce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802096c:	9a06      	ldr	r2, [sp, #24]
 802096e:	fb00 3302 	mla	r3, r0, r2, r3
 8020972:	0858      	lsrs	r0, r3, #1
 8020974:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020978:	07da      	lsls	r2, r3, #31
 802097a:	bf54      	ite	pl
 802097c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020980:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020984:	9a08      	ldr	r2, [sp, #32]
 8020986:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802098a:	fa5f fc8c 	uxtb.w	ip, ip
 802098e:	2a00      	cmp	r2, #0
 8020990:	f000 80cb 	beq.w	8020b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8020994:	1c58      	adds	r0, r3, #1
 8020996:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802099a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802099e:	07c0      	lsls	r0, r0, #31
 80209a0:	bf54      	ite	pl
 80209a2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80209a6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80209aa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80209ae:	fa5f fe8e 	uxtb.w	lr, lr
 80209b2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80209b6:	b1b9      	cbz	r1, 80209e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80209b8:	4453      	add	r3, sl
 80209ba:	0858      	lsrs	r0, r3, #1
 80209bc:	5c38      	ldrb	r0, [r7, r0]
 80209be:	07da      	lsls	r2, r3, #31
 80209c0:	bf54      	ite	pl
 80209c2:	f000 000f 	andpl.w	r0, r0, #15
 80209c6:	1100      	asrmi	r0, r0, #4
 80209c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80209cc:	b2c0      	uxtb	r0, r0
 80209ce:	900a      	str	r0, [sp, #40]	; 0x28
 80209d0:	1c58      	adds	r0, r3, #1
 80209d2:	0843      	lsrs	r3, r0, #1
 80209d4:	5cfb      	ldrb	r3, [r7, r3]
 80209d6:	07c2      	lsls	r2, r0, #31
 80209d8:	bf54      	ite	pl
 80209da:	f003 030f 	andpl.w	r3, r3, #15
 80209de:	111b      	asrmi	r3, r3, #4
 80209e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80209e4:	b2db      	uxtb	r3, r3
 80209e6:	930e      	str	r3, [sp, #56]	; 0x38
 80209e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80209ec:	b289      	uxth	r1, r1
 80209ee:	fb02 f301 	mul.w	r3, r2, r1
 80209f2:	0112      	lsls	r2, r2, #4
 80209f4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80209f8:	b289      	uxth	r1, r1
 80209fa:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80209fe:	1a40      	subs	r0, r0, r1
 8020a00:	fa1f fe80 	uxth.w	lr, r0
 8020a04:	1ad2      	subs	r2, r2, r3
 8020a06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020a08:	b292      	uxth	r2, r2
 8020a0a:	4342      	muls	r2, r0
 8020a0c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8020a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a12:	fb01 c102 	mla	r1, r1, r2, ip
 8020a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a18:	fb03 1302 	mla	r3, r3, r2, r1
 8020a1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020a20:	2bff      	cmp	r3, #255	; 0xff
 8020a22:	f040 8093 	bne.w	8020b4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8020a26:	4bbe      	ldr	r3, [pc, #760]	; (8020d20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8020a28:	681a      	ldr	r2, [r3, #0]
 8020a2a:	4bbe      	ldr	r3, [pc, #760]	; (8020d24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8020a2c:	0951      	lsrs	r1, r2, #5
 8020a2e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8020a32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020a36:	430b      	orrs	r3, r1
 8020a38:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020a3c:	4313      	orrs	r3, r2
 8020a3e:	f8a8 3000 	strh.w	r3, [r8]
 8020a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a44:	f108 0802 	add.w	r8, r8, #2
 8020a48:	441c      	add	r4, r3
 8020a4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a4c:	441e      	add	r6, r3
 8020a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a50:	3b01      	subs	r3, #1
 8020a52:	9309      	str	r3, [sp, #36]	; 0x24
 8020a54:	e76d      	b.n	8020932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020a56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a58:	3d01      	subs	r5, #1
 8020a5a:	441c      	add	r4, r3
 8020a5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a5e:	f109 0902 	add.w	r9, r9, #2
 8020a62:	441e      	add	r6, r3
 8020a64:	e745      	b.n	80208f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020a66:	d021      	beq.n	8020aac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020a68:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020a6a:	1e6b      	subs	r3, r5, #1
 8020a6c:	fb00 4003 	mla	r0, r0, r3, r4
 8020a70:	1400      	asrs	r0, r0, #16
 8020a72:	f53f af5a 	bmi.w	802092a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020a76:	3901      	subs	r1, #1
 8020a78:	4288      	cmp	r0, r1
 8020a7a:	f6bf af56 	bge.w	802092a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020a7e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020a80:	fb01 6303 	mla	r3, r1, r3, r6
 8020a84:	141b      	asrs	r3, r3, #16
 8020a86:	f53f af50 	bmi.w	802092a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020a8a:	3a01      	subs	r2, #1
 8020a8c:	4293      	cmp	r3, r2
 8020a8e:	f6bf af4c 	bge.w	802092a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020a92:	46a8      	mov	r8, r5
 8020a94:	46ce      	mov	lr, r9
 8020a96:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020a9a:	9308      	str	r3, [sp, #32]
 8020a9c:	f1b8 0f00 	cmp.w	r8, #0
 8020aa0:	f300 80b5 	bgt.w	8020c0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020aa4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020aa8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020aac:	9b07      	ldr	r3, [sp, #28]
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	f340 817c 	ble.w	8020dac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8020ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ab8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020abc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ac0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ac4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ac8:	eef0 6a62 	vmov.f32	s13, s5
 8020acc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ad0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020ad4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ad8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020adc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ae0:	ee16 4a90 	vmov	r4, s13
 8020ae4:	eef0 6a43 	vmov.f32	s13, s6
 8020ae8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020aec:	ee12 2a90 	vmov	r2, s5
 8020af0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020af4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020af6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020afe:	ee13 2a10 	vmov	r2, s6
 8020b02:	931f      	str	r3, [sp, #124]	; 0x7c
 8020b04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b06:	ee16 6a90 	vmov	r6, s13
 8020b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b0e:	9320      	str	r3, [sp, #128]	; 0x80
 8020b10:	9b07      	ldr	r3, [sp, #28]
 8020b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b14:	3b01      	subs	r3, #1
 8020b16:	9307      	str	r3, [sp, #28]
 8020b18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b1a:	bf0c      	ite	eq
 8020b1c:	4615      	moveq	r5, r2
 8020b1e:	461d      	movne	r5, r3
 8020b20:	eeb0 3a67 	vmov.f32	s6, s15
 8020b24:	eef0 2a47 	vmov.f32	s5, s14
 8020b28:	e6d4      	b.n	80208d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8020b2a:	2900      	cmp	r1, #0
 8020b2c:	f43f af5c 	beq.w	80209e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020b30:	eb0a 0003 	add.w	r0, sl, r3
 8020b34:	0843      	lsrs	r3, r0, #1
 8020b36:	5cfb      	ldrb	r3, [r7, r3]
 8020b38:	07c0      	lsls	r0, r0, #31
 8020b3a:	bf54      	ite	pl
 8020b3c:	f003 030f 	andpl.w	r3, r3, #15
 8020b40:	111b      	asrmi	r3, r3, #4
 8020b42:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020b46:	b2db      	uxtb	r3, r3
 8020b48:	930a      	str	r3, [sp, #40]	; 0x28
 8020b4a:	e74d      	b.n	80209e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	f43f af78 	beq.w	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020b52:	fa1f fe83 	uxth.w	lr, r3
 8020b56:	43db      	mvns	r3, r3
 8020b58:	4a71      	ldr	r2, [pc, #452]	; (8020d20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8020b5a:	f8b8 c000 	ldrh.w	ip, [r8]
 8020b5e:	6810      	ldr	r0, [r2, #0]
 8020b60:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020b64:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8020b68:	fb12 f20e 	smulbb	r2, r2, lr
 8020b6c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8020b70:	b2c0      	uxtb	r0, r0
 8020b72:	fb1b fb0e 	smulbb	fp, fp, lr
 8020b76:	fb10 fe0e 	smulbb	lr, r0, lr
 8020b7a:	b2db      	uxtb	r3, r3
 8020b7c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020b80:	fb01 2103 	mla	r1, r1, r3, r2
 8020b84:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020b88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020b8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020b90:	fa5f fc8c 	uxtb.w	ip, ip
 8020b94:	fb02 b203 	mla	r2, r2, r3, fp
 8020b98:	fb0c e303 	mla	r3, ip, r3, lr
 8020b9c:	b289      	uxth	r1, r1
 8020b9e:	1c48      	adds	r0, r1, #1
 8020ba0:	b292      	uxth	r2, r2
 8020ba2:	b29b      	uxth	r3, r3
 8020ba4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020ba8:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8020bac:	f102 0b01 	add.w	fp, r2, #1
 8020bb0:	1c59      	adds	r1, r3, #1
 8020bb2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020bb6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020bba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8020bbe:	0952      	lsrs	r2, r2, #5
 8020bc0:	4301      	orrs	r1, r0
 8020bc2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020bc6:	4311      	orrs	r1, r2
 8020bc8:	f8a8 1000 	strh.w	r1, [r8]
 8020bcc:	e739      	b.n	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020bce:	f113 0b01 	adds.w	fp, r3, #1
 8020bd2:	f53f af36 	bmi.w	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020bd6:	45dc      	cmp	ip, fp
 8020bd8:	f6ff af33 	blt.w	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020bdc:	f110 0b01 	adds.w	fp, r0, #1
 8020be0:	f53f af2f 	bmi.w	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020be4:	45de      	cmp	lr, fp
 8020be6:	f6ff af2c 	blt.w	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020bea:	9a08      	ldr	r2, [sp, #32]
 8020bec:	9302      	str	r3, [sp, #8]
 8020bee:	fa0f f38e 	sxth.w	r3, lr
 8020bf2:	9301      	str	r3, [sp, #4]
 8020bf4:	fa0f f38c 	sxth.w	r3, ip
 8020bf8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020bfc:	9105      	str	r1, [sp, #20]
 8020bfe:	9300      	str	r3, [sp, #0]
 8020c00:	463a      	mov	r2, r7
 8020c02:	4653      	mov	r3, sl
 8020c04:	4641      	mov	r1, r8
 8020c06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c08:	f7ff fd74 	bl	80206f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8020c0c:	e719      	b.n	8020a42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020c0e:	9906      	ldr	r1, [sp, #24]
 8020c10:	1422      	asrs	r2, r4, #16
 8020c12:	1433      	asrs	r3, r6, #16
 8020c14:	fb01 2303 	mla	r3, r1, r3, r2
 8020c18:	085a      	lsrs	r2, r3, #1
 8020c1a:	5cba      	ldrb	r2, [r7, r2]
 8020c1c:	07d9      	lsls	r1, r3, #31
 8020c1e:	bf54      	ite	pl
 8020c20:	f002 020f 	andpl.w	r2, r2, #15
 8020c24:	1112      	asrmi	r2, r2, #4
 8020c26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020c2a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020c2e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020c32:	b2d2      	uxtb	r2, r2
 8020c34:	2800      	cmp	r0, #0
 8020c36:	d062      	beq.n	8020cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020c38:	f103 0a01 	add.w	sl, r3, #1
 8020c3c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8020c40:	5c79      	ldrb	r1, [r7, r1]
 8020c42:	f01a 0f01 	tst.w	sl, #1
 8020c46:	bf0c      	ite	eq
 8020c48:	f001 010f 	andeq.w	r1, r1, #15
 8020c4c:	1109      	asrne	r1, r1, #4
 8020c4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c52:	b2c9      	uxtb	r1, r1
 8020c54:	910f      	str	r1, [sp, #60]	; 0x3c
 8020c56:	f1bc 0f00 	cmp.w	ip, #0
 8020c5a:	d019      	beq.n	8020c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8020c5c:	9908      	ldr	r1, [sp, #32]
 8020c5e:	440b      	add	r3, r1
 8020c60:	0859      	lsrs	r1, r3, #1
 8020c62:	5c79      	ldrb	r1, [r7, r1]
 8020c64:	f013 0f01 	tst.w	r3, #1
 8020c68:	bf0c      	ite	eq
 8020c6a:	f001 010f 	andeq.w	r1, r1, #15
 8020c6e:	1109      	asrne	r1, r1, #4
 8020c70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c74:	b2c9      	uxtb	r1, r1
 8020c76:	3301      	adds	r3, #1
 8020c78:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c7a:	0859      	lsrs	r1, r3, #1
 8020c7c:	5c79      	ldrb	r1, [r7, r1]
 8020c7e:	07db      	lsls	r3, r3, #31
 8020c80:	bf54      	ite	pl
 8020c82:	f001 010f 	andpl.w	r1, r1, #15
 8020c86:	1109      	asrmi	r1, r1, #4
 8020c88:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c8c:	b2c9      	uxtb	r1, r1
 8020c8e:	9110      	str	r1, [sp, #64]	; 0x40
 8020c90:	b280      	uxth	r0, r0
 8020c92:	fa1f fc8c 	uxth.w	ip, ip
 8020c96:	fb00 f30c 	mul.w	r3, r0, ip
 8020c9a:	0100      	lsls	r0, r0, #4
 8020c9c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8020ca0:	fa1f fc8c 	uxth.w	ip, ip
 8020ca4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8020ca8:	eba1 010c 	sub.w	r1, r1, ip
 8020cac:	fa1f fa81 	uxth.w	sl, r1
 8020cb0:	1ac0      	subs	r0, r0, r3
 8020cb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020cb4:	b280      	uxth	r0, r0
 8020cb6:	4348      	muls	r0, r1
 8020cb8:	fb02 020a 	mla	r2, r2, sl, r0
 8020cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020cbe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8020cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020cc4:	fb03 c302 	mla	r3, r3, r2, ip
 8020cc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ccc:	2bff      	cmp	r3, #255	; 0xff
 8020cce:	d12b      	bne.n	8020d28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8020cd0:	4b13      	ldr	r3, [pc, #76]	; (8020d20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8020cd2:	681a      	ldr	r2, [r3, #0]
 8020cd4:	4b13      	ldr	r3, [pc, #76]	; (8020d24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8020cd6:	0951      	lsrs	r1, r2, #5
 8020cd8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8020cdc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020ce0:	430b      	orrs	r3, r1
 8020ce2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020ce6:	4313      	orrs	r3, r2
 8020ce8:	f8ae 3000 	strh.w	r3, [lr]
 8020cec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020cee:	f10e 0e02 	add.w	lr, lr, #2
 8020cf2:	441c      	add	r4, r3
 8020cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8020cfa:	441e      	add	r6, r3
 8020cfc:	e6ce      	b.n	8020a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020cfe:	f1bc 0f00 	cmp.w	ip, #0
 8020d02:	d0c5      	beq.n	8020c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8020d04:	9908      	ldr	r1, [sp, #32]
 8020d06:	440b      	add	r3, r1
 8020d08:	0859      	lsrs	r1, r3, #1
 8020d0a:	5c79      	ldrb	r1, [r7, r1]
 8020d0c:	07db      	lsls	r3, r3, #31
 8020d0e:	bf54      	ite	pl
 8020d10:	f001 010f 	andpl.w	r1, r1, #15
 8020d14:	1109      	asrmi	r1, r1, #4
 8020d16:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020d1a:	b2c9      	uxtb	r1, r1
 8020d1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8020d1e:	e7b7      	b.n	8020c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8020d20:	2001fda8 	.word	0x2001fda8
 8020d24:	fffff800 	.word	0xfffff800
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d0df      	beq.n	8020cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020d2c:	fa1f fa83 	uxth.w	sl, r3
 8020d30:	43db      	mvns	r3, r3
 8020d32:	4a20      	ldr	r2, [pc, #128]	; (8020db4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8020d34:	f8be c000 	ldrh.w	ip, [lr]
 8020d38:	6810      	ldr	r0, [r2, #0]
 8020d3a:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020d3e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8020d42:	fb12 f20a 	smulbb	r2, r2, sl
 8020d46:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8020d4a:	b2c0      	uxtb	r0, r0
 8020d4c:	fb10 f00a 	smulbb	r0, r0, sl
 8020d50:	b2db      	uxtb	r3, r3
 8020d52:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020d56:	fb01 2103 	mla	r1, r1, r3, r2
 8020d5a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020d5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020d62:	fb1b fb0a 	smulbb	fp, fp, sl
 8020d66:	fa5f fc8c 	uxtb.w	ip, ip
 8020d6a:	fb0c 0003 	mla	r0, ip, r3, r0
 8020d6e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020d72:	fb02 b203 	mla	r2, r2, r3, fp
 8020d76:	b289      	uxth	r1, r1
 8020d78:	b280      	uxth	r0, r0
 8020d7a:	1c4b      	adds	r3, r1, #1
 8020d7c:	f100 0b01 	add.w	fp, r0, #1
 8020d80:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020d84:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8020d88:	b292      	uxth	r2, r2
 8020d8a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020d8e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020d92:	ea4b 0101 	orr.w	r1, fp, r1
 8020d96:	f102 0b01 	add.w	fp, r2, #1
 8020d9a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020d9e:	0952      	lsrs	r2, r2, #5
 8020da0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020da4:	4311      	orrs	r1, r2
 8020da6:	f8ae 1000 	strh.w	r1, [lr]
 8020daa:	e79f      	b.n	8020cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020dac:	b013      	add	sp, #76	; 0x4c
 8020dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020db2:	bf00      	nop
 8020db4:	2001fda8 	.word	0x2001fda8

08020db8 <CRC_Lock>:
 8020db8:	b530      	push	{r4, r5, lr}
 8020dba:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8020dbe:	f24c 2540 	movw	r5, #49728	; 0xc240
 8020dc2:	4a1e      	ldr	r2, [pc, #120]	; (8020e3c <CRC_Lock+0x84>)
 8020dc4:	6813      	ldr	r3, [r2, #0]
 8020dc6:	f023 0301 	bic.w	r3, r3, #1
 8020dca:	6013      	str	r3, [r2, #0]
 8020dcc:	4b1c      	ldr	r3, [pc, #112]	; (8020e40 <CRC_Lock+0x88>)
 8020dce:	681a      	ldr	r2, [r3, #0]
 8020dd0:	4022      	ands	r2, r4
 8020dd2:	42aa      	cmp	r2, r5
 8020dd4:	d005      	beq.n	8020de2 <CRC_Lock+0x2a>
 8020dd6:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020dda:	681b      	ldr	r3, [r3, #0]
 8020ddc:	4023      	ands	r3, r4
 8020dde:	4293      	cmp	r3, r2
 8020de0:	d124      	bne.n	8020e2c <CRC_Lock+0x74>
 8020de2:	4b18      	ldr	r3, [pc, #96]	; (8020e44 <CRC_Lock+0x8c>)
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	bb0b      	cbnz	r3, 8020e2c <CRC_Lock+0x74>
 8020de8:	4b17      	ldr	r3, [pc, #92]	; (8020e48 <CRC_Lock+0x90>)
 8020dea:	681a      	ldr	r2, [r3, #0]
 8020dec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020df0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8020df4:	d00d      	beq.n	8020e12 <CRC_Lock+0x5a>
 8020df6:	f240 4483 	movw	r4, #1155	; 0x483
 8020dfa:	681a      	ldr	r2, [r3, #0]
 8020dfc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020e00:	42a2      	cmp	r2, r4
 8020e02:	d006      	beq.n	8020e12 <CRC_Lock+0x5a>
 8020e04:	f240 4285 	movw	r2, #1157	; 0x485
 8020e08:	681b      	ldr	r3, [r3, #0]
 8020e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020e0e:	4293      	cmp	r3, r2
 8020e10:	d10c      	bne.n	8020e2c <CRC_Lock+0x74>
 8020e12:	2201      	movs	r2, #1
 8020e14:	4b0d      	ldr	r3, [pc, #52]	; (8020e4c <CRC_Lock+0x94>)
 8020e16:	601a      	str	r2, [r3, #0]
 8020e18:	681a      	ldr	r2, [r3, #0]
 8020e1a:	2a00      	cmp	r2, #0
 8020e1c:	d1fc      	bne.n	8020e18 <CRC_Lock+0x60>
 8020e1e:	4b0c      	ldr	r3, [pc, #48]	; (8020e50 <CRC_Lock+0x98>)
 8020e20:	6018      	str	r0, [r3, #0]
 8020e22:	6818      	ldr	r0, [r3, #0]
 8020e24:	1a43      	subs	r3, r0, r1
 8020e26:	4258      	negs	r0, r3
 8020e28:	4158      	adcs	r0, r3
 8020e2a:	bd30      	pop	{r4, r5, pc}
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	4b09      	ldr	r3, [pc, #36]	; (8020e54 <CRC_Lock+0x9c>)
 8020e30:	601a      	str	r2, [r3, #0]
 8020e32:	681a      	ldr	r2, [r3, #0]
 8020e34:	2a00      	cmp	r2, #0
 8020e36:	d1fc      	bne.n	8020e32 <CRC_Lock+0x7a>
 8020e38:	4b07      	ldr	r3, [pc, #28]	; (8020e58 <CRC_Lock+0xa0>)
 8020e3a:	e7f1      	b.n	8020e20 <CRC_Lock+0x68>
 8020e3c:	e0002000 	.word	0xe0002000
 8020e40:	e000ed00 	.word	0xe000ed00
 8020e44:	e0042000 	.word	0xe0042000
 8020e48:	5c001000 	.word	0x5c001000
 8020e4c:	58024c08 	.word	0x58024c08
 8020e50:	58024c00 	.word	0x58024c00
 8020e54:	40023008 	.word	0x40023008
 8020e58:	40023000 	.word	0x40023000

08020e5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020e5c:	6101      	str	r1, [r0, #16]
 8020e5e:	4770      	bx	lr

08020e60 <_ZN8touchgfx8Gestures4tickEv>:
 8020e60:	7b83      	ldrb	r3, [r0, #14]
 8020e62:	b14b      	cbz	r3, 8020e78 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020e64:	8903      	ldrh	r3, [r0, #8]
 8020e66:	3301      	adds	r3, #1
 8020e68:	b29b      	uxth	r3, r3
 8020e6a:	2b07      	cmp	r3, #7
 8020e6c:	8103      	strh	r3, [r0, #8]
 8020e6e:	bf81      	itttt	hi
 8020e70:	2300      	movhi	r3, #0
 8020e72:	8143      	strhhi	r3, [r0, #10]
 8020e74:	8183      	strhhi	r3, [r0, #12]
 8020e76:	7383      	strbhi	r3, [r0, #14]
 8020e78:	4770      	bx	lr
	...

08020e7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020e7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020e80:	4698      	mov	r8, r3
 8020e82:	4604      	mov	r4, r0
 8020e84:	8883      	ldrh	r3, [r0, #4]
 8020e86:	460e      	mov	r6, r1
 8020e88:	88c1      	ldrh	r1, [r0, #6]
 8020e8a:	2000      	movs	r0, #0
 8020e8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020e90:	eba8 0303 	sub.w	r3, r8, r3
 8020e94:	b21b      	sxth	r3, r3
 8020e96:	4617      	mov	r7, r2
 8020e98:	4a17      	ldr	r2, [pc, #92]	; (8020ef8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	bfb8      	it	lt
 8020e9e:	425b      	neglt	r3, r3
 8020ea0:	9200      	str	r2, [sp, #0]
 8020ea2:	8aa2      	ldrh	r2, [r4, #20]
 8020ea4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020ea8:	b21b      	sxth	r3, r3
 8020eaa:	4293      	cmp	r3, r2
 8020eac:	f88d 0004 	strb.w	r0, [sp, #4]
 8020eb0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020eb4:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020eb8:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020ebc:	dc07      	bgt.n	8020ece <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8020ebe:	1a69      	subs	r1, r5, r1
 8020ec0:	b209      	sxth	r1, r1
 8020ec2:	2900      	cmp	r1, #0
 8020ec4:	bfb8      	it	lt
 8020ec6:	4249      	neglt	r1, r1
 8020ec8:	b209      	sxth	r1, r1
 8020eca:	428a      	cmp	r2, r1
 8020ecc:	da10      	bge.n	8020ef0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8020ece:	6920      	ldr	r0, [r4, #16]
 8020ed0:	4669      	mov	r1, sp
 8020ed2:	6803      	ldr	r3, [r0, #0]
 8020ed4:	eba8 0606 	sub.w	r6, r8, r6
 8020ed8:	685b      	ldr	r3, [r3, #4]
 8020eda:	4798      	blx	r3
 8020edc:	2300      	movs	r3, #0
 8020ede:	2001      	movs	r0, #1
 8020ee0:	1bef      	subs	r7, r5, r7
 8020ee2:	8123      	strh	r3, [r4, #8]
 8020ee4:	8166      	strh	r6, [r4, #10]
 8020ee6:	81a7      	strh	r7, [r4, #12]
 8020ee8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020eec:	80e5      	strh	r5, [r4, #6]
 8020eee:	73a0      	strb	r0, [r4, #14]
 8020ef0:	b004      	add	sp, #16
 8020ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ef6:	bf00      	nop
 8020ef8:	0802396c 	.word	0x0802396c

08020efc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020efe:	461e      	mov	r6, r3
 8020f00:	1e4b      	subs	r3, r1, #1
 8020f02:	2b01      	cmp	r3, #1
 8020f04:	b085      	sub	sp, #20
 8020f06:	4604      	mov	r4, r0
 8020f08:	460d      	mov	r5, r1
 8020f0a:	4617      	mov	r7, r2
 8020f0c:	d84b      	bhi.n	8020fa6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020f0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020f12:	1cd3      	adds	r3, r2, #3
 8020f14:	b29b      	uxth	r3, r3
 8020f16:	2b06      	cmp	r3, #6
 8020f18:	d916      	bls.n	8020f48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020f1a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8020fbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020f1e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020f22:	f8cd c004 	str.w	ip, [sp, #4]
 8020f26:	f04f 0c00 	mov.w	ip, #0
 8020f2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020f2e:	6900      	ldr	r0, [r0, #16]
 8020f30:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020f34:	f88d c008 	strb.w	ip, [sp, #8]
 8020f38:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020f3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f40:	6803      	ldr	r3, [r0, #0]
 8020f42:	a901      	add	r1, sp, #4
 8020f44:	689b      	ldr	r3, [r3, #8]
 8020f46:	4798      	blx	r3
 8020f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f4c:	1cd3      	adds	r3, r2, #3
 8020f4e:	b29b      	uxth	r3, r3
 8020f50:	2b06      	cmp	r3, #6
 8020f52:	d916      	bls.n	8020f82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020f54:	f8df c064 	ldr.w	ip, [pc, #100]	; 8020fbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020f58:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020f5c:	f8cd c004 	str.w	ip, [sp, #4]
 8020f60:	f04f 0c01 	mov.w	ip, #1
 8020f64:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020f68:	6920      	ldr	r0, [r4, #16]
 8020f6a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020f6e:	f88d c008 	strb.w	ip, [sp, #8]
 8020f72:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020f76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f7a:	6803      	ldr	r3, [r0, #0]
 8020f7c:	a901      	add	r1, sp, #4
 8020f7e:	689b      	ldr	r3, [r3, #8]
 8020f80:	4798      	blx	r3
 8020f82:	4b0d      	ldr	r3, [pc, #52]	; (8020fb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020f84:	6920      	ldr	r0, [r4, #16]
 8020f86:	9301      	str	r3, [sp, #4]
 8020f88:	2300      	movs	r3, #0
 8020f8a:	f88d 5008 	strb.w	r5, [sp, #8]
 8020f8e:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020f92:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020f96:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f9a:	6803      	ldr	r3, [r0, #0]
 8020f9c:	a901      	add	r1, sp, #4
 8020f9e:	681b      	ldr	r3, [r3, #0]
 8020fa0:	4798      	blx	r3
 8020fa2:	b005      	add	sp, #20
 8020fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fa6:	2900      	cmp	r1, #0
 8020fa8:	d1eb      	bne.n	8020f82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020faa:	80a2      	strh	r2, [r4, #4]
 8020fac:	80c6      	strh	r6, [r0, #6]
 8020fae:	60a1      	str	r1, [r4, #8]
 8020fb0:	81a1      	strh	r1, [r4, #12]
 8020fb2:	73a1      	strb	r1, [r4, #14]
 8020fb4:	e7e5      	b.n	8020f82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020fb6:	bf00      	nop
 8020fb8:	08023958 	.word	0x08023958
 8020fbc:	08023980 	.word	0x08023980

08020fc0 <__aeabi_atexit>:
 8020fc0:	460b      	mov	r3, r1
 8020fc2:	4601      	mov	r1, r0
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	f000 b851 	b.w	802106c <__cxa_atexit>

08020fca <_ZdlPvj>:
 8020fca:	f000 b812 	b.w	8020ff2 <_ZdlPv>

08020fce <__cxa_guard_acquire>:
 8020fce:	6803      	ldr	r3, [r0, #0]
 8020fd0:	07db      	lsls	r3, r3, #31
 8020fd2:	d406      	bmi.n	8020fe2 <__cxa_guard_acquire+0x14>
 8020fd4:	7843      	ldrb	r3, [r0, #1]
 8020fd6:	b103      	cbz	r3, 8020fda <__cxa_guard_acquire+0xc>
 8020fd8:	deff      	udf	#255	; 0xff
 8020fda:	2301      	movs	r3, #1
 8020fdc:	7043      	strb	r3, [r0, #1]
 8020fde:	4618      	mov	r0, r3
 8020fe0:	4770      	bx	lr
 8020fe2:	2000      	movs	r0, #0
 8020fe4:	4770      	bx	lr

08020fe6 <__cxa_guard_release>:
 8020fe6:	2301      	movs	r3, #1
 8020fe8:	6003      	str	r3, [r0, #0]
 8020fea:	4770      	bx	lr

08020fec <__cxa_pure_virtual>:
 8020fec:	b508      	push	{r3, lr}
 8020fee:	f000 f80d 	bl	802100c <_ZSt9terminatev>

08020ff2 <_ZdlPv>:
 8020ff2:	f000 b987 	b.w	8021304 <free>

08020ff6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020ff6:	b508      	push	{r3, lr}
 8020ff8:	4780      	blx	r0
 8020ffa:	f000 f80c 	bl	8021016 <abort>
	...

08021000 <_ZSt13get_terminatev>:
 8021000:	4b01      	ldr	r3, [pc, #4]	; (8021008 <_ZSt13get_terminatev+0x8>)
 8021002:	e8d3 0faf 	lda	r0, [r3]
 8021006:	4770      	bx	lr
 8021008:	20000090 	.word	0x20000090

0802100c <_ZSt9terminatev>:
 802100c:	b508      	push	{r3, lr}
 802100e:	f7ff fff7 	bl	8021000 <_ZSt13get_terminatev>
 8021012:	f7ff fff0 	bl	8020ff6 <_ZN10__cxxabiv111__terminateEPFvvE>

08021016 <abort>:
 8021016:	2006      	movs	r0, #6
 8021018:	b508      	push	{r3, lr}
 802101a:	f000 fe03 	bl	8021c24 <raise>
 802101e:	2001      	movs	r0, #1
 8021020:	f7e0 fe08 	bl	8001c34 <_exit>

08021024 <__assert_func>:
 8021024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021026:	4614      	mov	r4, r2
 8021028:	461a      	mov	r2, r3
 802102a:	4b09      	ldr	r3, [pc, #36]	; (8021050 <__assert_func+0x2c>)
 802102c:	4605      	mov	r5, r0
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	68d8      	ldr	r0, [r3, #12]
 8021032:	b14c      	cbz	r4, 8021048 <__assert_func+0x24>
 8021034:	4b07      	ldr	r3, [pc, #28]	; (8021054 <__assert_func+0x30>)
 8021036:	9100      	str	r1, [sp, #0]
 8021038:	4907      	ldr	r1, [pc, #28]	; (8021058 <__assert_func+0x34>)
 802103a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802103e:	462b      	mov	r3, r5
 8021040:	f000 f8fe 	bl	8021240 <fiprintf>
 8021044:	f7ff ffe7 	bl	8021016 <abort>
 8021048:	4b04      	ldr	r3, [pc, #16]	; (802105c <__assert_func+0x38>)
 802104a:	461c      	mov	r4, r3
 802104c:	e7f3      	b.n	8021036 <__assert_func+0x12>
 802104e:	bf00      	nop
 8021050:	20000094 	.word	0x20000094
 8021054:	08023c48 	.word	0x08023c48
 8021058:	08023c55 	.word	0x08023c55
 802105c:	08023c83 	.word	0x08023c83

08021060 <atexit>:
 8021060:	2300      	movs	r3, #0
 8021062:	4601      	mov	r1, r0
 8021064:	461a      	mov	r2, r3
 8021066:	4618      	mov	r0, r3
 8021068:	f000 bf0e 	b.w	8021e88 <__register_exitproc>

0802106c <__cxa_atexit>:
 802106c:	b510      	push	{r4, lr}
 802106e:	4c05      	ldr	r4, [pc, #20]	; (8021084 <__cxa_atexit+0x18>)
 8021070:	4613      	mov	r3, r2
 8021072:	b12c      	cbz	r4, 8021080 <__cxa_atexit+0x14>
 8021074:	460a      	mov	r2, r1
 8021076:	4601      	mov	r1, r0
 8021078:	2002      	movs	r0, #2
 802107a:	f000 ff05 	bl	8021e88 <__register_exitproc>
 802107e:	bd10      	pop	{r4, pc}
 8021080:	4620      	mov	r0, r4
 8021082:	e7fc      	b.n	802107e <__cxa_atexit+0x12>
 8021084:	08021e89 	.word	0x08021e89

08021088 <__errno>:
 8021088:	4b01      	ldr	r3, [pc, #4]	; (8021090 <__errno+0x8>)
 802108a:	6818      	ldr	r0, [r3, #0]
 802108c:	4770      	bx	lr
 802108e:	bf00      	nop
 8021090:	20000094 	.word	0x20000094

08021094 <std>:
 8021094:	2300      	movs	r3, #0
 8021096:	b510      	push	{r4, lr}
 8021098:	4604      	mov	r4, r0
 802109a:	6083      	str	r3, [r0, #8]
 802109c:	8181      	strh	r1, [r0, #12]
 802109e:	4619      	mov	r1, r3
 80210a0:	6643      	str	r3, [r0, #100]	; 0x64
 80210a2:	81c2      	strh	r2, [r0, #14]
 80210a4:	2208      	movs	r2, #8
 80210a6:	6183      	str	r3, [r0, #24]
 80210a8:	e9c0 3300 	strd	r3, r3, [r0]
 80210ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80210b0:	305c      	adds	r0, #92	; 0x5c
 80210b2:	f000 f93c 	bl	802132e <memset>
 80210b6:	4b05      	ldr	r3, [pc, #20]	; (80210cc <std+0x38>)
 80210b8:	6224      	str	r4, [r4, #32]
 80210ba:	6263      	str	r3, [r4, #36]	; 0x24
 80210bc:	4b04      	ldr	r3, [pc, #16]	; (80210d0 <std+0x3c>)
 80210be:	62a3      	str	r3, [r4, #40]	; 0x28
 80210c0:	4b04      	ldr	r3, [pc, #16]	; (80210d4 <std+0x40>)
 80210c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80210c4:	4b04      	ldr	r3, [pc, #16]	; (80210d8 <std+0x44>)
 80210c6:	6323      	str	r3, [r4, #48]	; 0x30
 80210c8:	bd10      	pop	{r4, pc}
 80210ca:	bf00      	nop
 80210cc:	08021c5d 	.word	0x08021c5d
 80210d0:	08021c7f 	.word	0x08021c7f
 80210d4:	08021cb7 	.word	0x08021cb7
 80210d8:	08021cdb 	.word	0x08021cdb

080210dc <_cleanup_r>:
 80210dc:	4901      	ldr	r1, [pc, #4]	; (80210e4 <_cleanup_r+0x8>)
 80210de:	f000 b8c1 	b.w	8021264 <_fwalk_reent>
 80210e2:	bf00      	nop
 80210e4:	08022079 	.word	0x08022079

080210e8 <__sfmoreglue>:
 80210e8:	b570      	push	{r4, r5, r6, lr}
 80210ea:	2268      	movs	r2, #104	; 0x68
 80210ec:	1e4d      	subs	r5, r1, #1
 80210ee:	460e      	mov	r6, r1
 80210f0:	4355      	muls	r5, r2
 80210f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80210f6:	f000 f98f 	bl	8021418 <_malloc_r>
 80210fa:	4604      	mov	r4, r0
 80210fc:	b140      	cbz	r0, 8021110 <__sfmoreglue+0x28>
 80210fe:	2100      	movs	r1, #0
 8021100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021104:	e9c0 1600 	strd	r1, r6, [r0]
 8021108:	300c      	adds	r0, #12
 802110a:	60a0      	str	r0, [r4, #8]
 802110c:	f000 f90f 	bl	802132e <memset>
 8021110:	4620      	mov	r0, r4
 8021112:	bd70      	pop	{r4, r5, r6, pc}

08021114 <__sfp_lock_acquire>:
 8021114:	4801      	ldr	r0, [pc, #4]	; (802111c <__sfp_lock_acquire+0x8>)
 8021116:	f000 b8ea 	b.w	80212ee <__retarget_lock_acquire_recursive>
 802111a:	bf00      	nop
 802111c:	2001fe9e 	.word	0x2001fe9e

08021120 <__sfp_lock_release>:
 8021120:	4801      	ldr	r0, [pc, #4]	; (8021128 <__sfp_lock_release+0x8>)
 8021122:	f000 b8e6 	b.w	80212f2 <__retarget_lock_release_recursive>
 8021126:	bf00      	nop
 8021128:	2001fe9e 	.word	0x2001fe9e

0802112c <__sinit_lock_acquire>:
 802112c:	4801      	ldr	r0, [pc, #4]	; (8021134 <__sinit_lock_acquire+0x8>)
 802112e:	f000 b8de 	b.w	80212ee <__retarget_lock_acquire_recursive>
 8021132:	bf00      	nop
 8021134:	2001fe9f 	.word	0x2001fe9f

08021138 <__sinit_lock_release>:
 8021138:	4801      	ldr	r0, [pc, #4]	; (8021140 <__sinit_lock_release+0x8>)
 802113a:	f000 b8da 	b.w	80212f2 <__retarget_lock_release_recursive>
 802113e:	bf00      	nop
 8021140:	2001fe9f 	.word	0x2001fe9f

08021144 <__sinit>:
 8021144:	b510      	push	{r4, lr}
 8021146:	4604      	mov	r4, r0
 8021148:	f7ff fff0 	bl	802112c <__sinit_lock_acquire>
 802114c:	69a3      	ldr	r3, [r4, #24]
 802114e:	b11b      	cbz	r3, 8021158 <__sinit+0x14>
 8021150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021154:	f7ff bff0 	b.w	8021138 <__sinit_lock_release>
 8021158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802115c:	6523      	str	r3, [r4, #80]	; 0x50
 802115e:	4620      	mov	r0, r4
 8021160:	4b12      	ldr	r3, [pc, #72]	; (80211ac <__sinit+0x68>)
 8021162:	4a13      	ldr	r2, [pc, #76]	; (80211b0 <__sinit+0x6c>)
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	62a2      	str	r2, [r4, #40]	; 0x28
 8021168:	42a3      	cmp	r3, r4
 802116a:	bf04      	itt	eq
 802116c:	2301      	moveq	r3, #1
 802116e:	61a3      	streq	r3, [r4, #24]
 8021170:	f000 f820 	bl	80211b4 <__sfp>
 8021174:	6060      	str	r0, [r4, #4]
 8021176:	4620      	mov	r0, r4
 8021178:	f000 f81c 	bl	80211b4 <__sfp>
 802117c:	60a0      	str	r0, [r4, #8]
 802117e:	4620      	mov	r0, r4
 8021180:	f000 f818 	bl	80211b4 <__sfp>
 8021184:	2200      	movs	r2, #0
 8021186:	2104      	movs	r1, #4
 8021188:	60e0      	str	r0, [r4, #12]
 802118a:	6860      	ldr	r0, [r4, #4]
 802118c:	f7ff ff82 	bl	8021094 <std>
 8021190:	2201      	movs	r2, #1
 8021192:	2109      	movs	r1, #9
 8021194:	68a0      	ldr	r0, [r4, #8]
 8021196:	f7ff ff7d 	bl	8021094 <std>
 802119a:	2202      	movs	r2, #2
 802119c:	2112      	movs	r1, #18
 802119e:	68e0      	ldr	r0, [r4, #12]
 80211a0:	f7ff ff78 	bl	8021094 <std>
 80211a4:	2301      	movs	r3, #1
 80211a6:	61a3      	str	r3, [r4, #24]
 80211a8:	e7d2      	b.n	8021150 <__sinit+0xc>
 80211aa:	bf00      	nop
 80211ac:	08023ce4 	.word	0x08023ce4
 80211b0:	080210dd 	.word	0x080210dd

080211b4 <__sfp>:
 80211b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211b6:	4607      	mov	r7, r0
 80211b8:	f7ff ffac 	bl	8021114 <__sfp_lock_acquire>
 80211bc:	4b1e      	ldr	r3, [pc, #120]	; (8021238 <__sfp+0x84>)
 80211be:	681e      	ldr	r6, [r3, #0]
 80211c0:	69b3      	ldr	r3, [r6, #24]
 80211c2:	b913      	cbnz	r3, 80211ca <__sfp+0x16>
 80211c4:	4630      	mov	r0, r6
 80211c6:	f7ff ffbd 	bl	8021144 <__sinit>
 80211ca:	3648      	adds	r6, #72	; 0x48
 80211cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80211d0:	3b01      	subs	r3, #1
 80211d2:	d503      	bpl.n	80211dc <__sfp+0x28>
 80211d4:	6833      	ldr	r3, [r6, #0]
 80211d6:	b30b      	cbz	r3, 802121c <__sfp+0x68>
 80211d8:	6836      	ldr	r6, [r6, #0]
 80211da:	e7f7      	b.n	80211cc <__sfp+0x18>
 80211dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80211e0:	b9d5      	cbnz	r5, 8021218 <__sfp+0x64>
 80211e2:	4b16      	ldr	r3, [pc, #88]	; (802123c <__sfp+0x88>)
 80211e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80211e8:	6665      	str	r5, [r4, #100]	; 0x64
 80211ea:	60e3      	str	r3, [r4, #12]
 80211ec:	f000 f87e 	bl	80212ec <__retarget_lock_init_recursive>
 80211f0:	f7ff ff96 	bl	8021120 <__sfp_lock_release>
 80211f4:	2208      	movs	r2, #8
 80211f6:	4629      	mov	r1, r5
 80211f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80211fc:	6025      	str	r5, [r4, #0]
 80211fe:	61a5      	str	r5, [r4, #24]
 8021200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021208:	f000 f891 	bl	802132e <memset>
 802120c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021214:	4620      	mov	r0, r4
 8021216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021218:	3468      	adds	r4, #104	; 0x68
 802121a:	e7d9      	b.n	80211d0 <__sfp+0x1c>
 802121c:	2104      	movs	r1, #4
 802121e:	4638      	mov	r0, r7
 8021220:	f7ff ff62 	bl	80210e8 <__sfmoreglue>
 8021224:	4604      	mov	r4, r0
 8021226:	6030      	str	r0, [r6, #0]
 8021228:	2800      	cmp	r0, #0
 802122a:	d1d5      	bne.n	80211d8 <__sfp+0x24>
 802122c:	f7ff ff78 	bl	8021120 <__sfp_lock_release>
 8021230:	230c      	movs	r3, #12
 8021232:	603b      	str	r3, [r7, #0]
 8021234:	e7ee      	b.n	8021214 <__sfp+0x60>
 8021236:	bf00      	nop
 8021238:	08023ce4 	.word	0x08023ce4
 802123c:	ffff0001 	.word	0xffff0001

08021240 <fiprintf>:
 8021240:	b40e      	push	{r1, r2, r3}
 8021242:	b503      	push	{r0, r1, lr}
 8021244:	ab03      	add	r3, sp, #12
 8021246:	4601      	mov	r1, r0
 8021248:	4805      	ldr	r0, [pc, #20]	; (8021260 <fiprintf+0x20>)
 802124a:	f853 2b04 	ldr.w	r2, [r3], #4
 802124e:	6800      	ldr	r0, [r0, #0]
 8021250:	9301      	str	r3, [sp, #4]
 8021252:	f000 f97f 	bl	8021554 <_vfiprintf_r>
 8021256:	b002      	add	sp, #8
 8021258:	f85d eb04 	ldr.w	lr, [sp], #4
 802125c:	b003      	add	sp, #12
 802125e:	4770      	bx	lr
 8021260:	20000094 	.word	0x20000094

08021264 <_fwalk_reent>:
 8021264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021268:	4606      	mov	r6, r0
 802126a:	4688      	mov	r8, r1
 802126c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021270:	2700      	movs	r7, #0
 8021272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021276:	f1b9 0901 	subs.w	r9, r9, #1
 802127a:	d505      	bpl.n	8021288 <_fwalk_reent+0x24>
 802127c:	6824      	ldr	r4, [r4, #0]
 802127e:	2c00      	cmp	r4, #0
 8021280:	d1f7      	bne.n	8021272 <_fwalk_reent+0xe>
 8021282:	4638      	mov	r0, r7
 8021284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021288:	89ab      	ldrh	r3, [r5, #12]
 802128a:	2b01      	cmp	r3, #1
 802128c:	d907      	bls.n	802129e <_fwalk_reent+0x3a>
 802128e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021292:	3301      	adds	r3, #1
 8021294:	d003      	beq.n	802129e <_fwalk_reent+0x3a>
 8021296:	4629      	mov	r1, r5
 8021298:	4630      	mov	r0, r6
 802129a:	47c0      	blx	r8
 802129c:	4307      	orrs	r7, r0
 802129e:	3568      	adds	r5, #104	; 0x68
 80212a0:	e7e9      	b.n	8021276 <_fwalk_reent+0x12>
	...

080212a4 <__libc_init_array>:
 80212a4:	b570      	push	{r4, r5, r6, lr}
 80212a6:	4d0d      	ldr	r5, [pc, #52]	; (80212dc <__libc_init_array+0x38>)
 80212a8:	2600      	movs	r6, #0
 80212aa:	4c0d      	ldr	r4, [pc, #52]	; (80212e0 <__libc_init_array+0x3c>)
 80212ac:	1b64      	subs	r4, r4, r5
 80212ae:	10a4      	asrs	r4, r4, #2
 80212b0:	42a6      	cmp	r6, r4
 80212b2:	d109      	bne.n	80212c8 <__libc_init_array+0x24>
 80212b4:	4d0b      	ldr	r5, [pc, #44]	; (80212e4 <__libc_init_array+0x40>)
 80212b6:	2600      	movs	r6, #0
 80212b8:	4c0b      	ldr	r4, [pc, #44]	; (80212e8 <__libc_init_array+0x44>)
 80212ba:	f000 ffdf 	bl	802227c <_init>
 80212be:	1b64      	subs	r4, r4, r5
 80212c0:	10a4      	asrs	r4, r4, #2
 80212c2:	42a6      	cmp	r6, r4
 80212c4:	d105      	bne.n	80212d2 <__libc_init_array+0x2e>
 80212c6:	bd70      	pop	{r4, r5, r6, pc}
 80212c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80212cc:	3601      	adds	r6, #1
 80212ce:	4798      	blx	r3
 80212d0:	e7ee      	b.n	80212b0 <__libc_init_array+0xc>
 80212d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80212d6:	3601      	adds	r6, #1
 80212d8:	4798      	blx	r3
 80212da:	e7f2      	b.n	80212c2 <__libc_init_array+0x1e>
 80212dc:	080577f8 	.word	0x080577f8
 80212e0:	080577f8 	.word	0x080577f8
 80212e4:	080577f8 	.word	0x080577f8
 80212e8:	0805780c 	.word	0x0805780c

080212ec <__retarget_lock_init_recursive>:
 80212ec:	4770      	bx	lr

080212ee <__retarget_lock_acquire_recursive>:
 80212ee:	4770      	bx	lr

080212f0 <__retarget_lock_release>:
 80212f0:	4770      	bx	lr

080212f2 <__retarget_lock_release_recursive>:
 80212f2:	4770      	bx	lr

080212f4 <malloc>:
 80212f4:	4b02      	ldr	r3, [pc, #8]	; (8021300 <malloc+0xc>)
 80212f6:	4601      	mov	r1, r0
 80212f8:	6818      	ldr	r0, [r3, #0]
 80212fa:	f000 b88d 	b.w	8021418 <_malloc_r>
 80212fe:	bf00      	nop
 8021300:	20000094 	.word	0x20000094

08021304 <free>:
 8021304:	4b02      	ldr	r3, [pc, #8]	; (8021310 <free+0xc>)
 8021306:	4601      	mov	r1, r0
 8021308:	6818      	ldr	r0, [r3, #0]
 802130a:	f000 b819 	b.w	8021340 <_free_r>
 802130e:	bf00      	nop
 8021310:	20000094 	.word	0x20000094

08021314 <memcpy>:
 8021314:	440a      	add	r2, r1
 8021316:	1e43      	subs	r3, r0, #1
 8021318:	4291      	cmp	r1, r2
 802131a:	d100      	bne.n	802131e <memcpy+0xa>
 802131c:	4770      	bx	lr
 802131e:	b510      	push	{r4, lr}
 8021320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021324:	4291      	cmp	r1, r2
 8021326:	f803 4f01 	strb.w	r4, [r3, #1]!
 802132a:	d1f9      	bne.n	8021320 <memcpy+0xc>
 802132c:	bd10      	pop	{r4, pc}

0802132e <memset>:
 802132e:	4402      	add	r2, r0
 8021330:	4603      	mov	r3, r0
 8021332:	4293      	cmp	r3, r2
 8021334:	d100      	bne.n	8021338 <memset+0xa>
 8021336:	4770      	bx	lr
 8021338:	f803 1b01 	strb.w	r1, [r3], #1
 802133c:	e7f9      	b.n	8021332 <memset+0x4>
	...

08021340 <_free_r>:
 8021340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021342:	2900      	cmp	r1, #0
 8021344:	d043      	beq.n	80213ce <_free_r+0x8e>
 8021346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802134a:	1f0c      	subs	r4, r1, #4
 802134c:	9001      	str	r0, [sp, #4]
 802134e:	2b00      	cmp	r3, #0
 8021350:	bfb8      	it	lt
 8021352:	18e4      	addlt	r4, r4, r3
 8021354:	f000 ff52 	bl	80221fc <__malloc_lock>
 8021358:	4a1e      	ldr	r2, [pc, #120]	; (80213d4 <_free_r+0x94>)
 802135a:	9801      	ldr	r0, [sp, #4]
 802135c:	6813      	ldr	r3, [r2, #0]
 802135e:	b933      	cbnz	r3, 802136e <_free_r+0x2e>
 8021360:	6063      	str	r3, [r4, #4]
 8021362:	6014      	str	r4, [r2, #0]
 8021364:	b003      	add	sp, #12
 8021366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802136a:	f000 bf4d 	b.w	8022208 <__malloc_unlock>
 802136e:	42a3      	cmp	r3, r4
 8021370:	d908      	bls.n	8021384 <_free_r+0x44>
 8021372:	6825      	ldr	r5, [r4, #0]
 8021374:	1961      	adds	r1, r4, r5
 8021376:	428b      	cmp	r3, r1
 8021378:	bf01      	itttt	eq
 802137a:	6819      	ldreq	r1, [r3, #0]
 802137c:	685b      	ldreq	r3, [r3, #4]
 802137e:	1949      	addeq	r1, r1, r5
 8021380:	6021      	streq	r1, [r4, #0]
 8021382:	e7ed      	b.n	8021360 <_free_r+0x20>
 8021384:	461a      	mov	r2, r3
 8021386:	685b      	ldr	r3, [r3, #4]
 8021388:	b10b      	cbz	r3, 802138e <_free_r+0x4e>
 802138a:	42a3      	cmp	r3, r4
 802138c:	d9fa      	bls.n	8021384 <_free_r+0x44>
 802138e:	6811      	ldr	r1, [r2, #0]
 8021390:	1855      	adds	r5, r2, r1
 8021392:	42a5      	cmp	r5, r4
 8021394:	d10b      	bne.n	80213ae <_free_r+0x6e>
 8021396:	6824      	ldr	r4, [r4, #0]
 8021398:	4421      	add	r1, r4
 802139a:	1854      	adds	r4, r2, r1
 802139c:	6011      	str	r1, [r2, #0]
 802139e:	42a3      	cmp	r3, r4
 80213a0:	d1e0      	bne.n	8021364 <_free_r+0x24>
 80213a2:	681c      	ldr	r4, [r3, #0]
 80213a4:	685b      	ldr	r3, [r3, #4]
 80213a6:	4421      	add	r1, r4
 80213a8:	6053      	str	r3, [r2, #4]
 80213aa:	6011      	str	r1, [r2, #0]
 80213ac:	e7da      	b.n	8021364 <_free_r+0x24>
 80213ae:	d902      	bls.n	80213b6 <_free_r+0x76>
 80213b0:	230c      	movs	r3, #12
 80213b2:	6003      	str	r3, [r0, #0]
 80213b4:	e7d6      	b.n	8021364 <_free_r+0x24>
 80213b6:	6825      	ldr	r5, [r4, #0]
 80213b8:	1961      	adds	r1, r4, r5
 80213ba:	428b      	cmp	r3, r1
 80213bc:	bf02      	ittt	eq
 80213be:	6819      	ldreq	r1, [r3, #0]
 80213c0:	685b      	ldreq	r3, [r3, #4]
 80213c2:	1949      	addeq	r1, r1, r5
 80213c4:	6063      	str	r3, [r4, #4]
 80213c6:	bf08      	it	eq
 80213c8:	6021      	streq	r1, [r4, #0]
 80213ca:	6054      	str	r4, [r2, #4]
 80213cc:	e7ca      	b.n	8021364 <_free_r+0x24>
 80213ce:	b003      	add	sp, #12
 80213d0:	bd30      	pop	{r4, r5, pc}
 80213d2:	bf00      	nop
 80213d4:	2001fea0 	.word	0x2001fea0

080213d8 <sbrk_aligned>:
 80213d8:	b570      	push	{r4, r5, r6, lr}
 80213da:	4e0e      	ldr	r6, [pc, #56]	; (8021414 <sbrk_aligned+0x3c>)
 80213dc:	460c      	mov	r4, r1
 80213de:	4605      	mov	r5, r0
 80213e0:	6831      	ldr	r1, [r6, #0]
 80213e2:	b911      	cbnz	r1, 80213ea <sbrk_aligned+0x12>
 80213e4:	f000 fbe6 	bl	8021bb4 <_sbrk_r>
 80213e8:	6030      	str	r0, [r6, #0]
 80213ea:	4621      	mov	r1, r4
 80213ec:	4628      	mov	r0, r5
 80213ee:	f000 fbe1 	bl	8021bb4 <_sbrk_r>
 80213f2:	1c43      	adds	r3, r0, #1
 80213f4:	d00a      	beq.n	802140c <sbrk_aligned+0x34>
 80213f6:	1cc4      	adds	r4, r0, #3
 80213f8:	f024 0403 	bic.w	r4, r4, #3
 80213fc:	42a0      	cmp	r0, r4
 80213fe:	d007      	beq.n	8021410 <sbrk_aligned+0x38>
 8021400:	1a21      	subs	r1, r4, r0
 8021402:	4628      	mov	r0, r5
 8021404:	f000 fbd6 	bl	8021bb4 <_sbrk_r>
 8021408:	3001      	adds	r0, #1
 802140a:	d101      	bne.n	8021410 <sbrk_aligned+0x38>
 802140c:	f04f 34ff 	mov.w	r4, #4294967295
 8021410:	4620      	mov	r0, r4
 8021412:	bd70      	pop	{r4, r5, r6, pc}
 8021414:	2001fea4 	.word	0x2001fea4

08021418 <_malloc_r>:
 8021418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802141c:	1ccd      	adds	r5, r1, #3
 802141e:	4607      	mov	r7, r0
 8021420:	f025 0503 	bic.w	r5, r5, #3
 8021424:	3508      	adds	r5, #8
 8021426:	2d0c      	cmp	r5, #12
 8021428:	bf38      	it	cc
 802142a:	250c      	movcc	r5, #12
 802142c:	2d00      	cmp	r5, #0
 802142e:	db01      	blt.n	8021434 <_malloc_r+0x1c>
 8021430:	42a9      	cmp	r1, r5
 8021432:	d905      	bls.n	8021440 <_malloc_r+0x28>
 8021434:	230c      	movs	r3, #12
 8021436:	2600      	movs	r6, #0
 8021438:	603b      	str	r3, [r7, #0]
 802143a:	4630      	mov	r0, r6
 802143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021440:	4e2e      	ldr	r6, [pc, #184]	; (80214fc <_malloc_r+0xe4>)
 8021442:	f000 fedb 	bl	80221fc <__malloc_lock>
 8021446:	6833      	ldr	r3, [r6, #0]
 8021448:	461c      	mov	r4, r3
 802144a:	bb34      	cbnz	r4, 802149a <_malloc_r+0x82>
 802144c:	4629      	mov	r1, r5
 802144e:	4638      	mov	r0, r7
 8021450:	f7ff ffc2 	bl	80213d8 <sbrk_aligned>
 8021454:	1c43      	adds	r3, r0, #1
 8021456:	4604      	mov	r4, r0
 8021458:	d14d      	bne.n	80214f6 <_malloc_r+0xde>
 802145a:	6834      	ldr	r4, [r6, #0]
 802145c:	4626      	mov	r6, r4
 802145e:	2e00      	cmp	r6, #0
 8021460:	d140      	bne.n	80214e4 <_malloc_r+0xcc>
 8021462:	6823      	ldr	r3, [r4, #0]
 8021464:	4631      	mov	r1, r6
 8021466:	4638      	mov	r0, r7
 8021468:	eb04 0803 	add.w	r8, r4, r3
 802146c:	f000 fba2 	bl	8021bb4 <_sbrk_r>
 8021470:	4580      	cmp	r8, r0
 8021472:	d13a      	bne.n	80214ea <_malloc_r+0xd2>
 8021474:	6821      	ldr	r1, [r4, #0]
 8021476:	3503      	adds	r5, #3
 8021478:	4638      	mov	r0, r7
 802147a:	1a6d      	subs	r5, r5, r1
 802147c:	f025 0503 	bic.w	r5, r5, #3
 8021480:	3508      	adds	r5, #8
 8021482:	2d0c      	cmp	r5, #12
 8021484:	bf38      	it	cc
 8021486:	250c      	movcc	r5, #12
 8021488:	4629      	mov	r1, r5
 802148a:	f7ff ffa5 	bl	80213d8 <sbrk_aligned>
 802148e:	3001      	adds	r0, #1
 8021490:	d02b      	beq.n	80214ea <_malloc_r+0xd2>
 8021492:	6823      	ldr	r3, [r4, #0]
 8021494:	442b      	add	r3, r5
 8021496:	6023      	str	r3, [r4, #0]
 8021498:	e00e      	b.n	80214b8 <_malloc_r+0xa0>
 802149a:	6822      	ldr	r2, [r4, #0]
 802149c:	1b52      	subs	r2, r2, r5
 802149e:	d41e      	bmi.n	80214de <_malloc_r+0xc6>
 80214a0:	2a0b      	cmp	r2, #11
 80214a2:	d916      	bls.n	80214d2 <_malloc_r+0xba>
 80214a4:	1961      	adds	r1, r4, r5
 80214a6:	42a3      	cmp	r3, r4
 80214a8:	6025      	str	r5, [r4, #0]
 80214aa:	bf18      	it	ne
 80214ac:	6059      	strne	r1, [r3, #4]
 80214ae:	6863      	ldr	r3, [r4, #4]
 80214b0:	bf08      	it	eq
 80214b2:	6031      	streq	r1, [r6, #0]
 80214b4:	5162      	str	r2, [r4, r5]
 80214b6:	604b      	str	r3, [r1, #4]
 80214b8:	f104 060b 	add.w	r6, r4, #11
 80214bc:	4638      	mov	r0, r7
 80214be:	f000 fea3 	bl	8022208 <__malloc_unlock>
 80214c2:	1d23      	adds	r3, r4, #4
 80214c4:	f026 0607 	bic.w	r6, r6, #7
 80214c8:	1af2      	subs	r2, r6, r3
 80214ca:	d0b6      	beq.n	802143a <_malloc_r+0x22>
 80214cc:	1b9b      	subs	r3, r3, r6
 80214ce:	50a3      	str	r3, [r4, r2]
 80214d0:	e7b3      	b.n	802143a <_malloc_r+0x22>
 80214d2:	6862      	ldr	r2, [r4, #4]
 80214d4:	42a3      	cmp	r3, r4
 80214d6:	bf0c      	ite	eq
 80214d8:	6032      	streq	r2, [r6, #0]
 80214da:	605a      	strne	r2, [r3, #4]
 80214dc:	e7ec      	b.n	80214b8 <_malloc_r+0xa0>
 80214de:	4623      	mov	r3, r4
 80214e0:	6864      	ldr	r4, [r4, #4]
 80214e2:	e7b2      	b.n	802144a <_malloc_r+0x32>
 80214e4:	4634      	mov	r4, r6
 80214e6:	6876      	ldr	r6, [r6, #4]
 80214e8:	e7b9      	b.n	802145e <_malloc_r+0x46>
 80214ea:	230c      	movs	r3, #12
 80214ec:	4638      	mov	r0, r7
 80214ee:	603b      	str	r3, [r7, #0]
 80214f0:	f000 fe8a 	bl	8022208 <__malloc_unlock>
 80214f4:	e7a1      	b.n	802143a <_malloc_r+0x22>
 80214f6:	6025      	str	r5, [r4, #0]
 80214f8:	e7de      	b.n	80214b8 <_malloc_r+0xa0>
 80214fa:	bf00      	nop
 80214fc:	2001fea0 	.word	0x2001fea0

08021500 <__sfputc_r>:
 8021500:	6893      	ldr	r3, [r2, #8]
 8021502:	3b01      	subs	r3, #1
 8021504:	2b00      	cmp	r3, #0
 8021506:	6093      	str	r3, [r2, #8]
 8021508:	b410      	push	{r4}
 802150a:	da08      	bge.n	802151e <__sfputc_r+0x1e>
 802150c:	6994      	ldr	r4, [r2, #24]
 802150e:	42a3      	cmp	r3, r4
 8021510:	db01      	blt.n	8021516 <__sfputc_r+0x16>
 8021512:	290a      	cmp	r1, #10
 8021514:	d103      	bne.n	802151e <__sfputc_r+0x1e>
 8021516:	f85d 4b04 	ldr.w	r4, [sp], #4
 802151a:	f000 bbe3 	b.w	8021ce4 <__swbuf_r>
 802151e:	6813      	ldr	r3, [r2, #0]
 8021520:	1c58      	adds	r0, r3, #1
 8021522:	6010      	str	r0, [r2, #0]
 8021524:	4608      	mov	r0, r1
 8021526:	7019      	strb	r1, [r3, #0]
 8021528:	f85d 4b04 	ldr.w	r4, [sp], #4
 802152c:	4770      	bx	lr

0802152e <__sfputs_r>:
 802152e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021530:	4606      	mov	r6, r0
 8021532:	460f      	mov	r7, r1
 8021534:	4614      	mov	r4, r2
 8021536:	18d5      	adds	r5, r2, r3
 8021538:	42ac      	cmp	r4, r5
 802153a:	d101      	bne.n	8021540 <__sfputs_r+0x12>
 802153c:	2000      	movs	r0, #0
 802153e:	e007      	b.n	8021550 <__sfputs_r+0x22>
 8021540:	463a      	mov	r2, r7
 8021542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021546:	4630      	mov	r0, r6
 8021548:	f7ff ffda 	bl	8021500 <__sfputc_r>
 802154c:	1c43      	adds	r3, r0, #1
 802154e:	d1f3      	bne.n	8021538 <__sfputs_r+0xa>
 8021550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021554 <_vfiprintf_r>:
 8021554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021558:	460d      	mov	r5, r1
 802155a:	b09d      	sub	sp, #116	; 0x74
 802155c:	4614      	mov	r4, r2
 802155e:	4698      	mov	r8, r3
 8021560:	4606      	mov	r6, r0
 8021562:	b118      	cbz	r0, 802156c <_vfiprintf_r+0x18>
 8021564:	6983      	ldr	r3, [r0, #24]
 8021566:	b90b      	cbnz	r3, 802156c <_vfiprintf_r+0x18>
 8021568:	f7ff fdec 	bl	8021144 <__sinit>
 802156c:	4b89      	ldr	r3, [pc, #548]	; (8021794 <_vfiprintf_r+0x240>)
 802156e:	429d      	cmp	r5, r3
 8021570:	d11b      	bne.n	80215aa <_vfiprintf_r+0x56>
 8021572:	6875      	ldr	r5, [r6, #4]
 8021574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021576:	07d9      	lsls	r1, r3, #31
 8021578:	d405      	bmi.n	8021586 <_vfiprintf_r+0x32>
 802157a:	89ab      	ldrh	r3, [r5, #12]
 802157c:	059a      	lsls	r2, r3, #22
 802157e:	d402      	bmi.n	8021586 <_vfiprintf_r+0x32>
 8021580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021582:	f7ff feb4 	bl	80212ee <__retarget_lock_acquire_recursive>
 8021586:	89ab      	ldrh	r3, [r5, #12]
 8021588:	071b      	lsls	r3, r3, #28
 802158a:	d501      	bpl.n	8021590 <_vfiprintf_r+0x3c>
 802158c:	692b      	ldr	r3, [r5, #16]
 802158e:	b9eb      	cbnz	r3, 80215cc <_vfiprintf_r+0x78>
 8021590:	4629      	mov	r1, r5
 8021592:	4630      	mov	r0, r6
 8021594:	f000 fc0a 	bl	8021dac <__swsetup_r>
 8021598:	b1c0      	cbz	r0, 80215cc <_vfiprintf_r+0x78>
 802159a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802159c:	07dc      	lsls	r4, r3, #31
 802159e:	d50e      	bpl.n	80215be <_vfiprintf_r+0x6a>
 80215a0:	f04f 30ff 	mov.w	r0, #4294967295
 80215a4:	b01d      	add	sp, #116	; 0x74
 80215a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215aa:	4b7b      	ldr	r3, [pc, #492]	; (8021798 <_vfiprintf_r+0x244>)
 80215ac:	429d      	cmp	r5, r3
 80215ae:	d101      	bne.n	80215b4 <_vfiprintf_r+0x60>
 80215b0:	68b5      	ldr	r5, [r6, #8]
 80215b2:	e7df      	b.n	8021574 <_vfiprintf_r+0x20>
 80215b4:	4b79      	ldr	r3, [pc, #484]	; (802179c <_vfiprintf_r+0x248>)
 80215b6:	429d      	cmp	r5, r3
 80215b8:	bf08      	it	eq
 80215ba:	68f5      	ldreq	r5, [r6, #12]
 80215bc:	e7da      	b.n	8021574 <_vfiprintf_r+0x20>
 80215be:	89ab      	ldrh	r3, [r5, #12]
 80215c0:	0598      	lsls	r0, r3, #22
 80215c2:	d4ed      	bmi.n	80215a0 <_vfiprintf_r+0x4c>
 80215c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215c6:	f7ff fe94 	bl	80212f2 <__retarget_lock_release_recursive>
 80215ca:	e7e9      	b.n	80215a0 <_vfiprintf_r+0x4c>
 80215cc:	2300      	movs	r3, #0
 80215ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80215d2:	f04f 0901 	mov.w	r9, #1
 80215d6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80217a0 <_vfiprintf_r+0x24c>
 80215da:	9309      	str	r3, [sp, #36]	; 0x24
 80215dc:	2320      	movs	r3, #32
 80215de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80215e2:	2330      	movs	r3, #48	; 0x30
 80215e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215e8:	4623      	mov	r3, r4
 80215ea:	469a      	mov	sl, r3
 80215ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215f0:	b10a      	cbz	r2, 80215f6 <_vfiprintf_r+0xa2>
 80215f2:	2a25      	cmp	r2, #37	; 0x25
 80215f4:	d1f9      	bne.n	80215ea <_vfiprintf_r+0x96>
 80215f6:	ebba 0b04 	subs.w	fp, sl, r4
 80215fa:	d00b      	beq.n	8021614 <_vfiprintf_r+0xc0>
 80215fc:	465b      	mov	r3, fp
 80215fe:	4622      	mov	r2, r4
 8021600:	4629      	mov	r1, r5
 8021602:	4630      	mov	r0, r6
 8021604:	f7ff ff93 	bl	802152e <__sfputs_r>
 8021608:	3001      	adds	r0, #1
 802160a:	f000 80aa 	beq.w	8021762 <_vfiprintf_r+0x20e>
 802160e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021610:	445a      	add	r2, fp
 8021612:	9209      	str	r2, [sp, #36]	; 0x24
 8021614:	f89a 3000 	ldrb.w	r3, [sl]
 8021618:	2b00      	cmp	r3, #0
 802161a:	f000 80a2 	beq.w	8021762 <_vfiprintf_r+0x20e>
 802161e:	2300      	movs	r3, #0
 8021620:	f04f 32ff 	mov.w	r2, #4294967295
 8021624:	f10a 0a01 	add.w	sl, sl, #1
 8021628:	9304      	str	r3, [sp, #16]
 802162a:	9307      	str	r3, [sp, #28]
 802162c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021630:	931a      	str	r3, [sp, #104]	; 0x68
 8021632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021636:	4654      	mov	r4, sl
 8021638:	2205      	movs	r2, #5
 802163a:	4859      	ldr	r0, [pc, #356]	; (80217a0 <_vfiprintf_r+0x24c>)
 802163c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021640:	f000 fdce 	bl	80221e0 <memchr>
 8021644:	9a04      	ldr	r2, [sp, #16]
 8021646:	b9d8      	cbnz	r0, 8021680 <_vfiprintf_r+0x12c>
 8021648:	06d1      	lsls	r1, r2, #27
 802164a:	bf44      	itt	mi
 802164c:	2320      	movmi	r3, #32
 802164e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021652:	0713      	lsls	r3, r2, #28
 8021654:	bf44      	itt	mi
 8021656:	232b      	movmi	r3, #43	; 0x2b
 8021658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802165c:	f89a 3000 	ldrb.w	r3, [sl]
 8021660:	2b2a      	cmp	r3, #42	; 0x2a
 8021662:	d015      	beq.n	8021690 <_vfiprintf_r+0x13c>
 8021664:	9a07      	ldr	r2, [sp, #28]
 8021666:	4654      	mov	r4, sl
 8021668:	2000      	movs	r0, #0
 802166a:	f04f 0c0a 	mov.w	ip, #10
 802166e:	4621      	mov	r1, r4
 8021670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021674:	3b30      	subs	r3, #48	; 0x30
 8021676:	2b09      	cmp	r3, #9
 8021678:	d94e      	bls.n	8021718 <_vfiprintf_r+0x1c4>
 802167a:	b1b0      	cbz	r0, 80216aa <_vfiprintf_r+0x156>
 802167c:	9207      	str	r2, [sp, #28]
 802167e:	e014      	b.n	80216aa <_vfiprintf_r+0x156>
 8021680:	eba0 0308 	sub.w	r3, r0, r8
 8021684:	46a2      	mov	sl, r4
 8021686:	fa09 f303 	lsl.w	r3, r9, r3
 802168a:	4313      	orrs	r3, r2
 802168c:	9304      	str	r3, [sp, #16]
 802168e:	e7d2      	b.n	8021636 <_vfiprintf_r+0xe2>
 8021690:	9b03      	ldr	r3, [sp, #12]
 8021692:	1d19      	adds	r1, r3, #4
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	2b00      	cmp	r3, #0
 8021698:	9103      	str	r1, [sp, #12]
 802169a:	bfbb      	ittet	lt
 802169c:	425b      	neglt	r3, r3
 802169e:	f042 0202 	orrlt.w	r2, r2, #2
 80216a2:	9307      	strge	r3, [sp, #28]
 80216a4:	9307      	strlt	r3, [sp, #28]
 80216a6:	bfb8      	it	lt
 80216a8:	9204      	strlt	r2, [sp, #16]
 80216aa:	7823      	ldrb	r3, [r4, #0]
 80216ac:	2b2e      	cmp	r3, #46	; 0x2e
 80216ae:	d10c      	bne.n	80216ca <_vfiprintf_r+0x176>
 80216b0:	7863      	ldrb	r3, [r4, #1]
 80216b2:	2b2a      	cmp	r3, #42	; 0x2a
 80216b4:	d135      	bne.n	8021722 <_vfiprintf_r+0x1ce>
 80216b6:	9b03      	ldr	r3, [sp, #12]
 80216b8:	3402      	adds	r4, #2
 80216ba:	1d1a      	adds	r2, r3, #4
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	2b00      	cmp	r3, #0
 80216c0:	9203      	str	r2, [sp, #12]
 80216c2:	bfb8      	it	lt
 80216c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80216c8:	9305      	str	r3, [sp, #20]
 80216ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80217b0 <_vfiprintf_r+0x25c>
 80216ce:	2203      	movs	r2, #3
 80216d0:	7821      	ldrb	r1, [r4, #0]
 80216d2:	4650      	mov	r0, sl
 80216d4:	f000 fd84 	bl	80221e0 <memchr>
 80216d8:	b140      	cbz	r0, 80216ec <_vfiprintf_r+0x198>
 80216da:	2340      	movs	r3, #64	; 0x40
 80216dc:	eba0 000a 	sub.w	r0, r0, sl
 80216e0:	3401      	adds	r4, #1
 80216e2:	fa03 f000 	lsl.w	r0, r3, r0
 80216e6:	9b04      	ldr	r3, [sp, #16]
 80216e8:	4303      	orrs	r3, r0
 80216ea:	9304      	str	r3, [sp, #16]
 80216ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216f0:	2206      	movs	r2, #6
 80216f2:	482c      	ldr	r0, [pc, #176]	; (80217a4 <_vfiprintf_r+0x250>)
 80216f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80216f8:	f000 fd72 	bl	80221e0 <memchr>
 80216fc:	2800      	cmp	r0, #0
 80216fe:	d03f      	beq.n	8021780 <_vfiprintf_r+0x22c>
 8021700:	4b29      	ldr	r3, [pc, #164]	; (80217a8 <_vfiprintf_r+0x254>)
 8021702:	bb1b      	cbnz	r3, 802174c <_vfiprintf_r+0x1f8>
 8021704:	9b03      	ldr	r3, [sp, #12]
 8021706:	3307      	adds	r3, #7
 8021708:	f023 0307 	bic.w	r3, r3, #7
 802170c:	3308      	adds	r3, #8
 802170e:	9303      	str	r3, [sp, #12]
 8021710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021712:	443b      	add	r3, r7
 8021714:	9309      	str	r3, [sp, #36]	; 0x24
 8021716:	e767      	b.n	80215e8 <_vfiprintf_r+0x94>
 8021718:	fb0c 3202 	mla	r2, ip, r2, r3
 802171c:	460c      	mov	r4, r1
 802171e:	2001      	movs	r0, #1
 8021720:	e7a5      	b.n	802166e <_vfiprintf_r+0x11a>
 8021722:	2300      	movs	r3, #0
 8021724:	3401      	adds	r4, #1
 8021726:	f04f 0c0a 	mov.w	ip, #10
 802172a:	4619      	mov	r1, r3
 802172c:	9305      	str	r3, [sp, #20]
 802172e:	4620      	mov	r0, r4
 8021730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021734:	3a30      	subs	r2, #48	; 0x30
 8021736:	2a09      	cmp	r2, #9
 8021738:	d903      	bls.n	8021742 <_vfiprintf_r+0x1ee>
 802173a:	2b00      	cmp	r3, #0
 802173c:	d0c5      	beq.n	80216ca <_vfiprintf_r+0x176>
 802173e:	9105      	str	r1, [sp, #20]
 8021740:	e7c3      	b.n	80216ca <_vfiprintf_r+0x176>
 8021742:	fb0c 2101 	mla	r1, ip, r1, r2
 8021746:	4604      	mov	r4, r0
 8021748:	2301      	movs	r3, #1
 802174a:	e7f0      	b.n	802172e <_vfiprintf_r+0x1da>
 802174c:	ab03      	add	r3, sp, #12
 802174e:	462a      	mov	r2, r5
 8021750:	a904      	add	r1, sp, #16
 8021752:	4630      	mov	r0, r6
 8021754:	9300      	str	r3, [sp, #0]
 8021756:	4b15      	ldr	r3, [pc, #84]	; (80217ac <_vfiprintf_r+0x258>)
 8021758:	e000      	b.n	802175c <_vfiprintf_r+0x208>
 802175a:	bf00      	nop
 802175c:	4607      	mov	r7, r0
 802175e:	1c78      	adds	r0, r7, #1
 8021760:	d1d6      	bne.n	8021710 <_vfiprintf_r+0x1bc>
 8021762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021764:	07d9      	lsls	r1, r3, #31
 8021766:	d405      	bmi.n	8021774 <_vfiprintf_r+0x220>
 8021768:	89ab      	ldrh	r3, [r5, #12]
 802176a:	059a      	lsls	r2, r3, #22
 802176c:	d402      	bmi.n	8021774 <_vfiprintf_r+0x220>
 802176e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021770:	f7ff fdbf 	bl	80212f2 <__retarget_lock_release_recursive>
 8021774:	89ab      	ldrh	r3, [r5, #12]
 8021776:	065b      	lsls	r3, r3, #25
 8021778:	f53f af12 	bmi.w	80215a0 <_vfiprintf_r+0x4c>
 802177c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802177e:	e711      	b.n	80215a4 <_vfiprintf_r+0x50>
 8021780:	ab03      	add	r3, sp, #12
 8021782:	462a      	mov	r2, r5
 8021784:	a904      	add	r1, sp, #16
 8021786:	4630      	mov	r0, r6
 8021788:	9300      	str	r3, [sp, #0]
 802178a:	4b08      	ldr	r3, [pc, #32]	; (80217ac <_vfiprintf_r+0x258>)
 802178c:	f000 f882 	bl	8021894 <_printf_i>
 8021790:	e7e4      	b.n	802175c <_vfiprintf_r+0x208>
 8021792:	bf00      	nop
 8021794:	08023ca4 	.word	0x08023ca4
 8021798:	08023cc4 	.word	0x08023cc4
 802179c:	08023c84 	.word	0x08023c84
 80217a0:	08023ce8 	.word	0x08023ce8
 80217a4:	08023cf2 	.word	0x08023cf2
 80217a8:	00000000 	.word	0x00000000
 80217ac:	0802152f 	.word	0x0802152f
 80217b0:	08023cee 	.word	0x08023cee

080217b4 <_printf_common>:
 80217b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217b8:	4616      	mov	r6, r2
 80217ba:	4699      	mov	r9, r3
 80217bc:	688a      	ldr	r2, [r1, #8]
 80217be:	4607      	mov	r7, r0
 80217c0:	690b      	ldr	r3, [r1, #16]
 80217c2:	460c      	mov	r4, r1
 80217c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80217c8:	4293      	cmp	r3, r2
 80217ca:	bfb8      	it	lt
 80217cc:	4613      	movlt	r3, r2
 80217ce:	6033      	str	r3, [r6, #0]
 80217d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80217d4:	b10a      	cbz	r2, 80217da <_printf_common+0x26>
 80217d6:	3301      	adds	r3, #1
 80217d8:	6033      	str	r3, [r6, #0]
 80217da:	6823      	ldr	r3, [r4, #0]
 80217dc:	0699      	lsls	r1, r3, #26
 80217de:	bf42      	ittt	mi
 80217e0:	6833      	ldrmi	r3, [r6, #0]
 80217e2:	3302      	addmi	r3, #2
 80217e4:	6033      	strmi	r3, [r6, #0]
 80217e6:	6825      	ldr	r5, [r4, #0]
 80217e8:	f015 0506 	ands.w	r5, r5, #6
 80217ec:	d106      	bne.n	80217fc <_printf_common+0x48>
 80217ee:	f104 0a19 	add.w	sl, r4, #25
 80217f2:	68e3      	ldr	r3, [r4, #12]
 80217f4:	6832      	ldr	r2, [r6, #0]
 80217f6:	1a9b      	subs	r3, r3, r2
 80217f8:	42ab      	cmp	r3, r5
 80217fa:	dc29      	bgt.n	8021850 <_printf_common+0x9c>
 80217fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021800:	1e13      	subs	r3, r2, #0
 8021802:	6822      	ldr	r2, [r4, #0]
 8021804:	bf18      	it	ne
 8021806:	2301      	movne	r3, #1
 8021808:	0692      	lsls	r2, r2, #26
 802180a:	d42e      	bmi.n	802186a <_printf_common+0xb6>
 802180c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021810:	4649      	mov	r1, r9
 8021812:	4638      	mov	r0, r7
 8021814:	47c0      	blx	r8
 8021816:	3001      	adds	r0, #1
 8021818:	d021      	beq.n	802185e <_printf_common+0xaa>
 802181a:	6823      	ldr	r3, [r4, #0]
 802181c:	341a      	adds	r4, #26
 802181e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8021822:	f003 0306 	and.w	r3, r3, #6
 8021826:	6832      	ldr	r2, [r6, #0]
 8021828:	2600      	movs	r6, #0
 802182a:	2b04      	cmp	r3, #4
 802182c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8021830:	bf08      	it	eq
 8021832:	1aad      	subeq	r5, r5, r2
 8021834:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8021838:	bf14      	ite	ne
 802183a:	2500      	movne	r5, #0
 802183c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021840:	4293      	cmp	r3, r2
 8021842:	bfc4      	itt	gt
 8021844:	1a9b      	subgt	r3, r3, r2
 8021846:	18ed      	addgt	r5, r5, r3
 8021848:	42b5      	cmp	r5, r6
 802184a:	d11a      	bne.n	8021882 <_printf_common+0xce>
 802184c:	2000      	movs	r0, #0
 802184e:	e008      	b.n	8021862 <_printf_common+0xae>
 8021850:	2301      	movs	r3, #1
 8021852:	4652      	mov	r2, sl
 8021854:	4649      	mov	r1, r9
 8021856:	4638      	mov	r0, r7
 8021858:	47c0      	blx	r8
 802185a:	3001      	adds	r0, #1
 802185c:	d103      	bne.n	8021866 <_printf_common+0xb2>
 802185e:	f04f 30ff 	mov.w	r0, #4294967295
 8021862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021866:	3501      	adds	r5, #1
 8021868:	e7c3      	b.n	80217f2 <_printf_common+0x3e>
 802186a:	18e1      	adds	r1, r4, r3
 802186c:	1c5a      	adds	r2, r3, #1
 802186e:	2030      	movs	r0, #48	; 0x30
 8021870:	3302      	adds	r3, #2
 8021872:	4422      	add	r2, r4
 8021874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802187c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021880:	e7c4      	b.n	802180c <_printf_common+0x58>
 8021882:	2301      	movs	r3, #1
 8021884:	4622      	mov	r2, r4
 8021886:	4649      	mov	r1, r9
 8021888:	4638      	mov	r0, r7
 802188a:	47c0      	blx	r8
 802188c:	3001      	adds	r0, #1
 802188e:	d0e6      	beq.n	802185e <_printf_common+0xaa>
 8021890:	3601      	adds	r6, #1
 8021892:	e7d9      	b.n	8021848 <_printf_common+0x94>

08021894 <_printf_i>:
 8021894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021898:	7e0f      	ldrb	r7, [r1, #24]
 802189a:	4691      	mov	r9, r2
 802189c:	4680      	mov	r8, r0
 802189e:	460c      	mov	r4, r1
 80218a0:	2f78      	cmp	r7, #120	; 0x78
 80218a2:	469a      	mov	sl, r3
 80218a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80218a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80218aa:	d807      	bhi.n	80218bc <_printf_i+0x28>
 80218ac:	2f62      	cmp	r7, #98	; 0x62
 80218ae:	d80a      	bhi.n	80218c6 <_printf_i+0x32>
 80218b0:	2f00      	cmp	r7, #0
 80218b2:	f000 80d8 	beq.w	8021a66 <_printf_i+0x1d2>
 80218b6:	2f58      	cmp	r7, #88	; 0x58
 80218b8:	f000 80a3 	beq.w	8021a02 <_printf_i+0x16e>
 80218bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80218c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80218c4:	e03a      	b.n	802193c <_printf_i+0xa8>
 80218c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80218ca:	2b15      	cmp	r3, #21
 80218cc:	d8f6      	bhi.n	80218bc <_printf_i+0x28>
 80218ce:	a101      	add	r1, pc, #4	; (adr r1, 80218d4 <_printf_i+0x40>)
 80218d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80218d4:	0802192d 	.word	0x0802192d
 80218d8:	08021941 	.word	0x08021941
 80218dc:	080218bd 	.word	0x080218bd
 80218e0:	080218bd 	.word	0x080218bd
 80218e4:	080218bd 	.word	0x080218bd
 80218e8:	080218bd 	.word	0x080218bd
 80218ec:	08021941 	.word	0x08021941
 80218f0:	080218bd 	.word	0x080218bd
 80218f4:	080218bd 	.word	0x080218bd
 80218f8:	080218bd 	.word	0x080218bd
 80218fc:	080218bd 	.word	0x080218bd
 8021900:	08021a4d 	.word	0x08021a4d
 8021904:	08021971 	.word	0x08021971
 8021908:	08021a2f 	.word	0x08021a2f
 802190c:	080218bd 	.word	0x080218bd
 8021910:	080218bd 	.word	0x080218bd
 8021914:	08021a6f 	.word	0x08021a6f
 8021918:	080218bd 	.word	0x080218bd
 802191c:	08021971 	.word	0x08021971
 8021920:	080218bd 	.word	0x080218bd
 8021924:	080218bd 	.word	0x080218bd
 8021928:	08021a37 	.word	0x08021a37
 802192c:	682b      	ldr	r3, [r5, #0]
 802192e:	1d1a      	adds	r2, r3, #4
 8021930:	681b      	ldr	r3, [r3, #0]
 8021932:	602a      	str	r2, [r5, #0]
 8021934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802193c:	2301      	movs	r3, #1
 802193e:	e0a3      	b.n	8021a88 <_printf_i+0x1f4>
 8021940:	6820      	ldr	r0, [r4, #0]
 8021942:	6829      	ldr	r1, [r5, #0]
 8021944:	0606      	lsls	r6, r0, #24
 8021946:	f101 0304 	add.w	r3, r1, #4
 802194a:	d50a      	bpl.n	8021962 <_printf_i+0xce>
 802194c:	680e      	ldr	r6, [r1, #0]
 802194e:	602b      	str	r3, [r5, #0]
 8021950:	2e00      	cmp	r6, #0
 8021952:	da03      	bge.n	802195c <_printf_i+0xc8>
 8021954:	232d      	movs	r3, #45	; 0x2d
 8021956:	4276      	negs	r6, r6
 8021958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802195c:	485e      	ldr	r0, [pc, #376]	; (8021ad8 <_printf_i+0x244>)
 802195e:	230a      	movs	r3, #10
 8021960:	e019      	b.n	8021996 <_printf_i+0x102>
 8021962:	680e      	ldr	r6, [r1, #0]
 8021964:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021968:	602b      	str	r3, [r5, #0]
 802196a:	bf18      	it	ne
 802196c:	b236      	sxthne	r6, r6
 802196e:	e7ef      	b.n	8021950 <_printf_i+0xbc>
 8021970:	682b      	ldr	r3, [r5, #0]
 8021972:	6820      	ldr	r0, [r4, #0]
 8021974:	1d19      	adds	r1, r3, #4
 8021976:	6029      	str	r1, [r5, #0]
 8021978:	0601      	lsls	r1, r0, #24
 802197a:	d501      	bpl.n	8021980 <_printf_i+0xec>
 802197c:	681e      	ldr	r6, [r3, #0]
 802197e:	e002      	b.n	8021986 <_printf_i+0xf2>
 8021980:	0646      	lsls	r6, r0, #25
 8021982:	d5fb      	bpl.n	802197c <_printf_i+0xe8>
 8021984:	881e      	ldrh	r6, [r3, #0]
 8021986:	2f6f      	cmp	r7, #111	; 0x6f
 8021988:	4853      	ldr	r0, [pc, #332]	; (8021ad8 <_printf_i+0x244>)
 802198a:	bf0c      	ite	eq
 802198c:	2308      	moveq	r3, #8
 802198e:	230a      	movne	r3, #10
 8021990:	2100      	movs	r1, #0
 8021992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021996:	6865      	ldr	r5, [r4, #4]
 8021998:	2d00      	cmp	r5, #0
 802199a:	60a5      	str	r5, [r4, #8]
 802199c:	bfa2      	ittt	ge
 802199e:	6821      	ldrge	r1, [r4, #0]
 80219a0:	f021 0104 	bicge.w	r1, r1, #4
 80219a4:	6021      	strge	r1, [r4, #0]
 80219a6:	b90e      	cbnz	r6, 80219ac <_printf_i+0x118>
 80219a8:	2d00      	cmp	r5, #0
 80219aa:	d04d      	beq.n	8021a48 <_printf_i+0x1b4>
 80219ac:	4615      	mov	r5, r2
 80219ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80219b2:	fb03 6711 	mls	r7, r3, r1, r6
 80219b6:	5dc7      	ldrb	r7, [r0, r7]
 80219b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80219bc:	4637      	mov	r7, r6
 80219be:	460e      	mov	r6, r1
 80219c0:	42bb      	cmp	r3, r7
 80219c2:	d9f4      	bls.n	80219ae <_printf_i+0x11a>
 80219c4:	2b08      	cmp	r3, #8
 80219c6:	d10b      	bne.n	80219e0 <_printf_i+0x14c>
 80219c8:	6823      	ldr	r3, [r4, #0]
 80219ca:	07de      	lsls	r6, r3, #31
 80219cc:	d508      	bpl.n	80219e0 <_printf_i+0x14c>
 80219ce:	6923      	ldr	r3, [r4, #16]
 80219d0:	6861      	ldr	r1, [r4, #4]
 80219d2:	4299      	cmp	r1, r3
 80219d4:	bfde      	ittt	le
 80219d6:	2330      	movle	r3, #48	; 0x30
 80219d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80219dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80219e0:	1b52      	subs	r2, r2, r5
 80219e2:	6122      	str	r2, [r4, #16]
 80219e4:	464b      	mov	r3, r9
 80219e6:	aa03      	add	r2, sp, #12
 80219e8:	4621      	mov	r1, r4
 80219ea:	4640      	mov	r0, r8
 80219ec:	f8cd a000 	str.w	sl, [sp]
 80219f0:	f7ff fee0 	bl	80217b4 <_printf_common>
 80219f4:	3001      	adds	r0, #1
 80219f6:	d14c      	bne.n	8021a92 <_printf_i+0x1fe>
 80219f8:	f04f 30ff 	mov.w	r0, #4294967295
 80219fc:	b004      	add	sp, #16
 80219fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a02:	4835      	ldr	r0, [pc, #212]	; (8021ad8 <_printf_i+0x244>)
 8021a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8021a08:	6829      	ldr	r1, [r5, #0]
 8021a0a:	6823      	ldr	r3, [r4, #0]
 8021a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8021a10:	6029      	str	r1, [r5, #0]
 8021a12:	061d      	lsls	r5, r3, #24
 8021a14:	d514      	bpl.n	8021a40 <_printf_i+0x1ac>
 8021a16:	07df      	lsls	r7, r3, #31
 8021a18:	bf44      	itt	mi
 8021a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8021a1e:	6023      	strmi	r3, [r4, #0]
 8021a20:	b91e      	cbnz	r6, 8021a2a <_printf_i+0x196>
 8021a22:	6823      	ldr	r3, [r4, #0]
 8021a24:	f023 0320 	bic.w	r3, r3, #32
 8021a28:	6023      	str	r3, [r4, #0]
 8021a2a:	2310      	movs	r3, #16
 8021a2c:	e7b0      	b.n	8021990 <_printf_i+0xfc>
 8021a2e:	6823      	ldr	r3, [r4, #0]
 8021a30:	f043 0320 	orr.w	r3, r3, #32
 8021a34:	6023      	str	r3, [r4, #0]
 8021a36:	2378      	movs	r3, #120	; 0x78
 8021a38:	4828      	ldr	r0, [pc, #160]	; (8021adc <_printf_i+0x248>)
 8021a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021a3e:	e7e3      	b.n	8021a08 <_printf_i+0x174>
 8021a40:	0659      	lsls	r1, r3, #25
 8021a42:	bf48      	it	mi
 8021a44:	b2b6      	uxthmi	r6, r6
 8021a46:	e7e6      	b.n	8021a16 <_printf_i+0x182>
 8021a48:	4615      	mov	r5, r2
 8021a4a:	e7bb      	b.n	80219c4 <_printf_i+0x130>
 8021a4c:	682b      	ldr	r3, [r5, #0]
 8021a4e:	6826      	ldr	r6, [r4, #0]
 8021a50:	1d18      	adds	r0, r3, #4
 8021a52:	6961      	ldr	r1, [r4, #20]
 8021a54:	6028      	str	r0, [r5, #0]
 8021a56:	0635      	lsls	r5, r6, #24
 8021a58:	681b      	ldr	r3, [r3, #0]
 8021a5a:	d501      	bpl.n	8021a60 <_printf_i+0x1cc>
 8021a5c:	6019      	str	r1, [r3, #0]
 8021a5e:	e002      	b.n	8021a66 <_printf_i+0x1d2>
 8021a60:	0670      	lsls	r0, r6, #25
 8021a62:	d5fb      	bpl.n	8021a5c <_printf_i+0x1c8>
 8021a64:	8019      	strh	r1, [r3, #0]
 8021a66:	2300      	movs	r3, #0
 8021a68:	4615      	mov	r5, r2
 8021a6a:	6123      	str	r3, [r4, #16]
 8021a6c:	e7ba      	b.n	80219e4 <_printf_i+0x150>
 8021a6e:	682b      	ldr	r3, [r5, #0]
 8021a70:	2100      	movs	r1, #0
 8021a72:	1d1a      	adds	r2, r3, #4
 8021a74:	602a      	str	r2, [r5, #0]
 8021a76:	681d      	ldr	r5, [r3, #0]
 8021a78:	6862      	ldr	r2, [r4, #4]
 8021a7a:	4628      	mov	r0, r5
 8021a7c:	f000 fbb0 	bl	80221e0 <memchr>
 8021a80:	b108      	cbz	r0, 8021a86 <_printf_i+0x1f2>
 8021a82:	1b40      	subs	r0, r0, r5
 8021a84:	6060      	str	r0, [r4, #4]
 8021a86:	6863      	ldr	r3, [r4, #4]
 8021a88:	6123      	str	r3, [r4, #16]
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021a90:	e7a8      	b.n	80219e4 <_printf_i+0x150>
 8021a92:	6923      	ldr	r3, [r4, #16]
 8021a94:	462a      	mov	r2, r5
 8021a96:	4649      	mov	r1, r9
 8021a98:	4640      	mov	r0, r8
 8021a9a:	47d0      	blx	sl
 8021a9c:	3001      	adds	r0, #1
 8021a9e:	d0ab      	beq.n	80219f8 <_printf_i+0x164>
 8021aa0:	6823      	ldr	r3, [r4, #0]
 8021aa2:	079b      	lsls	r3, r3, #30
 8021aa4:	d413      	bmi.n	8021ace <_printf_i+0x23a>
 8021aa6:	68e0      	ldr	r0, [r4, #12]
 8021aa8:	9b03      	ldr	r3, [sp, #12]
 8021aaa:	4298      	cmp	r0, r3
 8021aac:	bfb8      	it	lt
 8021aae:	4618      	movlt	r0, r3
 8021ab0:	e7a4      	b.n	80219fc <_printf_i+0x168>
 8021ab2:	2301      	movs	r3, #1
 8021ab4:	4632      	mov	r2, r6
 8021ab6:	4649      	mov	r1, r9
 8021ab8:	4640      	mov	r0, r8
 8021aba:	47d0      	blx	sl
 8021abc:	3001      	adds	r0, #1
 8021abe:	d09b      	beq.n	80219f8 <_printf_i+0x164>
 8021ac0:	3501      	adds	r5, #1
 8021ac2:	68e3      	ldr	r3, [r4, #12]
 8021ac4:	9903      	ldr	r1, [sp, #12]
 8021ac6:	1a5b      	subs	r3, r3, r1
 8021ac8:	42ab      	cmp	r3, r5
 8021aca:	dcf2      	bgt.n	8021ab2 <_printf_i+0x21e>
 8021acc:	e7eb      	b.n	8021aa6 <_printf_i+0x212>
 8021ace:	2500      	movs	r5, #0
 8021ad0:	f104 0619 	add.w	r6, r4, #25
 8021ad4:	e7f5      	b.n	8021ac2 <_printf_i+0x22e>
 8021ad6:	bf00      	nop
 8021ad8:	08023cf9 	.word	0x08023cf9
 8021adc:	08023d0a 	.word	0x08023d0a

08021ae0 <cleanup_glue>:
 8021ae0:	b538      	push	{r3, r4, r5, lr}
 8021ae2:	460c      	mov	r4, r1
 8021ae4:	6809      	ldr	r1, [r1, #0]
 8021ae6:	4605      	mov	r5, r0
 8021ae8:	b109      	cbz	r1, 8021aee <cleanup_glue+0xe>
 8021aea:	f7ff fff9 	bl	8021ae0 <cleanup_glue>
 8021aee:	4621      	mov	r1, r4
 8021af0:	4628      	mov	r0, r5
 8021af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021af6:	f7ff bc23 	b.w	8021340 <_free_r>
	...

08021afc <_reclaim_reent>:
 8021afc:	4b2c      	ldr	r3, [pc, #176]	; (8021bb0 <_reclaim_reent+0xb4>)
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	4283      	cmp	r3, r0
 8021b02:	b570      	push	{r4, r5, r6, lr}
 8021b04:	4604      	mov	r4, r0
 8021b06:	d051      	beq.n	8021bac <_reclaim_reent+0xb0>
 8021b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8021b0a:	b143      	cbz	r3, 8021b1e <_reclaim_reent+0x22>
 8021b0c:	68db      	ldr	r3, [r3, #12]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d14a      	bne.n	8021ba8 <_reclaim_reent+0xac>
 8021b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b14:	6819      	ldr	r1, [r3, #0]
 8021b16:	b111      	cbz	r1, 8021b1e <_reclaim_reent+0x22>
 8021b18:	4620      	mov	r0, r4
 8021b1a:	f7ff fc11 	bl	8021340 <_free_r>
 8021b1e:	6961      	ldr	r1, [r4, #20]
 8021b20:	b111      	cbz	r1, 8021b28 <_reclaim_reent+0x2c>
 8021b22:	4620      	mov	r0, r4
 8021b24:	f7ff fc0c 	bl	8021340 <_free_r>
 8021b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021b2a:	b111      	cbz	r1, 8021b32 <_reclaim_reent+0x36>
 8021b2c:	4620      	mov	r0, r4
 8021b2e:	f7ff fc07 	bl	8021340 <_free_r>
 8021b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021b34:	b111      	cbz	r1, 8021b3c <_reclaim_reent+0x40>
 8021b36:	4620      	mov	r0, r4
 8021b38:	f7ff fc02 	bl	8021340 <_free_r>
 8021b3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021b3e:	b111      	cbz	r1, 8021b46 <_reclaim_reent+0x4a>
 8021b40:	4620      	mov	r0, r4
 8021b42:	f7ff fbfd 	bl	8021340 <_free_r>
 8021b46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021b48:	b111      	cbz	r1, 8021b50 <_reclaim_reent+0x54>
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	f7ff fbf8 	bl	8021340 <_free_r>
 8021b50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021b52:	b111      	cbz	r1, 8021b5a <_reclaim_reent+0x5e>
 8021b54:	4620      	mov	r0, r4
 8021b56:	f7ff fbf3 	bl	8021340 <_free_r>
 8021b5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021b5c:	b111      	cbz	r1, 8021b64 <_reclaim_reent+0x68>
 8021b5e:	4620      	mov	r0, r4
 8021b60:	f7ff fbee 	bl	8021340 <_free_r>
 8021b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b66:	b111      	cbz	r1, 8021b6e <_reclaim_reent+0x72>
 8021b68:	4620      	mov	r0, r4
 8021b6a:	f7ff fbe9 	bl	8021340 <_free_r>
 8021b6e:	69a3      	ldr	r3, [r4, #24]
 8021b70:	b1e3      	cbz	r3, 8021bac <_reclaim_reent+0xb0>
 8021b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b74:	4620      	mov	r0, r4
 8021b76:	4798      	blx	r3
 8021b78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021b7a:	b1b9      	cbz	r1, 8021bac <_reclaim_reent+0xb0>
 8021b7c:	4620      	mov	r0, r4
 8021b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021b82:	f7ff bfad 	b.w	8021ae0 <cleanup_glue>
 8021b86:	5949      	ldr	r1, [r1, r5]
 8021b88:	b941      	cbnz	r1, 8021b9c <_reclaim_reent+0xa0>
 8021b8a:	3504      	adds	r5, #4
 8021b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021b8e:	2d80      	cmp	r5, #128	; 0x80
 8021b90:	68d9      	ldr	r1, [r3, #12]
 8021b92:	d1f8      	bne.n	8021b86 <_reclaim_reent+0x8a>
 8021b94:	4620      	mov	r0, r4
 8021b96:	f7ff fbd3 	bl	8021340 <_free_r>
 8021b9a:	e7ba      	b.n	8021b12 <_reclaim_reent+0x16>
 8021b9c:	680e      	ldr	r6, [r1, #0]
 8021b9e:	4620      	mov	r0, r4
 8021ba0:	f7ff fbce 	bl	8021340 <_free_r>
 8021ba4:	4631      	mov	r1, r6
 8021ba6:	e7ef      	b.n	8021b88 <_reclaim_reent+0x8c>
 8021ba8:	2500      	movs	r5, #0
 8021baa:	e7ef      	b.n	8021b8c <_reclaim_reent+0x90>
 8021bac:	bd70      	pop	{r4, r5, r6, pc}
 8021bae:	bf00      	nop
 8021bb0:	20000094 	.word	0x20000094

08021bb4 <_sbrk_r>:
 8021bb4:	b538      	push	{r3, r4, r5, lr}
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	4d05      	ldr	r5, [pc, #20]	; (8021bd0 <_sbrk_r+0x1c>)
 8021bba:	4604      	mov	r4, r0
 8021bbc:	4608      	mov	r0, r1
 8021bbe:	602b      	str	r3, [r5, #0]
 8021bc0:	f7e0 f8b0 	bl	8001d24 <_sbrk>
 8021bc4:	1c43      	adds	r3, r0, #1
 8021bc6:	d102      	bne.n	8021bce <_sbrk_r+0x1a>
 8021bc8:	682b      	ldr	r3, [r5, #0]
 8021bca:	b103      	cbz	r3, 8021bce <_sbrk_r+0x1a>
 8021bcc:	6023      	str	r3, [r4, #0]
 8021bce:	bd38      	pop	{r3, r4, r5, pc}
 8021bd0:	2001ffb0 	.word	0x2001ffb0

08021bd4 <_raise_r>:
 8021bd4:	291f      	cmp	r1, #31
 8021bd6:	b538      	push	{r3, r4, r5, lr}
 8021bd8:	4604      	mov	r4, r0
 8021bda:	460d      	mov	r5, r1
 8021bdc:	d904      	bls.n	8021be8 <_raise_r+0x14>
 8021bde:	2316      	movs	r3, #22
 8021be0:	6003      	str	r3, [r0, #0]
 8021be2:	f04f 30ff 	mov.w	r0, #4294967295
 8021be6:	bd38      	pop	{r3, r4, r5, pc}
 8021be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021bea:	b112      	cbz	r2, 8021bf2 <_raise_r+0x1e>
 8021bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021bf0:	b94b      	cbnz	r3, 8021c06 <_raise_r+0x32>
 8021bf2:	4620      	mov	r0, r4
 8021bf4:	f000 f830 	bl	8021c58 <_getpid_r>
 8021bf8:	462a      	mov	r2, r5
 8021bfa:	4601      	mov	r1, r0
 8021bfc:	4620      	mov	r0, r4
 8021bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021c02:	f000 b817 	b.w	8021c34 <_kill_r>
 8021c06:	2b01      	cmp	r3, #1
 8021c08:	d00a      	beq.n	8021c20 <_raise_r+0x4c>
 8021c0a:	1c59      	adds	r1, r3, #1
 8021c0c:	d103      	bne.n	8021c16 <_raise_r+0x42>
 8021c0e:	2316      	movs	r3, #22
 8021c10:	6003      	str	r3, [r0, #0]
 8021c12:	2001      	movs	r0, #1
 8021c14:	e7e7      	b.n	8021be6 <_raise_r+0x12>
 8021c16:	2400      	movs	r4, #0
 8021c18:	4628      	mov	r0, r5
 8021c1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021c1e:	4798      	blx	r3
 8021c20:	2000      	movs	r0, #0
 8021c22:	e7e0      	b.n	8021be6 <_raise_r+0x12>

08021c24 <raise>:
 8021c24:	4b02      	ldr	r3, [pc, #8]	; (8021c30 <raise+0xc>)
 8021c26:	4601      	mov	r1, r0
 8021c28:	6818      	ldr	r0, [r3, #0]
 8021c2a:	f7ff bfd3 	b.w	8021bd4 <_raise_r>
 8021c2e:	bf00      	nop
 8021c30:	20000094 	.word	0x20000094

08021c34 <_kill_r>:
 8021c34:	b538      	push	{r3, r4, r5, lr}
 8021c36:	2300      	movs	r3, #0
 8021c38:	4d06      	ldr	r5, [pc, #24]	; (8021c54 <_kill_r+0x20>)
 8021c3a:	4604      	mov	r4, r0
 8021c3c:	4608      	mov	r0, r1
 8021c3e:	4611      	mov	r1, r2
 8021c40:	602b      	str	r3, [r5, #0]
 8021c42:	f7df ffe7 	bl	8001c14 <_kill>
 8021c46:	1c43      	adds	r3, r0, #1
 8021c48:	d102      	bne.n	8021c50 <_kill_r+0x1c>
 8021c4a:	682b      	ldr	r3, [r5, #0]
 8021c4c:	b103      	cbz	r3, 8021c50 <_kill_r+0x1c>
 8021c4e:	6023      	str	r3, [r4, #0]
 8021c50:	bd38      	pop	{r3, r4, r5, pc}
 8021c52:	bf00      	nop
 8021c54:	2001ffb0 	.word	0x2001ffb0

08021c58 <_getpid_r>:
 8021c58:	f7df bfd4 	b.w	8001c04 <_getpid>

08021c5c <__sread>:
 8021c5c:	b510      	push	{r4, lr}
 8021c5e:	460c      	mov	r4, r1
 8021c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c64:	f000 fad6 	bl	8022214 <_read_r>
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	bfab      	itete	ge
 8021c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8021c70:	181b      	addge	r3, r3, r0
 8021c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021c76:	bfac      	ite	ge
 8021c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8021c7a:	81a3      	strhlt	r3, [r4, #12]
 8021c7c:	bd10      	pop	{r4, pc}

08021c7e <__swrite>:
 8021c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c82:	461f      	mov	r7, r3
 8021c84:	898b      	ldrh	r3, [r1, #12]
 8021c86:	4605      	mov	r5, r0
 8021c88:	460c      	mov	r4, r1
 8021c8a:	05db      	lsls	r3, r3, #23
 8021c8c:	4616      	mov	r6, r2
 8021c8e:	d505      	bpl.n	8021c9c <__swrite+0x1e>
 8021c90:	2302      	movs	r3, #2
 8021c92:	2200      	movs	r2, #0
 8021c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c98:	f000 fa2a 	bl	80220f0 <_lseek_r>
 8021c9c:	89a3      	ldrh	r3, [r4, #12]
 8021c9e:	4632      	mov	r2, r6
 8021ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ca4:	4628      	mov	r0, r5
 8021ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021caa:	81a3      	strh	r3, [r4, #12]
 8021cac:	463b      	mov	r3, r7
 8021cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021cb2:	f000 b869 	b.w	8021d88 <_write_r>

08021cb6 <__sseek>:
 8021cb6:	b510      	push	{r4, lr}
 8021cb8:	460c      	mov	r4, r1
 8021cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cbe:	f000 fa17 	bl	80220f0 <_lseek_r>
 8021cc2:	1c43      	adds	r3, r0, #1
 8021cc4:	89a3      	ldrh	r3, [r4, #12]
 8021cc6:	bf15      	itete	ne
 8021cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8021cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021cd2:	81a3      	strheq	r3, [r4, #12]
 8021cd4:	bf18      	it	ne
 8021cd6:	81a3      	strhne	r3, [r4, #12]
 8021cd8:	bd10      	pop	{r4, pc}

08021cda <__sclose>:
 8021cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cde:	f000 b937 	b.w	8021f50 <_close_r>
	...

08021ce4 <__swbuf_r>:
 8021ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ce6:	460e      	mov	r6, r1
 8021ce8:	4614      	mov	r4, r2
 8021cea:	4605      	mov	r5, r0
 8021cec:	b118      	cbz	r0, 8021cf6 <__swbuf_r+0x12>
 8021cee:	6983      	ldr	r3, [r0, #24]
 8021cf0:	b90b      	cbnz	r3, 8021cf6 <__swbuf_r+0x12>
 8021cf2:	f7ff fa27 	bl	8021144 <__sinit>
 8021cf6:	4b21      	ldr	r3, [pc, #132]	; (8021d7c <__swbuf_r+0x98>)
 8021cf8:	429c      	cmp	r4, r3
 8021cfa:	d12b      	bne.n	8021d54 <__swbuf_r+0x70>
 8021cfc:	686c      	ldr	r4, [r5, #4]
 8021cfe:	69a3      	ldr	r3, [r4, #24]
 8021d00:	60a3      	str	r3, [r4, #8]
 8021d02:	89a3      	ldrh	r3, [r4, #12]
 8021d04:	071a      	lsls	r2, r3, #28
 8021d06:	d52f      	bpl.n	8021d68 <__swbuf_r+0x84>
 8021d08:	6923      	ldr	r3, [r4, #16]
 8021d0a:	b36b      	cbz	r3, 8021d68 <__swbuf_r+0x84>
 8021d0c:	6923      	ldr	r3, [r4, #16]
 8021d0e:	b2f6      	uxtb	r6, r6
 8021d10:	6820      	ldr	r0, [r4, #0]
 8021d12:	4637      	mov	r7, r6
 8021d14:	1ac0      	subs	r0, r0, r3
 8021d16:	6963      	ldr	r3, [r4, #20]
 8021d18:	4283      	cmp	r3, r0
 8021d1a:	dc04      	bgt.n	8021d26 <__swbuf_r+0x42>
 8021d1c:	4621      	mov	r1, r4
 8021d1e:	4628      	mov	r0, r5
 8021d20:	f000 f9aa 	bl	8022078 <_fflush_r>
 8021d24:	bb30      	cbnz	r0, 8021d74 <__swbuf_r+0x90>
 8021d26:	68a3      	ldr	r3, [r4, #8]
 8021d28:	3001      	adds	r0, #1
 8021d2a:	3b01      	subs	r3, #1
 8021d2c:	60a3      	str	r3, [r4, #8]
 8021d2e:	6823      	ldr	r3, [r4, #0]
 8021d30:	1c5a      	adds	r2, r3, #1
 8021d32:	6022      	str	r2, [r4, #0]
 8021d34:	701e      	strb	r6, [r3, #0]
 8021d36:	6963      	ldr	r3, [r4, #20]
 8021d38:	4283      	cmp	r3, r0
 8021d3a:	d004      	beq.n	8021d46 <__swbuf_r+0x62>
 8021d3c:	89a3      	ldrh	r3, [r4, #12]
 8021d3e:	07db      	lsls	r3, r3, #31
 8021d40:	d506      	bpl.n	8021d50 <__swbuf_r+0x6c>
 8021d42:	2e0a      	cmp	r6, #10
 8021d44:	d104      	bne.n	8021d50 <__swbuf_r+0x6c>
 8021d46:	4621      	mov	r1, r4
 8021d48:	4628      	mov	r0, r5
 8021d4a:	f000 f995 	bl	8022078 <_fflush_r>
 8021d4e:	b988      	cbnz	r0, 8021d74 <__swbuf_r+0x90>
 8021d50:	4638      	mov	r0, r7
 8021d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d54:	4b0a      	ldr	r3, [pc, #40]	; (8021d80 <__swbuf_r+0x9c>)
 8021d56:	429c      	cmp	r4, r3
 8021d58:	d101      	bne.n	8021d5e <__swbuf_r+0x7a>
 8021d5a:	68ac      	ldr	r4, [r5, #8]
 8021d5c:	e7cf      	b.n	8021cfe <__swbuf_r+0x1a>
 8021d5e:	4b09      	ldr	r3, [pc, #36]	; (8021d84 <__swbuf_r+0xa0>)
 8021d60:	429c      	cmp	r4, r3
 8021d62:	bf08      	it	eq
 8021d64:	68ec      	ldreq	r4, [r5, #12]
 8021d66:	e7ca      	b.n	8021cfe <__swbuf_r+0x1a>
 8021d68:	4621      	mov	r1, r4
 8021d6a:	4628      	mov	r0, r5
 8021d6c:	f000 f81e 	bl	8021dac <__swsetup_r>
 8021d70:	2800      	cmp	r0, #0
 8021d72:	d0cb      	beq.n	8021d0c <__swbuf_r+0x28>
 8021d74:	f04f 37ff 	mov.w	r7, #4294967295
 8021d78:	e7ea      	b.n	8021d50 <__swbuf_r+0x6c>
 8021d7a:	bf00      	nop
 8021d7c:	08023ca4 	.word	0x08023ca4
 8021d80:	08023cc4 	.word	0x08023cc4
 8021d84:	08023c84 	.word	0x08023c84

08021d88 <_write_r>:
 8021d88:	b538      	push	{r3, r4, r5, lr}
 8021d8a:	4604      	mov	r4, r0
 8021d8c:	4d06      	ldr	r5, [pc, #24]	; (8021da8 <_write_r+0x20>)
 8021d8e:	4608      	mov	r0, r1
 8021d90:	4611      	mov	r1, r2
 8021d92:	2200      	movs	r2, #0
 8021d94:	602a      	str	r2, [r5, #0]
 8021d96:	461a      	mov	r2, r3
 8021d98:	f7df ff73 	bl	8001c82 <_write>
 8021d9c:	1c43      	adds	r3, r0, #1
 8021d9e:	d102      	bne.n	8021da6 <_write_r+0x1e>
 8021da0:	682b      	ldr	r3, [r5, #0]
 8021da2:	b103      	cbz	r3, 8021da6 <_write_r+0x1e>
 8021da4:	6023      	str	r3, [r4, #0]
 8021da6:	bd38      	pop	{r3, r4, r5, pc}
 8021da8:	2001ffb0 	.word	0x2001ffb0

08021dac <__swsetup_r>:
 8021dac:	4b32      	ldr	r3, [pc, #200]	; (8021e78 <__swsetup_r+0xcc>)
 8021dae:	b570      	push	{r4, r5, r6, lr}
 8021db0:	681d      	ldr	r5, [r3, #0]
 8021db2:	4606      	mov	r6, r0
 8021db4:	460c      	mov	r4, r1
 8021db6:	b125      	cbz	r5, 8021dc2 <__swsetup_r+0x16>
 8021db8:	69ab      	ldr	r3, [r5, #24]
 8021dba:	b913      	cbnz	r3, 8021dc2 <__swsetup_r+0x16>
 8021dbc:	4628      	mov	r0, r5
 8021dbe:	f7ff f9c1 	bl	8021144 <__sinit>
 8021dc2:	4b2e      	ldr	r3, [pc, #184]	; (8021e7c <__swsetup_r+0xd0>)
 8021dc4:	429c      	cmp	r4, r3
 8021dc6:	d10f      	bne.n	8021de8 <__swsetup_r+0x3c>
 8021dc8:	686c      	ldr	r4, [r5, #4]
 8021dca:	89a3      	ldrh	r3, [r4, #12]
 8021dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021dd0:	0719      	lsls	r1, r3, #28
 8021dd2:	d42c      	bmi.n	8021e2e <__swsetup_r+0x82>
 8021dd4:	06dd      	lsls	r5, r3, #27
 8021dd6:	d411      	bmi.n	8021dfc <__swsetup_r+0x50>
 8021dd8:	2309      	movs	r3, #9
 8021dda:	6033      	str	r3, [r6, #0]
 8021ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021de0:	f04f 30ff 	mov.w	r0, #4294967295
 8021de4:	81a3      	strh	r3, [r4, #12]
 8021de6:	e03e      	b.n	8021e66 <__swsetup_r+0xba>
 8021de8:	4b25      	ldr	r3, [pc, #148]	; (8021e80 <__swsetup_r+0xd4>)
 8021dea:	429c      	cmp	r4, r3
 8021dec:	d101      	bne.n	8021df2 <__swsetup_r+0x46>
 8021dee:	68ac      	ldr	r4, [r5, #8]
 8021df0:	e7eb      	b.n	8021dca <__swsetup_r+0x1e>
 8021df2:	4b24      	ldr	r3, [pc, #144]	; (8021e84 <__swsetup_r+0xd8>)
 8021df4:	429c      	cmp	r4, r3
 8021df6:	bf08      	it	eq
 8021df8:	68ec      	ldreq	r4, [r5, #12]
 8021dfa:	e7e6      	b.n	8021dca <__swsetup_r+0x1e>
 8021dfc:	0758      	lsls	r0, r3, #29
 8021dfe:	d512      	bpl.n	8021e26 <__swsetup_r+0x7a>
 8021e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e02:	b141      	cbz	r1, 8021e16 <__swsetup_r+0x6a>
 8021e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e08:	4299      	cmp	r1, r3
 8021e0a:	d002      	beq.n	8021e12 <__swsetup_r+0x66>
 8021e0c:	4630      	mov	r0, r6
 8021e0e:	f7ff fa97 	bl	8021340 <_free_r>
 8021e12:	2300      	movs	r3, #0
 8021e14:	6363      	str	r3, [r4, #52]	; 0x34
 8021e16:	89a3      	ldrh	r3, [r4, #12]
 8021e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021e1c:	81a3      	strh	r3, [r4, #12]
 8021e1e:	2300      	movs	r3, #0
 8021e20:	6063      	str	r3, [r4, #4]
 8021e22:	6923      	ldr	r3, [r4, #16]
 8021e24:	6023      	str	r3, [r4, #0]
 8021e26:	89a3      	ldrh	r3, [r4, #12]
 8021e28:	f043 0308 	orr.w	r3, r3, #8
 8021e2c:	81a3      	strh	r3, [r4, #12]
 8021e2e:	6923      	ldr	r3, [r4, #16]
 8021e30:	b94b      	cbnz	r3, 8021e46 <__swsetup_r+0x9a>
 8021e32:	89a3      	ldrh	r3, [r4, #12]
 8021e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021e3c:	d003      	beq.n	8021e46 <__swsetup_r+0x9a>
 8021e3e:	4621      	mov	r1, r4
 8021e40:	4630      	mov	r0, r6
 8021e42:	f000 f98d 	bl	8022160 <__smakebuf_r>
 8021e46:	89a0      	ldrh	r0, [r4, #12]
 8021e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021e4c:	f010 0301 	ands.w	r3, r0, #1
 8021e50:	d00a      	beq.n	8021e68 <__swsetup_r+0xbc>
 8021e52:	2300      	movs	r3, #0
 8021e54:	60a3      	str	r3, [r4, #8]
 8021e56:	6963      	ldr	r3, [r4, #20]
 8021e58:	425b      	negs	r3, r3
 8021e5a:	61a3      	str	r3, [r4, #24]
 8021e5c:	6923      	ldr	r3, [r4, #16]
 8021e5e:	b943      	cbnz	r3, 8021e72 <__swsetup_r+0xc6>
 8021e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021e64:	d1ba      	bne.n	8021ddc <__swsetup_r+0x30>
 8021e66:	bd70      	pop	{r4, r5, r6, pc}
 8021e68:	0781      	lsls	r1, r0, #30
 8021e6a:	bf58      	it	pl
 8021e6c:	6963      	ldrpl	r3, [r4, #20]
 8021e6e:	60a3      	str	r3, [r4, #8]
 8021e70:	e7f4      	b.n	8021e5c <__swsetup_r+0xb0>
 8021e72:	2000      	movs	r0, #0
 8021e74:	e7f7      	b.n	8021e66 <__swsetup_r+0xba>
 8021e76:	bf00      	nop
 8021e78:	20000094 	.word	0x20000094
 8021e7c:	08023ca4 	.word	0x08023ca4
 8021e80:	08023cc4 	.word	0x08023cc4
 8021e84:	08023c84 	.word	0x08023c84

08021e88 <__register_exitproc>:
 8021e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e8c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8021f4c <__register_exitproc+0xc4>
 8021e90:	4606      	mov	r6, r0
 8021e92:	461f      	mov	r7, r3
 8021e94:	460d      	mov	r5, r1
 8021e96:	f8d8 0000 	ldr.w	r0, [r8]
 8021e9a:	4691      	mov	r9, r2
 8021e9c:	f7ff fa27 	bl	80212ee <__retarget_lock_acquire_recursive>
 8021ea0:	4b26      	ldr	r3, [pc, #152]	; (8021f3c <__register_exitproc+0xb4>)
 8021ea2:	681c      	ldr	r4, [r3, #0]
 8021ea4:	b934      	cbnz	r4, 8021eb4 <__register_exitproc+0x2c>
 8021ea6:	4c26      	ldr	r4, [pc, #152]	; (8021f40 <__register_exitproc+0xb8>)
 8021ea8:	601c      	str	r4, [r3, #0]
 8021eaa:	4b26      	ldr	r3, [pc, #152]	; (8021f44 <__register_exitproc+0xbc>)
 8021eac:	b113      	cbz	r3, 8021eb4 <__register_exitproc+0x2c>
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021eb4:	6863      	ldr	r3, [r4, #4]
 8021eb6:	2b1f      	cmp	r3, #31
 8021eb8:	dd07      	ble.n	8021eca <__register_exitproc+0x42>
 8021eba:	f8d8 0000 	ldr.w	r0, [r8]
 8021ebe:	f7ff fa18 	bl	80212f2 <__retarget_lock_release_recursive>
 8021ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8021ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021eca:	b35e      	cbz	r6, 8021f24 <__register_exitproc+0x9c>
 8021ecc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021ed0:	b988      	cbnz	r0, 8021ef6 <__register_exitproc+0x6e>
 8021ed2:	4b1d      	ldr	r3, [pc, #116]	; (8021f48 <__register_exitproc+0xc0>)
 8021ed4:	b923      	cbnz	r3, 8021ee0 <__register_exitproc+0x58>
 8021ed6:	f8d8 0000 	ldr.w	r0, [r8]
 8021eda:	f7ff fa09 	bl	80212f0 <__retarget_lock_release>
 8021ede:	e7f0      	b.n	8021ec2 <__register_exitproc+0x3a>
 8021ee0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021ee4:	f7ff fa06 	bl	80212f4 <malloc>
 8021ee8:	2800      	cmp	r0, #0
 8021eea:	d0f4      	beq.n	8021ed6 <__register_exitproc+0x4e>
 8021eec:	2300      	movs	r3, #0
 8021eee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021ef2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021ef6:	6863      	ldr	r3, [r4, #4]
 8021ef8:	2201      	movs	r2, #1
 8021efa:	2e02      	cmp	r6, #2
 8021efc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021f00:	fa02 f203 	lsl.w	r2, r2, r3
 8021f04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021f08:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021f0c:	ea43 0302 	orr.w	r3, r3, r2
 8021f10:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021f14:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021f18:	bf02      	ittt	eq
 8021f1a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021f1e:	4313      	orreq	r3, r2
 8021f20:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021f24:	6863      	ldr	r3, [r4, #4]
 8021f26:	f8d8 0000 	ldr.w	r0, [r8]
 8021f2a:	1c5a      	adds	r2, r3, #1
 8021f2c:	3302      	adds	r3, #2
 8021f2e:	6062      	str	r2, [r4, #4]
 8021f30:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021f34:	f7ff f9dd 	bl	80212f2 <__retarget_lock_release_recursive>
 8021f38:	2000      	movs	r0, #0
 8021f3a:	e7c4      	b.n	8021ec6 <__register_exitproc+0x3e>
 8021f3c:	20020040 	.word	0x20020040
 8021f40:	2001ffb4 	.word	0x2001ffb4
 8021f44:	08023d1c 	.word	0x08023d1c
 8021f48:	080212f5 	.word	0x080212f5
 8021f4c:	200000f8 	.word	0x200000f8

08021f50 <_close_r>:
 8021f50:	b538      	push	{r3, r4, r5, lr}
 8021f52:	2300      	movs	r3, #0
 8021f54:	4d05      	ldr	r5, [pc, #20]	; (8021f6c <_close_r+0x1c>)
 8021f56:	4604      	mov	r4, r0
 8021f58:	4608      	mov	r0, r1
 8021f5a:	602b      	str	r3, [r5, #0]
 8021f5c:	f7df fead 	bl	8001cba <_close>
 8021f60:	1c43      	adds	r3, r0, #1
 8021f62:	d102      	bne.n	8021f6a <_close_r+0x1a>
 8021f64:	682b      	ldr	r3, [r5, #0]
 8021f66:	b103      	cbz	r3, 8021f6a <_close_r+0x1a>
 8021f68:	6023      	str	r3, [r4, #0]
 8021f6a:	bd38      	pop	{r3, r4, r5, pc}
 8021f6c:	2001ffb0 	.word	0x2001ffb0

08021f70 <__sflush_r>:
 8021f70:	898a      	ldrh	r2, [r1, #12]
 8021f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f76:	4605      	mov	r5, r0
 8021f78:	0710      	lsls	r0, r2, #28
 8021f7a:	460c      	mov	r4, r1
 8021f7c:	d458      	bmi.n	8022030 <__sflush_r+0xc0>
 8021f7e:	684b      	ldr	r3, [r1, #4]
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	dc05      	bgt.n	8021f90 <__sflush_r+0x20>
 8021f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	dc02      	bgt.n	8021f90 <__sflush_r+0x20>
 8021f8a:	2000      	movs	r0, #0
 8021f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021f92:	2e00      	cmp	r6, #0
 8021f94:	d0f9      	beq.n	8021f8a <__sflush_r+0x1a>
 8021f96:	2300      	movs	r3, #0
 8021f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021f9c:	682f      	ldr	r7, [r5, #0]
 8021f9e:	602b      	str	r3, [r5, #0]
 8021fa0:	d032      	beq.n	8022008 <__sflush_r+0x98>
 8021fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021fa4:	89a3      	ldrh	r3, [r4, #12]
 8021fa6:	075a      	lsls	r2, r3, #29
 8021fa8:	d505      	bpl.n	8021fb6 <__sflush_r+0x46>
 8021faa:	6863      	ldr	r3, [r4, #4]
 8021fac:	1ac0      	subs	r0, r0, r3
 8021fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021fb0:	b10b      	cbz	r3, 8021fb6 <__sflush_r+0x46>
 8021fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021fb4:	1ac0      	subs	r0, r0, r3
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	4602      	mov	r2, r0
 8021fba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021fbc:	4628      	mov	r0, r5
 8021fbe:	6a21      	ldr	r1, [r4, #32]
 8021fc0:	47b0      	blx	r6
 8021fc2:	1c43      	adds	r3, r0, #1
 8021fc4:	89a3      	ldrh	r3, [r4, #12]
 8021fc6:	d106      	bne.n	8021fd6 <__sflush_r+0x66>
 8021fc8:	6829      	ldr	r1, [r5, #0]
 8021fca:	291d      	cmp	r1, #29
 8021fcc:	d82c      	bhi.n	8022028 <__sflush_r+0xb8>
 8021fce:	4a29      	ldr	r2, [pc, #164]	; (8022074 <__sflush_r+0x104>)
 8021fd0:	40ca      	lsrs	r2, r1
 8021fd2:	07d6      	lsls	r6, r2, #31
 8021fd4:	d528      	bpl.n	8022028 <__sflush_r+0xb8>
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	04d9      	lsls	r1, r3, #19
 8021fda:	6062      	str	r2, [r4, #4]
 8021fdc:	6922      	ldr	r2, [r4, #16]
 8021fde:	6022      	str	r2, [r4, #0]
 8021fe0:	d504      	bpl.n	8021fec <__sflush_r+0x7c>
 8021fe2:	1c42      	adds	r2, r0, #1
 8021fe4:	d101      	bne.n	8021fea <__sflush_r+0x7a>
 8021fe6:	682b      	ldr	r3, [r5, #0]
 8021fe8:	b903      	cbnz	r3, 8021fec <__sflush_r+0x7c>
 8021fea:	6560      	str	r0, [r4, #84]	; 0x54
 8021fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021fee:	602f      	str	r7, [r5, #0]
 8021ff0:	2900      	cmp	r1, #0
 8021ff2:	d0ca      	beq.n	8021f8a <__sflush_r+0x1a>
 8021ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ff8:	4299      	cmp	r1, r3
 8021ffa:	d002      	beq.n	8022002 <__sflush_r+0x92>
 8021ffc:	4628      	mov	r0, r5
 8021ffe:	f7ff f99f 	bl	8021340 <_free_r>
 8022002:	2000      	movs	r0, #0
 8022004:	6360      	str	r0, [r4, #52]	; 0x34
 8022006:	e7c1      	b.n	8021f8c <__sflush_r+0x1c>
 8022008:	6a21      	ldr	r1, [r4, #32]
 802200a:	2301      	movs	r3, #1
 802200c:	4628      	mov	r0, r5
 802200e:	47b0      	blx	r6
 8022010:	1c41      	adds	r1, r0, #1
 8022012:	d1c7      	bne.n	8021fa4 <__sflush_r+0x34>
 8022014:	682b      	ldr	r3, [r5, #0]
 8022016:	2b00      	cmp	r3, #0
 8022018:	d0c4      	beq.n	8021fa4 <__sflush_r+0x34>
 802201a:	2b1d      	cmp	r3, #29
 802201c:	d001      	beq.n	8022022 <__sflush_r+0xb2>
 802201e:	2b16      	cmp	r3, #22
 8022020:	d101      	bne.n	8022026 <__sflush_r+0xb6>
 8022022:	602f      	str	r7, [r5, #0]
 8022024:	e7b1      	b.n	8021f8a <__sflush_r+0x1a>
 8022026:	89a3      	ldrh	r3, [r4, #12]
 8022028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802202c:	81a3      	strh	r3, [r4, #12]
 802202e:	e7ad      	b.n	8021f8c <__sflush_r+0x1c>
 8022030:	690f      	ldr	r7, [r1, #16]
 8022032:	2f00      	cmp	r7, #0
 8022034:	d0a9      	beq.n	8021f8a <__sflush_r+0x1a>
 8022036:	0793      	lsls	r3, r2, #30
 8022038:	680e      	ldr	r6, [r1, #0]
 802203a:	600f      	str	r7, [r1, #0]
 802203c:	bf0c      	ite	eq
 802203e:	694b      	ldreq	r3, [r1, #20]
 8022040:	2300      	movne	r3, #0
 8022042:	eba6 0807 	sub.w	r8, r6, r7
 8022046:	608b      	str	r3, [r1, #8]
 8022048:	f1b8 0f00 	cmp.w	r8, #0
 802204c:	dd9d      	ble.n	8021f8a <__sflush_r+0x1a>
 802204e:	4643      	mov	r3, r8
 8022050:	463a      	mov	r2, r7
 8022052:	6a21      	ldr	r1, [r4, #32]
 8022054:	4628      	mov	r0, r5
 8022056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022058:	47b0      	blx	r6
 802205a:	2800      	cmp	r0, #0
 802205c:	dc06      	bgt.n	802206c <__sflush_r+0xfc>
 802205e:	89a3      	ldrh	r3, [r4, #12]
 8022060:	f04f 30ff 	mov.w	r0, #4294967295
 8022064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022068:	81a3      	strh	r3, [r4, #12]
 802206a:	e78f      	b.n	8021f8c <__sflush_r+0x1c>
 802206c:	4407      	add	r7, r0
 802206e:	eba8 0800 	sub.w	r8, r8, r0
 8022072:	e7e9      	b.n	8022048 <__sflush_r+0xd8>
 8022074:	20400001 	.word	0x20400001

08022078 <_fflush_r>:
 8022078:	b538      	push	{r3, r4, r5, lr}
 802207a:	690b      	ldr	r3, [r1, #16]
 802207c:	4605      	mov	r5, r0
 802207e:	460c      	mov	r4, r1
 8022080:	b913      	cbnz	r3, 8022088 <_fflush_r+0x10>
 8022082:	2500      	movs	r5, #0
 8022084:	4628      	mov	r0, r5
 8022086:	bd38      	pop	{r3, r4, r5, pc}
 8022088:	b118      	cbz	r0, 8022092 <_fflush_r+0x1a>
 802208a:	6983      	ldr	r3, [r0, #24]
 802208c:	b90b      	cbnz	r3, 8022092 <_fflush_r+0x1a>
 802208e:	f7ff f859 	bl	8021144 <__sinit>
 8022092:	4b14      	ldr	r3, [pc, #80]	; (80220e4 <_fflush_r+0x6c>)
 8022094:	429c      	cmp	r4, r3
 8022096:	d11b      	bne.n	80220d0 <_fflush_r+0x58>
 8022098:	686c      	ldr	r4, [r5, #4]
 802209a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d0ef      	beq.n	8022082 <_fflush_r+0xa>
 80220a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80220a4:	07d0      	lsls	r0, r2, #31
 80220a6:	d404      	bmi.n	80220b2 <_fflush_r+0x3a>
 80220a8:	0599      	lsls	r1, r3, #22
 80220aa:	d402      	bmi.n	80220b2 <_fflush_r+0x3a>
 80220ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80220ae:	f7ff f91e 	bl	80212ee <__retarget_lock_acquire_recursive>
 80220b2:	4628      	mov	r0, r5
 80220b4:	4621      	mov	r1, r4
 80220b6:	f7ff ff5b 	bl	8021f70 <__sflush_r>
 80220ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80220bc:	4605      	mov	r5, r0
 80220be:	07da      	lsls	r2, r3, #31
 80220c0:	d4e0      	bmi.n	8022084 <_fflush_r+0xc>
 80220c2:	89a3      	ldrh	r3, [r4, #12]
 80220c4:	059b      	lsls	r3, r3, #22
 80220c6:	d4dd      	bmi.n	8022084 <_fflush_r+0xc>
 80220c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80220ca:	f7ff f912 	bl	80212f2 <__retarget_lock_release_recursive>
 80220ce:	e7d9      	b.n	8022084 <_fflush_r+0xc>
 80220d0:	4b05      	ldr	r3, [pc, #20]	; (80220e8 <_fflush_r+0x70>)
 80220d2:	429c      	cmp	r4, r3
 80220d4:	d101      	bne.n	80220da <_fflush_r+0x62>
 80220d6:	68ac      	ldr	r4, [r5, #8]
 80220d8:	e7df      	b.n	802209a <_fflush_r+0x22>
 80220da:	4b04      	ldr	r3, [pc, #16]	; (80220ec <_fflush_r+0x74>)
 80220dc:	429c      	cmp	r4, r3
 80220de:	bf08      	it	eq
 80220e0:	68ec      	ldreq	r4, [r5, #12]
 80220e2:	e7da      	b.n	802209a <_fflush_r+0x22>
 80220e4:	08023ca4 	.word	0x08023ca4
 80220e8:	08023cc4 	.word	0x08023cc4
 80220ec:	08023c84 	.word	0x08023c84

080220f0 <_lseek_r>:
 80220f0:	b538      	push	{r3, r4, r5, lr}
 80220f2:	4604      	mov	r4, r0
 80220f4:	4d06      	ldr	r5, [pc, #24]	; (8022110 <_lseek_r+0x20>)
 80220f6:	4608      	mov	r0, r1
 80220f8:	4611      	mov	r1, r2
 80220fa:	2200      	movs	r2, #0
 80220fc:	602a      	str	r2, [r5, #0]
 80220fe:	461a      	mov	r2, r3
 8022100:	f7df fe02 	bl	8001d08 <_lseek>
 8022104:	1c43      	adds	r3, r0, #1
 8022106:	d102      	bne.n	802210e <_lseek_r+0x1e>
 8022108:	682b      	ldr	r3, [r5, #0]
 802210a:	b103      	cbz	r3, 802210e <_lseek_r+0x1e>
 802210c:	6023      	str	r3, [r4, #0]
 802210e:	bd38      	pop	{r3, r4, r5, pc}
 8022110:	2001ffb0 	.word	0x2001ffb0

08022114 <__swhatbuf_r>:
 8022114:	b570      	push	{r4, r5, r6, lr}
 8022116:	460e      	mov	r6, r1
 8022118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802211c:	b096      	sub	sp, #88	; 0x58
 802211e:	4614      	mov	r4, r2
 8022120:	2900      	cmp	r1, #0
 8022122:	461d      	mov	r5, r3
 8022124:	da08      	bge.n	8022138 <__swhatbuf_r+0x24>
 8022126:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802212a:	2200      	movs	r2, #0
 802212c:	602a      	str	r2, [r5, #0]
 802212e:	061a      	lsls	r2, r3, #24
 8022130:	d410      	bmi.n	8022154 <__swhatbuf_r+0x40>
 8022132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022136:	e00e      	b.n	8022156 <__swhatbuf_r+0x42>
 8022138:	466a      	mov	r2, sp
 802213a:	f000 f87d 	bl	8022238 <_fstat_r>
 802213e:	2800      	cmp	r0, #0
 8022140:	dbf1      	blt.n	8022126 <__swhatbuf_r+0x12>
 8022142:	9a01      	ldr	r2, [sp, #4]
 8022144:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022148:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802214c:	425a      	negs	r2, r3
 802214e:	415a      	adcs	r2, r3
 8022150:	602a      	str	r2, [r5, #0]
 8022152:	e7ee      	b.n	8022132 <__swhatbuf_r+0x1e>
 8022154:	2340      	movs	r3, #64	; 0x40
 8022156:	2000      	movs	r0, #0
 8022158:	6023      	str	r3, [r4, #0]
 802215a:	b016      	add	sp, #88	; 0x58
 802215c:	bd70      	pop	{r4, r5, r6, pc}
	...

08022160 <__smakebuf_r>:
 8022160:	898b      	ldrh	r3, [r1, #12]
 8022162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022164:	079d      	lsls	r5, r3, #30
 8022166:	4606      	mov	r6, r0
 8022168:	460c      	mov	r4, r1
 802216a:	d507      	bpl.n	802217c <__smakebuf_r+0x1c>
 802216c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022170:	6023      	str	r3, [r4, #0]
 8022172:	6123      	str	r3, [r4, #16]
 8022174:	2301      	movs	r3, #1
 8022176:	6163      	str	r3, [r4, #20]
 8022178:	b002      	add	sp, #8
 802217a:	bd70      	pop	{r4, r5, r6, pc}
 802217c:	ab01      	add	r3, sp, #4
 802217e:	466a      	mov	r2, sp
 8022180:	f7ff ffc8 	bl	8022114 <__swhatbuf_r>
 8022184:	9900      	ldr	r1, [sp, #0]
 8022186:	4605      	mov	r5, r0
 8022188:	4630      	mov	r0, r6
 802218a:	f7ff f945 	bl	8021418 <_malloc_r>
 802218e:	b948      	cbnz	r0, 80221a4 <__smakebuf_r+0x44>
 8022190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022194:	059a      	lsls	r2, r3, #22
 8022196:	d4ef      	bmi.n	8022178 <__smakebuf_r+0x18>
 8022198:	f023 0303 	bic.w	r3, r3, #3
 802219c:	f043 0302 	orr.w	r3, r3, #2
 80221a0:	81a3      	strh	r3, [r4, #12]
 80221a2:	e7e3      	b.n	802216c <__smakebuf_r+0xc>
 80221a4:	4b0d      	ldr	r3, [pc, #52]	; (80221dc <__smakebuf_r+0x7c>)
 80221a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80221a8:	89a3      	ldrh	r3, [r4, #12]
 80221aa:	6020      	str	r0, [r4, #0]
 80221ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80221b0:	6120      	str	r0, [r4, #16]
 80221b2:	81a3      	strh	r3, [r4, #12]
 80221b4:	9b00      	ldr	r3, [sp, #0]
 80221b6:	6163      	str	r3, [r4, #20]
 80221b8:	9b01      	ldr	r3, [sp, #4]
 80221ba:	b15b      	cbz	r3, 80221d4 <__smakebuf_r+0x74>
 80221bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80221c0:	4630      	mov	r0, r6
 80221c2:	f000 f84b 	bl	802225c <_isatty_r>
 80221c6:	b128      	cbz	r0, 80221d4 <__smakebuf_r+0x74>
 80221c8:	89a3      	ldrh	r3, [r4, #12]
 80221ca:	f023 0303 	bic.w	r3, r3, #3
 80221ce:	f043 0301 	orr.w	r3, r3, #1
 80221d2:	81a3      	strh	r3, [r4, #12]
 80221d4:	89a0      	ldrh	r0, [r4, #12]
 80221d6:	4305      	orrs	r5, r0
 80221d8:	81a5      	strh	r5, [r4, #12]
 80221da:	e7cd      	b.n	8022178 <__smakebuf_r+0x18>
 80221dc:	080210dd 	.word	0x080210dd

080221e0 <memchr>:
 80221e0:	b2c9      	uxtb	r1, r1
 80221e2:	4402      	add	r2, r0
 80221e4:	b510      	push	{r4, lr}
 80221e6:	4290      	cmp	r0, r2
 80221e8:	4603      	mov	r3, r0
 80221ea:	d101      	bne.n	80221f0 <memchr+0x10>
 80221ec:	2300      	movs	r3, #0
 80221ee:	e003      	b.n	80221f8 <memchr+0x18>
 80221f0:	781c      	ldrb	r4, [r3, #0]
 80221f2:	3001      	adds	r0, #1
 80221f4:	428c      	cmp	r4, r1
 80221f6:	d1f6      	bne.n	80221e6 <memchr+0x6>
 80221f8:	4618      	mov	r0, r3
 80221fa:	bd10      	pop	{r4, pc}

080221fc <__malloc_lock>:
 80221fc:	4801      	ldr	r0, [pc, #4]	; (8022204 <__malloc_lock+0x8>)
 80221fe:	f7ff b876 	b.w	80212ee <__retarget_lock_acquire_recursive>
 8022202:	bf00      	nop
 8022204:	2001fe9d 	.word	0x2001fe9d

08022208 <__malloc_unlock>:
 8022208:	4801      	ldr	r0, [pc, #4]	; (8022210 <__malloc_unlock+0x8>)
 802220a:	f7ff b872 	b.w	80212f2 <__retarget_lock_release_recursive>
 802220e:	bf00      	nop
 8022210:	2001fe9d 	.word	0x2001fe9d

08022214 <_read_r>:
 8022214:	b538      	push	{r3, r4, r5, lr}
 8022216:	4604      	mov	r4, r0
 8022218:	4d06      	ldr	r5, [pc, #24]	; (8022234 <_read_r+0x20>)
 802221a:	4608      	mov	r0, r1
 802221c:	4611      	mov	r1, r2
 802221e:	2200      	movs	r2, #0
 8022220:	602a      	str	r2, [r5, #0]
 8022222:	461a      	mov	r2, r3
 8022224:	f7df fd10 	bl	8001c48 <_read>
 8022228:	1c43      	adds	r3, r0, #1
 802222a:	d102      	bne.n	8022232 <_read_r+0x1e>
 802222c:	682b      	ldr	r3, [r5, #0]
 802222e:	b103      	cbz	r3, 8022232 <_read_r+0x1e>
 8022230:	6023      	str	r3, [r4, #0]
 8022232:	bd38      	pop	{r3, r4, r5, pc}
 8022234:	2001ffb0 	.word	0x2001ffb0

08022238 <_fstat_r>:
 8022238:	b538      	push	{r3, r4, r5, lr}
 802223a:	2300      	movs	r3, #0
 802223c:	4d06      	ldr	r5, [pc, #24]	; (8022258 <_fstat_r+0x20>)
 802223e:	4604      	mov	r4, r0
 8022240:	4608      	mov	r0, r1
 8022242:	4611      	mov	r1, r2
 8022244:	602b      	str	r3, [r5, #0]
 8022246:	f7df fd44 	bl	8001cd2 <_fstat>
 802224a:	1c43      	adds	r3, r0, #1
 802224c:	d102      	bne.n	8022254 <_fstat_r+0x1c>
 802224e:	682b      	ldr	r3, [r5, #0]
 8022250:	b103      	cbz	r3, 8022254 <_fstat_r+0x1c>
 8022252:	6023      	str	r3, [r4, #0]
 8022254:	bd38      	pop	{r3, r4, r5, pc}
 8022256:	bf00      	nop
 8022258:	2001ffb0 	.word	0x2001ffb0

0802225c <_isatty_r>:
 802225c:	b538      	push	{r3, r4, r5, lr}
 802225e:	2300      	movs	r3, #0
 8022260:	4d05      	ldr	r5, [pc, #20]	; (8022278 <_isatty_r+0x1c>)
 8022262:	4604      	mov	r4, r0
 8022264:	4608      	mov	r0, r1
 8022266:	602b      	str	r3, [r5, #0]
 8022268:	f7df fd43 	bl	8001cf2 <_isatty>
 802226c:	1c43      	adds	r3, r0, #1
 802226e:	d102      	bne.n	8022276 <_isatty_r+0x1a>
 8022270:	682b      	ldr	r3, [r5, #0]
 8022272:	b103      	cbz	r3, 8022276 <_isatty_r+0x1a>
 8022274:	6023      	str	r3, [r4, #0]
 8022276:	bd38      	pop	{r3, r4, r5, pc}
 8022278:	2001ffb0 	.word	0x2001ffb0

0802227c <_init>:
 802227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802227e:	bf00      	nop
 8022280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022282:	bc08      	pop	{r3}
 8022284:	469e      	mov	lr, r3
 8022286:	4770      	bx	lr

08022288 <_fini>:
 8022288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802228a:	bf00      	nop
 802228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802228e:	bc08      	pop	{r3}
 8022290:	469e      	mov	lr, r3
 8022292:	4770      	bx	lr


displaytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023fec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000211c  080241ec  080241ec  000341ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08026308  08026308  00036308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080264b0  080264b0  000364b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0003bf18  080264c8  080264c8  000364c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080623e0  080623e0  000723e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080623f0  080623f0  0009c2fc  2**0
                  CONTENTS
  8 .ARM          00000008  080623f0  080623f0  000723f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080623f8  080623f8  0009c2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080623f8  080623f8  000723f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0806240c  0806240c  0007240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  08062414  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 0001c200  200000fc  08062510  000800fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00004034  2001c2fc  0807e710  0009c2fc  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  20020330  0807e710  000a0330  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  0009c2fc  2**0
                  CONTENTS, READONLY
 17 .debug_info   00088814  00000000  00000000  0009c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000fd4a  00000000  00000000  00124b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003eb8  00000000  00000000  00134890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000039e0  00000000  00000000  00138748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000eedf  00000000  00000000  0013c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000493ef  00000000  00000000  0014b007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0016696f  00000000  00000000  001943f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  002fad65  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00011410  00000000  00000000  002fae34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2001c2fc 	.word	0x2001c2fc
 800021c:	00000000 	.word	0x00000000
 8000220:	080241d4 	.word	0x080241d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2001c300 	.word	0x2001c300
 800023c:	080241d4 	.word	0x080241d4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f001 fccd 	bl	8001f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f848 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005cc:	f000 f8ac 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fcf8 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_ADC1_Init>
  MX_CRC_Init();
 80005d8:	f000 f94c 	bl	8000874 <MX_CRC_Init>
  MX_FMC_Init();
 80005dc:	f000 fc88 	bl	8000ef0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005e0:	f000 f96a 	bl	80008b8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f9bc 	bl	8000960 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa08 	bl	80009fc <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005ec:	f000 fa52 	bl	8000a94 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80005f0:	f000 fa8e 	bl	8000b10 <MX_SAI1_Init>
  MX_SPI1_Init();
 80005f4:	f000 faf2 	bl	8000bdc <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f8:	f000 fb2c 	bl	8000c54 <MX_TIM4_Init>
  MX_TIM16_Init();
 80005fc:	f000 fb7a 	bl	8000cf4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000600:	f000 fb9e 	bl	8000d40 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000604:	f000 fc16 	bl	8000e34 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000608:	f000 fc4a 	bl	8000ea0 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800060c:	f000 f994 	bl	8000938 <MX_ICACHE_Init>
  MX_TouchGFX_Init();
 8000610:	f00c f9e3 	bl	800c9da <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000614:	f00c f9da 	bl	800c9cc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f009 f8fc 	bl	8009814 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <main+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x88>)
 8000622:	f009 f941 	bl	80098a8 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <main+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of VSyncTask */
  VSyncTaskHandle = osThreadNew(StartVSyncTask, NULL, &VSyncTask_attributes);
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <main+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x94>)
 8000632:	f009 f939 	bl	80098a8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <main+0x98>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f009 f90e 	bl	800985c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x80>
 8000642:	bf00      	nop
 8000644:	08024b50 	.word	0x08024b50
 8000648:	080012a5 	.word	0x080012a5
 800064c:	2001caa4 	.word	0x2001caa4
 8000650:	08024b74 	.word	0x08024b74
 8000654:	080012b9 	.word	0x080012b9
 8000658:	2001caa8 	.word	0x2001caa8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2248      	movs	r2, #72	; 0x48
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f022 fe0b 	bl	8023286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800067e:	2000      	movs	r0, #0
 8000680:	f003 fb2c 	bl	8003cdc <HAL_PWREx_ControlVoltageScaling>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800068a:	f000 fe31 	bl	80012f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068e:	f003 fb07 	bl	8003ca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xc8>)
 800069a:	f023 0318 	bic.w	r3, r3, #24
 800069e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80006a2:	2316      	movs	r3, #22
 80006a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2381      	movs	r3, #129	; 0x81
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006bc:	23b0      	movs	r3, #176	; 0xb0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c8:	230c      	movs	r3, #12
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006cc:	2337      	movs	r3, #55	; 0x37
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fb8b 	bl	8003dfc <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fe00 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f84d 	bl	80047a8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000714:	f000 fdec 	bl	80012f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000718:	f005 fe82 	bl	8006420 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071c:	bf00      	nop
 800071e:	3760      	adds	r7, #96	; 0x60
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0a6      	sub	sp, #152	; 0x98
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2294      	movs	r2, #148	; 0x94
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f022 fda6 	bl	8023286 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 800073a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000740:	2300      	movs	r3, #0
 8000742:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000754:	2330      	movs	r3, #48	; 0x30
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000758:	2311      	movs	r3, #17
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <PeriphCommonClock_Config+0x5c>)
 8000766:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fb32 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000776:	f000 fdbb 	bl	80012f0 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3798      	adds	r7, #152	; 0x98
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	01010000 	.word	0x01010000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_ADC1_Init+0xe0>)
 800080c:	f001 fd84 	bl	8002318 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 fd6b 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000826:	f002 fad3 	bl	8002dd0 <HAL_ADCEx_MultiModeConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000830:	f000 fd5e 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ADC1_Init+0xe8>)
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	; 0x7f
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000852:	f001 fead 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800085c:	f000 fd48 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2001c318 	.word	0x2001c318
 800086c:	42028000 	.word	0x42028000
 8000870:	25b00200 	.word	0x25b00200

08000874 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_CRC_Init+0x3c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <MX_CRC_Init+0x40>)
 800087c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_CRC_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_CRC_Init+0x3c>)
 8000898:	2201      	movs	r2, #1
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_CRC_Init+0x3c>)
 800089e:	f002 fc1b 	bl	80030d8 <HAL_CRC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a8:	f000 fd22 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2001c380 	.word	0x2001c380
 80008b4:	40023000 	.word	0x40023000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_I2C1_Init+0x74>)
 80008f4:	f002 fe7a 	bl	80035ec <HAL_I2C_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008fe:	f000 fcf7 	bl	80012f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000906:	f002 ff00 	bl	800370a <HAL_I2CEx_ConfigAnalogFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000910:	f000 fcee 	bl	80012f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2C1_Init+0x74>)
 8000918:	f002 ff42 	bl	80037a0 <HAL_I2CEx_ConfigDigitalFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fce5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2001c3a4 	.word	0x2001c3a4
 8000930:	40005400 	.word	0x40005400
 8000934:	40505681 	.word	0x40505681

08000938 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800093c:	2000      	movs	r0, #0
 800093e:	f002 ff7b 	bl	8003838 <HAL_ICACHE_ConfigAssociativityMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000948:	f000 fcd2 	bl	80012f0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800094c:	f002 ff94 	bl	8003878 <HAL_ICACHE_Enable>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000956:	f000 fccb 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_LPUART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_LPUART1_UART_Init+0x98>)
 800096e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000984:	220c      	movs	r2, #12
 8000986:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f007 fd34 	bl	8008414 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009b2:	f000 fc9d 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	f008 facd 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fc94 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009cc:	f008 fb02 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009d6:	f000 fc8b 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_LPUART1_UART_Init+0x90>)
 80009dc:	f008 fa83 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009e6:	f000 fc83 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2001c3f8 	.word	0x2001c3f8
 80009f4:	40008000 	.word	0x40008000
 80009f8:	00033324 	.word	0x00033324

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f007 fce5 	bl	8008414 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fc4e 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f008 fa7e 	bl	8008f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 fc45 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f008 fab3 	bl	8008fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fc3c 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f008 fa34 	bl	8008ee6 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 fc34 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2001c48c 	.word	0x2001c48c
 8000a90:	40013800 	.word	0x40013800

08000a94 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_OCTOSPI1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_OCTOSPI1_Init+0x74>)
 8000af4:	f002 fed0 	bl	8003898 <HAL_OSPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fbf7 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2001c520 	.word	0x2001c520
 8000b0c:	44021000 	.word	0x44021000

08000b10 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <MX_SAI1_Init+0xc4>)
 8000b18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_SAI1_Init+0xc8>)
 8000b54:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_SAI1_Init+0xc0>)
 8000bbc:	f005 ff86 	bl	8006acc <HAL_SAI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000bc6:	f000 fb93 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2001c578 	.word	0x2001c578
 8000bd4:	40015404 	.word	0x40015404
 8000bd8:	0002ee00 	.word	0x0002ee00

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c34:	2208      	movs	r2, #8
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI1_Init+0x70>)
 8000c3a:	f006 f971 	bl	8006f20 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f000 fb54 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2001c610 	.word	0x2001c610
 8000c50:	40013000 	.word	0x40013000

08000c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_TIM4_Init+0x9c>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM4_Init+0x98>)
 8000c9c:	f006 fa2b 	bl	80070f6 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 fb23 	bl	80012f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000caa:	2307      	movs	r3, #7
 8000cac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cba:	f006 fd77 	bl	80077ac <HAL_TIM_SlaveConfigSynchro>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000cc4:	f000 fb14 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM4_Init+0x98>)
 8000cd6:	f007 fa57 	bl	8008188 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f000 fb06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2001c674 	.word	0x2001c674
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_TIM16_Init+0x48>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_TIM16_Init+0x44>)
 8000d26:	f006 f9e6 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d30:	f000 fade 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2001c6c0 	.word	0x2001c6c0
 8000d3c:	40014400 	.word	0x40014400

08000d40 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2234      	movs	r2, #52	; 0x34
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f022 fa90 	bl	8023286 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <MX_TIM17_Init+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000d94:	f006 f9af 	bl	80070f6 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9e:	f000 faa7 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000da4:	f006 fa6e 	bl	8007284 <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000dae:	f000 fa9f 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000dd8:	f006 fbd4 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000de2:	f000 fa85 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e0e:	f007 fa43 	bl	8008298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e18:	f000 fa6a 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM17_Init+0xec>)
 8000e1e:	f000 fd41 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2001c70c 	.word	0x2001c70c
 8000e30:	40014800 	.word	0x40014800

08000e34 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e4a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000e4e:	f7ff fb9f 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fb84 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fb81 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_UCPD1_Init+0x64>)
 8000e72:	f008 fbe2 	bl	800963a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_UCPD1_Init+0x68>)
 8000e8a:	f008 fbd6 	bl	800963a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	42020000 	.word	0x42020000
 8000e9c:	42020400 	.word	0x42020400

08000ea0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <MX_USB_PCD_Init+0x4c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USB_PCD_Init+0x48>)
 8000ed6:	f002 fddf 	bl	8003a98 <HAL_PCD_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ee0:	f000 fa06 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2001c758 	.word	0x2001c758
 8000eec:	4000d400 	.word	0x4000d400

08000ef0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f022 f9c2 	bl	8023286 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_FMC_Init+0xcc>)
 8000f06:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <MX_FMC_Init+0xd0>)
 8000f0c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f90:	2311      	movs	r3, #17
 8000f92:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_FMC_Init+0xc8>)
 8000fa0:	f006 f861 	bl	8007066 <HAL_SRAM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8000faa:	f000 f9a1 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2001ca4c 	.word	0x2001ca4c
 8000fbc:	44020000 	.word	0x44020000
 8000fc0:	44020104 	.word	0x44020104

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4baa      	ldr	r3, [pc, #680]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4aa9      	ldr	r2, [pc, #676]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4ba7      	ldr	r3, [pc, #668]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4aa3      	ldr	r2, [pc, #652]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a9d      	ldr	r2, [pc, #628]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8001022:	f002 feb7 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a96      	ldr	r2, [pc, #600]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b94      	ldr	r3, [pc, #592]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a90      	ldr	r2, [pc, #576]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a84      	ldr	r2, [pc, #528]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <MX_GPIO_Init+0x2c0>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <MX_GPIO_Init+0x2c0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f241 1102 	movw	r1, #4354	; 0x1102
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010a6:	f002 fa89 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2108      	movs	r1, #8
 80010ae:	4877      	ldr	r0, [pc, #476]	; (800128c <MX_GPIO_Init+0x2c8>)
 80010b0:	f002 fa84 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4875      	ldr	r0, [pc, #468]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80010ba:	f002 fa7f 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4873      	ldr	r0, [pc, #460]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80010c6:	f002 fa79 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80010d0:	f002 fa74 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80010da:	4870      	ldr	r0, [pc, #448]	; (800129c <MX_GPIO_Init+0x2d8>)
 80010dc:	f002 fa6e 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 80010e0:	f241 1302 	movw	r3, #4354	; 0x1102
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	4863      	ldr	r0, [pc, #396]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80010fa:	f002 f8df 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110e:	230c      	movs	r3, #12
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	485c      	ldr	r0, [pc, #368]	; (800128c <MX_GPIO_Init+0x2c8>)
 800111a:	f002 f8cf 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 800111e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001130:	230c      	movs	r3, #12
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4859      	ldr	r0, [pc, #356]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 800113c:	f002 f8be 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	4852      	ldr	r0, [pc, #328]	; (80012a0 <MX_GPIO_Init+0x2dc>)
 8001156:	f002 f8b1 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800115a:	2308      	movs	r3, #8
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4846      	ldr	r0, [pc, #280]	; (800128c <MX_GPIO_Init+0x2c8>)
 8001172:	f002 f8a3 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8001176:	230e      	movs	r3, #14
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <MX_GPIO_Init+0x2d8>)
 800118c:	f002 f896 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001190:	2320      	movs	r3, #32
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	483a      	ldr	r0, [pc, #232]	; (8001290 <MX_GPIO_Init+0x2cc>)
 80011a8:	f002 f888 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <MX_GPIO_Init+0x2d0>)
 80011c6:	f002 f879 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_GPIO_Init+0x2d4>)
 80011e2:	f002 f86b 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_GPIO_Init+0x2c4>)
 80011fc:	f002 f85e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_GPIO_Init+0x2c4>)
 800121c:	f002 f84e 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8001220:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_GPIO_Init+0x2d8>)
 800123a:	f002 f83f 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001254:	f002 f832 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800126a:	2306      	movs	r3, #6
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_GPIO_Init+0x2cc>)
 8001276:	f002 f821 	bl	80032bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	42021800 	.word	0x42021800
 800128c:	42020c00 	.word	0x42020c00
 8001290:	42020400 	.word	0x42020400
 8001294:	42020000 	.word	0x42020000
 8001298:	42021c00 	.word	0x42021c00
 800129c:	42021400 	.word	0x42021400
 80012a0:	42020800 	.word	0x42020800

080012a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_TouchGFX_Process();
 80012ac:	f00b fb9d 	bl	800c9ea <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f008 fb8b 	bl	80099cc <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartDefaultTask+0xc>

080012b8 <StartVSyncTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVSyncTask */
void StartVSyncTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVSyncTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);	//100Hz refresh
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f008 fb83 	bl	80099cc <osDelay>
    touchgfxSignalVSync();
 80012c6:	f00d fec3 	bl	800f050 <touchgfxSignalVSync>
    osDelay(100);	//100Hz refresh
 80012ca:	e7f9      	b.n	80012c0 <StartVSyncTask+0x8>

080012cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012de:	f000 fe5b 	bl	8001f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_MspInit+0x4c>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x4c>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_MspInit+0x4c>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2107      	movs	r1, #7
 8001336:	f06f 0001 	mvn.w	r0, #1
 800133a:	f001 fea5 	bl	8003088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x74>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d123      	bne.n	80013b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_ADC_MspInit+0x7c>)
 80013b2:	f001 ff83 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	42028000 	.word	0x42028000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	42020000 	.word	0x42020000

080013cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_CRC_MspInit+0x38>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10b      	bne.n	80013f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023000 	.word	0x40023000
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	; 0xb8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2294      	movs	r2, #148	; 0x94
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f021 ff2a 	bl	8023286 <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_I2C_MspInit+0xb0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d13a      	bne.n	80014b2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fcc3 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff ff4c 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_I2C_MspInit+0xb8>)
 8001496:	f001 ff11 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_I2C_MspInit+0xb4>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	; 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	42020400 	.word	0x42020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b0      	sub	sp, #192	; 0xc0
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2294      	movs	r2, #148	; 0x94
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f021 fecc 	bl	8023286 <memset>
  if(huart->Instance==LPUART1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_UART_MspInit+0x134>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13c      	bne.n	8001572 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014f8:	2320      	movs	r3, #32
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc65 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff feee 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	4a39      	ldr	r2, [pc, #228]	; (8001600 <HAL_UART_MspInit+0x138>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_UART_MspInit+0x138>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_UART_MspInit+0x138>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_UART_MspInit+0x138>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001544:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800155e:	2308      	movs	r3, #8
 8001560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001568:	4619      	mov	r1, r3
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <HAL_UART_MspInit+0x13c>)
 800156c:	f001 fea6 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001570:	e040      	b.n	80015f4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_UART_MspInit+0x140>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13b      	bne.n	80015f4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fc23 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001594:	f7ff feac 	bl	80012f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x138>)
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	6613      	str	r3, [r2, #96]	; 0x60
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x138>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80015c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <HAL_UART_MspInit+0x144>)
 80015f0:	f001 fe64 	bl	80032bc <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	37c0      	adds	r7, #192	; 0xc0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40008000 	.word	0x40008000
 8001600:	40021000 	.word	0x40021000
 8001604:	42020400 	.word	0x42020400
 8001608:	40013800 	.word	0x40013800
 800160c:	42020000 	.word	0x42020000

08001610 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0b0      	sub	sp, #192	; 0xc0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2294      	movs	r2, #148	; 0x94
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f021 fe28 	bl	8023286 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_OSPI_MspInit+0x164>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f040 8094 	bne.w	800176a <HAL_OSPI_MspInit+0x15a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fbbe 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 800165e:	f7ff fe47 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6513      	str	r3, [r2, #80]	; 0x50
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_OSPI_MspInit+0x168>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 80016c2:	230e      	movs	r3, #14
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016da:	230a      	movs	r3, #10
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e4:	4619      	mov	r1, r3
 80016e6:	4825      	ldr	r0, [pc, #148]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 80016e8:	f001 fde8 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <HAL_OSPI_MspInit+0x16c>)
 8001712:	f001 fdd3 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8001716:	23cc      	movs	r3, #204	; 0xcc
 8001718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800172e:	230a      	movs	r3, #10
 8001730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_OSPI_MspInit+0x170>)
 800173c:	f001 fdbe 	bl	80032bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001740:	2307      	movs	r3, #7
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001758:	230a      	movs	r3, #10
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <HAL_OSPI_MspInit+0x174>)
 8001766:	f001 fda9 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	37c0      	adds	r7, #192	; 0xc0
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	44021000 	.word	0x44021000
 8001778:	40021000 	.word	0x40021000
 800177c:	42020800 	.word	0x42020800
 8001780:	42020000 	.word	0x42020000
 8001784:	42020400 	.word	0x42020400

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d129      	bne.n	80017fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80017da:	f002 fadb 	bl	8003d94 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80017de:	233c      	movs	r3, #60	; 0x3c
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017fa:	f001 fd5f 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40013000 	.word	0x40013000
 800180c:	40021000 	.word	0x40021000
 8001810:	42021800 	.word	0x42021800

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800183e:	e022      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0x88>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_TIM_Base_MspInit+0x8c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_TIM_Base_MspInit+0x84>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40000800 	.word	0x40000800
 8001898:	40021000 	.word	0x40021000
 800189c:	40014400 	.word	0x40014400
 80018a0:	40014800 	.word	0x40014800

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_MspPostInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80018de:	2302      	movs	r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80018ee:	230e      	movs	r3, #14
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_TIM_MspPostInit+0x6c>)
 80018fa:	f001 fcdf 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40014800 	.word	0x40014800
 800190c:	40021000 	.word	0x40021000
 8001910:	42021000 	.word	0x42021000

08001914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ae      	sub	sp, #184	; 0xb8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2294      	movs	r2, #148	; 0x94
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f021 fca6 	bl	8023286 <memset>
  if(hpcd->Instance==USB)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_PCD_MspInit+0xb8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d13e      	bne.n	80019c2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800194a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800194e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fa3c 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001962:	f7ff fcc5 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800197e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001998:	230a      	movs	r3, #10
 800199a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_PCD_MspInit+0xc0>)
 80019a6:	f001 fc89 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_PCD_MspInit+0xbc>)
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	37b8      	adds	r7, #184	; 0xb8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	4000d400 	.word	0x4000d400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42020000 	.word	0x42020000

080019d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13e      	bne.n	8001a72 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_FMC_MspInit+0xa4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6513      	str	r3, [r2, #80]	; 0x50
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_FMC_MspInit+0xa8>)
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8001a12:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001a16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4815      	ldr	r0, [pc, #84]	; (8001a84 <HAL_FMC_MspInit+0xac>)
 8001a2e:	f001 fc45 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480f      	ldr	r0, [pc, #60]	; (8001a88 <HAL_FMC_MspInit+0xb0>)
 8001a4c:	f001 fc36 	bl	80032bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8001a50:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <HAL_FMC_MspInit+0xb4>)
 8001a6c:	f001 fc26 	bl	80032bc <HAL_GPIO_Init>
 8001a70:	e000      	b.n	8001a74 <HAL_FMC_MspInit+0x9c>
    return;
 8001a72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2001caac 	.word	0x2001caac
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42020c00 	.word	0x42020c00
 8001a88:	42021400 	.word	0x42021400
 8001a8c:	42021000 	.word	0x42021000

08001a90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a98:	f7ff ff9e 	bl	80019d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_SAI_MspInit+0x64>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d124      	bne.n	8001b00 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_SAI_MspInit+0x6c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_SAI_MspInit+0x68>)
 8001ade:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8001ae0:	237c      	movs	r3, #124	; 0x7c
 8001ae2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001af0:	230d      	movs	r3, #13
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_SAI_MspInit+0x70>)
 8001afc:	f001 fbde 	bl	80032bc <HAL_GPIO_Init>

    }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40015404 	.word	0x40015404
 8001b0c:	2001cab0 	.word	0x2001cab0
 8001b10:	40021000 	.word	0x40021000
 8001b14:	42021000 	.word	0x42021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	202a      	movs	r0, #42	; 0x2a
 8001b2e:	f001 faab 	bl	8003088 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b32:	202a      	movs	r0, #42	; 0x2a
 8001b34:	f001 fac2 	bl	80030bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b42:	6613      	str	r3, [r2, #96]	; 0x60
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_InitTick+0x9c>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f836 	bl	8004bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b60:	f003 f820 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8001b64:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3b01      	subs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b96:	f005 faae 	bl	80070f6 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_InitTick+0xa4>)
 8001ba2:	f005 faff 	bl	80071a4 <HAL_TIM_Base_Start_IT>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	2001cab4 	.word	0x2001cab4
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_UP_IRQHandler+0x10>)
 8001bf6:	f005 fba6 	bl	8007346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2001cab4 	.word	0x2001cab4

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f021 f9df 	bl	8022fe0 <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	e000      	b.n	8001c5e <_read+0x16>
 8001c5c:	bf00      	nop
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	e000      	b.n	8001ca2 <_write+0x20>
 8001ca0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
  }
  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f021 f944 	bl	8022fe0 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20030000 	.word	0x20030000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	2001cb00 	.word	0x2001cb00
 8001d8c:	20020330 	.word	0x20020330

08001d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001dba:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e005      	b.n	8001de2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <SystemCoreClockUpdate+0x148>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d866      	bhi.n	8001ec6 <SystemCoreClockUpdate+0x112>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <SystemCoreClockUpdate+0x4c>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08001ec7 	.word	0x08001ec7
 8001e08:	08001ec7 	.word	0x08001ec7
 8001e0c:	08001ec7 	.word	0x08001ec7
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	08001ec7 	.word	0x08001ec7
 8001e18:	08001ec7 	.word	0x08001ec7
 8001e1c:	08001ec7 	.word	0x08001ec7
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08001ec7 	.word	0x08001ec7
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001e4d 	.word	0x08001e4d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e34:	4a32      	ldr	r2, [pc, #200]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6013      	str	r3, [r2, #0]
      break;
 8001e3a:	e048      	b.n	8001ece <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e3c:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001e3e:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <SystemCoreClockUpdate+0x150>)
 8001e40:	601a      	str	r2, [r3, #0]
      break;
 8001e42:	e044      	b.n	8001ece <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <SystemCoreClockUpdate+0x154>)
 8001e48:	601a      	str	r2, [r3, #0]
      break;
 8001e4a:	e040      	b.n	8001ece <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	3301      	adds	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d003      	beq.n	8001e72 <SystemCoreClockUpdate+0xbe>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d006      	beq.n	8001e7e <SystemCoreClockUpdate+0xca>
 8001e70:	e00b      	b.n	8001e8a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <SystemCoreClockUpdate+0x150>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	613b      	str	r3, [r7, #16]
          break;
 8001e7c:	e00b      	b.n	8001e96 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <SystemCoreClockUpdate+0x154>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	613b      	str	r3, [r7, #16]
          break;
 8001e88:	e005      	b.n	8001e96 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	613b      	str	r3, [r7, #16]
          break;
 8001e94:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0e5b      	lsrs	r3, r3, #25
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001ec2:	6013      	str	r3, [r2, #0]
      break;
 8001ec4:	e003      	b.n	8001ece <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	6013      	str	r3, [r2, #0]
      break;
 8001ecc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <SystemCoreClockUpdate+0x144>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <SystemCoreClockUpdate+0x158>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <SystemCoreClockUpdate+0x14c>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08024bb0 	.word	0x08024bb0
 8001f00:	20000004 	.word	0x20000004
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	08024b98 	.word	0x08024b98

08001f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f14:	f7ff ff3c 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f1a:	e003      	b.n	8001f24 <LoopCopyDataInit>

08001f1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f22:	3104      	adds	r1, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f24:	480a      	ldr	r0, [pc, #40]	; (8001f50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f2c:	d3f6      	bcc.n	8001f1c <CopyDataInit>
	ldr	r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f30:	e002      	b.n	8001f38 <LoopFillZerobss>

08001f32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f34:	f842 3b04 	str.w	r3, [r2], #4

08001f38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LoopForever+0x16>)
	cmp	r2, r3
 8001f3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f3c:	d3f9      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f3e:	f021 f95d 	bl	80231fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f42:	f7fe fb3d 	bl	80005c0 <main>

08001f46 <LoopForever>:

LoopForever:
    b LoopForever
 8001f46:	e7fe      	b.n	8001f46 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f48:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001f4c:	08062414 	.word	0x08062414
	ldr	r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f54:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001f58:	2001c2fc 	.word	0x2001c2fc
	ldr	r3, = _ebss
 8001f5c:	20020330 	.word	0x20020330

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>

08001f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001f6c:	2004      	movs	r0, #4
 8001f6e:	f001 f880 	bl	8003072 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001f72:	f7ff ff1f 	bl	8001db4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f76:	2007      	movs	r0, #7
 8001f78:	f7ff fdce 	bl	8001b18 <HAL_InitTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	e001      	b.n	8001f8c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f88:	f7ff f9b8 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	2001cb04 	.word	0x2001cb04

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2001cb04 	.word	0x2001cb04

08001fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <LL_ADC_SetOffset+0x44>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	03fff000 	.word	0x03fff000

08002088 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3330      	adds	r3, #48	; 0x30
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	211f      	movs	r1, #31
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 011f 	and.w	r1, r3, #31
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0318 	and.w	r3, r3, #24
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	400b      	ands	r3, r1
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	0007ffff 	.word	0x0007ffff

08002208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002240:	d101      	bne.n	8002246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <LL_ADC_IsEnabled+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_IsEnabled+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d101      	bne.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12e      	b.n	8002590 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff f803 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff67 	bl	800222c <LL_ADC_IsDeepPowerDownEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff4d 	bl	8002208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff82 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff66 	bl	8002254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002388:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_ADC_Init+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_ADC_Init+0x284>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff64 	bl	800227c <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff75 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80c7 	bne.w	800257e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80c3 	bne.w	800257e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff49 	bl	80022a4 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d110      	bne.n	800243a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002418:	4861      	ldr	r0, [pc, #388]	; (80025a0 <HAL_ADC_Init+0x288>)
 800241a:	f7ff ff43 	bl	80022a4 <LL_ADC_IsEnabled>
 800241e:	4604      	mov	r4, r0
 8002420:	4860      	ldr	r0, [pc, #384]	; (80025a4 <HAL_ADC_Init+0x28c>)
 8002422:	f7ff ff3f 	bl	80022a4 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	4323      	orrs	r3, r4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	485c      	ldr	r0, [pc, #368]	; (80025a8 <HAL_ADC_Init+0x290>)
 8002436:	f7ff fdcf 	bl	8001fd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002444:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800244a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002450:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	3b01      	subs	r3, #1
 800246e:	045b      	lsls	r3, r3, #17
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_ADC_Init+0x294>)
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff20 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 80024b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d140      	bne.n	800253a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e1b      	ldrb	r3, [r3, #24]
 80024c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024c8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e0:	f023 0306 	bic.w	r3, r3, #6
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d118      	bne.n	800252a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800251a:	430a      	orrs	r2, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	e007      	b.n	800253a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10c      	bne.n	800255c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f023 010f 	bic.w	r1, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
 800255a:	e007      	b.n	800256c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020f 	bic.w	r2, r2, #15
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f023 0303 	bic.w	r3, r3, #3
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	; 0x58
 800257c:	e007      	b.n	800258e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000004 	.word	0x20000004
 800259c:	053e2d63 	.word	0x053e2d63
 80025a0:	42028000 	.word	0x42028000
 80025a4:	42028100 	.word	0x42028100
 80025a8:	42028300 	.word	0x42028300
 80025ac:	fff0c007 	.word	0xfff0c007

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b0b7      	sub	sp, #220	; 0xdc
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x22>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e3c1      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe73 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 83a6 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f7ff fd89 	bl	8002110 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe61 	bl	80022ca <LL_ADC_REG_IsConversionOngoing>
 8002608:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe6d 	bl	80022f0 <LL_ADC_INJ_IsConversionOngoing>
 8002616:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800261a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 81c1 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 81bc 	bne.w	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	4619      	mov	r1, r3
 8002644:	f7ff fd90 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd4a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002656:	e00e      	b.n	8002676 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff fd7f 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fd3a 	bl	80020ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00a      	beq.n	80026ae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6919      	ldr	r1, [r3, #16]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026a8:	f7ff fcca 	bl	8002040 <LL_ADC_SetOffset>
 80026ac:	e17b      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fce7 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x12a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fcdc 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	e01e      	b.n	8002718 <HAL_ADC_ConfigChannel+0x168>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fcd1 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x180>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800274c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fca0 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fc84 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1f0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fc79 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e01e      	b.n	80027de <HAL_ADC_ConfigChannel+0x22e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc6e 	bl	8002088 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x246>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e018      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800280a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800280e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e004      	b.n	8002828 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800281e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002828:	429a      	cmp	r2, r3
 800282a:	d106      	bne.n	800283a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc3d 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc21 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x2b6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc16 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x2f4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fc0b 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800288c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e004      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x30c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	e016      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fbdc 	bl	80020b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2103      	movs	r1, #3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fbc0 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x378>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fbb5 	bl	8002088 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	e017      	b.n	8002958 <HAL_ADC_ConfigChannel+0x3a8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2103      	movs	r1, #3
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fbaa 	bl	8002088 <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002942:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e003      	b.n	8002956 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800294e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x3c0>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e011      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800297e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e003      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2103      	movs	r1, #3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb87 	bl	80020b4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc7a 	bl	80022a4 <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 81c9 	bne.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f7ff fbfb 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a8f      	ldr	r2, [pc, #572]	; (8002c0c <HAL_ADC_ConfigChannel+0x65c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f040 8131 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x44e>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b09      	cmp	r3, #9
 80029f4:	bf94      	ite	ls
 80029f6:	2301      	movls	r3, #1
 80029f8:	2300      	movhi	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e019      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x482>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d079      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x4a2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	e015      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x4ce>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x4ee>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	e017      	b.n	8002ace <HAL_ADC_ConfigChannel+0x51e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x544>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x576>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b26:	430b      	orrs	r3, r1
 8002b28:	e081      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x596>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	069b      	lsls	r3, r3, #26
 8002b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b44:	e015      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x5c2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	069b      	lsls	r3, r3, #26
 8002b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x5e2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	e017      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x612>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	ea42 0103 	orr.w	r1, r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x63e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	3b1e      	subs	r3, #30
 8002be6:	051b      	lsls	r3, r3, #20
 8002be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bec:	e01e      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x67c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	613b      	str	r3, [r7, #16]
  return result;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e006      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x668>
 8002c0a:	bf00      	nop
 8002c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	3b1e      	subs	r3, #30
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7ff fa98 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8082 	beq.w	8002d4a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	4847      	ldr	r0, [pc, #284]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c48:	f7ff f9ec 	bl	8002024 <LL_ADC_GetCommonPathInternalCh>
 8002c4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c50:	4845      	ldr	r0, [pc, #276]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c52:	f7ff fb27 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	4844      	ldr	r0, [pc, #272]	; (8002d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c5a:	f7ff fb23 	bl	80022a4 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4323      	orrs	r3, r4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15e      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d127      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d121      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d161      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4834      	ldr	r0, [pc, #208]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002c92:	f7ff f9b4 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002cae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cbe:	e044      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d113      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d134      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481e      	ldr	r0, [pc, #120]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cec:	f7ff f987 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	e02b      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d126      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d120      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11b      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4811      	ldr	r0, [pc, #68]	; (8002d64 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d1e:	f7ff f96e 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e012      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	37dc      	adds	r7, #220	; 0xdc
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	80080000 	.word	0x80080000
 8002d64:	42028300 	.word	0x42028300
 8002d68:	42028000 	.word	0x42028000
 8002d6c:	42028100 	.word	0x42028100
 8002d70:	c7520000 	.word	0xc7520000
 8002d74:	20000004 	.word	0x20000004
 8002d78:	053e2d63 	.word	0x053e2d63
 8002d7c:	cb840000 	.word	0xcb840000
 8002d80:	80000001 	.word	0x80000001

08002d84 <LL_ADC_IsEnabled>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_REG_IsConversionOngoing>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b0a1      	sub	sp, #132	; 0x84
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e089      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002df6:	2300      	movs	r3, #0
 8002df8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e068      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffb9 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ffb3 	bl	8002daa <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d14a      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d147      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d027      	beq.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	4824      	ldr	r0, [pc, #144]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e7a:	f7ff ff83 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4823      	ldr	r0, [pc, #140]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e82:	f7ff ff7f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4323      	orrs	r3, r4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d132      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eaa:	e023      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb8:	4814      	ldr	r0, [pc, #80]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002eba:	f7ff ff63 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ec2:	f7ff ff5f 	bl	8002d84 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4323      	orrs	r3, r4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002edc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3784      	adds	r7, #132	; 0x84
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	42028000 	.word	0x42028000
 8002f10:	42028100 	.word	0x42028100
 8002f14:	42028300 	.word	0x42028300

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0152      	lsls	r2, r2, #5
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0152      	lsls	r2, r2, #5
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b03      	cmp	r3, #3
 8003028:	bf28      	it	cs
 800302a:	2303      	movcs	r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3303      	adds	r3, #3
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b04      	subs	r3, #4
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff4c 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003096:	f7ff ff63 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 800309a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7ff ffb3 	bl	800300c <NVIC_EncodePriority>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff82 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff56 	bl	8002f7c <__NVIC_EnableIRQ>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e054      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f5b      	ldrb	r3, [r3, #29]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f966 	bl	80013cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_CRC_Init+0xc4>)
 8003114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0218 	bic.w	r2, r2, #24
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e00c      	b.n	8003142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	461a      	mov	r2, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f834 	bl	80031a0 <HAL_CRCEx_Polynomial_Set>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e028      	b.n	8003194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e004      	b.n	8003160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	04c11db7 	.word	0x04c11db7

080031a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031b0:	231f      	movs	r3, #31
 80031b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
 80031c2:	e063      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031c4:	bf00      	nop
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	613a      	str	r2, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b18      	cmp	r3, #24
 80031e8:	d846      	bhi.n	8003278 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	0800327f 	.word	0x0800327f
 80031f4:	08003279 	.word	0x08003279
 80031f8:	08003279 	.word	0x08003279
 80031fc:	08003279 	.word	0x08003279
 8003200:	08003279 	.word	0x08003279
 8003204:	08003279 	.word	0x08003279
 8003208:	08003279 	.word	0x08003279
 800320c:	08003279 	.word	0x08003279
 8003210:	0800326d 	.word	0x0800326d
 8003214:	08003279 	.word	0x08003279
 8003218:	08003279 	.word	0x08003279
 800321c:	08003279 	.word	0x08003279
 8003220:	08003279 	.word	0x08003279
 8003224:	08003279 	.word	0x08003279
 8003228:	08003279 	.word	0x08003279
 800322c:	08003279 	.word	0x08003279
 8003230:	08003261 	.word	0x08003261
 8003234:	08003279 	.word	0x08003279
 8003238:	08003279 	.word	0x08003279
 800323c:	08003279 	.word	0x08003279
 8003240:	08003279 	.word	0x08003279
 8003244:	08003279 	.word	0x08003279
 8003248:	08003279 	.word	0x08003279
 800324c:	08003279 	.word	0x08003279
 8003250:	08003255 	.word	0x08003255
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d913      	bls.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800325e:	e010      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d90f      	bls.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800326a:	e00c      	b.n	8003286 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d90b      	bls.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003276:	e008      	b.n	800328a <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
        break;
 800327c:	e006      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327e:	bf00      	nop
 8003280:	e004      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003282:	bf00      	nop
 8003284:	e002      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800328a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 0118 	bic.w	r1, r3, #24
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	e158      	b.n	800357e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 814a 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d005      	beq.n	80032fc <HAL_GPIO_Init+0x40>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d017      	beq.n	800339a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d123      	bne.n	80033ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	6939      	ldr	r1, [r7, #16]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a4 	beq.w	8003578 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3318      	adds	r3, #24
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d025      	beq.n	80034a8 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a51      	ldr	r2, [pc, #324]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01f      	beq.n	80034a4 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a50      	ldr	r2, [pc, #320]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d019      	beq.n	80034a0 <HAL_GPIO_Init+0x1e4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4f      	ldr	r2, [pc, #316]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_GPIO_Init+0x1e0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4e      	ldr	r2, [pc, #312]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00d      	beq.n	8003498 <HAL_GPIO_Init+0x1dc>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4d      	ldr	r2, [pc, #308]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x1d8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4c      	ldr	r2, [pc, #304]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_GPIO_Init+0x1d4>
 800348c:	2306      	movs	r3, #6
 800348e:	e00c      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003490:	2307      	movs	r3, #7
 8003492:	e00a      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003494:	2305      	movs	r3, #5
 8003496:	e008      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 8003498:	2304      	movs	r3, #4
 800349a:	e006      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 800349c:	2303      	movs	r3, #3
 800349e:	e004      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e002      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_GPIO_Init+0x1ee>
 80034a8:	2300      	movs	r3, #0
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	f002 0203 	and.w	r2, r2, #3
 80034b0:	00d2      	lsls	r2, r2, #3
 80034b2:	4093      	lsls	r3, r2
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80034ba:	4938      	ldr	r1, [pc, #224]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3318      	adds	r3, #24
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ec:	4a2b      	ldr	r2, [pc, #172]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f ae9f 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	4002f400 	.word	0x4002f400
 80035a0:	42020000 	.word	0x42020000
 80035a4:	42020400 	.word	0x42020400
 80035a8:	42020800 	.word	0x42020800
 80035ac:	42020c00 	.word	0x42020c00
 80035b0:	42021000 	.word	0x42021000
 80035b4:	42021400 	.word	0x42021400
 80035b8:	42021800 	.word	0x42021800

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e081      	b.n	8003702 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fefa 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e006      	b.n	8003674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d104      	bne.n	8003686 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d138      	bne.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800372a:	2302      	movs	r3, #2
 800372c:	e032      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800375c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d139      	bne.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e033      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	e007      	b.n	8003866 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0204 	bic.w	r2, r3, #4
 800385e:	4905      	ldr	r1, [pc, #20]	; (8003874 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40030400 	.word	0x40030400

08003878 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_ICACHE_Enable+0x1c>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40030400 	.word	0x40030400

08003898 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe fb8c 	bl	8001fc0 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e0a2      	b.n	80039fc <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 809b 	bne.w	80039fc <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fea2 	bl	8001610 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80038cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f89b 	bl	8003a0c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_OSPI_Init+0x170>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68d1      	ldr	r1, [r2, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6912      	ldr	r2, [r2, #16]
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0412      	lsls	r2, r2, #16
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6952      	ldr	r2, [r2, #20]
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0212      	lsls	r2, r2, #8
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	69d2      	ldr	r2, [r2, #28]
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0412      	lsls	r2, r2, #16
 800392c:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003936:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f863 	bl	8003a2a <OSPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d146      	bne.n	80039fc <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039a4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0202 	orr.w	r2, r2, #2
 80039e2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ec:	d103      	bne.n	80039f6 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80039f4:	e002      	b.n	80039fc <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	f8e0f8f4 	.word	0xf8e0f8f4

08003a0c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a3a:	e01a      	b.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d016      	beq.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fabc 	bl	8001fc0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00e      	b.n	8003a90 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d1d6      	bne.n	8003a3c <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af06      	add	r7, sp, #24
 8003a9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0cb      	b.n	8003c42 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd ff28 	bl	8001914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 fe1f 	bl	8009714 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e040      	b.n	8003b5e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3301      	adds	r3, #1
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3303      	adds	r3, #3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3338      	adds	r3, #56	; 0x38
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	333c      	adds	r3, #60	; 0x3c
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3b9      	bcc.n	8003adc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e044      	b.n	8003bf8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3b5      	bcc.n	8003b6e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	687e      	ldr	r6, [r7, #4]
 8003c0a:	466d      	mov	r5, sp
 8003c0c:	f106 0410 	add.w	r4, r6, #16
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	1d33      	adds	r3, r6, #4
 8003c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f005 fd94 	bl	800974a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f805 	bl	8003c4a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003cee:	f000 f861 	bl	8003db4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	d101      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03e      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d101      	bne.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e035      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e02f      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003d24:	4917      	ldr	r1, [pc, #92]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	2232      	movs	r2, #50	; 0x32
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4c:	e002      	b.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d102      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f2      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d101      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e000      	b.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40007000 	.word	0x40007000
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003d90:	cccccccd 	.word	0xcccccccd

08003d94 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da2:	6053      	str	r3, [r2, #4]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e00a      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	e001      	b.n	8003de8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f000 bcc2 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e10:	4b99      	ldr	r3, [pc, #612]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1a:	4b97      	ldr	r3, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80e9 	beq.w	8004004 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4a>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f040 8083 	bne.w	8003f46 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d17f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e46:	4b8c      	ldr	r3, [pc, #560]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_RCC_OscConfig+0x64>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f000 bc9a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7e>
 8003e70:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d224      	bcs.n	8003ed4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fece 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f000 bc7a 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	496f      	ldr	r1, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	496a      	ldr	r1, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e026      	b.n	8003f22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b68      	ldr	r3, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	495d      	ldr	r1, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fe8d 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f000 bc39 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f22:	f000 fe17 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a54      	ldr	r2, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f2c:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_RCC_OscConfig+0x284>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fdf1 	bl	8001b18 <HAL_InitTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d060      	beq.n	8004002 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	f000 bc27 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d039      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a49      	ldr	r2, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f831 	bl	8001fc0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f60:	e00f      	b.n	8003f82 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f62:	f7fe f82d 	bl	8001fc0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d908      	bls.n	8003f82 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f000 bc09 	b.w	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0e9      	beq.n	8003f62 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a39      	ldr	r2, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fac:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	492f      	ldr	r1, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e020      	b.n	8004004 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fce:	f7fd fff7 	bl	8001fc0 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd4:	e00e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fff3 	bl	8001fc0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d907      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e3cf      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1da>
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004002:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07e      	beq.n	800410e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x226>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d10e      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06e      	beq.n	800410c <HAL_RCC_OscConfig+0x310>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d16a      	bne.n	800410c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e3ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x256>
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405a:	d113      	bne.n	8004084 <HAL_RCC_OscConfig+0x288>
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8004062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e012      	b.n	800409c <HAL_RCC_OscConfig+0x2a0>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	20000004 	.word	0x20000004
 8004080:	20000008 	.word	0x20000008
 8004084:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a8a      	ldr	r2, [pc, #552]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a87      	ldr	r2, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd ff8c 	bl	8001fc0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040aa:	e00e      	b.n	80040ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd ff88 	bl	8001fc0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d907      	bls.n	80040ca <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e364      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b7a      	ldr	r3, [pc, #488]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ea      	beq.n	80040ac <HAL_RCC_OscConfig+0x2b0>
 80040d6:	e01a      	b.n	800410e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd ff72 	bl	8001fc0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	e00e      	b.n	80040fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd ff6e 	bl	8001fc0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d907      	bls.n	80040fe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e34a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ea      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2e4>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x330>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d119      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d116      	bne.n	800415a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x348>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e327      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4958      	ldr	r1, [pc, #352]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	e04c      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d029      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd ff27 	bl	8001fc0 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd ff23 	bl	8001fc0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e2ff      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004194:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ea      	beq.n	8004176 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	4941      	ldr	r1, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	e01e      	b.n	80041f4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fefd 	bl	8001fc0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c8:	e00e      	b.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fd fef9 	bl	8001fc0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d907      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2d5      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ea      	bne.n	80041ca <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d062      	beq.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d038      	beq.n	800427a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f023 0310 	bic.w	r3, r3, #16
 800421c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004220:	e007      	b.n	8004232 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd febd 	bl	8001fc0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004248:	e00f      	b.n	800426a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd feb9 	bl	8001fc0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b07      	cmp	r3, #7
 8004256:	d908      	bls.n	800426a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e294      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e8      	beq.n	800424a <HAL_RCC_OscConfig+0x44e>
 8004278:	e025      	b.n	80042c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fe99 	bl	8001fc0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	e012      	b.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004292:	f7fd fe95 	bl	8001fc0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b07      	cmp	r3, #7
 800429e:	d90b      	bls.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e270      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	4ba8      	ldr	r3, [pc, #672]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 812d 	beq.w	800452e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d8:	4ba0      	ldr	r3, [pc, #640]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b9d      	ldr	r3, [pc, #628]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a9c      	ldr	r2, [pc, #624]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b9a      	ldr	r3, [pc, #616]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b97      	ldr	r3, [pc, #604]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11e      	bne.n	800434a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a93      	ldr	r2, [pc, #588]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7fd fe52 	bl	8001fc0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431e:	e00e      	b.n	800433e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fe4e 	bl	8001fc0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d907      	bls.n	800433e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e22a      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x764>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ea      	beq.n	8004320 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01f      	beq.n	8004396 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004362:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004382:	e018      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a74      	ldr	r2, [pc, #464]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004394:	e00f      	b.n	80043b6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004396:	4b71      	ldr	r3, [pc, #452]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043a6:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	4a6b      	ldr	r2, [pc, #428]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d068      	beq.n	8004490 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fdff 	bl	8001fc0 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c4:	e011      	b.n	80043ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd fdfb 	bl	8001fc0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1d4      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0e6      	beq.n	80043c6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d022      	beq.n	800444a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004404:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004414:	e011      	b.n	800443a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fdd3 	bl	8001fc0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d908      	bls.n	800443a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ac      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800443a:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0e6      	beq.n	8004416 <HAL_RCC_OscConfig+0x61a>
 8004448:	e068      	b.n	800451c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800444a:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	4a42      	ldr	r2, [pc, #264]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800445a:	e011      	b.n	8004480 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fd fdb0 	bl	8001fc0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d908      	bls.n	8004480 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e189      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e6      	bne.n	800445c <HAL_RCC_OscConfig+0x660>
 800448e:	e045      	b.n	800451c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fd96 	bl	8001fc0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004496:	e011      	b.n	80044bc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fd92 	bl	8001fc0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d908      	bls.n	80044bc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e16b      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d021      	beq.n	800451c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044e8:	e011      	b.n	800450e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fd fd69 	bl	8001fc0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d908      	bls.n	800450e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCC_OscConfig+0x760>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e142      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4a0d      	ldr	r2, [pc, #52]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x760>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_RCC_OscConfig+0x760>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fd35 	bl	8001fc0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x788>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fd fd2c 	bl	8001fc0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e107      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004584:	4b85      	ldr	r3, [pc, #532]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0e8      	beq.n	8004564 <HAL_RCC_OscConfig+0x768>
 8004592:	e022      	b.n	80045da <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fd0c 	bl	8001fc0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ac:	f7fd fd08 	bl	8001fc0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d908      	bls.n	80045cc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ba:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0e3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045cc:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e8      	bne.n	80045ac <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80d7 	beq.w	8004792 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	f000 8091 	beq.w	8004714 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d166      	bne.n	80046c8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fd fcdb 	bl	8001fc0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460e:	f7fd fcd7 	bl	8001fc0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0b3      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462c:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <HAL_RCC_OscConfig+0x9a4>)
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004648:	3a01      	subs	r2, #1
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0552      	lsls	r2, r2, #21
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	3a01      	subs	r2, #1
 800466a:	0652      	lsls	r2, r2, #25
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004672:	06d2      	lsls	r2, r2, #27
 8004674:	430a      	orrs	r2, r1
 8004676:	4949      	ldr	r1, [pc, #292]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004688:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800468e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004692:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd fc94 	bl	8001fc0 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	e00e      	b.n	80046ba <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd fc90 	bl	8001fc0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d907      	bls.n	80046ba <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e06c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ea      	beq.n	800469c <HAL_RCC_OscConfig+0x8a0>
 80046c6:	e064      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fc74 	bl	8001fc0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	e00e      	b.n	80046fa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fc70 	bl	8001fc0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d907      	bls.n	80046fa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e04c      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ea      	bne.n	80046dc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4924      	ldr	r1, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x9a8>)
 800470e:	4013      	ands	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
 8004712:	e03e      	b.n	8004792 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e039      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x9a0>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	429a      	cmp	r2, r3
 8004732:	d12c      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	3b01      	subs	r3, #1
 8004740:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d123      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11b      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d113      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d109      	bne.n	800478e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	019f800c 	.word	0x019f800c
 80047a4:	feeefffc 	.word	0xfeeefffc

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e11c      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b90      	ldr	r3, [pc, #576]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	498b      	ldr	r1, [pc, #556]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e104      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	497b      	ldr	r1, [pc, #492]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8085 	beq.w	8004936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d11f      	bne.n	8004874 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0da      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004844:	f000 fa58 	bl	8004cf8 <RCC_GetSysClockFreqFromPLLSource>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d947      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004852:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d141      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800485e:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004866:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e036      	b.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487c:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b6      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004894:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0aa      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b58      	ldr	r3, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0a2      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b4:	f000 f8b0 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a53      	ldr	r2, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x264>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90f      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ce:	4b4e      	ldr	r3, [pc, #312]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d6:	4a4c      	ldr	r2, [pc, #304]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4946      	ldr	r1, [pc, #280]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f4:	f7fd fb64 	bl	8001fc0 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e013      	b.n	8004924 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fb60 	bl	8001fc0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d90a      	bls.n	8004924 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e06a      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 020c 	and.w	r2, r3, #12
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	429a      	cmp	r2, r3
 8004934:	d1e2      	bne.n	80048fc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d105      	bne.n	8004948 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004960:	429a      	cmp	r2, r3
 8004962:	d208      	bcs.n	8004976 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4925      	ldr	r1, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004976:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d210      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 020f 	bic.w	r2, r3, #15
 800498c:	491d      	ldr	r1, [pc, #116]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_ClockConfig+0x25c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e029      	b.n	80049fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4912      	ldr	r1, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049e4:	f000 f8b6 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x268>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd f890 	bl	8001b18 <HAL_InitTick>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	04c4b400 	.word	0x04c4b400
 8004a10:	20000004 	.word	0x20000004
 8004a14:	20000008 	.word	0x20000008

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a34      	ldr	r2, [pc, #208]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d146      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xb4>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0xce>
 8004aca:	e019      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x134>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	0a12      	lsrs	r2, r2, #8
 8004ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	617b      	str	r3, [r7, #20]
        break;
 8004ae4:	e019      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	0a12      	lsrs	r2, r2, #8
 8004af4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
        break;
 8004afe:	e00c      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b0a:	68d2      	ldr	r2, [r2, #12]
 8004b0c:	0a12      	lsrs	r2, r2, #8
 8004b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
        break;
 8004b18:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0e5b      	lsrs	r3, r3, #25
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	3301      	adds	r3, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b34:	69bb      	ldr	r3, [r7, #24]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08024bb0 	.word	0x08024bb0
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004b58:	f7ff ff5e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	08024b98 	.word	0x08024b98

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff ffe8 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	08024ba8 	.word	0x08024ba8

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffd4 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	08024ba8 	.word	0x08024ba8

08004bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	220f      	movs	r2, #15
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetClockConfig+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c3c:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f83a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6138      	str	r0, [r7, #16]
 8004c4e:	e014      	b.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff f82a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c86:	d10b      	bne.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d919      	bls.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2ba0      	cmp	r3, #160	; 0xa0
 8004c92:	d902      	bls.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c94:	2302      	movs	r3, #2
 8004c96:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c98:	e013      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004c9e:	e010      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d902      	bls.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e00a      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d102      	bne.n	8004cb8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d101      	bne.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 020f 	bic.w	r2, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40022000 	.word	0x40022000

08004cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d015      	beq.n	8004d48 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d839      	bhi.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d01c      	beq.n	8004d62 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d133      	bne.n	8004d96 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	0a12      	lsrs	r2, r2, #8
 8004d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	613b      	str	r3, [r7, #16]
      break;
 8004d46:	e029      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d52:	68d2      	ldr	r2, [r2, #12]
 8004d54:	0a12      	lsrs	r2, r2, #8
 8004d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e01c      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e005      	b.n	8004d8a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	613b      	str	r3, [r7, #16]
        break;
 8004d94:	e002      	b.n	8004d9c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
      break;
 8004d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0e5b      	lsrs	r3, r3, #25
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004db6:	683b      	ldr	r3, [r7, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	08024bb0 	.word	0x08024bb0

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d040      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d02a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d825      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d026      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d821      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d006      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d81d      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d010      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e14:	e018      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a8e      	ldr	r2, [pc, #568]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e22:	e015      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb08 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3320      	adds	r3, #32
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fbe5 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
        break;
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e56:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	497b      	ldr	r1, [pc, #492]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d030      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d82a      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d824      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d81e      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb0:	e018      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a67      	ldr	r2, [pc, #412]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ebe:	e015      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 faba 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ed0:	e00c      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fb97 	bl	800660c <RCCEx_PLLSAI2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
        break;
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4954      	ldr	r1, [pc, #336]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80ab 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	4a48      	ldr	r2, [pc, #288]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	6593      	str	r3, [r2, #88]	; 0x58
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f48:	4b43      	ldr	r3, [pc, #268]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f54:	f7fd f834 	bl	8001fc0 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5a:	e00f      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fd f830 	bl	8001fc0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d908      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004f7a:	e006      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0e9      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004f8a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d164      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fcc:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01f      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fc ffe7 	bl	8001fc0 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff4:	e012      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc ffe3 	bl	8001fc0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d909      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800501a:	e007      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0e5      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800502c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	77bb      	strb	r3, [r7, #30]
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005054:	40021000 	.word	0x40021000
 8005058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b9c      	ldr	r3, [pc, #624]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a9b      	ldr	r2, [pc, #620]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b96      	ldr	r3, [pc, #600]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	4992      	ldr	r1, [pc, #584]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a0:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 020c 	bic.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	498a      	ldr	r1, [pc, #552]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050c2:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4981      	ldr	r1, [pc, #516]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e4:	4b7c      	ldr	r3, [pc, #496]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	4979      	ldr	r1, [pc, #484]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005106:	4b74      	ldr	r3, [pc, #464]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	4970      	ldr	r1, [pc, #448]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005128:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	4968      	ldr	r1, [pc, #416]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	495f      	ldr	r1, [pc, #380]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516c:	4b5a      	ldr	r3, [pc, #360]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	4957      	ldr	r1, [pc, #348]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519c:	494e      	ldr	r1, [pc, #312]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b8:	d00e      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051be:	d814      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c8:	d10f      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ca:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	4a42      	ldr	r2, [pc, #264]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051d6:	e00c      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f92e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	77fb      	strb	r3, [r7, #31]
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	4934      	ldr	r1, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7ffb      	ldrb	r3, [r7, #31]
 8005212:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	492a      	ldr	r1, [pc, #168]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005242:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	4921      	ldr	r1, [pc, #132]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	4919      	ldr	r1, [pc, #100]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528c:	f023 0203 	bic.w	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	4910      	ldr	r1, [pc, #64]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02b      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c6:	d109      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a02      	ldr	r2, [pc, #8]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
 80052d4:	e014      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f8a7 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005314:	d108      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531c:	4a6e      	ldr	r2, [pc, #440]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800531e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005322:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005326:	e012      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005328:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005336:	4968      	ldr	r1, [pc, #416]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800533e:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005344:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d10d      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f86e 	bl	8006440 <RCCEx_PLLSAI1_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005368:	7ffb      	ldrb	r3, [r7, #31]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
 8005370:	77bb      	strb	r3, [r7, #30]
 8005372:	e016      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537c:	d106      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537e:	4b56      	ldr	r3, [pc, #344]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a55      	ldr	r2, [pc, #340]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005388:	60d3      	str	r3, [r2, #12]
 800538a:	e00a      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	d105      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	4a4f      	ldr	r2, [pc, #316]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d028      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053bc:	4946      	ldr	r1, [pc, #280]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ce:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a41      	ldr	r2, [pc, #260]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80053d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d8:	60d3      	str	r3, [r2, #12]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f827 	bl	8006440 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7ffb      	ldrb	r3, [r7, #31]
 80053fe:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	492e      	ldr	r1, [pc, #184]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d10c      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f802 	bl	8006440 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
 8005448:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545c:	f023 0204 	bic.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	491c      	ldr	r1, [pc, #112]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005480:	f023 0218 	bic.w	r2, r3, #24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4913      	ldr	r1, [pc, #76]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	490a      	ldr	r1, [pc, #40]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d105      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80054c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80054ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ee:	d13e      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d028      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550a:	f200 8773 	bhi.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d005      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d00e      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800551e:	f000 bf69 	b.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	f040 8763 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	61fb      	str	r3, [r7, #28]
        break;
 8005538:	f000 bf5e 	b.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800553e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	f040 8758 	bne.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800554c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005550:	61fb      	str	r3, [r7, #28]
        break;
 8005552:	f000 bf53 	b.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	f040 874d 	bne.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8005568:	61fb      	str	r3, [r7, #28]
        break;
 800556a:	f000 bf49 	b.w	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d036      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d84b      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d020      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005590:	e044      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d116      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	e005      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055ca:	e02a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
        break;
 80055d0:	e027      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055de:	d102      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80055e2:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055e4:	e01d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
        break;
 80055ea:	e01a      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80055fc:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80055fe:	e010      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
        break;
 8005604:	e00d      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	0003d090 	.word	0x0003d090
 8005610:	08024bb0 	.word	0x08024bb0
 8005614:	00f42400 	.word	0x00f42400
 8005618:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	bf00      	nop
    }

    switch (PeriphClk)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	f000 8659 	beq.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005632:	f200 86e7 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563c:	f000 8605 	beq.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	f200 86dd 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005650:	f000 8468 	beq.w	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565a:	f200 86d3 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005664:	f000 8530 	beq.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	f200 86c9 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005678:	f000 8180 	beq.w	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005682:	f200 86bf 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568c:	f000 80c2 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005696:	f200 86b5 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	f000 842f 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	f200 86ab 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b4:	f000 83e7 	beq.w	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	f200 86a1 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	f000 80a4 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d2:	f200 8697 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	f000 8092 	beq.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	f200 868d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	f000 8080 	beq.w	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	f200 8683 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	f000 8553 	beq.w	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	f200 8679 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005718:	f000 84ff 	beq.w	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005722:	f200 866f 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	f000 84a0 	beq.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	f200 8665 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	f000 846b 	beq.w	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	f200 865d 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b20      	cmp	r3, #32
 800574e:	d84b      	bhi.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8656 	beq.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	2b1f      	cmp	r3, #31
 800575e:	f200 8651 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005b81 	.word	0x08005b81
 800576c:	08005bf5 	.word	0x08005bf5
 8005770:	08006405 	.word	0x08006405
 8005774:	08005c87 	.word	0x08005c87
 8005778:	08006405 	.word	0x08006405
 800577c:	08006405 	.word	0x08006405
 8005780:	08006405 	.word	0x08006405
 8005784:	08005cff 	.word	0x08005cff
 8005788:	08006405 	.word	0x08006405
 800578c:	08006405 	.word	0x08006405
 8005790:	08006405 	.word	0x08006405
 8005794:	08006405 	.word	0x08006405
 8005798:	08006405 	.word	0x08006405
 800579c:	08006405 	.word	0x08006405
 80057a0:	08006405 	.word	0x08006405
 80057a4:	08005d83 	.word	0x08005d83
 80057a8:	08006405 	.word	0x08006405
 80057ac:	08006405 	.word	0x08006405
 80057b0:	08006405 	.word	0x08006405
 80057b4:	08006405 	.word	0x08006405
 80057b8:	08006405 	.word	0x08006405
 80057bc:	08006405 	.word	0x08006405
 80057c0:	08006405 	.word	0x08006405
 80057c4:	08006405 	.word	0x08006405
 80057c8:	08006405 	.word	0x08006405
 80057cc:	08006405 	.word	0x08006405
 80057d0:	08006405 	.word	0x08006405
 80057d4:	08006405 	.word	0x08006405
 80057d8:	08006405 	.word	0x08006405
 80057dc:	08006405 	.word	0x08006405
 80057e0:	08006405 	.word	0x08006405
 80057e4:	08005e05 	.word	0x08005e05
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	f000 83e8 	beq.w	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80057f0:	f000 be08 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057fa:	f001 f867 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
        break;
 8005800:	f000 be03 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800580a:	f001 f85f 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	f000 bdfb 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005814:	4b9c      	ldr	r3, [pc, #624]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800582e:	f200 8096 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005838:	d02a      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	f200 808d 	bhi.w	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07f      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005850:	d04b      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8005852:	e084      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	f040 8081 	bne.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005862:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800586e:	4b86      	ldr	r3, [pc, #536]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	e005      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800587a:	4b83      	ldr	r3, [pc, #524]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	61fb      	str	r3, [r7, #28]
            break;
 800588e:	e069      	b.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005890:	4b7d      	ldr	r3, [pc, #500]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800589c:	d165      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800589e:	4b7a      	ldr	r3, [pc, #488]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058aa:	d15e      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3301      	adds	r3, #1
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058c0:	4b71      	ldr	r3, [pc, #452]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ca:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
 80058d4:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	0d5b      	lsrs	r3, r3, #21
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	3301      	adds	r3, #1
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	61fb      	str	r3, [r7, #28]
            break;
 80058e8:	e03f      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f6:	d13b      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058f8:	4b63      	ldr	r3, [pc, #396]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005904:	d134      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005906:	f000 ff2d 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 800590a:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	3301      	adds	r3, #1
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	0d5b      	lsrs	r3, r3, #21
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	61fb      	str	r3, [r7, #28]
            break;
 8005948:	e012      	b.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800594a:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10e      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800595a:	61fb      	str	r3, [r7, #28]
            break;
 800595c:	e00b      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 800595e:	bf00      	nop
 8005960:	f000 bd53 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005964:	bf00      	nop
 8005966:	f000 bd50 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800596a:	bf00      	nop
 800596c:	f000 bd4d 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005970:	bf00      	nop
 8005972:	f000 bd4a 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005976:	bf00      	nop
        break;
 8005978:	f000 bd47 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800597e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598a:	d13d      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005998:	f040 8536 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	f040 852e 	bne.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059c0:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ca:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0edb      	lsrs	r3, r3, #27
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059de:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 80059ea:	2311      	movs	r3, #17
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e001      	b.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 80059f0:	2307      	movs	r3, #7
 80059f2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	fb03 f202 	mul.w	r2, r3, r2
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	f000 bd00 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a1a:	d016      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a22:	f200 809e 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d032      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	f200 8095 	bhi.w	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8087 	beq.w	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a46:	d052      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005a48:	e08b      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	f040 8088 	bne.w	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	e005      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	61fb      	str	r3, [r7, #28]
              break;
 8005a84:	e070      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	08024bb0 	.word	0x08024bb0
 8005a90:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a94:	4baa      	ldr	r3, [pc, #680]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa0:	d165      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005aa2:	4ba7      	ldr	r3, [pc, #668]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d15e      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ac4:	4b9e      	ldr	r3, [pc, #632]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0d5b      	lsrs	r3, r3, #21
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	61fb      	str	r3, [r7, #28]
              break;
 8005aec:	e03f      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005aee:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afa:	d13b      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005afc:	4b90      	ldr	r3, [pc, #576]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b08:	d134      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b0a:	f000 fe2b 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005b0e:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b10:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b24:	4b86      	ldr	r3, [pc, #536]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	0d5b      	lsrs	r3, r3, #21
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	3301      	adds	r3, #1
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
              break;
 8005b4c:	e012      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d10e      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005b5c:	4b79      	ldr	r3, [pc, #484]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005b5e:	61fb      	str	r3, [r7, #28]
              break;
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8005b62:	bf00      	nop
 8005b64:	f000 bc50 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b68:	bf00      	nop
 8005b6a:	f000 bc4d 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b6e:	bf00      	nop
 8005b70:	f000 bc4a 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b74:	bf00      	nop
 8005b76:	f000 bc47 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005b7a:	bf00      	nop
        break;
 8005b7c:	f000 bc44 	b.w	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d827      	bhi.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bb1 	.word	0x08005bb1
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bcd 	.word	0x08005bcd
            frequency = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fffc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
            break;
 8005bae:	e01f      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005bb0:	f7fe ff32 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005bb4:	61f8      	str	r0, [r7, #28]
            break;
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d110      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8005bc6:	4b60      	ldr	r3, [pc, #384]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005bc8:	61fb      	str	r3, [r7, #28]
            break;
 8005bca:	e00d      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005bcc:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	61fb      	str	r3, [r7, #28]
            break;
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8005be2:	bf00      	nop
 8005be4:	f000 bc11 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005be8:	bf00      	nop
 8005bea:	f000 bc0e 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bee:	bf00      	nop
        break;
 8005bf0:	f000 bc0b 	b.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005bf4:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d839      	bhi.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c7b 	.word	0x08005c7b
 8005c14:	08005c7b 	.word	0x08005c7b
 8005c18:	08005c7b 	.word	0x08005c7b
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c7b 	.word	0x08005c7b
 8005c24:	08005c7b 	.word	0x08005c7b
 8005c28:	08005c7b 	.word	0x08005c7b
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c7b 	.word	0x08005c7b
 8005c34:	08005c7b 	.word	0x08005c7b
 8005c38:	08005c7b 	.word	0x08005c7b
 8005c3c:	08005c65 	.word	0x08005c65
            frequency = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe ff9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
            break;
 8005c46:	e01d      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005c48:	f7fe fee6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005c4c:	61f8      	str	r0, [r7, #28]
            break;
 8005c4e:	e019      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c50:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005c60:	61fb      	str	r3, [r7, #28]
            break;
 8005c62:	e00c      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d107      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	61fb      	str	r3, [r7, #28]
            break;
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005c7a:	bf00      	nop
 8005c7c:	e3c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c7e:	bf00      	nop
 8005c80:	e3c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c82:	bf00      	nop
        break;
 8005c84:	e3c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d021      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b30      	cmp	r3, #48	; 0x30
 8005c9c:	d829      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d011      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d823      	bhi.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8005cb6:	e01c      	b.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe ff60 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
            break;
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fe feaa 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005cc4:	61f8      	str	r0, [r7, #28]
            break;
 8005cc6:	e019      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005cd8:	61fb      	str	r3, [r7, #28]
            break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cdc:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61fb      	str	r3, [r7, #28]
            break;
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8005cf2:	bf00      	nop
 8005cf4:	e389      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cf6:	bf00      	nop
 8005cf8:	e387      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005cfa:	bf00      	nop
        break;
 8005cfc:	e385      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d0e:	d027      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2bc0      	cmp	r3, #192	; 0xc0
 8005d14:	d82f      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d829      	bhi.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d004      	beq.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8005d2e:	e022      	b.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe ff24 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
            break;
 8005d36:	e023      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d38:	f7fe fe6e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005d3c:	61f8      	str	r0, [r7, #28]
            break;
 8005d3e:	e01f      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	02dc6c00 	.word	0x02dc6c00
 8005d48:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4c:	4b99      	ldr	r3, [pc, #612]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d10f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005d5a:	4b97      	ldr	r3, [pc, #604]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005d5c:	61fb      	str	r3, [r7, #28]
            break;
 8005d5e:	e00c      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	61fb      	str	r3, [r7, #28]
            break;
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005d76:	bf00      	nop
 8005d78:	e347      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7a:	bf00      	nop
 8005d7c:	e345      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7e:	bf00      	nop
        break;
 8005d80:	e343      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d82:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d94:	d025      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d82c      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d013      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d824      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d004      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005dbc:	e01c      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fedd 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	61f8      	str	r0, [r7, #28]
            break;
 8005dc4:	e01d      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe fe27 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005dca:	61f8      	str	r0, [r7, #28]
            break;
 8005dcc:	e019      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dce:	4b79      	ldr	r3, [pc, #484]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d10f      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005ddc:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005dde:	61fb      	str	r3, [r7, #28]
            break;
 8005de0:	e00c      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005de2:	4b74      	ldr	r3, [pc, #464]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d107      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df4:	61fb      	str	r3, [r7, #28]
            break;
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005df8:	bf00      	nop
 8005dfa:	e306      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dfc:	bf00      	nop
 8005dfe:	e304      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e00:	bf00      	nop
        break;
 8005e02:	e302      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e04:	4b6b      	ldr	r3, [pc, #428]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e16:	d025      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1e:	d82c      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d013      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d824      	bhi.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3c:	d004      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fe9c 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005e44:	61f8      	str	r0, [r7, #28]
            break;
 8005e46:	e01d      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005e48:	f7fe fde6 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005e4c:	61f8      	str	r0, [r7, #28]
            break;
 8005e4e:	e019      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e50:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d10f      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005e60:	61fb      	str	r3, [r7, #28]
            break;
 8005e62:	e00c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	61fb      	str	r3, [r7, #28]
            break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005e7a:	bf00      	nop
 8005e7c:	e2c5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e7e:	bf00      	nop
 8005e80:	e2c3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e82:	bf00      	nop
        break;
 8005e84:	e2c1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e86:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ea0:	d12b      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe fdb9 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ea6:	61f8      	str	r0, [r7, #28]
            break;
 8005ea8:	e02a      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d023      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005eb6:	f000 fc55 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8005eba:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	fb03 f202 	mul.w	r2, r3, r2
 8005ee4:	4b33      	ldr	r3, [pc, #204]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
            break;
 8005ef8:	e001      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005efa:	bf00      	nop
 8005efc:	e285      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e283      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fe fe46 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005f18:	61f8      	str	r0, [r7, #28]
        break;
 8005f1a:	e276      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f1c:	f7fe fd7c 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e272      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f2a:	f003 0318 	and.w	r3, r3, #24
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d010      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d834      	bhi.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d024      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005f48:	e02d      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f50:	f000 fcbc 	bl	80068cc <RCCEx_GetSAIxPeriphCLKFreq>
 8005f54:	61f8      	str	r0, [r7, #28]
            break;
 8005f56:	e02b      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d122      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	e005      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4a0c      	ldr	r2, [pc, #48]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	61fb      	str	r3, [r7, #28]
            break;
 8005f90:	e00b      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d106      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005fa2:	61fb      	str	r3, [r7, #28]
            break;
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8005fa6:	bf00      	nop
 8005fa8:	e22f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005faa:	bf00      	nop
 8005fac:	e22d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005fae:	bf00      	nop
        break;
 8005fb0:	e22b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	08024bb0 	.word	0x08024bb0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fc0:	4b96      	ldr	r3, [pc, #600]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d819      	bhi.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d004      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005fec:	f7fe fdc6 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005ff0:	61f8      	str	r0, [r7, #28]
            break;
 8005ff2:	e010      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005ff4:	f7fe fd10 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8005ff8:	61f8      	str	r0, [r7, #28]
            break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ffc:	4b87      	ldr	r3, [pc, #540]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800600a:	4b85      	ldr	r3, [pc, #532]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800600c:	61fb      	str	r3, [r7, #28]
            break;
 800600e:	e001      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8006010:	bf00      	nop
 8006012:	e1fa      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006014:	bf00      	nop
        break;
 8006016:	e1f8      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602a:	d013      	beq.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d819      	bhi.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006040:	d004      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8006042:	e011      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fe fd9a 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8006048:	61f8      	str	r0, [r7, #28]
            break;
 800604a:	e010      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 800604c:	f7fe fce4 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006050:	61f8      	str	r0, [r7, #28]
            break;
 8006052:	e00c      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006054:	4b71      	ldr	r3, [pc, #452]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	d104      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8006062:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006064:	61fb      	str	r3, [r7, #28]
            break;
 8006066:	e001      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8006068:	bf00      	nop
 800606a:	e1ce      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800606c:	bf00      	nop
        break;
 800606e:	e1cc      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006070:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006082:	d013      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d819      	bhi.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d004      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 800609a:	e011      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fe fd6e 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
            break;
 80060a2:	e010      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 80060a4:	f7fe fcb8 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060a8:	61f8      	str	r0, [r7, #28]
            break;
 80060aa:	e00c      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060ac:	4b5b      	ldr	r3, [pc, #364]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d104      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 80060ba:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80060bc:	61fb      	str	r3, [r7, #28]
            break;
 80060be:	e001      	b.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 80060c0:	bf00      	nop
 80060c2:	e1a2      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060c4:	bf00      	nop
        break;
 80060c6:	e1a0      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80060ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d011      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d818      	bhi.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fe fd45 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80060f2:	61f8      	str	r0, [r7, #28]
            break;
 80060f4:	e010      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe fc8f 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80060fa:	61f8      	str	r0, [r7, #28]
            break;
 80060fc:	e00c      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d104      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800610c:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800610e:	61fb      	str	r3, [r7, #28]
            break;
 8006110:	e001      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8006112:	bf00      	nop
 8006114:	e179      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006116:	bf00      	nop
        break;
 8006118:	e177      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800612c:	d02c      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006134:	d833      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800613c:	d01a      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006144:	d82b      	bhi.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8006154:	e023      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe fd11 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800615a:	61f8      	str	r0, [r7, #28]
            break;
 800615c:	e026      	b.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800615e:	4b2f      	ldr	r3, [pc, #188]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d11a      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 800616c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006170:	61fb      	str	r3, [r7, #28]
            break;
 8006172:	e016      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006174:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d111      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006184:	61fb      	str	r3, [r7, #28]
            break;
 8006186:	e00e      	b.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d109      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	61fb      	str	r3, [r7, #28]
            break;
 800619c:	e005      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 800619e:	bf00      	nop
 80061a0:	e133      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a2:	bf00      	nop
 80061a4:	e131      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061a6:	bf00      	nop
 80061a8:	e12f      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80061aa:	bf00      	nop
        break;
 80061ac:	e12d      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c0:	d030      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d837      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d0:	d01a      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d8:	d82f      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d004      	beq.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 80061e8:	e027      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80061ea:	f7fe fcc7 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80061ee:	61f8      	str	r0, [r7, #28]
            break;
 80061f0:	e02a      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80061f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d11e      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8006200:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006204:	61fb      	str	r3, [r7, #28]
            break;
 8006206:	e01a      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d115      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8006216:	4b02      	ldr	r3, [pc, #8]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006218:	61fb      	str	r3, [r7, #28]
            break;
 800621a:	e012      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800621c:	40021000 	.word	0x40021000
 8006220:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006224:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d109      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	61fb      	str	r3, [r7, #28]
            break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800623a:	bf00      	nop
 800623c:	e0e5      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800623e:	bf00      	nop
 8006240:	e0e3      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006242:	bf00      	nop
 8006244:	e0e1      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006246:	bf00      	nop
        break;
 8006248:	e0df      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800625c:	d02c      	beq.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006264:	d833      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	d01a      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006274:	d82b      	bhi.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8006284:	e023      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006286:	f7fe fc79 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800628a:	61f8      	str	r0, [r7, #28]
            break;
 800628c:	e026      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11a      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800629c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062a0:	61fb      	str	r3, [r7, #28]
            break;
 80062a2:	e016      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d111      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 80062b2:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 80062b4:	61fb      	str	r3, [r7, #28]
            break;
 80062b6:	e00e      	b.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062b8:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d109      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
            break;
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 80062ce:	bf00      	nop
 80062d0:	e09b      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d2:	bf00      	nop
 80062d4:	e099      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062d6:	bf00      	nop
 80062d8:	e097      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80062da:	bf00      	nop
        break;
 80062dc:	e095      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80062de:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f0:	d042      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f8:	d874      	bhi.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8006308:	e06c      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800630a:	4b42      	ldr	r3, [pc, #264]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006316:	d167      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800631a:	61fb      	str	r3, [r7, #28]
            break;
 800631c:	e064      	b.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800631e:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632a:	d15f      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800632c:	4b39      	ldr	r3, [pc, #228]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006338:	d158      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800633a:	4b36      	ldr	r3, [pc, #216]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	3301      	adds	r3, #1
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	fb03 f202 	mul.w	r2, r3, r2
 8006362:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	0d5b      	lsrs	r3, r3, #21
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	3301      	adds	r3, #1
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	61fb      	str	r3, [r7, #28]
            break;
 8006376:	e039      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006378:	4b26      	ldr	r3, [pc, #152]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d035      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006384:	f000 f9ee 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 8006388:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	3301      	adds	r3, #1
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	0edb      	lsrs	r3, r3, #27
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 80063c8:	2311      	movs	r3, #17
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e001      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 80063ce:	2307      	movs	r3, #7
 80063d0:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	fb03 f202 	mul.w	r2, r3, r2
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	61fb      	str	r3, [r7, #28]
            break;
 80063e2:	e005      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 80063e4:	bf00      	nop
 80063e6:	e010      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063e8:	bf00      	nop
 80063ea:	e00e      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063ec:	bf00      	nop
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80063f0:	bf00      	nop
        break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f4:	bf00      	nop
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063f8:	bf00      	nop
 80063fa:	e006      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8006408:	bf00      	nop
    }
  }

  return (frequency);
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40021000 	.word	0x40021000
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800642a:	f043 0304 	orr.w	r3, r3, #4
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000

08006440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d018      	beq.n	8006488 <RCCEx_PLLSAI1_Config+0x48>
 8006456:	2b03      	cmp	r3, #3
 8006458:	d81f      	bhi.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d002      	beq.n	8006464 <RCCEx_PLLSAI1_Config+0x24>
 800645e:	2b02      	cmp	r3, #2
 8006460:	d009      	beq.n	8006476 <RCCEx_PLLSAI1_Config+0x36>
 8006462:	e01a      	b.n	800649a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006464:	4b65      	ldr	r3, [pc, #404]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d117      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006474:	e014      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006476:	4b61      	ldr	r3, [pc, #388]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d110      	bne.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006486:	e00d      	b.n	80064a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006488:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006498:	e006      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e004      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80064a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 809f 	bne.w	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b2:	4b52      	ldr	r3, [pc, #328]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a51      	ldr	r2, [pc, #324]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fb fd7f 	bl	8001fc0 <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c4:	e00f      	b.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c6:	f7fb fd7b 	bl	8001fc0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d908      	bls.n	80064e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d4:	4b49      	ldr	r3, [pc, #292]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e4:	e006      	b.n	80064f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064e6:	4b45      	ldr	r3, [pc, #276]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e9      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x86>
 80064f2:	e000      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80064f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d179      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d116      	bne.n	8006530 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006502:	4b3e      	ldr	r3, [pc, #248]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6892      	ldr	r2, [r2, #8]
 800650e:	0211      	lsls	r1, r2, #8
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	68d2      	ldr	r2, [r2, #12]
 8006514:	06d2      	lsls	r2, r2, #27
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	4934      	ldr	r1, [pc, #208]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
 800652e:	e033      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d118      	bne.n	8006568 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006536:	4b31      	ldr	r3, [pc, #196]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	4b32      	ldr	r3, [pc, #200]	; (8006604 <RCCEx_PLLSAI1_Config+0x1c4>)
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6892      	ldr	r2, [r2, #8]
 8006542:	0211      	lsls	r1, r2, #8
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6912      	ldr	r2, [r2, #16]
 8006548:	0852      	lsrs	r2, r2, #1
 800654a:	3a01      	subs	r2, #1
 800654c:	0552      	lsls	r2, r2, #21
 800654e:	4311      	orrs	r1, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6852      	ldr	r2, [r2, #4]
 8006554:	3a01      	subs	r2, #1
 8006556:	0112      	lsls	r2, r2, #4
 8006558:	4311      	orrs	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	610b      	str	r3, [r1, #16]
 8006566:	e017      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b26      	ldr	r3, [pc, #152]	; (8006608 <RCCEx_PLLSAI1_Config+0x1c8>)
 800656e:	4013      	ands	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	0211      	lsls	r1, r2, #8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6952      	ldr	r2, [r2, #20]
 800657a:	0852      	lsrs	r2, r2, #1
 800657c:	3a01      	subs	r2, #1
 800657e:	0652      	lsls	r2, r2, #25
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	3a01      	subs	r2, #1
 8006588:	0112      	lsls	r2, r2, #4
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	491a      	ldr	r1, [pc, #104]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800659e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fb fd0c 	bl	8001fc0 <HAL_GetTick>
 80065a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065aa:	e00f      	b.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ac:	f7fb fd08 	bl	8001fc0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d908      	bls.n	80065cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80065ca:	e006      	b.n	80065da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0e9      	beq.n	80065ac <RCCEx_PLLSAI1_Config+0x16c>
 80065d8:	e000      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80065da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4904      	ldr	r1, [pc, #16]	; (80065fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	07ff800c 	.word	0x07ff800c
 8006604:	ff9f800c 	.word	0xff9f800c
 8006608:	f9ff800c 	.word	0xf9ff800c

0800660c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b03      	cmp	r3, #3
 8006620:	d018      	beq.n	8006654 <RCCEx_PLLSAI2_Config+0x48>
 8006622:	2b03      	cmp	r3, #3
 8006624:	d81f      	bhi.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
 8006626:	2b01      	cmp	r3, #1
 8006628:	d002      	beq.n	8006630 <RCCEx_PLLSAI2_Config+0x24>
 800662a:	2b02      	cmp	r3, #2
 800662c:	d009      	beq.n	8006642 <RCCEx_PLLSAI2_Config+0x36>
 800662e:	e01a      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d117      	bne.n	800666c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006640:	e014      	b.n	800666c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006642:	4b46      	ldr	r3, [pc, #280]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	2b00      	cmp	r3, #0
 800664c:	d110      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006652:	e00d      	b.n	8006670 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006654:	4b41      	ldr	r3, [pc, #260]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006664:	e006      	b.n	8006674 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
      break;
 800666a:	e004      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006674:	bf00      	nop
  }

  if (status == HAL_OK)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d169      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800667c:	4b37      	ldr	r3, [pc, #220]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a36      	ldr	r2, [pc, #216]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006688:	f7fb fc9a 	bl	8001fc0 <HAL_GetTick>
 800668c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800668e:	e00f      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006690:	f7fb fc96 	bl	8001fc0 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d908      	bls.n	80066b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ae:	e006      	b.n	80066be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b0:	4b2a      	ldr	r3, [pc, #168]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e9      	bne.n	8006690 <RCCEx_PLLSAI2_Config+0x84>
 80066bc:	e000      	b.n	80066c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80066be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d144      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066cc:	4b23      	ldr	r3, [pc, #140]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <RCCEx_PLLSAI2_Config+0x154>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	0211      	lsls	r1, r2, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	3a01      	subs	r2, #1
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	491a      	ldr	r1, [pc, #104]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fc5c 	bl	8001fc0 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800670a:	e00f      	b.n	800672c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800670c:	f7fb fc58 	bl	8001fc0 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d908      	bls.n	800672c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800672a:	e006      	b.n	800673a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0e9      	beq.n	800670c <RCCEx_PLLSAI2_Config+0x100>
 8006738:	e000      	b.n	800673c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800673a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	4904      	ldr	r1, [pc, #16]	; (800675c <RCCEx_PLLSAI2_Config+0x150>)
 800674c:	4313      	orrs	r3, r2
 800674e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	07ff800c 	.word	0x07ff800c

08006764 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d02d      	beq.n	80067d6 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 800677a:	2b03      	cmp	r3, #3
 800677c:	d835      	bhi.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800677e:	2b01      	cmp	r3, #1
 8006780:	d002      	beq.n	8006788 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d01d      	beq.n	80067c2 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8006786:	e030      	b.n	80067ea <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006788:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b02      	cmp	r3, #2
 8006792:	d12c      	bne.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	e005      	b.n	80067b8 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 80067ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067be:	607b      	str	r3, [r7, #4]
      break;
 80067c0:	e015      	b.n	80067ee <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ce:	d110      	bne.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80067d0:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 80067d2:	607b      	str	r3, [r7, #4]
      break;
 80067d4:	e00d      	b.n	80067f2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067e2:	d108      	bne.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 80067e6:	607b      	str	r3, [r7, #4]
      break;
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 80067f6:	bf00      	nop
  }

  return pllvco;
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	08024bb0 	.word	0x08024bb0
 8006810:	00f42400 	.word	0x00f42400
 8006814:	007a1200 	.word	0x007a1200

08006818 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d02d      	beq.n	800688a <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d835      	bhi.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d002      	beq.n	800683c <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8006836:	2b02      	cmp	r3, #2
 8006838:	d01d      	beq.n	8006876 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800683a:	e030      	b.n	800689e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d12c      	bne.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	e005      	b.n	800686c <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 800686e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006872:	607b      	str	r3, [r7, #4]
      break;
 8006874:	e015      	b.n	80068a2 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d110      	bne.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8006886:	607b      	str	r3, [r7, #4]
      break;
 8006888:	e00d      	b.n	80068a6 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006896:	d108      	bne.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 800689a:	607b      	str	r3, [r7, #4]
      break;
 800689c:	e005      	b.n	80068aa <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80068aa:	bf00      	nop
  }

  return pllvco;
 80068ac:	687b      	ldr	r3, [r7, #4]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	08024bb0 	.word	0x08024bb0
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	007a1200 	.word	0x007a1200

080068cc <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e0:	d10c      	bne.n	80068fc <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068e2:	4b78      	ldr	r3, [pc, #480]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80068ec:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d110      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	e00c      	b.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80068fc:	4b71      	ldr	r3, [pc, #452]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80068fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006906:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690e:	d102      	bne.n	8006916 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006910:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006914:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 80cd 	bne.w	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d003      	beq.n	8006930 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692e:	d13b      	bne.n	80069a8 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800693c:	f040 80bb 	bne.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8006940:	4b60      	ldr	r3, [pc, #384]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80b4 	beq.w	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800694e:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	3301      	adds	r3, #1
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006962:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800696e:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	0edb      	lsrs	r3, r3, #27
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 800698c:	2311      	movs	r3, #17
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e001      	b.n	8006996 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8006992:	2307      	movs	r3, #7
 8006994:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	fb03 f202 	mul.w	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069a6:	e086      	b.n	8006ab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d003      	beq.n	80069b6 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d109      	bne.n	80069ca <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b6:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d179      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 80069c4:	4b40      	ldr	r3, [pc, #256]	; (8006ac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80069c6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c8:	e076      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d135      	bne.n	8006a3c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80069d0:	4b3c      	ldr	r3, [pc, #240]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d06d      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80069dc:	f7ff fec2 	bl	8006764 <RCCEx_PLLSAI1_GetVCOFreq>
 80069e0:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	3301      	adds	r3, #1
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a00:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	0edb      	lsrs	r3, r3, #27
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8006a20:	2311      	movs	r3, #17
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e001      	b.n	8006a2a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8006a26:	2307      	movs	r3, #7
 8006a28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	fb03 f202 	mul.w	r2, r3, r2
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e03d      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d003      	beq.n	8006a4a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d136      	bne.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d030      	beq.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8006a56:	f7ff fedf 	bl	8006818 <RCCEx_PLLSAI2_GetVCOFreq>
 8006a5a:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	3301      	adds	r3, #1
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	0edb      	lsrs	r3, r3, #27
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006a9a:	2311      	movs	r3, #17
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e001      	b.n	8006aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006aa0:	2307      	movs	r3, #7
 8006aa2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	fb03 f202 	mul.w	r2, r3, r2
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ab6:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e1da      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10e      	bne.n	8006b06 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a87      	ldr	r2, [pc, #540]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d107      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d103      	bne.n	8006b02 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e1c6      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa ffc2 	bl	8001aa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9c3 	bl	8006eac <SAI_Disable>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e1b1      	b.n	8006e94 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00c      	beq.n	8006b5a <HAL_SAI_Init+0x8e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d80d      	bhi.n	8006b60 <HAL_SAI_Init+0x94>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SAI_Init+0x82>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <HAL_SAI_Init+0x88>
 8006b4c:	e008      	b.n	8006b60 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b52:	e008      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006b54:	2310      	movs	r3, #16
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b58:	e005      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006b5a:	2320      	movs	r3, #32
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006b64:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d81d      	bhi.n	8006baa <HAL_SAI_Init+0xde>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <HAL_SAI_Init+0xa8>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b8b 	.word	0x08006b8b
 8006b7c:	08006b93 	.word	0x08006b93
 8006b80:	08006b9b 	.word	0x08006b9b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
      break;
 8006b88:	e012      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	61fb      	str	r3, [r7, #28]
      break;
 8006b90:	e00e      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b96:	61fb      	str	r3, [r7, #28]
      break;
 8006b98:	e00a      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b9e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006ba8:	e002      	b.n	8006bb0 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
      break;
 8006bae:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a55      	ldr	r2, [pc, #340]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_SAI_Init+0xf8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a54      	ldr	r2, [pc, #336]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006bc4:	4a53      	ldr	r2, [pc, #332]	; (8006d14 <HAL_SAI_Init+0x248>)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e002      	b.n	8006bd2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_SAI_Init+0x24c>)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d07e      	beq.n	8006cd8 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <HAL_SAI_Init+0x240>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_SAI_Init+0x126>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a48      	ldr	r2, [pc, #288]	; (8006d10 <HAL_SAI_Init+0x244>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d104      	bne.n	8006bfc <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006bf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006bf6:	f7fe fc71 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006bfa:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a46      	ldr	r2, [pc, #280]	; (8006d1c <HAL_SAI_Init+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_SAI_Init+0x144>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a45      	ldr	r2, [pc, #276]	; (8006d20 <HAL_SAI_Init+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d104      	bne.n	8006c1a <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c14:	f7fe fc62 	bl	80054dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006c18:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c22:	d120      	bne.n	8006c66 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d102      	bne.n	8006c32 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e00a      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d103      	bne.n	8006c42 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e002      	b.n	8006c48 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e017      	b.n	8006c96 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c6e:	d101      	bne.n	8006c74 <HAL_SAI_Init+0x1a8>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <HAL_SAI_Init+0x1aa>
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4619      	mov	r1, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c94:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	08da      	lsrs	r2, r3, #3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <HAL_SAI_Init+0x258>)
 8006ca8:	fba3 2301 	umull	r2, r3, r3, r1
 8006cac:	08da      	lsrs	r2, r3, #3
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	1aca      	subs	r2, r1, r3
 8006cb8:	2a08      	cmp	r2, #8
 8006cba:	d904      	bls.n	8006cc6 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d104      	bne.n	8006cd8 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_SAI_Init+0x21c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d109      	bne.n	8006cfc <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_SAI_Init+0x228>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e001      	b.n	8006cf8 <HAL_SAI_Init+0x22c>
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e017      	b.n	8006d2c <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d111      	bne.n	8006d28 <HAL_SAI_Init+0x25c>
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	e00f      	b.n	8006d2a <HAL_SAI_Init+0x25e>
 8006d0a:	bf00      	nop
 8006d0c:	40015404 	.word	0x40015404
 8006d10:	40015424 	.word	0x40015424
 8006d14:	40015400 	.word	0x40015400
 8006d18:	40015800 	.word	0x40015800
 8006d1c:	40015804 	.word	0x40015804
 8006d20:	40015824 	.word	0x40015824
 8006d24:	cccccccd 	.word	0xcccccccd
 8006d28:	2300      	movs	r3, #0
 8006d2a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_SAI_Init+0x3d0>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	431a      	orrs	r2, r3
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006d64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	051b      	lsls	r3, r3, #20
 8006d78:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d7e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d9c:	f023 030f 	bic.w	r3, r3, #15
 8006da0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_SAI_Init+0x3d4>)
 8006dcc:	400b      	ands	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006de0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006de6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006dec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	3b01      	subs	r3, #1
 8006df4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006df6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68d9      	ldr	r1, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006e0e:	400b      	ands	r3, r1
 8006e10:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_SAI_Init+0x3d8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d119      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10e      	bne.n	8006e7a <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e68:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <HAL_SAI_Init+0x3dc>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	f005c010 	.word	0xf005c010
 8006ea0:	fff88000 	.word	0xfff88000
 8006ea4:	40015404 	.word	0x40015404
 8006ea8:	40015400 	.word	0x40015400

08006eac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <SAI_Disable+0x6c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <SAI_Disable+0x70>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	0b1b      	lsrs	r3, r3, #12
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ed6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef2:	e009      	b.n	8006f08 <SAI_Disable+0x5c>
    }
    count--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e7      	bne.n	8006ed8 <SAI_Disable+0x2c>

  return status;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	95cbec1b 	.word	0x95cbec1b

08006f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e095      	b.n	800705e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f42:	d009      	beq.n	8006f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	e005      	b.n	8006f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa fc08 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d902      	bls.n	8006fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006fae:	d007      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	ea42 0103 	orr.w	r1, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f003 0204 	and.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e038      	b.n	80070ee <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7fa fcfd 	bl	8001a90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3308      	adds	r3, #8
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f002 f823 	bl	80090ec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	461a      	mov	r2, r3
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	f002 f8eb 	bl	800928c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6858      	ldr	r0, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	f002 f934 	bl	8009330 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	6892      	ldr	r2, [r2, #8]
 80070d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6892      	ldr	r2, [r2, #8]
 80070dc:	f041 0101 	orr.w	r1, r1, #1
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e049      	b.n	800719c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fa fb79 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f000 fba3 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e04f      	b.n	800725c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a23      	ldr	r2, [pc, #140]	; (8007268 <HAL_TIM_Base_Start_IT+0xc4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01d      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d018      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_TIM_Base_Start_IT+0xc8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_TIM_Base_Start_IT+0xcc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00e      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <HAL_TIM_Base_Start_IT+0xd0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_TIM_Base_Start_IT+0xd4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x76>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <HAL_TIM_Base_Start_IT+0xd8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d115      	bne.n	8007246 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_TIM_Base_Start_IT+0xdc>)
 8007222:	4013      	ands	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d015      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d011      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	e008      	b.n	8007258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e000      	b.n	800725a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00
 8007278:	40013400 	.word	0x40013400
 800727c:	40014000 	.word	0x40014000
 8007280:	00010007 	.word	0x00010007

08007284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e049      	b.n	800732a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f841 	bl	8007332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f000 fadc 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d122      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b02      	cmp	r3, #2
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0202 	mvn.w	r2, #2
 8007372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa5b 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa4d 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa5e 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d122      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d11b      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0204 	mvn.w	r2, #4
 80073c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa31 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 80073e2:	e005      	b.n	80073f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa23 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa34 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d122      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b08      	cmp	r3, #8
 8007410:	d11b      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f06f 0208 	mvn.w	r2, #8
 800741a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa07 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 8007436:	e005      	b.n	8007444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9f9 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa0a 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d122      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b10      	cmp	r3, #16
 8007464:	d11b      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f06f 0210 	mvn.w	r2, #16
 800746e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2208      	movs	r2, #8
 8007474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9dd 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800748a:	e005      	b.n	8007498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9cf 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e0 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10e      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0201 	mvn.w	r2, #1
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7f9 ff01 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ff7b 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ff6e 	bl	8008400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f98e 	bl	800786c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 ff2e 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800759e:	2302      	movs	r3, #2
 80075a0:	e0ff      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b14      	cmp	r3, #20
 80075ae:	f200 80f0 	bhi.w	8007792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007793 	.word	0x08007793
 80075c0:	08007793 	.word	0x08007793
 80075c4:	08007793 	.word	0x08007793
 80075c8:	0800764d 	.word	0x0800764d
 80075cc:	08007793 	.word	0x08007793
 80075d0:	08007793 	.word	0x08007793
 80075d4:	08007793 	.word	0x08007793
 80075d8:	0800768f 	.word	0x0800768f
 80075dc:	08007793 	.word	0x08007793
 80075e0:	08007793 	.word	0x08007793
 80075e4:	08007793 	.word	0x08007793
 80075e8:	080076cf 	.word	0x080076cf
 80075ec:	08007793 	.word	0x08007793
 80075f0:	08007793 	.word	0x08007793
 80075f4:	08007793 	.word	0x08007793
 80075f8:	08007711 	.word	0x08007711
 80075fc:	08007793 	.word	0x08007793
 8007600:	08007793 	.word	0x08007793
 8007604:	08007793 	.word	0x08007793
 8007608:	08007751 	.word	0x08007751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f9ce 	bl	80079b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e0a5      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa3e 	bl	8007ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]
      break;
 800768c:	e084      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 faa7 	bl	8007be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0204 	bic.w	r2, r2, #4
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      break;
 80076cc:	e064      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fb0f 	bl	8007cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	61da      	str	r2, [r3, #28]
      break;
 800770e:	e043      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fb58 	bl	8007dcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0208 	orr.w	r2, r2, #8
 800772a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0204 	bic.w	r2, r2, #4
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800774e:	e023      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fb9c 	bl	8007e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800776a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007790:	e002      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e031      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbc2 	bl	8007f60 <TIM_SlaveTimer_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e018      	b.n	8007828 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007804:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007814:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a40      	ldr	r2, [pc, #256]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00f      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3c      	ldr	r2, [pc, #240]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3b      	ldr	r2, [pc, #236]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3a      	ldr	r2, [pc, #232]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d108      	bne.n	80078d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <TIM_Base_SetConfig+0x114>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d01b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d017      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2b      	ldr	r2, [pc, #172]	; (800799c <TIM_Base_SetConfig+0x11c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <TIM_Base_SetConfig+0x120>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a28      	ldr	r2, [pc, #160]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00f      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <TIM_Base_SetConfig+0x124>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a11      	ldr	r2, [pc, #68]	; (80079a8 <TIM_Base_SetConfig+0x128>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d007      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	615a      	str	r2, [r3, #20]
}
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40014400 	.word	0x40014400
 80079b0:	40014800 	.word	0x40014800

080079b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f023 0302 	bic.w	r3, r3, #2
 8007a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00f      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2b      	ldr	r2, [pc, #172]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00b      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a29      	ldr	r2, [pc, #164]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC1_SetConfig+0x80>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a28      	ldr	r2, [pc, #160]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <TIM_OC1_SetConfig+0x10c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <TIM_OC1_SetConfig+0x110>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <TIM_OC1_SetConfig+0x114>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <TIM_OC1_SetConfig+0x118>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC1_SetConfig+0xc2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_OC1_SetConfig+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40013400 	.word	0x40013400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400
 8007ad0:	40014800 	.word	0x40014800

08007ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0320 	bic.w	r3, r3, #32
 8007b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC2_SetConfig+0x6c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d10d      	bne.n	8007b5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <TIM_OC2_SetConfig+0x100>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <TIM_OC2_SetConfig+0x104>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <TIM_OC2_SetConfig+0x108>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <TIM_OC2_SetConfig+0x10c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC2_SetConfig+0xb0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a19      	ldr	r2, [pc, #100]	; (8007be4 <TIM_OC2_SetConfig+0x110>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d113      	bne.n	8007bac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	40014000 	.word	0x40014000
 8007be0:	40014400 	.word	0x40014400
 8007be4:	40014800 	.word	0x40014800

08007be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a27      	ldr	r2, [pc, #156]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_OC3_SetConfig+0x6a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10d      	bne.n	8007c6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <TIM_OC3_SetConfig+0xfc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00f      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <TIM_OC3_SetConfig+0x100>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <TIM_OC3_SetConfig+0x104>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <TIM_OC3_SetConfig+0x108>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0xae>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a18      	ldr	r2, [pc, #96]	; (8007cf4 <TIM_OC3_SetConfig+0x10c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d113      	bne.n	8007cbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800

08007cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC4_SetConfig+0xc0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC4_SetConfig+0xc4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC4_SetConfig+0xc8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <TIM_OC4_SetConfig+0xcc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC4_SetConfig+0x84>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <TIM_OC4_SetConfig+0xd0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d109      	bne.n	8007d90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <TIM_OC5_SetConfig+0xb4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00f      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <TIM_OC5_SetConfig+0xb8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <TIM_OC5_SetConfig+0xbc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <TIM_OC5_SetConfig+0xc0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC5_SetConfig+0x7a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <TIM_OC5_SetConfig+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d109      	bne.n	8007e5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800

08007e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	051b      	lsls	r3, r3, #20
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_OC6_SetConfig+0xb8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00f      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_OC6_SetConfig+0xbc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_OC6_SetConfig+0xc0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_OC6_SetConfig+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_OC6_SetConfig+0x7c>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_OC6_SetConfig+0xc8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d109      	bne.n	8007f24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	029b      	lsls	r3, r3, #10
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40013400 	.word	0x40013400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400
 8007f5c:	40014800 	.word	0x40014800

08007f60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b70      	cmp	r3, #112	; 0x70
 8007fb0:	d01a      	beq.n	8007fe8 <TIM_SlaveTimer_SetConfig+0x88>
 8007fb2:	2b70      	cmp	r3, #112	; 0x70
 8007fb4:	d860      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d054      	beq.n	8008064 <TIM_SlaveTimer_SetConfig+0x104>
 8007fba:	2b60      	cmp	r3, #96	; 0x60
 8007fbc:	d85c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fbe:	2b50      	cmp	r3, #80	; 0x50
 8007fc0:	d046      	beq.n	8008050 <TIM_SlaveTimer_SetConfig+0xf0>
 8007fc2:	2b50      	cmp	r3, #80	; 0x50
 8007fc4:	d858      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d019      	beq.n	8007ffe <TIM_SlaveTimer_SetConfig+0x9e>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d854      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d055      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	d850      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d051      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d84c      	bhi.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d04d      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d04b      	beq.n	800807e <TIM_SlaveTimer_SetConfig+0x11e>
 8007fe6:	e047      	b.n	8008078 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68d9      	ldr	r1, [r3, #12]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f000 f8a6 	bl	8008148 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007ffc:	e040      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b05      	cmp	r3, #5
 8008004:	d101      	bne.n	800800a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e03b      	b.n	8008082 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008030:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
      break;
 800804e:	e017      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	461a      	mov	r2, r3
 800805e:	f000 f814 	bl	800808a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008062:	e00d      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	461a      	mov	r2, r3
 8008072:	f000 f839 	bl	80080e8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008076:	e003      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	e000      	b.n	8008080 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800807e:	bf00      	nop
  }

  return status;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f023 0201 	bic.w	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 030a 	bic.w	r3, r3, #10
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f023 0210 	bic.w	r2, r3, #16
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	031b      	lsls	r3, r3, #12
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e068      	b.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d108      	bne.n	80081e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1e      	ldr	r2, [pc, #120]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01d      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d018      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1a      	ldr	r2, [pc, #104]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a13      	ldr	r2, [pc, #76]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10c      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4313      	orrs	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40014000 	.word	0x40014000

08008298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e087      	b.n	80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a25      	ldr	r2, [pc, #148]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d106      	bne.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d126      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	051b      	lsls	r3, r3, #20
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d106      	bne.n	80083b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e042      	b.n	80084ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 f845 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f82c 	bl	80084b4 <UART_SetConfig>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb20 	bl	8008ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fba7 	bl	8008bf8 <UART_CheckIdleState>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b8:	b08c      	sub	sp, #48	; 0x30
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	431a      	orrs	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4313      	orrs	r3, r2
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4baa      	ldr	r3, [pc, #680]	; (800878c <UART_SetConfig+0x2d8>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a9f      	ldr	r2, [pc, #636]	; (8008790 <UART_SetConfig+0x2dc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800851c:	4313      	orrs	r3, r2
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800852a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008534:	430b      	orrs	r3, r1
 8008536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f023 010f 	bic.w	r1, r3, #15
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a90      	ldr	r2, [pc, #576]	; (8008794 <UART_SetConfig+0x2e0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d125      	bne.n	80085a4 <UART_SetConfig+0xf0>
 8008558:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <UART_SetConfig+0x2e4>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d81a      	bhi.n	800859c <UART_SetConfig+0xe8>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <UART_SetConfig+0xb8>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008585 	.word	0x08008585
 8008578:	08008595 	.word	0x08008595
 800857c:	2301      	movs	r3, #1
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e116      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008584:	2302      	movs	r3, #2
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858a:	e112      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008592:	e10e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859a:	e10a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a2:	e106      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7c      	ldr	r2, [pc, #496]	; (800879c <UART_SetConfig+0x2e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d138      	bne.n	8008620 <UART_SetConfig+0x16c>
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <UART_SetConfig+0x2e4>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f003 030c 	and.w	r3, r3, #12
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d82d      	bhi.n	8008618 <UART_SetConfig+0x164>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x110>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085f9 	.word	0x080085f9
 80085c8:	08008619 	.word	0x08008619
 80085cc:	08008619 	.word	0x08008619
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008609 	.word	0x08008609
 80085d8:	08008619 	.word	0x08008619
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008619 	.word	0x08008619
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008619 	.word	0x08008619
 80085ec:	08008619 	.word	0x08008619
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008611 	.word	0x08008611
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e0d8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e0d4      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e0d0      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e0cc      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e0c8      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a5e      	ldr	r2, [pc, #376]	; (80087a0 <UART_SetConfig+0x2ec>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d125      	bne.n	8008676 <UART_SetConfig+0x1c2>
 800862a:	4b5b      	ldr	r3, [pc, #364]	; (8008798 <UART_SetConfig+0x2e4>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d016      	beq.n	8008666 <UART_SetConfig+0x1b2>
 8008638:	2b30      	cmp	r3, #48	; 0x30
 800863a:	d818      	bhi.n	800866e <UART_SetConfig+0x1ba>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d00a      	beq.n	8008656 <UART_SetConfig+0x1a2>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d814      	bhi.n	800866e <UART_SetConfig+0x1ba>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <UART_SetConfig+0x19a>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d008      	beq.n	800865e <UART_SetConfig+0x1aa>
 800864c:	e00f      	b.n	800866e <UART_SetConfig+0x1ba>
 800864e:	2300      	movs	r3, #0
 8008650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008654:	e0ad      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008656:	2302      	movs	r3, #2
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865c:	e0a9      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800865e:	2304      	movs	r3, #4
 8008660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008664:	e0a5      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008666:	2308      	movs	r3, #8
 8008668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866c:	e0a1      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800866e:	2310      	movs	r3, #16
 8008670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008674:	e09d      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a4a      	ldr	r2, [pc, #296]	; (80087a4 <UART_SetConfig+0x2f0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d125      	bne.n	80086cc <UART_SetConfig+0x218>
 8008680:	4b45      	ldr	r3, [pc, #276]	; (8008798 <UART_SetConfig+0x2e4>)
 8008682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800868a:	2bc0      	cmp	r3, #192	; 0xc0
 800868c:	d016      	beq.n	80086bc <UART_SetConfig+0x208>
 800868e:	2bc0      	cmp	r3, #192	; 0xc0
 8008690:	d818      	bhi.n	80086c4 <UART_SetConfig+0x210>
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d00a      	beq.n	80086ac <UART_SetConfig+0x1f8>
 8008696:	2b80      	cmp	r3, #128	; 0x80
 8008698:	d814      	bhi.n	80086c4 <UART_SetConfig+0x210>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <UART_SetConfig+0x1f0>
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d008      	beq.n	80086b4 <UART_SetConfig+0x200>
 80086a2:	e00f      	b.n	80086c4 <UART_SetConfig+0x210>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e082      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086ac:	2302      	movs	r3, #2
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e07e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086b4:	2304      	movs	r3, #4
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ba:	e07a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086bc:	2308      	movs	r3, #8
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c2:	e076      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086c4:	2310      	movs	r3, #16
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ca:	e072      	b.n	80087b2 <UART_SetConfig+0x2fe>
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <UART_SetConfig+0x2f4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d12a      	bne.n	800872c <UART_SetConfig+0x278>
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <UART_SetConfig+0x2e4>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e4:	d01a      	beq.n	800871c <UART_SetConfig+0x268>
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d81b      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f0:	d00c      	beq.n	800870c <UART_SetConfig+0x258>
 80086f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f6:	d815      	bhi.n	8008724 <UART_SetConfig+0x270>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <UART_SetConfig+0x250>
 80086fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008700:	d008      	beq.n	8008714 <UART_SetConfig+0x260>
 8008702:	e00f      	b.n	8008724 <UART_SetConfig+0x270>
 8008704:	2300      	movs	r3, #0
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e052      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800870c:	2302      	movs	r3, #2
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e04e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008714:	2304      	movs	r3, #4
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e04a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800871c:	2308      	movs	r3, #8
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008722:	e046      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008724:	2310      	movs	r3, #16
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872a:	e042      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a17      	ldr	r2, [pc, #92]	; (8008790 <UART_SetConfig+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d13a      	bne.n	80087ac <UART_SetConfig+0x2f8>
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <UART_SetConfig+0x2e4>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008744:	d01a      	beq.n	800877c <UART_SetConfig+0x2c8>
 8008746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800874a:	d81b      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008750:	d00c      	beq.n	800876c <UART_SetConfig+0x2b8>
 8008752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008756:	d815      	bhi.n	8008784 <UART_SetConfig+0x2d0>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <UART_SetConfig+0x2b0>
 800875c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008760:	d008      	beq.n	8008774 <UART_SetConfig+0x2c0>
 8008762:	e00f      	b.n	8008784 <UART_SetConfig+0x2d0>
 8008764:	2300      	movs	r3, #0
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876a:	e022      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800876c:	2302      	movs	r3, #2
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e01e      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e01a      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e016      	b.n	80087b2 <UART_SetConfig+0x2fe>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e012      	b.n	80087b2 <UART_SetConfig+0x2fe>
 800878c:	cfff69f3 	.word	0xcfff69f3
 8008790:	40008000 	.word	0x40008000
 8008794:	40013800 	.word	0x40013800
 8008798:	40021000 	.word	0x40021000
 800879c:	40004400 	.word	0x40004400
 80087a0:	40004800 	.word	0x40004800
 80087a4:	40004c00 	.word	0x40004c00
 80087a8:	40005000 	.word	0x40005000
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4ab0      	ldr	r2, [pc, #704]	; (8008a78 <UART_SetConfig+0x5c4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	f040 809b 	bne.w	80088f4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d827      	bhi.n	8008816 <UART_SetConfig+0x362>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x318>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008817 	.word	0x08008817
 80087dc:	08008807 	.word	0x08008807
 80087e0:	08008817 	.word	0x08008817
 80087e4:	08008817 	.word	0x08008817
 80087e8:	08008817 	.word	0x08008817
 80087ec:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f0:	f7fc f9c4 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fc f9d4 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b9e      	ldr	r3, [pc, #632]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fc f907 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8130 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	4a94      	ldr	r2, [pc, #592]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008834:	461a      	mov	r2, r3
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	fbb3 f3f2 	udiv	r3, r3, r2
 800883c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4413      	add	r3, r2
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	d305      	bcc.n	800885a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008860:	e113      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2200      	movs	r2, #0
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	60fa      	str	r2, [r7, #12]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	4a84      	ldr	r2, [pc, #528]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008874:	b29b      	uxth	r3, r3
 8008876:	2200      	movs	r2, #0
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008884:	f7f7 fcdc 	bl	8000240 <__aeabi_uldivmod>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4610      	mov	r0, r2
 800888e:	4619      	mov	r1, r3
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	020b      	lsls	r3, r1, #8
 800889a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800889e:	0202      	lsls	r2, r0, #8
 80088a0:	6979      	ldr	r1, [r7, #20]
 80088a2:	6849      	ldr	r1, [r1, #4]
 80088a4:	0849      	lsrs	r1, r1, #1
 80088a6:	2000      	movs	r0, #0
 80088a8:	460c      	mov	r4, r1
 80088aa:	4605      	mov	r5, r0
 80088ac:	eb12 0804 	adds.w	r8, r2, r4
 80088b0:	eb43 0905 	adc.w	r9, r3, r5
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	469a      	mov	sl, r3
 80088bc:	4693      	mov	fp, r2
 80088be:	4652      	mov	r2, sl
 80088c0:	465b      	mov	r3, fp
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fcbb 	bl	8000240 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4613      	mov	r3, r2
 80088d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d8:	d308      	bcc.n	80088ec <UART_SetConfig+0x438>
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e0:	d204      	bcs.n	80088ec <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e0ce      	b.n	8008a8a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088f2:	e0ca      	b.n	8008a8a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d166      	bne.n	80089cc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80088fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008902:	2b08      	cmp	r3, #8
 8008904:	d827      	bhi.n	8008956 <UART_SetConfig+0x4a2>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0x458>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008931 	.word	0x08008931
 8008910:	08008939 	.word	0x08008939
 8008914:	08008941 	.word	0x08008941
 8008918:	08008957 	.word	0x08008957
 800891c:	08008947 	.word	0x08008947
 8008920:	08008957 	.word	0x08008957
 8008924:	08008957 	.word	0x08008957
 8008928:	08008957 	.word	0x08008957
 800892c:	0800894f 	.word	0x0800894f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fc f924 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008936:	e014      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008938:	f7fc f934 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800893e:	e010      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008940:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008944:	e00d      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008946:	f7fc f867 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800894c:	e009      	b.n	8008962 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800894e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008954:	e005      	b.n	8008962 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8090 	beq.w	8008a8a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	4a44      	ldr	r2, [pc, #272]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008974:	461a      	mov	r2, r3
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	fbb3 f3f2 	udiv	r3, r3, r2
 800897c:	005a      	lsls	r2, r3, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	441a      	add	r2, r3
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	fbb2 f3f3 	udiv	r3, r2, r3
 800898e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d916      	bls.n	80089c4 <UART_SetConfig+0x510>
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d212      	bcs.n	80089c4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f023 030f 	bic.w	r3, r3, #15
 80089a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	8bfb      	ldrh	r3, [r7, #30]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	8bfa      	ldrh	r2, [r7, #30]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	e062      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089ca:	e05e      	b.n	8008a8a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d828      	bhi.n	8008a26 <UART_SetConfig+0x572>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x528>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fc f8bc 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a06:	e014      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fc f8cc 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a0e:	e010      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <UART_SetConfig+0x5c8>)
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a14:	e00d      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fb ffff 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8008a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a30:	bf00      	nop
    }

    if (pclk != 0U)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d028      	beq.n	8008a8a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <UART_SetConfig+0x5cc>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	441a      	add	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d910      	bls.n	8008a84 <UART_SetConfig+0x5d0>
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d20c      	bcs.n	8008a84 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
 8008a74:	e009      	b.n	8008a8a <UART_SetConfig+0x5d6>
 8008a76:	bf00      	nop
 8008a78:	40008000 	.word	0x40008000
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	08024bf0 	.word	0x08024bf0
      }
      else
      {
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01a      	beq.n	8008bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb2:	d10a      	bne.n	8008bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b098      	sub	sp, #96	; 0x60
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c08:	f7f9 f9da 	bl	8001fc0 <HAL_GetTick>
 8008c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d12f      	bne.n	8008c7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c24:	2200      	movs	r2, #0
 8008c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f88e 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d022      	beq.n	8008c7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c54:	647b      	str	r3, [r7, #68]	; 0x44
 8008c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e063      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d149      	bne.n	8008d1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c92:	2200      	movs	r2, #0
 8008c94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f857 	bl	8008d4c <UART_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03c      	beq.n	8008d1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e6      	bne.n	8008ca4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf6:	61fa      	str	r2, [r7, #28]
 8008cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	617b      	str	r3, [r7, #20]
   return(result);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e5      	bne.n	8008cd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e012      	b.n	8008d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3758      	adds	r7, #88	; 0x58
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5c:	e049      	b.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d045      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d66:	f7f9 f92b 	bl	8001fc0 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d302      	bcc.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e048      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d031      	beq.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d110      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2208      	movs	r2, #8
 8008da2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f838 	bl	8008e1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2208      	movs	r2, #8
 8008dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e029      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dcc:	d111      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f81e 	bl	8008e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e00f      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	bf0c      	ite	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	2300      	movne	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d0a6      	beq.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b095      	sub	sp, #84	; 0x54
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	643b      	str	r3, [r7, #64]	; 0x40
 8008e42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e3      	bne.n	8008e54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d118      	bne.n	8008ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008eda:	bf00      	nop
 8008edc:	3754      	adds	r7, #84	; 0x54
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_UARTEx_DisableFifoMode+0x16>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e027      	b.n	8008f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2224      	movs	r2, #36	; 0x24
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e02d      	b.n	8008fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f84f 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e02d      	b.n	8009048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f811 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	2b00      	cmp	r3, #0
 800905e:	d108      	bne.n	8009072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009070:	e031      	b.n	80090d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009072:	2308      	movs	r3, #8
 8009074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009076:	2308      	movs	r3, #8
 8009078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	0e5b      	lsrs	r3, r3, #25
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	0f5b      	lsrs	r3, r3, #29
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	7b3a      	ldrb	r2, [r7, #12]
 800909e:	4911      	ldr	r1, [pc, #68]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090a0:	5c8a      	ldrb	r2, [r1, r2]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090a6:	7b3a      	ldrb	r2, [r7, #12]
 80090a8:	490f      	ldr	r1, [pc, #60]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090be:	5c8a      	ldrb	r2, [r1, r2]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090c4:	7b7a      	ldrb	r2, [r7, #13]
 80090c6:	4908      	ldr	r1, [pc, #32]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	08024c08 	.word	0x08024c08
 80090e8:	08024c10 	.word	0x08024c10

080090ec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	f023 0101 	bic.w	r1, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d102      	bne.n	800911c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009116:	2340      	movs	r3, #64	; 0x40
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e001      	b.n	8009120 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800912c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009132:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009138:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800913e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009144:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800914a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009150:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009156:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800915c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <FMC_NORSRAM_Init+0x19c>)
 8009190:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009198:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80091a8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80091b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	43db      	mvns	r3, r3
 80091c0:	ea02 0103 	and.w	r1, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4319      	orrs	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091da:	d10c      	bne.n	80091f6 <FMC_NORSRAM_Init+0x10a>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009212:	2b01      	cmp	r3, #1
 8009214:	d12f      	bne.n	8009276 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b04      	cmp	r3, #4
 800922e:	d014      	beq.n	800925a <FMC_NORSRAM_Init+0x16e>
 8009230:	2b04      	cmp	r3, #4
 8009232:	d819      	bhi.n	8009268 <FMC_NORSRAM_Init+0x17c>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <FMC_NORSRAM_Init+0x152>
 8009238:	2b02      	cmp	r3, #2
 800923a:	d007      	beq.n	800924c <FMC_NORSRAM_Init+0x160>
 800923c:	e014      	b.n	8009268 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	621a      	str	r2, [r3, #32]
        break;
 800924a:	e015      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]
        break;
 8009258:	e00e      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	621a      	str	r2, [r3, #32]
        break;
 8009266:	e007      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]
        break;
 8009274:	e000      	b.n	8009278 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8009276:	bf00      	nop

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0008fb7f 	.word	0x0008fb7f

0800928c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	431a      	orrs	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	431a      	orrs	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	431a      	orrs	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	041b      	lsls	r3, r3, #16
 80092c4:	431a      	orrs	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	431a      	orrs	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	3b02      	subs	r3, #2
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	ea42 0103 	orr.w	r1, r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	3201      	adds	r2, #1
 80092e4:	4319      	orrs	r1, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f8:	d113      	bne.n	8009322 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009302:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	3b01      	subs	r3, #1
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009344:	d121      	bne.n	800938a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6819      	ldr	r1, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4319      	orrs	r1, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	4319      	orrs	r1, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	4319      	orrs	r1, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	4319      	orrs	r1, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	430b      	orrs	r3, r1
 800937c:	ea42 0103 	orr.w	r1, r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009388:	e005      	b.n	8009396 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b08b      	sub	sp, #44	; 0x2c
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	613b      	str	r3, [r7, #16]
  return result;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80093ca:	2320      	movs	r3, #32
 80093cc:	e003      	b.n	80093d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	fab3 f383 	clz	r3, r3
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	2103      	movs	r1, #3
 80093da:	fa01 f303 	lsl.w	r3, r1, r3
 80093de:	43db      	mvns	r3, r3
 80093e0:	401a      	ands	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	fa93 f3a3 	rbit	r3, r3
 80093ec:	61fb      	str	r3, [r7, #28]
  return result;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80093f8:	2320      	movs	r3, #32
 80093fa:	e003      	b.n	8009404 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	fab3 f383 	clz	r3, r3
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]
}
 8009412:	bf00      	nop
 8009414:	372c      	adds	r7, #44	; 0x2c
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	431a      	orrs	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800944e:	b480      	push	{r7}
 8009450:	b08b      	sub	sp, #44	; 0x2c
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	fa93 f3a3 	rbit	r3, r3
 8009468:	613b      	str	r3, [r7, #16]
  return result;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009474:	2320      	movs	r3, #32
 8009476:	e003      	b.n	8009480 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	fab3 f383 	clz	r3, r3
 800947e:	b2db      	uxtb	r3, r3
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	2103      	movs	r1, #3
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	43db      	mvns	r3, r3
 800948a:	401a      	ands	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	fa93 f3a3 	rbit	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
  return result;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80094a2:	2320      	movs	r3, #32
 80094a4:	e003      	b.n	80094ae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	fab3 f383 	clz	r3, r3
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	fa01 f303 	lsl.w	r3, r1, r3
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80094bc:	bf00      	nop
 80094be:	372c      	adds	r7, #44	; 0x2c
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b08b      	sub	sp, #44	; 0x2c
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	fa93 f3a3 	rbit	r3, r3
 80094e2:	613b      	str	r3, [r7, #16]
  return result;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094ee:	2320      	movs	r3, #32
 80094f0:	e003      	b.n	80094fa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	fab3 f383 	clz	r3, r3
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	2103      	movs	r1, #3
 80094fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009502:	43db      	mvns	r3, r3
 8009504:	401a      	ands	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	fa93 f3a3 	rbit	r3, r3
 8009510:	61fb      	str	r3, [r7, #28]
  return result;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800951c:	2320      	movs	r3, #32
 800951e:	e003      	b.n	8009528 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	fab3 f383 	clz	r3, r3
 8009526:	b2db      	uxtb	r3, r3
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	431a      	orrs	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	60da      	str	r2, [r3, #12]
}
 8009536:	bf00      	nop
 8009538:	372c      	adds	r7, #44	; 0x2c
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009542:	b480      	push	{r7}
 8009544:	b08b      	sub	sp, #44	; 0x2c
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	613b      	str	r3, [r7, #16]
  return result;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009568:	2320      	movs	r3, #32
 800956a:	e003      	b.n	8009574 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	fab3 f383 	clz	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	210f      	movs	r1, #15
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	fa93 f3a3 	rbit	r3, r3
 800958a:	61fb      	str	r3, [r7, #28]
  return result;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009596:	2320      	movs	r3, #32
 8009598:	e003      	b.n	80095a2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	431a      	orrs	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80095b0:	bf00      	nop
 80095b2:	372c      	adds	r7, #44	; 0x2c
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80095bc:	b480      	push	{r7}
 80095be:	b08b      	sub	sp, #44	; 0x2c
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	613b      	str	r3, [r7, #16]
  return result;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	210f      	movs	r1, #15
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	fa93 f3a3 	rbit	r3, r3
 8009608:	61fb      	str	r3, [r7, #28]
  return result;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009614:	2320      	movs	r3, #32
 8009616:	e003      	b.n	8009620 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	fab3 f383 	clz	r3, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	fa01 f303 	lsl.w	r3, r1, r3
 8009628:	431a      	orrs	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800962e:	bf00      	nop
 8009630:	372c      	adds	r7, #44	; 0x2c
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	fa93 f3a3 	rbit	r3, r3
 8009650:	60fb      	str	r3, [r7, #12]
  return result;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <LL_GPIO_Init+0x26>
    return 32U;
 800965c:	2320      	movs	r3, #32
 800965e:	e003      	b.n	8009668 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	fab3 f383 	clz	r3, r3
 8009666:	b2db      	uxtb	r3, r3
 8009668:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800966a:	e047      	b.n	80096fc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	2101      	movs	r1, #1
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d039      	beq.n	80096f6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d003      	beq.n	8009692 <LL_GPIO_Init+0x58>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d10d      	bne.n	80096ae <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	461a      	mov	r2, r3
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff fed7 	bl	800944e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	461a      	mov	r2, r3
 80096a6:	69b9      	ldr	r1, [r7, #24]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff feb8 	bl	800941e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	461a      	mov	r2, r3
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff06 	bl	80094c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d111      	bne.n	80096e8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2bff      	cmp	r3, #255	; 0xff
 80096c8:	d807      	bhi.n	80096da <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	461a      	mov	r2, r3
 80096d0:	69b9      	ldr	r1, [r7, #24]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff ff35 	bl	8009542 <LL_GPIO_SetAFPin_0_7>
 80096d8:	e006      	b.n	80096e8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	69b9      	ldr	r1, [r7, #24]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff ff6a 	bl	80095bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69b9      	ldr	r1, [r7, #24]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fe57 	bl	80093a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	fa22 f303 	lsr.w	r3, r2, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1b0      	bne.n	800966c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800971c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009720:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	b29b      	uxth	r3, r3
 800972e:	43db      	mvns	r3, r3
 8009730:	b29b      	uxth	r3, r3
 8009732:	4013      	ands	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800974a:	b084      	sub	sp, #16
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	f107 0014 	add.w	r0, r7, #20
 8009758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	b004      	add	sp, #16
 800978a:	4770      	bx	lr

0800978c <__NVIC_SetPriority>:
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979c:	2b00      	cmp	r3, #0
 800979e:	db0a      	blt.n	80097b6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	490c      	ldr	r1, [pc, #48]	; (80097d8 <__NVIC_SetPriority+0x4c>)
 80097a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097aa:	0152      	lsls	r2, r2, #5
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	440b      	add	r3, r1
 80097b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097b4:	e00a      	b.n	80097cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4908      	ldr	r1, [pc, #32]	; (80097dc <__NVIC_SetPriority+0x50>)
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	f003 030f 	and.w	r3, r3, #15
 80097c2:	3b04      	subs	r3, #4
 80097c4:	0152      	lsls	r2, r2, #5
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	440b      	add	r3, r1
 80097ca:	761a      	strb	r2, [r3, #24]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000e100 	.word	0xe000e100
 80097dc:	e000ed00 	.word	0xe000ed00

080097e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <SysTick_Handler+0x1c>)
 80097e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097e8:	f002 f880 	bl	800b8ec <xTaskGetSchedulerState>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d001      	beq.n	80097f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097f2:	f002 fdc3 	bl	800c37c <xPortSysTickHandler>
  }
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	e000e010 	.word	0xe000e010

08009800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009804:	2100      	movs	r1, #0
 8009806:	f06f 0004 	mvn.w	r0, #4
 800980a:	f7ff ffbf 	bl	800978c <__NVIC_SetPriority>
#endif
}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800981a:	f3ef 8305 	mrs	r3, IPSR
 800981e:	603b      	str	r3, [r7, #0]
  return(result);
 8009820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009826:	f06f 0305 	mvn.w	r3, #5
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	e00c      	b.n	8009848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <osKernelInitialize+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009836:	4b08      	ldr	r3, [pc, #32]	; (8009858 <osKernelInitialize+0x44>)
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800983c:	2300      	movs	r3, #0
 800983e:	607b      	str	r3, [r7, #4]
 8009840:	e002      	b.n	8009848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009848:	687b      	ldr	r3, [r7, #4]
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2001cb08 	.word	0x2001cb08

0800985c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009862:	f3ef 8305 	mrs	r3, IPSR
 8009866:	603b      	str	r3, [r7, #0]
  return(result);
 8009868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800986e:	f06f 0305 	mvn.w	r3, #5
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	e010      	b.n	8009898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <osKernelStart+0x48>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d109      	bne.n	8009892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800987e:	f7ff ffbf 	bl	8009800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009882:	4b08      	ldr	r3, [pc, #32]	; (80098a4 <osKernelStart+0x48>)
 8009884:	2202      	movs	r2, #2
 8009886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009888:	f001 fc3e 	bl	800b108 <vTaskStartScheduler>
      stat = osOK;
 800988c:	2300      	movs	r3, #0
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	e002      	b.n	8009898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009898:	687b      	ldr	r3, [r7, #4]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2001cb08 	.word	0x2001cb08

080098a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af04      	add	r7, sp, #16
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b8:	f3ef 8305 	mrs	r3, IPSR
 80098bc:	617b      	str	r3, [r7, #20]
  return(result);
 80098be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d17e      	bne.n	80099c2 <osThreadNew+0x11a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d07b      	beq.n	80099c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098ce:	2318      	movs	r3, #24
 80098d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d045      	beq.n	800996e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <osThreadNew+0x48>
        name = attr->name;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <osThreadNew+0x6e>
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2b38      	cmp	r3, #56	; 0x38
 8009908:	d805      	bhi.n	8009916 <osThreadNew+0x6e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <osThreadNew+0x72>
        return (NULL);
 8009916:	2300      	movs	r3, #0
 8009918:	e054      	b.n	80099c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	089b      	lsrs	r3, r3, #2
 8009928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <osThreadNew+0xa8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2bbb      	cmp	r3, #187	; 0xbb
 8009938:	d90a      	bls.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800993e:	2b00      	cmp	r3, #0
 8009940:	d006      	beq.n	8009950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <osThreadNew+0xa8>
        mem = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e010      	b.n	8009972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <osThreadNew+0xca>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d108      	bne.n	8009972 <osThreadNew+0xca>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <osThreadNew+0xca>
          mem = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	61bb      	str	r3, [r7, #24]
 800996c:	e001      	b.n	8009972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d110      	bne.n	800999a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a3a      	ldr	r2, [r7, #32]
 800998c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f001 fa04 	bl	800ad9c <xTaskCreateStatic>
 8009994:	4603      	mov	r3, r0
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	e013      	b.n	80099c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d110      	bne.n	80099c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f001 fa37 	bl	800ae26 <xTaskCreate>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d001      	beq.n	80099c2 <osThreadNew+0x11a>
            hTask = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099c2:	693b      	ldr	r3, [r7, #16]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	; 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d4:	f3ef 8305 	mrs	r3, IPSR
 80099d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <osDelay+0x1c>
    stat = osErrorISR;
 80099e0:	f06f 0305 	mvn.w	r3, #5
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e007      	b.n	80099f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fb64 	bl	800b0c0 <vTaskDelay>
    }
  }

  return (stat);
 80099f8:	68fb      	ldr	r3, [r7, #12]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b08a      	sub	sp, #40	; 0x28
 8009a06:	af02      	add	r7, sp, #8
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a12:	f3ef 8305 	mrs	r3, IPSR
 8009a16:	613b      	str	r3, [r7, #16]
  return(result);
 8009a18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d175      	bne.n	8009b0a <osSemaphoreNew+0x108>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d072      	beq.n	8009b0a <osSemaphoreNew+0x108>
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d86e      	bhi.n	8009b0a <osSemaphoreNew+0x108>
    mem = -1;
 8009a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d015      	beq.n	8009a64 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <osSemaphoreNew+0x4c>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	2b4f      	cmp	r3, #79	; 0x4f
 8009a46:	d902      	bls.n	8009a4e <osSemaphoreNew+0x4c>
        mem = 1;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	61bb      	str	r3, [r7, #24]
 8009a4c:	e00c      	b.n	8009a68 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d108      	bne.n	8009a68 <osSemaphoreNew+0x66>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <osSemaphoreNew+0x66>
          mem = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61bb      	str	r3, [r7, #24]
 8009a62:	e001      	b.n	8009a68 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d04c      	beq.n	8009b0a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d128      	bne.n	8009ac8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10a      	bne.n	8009a92 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2203      	movs	r2, #3
 8009a82:	9200      	str	r2, [sp, #0]
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f000 fb3b 	bl	800a104 <xQueueGenericCreateStatic>
 8009a8e:	61f8      	str	r0, [r7, #28]
 8009a90:	e005      	b.n	8009a9e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a92:	2203      	movs	r2, #3
 8009a94:	2100      	movs	r1, #0
 8009a96:	2001      	movs	r0, #1
 8009a98:	f000 fb84 	bl	800a1a4 <xQueueGenericCreate>
 8009a9c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d022      	beq.n	8009aea <osSemaphoreNew+0xe8>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01f      	beq.n	8009aea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	69f8      	ldr	r0, [r7, #28]
 8009ab2:	f000 fc16 	bl	800a2e2 <xQueueGenericSend>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d016      	beq.n	8009aea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009abc:	69f8      	ldr	r0, [r7, #28]
 8009abe:	f000 ffa1 	bl	800aa04 <vQueueDelete>
            hSemaphore = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e010      	b.n	8009aea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d108      	bne.n	8009ae0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fbb9 	bl	800a24e <xQueueCreateCountingSemaphoreStatic>
 8009adc:	61f8      	str	r0, [r7, #28]
 8009ade:	e004      	b.n	8009aea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fbda 	bl	800a29c <xQueueCreateCountingSemaphore>
 8009ae8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <osSemaphoreNew+0xfc>
          name = attr->name;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	69f8      	ldr	r0, [r7, #28]
 8009b06:	f001 f8c1 	bl	800ac8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009b2c:	f06f 0303 	mvn.w	r3, #3
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e035      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01e      	beq.n	8009b7e <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009b46:	f06f 0303 	mvn.w	r3, #3
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	e028      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
    }
    else {
      yield = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	461a      	mov	r2, r3
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 fef4 	bl	800a948 <xQueueReceiveFromISR>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d003      	beq.n	8009b6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b66:	f06f 0302 	mvn.w	r3, #2
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e018      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d015      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
 8009b74:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <osSemaphoreAcquire+0x98>)
 8009b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e010      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6938      	ldr	r0, [r7, #16]
 8009b82:	f000 fe04 	bl	800a78e <xQueueSemaphoreTake>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d009      	beq.n	8009ba0 <osSemaphoreAcquire+0x8c>
      if (timeout != 0U) {
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <osSemaphoreAcquire+0x86>
        stat = osErrorTimeout;
 8009b92:	f06f 0301 	mvn.w	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e002      	b.n	8009ba0 <osSemaphoreAcquire+0x8c>
      } else {
        stat = osErrorResource;
 8009b9a:	f06f 0302 	mvn.w	r3, #2
 8009b9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009bc6:	f06f 0303 	mvn.w	r3, #3
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e028      	b.n	8009c20 <osSemaphoreRelease+0x70>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d016      	beq.n	8009c08 <osSemaphoreRelease+0x58>
    yield = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	4619      	mov	r1, r3
 8009be4:	6938      	ldr	r0, [r7, #16]
 8009be6:	f000 fcb6 	bl	800a556 <xQueueGiveFromISR>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d003      	beq.n	8009bf8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009bf0:	f06f 0302 	mvn.w	r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
 8009bf6:	e013      	b.n	8009c20 <osSemaphoreRelease+0x70>
    } else {
      portYIELD_FROM_ISR (yield);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d010      	beq.n	8009c20 <osSemaphoreRelease+0x70>
 8009bfe:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <osSemaphoreRelease+0x7c>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e00b      	b.n	8009c20 <osSemaphoreRelease+0x70>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6938      	ldr	r0, [r7, #16]
 8009c10:	f000 fb67 	bl	800a2e2 <xQueueGenericSend>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <osSemaphoreRelease+0x70>
      stat = osErrorResource;
 8009c1a:	f06f 0302 	mvn.w	r3, #2
 8009c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c20:	697b      	ldr	r3, [r7, #20]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	613b      	str	r3, [r7, #16]
  return(result);
 8009c46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d15f      	bne.n	8009d0c <osMessageQueueNew+0xdc>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d059      	beq.n	8009d0c <osMessageQueueNew+0xdc>
    mem = -1;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <osMessageQueueNew+0x62>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b4f      	cmp	r3, #79	; 0x4f
 8009c72:	d90e      	bls.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d302      	bcc.n	8009c92 <osMessageQueueNew+0x62>
        mem = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	e014      	b.n	8009cbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d110      	bne.n	8009cbc <osMessageQueueNew+0x8c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10c      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <osMessageQueueNew+0x8c>
          mem = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e001      	b.n	8009cbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10b      	bne.n	8009cda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	9100      	str	r1, [sp, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fa17 	bl	800a104 <xQueueGenericCreateStatic>
 8009cd6:	61f8      	str	r0, [r7, #28]
 8009cd8:	e008      	b.n	8009cec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d105      	bne.n	8009cec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa5d 	bl	800a1a4 <xQueueGenericCreate>
 8009cea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e001      	b.n	8009d04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	69f8      	ldr	r0, [r7, #28]
 8009d08:	f000 ffc0 	bl	800ac8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d30:	f3ef 8305 	mrs	r3, IPSR
 8009d34:	617b      	str	r3, [r7, #20]
  return(result);
 8009d36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d024      	beq.n	8009d86 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <osMessageQueuePut+0x36>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009d4e:	f06f 0303 	mvn.w	r3, #3
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e034      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009d5a:	f107 0210 	add.w	r2, r7, #16
 8009d5e:	2300      	movs	r3, #0
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	69b8      	ldr	r0, [r7, #24]
 8009d64:	f000 fb86 	bl	800a474 <xQueueGenericSendFromISR>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d003      	beq.n	8009d76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009d6e:	f06f 0302 	mvn.w	r3, #2
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e024      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d021      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <osMessageQueuePut+0xb4>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e01c      	b.n	8009dc0 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <osMessageQueuePut+0x7a>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8009d92:	f06f 0303 	mvn.w	r3, #3
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e012      	b.n	8009dc0 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f000 fa9e 	bl	800a2e2 <xQueueGenericSend>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d009      	beq.n	8009dc0 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 8009db2:	f06f 0301 	mvn.w	r3, #1
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e002      	b.n	8009dc0 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de6:	f3ef 8305 	mrs	r3, IPSR
 8009dea:	617b      	str	r3, [r7, #20]
  return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d024      	beq.n	8009e3c <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <osMessageQueueGet+0x34>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e04:	f06f 0303 	mvn.w	r3, #3
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e033      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      yield = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e10:	f107 0310 	add.w	r3, r7, #16
 8009e14:	461a      	mov	r2, r3
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	69b8      	ldr	r0, [r7, #24]
 8009e1a:	f000 fd95 	bl	800a948 <xQueueReceiveFromISR>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d003      	beq.n	8009e2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009e24:	f06f 0302 	mvn.w	r3, #2
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	e023      	b.n	8009e74 <osMessageQueueGet+0xa4>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d020      	beq.n	8009e74 <osMessageQueueGet+0xa4>
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <osMessageQueueGet+0xb0>)
 8009e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e01b      	b.n	8009e74 <osMessageQueueGet+0xa4>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <osMessageQueueGet+0x78>
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d103      	bne.n	8009e50 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8009e48:	f06f 0303 	mvn.w	r3, #3
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e011      	b.n	8009e74 <osMessageQueueGet+0xa4>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f000 fbe1 	bl	800a61c <xQueueReceive>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d009      	beq.n	8009e74 <osMessageQueueGet+0xa4>
        if (timeout != 0U) {
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <osMessageQueueGet+0x9e>
          stat = osErrorTimeout;
 8009e66:	f06f 0301 	mvn.w	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e002      	b.n	8009e74 <osMessageQueueGet+0xa4>
        } else {
          stat = osErrorResource;
 8009e6e:	f06f 0302 	mvn.w	r3, #2
 8009e72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8009e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	2001cb0c 	.word	0x2001cb0c
 8009eb4:	2001cbc8 	.word	0x2001cbc8

08009eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8009ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ed6:	601a      	str	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	2001cdc8 	.word	0x2001cdc8
 8009ee8:	2001ce84 	.word	0x2001ce84

08009eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0208 	add.w	r2, r3, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 0208 	add.w	r2, r3, #8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d103      	bne.n	8009fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e00c      	b.n	8009fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <vListInsert+0x2e>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d2f6      	bcs.n	8009fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6892      	ldr	r2, [r2, #8]
 800a016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6852      	ldr	r2, [r2, #4]
 800a020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d103      	bne.n	800a034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <xQueueGenericReset+0x1a>
 800a068:	f002 fa8e 	bl	800c588 <ulSetInterruptMask>
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800a06e:	f002 f959 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22ff      	movs	r2, #255	; 0xff
 800a0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	22ff      	movs	r2, #255	; 0xff
 800a0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10e      	bne.n	800a0e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d014      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3310      	adds	r3, #16
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fa71 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00c      	beq.n	800a0f6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0dc:	f002 f910 	bl	800c300 <vPortYield>
 800a0e0:	e009      	b.n	800a0f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff ff00 	bl	8009eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fefb 	bl	8009eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0f6:	f002 f927 	bl	800c348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0fa:	2301      	movs	r3, #1
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <xQueueGenericCreateStatic+0x1a>
 800a118:	f002 fa36 	bl	800c588 <ulSetInterruptMask>
 800a11c:	e7fe      	b.n	800a11c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <xQueueGenericCreateStatic+0x26>
 800a124:	f002 fa30 	bl	800c588 <ulSetInterruptMask>
 800a128:	e7fe      	b.n	800a128 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <xQueueGenericCreateStatic+0x32>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <xQueueGenericCreateStatic+0x36>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <xQueueGenericCreateStatic+0x38>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <xQueueGenericCreateStatic+0x42>
 800a140:	f002 fa22 	bl	800c588 <ulSetInterruptMask>
 800a144:	e7fe      	b.n	800a144 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <xQueueGenericCreateStatic+0x4e>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <xQueueGenericCreateStatic+0x52>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <xQueueGenericCreateStatic+0x54>
 800a156:	2300      	movs	r3, #0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <xQueueGenericCreateStatic+0x5e>
 800a15c:	f002 fa14 	bl	800c588 <ulSetInterruptMask>
 800a160:	e7fe      	b.n	800a160 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a162:	2350      	movs	r3, #80	; 0x50
 800a164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b50      	cmp	r3, #80	; 0x50
 800a16a:	d002      	beq.n	800a172 <xQueueGenericCreateStatic+0x6e>
 800a16c:	f002 fa0c 	bl	800c588 <ulSetInterruptMask>
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a172:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a186:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4613      	mov	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f837 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a19a:	697b      	ldr	r3, [r7, #20]
	}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xQueueGenericCreate+0x1a>
 800a1b8:	f002 f9e6 	bl	800c588 <ulSetInterruptMask>
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	3350      	adds	r3, #80	; 0x50
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 fa3b 	bl	800c648 <pvPortMalloc>
 800a1d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d011      	beq.n	800a1fe <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3350      	adds	r3, #80	; 0x50
 800a1e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1ec:	79fa      	ldrb	r2, [r7, #7]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f805 	bl	800a208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a200:	4618      	mov	r0, r3
 800a202:	3720      	adds	r7, #32
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a236:	2101      	movs	r1, #1
 800a238:	69b8      	ldr	r0, [r7, #24]
 800a23a:	f7ff ff0b 	bl	800a054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af02      	add	r7, sp, #8
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xQueueCreateCountingSemaphoreStatic+0x18>
 800a260:	f002 f992 	bl	800c588 <ulSetInterruptMask>
 800a264:	e7fe      	b.n	800a264 <xQueueCreateCountingSemaphoreStatic+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d902      	bls.n	800a274 <xQueueCreateCountingSemaphoreStatic+0x26>
 800a26e:	f002 f98b 	bl	800c588 <ulSetInterruptMask>
 800a272:	e7fe      	b.n	800a272 <xQueueCreateCountingSemaphoreStatic+0x24>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a274:	2302      	movs	r3, #2
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff ff40 	bl	800a104 <xQueueGenericCreateStatic>
 800a284:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a292:	697b      	ldr	r3, [r7, #20]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <xQueueCreateCountingSemaphore+0x16>
 800a2ac:	f002 f96c 	bl	800c588 <ulSetInterruptMask>
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d902      	bls.n	800a2c0 <xQueueCreateCountingSemaphore+0x24>
 800a2ba:	f002 f965 	bl	800c588 <ulSetInterruptMask>
 800a2be:	e7fe      	b.n	800a2be <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff6d 	bl	800a1a4 <xQueueGenericCreate>
 800a2ca:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
	}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <xQueueGenericSend+0x22>
 800a2fe:	f002 f943 	bl	800c588 <ulSetInterruptMask>
 800a302:	e7fe      	b.n	800a302 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <xQueueGenericSend+0x30>
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <xQueueGenericSend+0x34>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <xQueueGenericSend+0x36>
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <xQueueGenericSend+0x40>
 800a31c:	f002 f934 	bl	800c588 <ulSetInterruptMask>
 800a320:	e7fe      	b.n	800a320 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d103      	bne.n	800a330 <xQueueGenericSend+0x4e>
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <xQueueGenericSend+0x52>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <xQueueGenericSend+0x54>
 800a334:	2300      	movs	r3, #0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <xQueueGenericSend+0x5e>
 800a33a:	f002 f925 	bl	800c588 <ulSetInterruptMask>
 800a33e:	e7fe      	b.n	800a33e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a340:	f001 fad4 	bl	800b8ec <xTaskGetSchedulerState>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <xQueueGenericSend+0x6e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <xQueueGenericSend+0x72>
 800a350:	2301      	movs	r3, #1
 800a352:	e000      	b.n	800a356 <xQueueGenericSend+0x74>
 800a354:	2300      	movs	r3, #0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <xQueueGenericSend+0x7e>
 800a35a:	f002 f915 	bl	800c588 <ulSetInterruptMask>
 800a35e:	e7fe      	b.n	800a35e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a360:	f001 ffe0 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <xQueueGenericSend+0x94>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d11d      	bne.n	800a3b2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	6a38      	ldr	r0, [r7, #32]
 800a37c:	f000 fb75 	bl	800aa6a <prvCopyDataToQueue>
 800a380:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 f912 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a39a:	f001 ffb1 	bl	800c300 <vPortYield>
 800a39e:	e004      	b.n	800a3aa <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3a6:	f001 ffab 	bl	800c300 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3aa:	f001 ffcd 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e05c      	b.n	800a46c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d103      	bne.n	800a3c0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3b8:	f001 ffc6 	bl	800c348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e055      	b.n	800a46c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3c6:	f107 0314 	add.w	r3, r7, #20
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f950 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3d4:	f001 ffb8 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3d8:	f000 fef6 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3dc:	f001 ffa2 	bl	800c324 <vPortEnterCritical>
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d103      	bne.n	800a3f6 <xQueueGenericSend+0x114>
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d103      	bne.n	800a40c <xQueueGenericSend+0x12a>
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a40c:	f001 ff9c 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a410:	1d3a      	adds	r2, r7, #4
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 f93f 	bl	800b69c <xTaskCheckForTimeOut>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11d      	bne.n	800a460 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a424:	6a38      	ldr	r0, [r7, #32]
 800a426:	f000 fc18 	bl	800ac5a <prvIsQueueFull>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	3310      	adds	r3, #16
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f87d 	bl	800b538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a43e:	6a38      	ldr	r0, [r7, #32]
 800a440:	f000 fba3 	bl	800ab8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a444:	f000 fece 	bl	800b1e4 <xTaskResumeAll>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d188      	bne.n	800a360 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800a44e:	f001 ff57 	bl	800c300 <vPortYield>
 800a452:	e785      	b.n	800a360 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a454:	6a38      	ldr	r0, [r7, #32]
 800a456:	f000 fb98 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45a:	f000 fec3 	bl	800b1e4 <xTaskResumeAll>
 800a45e:	e77f      	b.n	800a360 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a460:	6a38      	ldr	r0, [r7, #32]
 800a462:	f000 fb92 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a466:	f000 febd 	bl	800b1e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	; 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	; 0x28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <xQueueGenericSendFromISR+0x1e>
 800a48c:	f002 f87c 	bl	800c588 <ulSetInterruptMask>
 800a490:	e7fe      	b.n	800a490 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x2c>
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x30>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xQueueGenericSendFromISR+0x32>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <xQueueGenericSendFromISR+0x3c>
 800a4aa:	f002 f86d 	bl	800c588 <ulSetInterruptMask>
 800a4ae:	e7fe      	b.n	800a4ae <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d103      	bne.n	800a4be <xQueueGenericSendFromISR+0x4a>
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <xQueueGenericSendFromISR+0x4e>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xQueueGenericSendFromISR+0x50>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <xQueueGenericSendFromISR+0x5a>
 800a4c8:	f002 f85e 	bl	800c588 <ulSetInterruptMask>
 800a4cc:	e7fe      	b.n	800a4cc <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ce:	f002 f85b 	bl	800c588 <ulSetInterruptMask>
 800a4d2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <xQueueGenericSendFromISR+0x72>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d12d      	bne.n	800a542 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ec:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	6a38      	ldr	r0, [r7, #32]
 800a4fa:	f000 fab6 	bl	800aa6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a506:	d112      	bne.n	800a52e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d015      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	3324      	adds	r3, #36	; 0x24
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f84f 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00d      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e006      	b.n	800a53c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a52e:	7efb      	ldrb	r3, [r7, #27]
 800a530:	3301      	adds	r3, #1
 800a532:	b2db      	uxtb	r3, r3
 800a534:	b25a      	sxtb	r2, r3
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a540:	e001      	b.n	800a546 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a542:	2300      	movs	r3, #0
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a546:	69f8      	ldr	r0, [r7, #28]
 800a548:	f002 f82b 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3728      	adds	r7, #40	; 0x28
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b088      	sub	sp, #32
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <xQueueGiveFromISR+0x1a>
 800a56a:	f002 f80d 	bl	800c588 <ulSetInterruptMask>
 800a56e:	e7fe      	b.n	800a56e <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <xQueueGiveFromISR+0x28>
 800a578:	f002 f806 	bl	800c588 <ulSetInterruptMask>
 800a57c:	e7fe      	b.n	800a57c <xQueueGiveFromISR+0x26>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueGiveFromISR+0x38>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueGiveFromISR+0x3c>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGiveFromISR+0x3e>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <xQueueGiveFromISR+0x48>
 800a598:	f001 fff6 	bl	800c588 <ulSetInterruptMask>
 800a59c:	e7fe      	b.n	800a59c <xQueueGiveFromISR+0x46>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a59e:	f001 fff3 	bl	800c588 <ulSetInterruptMask>
 800a5a2:	6178      	str	r0, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d229      	bcs.n	800a608 <xQueueGiveFromISR+0xb2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ba:	73fb      	strb	r3, [r7, #15]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d112      	bne.n	800a5f4 <xQueueGiveFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d015      	beq.n	800a602 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	3324      	adds	r3, #36	; 0x24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 ffec 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00d      	beq.n	800a602 <xQueueGiveFromISR+0xac>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <xQueueGiveFromISR+0xac>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e006      	b.n	800a602 <xQueueGiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	b25a      	sxtb	r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a602:	2301      	movs	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e001      	b.n	800a60c <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f001 ffc8 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a612:	69fb      	ldr	r3, [r7, #28]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <xQueueReceive+0x20>
 800a636:	f001 ffa7 	bl	800c588 <ulSetInterruptMask>
 800a63a:	e7fe      	b.n	800a63a <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueReceive+0x2e>
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueReceive+0x32>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueReceive+0x34>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueReceive+0x3e>
 800a654:	f001 ff98 	bl	800c588 <ulSetInterruptMask>
 800a658:	e7fe      	b.n	800a658 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a65a:	f001 f947 	bl	800b8ec <xTaskGetSchedulerState>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <xQueueReceive+0x4e>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <xQueueReceive+0x52>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <xQueueReceive+0x54>
 800a66e:	2300      	movs	r3, #0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueReceive+0x5e>
 800a674:	f001 ff88 	bl	800c588 <ulSetInterruptMask>
 800a678:	e7fe      	b.n	800a678 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67a:	f001 fe53 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d019      	beq.n	800a6be <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	6a38      	ldr	r0, [r7, #32]
 800a68e:	f000 fa56 	bl	800ab3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 ff86 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6b2:	f001 fe25 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b6:	f001 fe47 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e063      	b.n	800a786 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d103      	bne.n	800a6cc <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c4:	f001 fe40 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e05c      	b.n	800a786 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d2:	f107 0314 	add.w	r3, r7, #20
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ffca 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e0:	f001 fe32 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e4:	f000 fd70 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e8:	f001 fe1c 	bl	800c324 <vPortEnterCritical>
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d103      	bne.n	800a702 <xQueueReceive+0xe6>
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueReceive+0xfc>
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a718:	f001 fe16 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71c:	1d3a      	adds	r2, r7, #4
 800a71e:	f107 0314 	add.w	r3, r7, #20
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f000 ffb9 	bl	800b69c <xTaskCheckForTimeOut>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d11d      	bne.n	800a76c <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a730:	6a38      	ldr	r0, [r7, #32]
 800a732:	f000 fa7c 	bl	800ac2e <prvIsQueueEmpty>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d011      	beq.n	800a760 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f000 fef7 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a74a:	6a38      	ldr	r0, [r7, #32]
 800a74c:	f000 fa1d 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a750:	f000 fd48 	bl	800b1e4 <xTaskResumeAll>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d18f      	bne.n	800a67a <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800a75a:	f001 fdd1 	bl	800c300 <vPortYield>
 800a75e:	e78c      	b.n	800a67a <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a760:	6a38      	ldr	r0, [r7, #32]
 800a762:	f000 fa12 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a766:	f000 fd3d 	bl	800b1e4 <xTaskResumeAll>
 800a76a:	e786      	b.n	800a67a <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a76c:	6a38      	ldr	r0, [r7, #32]
 800a76e:	f000 fa0c 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a772:	f000 fd37 	bl	800b1e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a776:	6a38      	ldr	r0, [r7, #32]
 800a778:	f000 fa59 	bl	800ac2e <prvIsQueueEmpty>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f43f af7b 	beq.w	800a67a <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a786:	4618      	mov	r0, r3
 800a788:	3728      	adds	r7, #40	; 0x28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08a      	sub	sp, #40	; 0x28
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <xQueueSemaphoreTake+0x22>
 800a7aa:	f001 feed 	bl	800c588 <ulSetInterruptMask>
 800a7ae:	e7fe      	b.n	800a7ae <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <xQueueSemaphoreTake+0x30>
 800a7b8:	f001 fee6 	bl	800c588 <ulSetInterruptMask>
 800a7bc:	e7fe      	b.n	800a7bc <xQueueSemaphoreTake+0x2e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7be:	f001 f895 	bl	800b8ec <xTaskGetSchedulerState>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <xQueueSemaphoreTake+0x40>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <xQueueSemaphoreTake+0x44>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <xQueueSemaphoreTake+0x46>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <xQueueSemaphoreTake+0x50>
 800a7d8:	f001 fed6 	bl	800c588 <ulSetInterruptMask>
 800a7dc:	e7fe      	b.n	800a7dc <xQueueSemaphoreTake+0x4e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7de:	f001 fda1 	bl	800c324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d01e      	beq.n	800a82c <xQueueSemaphoreTake+0x9e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <xQueueSemaphoreTake+0x7a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7fe:	f001 f9cb 	bl	800bb98 <pvTaskIncrementMutexHeldCount>
 800a802:	4602      	mov	r2, r0
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3310      	adds	r3, #16
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fecf 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <xQueueSemaphoreTake+0x96>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a820:	f001 fd6e 	bl	800c300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a824:	f001 fd90 	bl	800c348 <vPortExitCritical>
				return pdPASS;
 800a828:	2301      	movs	r3, #1
 800a82a:	e089      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <xQueueSemaphoreTake+0xb8>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <xQueueSemaphoreTake+0xb0>
 800a838:	f001 fea6 	bl	800c588 <ulSetInterruptMask>
 800a83c:	e7fe      	b.n	800a83c <xQueueSemaphoreTake+0xae>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a83e:	f001 fd83 	bl	800c348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a842:	2300      	movs	r3, #0
 800a844:	e07c      	b.n	800a940 <xQueueSemaphoreTake+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a84c:	f107 030c 	add.w	r3, r7, #12
 800a850:	4618      	mov	r0, r3
 800a852:	f000 ff0d 	bl	800b670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a856:	2301      	movs	r3, #1
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85a:	f001 fd75 	bl	800c348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a85e:	f000 fcb3 	bl	800b1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a862:	f001 fd5f 	bl	800c324 <vPortEnterCritical>
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d103      	bne.n	800a87c <xQueueSemaphoreTake+0xee>
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a882:	b25b      	sxtb	r3, r3
 800a884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a888:	d103      	bne.n	800a892 <xQueueSemaphoreTake+0x104>
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a892:	f001 fd59 	bl	800c348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a896:	463a      	mov	r2, r7
 800a898:	f107 030c 	add.w	r3, r7, #12
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fefc 	bl	800b69c <xTaskCheckForTimeOut>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12c      	bne.n	800a904 <xQueueSemaphoreTake+0x176>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8aa:	69f8      	ldr	r0, [r7, #28]
 800a8ac:	f000 f9bf 	bl	800ac2e <prvIsQueueEmpty>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d020      	beq.n	800a8f8 <xQueueSemaphoreTake+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <xQueueSemaphoreTake+0x144>
					{
						taskENTER_CRITICAL();
 800a8be:	f001 fd31 	bl	800c324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f82e 	bl	800b928 <xTaskPriorityInherit>
 800a8cc:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a8ce:	f001 fd3b 	bl	800c348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3324      	adds	r3, #36	; 0x24
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fe2c 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8e0:	69f8      	ldr	r0, [r7, #28]
 800a8e2:	f000 f952 	bl	800ab8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8e6:	f000 fc7d 	bl	800b1e4 <xTaskResumeAll>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f af76 	bne.w	800a7de <xQueueSemaphoreTake+0x50>
				{
					portYIELD_WITHIN_API();
 800a8f2:	f001 fd05 	bl	800c300 <vPortYield>
 800a8f6:	e772      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8f8:	69f8      	ldr	r0, [r7, #28]
 800a8fa:	f000 f946 	bl	800ab8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8fe:	f000 fc71 	bl	800b1e4 <xTaskResumeAll>
 800a902:	e76c      	b.n	800a7de <xQueueSemaphoreTake+0x50>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a904:	69f8      	ldr	r0, [r7, #28]
 800a906:	f000 f940 	bl	800ab8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a90a:	f000 fc6b 	bl	800b1e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f000 f98d 	bl	800ac2e <prvIsQueueEmpty>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f43f af61 	beq.w	800a7de <xQueueSemaphoreTake+0x50>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 800a922:	f001 fcff 	bl	800c324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a926:	69f8      	ldr	r0, [r7, #28]
 800a928:	f000 f887 	bl	800aa3a <prvGetDisinheritPriorityAfterTimeout>
 800a92c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	6979      	ldr	r1, [r7, #20]
 800a934:	4618      	mov	r0, r3
 800a936:	f001 f8bd 	bl	800bab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a93a:	f001 fd05 	bl	800c348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a93e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a940:	4618      	mov	r0, r3
 800a942:	3728      	adds	r7, #40	; 0x28
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08a      	sub	sp, #40	; 0x28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <xQueueReceiveFromISR+0x1c>
 800a95e:	f001 fe13 	bl	800c588 <ulSetInterruptMask>
 800a962:	e7fe      	b.n	800a962 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceiveFromISR+0x2a>
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceiveFromISR+0x2e>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceiveFromISR+0x30>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <xQueueReceiveFromISR+0x3a>
 800a97c:	f001 fe04 	bl	800c588 <ulSetInterruptMask>
 800a980:	e7fe      	b.n	800a980 <xQueueReceiveFromISR+0x38>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a982:	f001 fe01 	bl	800c588 <ulSetInterruptMask>
 800a986:	61f8      	str	r0, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d02d      	beq.n	800a9f0 <xQueueReceiveFromISR+0xa8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99a:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	6a38      	ldr	r0, [r7, #32]
 800a9a0:	f000 f8cd 	bl	800ab3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1e5a      	subs	r2, r3, #1
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d112      	bne.n	800a9dc <xQueueReceiveFromISR+0x94>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d015      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	3310      	adds	r3, #16
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fdf8 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00d      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <xQueueReceiveFromISR+0xa2>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e006      	b.n	800a9ea <xQueueReceiveFromISR+0xa2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	b25a      	sxtb	r2, r3
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	e001      	b.n	800a9f4 <xQueueReceiveFromISR+0xac>
		}
		else
		{
			xReturn = pdFAIL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a9f4:	69f8      	ldr	r0, [r7, #28]
 800a9f6:	f001 fdd4 	bl	800c5a2 <vClearInterruptMask>

	return xReturn;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3728      	adds	r7, #40	; 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <vQueueDelete+0x18>
 800aa16:	f001 fdb7 	bl	800c588 <ulSetInterruptMask>
 800aa1a:	e7fe      	b.n	800aa1a <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f95f 	bl	800ace0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <vQueueDelete+0x2e>
		{
			vPortFree( pxQueue );
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f001 febf 	bl	800c7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b085      	sub	sp, #20
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d006      	beq.n	800aa58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e001      	b.n	800aa5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d14d      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 ffaf 	bl	800b9f8 <xTaskPriorityDisinherit>
 800aa9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	e043      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d119      	bne.n	800aade <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6858      	ldr	r0, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	461a      	mov	r2, r3
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	f018 fbd9 	bl	802326c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	441a      	add	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d32b      	bcc.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	605a      	str	r2, [r3, #4]
 800aadc:	e026      	b.n	800ab2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68d8      	ldr	r0, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	461a      	mov	r2, r3
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	f018 fbbf 	bl	802326c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	425b      	negs	r3, r3
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d207      	bcs.n	800ab1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	425b      	negs	r3, r3
 800ab14:	441a      	add	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d105      	bne.n	800ab2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab34:	697b      	ldr	r3, [r7, #20]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d018      	beq.n	800ab82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d303      	bcc.n	800ab72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68d9      	ldr	r1, [r3, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6838      	ldr	r0, [r7, #0]
 800ab7e:	f018 fb75 	bl	802326c <memcpy>
	}
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab92:	f001 fbc7 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab9e:	e011      	b.n	800abc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d012      	beq.n	800abce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3324      	adds	r3, #36	; 0x24
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fd03 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb8:	f000 fdc2 	bl	800b740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dce9      	bgt.n	800aba0 <prvUnlockQueue+0x16>
 800abcc:	e000      	b.n	800abd0 <prvUnlockQueue+0x46>
					break;
 800abce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	22ff      	movs	r2, #255	; 0xff
 800abd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd8:	f001 fbb6 	bl	800c348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abdc:	f001 fba2 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe8:	e011      	b.n	800ac0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d012      	beq.n	800ac18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3310      	adds	r3, #16
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fcde 	bl	800b5b8 <xTaskRemoveFromEventList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac02:	f000 fd9d 	bl	800b740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dce9      	bgt.n	800abea <prvUnlockQueue+0x60>
 800ac16:	e000      	b.n	800ac1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 fb91 	bl	800c348 <vPortExitCritical>
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac36:	f001 fb75 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e001      	b.n	800ac4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac4c:	f001 fb7c 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac62:	f001 fb5f 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d102      	bne.n	800ac78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e001      	b.n	800ac7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac7c:	f001 fb64 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e014      	b.n	800acc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <vQueueAddToRegistry+0x50>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aca8:	490c      	ldr	r1, [pc, #48]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acb2:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <vQueueAddToRegistry+0x50>)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acbe:	e006      	b.n	800acce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b07      	cmp	r3, #7
 800acca:	d9e7      	bls.n	800ac9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	2001d284 	.word	0x2001d284

0800ace0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e016      	b.n	800ad1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800acee:	4a10      	ldr	r2, [pc, #64]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d10b      	bne.n	800ad16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acfe:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2100      	movs	r1, #0
 800ad04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <vQueueUnregisterQueue+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	4413      	add	r3, r2
 800ad10:	2200      	movs	r2, #0
 800ad12:	605a      	str	r2, [r3, #4]
				break;
 800ad14:	e006      	b.n	800ad24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b07      	cmp	r3, #7
 800ad20:	d9e5      	bls.n	800acee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	2001d284 	.word	0x2001d284

0800ad34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad44:	f001 faee 	bl	800c324 <vPortEnterCritical>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d103      	bne.n	800ad5e <vQueueWaitForMessageRestricted+0x2a>
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d103      	bne.n	800ad74 <vQueueWaitForMessageRestricted+0x40>
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad74:	f001 fae8 	bl	800c348 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d106      	bne.n	800ad8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	3324      	adds	r3, #36	; 0x24
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fbf1 	bl	800b570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f7ff fefb 	bl	800ab8a <prvUnlockQueue>
	}
 800ad94:	bf00      	nop
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <xTaskCreateStatic+0x1a>
 800adb0:	f001 fbea 	bl	800c588 <ulSetInterruptMask>
 800adb4:	e7fe      	b.n	800adb4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <xTaskCreateStatic+0x26>
 800adbc:	f001 fbe4 	bl	800c588 <ulSetInterruptMask>
 800adc0:	e7fe      	b.n	800adc0 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adc2:	23bc      	movs	r3, #188	; 0xbc
 800adc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2bbc      	cmp	r3, #188	; 0xbc
 800adca:	d002      	beq.n	800add2 <xTaskCreateStatic+0x36>
 800adcc:	f001 fbdc 	bl	800c588 <ulSetInterruptMask>
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01b      	beq.n	800ae18 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	f107 0318 	add.w	r3, r7, #24
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f850 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae10:	69f8      	ldr	r0, [r7, #28]
 800ae12:	f000 f8ed 	bl	800aff0 <prvAddNewTaskToReadyList>
 800ae16:	e001      	b.n	800ae1c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fc04 	bl	800c648 <pvPortMalloc>
 800ae40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae48:	20bc      	movs	r0, #188	; 0xbc
 800ae4a:	f001 fbfd 	bl	800c648 <pvPortMalloc>
 800ae4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae5c:	e005      	b.n	800ae6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f001 fca6 	bl	800c7b0 <vPortFree>
 800ae64:	e001      	b.n	800ae6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae78:	88fa      	ldrh	r2, [r7, #6]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80e 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f8ab 	bl	800aff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e002      	b.n	800aea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea6:	69bb      	ldr	r3, [r7, #24]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	21a5      	movs	r1, #165	; 0xa5
 800aeca:	f018 f9dc 	bl	8023286 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aed8:	3b01      	subs	r3, #1
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f023 0307 	bic.w	r3, r3, #7
 800aee6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <prvInitialiseNewTask+0x48>
 800aef2:	f001 fb49 	bl	800c588 <ulSetInterruptMask>
 800aef6:	e7fe      	b.n	800aef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d01f      	beq.n	800af3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e012      	b.n	800af2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	7819      	ldrb	r1, [r3, #0]
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	3334      	adds	r3, #52	; 0x34
 800af14:	460a      	mov	r2, r1
 800af16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d006      	beq.n	800af32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3301      	adds	r3, #1
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	d9e9      	bls.n	800af04 <prvInitialiseNewTask+0x54>
 800af30:	e000      	b.n	800af34 <prvInitialiseNewTask+0x84>
			{
				break;
 800af32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af3c:	e003      	b.n	800af46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	2b37      	cmp	r3, #55	; 0x37
 800af4a:	d901      	bls.n	800af50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af4c:	2337      	movs	r3, #55	; 0x37
 800af4e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	6a3a      	ldr	r2, [r7, #32]
 800af54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ffe0 	bl	8009f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe ffdb 	bl	8009f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2200      	movs	r2, #0
 800af98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	3354      	adds	r3, #84	; 0x54
 800afa0:	2260      	movs	r2, #96	; 0x60
 800afa2:	2100      	movs	r1, #0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f018 f96e 	bl	8023286 <memset>
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <prvInitialiseNewTask+0x134>)
 800afae:	659a      	str	r2, [r3, #88]	; 0x58
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	4a0d      	ldr	r2, [pc, #52]	; (800afe8 <prvInitialiseNewTask+0x138>)
 800afb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	4a0c      	ldr	r2, [pc, #48]	; (800afec <prvInitialiseNewTask+0x13c>)
 800afba:	661a      	str	r2, [r3, #96]	; 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	6938      	ldr	r0, [r7, #16]
 800afc6:	f001 fa09 	bl	800c3dc <pxPortInitialiseStack>
 800afca:	4602      	mov	r2, r0
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	0802628c 	.word	0x0802628c
 800afe8:	080262ac 	.word	0x080262ac
 800afec:	0802626c 	.word	0x0802626c

0800aff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f001 f994 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800affc:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b006:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b00e:	4a27      	ldr	r2, [pc, #156]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b014:	4b24      	ldr	r3, [pc, #144]	; (800b0a8 <prvAddNewTaskToReadyList+0xb8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d110      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b01c:	f000 fbac 	bl	800b778 <prvInitialiseTaskLists>
 800b020:	e00d      	b.n	800b03e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b022:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02a:	4b20      	ldr	r3, [pc, #128]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d802      	bhi.n	800b03e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b038:	4a1c      	ldr	r2, [pc, #112]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b03e:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a1b      	ldr	r2, [pc, #108]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b046:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b18      	ldr	r3, [pc, #96]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <prvAddNewTaskToReadyList+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a12      	ldr	r2, [pc, #72]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b072:	441a      	add	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe ff63 	bl	8009f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b080:	f001 f962 	bl	800c348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvAddNewTaskToReadyList+0xc0>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <prvAddNewTaskToReadyList+0xbc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d201      	bcs.n	800b09e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09a:	f001 f931 	bl	800c300 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	2001d798 	.word	0x2001d798
 800b0ac:	2001d2c4 	.word	0x2001d2c4
 800b0b0:	2001d7a4 	.word	0x2001d7a4
 800b0b4:	2001d7b4 	.word	0x2001d7b4
 800b0b8:	2001d7a0 	.word	0x2001d7a0
 800b0bc:	2001d2c8 	.word	0x2001d2c8

0800b0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00f      	beq.n	800b0f2 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0d2:	4b0c      	ldr	r3, [pc, #48]	; (800b104 <vTaskDelay+0x44>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <vTaskDelay+0x20>
 800b0da:	f001 fa55 	bl	800c588 <ulSetInterruptMask>
 800b0de:	e7fe      	b.n	800b0de <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800b0e0:	f000 f872 	bl	800b1c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd6a 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0ec:	f000 f87a 	bl	800b1e4 <xTaskResumeAll>
 800b0f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800b0f8:	f001 f902 	bl	800c300 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	2001d7c0 	.word	0x2001d7c0

0800b108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b116:	463a      	mov	r2, r7
 800b118:	1d39      	adds	r1, r7, #4
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe feb0 	bl	8009e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	9202      	str	r2, [sp, #8]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	2300      	movs	r3, #0
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	460a      	mov	r2, r1
 800b136:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <vTaskStartScheduler+0xa0>)
 800b138:	481c      	ldr	r0, [pc, #112]	; (800b1ac <vTaskStartScheduler+0xa4>)
 800b13a:	f7ff fe2f 	bl	800ad9c <xTaskCreateStatic>
 800b13e:	4603      	mov	r3, r0
 800b140:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <vTaskStartScheduler+0xa8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b14c:	2301      	movs	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	e001      	b.n	800b156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d102      	bne.n	800b162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b15c:	f000 fd84 	bl	800bc68 <xTimerCreateTimerTask>
 800b160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d113      	bne.n	800b190 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b168:	f001 fa0e 	bl	800c588 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b16c:	4b11      	ldr	r3, [pc, #68]	; (800b1b4 <vTaskStartScheduler+0xac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3354      	adds	r3, #84	; 0x54
 800b172:	4a11      	ldr	r2, [pc, #68]	; (800b1b8 <vTaskStartScheduler+0xb0>)
 800b174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <vTaskStartScheduler+0xb4>)
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <vTaskStartScheduler+0xb8>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <vTaskStartScheduler+0xbc>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b18a:	f001 f9b1 	bl	800c4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b18e:	e006      	b.n	800b19e <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d102      	bne.n	800b19e <vTaskStartScheduler+0x96>
 800b198:	f001 f9f6 	bl	800c588 <ulSetInterruptMask>
 800b19c:	e7fe      	b.n	800b19c <vTaskStartScheduler+0x94>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	08024204 	.word	0x08024204
 800b1ac:	0800b759 	.word	0x0800b759
 800b1b0:	2001d7bc 	.word	0x2001d7bc
 800b1b4:	2001d2c4 	.word	0x2001d2c4
 800b1b8:	20000094 	.word	0x20000094
 800b1bc:	2001d7b8 	.word	0x2001d7b8
 800b1c0:	2001d7a4 	.word	0x2001d7a4
 800b1c4:	2001d79c 	.word	0x2001d79c

0800b1c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1cc:	4b04      	ldr	r3, [pc, #16]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	4a03      	ldr	r2, [pc, #12]	; (800b1e0 <vTaskSuspendAll+0x18>)
 800b1d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1d6:	bf00      	nop
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	2001d7c0 	.word	0x2001d7c0

0800b1e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1f2:	4b3b      	ldr	r3, [pc, #236]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <xTaskResumeAll+0x1c>
 800b1fa:	f001 f9c5 	bl	800c588 <ulSetInterruptMask>
 800b1fe:	e7fe      	b.n	800b1fe <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b200:	f001 f890 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b204:	4b36      	ldr	r3, [pc, #216]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3b01      	subs	r3, #1
 800b20a:	4a35      	ldr	r2, [pc, #212]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b20c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20e:	4b34      	ldr	r3, [pc, #208]	; (800b2e0 <xTaskResumeAll+0xfc>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d15c      	bne.n	800b2d0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b216:	4b33      	ldr	r3, [pc, #204]	; (800b2e4 <xTaskResumeAll+0x100>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d058      	beq.n	800b2d0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21e:	e02f      	b.n	800b280 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3318      	adds	r3, #24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fee7 	bl	800a000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fee2 	bl	800a000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <xTaskResumeAll+0x108>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d903      	bls.n	800b250 <xTaskResumeAll+0x6c>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a27      	ldr	r2, [pc, #156]	; (800b2ec <xTaskResumeAll+0x108>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a24      	ldr	r2, [pc, #144]	; (800b2f0 <xTaskResumeAll+0x10c>)
 800b25e:	441a      	add	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fe fe6d 	bl	8009f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b270:	4b20      	ldr	r3, [pc, #128]	; (800b2f4 <xTaskResumeAll+0x110>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d302      	bcc.n	800b280 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800b27a:	4b1f      	ldr	r3, [pc, #124]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b280:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <xTaskResumeAll+0x104>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1cb      	bne.n	800b220 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b28e:	f000 fb0d 	bl	800b8ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b292:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <xTaskResumeAll+0x118>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d010      	beq.n	800b2c0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b29e:	f000 f83f 	bl	800b320 <xTaskIncrementTick>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f1      	bne.n	800b29e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <xTaskResumeAll+0x118>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <xTaskResumeAll+0x114>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2cc:	f001 f818 	bl	800c300 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d0:	f001 f83a 	bl	800c348 <vPortExitCritical>

	return xAlreadyYielded;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2001d7c0 	.word	0x2001d7c0
 800b2e4:	2001d798 	.word	0x2001d798
 800b2e8:	2001d758 	.word	0x2001d758
 800b2ec:	2001d7a0 	.word	0x2001d7a0
 800b2f0:	2001d2c8 	.word	0x2001d2c8
 800b2f4:	2001d2c4 	.word	0x2001d2c4
 800b2f8:	2001d7ac 	.word	0x2001d7ac
 800b2fc:	2001d7a8 	.word	0x2001d7a8

0800b300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <xTaskGetTickCount+0x1c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b30c:	687b      	ldr	r3, [r7, #4]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	2001d79c 	.word	0x2001d79c

0800b320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b32a:	4b4b      	ldr	r3, [pc, #300]	; (800b458 <xTaskIncrementTick+0x138>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f040 8087 	bne.w	800b442 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b334:	4b49      	ldr	r3, [pc, #292]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b33c:	4a47      	ldr	r2, [pc, #284]	; (800b45c <xTaskIncrementTick+0x13c>)
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d118      	bne.n	800b37a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <xTaskIncrementTick+0x140>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <xTaskIncrementTick+0x38>
 800b352:	f001 f919 	bl	800c588 <ulSetInterruptMask>
 800b356:	e7fe      	b.n	800b356 <xTaskIncrementTick+0x36>
 800b358:	4b41      	ldr	r3, [pc, #260]	; (800b460 <xTaskIncrementTick+0x140>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	4b41      	ldr	r3, [pc, #260]	; (800b464 <xTaskIncrementTick+0x144>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a3f      	ldr	r2, [pc, #252]	; (800b460 <xTaskIncrementTick+0x140>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4a3f      	ldr	r2, [pc, #252]	; (800b464 <xTaskIncrementTick+0x144>)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	4b3e      	ldr	r3, [pc, #248]	; (800b468 <xTaskIncrementTick+0x148>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a3d      	ldr	r2, [pc, #244]	; (800b468 <xTaskIncrementTick+0x148>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f000 fa99 	bl	800b8ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b37a:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d349      	bcc.n	800b418 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b384:	4b36      	ldr	r3, [pc, #216]	; (800b460 <xTaskIncrementTick+0x140>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d104      	bne.n	800b398 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b38e:	4b37      	ldr	r3, [pc, #220]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	601a      	str	r2, [r3, #0]
					break;
 800b396:	e03f      	b.n	800b418 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b398:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xTaskIncrementTick+0x140>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d203      	bcs.n	800b3b8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3b0:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <xTaskIncrementTick+0x14c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3b6:	e02f      	b.n	800b418 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fe1f 	bl	800a000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fe16 	bl	800a000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <xTaskIncrementTick+0xc8>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a22      	ldr	r2, [pc, #136]	; (800b470 <xTaskIncrementTick+0x150>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <xTaskIncrementTick+0x154>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fda1 	bl	8009f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <xTaskIncrementTick+0x158>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3b8      	bcc.n	800b384 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b416:	e7b5      	b.n	800b384 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b418:	4b17      	ldr	r3, [pc, #92]	; (800b478 <xTaskIncrementTick+0x158>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4915      	ldr	r1, [pc, #84]	; (800b474 <xTaskIncrementTick+0x154>)
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d901      	bls.n	800b434 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b434:	4b11      	ldr	r3, [pc, #68]	; (800b47c <xTaskIncrementTick+0x15c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e004      	b.n	800b44c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <xTaskIncrementTick+0x160>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	4a0d      	ldr	r2, [pc, #52]	; (800b480 <xTaskIncrementTick+0x160>)
 800b44a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b44c:	697b      	ldr	r3, [r7, #20]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	2001d7c0 	.word	0x2001d7c0
 800b45c:	2001d79c 	.word	0x2001d79c
 800b460:	2001d750 	.word	0x2001d750
 800b464:	2001d754 	.word	0x2001d754
 800b468:	2001d7b0 	.word	0x2001d7b0
 800b46c:	2001d7b8 	.word	0x2001d7b8
 800b470:	2001d7a0 	.word	0x2001d7a0
 800b474:	2001d2c8 	.word	0x2001d2c8
 800b478:	2001d2c4 	.word	0x2001d2c4
 800b47c:	2001d7ac 	.word	0x2001d7ac
 800b480:	2001d7a8 	.word	0x2001d7a8

0800b484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <vTaskSwitchContext+0x9c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b498:	e03e      	b.n	800b518 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b49a:	4b22      	ldr	r3, [pc, #136]	; (800b524 <vTaskSwitchContext+0xa0>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	607b      	str	r3, [r7, #4]
 800b4a6:	e008      	b.n	800b4ba <vTaskSwitchContext+0x36>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <vTaskSwitchContext+0x30>
 800b4ae:	f001 f86b 	bl	800c588 <ulSetInterruptMask>
 800b4b2:	e7fe      	b.n	800b4b2 <vTaskSwitchContext+0x2e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	491c      	ldr	r1, [pc, #112]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0ec      	beq.n	800b4a8 <vTaskSwitchContext+0x24>
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a14      	ldr	r2, [pc, #80]	; (800b52c <vTaskSwitchContext+0xa8>)
 800b4da:	4413      	add	r3, r2
 800b4dc:	603b      	str	r3, [r7, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d104      	bne.n	800b4fe <vTaskSwitchContext+0x7a>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	605a      	str	r2, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4a0a      	ldr	r2, [pc, #40]	; (800b530 <vTaskSwitchContext+0xac>)
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4a07      	ldr	r2, [pc, #28]	; (800b528 <vTaskSwitchContext+0xa4>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <vTaskSwitchContext+0xac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3354      	adds	r3, #84	; 0x54
 800b514:	4a07      	ldr	r2, [pc, #28]	; (800b534 <vTaskSwitchContext+0xb0>)
 800b516:	6013      	str	r3, [r2, #0]
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2001d7c0 	.word	0x2001d7c0
 800b524:	2001d7ac 	.word	0x2001d7ac
 800b528:	2001d7a0 	.word	0x2001d7a0
 800b52c:	2001d2c8 	.word	0x2001d2c8
 800b530:	2001d2c4 	.word	0x2001d2c4
 800b534:	20000094 	.word	0x20000094

0800b538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <vTaskPlaceOnEventList+0x16>
 800b548:	f001 f81e 	bl	800c588 <ulSetInterruptMask>
 800b54c:	e7fe      	b.n	800b54c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <vTaskPlaceOnEventList+0x34>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3318      	adds	r3, #24
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fe fd19 	bl	8009f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b55c:	2101      	movs	r1, #1
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f000 fb2e 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
}
 800b564:	bf00      	nop
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	2001d2c4 	.word	0x2001d2c4

0800b570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <vTaskPlaceOnEventListRestricted+0x18>
 800b582:	f001 f801 	bl	800c588 <ulSetInterruptMask>
 800b586:	e7fe      	b.n	800b586 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vTaskPlaceOnEventListRestricted+0x44>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3318      	adds	r3, #24
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7fe fcd8 	bl	8009f46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f000 fb0b 	bl	800bbc0 <prvAddCurrentTaskToDelayedList>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2001d2c4 	.word	0x2001d2c4

0800b5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <xTaskRemoveFromEventList+0x1c>
 800b5ce:	f000 ffdb 	bl	800c588 <ulSetInterruptMask>
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fd11 	bl	800a000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5de:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <xTaskRemoveFromEventList+0xa0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d11d      	bne.n	800b622 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fd08 	bl	800a000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b19      	ldr	r3, [pc, #100]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <xTaskRemoveFromEventList+0x4c>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a16      	ldr	r2, [pc, #88]	; (800b65c <xTaskRemoveFromEventList+0xa4>)
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4613      	mov	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <xTaskRemoveFromEventList+0xa8>)
 800b612:	441a      	add	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3304      	adds	r3, #4
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fc93 	bl	8009f46 <vListInsertEnd>
 800b620:	e005      	b.n	800b62e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3318      	adds	r3, #24
 800b626:	4619      	mov	r1, r3
 800b628:	480e      	ldr	r0, [pc, #56]	; (800b664 <xTaskRemoveFromEventList+0xac>)
 800b62a:	f7fe fc8c 	bl	8009f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <xTaskRemoveFromEventList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d905      	bls.n	800b648 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <xTaskRemoveFromEventList+0xb4>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	e001      	b.n	800b64c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800b648:	2300      	movs	r3, #0
 800b64a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b64c:	68fb      	ldr	r3, [r7, #12]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2001d7c0 	.word	0x2001d7c0
 800b65c:	2001d7a0 	.word	0x2001d7a0
 800b660:	2001d2c8 	.word	0x2001d2c8
 800b664:	2001d758 	.word	0x2001d758
 800b668:	2001d2c4 	.word	0x2001d2c4
 800b66c:	2001d7ac 	.word	0x2001d7ac

0800b670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b678:	4b06      	ldr	r3, [pc, #24]	; (800b694 <vTaskInternalSetTimeOutState+0x24>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <vTaskInternalSetTimeOutState+0x28>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	605a      	str	r2, [r3, #4]
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	2001d7b0 	.word	0x2001d7b0
 800b698:	2001d79c 	.word	0x2001d79c

0800b69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xTaskCheckForTimeOut+0x16>
 800b6ac:	f000 ff6c 	bl	800c588 <ulSetInterruptMask>
 800b6b0:	e7fe      	b.n	800b6b0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xTaskCheckForTimeOut+0x22>
 800b6b8:	f000 ff66 	bl	800c588 <ulSetInterruptMask>
 800b6bc:	e7fe      	b.n	800b6bc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800b6be:	f000 fe31 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <xTaskCheckForTimeOut+0x9c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	e023      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b15      	ldr	r3, [pc, #84]	; (800b73c <xTaskCheckForTimeOut+0xa0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d007      	beq.n	800b6fe <xTaskCheckForTimeOut+0x62>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	e015      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ffab 	bl	800b670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	e004      	b.n	800b72a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 fe0d 	bl	800c348 <vPortExitCritical>

	return xReturn;
 800b72e:	697b      	ldr	r3, [r7, #20]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	2001d79c 	.word	0x2001d79c
 800b73c:	2001d7b0 	.word	0x2001d7b0

0800b740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b744:	4b03      	ldr	r3, [pc, #12]	; (800b754 <vTaskMissedYield+0x14>)
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	2001d7ac 	.word	0x2001d7ac

0800b758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b760:	f000 f84a 	bl	800b7f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b764:	4b03      	ldr	r3, [pc, #12]	; (800b774 <prvIdleTask+0x1c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d9f9      	bls.n	800b760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b76c:	f000 fdc8 	bl	800c300 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b770:	e7f6      	b.n	800b760 <prvIdleTask+0x8>
 800b772:	bf00      	nop
 800b774:	2001d2c8 	.word	0x2001d2c8

0800b778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b77e:	2300      	movs	r3, #0
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	e00c      	b.n	800b79e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4613      	mov	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <prvInitialiseTaskLists+0x60>)
 800b790:	4413      	add	r3, r2
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fbaa 	bl	8009eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3301      	adds	r3, #1
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b37      	cmp	r3, #55	; 0x37
 800b7a2:	d9ef      	bls.n	800b784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7a4:	480d      	ldr	r0, [pc, #52]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7a6:	f7fe fba1 	bl	8009eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7aa:	480d      	ldr	r0, [pc, #52]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7ac:	f7fe fb9e 	bl	8009eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7b0:	480c      	ldr	r0, [pc, #48]	; (800b7e4 <prvInitialiseTaskLists+0x6c>)
 800b7b2:	f7fe fb9b 	bl	8009eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7b6:	480c      	ldr	r0, [pc, #48]	; (800b7e8 <prvInitialiseTaskLists+0x70>)
 800b7b8:	f7fe fb98 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7bc:	480b      	ldr	r0, [pc, #44]	; (800b7ec <prvInitialiseTaskLists+0x74>)
 800b7be:	f7fe fb95 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <prvInitialiseTaskLists+0x78>)
 800b7c4:	4a05      	ldr	r2, [pc, #20]	; (800b7dc <prvInitialiseTaskLists+0x64>)
 800b7c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <prvInitialiseTaskLists+0x7c>)
 800b7ca:	4a05      	ldr	r2, [pc, #20]	; (800b7e0 <prvInitialiseTaskLists+0x68>)
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	2001d2c8 	.word	0x2001d2c8
 800b7dc:	2001d728 	.word	0x2001d728
 800b7e0:	2001d73c 	.word	0x2001d73c
 800b7e4:	2001d758 	.word	0x2001d758
 800b7e8:	2001d76c 	.word	0x2001d76c
 800b7ec:	2001d784 	.word	0x2001d784
 800b7f0:	2001d750 	.word	0x2001d750
 800b7f4:	2001d754 	.word	0x2001d754

0800b7f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7fe:	e019      	b.n	800b834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b800:	f000 fd90 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b804:	4b10      	ldr	r3, [pc, #64]	; (800b848 <prvCheckTasksWaitingTermination+0x50>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe fbf5 	bl	800a000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <prvCheckTasksWaitingTermination+0x54>)
 800b81e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3b01      	subs	r3, #1
 800b826:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b82a:	f000 fd8d 	bl	800c348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f810 	bl	800b854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <prvCheckTasksWaitingTermination+0x58>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e1      	bne.n	800b800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	2001d76c 	.word	0x2001d76c
 800b84c:	2001d798 	.word	0x2001d798
 800b850:	2001d780 	.word	0x2001d780

0800b854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3354      	adds	r3, #84	; 0x54
 800b860:	4618      	mov	r0, r3
 800b862:	f018 f8f7 	bl	8023a54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d108      	bne.n	800b882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ff9b 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 ff98 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b880:	e010      	b.n	800b8a4 <prvDeleteTCB+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d103      	bne.n	800b894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 ff8f 	bl	800c7b0 <vPortFree>
	}
 800b892:	e007      	b.n	800b8a4 <prvDeleteTCB+0x50>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d002      	beq.n	800b8a4 <prvDeleteTCB+0x50>
 800b89e:	f000 fe73 	bl	800c588 <ulSetInterruptMask>
 800b8a2:	e7fe      	b.n	800b8a2 <prvDeleteTCB+0x4e>
	}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8be:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8c4:	e008      	b.n	800b8d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c6:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <prvResetNextTaskUnblockTime+0x38>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8d6:	6013      	str	r3, [r2, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	2001d750 	.word	0x2001d750
 800b8e8:	2001d7b8 	.word	0x2001d7b8

0800b8ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8f2:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <xTaskGetSchedulerState+0x34>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	e008      	b.n	800b912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b900:	4b08      	ldr	r3, [pc, #32]	; (800b924 <xTaskGetSchedulerState+0x38>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b908:	2302      	movs	r3, #2
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e001      	b.n	800b912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b912:	687b      	ldr	r3, [r7, #4]
	}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	2001d7a4 	.word	0x2001d7a4
 800b924:	2001d7c0 	.word	0x2001d7c0

0800b928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d051      	beq.n	800b9e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	429a      	cmp	r2, r3
 800b94a:	d241      	bcs.n	800b9d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	db06      	blt.n	800b962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6959      	ldr	r1, [r3, #20]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b974:	4413      	add	r3, r2
 800b976:	4299      	cmp	r1, r3
 800b978:	d122      	bne.n	800b9c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fb3e 	bl	800a000 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b984:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	4b18      	ldr	r3, [pc, #96]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	d903      	bls.n	800b9a2 <xTaskPriorityInherit+0x7a>
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <xTaskPriorityInherit+0xcc>)
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <xTaskPriorityInherit+0xc8>)
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fe fac4 	bl	8009f46 <vListInsertEnd>
 800b9be:	e004      	b.n	800b9ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e008      	b.n	800b9e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <xTaskPriorityInherit+0xc4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d201      	bcs.n	800b9e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2001d2c4 	.word	0x2001d2c4
 800b9f0:	2001d2c8 	.word	0x2001d2c8
 800b9f4:	2001d7a0 	.word	0x2001d7a0

0800b9f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d046      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <xTaskPriorityDisinherit+0xb0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d002      	beq.n	800ba1e <xTaskPriorityDisinherit+0x26>
 800ba18:	f000 fdb6 	bl	800c588 <ulSetInterruptMask>
 800ba1c:	e7fe      	b.n	800ba1c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d102      	bne.n	800ba2c <xTaskPriorityDisinherit+0x34>
 800ba26:	f000 fdaf 	bl	800c588 <ulSetInterruptMask>
 800ba2a:	e7fe      	b.n	800ba2a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d02c      	beq.n	800ba9c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fad6 	bl	800a000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4b0f      	ldr	r3, [pc, #60]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d903      	bls.n	800ba7c <xTaskPriorityDisinherit+0x84>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a0c      	ldr	r2, [pc, #48]	; (800baac <xTaskPriorityDisinherit+0xb4>)
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <xTaskPriorityDisinherit+0xb8>)
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fa57 	bl	8009f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	2001d2c4 	.word	0x2001d2c4
 800baac:	2001d7a0 	.word	0x2001d7a0
 800bab0:	2001d2c8 	.word	0x2001d2c8

0800bab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d05a      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <vTaskPriorityDisinheritAfterTimeout+0x26>
 800bad4:	f000 fd58 	bl	800c588 <ulSetInterruptMask>
 800bad8:	e7fe      	b.n	800bad8 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d902      	bls.n	800baea <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e002      	b.n	800baf0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baee:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d043      	beq.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d13e      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb04:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d102      	bne.n	800bb14 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800bb0e:	f000 fd3b 	bl	800c588 <ulSetInterruptMask>
 800bb12:	e7fe      	b.n	800bb12 <vTaskPriorityDisinheritAfterTimeout+0x5e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db04      	blt.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6959      	ldr	r1, [r3, #20]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4a13      	ldr	r2, [pc, #76]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb42:	4413      	add	r3, r2
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d11c      	bne.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe fa57 	bl	800a000 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d903      	bls.n	800bb66 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	4a0c      	ldr	r2, [pc, #48]	; (800bb94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a07      	ldr	r2, [pc, #28]	; (800bb90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bb74:	441a      	add	r2, r3
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe f9e2 	bl	8009f46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb82:	bf00      	nop
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2001d2c4 	.word	0x2001d2c4
 800bb90:	2001d2c8 	.word	0x2001d2c8
 800bb94:	2001d7a0 	.word	0x2001d7a0

0800bb98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb9c:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbaa:	3201      	adds	r2, #1
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbae:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	2001d2c4 	.word	0x2001d2c4

0800bbc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbca:	4b21      	ldr	r3, [pc, #132]	; (800bc50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd0:	4b20      	ldr	r3, [pc, #128]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fa12 	bl	800a000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d10a      	bne.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4819      	ldr	r0, [pc, #100]	; (800bc58 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbf4:	f7fe f9a7 	bl	8009f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbf8:	e026      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc02:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d209      	bcs.n	800bc26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fe f9b5 	bl	8009f8e <vListInsert>
}
 800bc24:	e010      	b.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7fe f9ab 	bl	8009f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d202      	bcs.n	800bc48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc42:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6013      	str	r3, [r2, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2001d79c 	.word	0x2001d79c
 800bc54:	2001d2c4 	.word	0x2001d2c4
 800bc58:	2001d784 	.word	0x2001d784
 800bc5c:	2001d754 	.word	0x2001d754
 800bc60:	2001d750 	.word	0x2001d750
 800bc64:	2001d7b8 	.word	0x2001d7b8

0800bc68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc72:	f000 fac7 	bl	800c204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <xTimerCreateTimerTask+0x70>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d020      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc86:	463a      	mov	r2, r7
 800bc88:	1d39      	adds	r1, r7, #4
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe f912 	bl	8009eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	9202      	str	r2, [sp, #8]
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	2302      	movs	r3, #2
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	460a      	mov	r2, r1
 800bca6:	490d      	ldr	r1, [pc, #52]	; (800bcdc <xTimerCreateTimerTask+0x74>)
 800bca8:	480d      	ldr	r0, [pc, #52]	; (800bce0 <xTimerCreateTimerTask+0x78>)
 800bcaa:	f7ff f877 	bl	800ad9c <xTaskCreateStatic>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <xTimerCreateTimerTask+0x7c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xTimerCreateTimerTask+0x64>
 800bcc6:	f000 fc5f 	bl	800c588 <ulSetInterruptMask>
 800bcca:	e7fe      	b.n	800bcca <xTimerCreateTimerTask+0x62>
	return xReturn;
 800bccc:	68fb      	ldr	r3, [r7, #12]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	2001d7f4 	.word	0x2001d7f4
 800bcdc:	0802420c 	.word	0x0802420c
 800bce0:	0800bdfd 	.word	0x0800bdfd
 800bce4:	2001d7f8 	.word	0x2001d7f8

0800bce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	; 0x28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d102      	bne.n	800bd06 <xTimerGenericCommand+0x1e>
 800bd00:	f000 fc42 	bl	800c588 <ulSetInterruptMask>
 800bd04:	e7fe      	b.n	800bd04 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd06:	4b1a      	ldr	r3, [pc, #104]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d02a      	beq.n	800bd64 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b05      	cmp	r3, #5
 800bd1e:	dc18      	bgt.n	800bd52 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd20:	f7ff fde4 	bl	800b8ec <xTaskGetSchedulerState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d109      	bne.n	800bd3e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd2a:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	f107 0114 	add.w	r1, r7, #20
 800bd32:	2300      	movs	r3, #0
 800bd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd36:	f7fe fad4 	bl	800a2e2 <xQueueGenericSend>
 800bd3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd3c:	e012      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f107 0114 	add.w	r1, r7, #20
 800bd46:	2300      	movs	r3, #0
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f7fe faca 	bl	800a2e2 <xQueueGenericSend>
 800bd4e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd50:	e008      	b.n	800bd64 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <xTimerGenericCommand+0x88>)
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	f107 0114 	add.w	r1, r7, #20
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	f7fe fb89 	bl	800a474 <xQueueGenericSendFromISR>
 800bd62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3728      	adds	r7, #40	; 0x28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	2001d7f4 	.word	0x2001d7f4

0800bd74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7e:	4b1e      	ldr	r3, [pc, #120]	; (800bdf8 <prvProcessExpiredTimer+0x84>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe f937 	bl	800a000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d01a      	beq.n	800bdd6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f8c1 	bl	800bf34 <prvInsertTimerInActiveList>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d017      	beq.n	800bde8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff ff90 	bl	800bce8 <xTimerGenericCommand>
 800bdc8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <prvProcessExpiredTimer+0x74>
 800bdd0:	f000 fbda 	bl	800c588 <ulSetInterruptMask>
 800bdd4:	e7fe      	b.n	800bdd4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	4798      	blx	r3
}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	2001d7ec 	.word	0x2001d7ec

0800bdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f84f 	bl	800beac <prvGetNextExpireTime>
 800be0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f803 	bl	800be20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1a:	f000 f8cd 	bl	800bfb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1e:	e7f1      	b.n	800be04 <prvTimerTask+0x8>

0800be20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2a:	f7ff f9cd 	bl	800b1c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f85e 	bl	800bef4 <prvSampleTimeNow>
 800be38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12a      	bne.n	800be96 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d806      	bhi.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be4e:	f7ff f9c9 	bl	800b1e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff8d 	bl	800bd74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5a:	e01e      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <prvProcessTimerOrBlockTask+0x84>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <prvProcessTimerOrBlockTask+0x50>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <prvProcessTimerOrBlockTask+0x52>
 800be70:	2300      	movs	r3, #0
 800be72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <prvProcessTimerOrBlockTask+0x88>)
 800be76:	6818      	ldr	r0, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe ff57 	bl	800ad34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be86:	f7ff f9ad 	bl	800b1e4 <xTaskResumeAll>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800be90:	f000 fa36 	bl	800c300 <vPortYield>
}
 800be94:	e001      	b.n	800be9a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800be96:	f7ff f9a5 	bl	800b1e4 <xTaskResumeAll>
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2001d7f0 	.word	0x2001d7f0
 800bea8:	2001d7f4 	.word	0x2001d7f4

0800beac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <prvGetNextExpireTime+0x16>
 800bebe:	2201      	movs	r2, #1
 800bec0:	e000      	b.n	800bec4 <prvGetNextExpireTime+0x18>
 800bec2:	2200      	movs	r2, #0
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvGetNextExpireTime+0x44>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e001      	b.n	800bee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bee0:	68fb      	ldr	r3, [r7, #12]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	2001d7ec 	.word	0x2001d7ec

0800bef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800befc:	f7ff fa00 	bl	800b300 <xTaskGetTickCount>
 800bf00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d205      	bcs.n	800bf18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf0c:	f000 f91e 	bl	800c14c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf1e:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <prvSampleTimeNow+0x3c>)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf24:	68fb      	ldr	r3, [r7, #12]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	2001d7fc 	.word	0x2001d7fc

0800bf34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d812      	bhi.n	800bf80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d302      	bcc.n	800bf6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e01b      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <prvInsertTimerInActiveList+0x7c>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe f808 	bl	8009f8e <vListInsert>
 800bf7e:	e012      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d206      	bcs.n	800bf96 <prvInsertTimerInActiveList+0x62>
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d302      	bcc.n	800bf96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e007      	b.n	800bfa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <prvInsertTimerInActiveList+0x80>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f7fd fff4 	bl	8009f8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	2001d7f0 	.word	0x2001d7f0
 800bfb4:	2001d7ec 	.word	0x2001d7ec

0800bfb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08c      	sub	sp, #48	; 0x30
 800bfbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfbe:	e0b2      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da11      	bge.n	800bfea <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfc6:	f107 0308 	add.w	r3, r7, #8
 800bfca:	3304      	adds	r3, #4
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <prvProcessReceivedCommands+0x22>
 800bfd4:	f000 fad8 	bl	800c588 <ulSetInterruptMask>
 800bfd8:	e7fe      	b.n	800bfd8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe0:	6850      	ldr	r0, [r2, #4]
 800bfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe4:	6892      	ldr	r2, [r2, #8]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f2c0 8099 	blt.w	800c124 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d004      	beq.n	800c008 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	3304      	adds	r3, #4
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fffc 	bl	800a000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c008:	1d3b      	adds	r3, r7, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff ff72 	bl	800bef4 <prvSampleTimeNow>
 800c010:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b09      	cmp	r3, #9
 800c016:	f200 8086 	bhi.w	800c126 <prvProcessReceivedCommands+0x16e>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <prvProcessReceivedCommands+0x68>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c0ad 	.word	0x0800c0ad
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0fb 	.word	0x0800c0fb
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c049 	.word	0x0800c049
 800c040:	0800c0ad 	.word	0x0800c0ad
 800c044:	0800c0c1 	.word	0x0800c0c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	b2da      	uxtb	r2, r3
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	18d1      	adds	r1, r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	6a38      	ldr	r0, [r7, #32]
 800c068:	f7ff ff64 	bl	800bf34 <prvInsertTimerInActiveList>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d059      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	6a38      	ldr	r0, [r7, #32]
 800c078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d04e      	beq.n	800c126 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	441a      	add	r2, r3
 800c090:	2300      	movs	r3, #0
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2300      	movs	r3, #0
 800c096:	2100      	movs	r1, #0
 800c098:	6a38      	ldr	r0, [r7, #32]
 800c09a:	f7ff fe25 	bl	800bce8 <xTimerGenericCommand>
 800c09e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d13f      	bne.n	800c126 <prvProcessReceivedCommands+0x16e>
 800c0a6:	f000 fa6f 	bl	800c588 <ulSetInterruptMask>
 800c0aa:	e7fe      	b.n	800c0aa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b2:	f023 0301 	bic.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0be:	e032      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c6:	f043 0301 	orr.w	r3, r3, #1
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <prvProcessReceivedCommands+0x12e>
 800c0e0:	f000 fa52 	bl	800c588 <ulSetInterruptMask>
 800c0e4:	e7fe      	b.n	800c0e4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	699a      	ldr	r2, [r3, #24]
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	6a38      	ldr	r0, [r7, #32]
 800c0f4:	f7ff ff1e 	bl	800bf34 <prvInsertTimerInActiveList>
					break;
 800c0f8:	e015      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800c108:	6a38      	ldr	r0, [r7, #32]
 800c10a:	f000 fb51 	bl	800c7b0 <vPortFree>
 800c10e:	e00a      	b.n	800c126 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c116:	f023 0301 	bic.w	r3, r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c122:	e000      	b.n	800c126 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c124:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <prvProcessReceivedCommands+0x190>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f107 0108 	add.w	r1, r7, #8
 800c12e:	2200      	movs	r2, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe fa73 	bl	800a61c <xQueueReceive>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f af41 	bne.w	800bfc0 <prvProcessReceivedCommands+0x8>
	}
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	3728      	adds	r7, #40	; 0x28
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	2001d7f4 	.word	0x2001d7f4

0800c14c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c152:	e040      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c154:	4b29      	ldr	r3, [pc, #164]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15e:	4b27      	ldr	r3, [pc, #156]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd ff47 	bl	800a000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c180:	f003 0304 	and.w	r3, r3, #4
 800c184:	2b00      	cmp	r3, #0
 800c186:	d026      	beq.n	800c1d6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	429a      	cmp	r2, r3
 800c198:	d90e      	bls.n	800c1b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fd feec 	bl	8009f8e <vListInsert>
 800c1b6:	e00e      	b.n	800c1d6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff fd90 	bl	800bce8 <xTimerGenericCommand>
 800c1c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <prvSwitchTimerLists+0x8a>
 800c1d0:	f000 f9da 	bl	800c588 <ulSetInterruptMask>
 800c1d4:	e7fe      	b.n	800c1d4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d6:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1b9      	bne.n	800c154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <prvSwitchTimerLists+0xb0>)
 800c1ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1ee:	4a04      	ldr	r2, [pc, #16]	; (800c200 <prvSwitchTimerLists+0xb4>)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	6013      	str	r3, [r2, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2001d7ec 	.word	0x2001d7ec
 800c200:	2001d7f0 	.word	0x2001d7f0

0800c204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c20a:	f000 f88b 	bl	800c324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c20e:	4b15      	ldr	r3, [pc, #84]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d120      	bne.n	800c258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c216:	4814      	ldr	r0, [pc, #80]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c218:	f7fd fe68 	bl	8009eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c21c:	4813      	ldr	r0, [pc, #76]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c21e:	f7fd fe65 	bl	8009eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c222:	4b13      	ldr	r3, [pc, #76]	; (800c270 <prvCheckForValidListAndQueue+0x6c>)
 800c224:	4a10      	ldr	r2, [pc, #64]	; (800c268 <prvCheckForValidListAndQueue+0x64>)
 800c226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c228:	4b12      	ldr	r3, [pc, #72]	; (800c274 <prvCheckForValidListAndQueue+0x70>)
 800c22a:	4a10      	ldr	r2, [pc, #64]	; (800c26c <prvCheckForValidListAndQueue+0x68>)
 800c22c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c22e:	2300      	movs	r3, #0
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	4b11      	ldr	r3, [pc, #68]	; (800c278 <prvCheckForValidListAndQueue+0x74>)
 800c234:	4a11      	ldr	r2, [pc, #68]	; (800c27c <prvCheckForValidListAndQueue+0x78>)
 800c236:	2110      	movs	r1, #16
 800c238:	200a      	movs	r0, #10
 800c23a:	f7fd ff63 	bl	800a104 <xQueueGenericCreateStatic>
 800c23e:	4603      	mov	r3, r0
 800c240:	4a08      	ldr	r2, [pc, #32]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c244:	4b07      	ldr	r3, [pc, #28]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <prvCheckForValidListAndQueue+0x60>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	490b      	ldr	r1, [pc, #44]	; (800c280 <prvCheckForValidListAndQueue+0x7c>)
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fd1a 	bl	800ac8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c258:	f000 f876 	bl	800c348 <vPortExitCritical>
}
 800c25c:	bf00      	nop
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	2001d7f4 	.word	0x2001d7f4
 800c268:	2001d7c4 	.word	0x2001d7c4
 800c26c:	2001d7d8 	.word	0x2001d7d8
 800c270:	2001d7ec 	.word	0x2001d7ec
 800c274:	2001d7f0 	.word	0x2001d7f0
 800c278:	2001d8a0 	.word	0x2001d8a0
 800c27c:	2001d800 	.word	0x2001d800
 800c280:	08024214 	.word	0x08024214

0800c284 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <vPortSetupTimerInterrupt+0x38>)
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <vPortSetupTimerInterrupt+0x3c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0a      	ldr	r2, [pc, #40]	; (800c2c4 <vPortSetupTimerInterrupt+0x40>)
 800c29a:	fba2 2303 	umull	r2, r3, r2, r3
 800c29e:	099b      	lsrs	r3, r3, #6
 800c2a0:	4a09      	ldr	r2, [pc, #36]	; (800c2c8 <vPortSetupTimerInterrupt+0x44>)
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c2a6:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <vPortSetupTimerInterrupt+0x34>)
 800c2a8:	2207      	movs	r2, #7
 800c2aa:	601a      	str	r2, [r3, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	e000e010 	.word	0xe000e010
 800c2bc:	e000e018 	.word	0xe000e018
 800c2c0:	20000004 	.word	0x20000004
 800c2c4:	10624dd3 	.word	0x10624dd3
 800c2c8:	e000e014 	.word	0xe000e014

0800c2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <prvTaskExitError+0x30>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d002      	beq.n	800c2e6 <prvTaskExitError+0x1a>
 800c2e0:	f000 f952 	bl	800c588 <ulSetInterruptMask>
 800c2e4:	e7fe      	b.n	800c2e4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800c2e6:	f000 f94f 	bl	800c588 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800c2ea:	bf00      	nop
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0fc      	beq.n	800c2ec <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20000010 	.word	0x20000010

0800c300 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c304:	4b06      	ldr	r3, [pc, #24]	; (800c320 <vPortYield+0x20>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c30c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c310:	f3bf 8f6f 	isb	sy
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c328:	f000 f92e 	bl	800c588 <ulSetInterruptMask>
	ulCriticalNesting++;
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <vPortEnterCritical+0x20>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3301      	adds	r3, #1
 800c332:	4a04      	ldr	r2, [pc, #16]	; (800c344 <vPortEnterCritical+0x20>)
 800c334:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c336:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c33a:	f3bf 8f6f 	isb	sy
}
 800c33e:	bf00      	nop
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000010 	.word	0x20000010

0800c348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortExitCritical+0x30>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <vPortExitCritical+0x12>
 800c354:	f000 f918 	bl	800c588 <ulSetInterruptMask>
 800c358:	e7fe      	b.n	800c358 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800c35a:	4b07      	ldr	r3, [pc, #28]	; (800c378 <vPortExitCritical+0x30>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	4a05      	ldr	r2, [pc, #20]	; (800c378 <vPortExitCritical+0x30>)
 800c362:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <vPortExitCritical+0x30>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800c36c:	2000      	movs	r0, #0
 800c36e:	f000 f918 	bl	800c5a2 <vClearInterruptMask>
	}
}
 800c372:	bf00      	nop
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000010 	.word	0x20000010

0800c37c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c382:	f000 f901 	bl	800c588 <ulSetInterruptMask>
 800c386:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c388:	f7fe ffca 	bl	800b320 <xTaskIncrementTick>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <xPortSysTickHandler+0x2c>)
 800c394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c398:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f901 	bl	800c5a2 <vClearInterruptMask>
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed04 	.word	0xe000ed04

0800c3ac <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b02      	subs	r3, #2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d102      	bne.n	800c3ce <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800c3c8:	f000 f8b2 	bl	800c530 <vRestoreContextOfFirstTask>
		}
		break;
 800c3cc:	e002      	b.n	800c3d4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800c3ce:	f000 f8db 	bl	800c588 <ulSetInterruptMask>
 800c3d2:	e7fe      	b.n	800c3d2 <vPortSVCHandler_C+0x26>
		}
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3b04      	subs	r3, #4
 800c3fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3b04      	subs	r3, #4
 800c408:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c40a:	4a38      	ldr	r2, [pc, #224]	; (800c4ec <pxPortInitialiseStack+0x110>)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3b04      	subs	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800c41c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3b04      	subs	r3, #4
 800c422:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800c42a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3b04      	subs	r3, #4
 800c430:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800c438:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800c446:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3b04      	subs	r3, #4
 800c44c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3b04      	subs	r3, #4
 800c458:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800c460:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3b04      	subs	r3, #4
 800c466:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800c46e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3b04      	subs	r3, #4
 800c474:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800c47c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800c48a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3b04      	subs	r3, #4
 800c490:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800c498:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800c4a6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800c4b4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800c4c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3b04      	subs	r3, #4
 800c4c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800c4d0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	0800c2cd 	.word	0x0800c2cd

0800c4f0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <xPortStartScheduler+0x38>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a0b      	ldr	r2, [pc, #44]	; (800c528 <xPortStartScheduler+0x38>)
 800c4fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4fe:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c500:	4b09      	ldr	r3, [pc, #36]	; (800c528 <xPortStartScheduler+0x38>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <xPortStartScheduler+0x38>)
 800c506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c50a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800c50c:	f7ff feba 	bl	800c284 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800c510:	4b06      	ldr	r3, [pc, #24]	; (800c52c <xPortStartScheduler+0x3c>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800c516:	f000 f823 	bl	800c560 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800c51a:	f7fe ffb3 	bl	800b484 <vTaskSwitchContext>
	prvTaskExitError();
 800c51e:	f7ff fed5 	bl	800c2cc <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	bd80      	pop	{r7, pc}
 800c528:	e000ed20 	.word	0xe000ed20
 800c52c:	20000010 	.word	0x20000010

0800c530 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <pxCurrentTCBConst2>)
 800c532:	6811      	ldr	r1, [r2, #0]
 800c534:	6808      	ldr	r0, [r1, #0]
 800c536:	c806      	ldmia	r0!, {r1, r2}
 800c538:	f381 880b 	msr	PSPLIM, r1
 800c53c:	2102      	movs	r1, #2
 800c53e:	f381 8814 	msr	CONTROL, r1
 800c542:	3020      	adds	r0, #32
 800c544:	f380 8809 	msr	PSP, r0
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	4710      	bx	r2
 800c54e:	bf00      	nop

0800c550 <pxCurrentTCBConst2>:
 800c550:	2001d2c4 	.word	0x2001d2c4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
	...

0800c560 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c560:	4807      	ldr	r0, [pc, #28]	; (800c580 <xVTORConst>)
 800c562:	6800      	ldr	r0, [r0, #0]
 800c564:	6800      	ldr	r0, [r0, #0]
 800c566:	f380 8808 	msr	MSP, r0
 800c56a:	b662      	cpsie	i
 800c56c:	b661      	cpsie	f
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	df02      	svc	2
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	f3af 8000 	nop.w

0800c580 <xVTORConst>:
 800c580:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c588:	f3ef 8011 	mrs	r0, BASEPRI
 800c58c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800c590:	f381 8811 	msr	BASEPRI, r1
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c59e:	bf00      	nop
 800c5a0:	4618      	mov	r0, r3

0800c5a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5a2:	f380 8811 	msr	BASEPRI, r0
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800c5b0:	bf00      	nop
	...

0800c5c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c5c0:	f3ef 8009 	mrs	r0, PSP
 800c5c4:	f3ef 820b 	mrs	r2, PSPLIM
 800c5c8:	4673      	mov	r3, lr
 800c5ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <pxCurrentTCBConst>)
 800c5d0:	6811      	ldr	r1, [r2, #0]
 800c5d2:	6008      	str	r0, [r1, #0]
 800c5d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f7fe ff4e 	bl	800b484 <vTaskSwitchContext>
 800c5e8:	f04f 0000 	mov.w	r0, #0
 800c5ec:	f380 8811 	msr	BASEPRI, r0
 800c5f0:	4a07      	ldr	r2, [pc, #28]	; (800c610 <pxCurrentTCBConst>)
 800c5f2:	6811      	ldr	r1, [r2, #0]
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800c5fa:	f382 880b 	msr	PSPLIM, r2
 800c5fe:	f380 8809 	msr	PSP, r0
 800c602:	4718      	bx	r3
 800c604:	f3af 8000 	nop.w
 800c608:	f3af 8000 	nop.w
 800c60c:	f3af 8000 	nop.w

0800c610 <pxCurrentTCBConst>:
 800c610:	2001d2c4 	.word	0x2001d2c4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
	...

0800c620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800c620:	f01e 0f04 	tst.w	lr, #4
 800c624:	bf0c      	ite	eq
 800c626:	f3ef 8008 	mrseq	r0, MSP
 800c62a:	f3ef 8009 	mrsne	r0, PSP
 800c62e:	4904      	ldr	r1, [pc, #16]	; (800c640 <svchandler_address_const>)
 800c630:	4708      	bx	r1
 800c632:	bf00      	nop
 800c634:	f3af 8000 	nop.w
 800c638:	f3af 8000 	nop.w
 800c63c:	f3af 8000 	nop.w

0800c640 <svchandler_address_const>:
 800c640:	0800c3ad 	.word	0x0800c3ad
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c654:	f7fe fdb8 	bl	800b1c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c658:	4b4f      	ldr	r3, [pc, #316]	; (800c798 <pvPortMalloc+0x150>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c660:	f000 f8f8 	bl	800c854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c664:	4b4d      	ldr	r3, [pc, #308]	; (800c79c <pvPortMalloc+0x154>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8083 	bne.w	800c778 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d015      	beq.n	800c6a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c678:	2208      	movs	r2, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <pvPortMalloc+0x5c>
 800c69e:	f7ff ff73 	bl	800c588 <ulSetInterruptMask>
 800c6a2:	e7fe      	b.n	800c6a2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d066      	beq.n	800c778 <pvPortMalloc+0x130>
 800c6aa:	4b3d      	ldr	r3, [pc, #244]	; (800c7a0 <pvPortMalloc+0x158>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d861      	bhi.n	800c778 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6b4:	4b3b      	ldr	r3, [pc, #236]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c6b8:	4b3a      	ldr	r3, [pc, #232]	; (800c7a4 <pvPortMalloc+0x15c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6be:	e004      	b.n	800c6ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d903      	bls.n	800c6dc <pvPortMalloc+0x94>
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1f1      	bne.n	800c6c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6dc:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <pvPortMalloc+0x150>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d048      	beq.n	800c778 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	4413      	add	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	2308      	movs	r3, #8
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	429a      	cmp	r2, r3
 800c706:	d917      	bls.n	800c738 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <pvPortMalloc+0xd8>
 800c71a:	f7ff ff35 	bl	800c588 <ulSetInterruptMask>
 800c71e:	e7fe      	b.n	800c71e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	1ad2      	subs	r2, r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	f000 f8f0 	bl	800c918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c738:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <pvPortMalloc+0x158>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	4a17      	ldr	r2, [pc, #92]	; (800c7a0 <pvPortMalloc+0x158>)
 800c744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c746:	4b16      	ldr	r3, [pc, #88]	; (800c7a0 <pvPortMalloc+0x158>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b17      	ldr	r3, [pc, #92]	; (800c7a8 <pvPortMalloc+0x160>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d203      	bcs.n	800c75a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <pvPortMalloc+0x158>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <pvPortMalloc+0x160>)
 800c758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <pvPortMalloc+0x154>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	431a      	orrs	r2, r3
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <pvPortMalloc+0x164>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <pvPortMalloc+0x164>)
 800c776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c778:	f7fe fd34 	bl	800b1e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <pvPortMalloc+0x144>
 800c786:	f7ff feff 	bl	800c588 <ulSetInterruptMask>
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x142>
	return pvReturn;
 800c78c:	68fb      	ldr	r3, [r7, #12]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	2001f8f8 	.word	0x2001f8f8
 800c79c:	2001f90c 	.word	0x2001f90c
 800c7a0:	2001f8fc 	.word	0x2001f8fc
 800c7a4:	2001f8f0 	.word	0x2001f8f0
 800c7a8:	2001f900 	.word	0x2001f900
 800c7ac:	2001f904 	.word	0x2001f904

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d03d      	beq.n	800c83e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <vPortFree+0x98>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <vPortFree+0x34>
 800c7de:	f7ff fed3 	bl	800c588 <ulSetInterruptMask>
 800c7e2:	e7fe      	b.n	800c7e2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <vPortFree+0x42>
 800c7ec:	f7ff fecc 	bl	800c588 <ulSetInterruptMask>
 800c7f0:	e7fe      	b.n	800c7f0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <vPortFree+0x98>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01e      	beq.n	800c83e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d11a      	bne.n	800c83e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b0e      	ldr	r3, [pc, #56]	; (800c848 <vPortFree+0x98>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	43db      	mvns	r3, r3
 800c812:	401a      	ands	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c818:	f7fe fcd6 	bl	800b1c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <vPortFree+0x9c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4413      	add	r3, r2
 800c826:	4a09      	ldr	r2, [pc, #36]	; (800c84c <vPortFree+0x9c>)
 800c828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c82a:	68b8      	ldr	r0, [r7, #8]
 800c82c:	f000 f874 	bl	800c918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <vPortFree+0xa0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a06      	ldr	r2, [pc, #24]	; (800c850 <vPortFree+0xa0>)
 800c838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c83a:	f7fe fcd3 	bl	800b1e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	2001f90c 	.word	0x2001f90c
 800c84c:	2001f8fc 	.word	0x2001f8fc
 800c850:	2001f908 	.word	0x2001f908

0800c854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c85a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c860:	4b27      	ldr	r3, [pc, #156]	; (800c900 <prvHeapInit+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00c      	beq.n	800c888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3307      	adds	r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	4a1f      	ldr	r2, [pc, #124]	; (800c900 <prvHeapInit+0xac>)
 800c884:	4413      	add	r3, r2
 800c886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c88c:	4a1d      	ldr	r2, [pc, #116]	; (800c904 <prvHeapInit+0xb0>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c892:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <prvHeapInit+0xb0>)
 800c894:	2200      	movs	r2, #0
 800c896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0307 	bic.w	r3, r3, #7
 800c8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4a15      	ldr	r2, [pc, #84]	; (800c908 <prvHeapInit+0xb4>)
 800c8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <prvHeapInit+0xb4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <prvHeapInit+0xb4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <prvHeapInit+0xb4>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	4a0a      	ldr	r2, [pc, #40]	; (800c90c <prvHeapInit+0xb8>)
 800c8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4a09      	ldr	r2, [pc, #36]	; (800c910 <prvHeapInit+0xbc>)
 800c8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8ec:	4b09      	ldr	r3, [pc, #36]	; (800c914 <prvHeapInit+0xc0>)
 800c8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8f2:	601a      	str	r2, [r3, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	2001d8f0 	.word	0x2001d8f0
 800c904:	2001f8f0 	.word	0x2001f8f0
 800c908:	2001f8f8 	.word	0x2001f8f8
 800c90c:	2001f900 	.word	0x2001f900
 800c910:	2001f8fc 	.word	0x2001f8fc
 800c914:	2001f90c 	.word	0x2001f90c

0800c918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c920:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <prvInsertBlockIntoFreeList+0xac>)
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e002      	b.n	800c92c <prvInsertBlockIntoFreeList+0x14>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d8f7      	bhi.n	800c926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d108      	bne.n	800c95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	441a      	add	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d118      	bne.n	800c9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d00d      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	441a      	add	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	e008      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c996:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	e003      	b.n	800c9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d002      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2001f8f0 	.word	0x2001f8f0
 800c9c8:	2001f8f8 	.word	0x2001f8f8

0800c9cc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
}
 800c9d0:	bf00      	nop
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800c9de:	f003 fa3d 	bl	800fe5c <touchgfx_components_init>
  touchgfx_init();
 800c9e2:	f003 fa11 	bl	800fe08 <touchgfx_init>
}
 800c9e6:	bf00      	nop
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800c9ee:	f003 fa3d 	bl	800fe6c <touchgfx_taskEntry>
}
 800c9f2:	bf00      	nop
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    {
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
    }
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	08024c34 	.word	0x08024c34

0800ca18 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    }
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ffe9 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca26:	2104      	movs	r1, #4
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f015 fd18 	bl	802245e <_ZdlPvj>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ca44:	887b      	ldrh	r3, [r7, #2]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d010      	beq.n	800ca6c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	dc13      	bgt.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d005      	beq.n	800ca62 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800ca56:	e00e      	b.n	800ca76 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ca58:	f001 fe9e 	bl	800e798 <_ZN17TypedTextDatabase8getFontsEv>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	e00a      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ca62:	f001 fe99 	bl	800e798 <_ZN17TypedTextDatabase8getFontsEv>
 800ca66:	4603      	mov	r3, r0
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	e005      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ca6c:	f001 fe94 	bl	800e798 <_ZN17TypedTextDatabase8getFontsEv>
 800ca70:	4603      	mov	r3, r0
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	e000      	b.n	800ca78 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800ca76:	2300      	movs	r3, #0
    }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	4a05      	ldr	r2, [pc, #20]	; (800caa0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff ffb1 	bl	800c9f8 <_ZN8touchgfx12FontProviderD1Ev>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	08024c20 	.word	0x08024c20

0800caa4 <_ZN23ApplicationFontProviderD0Ev>:
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ffe7 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
 800cab2:	2104      	movs	r1, #4
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f015 fcd2 	bl	802245e <_ZdlPvj>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    {
 800cacc:	4a04      	ldr	r2, [pc, #16]	; (800cae0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
    }
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	08024f00 	.word	0x08024f00

0800cae4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
    }
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff ffe9 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800caf2:	2114      	movs	r1, #20
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f015 fcb2 	bl	802245e <_ZdlPvj>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800cb10:	887b      	ldrh	r3, [r7, #2]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e010      	b.n	800cb3c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3308      	adds	r3, #8
 800cb28:	681c      	ldr	r4, [r3, #0]
 800cb2a:	f107 030f 	add.w	r3, r7, #15
 800cb2e:	f107 0210 	add.w	r2, r7, #16
 800cb32:	8879      	ldrh	r1, [r7, #2]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	47a0      	blx	r4
 800cb38:	6178      	str	r0, [r7, #20]
        return glyph;
 800cb3a:	697b      	ldr	r3, [r7, #20]
    }
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd90      	pop	{r4, r7, pc}

0800cb44 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	89db      	ldrh	r3, [r3, #14]
    }
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8a1b      	ldrh	r3, [r3, #16]
    }
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	88db      	ldrh	r3, [r3, #6]
    }
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	889b      	ldrh	r3, [r3, #4]
    }
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7a9b      	ldrb	r3, [r3, #10]
 800cbb0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800cbb4:	b2db      	uxtb	r3, r3
    }
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	7a9b      	ldrb	r3, [r3, #10]
 800cbce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cbd2:	b2db      	uxtb	r3, r3
    }
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	4a05      	ldr	r2, [pc, #20]	; (800cc00 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff ff67 	bl	800cac4 <_ZN8touchgfx4FontD1Ev>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08025b10 	.word	0x08025b10

0800cc04 <_ZN8touchgfx9ConstFontD0Ev>:
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff ffe7 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc12:	211c      	movs	r1, #28
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f015 fc22 	bl	802245e <_ZdlPvj>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	4a05      	ldr	r2, [pc, #20]	; (800cc44 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff ffd3 	bl	800cbe0 <_ZN8touchgfx9ConstFontD1Ev>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	08024c48 	.word	0x08024c48

0800cc48 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ffe7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cc56:	212c      	movs	r1, #44	; 0x2c
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f015 fc00 	bl	802245e <_ZdlPvj>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08e      	sub	sp, #56	; 0x38
 800cc9c:	af0a      	add	r7, sp, #40	; 0x28
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4611      	mov	r1, r2
 800cca4:	461a      	mov	r2, r3
 800cca6:	460b      	mov	r3, r1
 800cca8:	80fb      	strh	r3, [r7, #6]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	88b9      	ldrh	r1, [r7, #4]
 800ccb2:	88fa      	ldrh	r2, [r7, #6]
 800ccb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccb8:	9308      	str	r3, [sp, #32]
 800ccba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccbc:	9307      	str	r3, [sp, #28]
 800ccbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ccc2:	9306      	str	r3, [sp, #24]
 800ccc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ccc8:	9305      	str	r3, [sp, #20]
 800ccca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccce:	9304      	str	r3, [sp, #16]
 800ccd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccda:	9302      	str	r3, [sp, #8]
 800ccdc:	7f3b      	ldrb	r3, [r7, #28]
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	8b3b      	ldrh	r3, [r7, #24]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	460b      	mov	r3, r1
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	f008 f916 	bl	8014f18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800ccec:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccf6:	61da      	str	r2, [r3, #28]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccfc:	621a      	str	r2, [r3, #32]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd02:	625a      	str	r2, [r3, #36]	; 0x24
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd08:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	08024c48 	.word	0x08024c48

0800cd18 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	889b      	ldrh	r3, [r3, #4]
 800cd2c:	0adb      	lsrs	r3, r3, #11
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4413      	add	r3, r2
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4413      	add	r3, r2
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b089      	sub	sp, #36	; 0x24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	460b      	mov	r3, r1
 800cd54:	607a      	str	r2, [r7, #4]
 800cd56:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7b1b      	ldrb	r3, [r3, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e030      	b.n	800cdcc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a1a      	ldr	r2, [r3, #32]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	7b5b      	ldrb	r3, [r3, #13]
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	b21b      	sxth	r3, r3
 800cd7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd7e:	b219      	sxth	r1, r3
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	7adb      	ldrb	r3, [r3, #11]
 800cd84:	b21b      	sxth	r3, r3
 800cd86:	430b      	orrs	r3, r1
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	7b1b      	ldrb	r3, [r3, #12]
 800cd96:	837b      	strh	r3, [r7, #26]
 800cd98:	8b7b      	ldrh	r3, [r7, #26]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d015      	beq.n	800cdca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	897a      	ldrh	r2, [r7, #10]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d103      	bne.n	800cdb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cdae:	e00d      	b.n	800cdcc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	897a      	ldrh	r2, [r7, #10]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d306      	bcc.n	800cdc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800cdba:	8b7b      	ldrh	r3, [r7, #26]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	837b      	strh	r3, [r7, #26]
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	61fb      	str	r3, [r7, #28]
 800cdc6:	e7e7      	b.n	800cd98 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800cdc8:	bf00      	nop
        }
    }
    return 0;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3724      	adds	r7, #36	; 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__tcf_0+0xc>)
 800cdde:	f7ff ff21 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	2001f910 	.word	0x2001f910

0800cde8 <_Z23getFont_verdana_10_4bppv>:
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08e      	sub	sp, #56	; 0x38
 800cdec:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800cdee:	4b21      	ldr	r3, [pc, #132]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800cdf0:	e8d3 3f8f 	ldab	r3, [r3]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf0c      	ite	eq
 800cdfe:	2301      	moveq	r3, #1
 800ce00:	2300      	movne	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d030      	beq.n	800ce6a <_Z23getFont_verdana_10_4bppv+0x82>
 800ce08:	481a      	ldr	r0, [pc, #104]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce0a:	f015 fb2a 	bl	8022462 <__cxa_guard_acquire>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	bf14      	ite	ne
 800ce14:	2301      	movne	r3, #1
 800ce16:	2300      	moveq	r3, #0
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d025      	beq.n	800ce6a <_Z23getFont_verdana_10_4bppv+0x82>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	930c      	str	r3, [sp, #48]	; 0x30
 800ce22:	2300      	movs	r3, #0
 800ce24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce26:	2300      	movs	r3, #0
 800ce28:	930a      	str	r3, [sp, #40]	; 0x28
 800ce2a:	233f      	movs	r3, #63	; 0x3f
 800ce2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce2e:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <_Z23getFont_verdana_10_4bppv+0x90>)
 800ce30:	9308      	str	r3, [sp, #32]
 800ce32:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <_Z23getFont_verdana_10_4bppv+0x94>)
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	2300      	movs	r3, #0
 800ce38:	9306      	str	r3, [sp, #24]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	2304      	movs	r3, #4
 800ce44:	9303      	str	r3, [sp, #12]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9302      	str	r3, [sp, #8]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9301      	str	r3, [sp, #4]
 800ce4e:	230a      	movs	r3, #10
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	230a      	movs	r3, #10
 800ce54:	2201      	movs	r2, #1
 800ce56:	490a      	ldr	r1, [pc, #40]	; (800ce80 <_Z23getFont_verdana_10_4bppv+0x98>)
 800ce58:	480a      	ldr	r0, [pc, #40]	; (800ce84 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800ce5a:	f7ff ff1d 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ce5e:	480a      	ldr	r0, [pc, #40]	; (800ce88 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800ce60:	f016 f8aa 	bl	8022fb8 <atexit>
 800ce64:	4803      	ldr	r0, [pc, #12]	; (800ce74 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ce66:	f015 fb08 	bl	802247a <__cxa_guard_release>
    return verdana_10_4bpp;
 800ce6a:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	2001f93c 	.word	0x2001f93c
 800ce78:	080264b0 	.word	0x080264b0
 800ce7c:	080264bc 	.word	0x080264bc
 800ce80:	08026480 	.word	0x08026480
 800ce84:	2001f910 	.word	0x2001f910
 800ce88:	0800cdd9 	.word	0x0800cdd9

0800ce8c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <__tcf_0+0xc>)
 800ce92:	f7ff fec7 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	2001f940 	.word	0x2001f940

0800ce9c <_Z23getFont_verdana_20_4bppv>:
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08e      	sub	sp, #56	; 0x38
 800cea0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800cea2:	4b21      	ldr	r3, [pc, #132]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cea4:	e8d3 3f8f 	ldab	r3, [r3]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bf0c      	ite	eq
 800ceb2:	2301      	moveq	r3, #1
 800ceb4:	2300      	movne	r3, #0
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d030      	beq.n	800cf1e <_Z23getFont_verdana_20_4bppv+0x82>
 800cebc:	481a      	ldr	r0, [pc, #104]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cebe:	f015 fad0 	bl	8022462 <__cxa_guard_acquire>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bf14      	ite	ne
 800cec8:	2301      	movne	r3, #1
 800ceca:	2300      	moveq	r3, #0
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d025      	beq.n	800cf1e <_Z23getFont_verdana_20_4bppv+0x82>
 800ced2:	2300      	movs	r3, #0
 800ced4:	930c      	str	r3, [sp, #48]	; 0x30
 800ced6:	2300      	movs	r3, #0
 800ced8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceda:	2300      	movs	r3, #0
 800cedc:	930a      	str	r3, [sp, #40]	; 0x28
 800cede:	233f      	movs	r3, #63	; 0x3f
 800cee0:	9309      	str	r3, [sp, #36]	; 0x24
 800cee2:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <_Z23getFont_verdana_20_4bppv+0x90>)
 800cee4:	9308      	str	r3, [sp, #32]
 800cee6:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <_Z23getFont_verdana_20_4bppv+0x94>)
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	2300      	movs	r3, #0
 800ceec:	9306      	str	r3, [sp, #24]
 800ceee:	2300      	movs	r3, #0
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	2301      	movs	r3, #1
 800cef4:	9304      	str	r3, [sp, #16]
 800cef6:	2304      	movs	r3, #4
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	2300      	movs	r3, #0
 800cefc:	9302      	str	r3, [sp, #8]
 800cefe:	2300      	movs	r3, #0
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	2314      	movs	r3, #20
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	2314      	movs	r3, #20
 800cf08:	2201      	movs	r2, #1
 800cf0a:	490a      	ldr	r1, [pc, #40]	; (800cf34 <_Z23getFont_verdana_20_4bppv+0x98>)
 800cf0c:	480a      	ldr	r0, [pc, #40]	; (800cf38 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800cf0e:	f7ff fec3 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cf12:	480a      	ldr	r0, [pc, #40]	; (800cf3c <_Z23getFont_verdana_20_4bppv+0xa0>)
 800cf14:	f016 f850 	bl	8022fb8 <atexit>
 800cf18:	4803      	ldr	r0, [pc, #12]	; (800cf28 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800cf1a:	f015 faae 	bl	802247a <__cxa_guard_release>
    return verdana_20_4bpp;
 800cf1e:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	2001f96c 	.word	0x2001f96c
 800cf2c:	080264b4 	.word	0x080264b4
 800cf30:	080264c0 	.word	0x080264c0
 800cf34:	08026490 	.word	0x08026490
 800cf38:	2001f940 	.word	0x2001f940
 800cf3c:	0800ce8d 	.word	0x0800ce8d

0800cf40 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	4801      	ldr	r0, [pc, #4]	; (800cf4c <__tcf_0+0xc>)
 800cf46:	f7ff fe6d 	bl	800cc24 <_ZN8touchgfx13GeneratedFontD1Ev>
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	2001f970 	.word	0x2001f970

0800cf50 <_Z23getFont_verdana_40_4bppv>:
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08e      	sub	sp, #56	; 0x38
 800cf54:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cf56:	4b21      	ldr	r3, [pc, #132]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cf58:	e8d3 3f8f 	ldab	r3, [r3]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bf0c      	ite	eq
 800cf66:	2301      	moveq	r3, #1
 800cf68:	2300      	movne	r3, #0
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d030      	beq.n	800cfd2 <_Z23getFont_verdana_40_4bppv+0x82>
 800cf70:	481a      	ldr	r0, [pc, #104]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cf72:	f015 fa76 	bl	8022462 <__cxa_guard_acquire>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bf14      	ite	ne
 800cf7c:	2301      	movne	r3, #1
 800cf7e:	2300      	moveq	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d025      	beq.n	800cfd2 <_Z23getFont_verdana_40_4bppv+0x82>
 800cf86:	2300      	movs	r3, #0
 800cf88:	930c      	str	r3, [sp, #48]	; 0x30
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf8e:	2300      	movs	r3, #0
 800cf90:	930a      	str	r3, [sp, #40]	; 0x28
 800cf92:	233f      	movs	r3, #63	; 0x3f
 800cf94:	9309      	str	r3, [sp, #36]	; 0x24
 800cf96:	4b12      	ldr	r3, [pc, #72]	; (800cfe0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800cf98:	9308      	str	r3, [sp, #32]
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800cf9c:	9307      	str	r3, [sp, #28]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9306      	str	r3, [sp, #24]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	2304      	movs	r3, #4
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	2328      	movs	r3, #40	; 0x28
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	2328      	movs	r3, #40	; 0x28
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	490a      	ldr	r1, [pc, #40]	; (800cfe8 <_Z23getFont_verdana_40_4bppv+0x98>)
 800cfc0:	480a      	ldr	r0, [pc, #40]	; (800cfec <_Z23getFont_verdana_40_4bppv+0x9c>)
 800cfc2:	f7ff fe69 	bl	800cc98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cfc6:	480a      	ldr	r0, [pc, #40]	; (800cff0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800cfc8:	f015 fff6 	bl	8022fb8 <atexit>
 800cfcc:	4803      	ldr	r0, [pc, #12]	; (800cfdc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800cfce:	f015 fa54 	bl	802247a <__cxa_guard_release>
    return verdana_40_4bpp;
 800cfd2:	4b06      	ldr	r3, [pc, #24]	; (800cfec <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	2001f99c 	.word	0x2001f99c
 800cfe0:	080264b8 	.word	0x080264b8
 800cfe4:	080264c4 	.word	0x080264c4
 800cfe8:	080264a0 	.word	0x080264a0
 800cfec:	2001f970 	.word	0x2001f970
 800cff0:	0800cf41 	.word	0x0800cf41

0800cff4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
    {
    }
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d07a:	b480      	push	{r7}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
    {
    }
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
	...

0800d090 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    {
 800d098:	4a04      	ldr	r2, [pc, #16]	; (800d0ac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	601a      	str	r2, [r3, #0]
    }
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	08024db8 	.word	0x08024db8

0800d0b0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
    }
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff ffe9 	bl	800d090 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d0be:	2104      	movs	r1, #4
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f015 f9cc 	bl	802245e <_ZdlPvj>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
    {
    }
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d10e:	6810      	ldr	r0, [r2, #0]
 800d110:	6851      	ldr	r1, [r2, #4]
 800d112:	c303      	stmia	r3!, {r0, r1}
    }
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3304      	adds	r3, #4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f006 fdf5 	bl	8013d1c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    {
 800d144:	4a04      	ldr	r2, [pc, #16]	; (800d158 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	601a      	str	r2, [r3, #0]
    }
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	08024da0 	.word	0x08024da0

0800d15c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
    }
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ffe9 	bl	800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d16a:	2104      	movs	r1, #4
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f015 f976 	bl	802245e <_ZdlPvj>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0
    {
        return instance;
 800d180:	4b03      	ldr	r3, [pc, #12]	; (800d190 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d182:	681b      	ldr	r3, [r3, #0]
    }
 800d184:	4618      	mov	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	2002008c 	.word	0x2002008c

0800d194 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d198:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d008      	beq.n	800d1b6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d1a4:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d1ae:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b4:	e002      	b.n	800d1bc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d1b6:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
    }
 800d1bc:	4618      	mov	r0, r3
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	2002008c 	.word	0x2002008c

0800d1cc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d1d4:	4a07      	ldr	r2, [pc, #28]	; (800d1f4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	605a      	str	r2, [r3, #4]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	721a      	strb	r2, [r3, #8]
    {
    }
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	08024d7c 	.word	0x08024d7c

0800d1f8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
    {
 800d200:	4a04      	ldr	r2, [pc, #16]	; (800d214 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	601a      	str	r2, [r3, #0]
    }
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	08024d7c 	.word	0x08024d7c

0800d218 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
    }
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ffe9 	bl	800d1f8 <_ZN8touchgfx10TransitionD1Ev>
 800d226:	210c      	movs	r1, #12
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f015 f918 	bl	802245e <_ZdlPvj>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
    {
    }
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
    {
    }
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
    {
    }
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d27c:	f006 fd10 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 800d280:	4603      	mov	r3, r0
 800d282:	4618      	mov	r0, r3
 800d284:	f007 f99e 	bl	80145c4 <_ZN8touchgfx11Application10invalidateEv>
    }
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	605a      	str	r2, [r3, #4]
    }
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	4a05      	ldr	r2, [pc, #20]	; (800d2cc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fee7 	bl	800d090 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08025a5c 	.word	0x08025a5c

0800d2d0 <_ZN8touchgfx11ApplicationD0Ev>:
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff ffe7 	bl	800d2ac <_ZN8touchgfx11ApplicationD1Ev>
 800d2de:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f015 f8bb 	bl	802245e <_ZdlPvj>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f006 fdda 	bl	8013eb8 <_ZN8touchgfx11ApplicationC1Ev>
 800d304:	4a09      	ldr	r2, [pc, #36]	; (800d32c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a04      	ldr	r2, [pc, #16]	; (800d330 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d31e:	6013      	str	r3, [r2, #0]
    }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	08024d30 	.word	0x08024d30
 800d330:	200200d8 	.word	0x200200d8

0800d334 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f804 	bl	800d34a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00f      	beq.n	800d37c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	330c      	adds	r3, #12
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4610      	mov	r0, r2
 800d370:	4798      	blx	r3
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d378:	2301      	movs	r3, #1
 800d37a:	e000      	b.n	800d37e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d37c:	2300      	movs	r3, #0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00e      	beq.n	800d3a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3308      	adds	r3, #8
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4610      	mov	r0, r2
 800d396:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	601a      	str	r2, [r3, #0]
    }
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	4a05      	ldr	r2, [pc, #20]	; (800d3e4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff ff69 	bl	800d2ac <_ZN8touchgfx11ApplicationD1Ev>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08024d30 	.word	0x08024d30

0800d3e8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff ffe7 	bl	800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d3f6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f015 f82f 	bl	802245e <_ZdlPvj>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	4a08      	ldr	r2, [pc, #32]	; (800d438 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fac7 	bl	800d9b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff ffcb 	bl	800d3c4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	08024ccc 	.word	0x08024ccc

0800d43c <_ZN23FrontendApplicationBaseD0Ev>:
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7ff ffe1 	bl	800d40c <_ZN23FrontendApplicationBaseD1Ev>
 800d44a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f015 f805 	bl	802245e <_ZdlPvj>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f87a 	bl	800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	721a      	strb	r2, [r3, #8]
    }
 800d482:	bf00      	nop
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	605a      	str	r2, [r3, #4]
    }
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
	...

0800d4ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff ff1a 	bl	800d2f4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800d4c0:	4a12      	ldr	r2, [pc, #72]	; (800d50c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 f89d 	bl	800d60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800d4e2:	f7ff fe4b 	bl	800d17c <_ZN8touchgfx3HAL11getInstanceEv>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	3208      	adds	r2, #8
 800d4ec:	6812      	ldr	r2, [r2, #0]
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800d4f4:	f7ff fe4e 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f00e f8b3 	bl	801b666 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08024ccc 	.word	0x08024ccc

0800d510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff ffe9 	bl	800d510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	605a      	str	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	3308      	adds	r3, #8
 800d54c:	3208      	adds	r2, #8
 800d54e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d552:	e883 0003 	stmia.w	r3, {r0, r1}
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b089      	sub	sp, #36	; 0x24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800d570:	61bb      	str	r3, [r7, #24]
 800d572:	2300      	movs	r3, #0
 800d574:	61fb      	str	r3, [r7, #28]
 800d576:	f107 0008 	add.w	r0, r7, #8
 800d57a:	f107 0318 	add.w	r3, r7, #24
 800d57e:	cb0c      	ldmia	r3, {r2, r3}
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	f000 f85f 	bl	800d644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7ff ffcb 	bl	800d528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800d592:	f107 0308 	add.w	r3, r7, #8
 800d596:	4618      	mov	r0, r3
 800d598:	f000 fa0c 	bl	800d9b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800d5a8:	bf00      	nop
 800d5aa:	3724      	adds	r7, #36	; 0x24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd90      	pop	{r4, r7, pc}
 800d5b0:	0800d5b5 	.word	0x0800d5b5

0800d5b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af02      	add	r7, sp, #8
 800d5ba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4b04      	ldr	r3, [pc, #16]	; (800d5e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800d5d4:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800d5d6:	f000 f867 	bl	800d6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	200200cc 	.word	0x200200cc
 800d5e8:	200200c8 	.word	0x200200c8

0800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	4a04      	ldr	r2, [pc, #16]	; (800d608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	08024da0 	.word	0x08024da0

0800d60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff ffe8 	bl	800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d61c:	4a08      	ldr	r2, [pc, #32]	; (800d640 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	605a      	str	r2, [r3, #4]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	609a      	str	r2, [r3, #8]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	60da      	str	r2, [r3, #12]
    {
    }
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	08024d18 	.word	0x08024d18

0800d644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4639      	mov	r1, r7
 800d650:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff ffc8 	bl	800d5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800d65c:	4a08      	ldr	r2, [pc, #32]	; (800d680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	605a      	str	r2, [r3, #4]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3308      	adds	r3, #8
 800d66c:	463a      	mov	r2, r7
 800d66e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d672:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08024d18 	.word	0x08024d18

0800d684 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff fd9c 	bl	800d1cc <_ZN8touchgfx10TransitionC1Ev>
 800d694:	4a03      	ldr	r2, [pc, #12]	; (800d6a4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	08024ca8 	.word	0x08024ca8

0800d6a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b08f      	sub	sp, #60	; 0x3c
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689a      	ldr	r2, [r3, #8]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3320      	adds	r3, #32
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	f5b3 7f72 	cmp.w	r3, #968	; 0x3c8
 800d6ce:	d205      	bcs.n	800d6dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d6d0:	4b7e      	ldr	r3, [pc, #504]	; (800d8cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d6d2:	4a7f      	ldr	r2, [pc, #508]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d6d4:	21a3      	movs	r1, #163	; 0xa3
 800d6d6:	487f      	ldr	r0, [pc, #508]	; (800d8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d6d8:	f015 fc50 	bl	8022f7c <__assert_func>
 800d6dc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3320      	adds	r3, #32
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4798      	blx	r3
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b0f      	cmp	r3, #15
 800d6f4:	d805      	bhi.n	800d702 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d6f6:	4b78      	ldr	r3, [pc, #480]	; (800d8d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d6f8:	4a75      	ldr	r2, [pc, #468]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d6fa:	21a4      	movs	r1, #164	; 0xa4
 800d6fc:	4875      	ldr	r0, [pc, #468]	; (800d8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d6fe:	f015 fc3d 	bl	8022f7c <__assert_func>
 800d702:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3320      	adds	r3, #32
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4610      	mov	r0, r2
 800d714:	4798      	blx	r3
 800d716:	4603      	mov	r3, r0
 800d718:	2b0b      	cmp	r3, #11
 800d71a:	d805      	bhi.n	800d728 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d71c:	4b6f      	ldr	r3, [pc, #444]	; (800d8dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800d71e:	4a6c      	ldr	r2, [pc, #432]	; (800d8d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d720:	21a5      	movs	r1, #165	; 0xa5
 800d722:	486c      	ldr	r0, [pc, #432]	; (800d8d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d724:	f015 fc2a 	bl	8022f7c <__assert_func>
 800d728:	bf00      	nop
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d736:	f006 fab3 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 800d73a:	4603      	mov	r3, r0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff fcef 	bl	800d120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d008      	beq.n	800d75c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d74a:	6a3b      	ldr	r3, [r7, #32]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	330c      	adds	r3, #12
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4610      	mov	r0, r2
 800d75a:	4798      	blx	r3
    if (*currentTrans)
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d007      	beq.n	800d774 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4610      	mov	r0, r2
 800d772:	4798      	blx	r3
    if (*currentScreen)
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d008      	beq.n	800d78e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3314      	adds	r3, #20
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4610      	mov	r0, r2
 800d78c:	4798      	blx	r3
    if (*currentPresenter)
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d008      	beq.n	800d7a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
    if (*currentScreen)
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d007      	beq.n	800d7c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4798      	blx	r3
    if (*currentPresenter)
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4798      	blx	r3
}
 800d7da:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 f87c 	bl	800d8e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	200c      	movs	r0, #12
 800d7ee:	f7ff fc01 	bl	800cff4 <_ZnwjPv>
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f7ff ff45 	bl	800d684 <_ZN8touchgfx12NoTransitionC1Ev>
 800d7fa:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	2100      	movs	r1, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f87f 	bl	800d906 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d808:	4603      	mov	r3, r0
 800d80a:	4619      	mov	r1, r3
 800d80c:	f44f 7072 	mov.w	r0, #968	; 0x3c8
 800d810:	f7ff fbf0 	bl	800cff4 <_ZnwjPv>
 800d814:	4604      	mov	r4, r0
 800d816:	4620      	mov	r0, r4
 800d818:	f001 f95a 	bl	800ead0 <_ZN11Screen1ViewC1Ev>
 800d81c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	2100      	movs	r1, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f881 	bl	800d92c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d82a:	4603      	mov	r3, r0
 800d82c:	4619      	mov	r1, r3
 800d82e:	2010      	movs	r0, #16
 800d830:	f7ff fbe0 	bl	800cff4 <_ZnwjPv>
 800d834:	4604      	mov	r4, r0
 800d836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d838:	4620      	mov	r0, r4
 800d83a:	f001 f8f1 	bl	800ea20 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d83e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d844:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d84a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d850:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	3304      	adds	r3, #4
 800d85c:	e000      	b.n	800d860 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800d85e:	2300      	movs	r3, #0
 800d860:	4619      	mov	r1, r3
 800d862:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d864:	f7ff fda0 	bl	800d3a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	3304      	adds	r3, #4
 800d86c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff fe0d 	bl	800d48e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 f86a 	bl	800d952 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	61fb      	str	r3, [r7, #28]
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	61bb      	str	r3, [r7, #24]
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	330c      	adds	r3, #12
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	69f8      	ldr	r0, [r7, #28]
 800d894:	4798      	blx	r3
    newPresenter->activate();
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69b8      	ldr	r0, [r7, #24]
 800d89e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d8a0:	6979      	ldr	r1, [r7, #20]
 800d8a2:	69f8      	ldr	r0, [r7, #28]
 800d8a4:	f007 fef8 	bl	8015698 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6978      	ldr	r0, [r7, #20]
 800d8b2:	4798      	blx	r3
    newTransition->invalidate();
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	3314      	adds	r3, #20
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6978      	ldr	r0, [r7, #20]
 800d8be:	4798      	blx	r3
}
 800d8c0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	373c      	adds	r7, #60	; 0x3c
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	0802421c 	.word	0x0802421c
 800d8d0:	080242ac 	.word	0x080242ac
 800d8d4:	080243b0 	.word	0x080243b0
 800d8d8:	080243f4 	.word	0x080243f4
 800d8dc:	08024498 	.word	0x08024498

0800d8e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3324      	adds	r3, #36	; 0x24
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	887a      	ldrh	r2, [r7, #2]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	4798      	blx	r3
 800d8fc:	4603      	mov	r3, r0
    }
 800d8fe:	4618      	mov	r0, r3
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d906:	b580      	push	{r7, lr}
 800d908:	b082      	sub	sp, #8
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3324      	adds	r3, #36	; 0x24
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	887a      	ldrh	r2, [r7, #2]
 800d91c:	4611      	mov	r1, r2
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	4798      	blx	r3
 800d922:	4603      	mov	r3, r0
    }
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	460b      	mov	r3, r1
 800d936:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3324      	adds	r3, #36	; 0x24
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	887a      	ldrh	r2, [r7, #2]
 800d942:	4611      	mov	r1, r2
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	4798      	blx	r3
 800d948:	4603      	mov	r3, r0
    }
 800d94a:	4618      	mov	r0, r3
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d952:	b480      	push	{r7}
 800d954:	b083      	sub	sp, #12
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d962:	bf00      	nop
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
	...

0800d970 <_ZN8touchgfx12NoTransitionD1Ev>:
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	4a05      	ldr	r2, [pc, #20]	; (800d990 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fc39 	bl	800d1f8 <_ZN8touchgfx10TransitionD1Ev>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	08024ca8 	.word	0x08024ca8

0800d994 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff ffe7 	bl	800d970 <_ZN8touchgfx12NoTransitionD1Ev>
 800d9a2:	210c      	movs	r1, #12
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f014 fd5a 	bl	802245e <_ZdlPvj>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	4a05      	ldr	r2, [pc, #20]	; (800d9d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fbb9 	bl	800d13c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	08024d18 	.word	0x08024d18

0800d9d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ffe7 	bl	800d9b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d9e6:	2110      	movs	r1, #16
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f014 fd38 	bl	802245e <_ZdlPvj>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68d2      	ldr	r2, [r2, #12]
 800da08:	1052      	asrs	r2, r2, #1
 800da0a:	1899      	adds	r1, r3, r2
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b00      	cmp	r3, #0
 800da16:	d102      	bne.n	800da1e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	e00a      	b.n	800da34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	68d2      	ldr	r2, [r2, #12]
 800da26:	1052      	asrs	r2, r2, #1
 800da28:	4413      	add	r3, r2
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6892      	ldr	r2, [r2, #8]
 800da30:	4413      	add	r3, r2
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4608      	mov	r0, r1
 800da36:	4798      	blx	r3
    }
 800da38:	bf00      	nop
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d010      	beq.n	800da72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d107      	bne.n	800da68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	f003 0301 	and.w	r3, r3, #1
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800da64:	2301      	movs	r3, #1
 800da66:	e000      	b.n	800da6a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800da68:	2300      	movs	r3, #0
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d001      	beq.n	800da72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800da72:	2300      	movs	r3, #0
    }
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
        : color(col)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	601a      	str	r2, [r3, #0]
    {
    }
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800da9e:	b480      	push	{r7}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	801a      	strh	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	805a      	strh	r2, [r3, #2]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	809a      	strh	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	80da      	strh	r2, [r3, #6]
    {
    }
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800dad4:	4a14      	ldr	r2, [pc, #80]	; (800db28 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff ffdd 	bl	800da9e <_ZN8touchgfx4RectC1Ev>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	330c      	adds	r3, #12
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff ffd8 	bl	800da9e <_ZN8touchgfx4RectC1Ev>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	615a      	str	r2, [r3, #20]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	619a      	str	r2, [r3, #24]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	61da      	str	r2, [r3, #28]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	841a      	strh	r2, [r3, #32]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	845a      	strh	r2, [r3, #34]	; 0x22
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	08025aa8 	.word	0x08025aa8

0800db2c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
    {
 800db34:	4a04      	ldr	r2, [pc, #16]	; (800db48 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	601a      	str	r2, [r3, #0]
    }
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	08025aa8 	.word	0x08025aa8

0800db4c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
    }
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff ffe9 	bl	800db2c <_ZN8touchgfx8DrawableD1Ev>
 800db5a:	2128      	movs	r1, #40	; 0x28
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f014 fc7e 	bl	802245e <_ZdlPvj>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d005      	beq.n	800db8a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3314      	adds	r3, #20
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
        }
    }
 800db8a:	bf00      	nop
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800db92:	b480      	push	{r7}
 800db94:	b083      	sub	sp, #12
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800db9a:	2300      	movs	r3, #0
    }
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	817b      	strh	r3, [r7, #10]
 800dbba:	460b      	mov	r3, r1
 800dbbc:	813b      	strh	r3, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800dbc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dbc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f82a 	bl	800dc26 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800dbd2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800dbd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 f87e 	bl	800dcde <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800dbe2:	bf00      	nop
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	887a      	ldrh	r2, [r7, #2]
 800dbfa:	809a      	strh	r2, [r3, #4]
    }
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	887a      	ldrh	r2, [r7, #2]
 800dc18:	80da      	strh	r2, [r3, #6]
    }
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	460b      	mov	r3, r1
 800dc30:	807b      	strh	r3, [r7, #2]
 800dc32:	4613      	mov	r3, r2
 800dc34:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3330      	adds	r3, #48	; 0x30
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dc42:	4611      	mov	r1, r2
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	4798      	blx	r3
        setY(y);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3334      	adds	r3, #52	; 0x34
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dc54:	4611      	mov	r1, r2
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	4798      	blx	r3
    }
 800dc5a:	bf00      	nop
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	887a      	ldrh	r2, [r7, #2]
 800dc72:	811a      	strh	r2, [r3, #8]
    }
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	887a      	ldrh	r2, [r7, #2]
 800dc90:	815a      	strh	r2, [r3, #10]
    }
 800dc92:	bf00      	nop
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800dc9e:	b480      	push	{r7}
 800dca0:	b083      	sub	sp, #12
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
    {
    }
 800dca6:	bf00      	nop
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dcb2:	b480      	push	{r7}
 800dcb4:	b083      	sub	sp, #12
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dcd2:	bf00      	nop
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	460b      	mov	r3, r1
 800dce8:	807b      	strh	r3, [r7, #2]
 800dcea:	4613      	mov	r3, r2
 800dcec:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3338      	adds	r3, #56	; 0x38
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	4798      	blx	r3
        setHeight(height);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	333c      	adds	r3, #60	; 0x3c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	4798      	blx	r3
    }
 800dd12:	bf00      	nop
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dd1a:	b480      	push	{r7}
 800dd1c:	b083      	sub	sp, #12
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
    {
    }
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800dd52:	4618      	mov	r0, r3
 800dd54:	370c      	adds	r7, #12
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800dd5e:	b480      	push	{r7}
 800dd60:	b083      	sub	sp, #12
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	807b      	strh	r3, [r7, #2]
 800dd84:	4613      	mov	r3, r2
 800dd86:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3354      	adds	r3, #84	; 0x54
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	8879      	ldrh	r1, [r7, #2]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800dd98:	b292      	uxth	r2, r2
 800dd9a:	1a8a      	subs	r2, r1, r2
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	b210      	sxth	r0, r2
 800dda0:	8839      	ldrh	r1, [r7, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800dda8:	b292      	uxth	r2, r2
 800ddaa:	1a8a      	subs	r2, r1, r2
 800ddac:	b292      	uxth	r2, r2
 800ddae:	b212      	sxth	r2, r2
 800ddb0:	4601      	mov	r1, r0
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	4798      	blx	r3
    }
 800ddb6:	bf00      	nop
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddcc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddd4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dddc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ddde:	bf00      	nop
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b084      	sub	sp, #16
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f7ff ffe1 	bl	800ddbe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	601a      	str	r2, [r3, #0]
    }
 800de0a:	bf00      	nop
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
	...

0800de14 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
    {
 800de1c:	4a06      	ldr	r2, [pc, #24]	; (800de38 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	601a      	str	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	3304      	adds	r3, #4
 800de26:	4618      	mov	r0, r3
 800de28:	f000 fa1c 	bl	800e264 <_ZN8touchgfx9ContainerD1Ev>
    }
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	08025bac 	.word	0x08025bac

0800de3c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
    }
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff ffe5 	bl	800de14 <_ZN8touchgfx6ScreenD1Ev>
 800de4a:	213c      	movs	r1, #60	; 0x3c
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f014 fb06 	bl	802245e <_ZdlPvj>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4618      	mov	r0, r3
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    {
    }
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
    {
    }
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
    {
    }
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    {
    }
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	460b      	mov	r3, r1
 800deb6:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800deb8:	bf00      	nop
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3304      	adds	r3, #4
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f002 fdec 	bl	8010ab2 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800deda:	bf00      	nop
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b084      	sub	sp, #16
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	60f8      	str	r0, [r7, #12]
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	817b      	strh	r3, [r7, #10]
 800def0:	4613      	mov	r3, r2
 800def2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff ff24 	bl	800dd44 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d008      	beq.n	800df14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff ff2a 	bl	800dd5e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	601a      	str	r2, [r3, #0]
        }
    }
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fdca 	bl	800dacc <_ZN8touchgfx8DrawableC1Ev>
 800df38:	4a03      	ldr	r2, [pc, #12]	; (800df48 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	08024e48 	.word	0x08024e48

0800df4c <_ZN8touchgfx6WidgetD1Ev>:
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	4a05      	ldr	r2, [pc, #20]	; (800df6c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fde5 	bl	800db2c <_ZN8touchgfx8DrawableD1Ev>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	08024e48 	.word	0x08024e48

0800df70 <_ZN8touchgfx6WidgetD0Ev>:
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff ffe7 	bl	800df4c <_ZN8touchgfx6WidgetD1Ev>
 800df7e:	2128      	movs	r1, #40	; 0x28
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f014 fa6c 	bl	802245e <_ZdlPvj>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4618      	mov	r0, r3
 800df9c:	2326      	movs	r3, #38	; 0x26
 800df9e:	461a      	mov	r2, r3
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	f015 f970 	bl	8023286 <memset>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff ffbd 	bl	800df28 <_ZN8touchgfx6WidgetC1Ev>
 800dfae:	4a09      	ldr	r2, [pc, #36]	; (800dfd4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	22ff      	movs	r2, #255	; 0xff
 800dfb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3328      	adds	r3, #40	; 0x28
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fd5c 	bl	800da80 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	08025930 	.word	0x08025930

0800dfd8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	4a05      	ldr	r2, [pc, #20]	; (800e014 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff ff05 	bl	800de14 <_ZN8touchgfx6ScreenD1Ev>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	08024e14 	.word	0x08024e14

0800e018 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff ffe7 	bl	800dff4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e026:	2140      	movs	r1, #64	; 0x40
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f014 fa18 	bl	802245e <_ZdlPvj>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase()
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	b089      	sub	sp, #36	; 0x24
 800e03c:	af02      	add	r7, sp, #8
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4618      	mov	r0, r3
 800e044:	f000 f8f8 	bl	800e238 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800e048:	4a5b      	ldr	r2, [pc, #364]	; (800e1b8 <_ZN15Screen1ViewBaseC1Ev+0x180>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3340      	adds	r3, #64	; 0x40
 800e052:	4618      	mov	r0, r3
 800e054:	f7ff ff9c 	bl	800df90 <_ZN8touchgfx3BoxC1Ev>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	336c      	adds	r3, #108	; 0x6c
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff ff97 	bl	800df90 <_ZN8touchgfx3BoxC1Ev>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3398      	adds	r3, #152	; 0x98
 800e066:	4618      	mov	r0, r3
 800e068:	f002 fc50 	bl	801090c <_ZN8touchgfx11AnalogClockC1Ev>
{
    __background.setPosition(0, 0, 240, 240);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e072:	23f0      	movs	r3, #240	; 0xf0
 800e074:	9300      	str	r3, [sp, #0]
 800e076:	23f0      	movs	r3, #240	; 0xf0
 800e078:	2200      	movs	r2, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	f7ff fd94 	bl	800dba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e086:	2300      	movs	r3, #0
 800e088:	753b      	strb	r3, [r7, #20]
 800e08a:	2300      	movs	r3, #0
 800e08c:	74fb      	strb	r3, [r7, #19]
 800e08e:	2300      	movs	r3, #0
 800e090:	74bb      	strb	r3, [r7, #18]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800e092:	7d3b      	ldrb	r3, [r7, #20]
 800e094:	041b      	lsls	r3, r3, #16
 800e096:	461a      	mov	r2, r3
 800e098:	7cfb      	ldrb	r3, [r7, #19]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	431a      	orrs	r2, r3
 800e09e:	7cbb      	ldrb	r3, [r7, #18]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e0a6:	f107 030c 	add.w	r3, r7, #12
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff fce7 	bl	800da80 <_ZN8touchgfx9colortypeC1Em>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f7ff ff8e 	bl	800dfd8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3340      	adds	r3, #64	; 0x40
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	f7ff fefd 	bl	800dec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 240);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800e0d0:	23f0      	movs	r3, #240	; 0xf0
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	23f0      	movs	r3, #240	; 0xf0
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	2100      	movs	r1, #0
 800e0da:	f7ff fd65 	bl	800dba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(24, 9, 230));
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e0e4:	2318      	movs	r3, #24
 800e0e6:	75fb      	strb	r3, [r7, #23]
 800e0e8:	2309      	movs	r3, #9
 800e0ea:	75bb      	strb	r3, [r7, #22]
 800e0ec:	23e6      	movs	r3, #230	; 0xe6
 800e0ee:	757b      	strb	r3, [r7, #21]
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	041b      	lsls	r3, r3, #16
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	7dbb      	ldrb	r3, [r7, #22]
 800e0f8:	021b      	lsls	r3, r3, #8
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	7d7b      	ldrb	r3, [r7, #21]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800e104:	f107 0308 	add.w	r3, r7, #8
 800e108:	4611      	mov	r1, r2
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fcb8 	bl	800da80 <_ZN8touchgfx9colortypeC1Em>
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	4619      	mov	r1, r3
 800e114:	4620      	mov	r0, r4
 800e116:	f7ff ff5f 	bl	800dfd8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	336c      	adds	r3, #108	; 0x6c
 800e120:	4619      	mov	r1, r3
 800e122:	4610      	mov	r0, r2
 800e124:	f7ff fece 	bl	800dec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    analogClock1.setXY(0, 0);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3398      	adds	r3, #152	; 0x98
 800e12c:	2200      	movs	r2, #0
 800e12e:	2100      	movs	r1, #0
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff fd78 	bl	800dc26 <_ZN8touchgfx8Drawable5setXYEss>
    analogClock1.setBackground(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_BACKGROUNDS_SMALL_PLAIN_DARK_ID, 120, 120);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e13c:	2378      	movs	r3, #120	; 0x78
 800e13e:	2278      	movs	r2, #120	; 0x78
 800e140:	2100      	movs	r1, #0
 800e142:	f002 faa7 	bl	8010694 <_ZN8touchgfx11AnalogClock13setBackgroundEtss>
    analogClock1.setupSecondHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_SECOND_PLAIN_DARK_ID, 2, 100);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e14c:	2364      	movs	r3, #100	; 0x64
 800e14e:	2202      	movs	r2, #2
 800e150:	2103      	movs	r1, #3
 800e152:	f002 f95c 	bl	801040e <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>
    analogClock1.setupMinuteHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_MINUTE_PLAIN_DARK_ID, 10, 87);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e15c:	2357      	movs	r3, #87	; 0x57
 800e15e:	220a      	movs	r2, #10
 800e160:	2102      	movs	r1, #2
 800e162:	f002 f948 	bl	80103f6 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>
    analogClock1.setMinuteHandSecondCorrection(false);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3398      	adds	r3, #152	; 0x98
 800e16a:	2100      	movs	r1, #0
 800e16c:	4618      	mov	r0, r3
 800e16e:	f002 f9fc 	bl	801056a <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>
    analogClock1.setupHourHand(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_ANALOGCLOCK_HANDS_SMALL_HOUR_PLAIN_DARK_ID, 9, 69);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e178:	2345      	movs	r3, #69	; 0x45
 800e17a:	2209      	movs	r2, #9
 800e17c:	2101      	movs	r1, #1
 800e17e:	f002 f92e 	bl	80103de <_ZN8touchgfx11AnalogClock13setupHourHandEtss>
    analogClock1.setHourHandMinuteCorrection(false);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3398      	adds	r3, #152	; 0x98
 800e186:	2100      	movs	r1, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f002 f9d4 	bl	8010536 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>
    analogClock1.initializeTime24Hour(10, 10, 0);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e194:	2300      	movs	r3, #0
 800e196:	220a      	movs	r2, #10
 800e198:	210a      	movs	r1, #10
 800e19a:	f002 f944 	bl	8010426 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>
    add(analogClock1);
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3398      	adds	r3, #152	; 0x98
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f7ff fe8c 	bl	800dec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	371c      	adds	r7, #28
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd90      	pop	{r4, r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	08024de0 	.word	0x08024de0

0800e1bc <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	4a0d      	ldr	r2, [pc, #52]	; (800e1fc <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3398      	adds	r3, #152	; 0x98
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f000 f914 	bl	800e3fc <_ZN8touchgfx11AnalogClockD1Ev>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	336c      	adds	r3, #108	; 0x6c
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 f865 	bl	800e2a8 <_ZN8touchgfx3BoxD1Ev>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3340      	adds	r3, #64	; 0x40
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f000 f860 	bl	800e2a8 <_ZN8touchgfx3BoxD1Ev>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff ff02 	bl	800dff4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	08024de0 	.word	0x08024de0

0800e200 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
}
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff ffd7 	bl	800e1bc <_ZN15Screen1ViewBaseD1Ev>
 800e20e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f014 f923 	bl	802245e <_ZdlPvj>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800e222:	b480      	push	{r7}
 800e224:	b083      	sub	sp, #12
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]

}
 800e22a:	bf00      	nop
 800e22c:	370c      	adds	r7, #12
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
	...

0800e238 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	f007 f87c 	bl	8015340 <_ZN8touchgfx6ScreenC1Ev>
 800e248:	4a05      	ldr	r2, [pc, #20]	; (800e260 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	08024e14 	.word	0x08024e14

0800e264 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	4a05      	ldr	r2, [pc, #20]	; (800e284 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff fc59 	bl	800db2c <_ZN8touchgfx8DrawableD1Ev>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	0802550c 	.word	0x0802550c

0800e288 <_ZN8touchgfx9ContainerD0Ev>:
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff ffe7 	bl	800e264 <_ZN8touchgfx9ContainerD1Ev>
 800e296:	212c      	movs	r1, #44	; 0x2c
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f014 f8e0 	bl	802245e <_ZdlPvj>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	4a05      	ldr	r2, [pc, #20]	; (800e2c8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff fe47 	bl	800df4c <_ZN8touchgfx6WidgetD1Ev>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	08025930 	.word	0x08025930

0800e2cc <_ZN8touchgfx3BoxD0Ev>:
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff ffe7 	bl	800e2a8 <_ZN8touchgfx3BoxD1Ev>
 800e2da:	212c      	movs	r1, #44	; 0x2c
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f014 f8be 	bl	802245e <_ZdlPvj>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	4a05      	ldr	r2, [pc, #20]	; (800e30c <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	601a      	str	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7ff ffb1 	bl	800e264 <_ZN8touchgfx9ContainerD1Ev>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	08025470 	.word	0x08025470

0800e310 <_ZN8touchgfx13AbstractClockD0Ev>:
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff ffe7 	bl	800e2ec <_ZN8touchgfx13AbstractClockD1Ev>
 800e31e:	2130      	movs	r1, #48	; 0x30
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f014 f89c 	bl	802245e <_ZdlPvj>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	4a05      	ldr	r2, [pc, #20]	; (800e350 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fe03 	bl	800df4c <_ZN8touchgfx6WidgetD1Ev>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	08025998 	.word	0x08025998

0800e354 <_ZN8touchgfx5ImageD0Ev>:
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7ff ffe7 	bl	800e330 <_ZN8touchgfx5ImageD1Ev>
 800e362:	212c      	movs	r1, #44	; 0x2c
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f014 f87a 	bl	802245e <_ZdlPvj>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4618      	mov	r0, r3
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	4a05      	ldr	r2, [pc, #20]	; (800e394 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f7ff ffd3 	bl	800e330 <_ZN8touchgfx5ImageD1Ev>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	0802581c 	.word	0x0802581c

0800e398 <_ZN8touchgfx13TextureMapperD0Ev>:
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff ffe7 	bl	800e374 <_ZN8touchgfx13TextureMapperD1Ev>
 800e3a6:	2190      	movs	r1, #144	; 0x90
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f014 f858 	bl	802245e <_ZdlPvj>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <_ZN8touchgfx22AnimationTextureMapperD1Ev>:
 * A TextureMapper with animation capabilities. Note that the angles of the TextureMapper is
 * normalized to lie in the range [0; 2PI[ at the beginning at the animation. The end
 * angles should be relative to this and are limited to values in the range [-32.7;
 * 32.7].
 */
class AnimationTextureMapper : public TextureMapper
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	4a05      	ldr	r2, [pc, #20]	; (800e3d8 <_ZN8touchgfx22AnimationTextureMapperD1Ev+0x20>)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff ffd3 	bl	800e374 <_ZN8touchgfx13TextureMapperD1Ev>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	080256f4 	.word	0x080256f4

0800e3dc <_ZN8touchgfx22AnimationTextureMapperD0Ev>:
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff ffe7 	bl	800e3b8 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800e3ea:	21ec      	movs	r1, #236	; 0xec
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f014 f836 	bl	802245e <_ZdlPvj>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <_ZN8touchgfx11AnalogClockD1Ev>:
 * point of each hand as well as the global rotation point of the clock. You can
 * customize the behavior of the AnalogClock in respect to animations and relations
 * between the hands e.g. if the hour hand should move gradually towards the next hour
 * as the minute hand progresses (setHourHandMinuteCorrection())
 */
class AnalogClock : public AbstractClock
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	4a10      	ldr	r2, [pc, #64]	; (800e448 <_ZN8touchgfx11AnalogClockD1Ev+0x4c>)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff ffd1 	bl	800e3b8 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff ffcb 	bl	800e3b8 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	335c      	adds	r3, #92	; 0x5c
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff ffc6 	bl	800e3b8 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3330      	adds	r3, #48	; 0x30
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff ff7d 	bl	800e330 <_ZN8touchgfx5ImageD1Ev>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff ff57 	bl	800e2ec <_ZN8touchgfx13AbstractClockD1Ev>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	08025388 	.word	0x08025388

0800e44c <_ZN8touchgfx11AnalogClockD0Ev>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff ffd1 	bl	800e3fc <_ZN8touchgfx11AnalogClockD1Ev>
 800e45a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f013 fffd 	bl	802245e <_ZdlPvj>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e470:	b480      	push	{r7}
 800e472:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e476:	4618      	mov	r0, r3
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	08024ea8 	.word	0x08024ea8

0800e484 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e488:	2304      	movs	r3, #4
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	460b      	mov	r3, r1
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800e4a2:	2300      	movs	r3, #0
    }
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3714      	adds	r7, #20
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e4b8:	2300      	movs	r3, #0
    }
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e4c6:	b480      	push	{r7}
 800e4c8:	b083      	sub	sp, #12
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e4ce:	2300      	movs	r3, #0
    }
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800e4ea:	4a07      	ldr	r2, [pc, #28]	; (800e508 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e4f0:	4a06      	ldr	r2, [pc, #24]	; (800e50c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e4f6:	4a06      	ldr	r2, [pc, #24]	; (800e510 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e4f8:	88fb      	ldrh	r3, [r7, #6]
 800e4fa:	8013      	strh	r3, [r2, #0]
    }
 800e4fc:	bf00      	nop
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	200200dc 	.word	0x200200dc
 800e50c:	200200e4 	.word	0x200200e4
 800e510:	200200e0 	.word	0x200200e0

0800e514 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e514:	b40e      	push	{r1, r2, r3}
 800e516:	b580      	push	{r7, lr}
 800e518:	b085      	sub	sp, #20
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e51e:	f107 0320 	add.w	r3, r7, #32
 800e522:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	69fa      	ldr	r2, [r7, #28]
 800e528:	2100      	movs	r1, #0
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f006 fb1c 	bl	8014b68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e530:	4603      	mov	r3, r0
 800e532:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e534:	89fb      	ldrh	r3, [r7, #14]
}
 800e536:	4618      	mov	r0, r3
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e540:	b003      	add	sp, #12
 800e542:	4770      	bx	lr

0800e544 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e544:	b40c      	push	{r2, r3}
 800e546:	b580      	push	{r7, lr}
 800e548:	b084      	sub	sp, #16
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	460b      	mov	r3, r1
 800e550:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e552:	f107 031c 	add.w	r3, r7, #28
 800e556:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e558:	78f9      	ldrb	r1, [r7, #3]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	69ba      	ldr	r2, [r7, #24]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f006 fb02 	bl	8014b68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e564:	4603      	mov	r3, r0
 800e566:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e568:	89fb      	ldrh	r3, [r7, #14]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e574:	b002      	add	sp, #8
 800e576:	4770      	bx	lr

0800e578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	; 0x28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d016      	beq.n	800e5ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3322      	adds	r3, #34	; 0x22
 800e590:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	8adb      	ldrh	r3, [r3, #22]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d105      	bne.n	800e5a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e59a:	4b43      	ldr	r3, [pc, #268]	; (800e6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e59c:	4a43      	ldr	r2, [pc, #268]	; (800e6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e59e:	21c5      	movs	r1, #197	; 0xc5
 800e5a0:	4843      	ldr	r0, [pc, #268]	; (800e6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e5a2:	f014 fceb 	bl	8022f7c <__assert_func>
            return buffer[pos];
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	8a9b      	ldrh	r3, [r3, #20]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e000      	b.n	800e5bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d06a      	beq.n	800e696 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f007 fd5e 	bl	8016082 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3322      	adds	r3, #34	; 0x22
 800e5ca:	623b      	str	r3, [r7, #32]
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e5d0:	6a3b      	ldr	r3, [r7, #32]
 800e5d2:	8adb      	ldrh	r3, [r3, #22]
 800e5d4:	8bfa      	ldrh	r2, [r7, #30]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d305      	bcc.n	800e5e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e5da:	4b36      	ldr	r3, [pc, #216]	; (800e6b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e5dc:	4a36      	ldr	r2, [pc, #216]	; (800e6b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e5de:	21cb      	movs	r1, #203	; 0xcb
 800e5e0:	4833      	ldr	r0, [pc, #204]	; (800e6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e5e2:	f014 fccb 	bl	8022f7c <__assert_func>
            const uint16_t index = pos + offset;
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	8a9a      	ldrh	r2, [r3, #20]
 800e5ea:	8bfb      	ldrh	r3, [r7, #30]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e5f0:	8bbb      	ldrh	r3, [r7, #28]
 800e5f2:	2b09      	cmp	r3, #9
 800e5f4:	d801      	bhi.n	800e5fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e5f6:	8bbb      	ldrh	r3, [r7, #28]
 800e5f8:	e001      	b.n	800e5fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e5fa:	8bbb      	ldrh	r3, [r7, #28]
 800e5fc:	3b0a      	subs	r3, #10
 800e5fe:	6a3a      	ldr	r2, [r7, #32]
 800e600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e604:	f640 123f 	movw	r2, #2367	; 0x93f
 800e608:	4293      	cmp	r3, r2
 800e60a:	bf0c      	ite	eq
 800e60c:	2301      	moveq	r3, #1
 800e60e:	2300      	movne	r3, #0
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d03f      	beq.n	800e696 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	3322      	adds	r3, #34	; 0x22
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	3222      	adds	r2, #34	; 0x22
 800e61e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e620:	68ba      	ldr	r2, [r7, #8]
 800e622:	8ad2      	ldrh	r2, [r2, #22]
 800e624:	2a00      	cmp	r2, #0
 800e626:	d105      	bne.n	800e634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e628:	4b1f      	ldr	r3, [pc, #124]	; (800e6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e62a:	4a20      	ldr	r2, [pc, #128]	; (800e6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e62c:	21c5      	movs	r1, #197	; 0xc5
 800e62e:	4820      	ldr	r0, [pc, #128]	; (800e6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e630:	f014 fca4 	bl	8022f7c <__assert_func>
            return buffer[pos];
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	8a92      	ldrh	r2, [r2, #20]
 800e638:	4611      	mov	r1, r2
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e640:	613b      	str	r3, [r7, #16]
 800e642:	4613      	mov	r3, r2
 800e644:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	8adb      	ldrh	r3, [r3, #22]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d806      	bhi.n	800e65c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e64e:	4b1b      	ldr	r3, [pc, #108]	; (800e6bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e650:	4a1b      	ldr	r2, [pc, #108]	; (800e6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e652:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800e656:	4816      	ldr	r0, [pc, #88]	; (800e6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e658:	f014 fc90 	bl	8022f7c <__assert_func>
            const uint16_t index = pos + 1;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	8a9b      	ldrh	r3, [r3, #20]
 800e660:	3301      	adds	r3, #1
 800e662:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e664:	89bb      	ldrh	r3, [r7, #12]
 800e666:	2b09      	cmp	r3, #9
 800e668:	d801      	bhi.n	800e66e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e66a:	89bb      	ldrh	r3, [r7, #12]
 800e66c:	e000      	b.n	800e670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e66e:	2300      	movs	r3, #0
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	89f9      	ldrh	r1, [r7, #14]
 800e674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e678:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	3322      	adds	r3, #34	; 0x22
 800e67e:	61bb      	str	r3, [r7, #24]
 800e680:	f640 133f 	movw	r3, #2367	; 0x93f
 800e684:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	8a9b      	ldrh	r3, [r3, #20]
 800e68a:	4619      	mov	r1, r3
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	8afa      	ldrh	r2, [r7, #22]
 800e690:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e694:	bf00      	nop
        }
    }
    return getNextChar();
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f007 fbf6 	bl	8015e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e69c:	4603      	mov	r3, r0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3728      	adds	r7, #40	; 0x28
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0802453c 	.word	0x0802453c
 800e6ac:	08024548 	.word	0x08024548
 800e6b0:	080245f4 	.word	0x080245f4
 800e6b4:	0802463c 	.word	0x0802463c
 800e6b8:	0802464c 	.word	0x0802464c
 800e6bc:	08024720 	.word	0x08024720
 800e6c0:	0802472c 	.word	0x0802472c

0800e6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f007 fba2 	bl	8015e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e6d2:	bf00      	nop
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
	...

0800e6dc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e6dc:	b590      	push	{r4, r7, lr}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e6ea:	88fb      	ldrh	r3, [r7, #6]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d127      	bne.n	800e740 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e6f0:	88fb      	ldrh	r3, [r7, #6]
 800e6f2:	4a1e      	ldr	r2, [pc, #120]	; (800e76c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d016      	beq.n	800e72a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	4a1b      	ldr	r2, [pc, #108]	; (800e76c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e704:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4413      	add	r3, r2
 800e70e:	4a18      	ldr	r2, [pc, #96]	; (800e770 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e710:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	4413      	add	r3, r2
 800e71a:	4a16      	ldr	r2, [pc, #88]	; (800e774 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e71c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	4413      	add	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	e00a      	b.n	800e740 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e72a:	4b11      	ldr	r3, [pc, #68]	; (800e770 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e72c:	4a12      	ldr	r2, [pc, #72]	; (800e778 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e72e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e730:	4a12      	ldr	r2, [pc, #72]	; (800e77c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e734:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e736:	88fb      	ldrh	r3, [r7, #6]
 800e738:	4a11      	ldr	r2, [pc, #68]	; (800e780 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e73e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e746:	4a0f      	ldr	r2, [pc, #60]	; (800e784 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e748:	88fb      	ldrh	r3, [r7, #6]
 800e74a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e74c:	f000 f824 	bl	800e798 <_ZN17TypedTextDatabase8getFontsEv>
 800e750:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e752:	f000 f819 	bl	800e788 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e756:	4603      	mov	r3, r0
 800e758:	461a      	mov	r2, r3
 800e75a:	4621      	mov	r1, r4
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff febd 	bl	800e4dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e762:	bf00      	nop
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	bd90      	pop	{r4, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	2001f9a0 	.word	0x2001f9a0
 800e770:	2001f9a8 	.word	0x2001f9a8
 800e774:	2001f9ac 	.word	0x2001f9ac
 800e778:	080623e4 	.word	0x080623e4
 800e77c:	080623e0 	.word	0x080623e0
 800e780:	080623ec 	.word	0x080623ec
 800e784:	2001f9a4 	.word	0x2001f9a4

0800e788 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800e788:	b480      	push	{r7}
 800e78a:	af00      	add	r7, sp, #0
    return 0;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800e798:	b480      	push	{r7}
 800e79a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800e79c:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	2001f9b0 	.word	0x2001f9b0

0800e7ac <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d113      	bne.n	800e7e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d10e      	bne.n	800e7e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800e7c6:	f7fe fb69 	bl	800ce9c <_Z23getFont_verdana_20_4bppv>
 800e7ca:	4603      	mov	r3, r0
};
 800e7cc:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e7ce:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800e7d0:	f7fe fbbe 	bl	800cf50 <_Z23getFont_verdana_40_4bppv>
 800e7d4:	4603      	mov	r3, r0
};
 800e7d6:	4a05      	ldr	r2, [pc, #20]	; (800e7ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e7d8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800e7da:	f7fe fb05 	bl	800cde8 <_Z23getFont_verdana_10_4bppv>
 800e7de:	4603      	mov	r3, r0
};
 800e7e0:	4a02      	ldr	r2, [pc, #8]	; (800e7ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e7e2:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800e7e4:	bf00      	nop
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	2001f9b0 	.word	0x2001f9b0

0800e7f0 <_GLOBAL__sub_I_touchgfx_fonts>:
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7f8:	2001      	movs	r0, #1
 800e7fa:	f7ff ffd7 	bl	800e7ac <_Z41__static_initialization_and_destruction_0ii>
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	4a05      	ldr	r2, [pc, #20]	; (800e820 <_ZN19FrontendApplicationD1Ev+0x20>)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	601a      	str	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe fdfb 	bl	800d40c <_ZN23FrontendApplicationBaseD1Ev>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	08024f5c 	.word	0x08024f5c

0800e824 <_ZN19FrontendApplicationD0Ev>:
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff ffe7 	bl	800e800 <_ZN19FrontendApplicationD1Ev>
 800e832:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f013 fe11 	bl	802245e <_ZdlPvj>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e854:	4618      	mov	r0, r3
 800e856:	f000 f82d 	bl	800e8b4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f005 fabb 	bl	8013dd8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800e862:	bf00      	nop
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fe14 	bl	800d4ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800e884:	4a03      	ldr	r2, [pc, #12]	; (800e894 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	601a      	str	r2, [r3, #0]
{

}
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	08024f5c 	.word	0x08024f5c

0800e898 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	601a      	str	r2, [r3, #0]
{

}
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <_ZN5Model4tickEv>:

void Model::tick()
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]

}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
    {
    }
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
    {
    }
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
    {
 800e8f8:	4a04      	ldr	r2, [pc, #16]	; (800e90c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	601a      	str	r2, [r3, #0]
    }
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	08024fe0 	.word	0x08024fe0

0800e910 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
    }
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff ffe9 	bl	800e8f0 <_ZN8touchgfx9PresenterD1Ev>
 800e91e:	2104      	movs	r1, #4
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f013 fd9c 	bl	802245e <_ZdlPvj>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
    {
 800e938:	4a04      	ldr	r2, [pc, #16]	; (800e94c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
    }
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4618      	mov	r0, r3
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	08024fe0 	.word	0x08024fe0

0800e950 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	4a06      	ldr	r2, [pc, #24]	; (800e974 <_ZN13ModelListenerC1Ev+0x24>)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	605a      	str	r2, [r3, #4]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4618      	mov	r0, r3
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	08024fd0 	.word	0x08024fd0

0800e978 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	4a04      	ldr	r2, [pc, #16]	; (800e994 <_ZN13ModelListenerD1Ev+0x1c>)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	08024fd0 	.word	0x08024fd0

0800e998 <_ZN13ModelListenerD0Ev>:
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff ffe9 	bl	800e978 <_ZN13ModelListenerD1Ev>
 800e9a6:	2108      	movs	r1, #8
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f013 fd58 	bl	802245e <_ZdlPvj>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	4a09      	ldr	r2, [pc, #36]	; (800e9e8 <_ZN16Screen1PresenterD1Ev+0x30>)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	4a09      	ldr	r2, [pc, #36]	; (800e9ec <_ZN16Screen1PresenterD1Ev+0x34>)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	605a      	str	r2, [r3, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff ffd1 	bl	800e978 <_ZN13ModelListenerD1Ev>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff ff89 	bl	800e8f0 <_ZN8touchgfx9PresenterD1Ev>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	08024fa8 	.word	0x08024fa8
 800e9ec:	08024fc0 	.word	0x08024fc0

0800e9f0 <_ZThn4_N16Screen1PresenterD1Ev>:
 800e9f0:	f1a0 0004 	sub.w	r0, r0, #4
 800e9f4:	e7e0      	b.n	800e9b8 <_ZN16Screen1PresenterD1Ev>
 800e9f6:	bf00      	nop

0800e9f8 <_ZN16Screen1PresenterD0Ev>:
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff ffd9 	bl	800e9b8 <_ZN16Screen1PresenterD1Ev>
 800ea06:	2110      	movs	r1, #16
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f013 fd28 	bl	802245e <_ZdlPvj>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <_ZThn4_N16Screen1PresenterD0Ev>:
 800ea18:	f1a0 0004 	sub.w	r0, r0, #4
 800ea1c:	e7ec      	b.n	800e9f8 <_ZN16Screen1PresenterD0Ev>
	...

0800ea20 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
    : view(v)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7ff ff7f 	bl	800e930 <_ZN8touchgfx9PresenterC1Ev>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3304      	adds	r3, #4
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7ff ff8a 	bl	800e950 <_ZN13ModelListenerC1Ev>
 800ea3c:	4a06      	ldr	r2, [pc, #24]	; (800ea58 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	4a06      	ldr	r2, [pc, #24]	; (800ea5c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	605a      	str	r2, [r3, #4]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	60da      	str	r2, [r3, #12]
{

}
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	08024fa8 	.word	0x08024fa8
 800ea5c:	08024fc0 	.word	0x08024fc0

0800ea60 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]

}
 800ea68:	bf00      	nop
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]

}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	4a05      	ldr	r2, [pc, #20]	; (800eaa8 <_ZN11Screen1ViewD1Ev+0x20>)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff fb8f 	bl	800e1bc <_ZN15Screen1ViewBaseD1Ev>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	08024ff8 	.word	0x08024ff8

0800eaac <_ZN11Screen1ViewD0Ev>:
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff ffe7 	bl	800ea88 <_ZN11Screen1ViewD1Ev>
 800eaba:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f013 fccd 	bl	802245e <_ZdlPvj>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4618      	mov	r0, r3
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff faac 	bl	800e038 <_ZN15Screen1ViewBaseC1Ev>
 800eae0:	4a03      	ldr	r2, [pc, #12]	; (800eaf0 <_ZN11Screen1ViewC1Ev+0x20>)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	601a      	str	r2, [r3, #0]
{

}
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4618      	mov	r0, r3
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	08024ff8 	.word	0x08024ff8

0800eaf4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fb8f 	bl	800e222 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff f9b4 	bl	800de84 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800eb1c:	bf00      	nop
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
    {
 800eb2c:	4a04      	ldr	r2, [pc, #16]	; (800eb40 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	601a      	str	r2, [r3, #0]
    }
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	08025044 	.word	0x08025044

0800eb44 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    }
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff ffe9 	bl	800eb24 <_ZN8touchgfx15TouchControllerD1Ev>
 800eb52:	2104      	movs	r1, #4
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f013 fc82 	bl	802245e <_ZdlPvj>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800eb6c:	bf00      	nop
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
	...

0800eb94 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	4a05      	ldr	r2, [pc, #20]	; (800ebb4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff ffbd 	bl	800eb24 <_ZN8touchgfx15TouchControllerD1Ev>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	0802502c 	.word	0x0802502c

0800ebb8 <_ZN20STM32TouchControllerD0Ev>:
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ffe7 	bl	800eb94 <_ZN20STM32TouchControllerD1Ev>
 800ebc6:	2104      	movs	r1, #4
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f013 fc48 	bl	802245e <_ZdlPvj>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800ebd8:	b480      	push	{r7}
 800ebda:	af00      	add	r7, sp, #0

}
 800ebdc:	bf00      	nop
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
	...

0800ebe8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d80c      	bhi.n	800ec12 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800ebf8:	a201      	add	r2, pc, #4	; (adr r2, 800ec00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800ebfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebfe:	bf00      	nop
 800ec00:	0800ec11 	.word	0x0800ec11
 800ec04:	0800ec11 	.word	0x0800ec11
 800ec08:	0800ec11 	.word	0x0800ec11
 800ec0c:	0800ec11 	.word	0x0800ec11
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800ec10:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800ec12:	bf00      	nop
 800ec14:	370c      	adds	r7, #12
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop

0800ec20 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	4603      	mov	r3, r0
 800ec28:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	2b03      	cmp	r3, #3
 800ec2e:	d80c      	bhi.n	800ec4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800ec30:	a201      	add	r2, pc, #4	; (adr r2, 800ec38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800ec32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec36:	bf00      	nop
 800ec38:	0800ec49 	.word	0x0800ec49
 800ec3c:	0800ec49 	.word	0x0800ec49
 800ec40:	0800ec49 	.word	0x0800ec49
 800ec44:	0800ec49 	.word	0x0800ec49
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800ec48:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800ec4a:	bf00      	nop
 800ec4c:	370c      	adds	r7, #12
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop

0800ec58 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d80c      	bhi.n	800ec82 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800ec68:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800ec6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6e:	bf00      	nop
 800ec70:	0800ec81 	.word	0x0800ec81
 800ec74:	0800ec81 	.word	0x0800ec81
 800ec78:	0800ec81 	.word	0x0800ec81
 800ec7c:	0800ec81 	.word	0x0800ec81
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800ec80:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800ec82:	bf00      	nop
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop

0800ec90 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
    {
 800ec98:	4a04      	ldr	r2, [pc, #16]	; (800ecac <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	601a      	str	r2, [r3, #0]
    }
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	080255a8 	.word	0x080255a8

0800ecb0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
    }
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff ffe9 	bl	800ec90 <_ZN8touchgfx3HALD1Ev>
 800ecbe:	217c      	movs	r1, #124	; 0x7c
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f013 fbcc 	bl	802245e <_ZdlPvj>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	460b      	mov	r3, r1
 800ed02:	807b      	strh	r3, [r7, #2]
 800ed04:	4613      	mov	r3, r2
 800ed06:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800ed08:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	887a      	ldrh	r2, [r7, #2]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d304      	bcc.n	800ed1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800ed12:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800ed14:	881b      	ldrh	r3, [r3, #0]
 800ed16:	883a      	ldrh	r2, [r7, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d205      	bcs.n	800ed28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800ed1e:	4a0a      	ldr	r2, [pc, #40]	; (800ed48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800ed20:	219e      	movs	r1, #158	; 0x9e
 800ed22:	480a      	ldr	r0, [pc, #40]	; (800ed4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800ed24:	f014 f92a 	bl	8022f7c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800ed28:	4a09      	ldr	r2, [pc, #36]	; (800ed50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800ed2a:	887b      	ldrh	r3, [r7, #2]
 800ed2c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800ed2e:	4a09      	ldr	r2, [pc, #36]	; (800ed54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800ed30:	883b      	ldrh	r3, [r7, #0]
 800ed32:	8013      	strh	r3, [r2, #0]
    }
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20020080 	.word	0x20020080
 800ed40:	20020082 	.word	0x20020082
 800ed44:	080247e0 	.word	0x080247e0
 800ed48:	08024844 	.word	0x08024844
 800ed4c:	08024888 	.word	0x08024888
 800ed50:	20020086 	.word	0x20020086
 800ed54:	20020088 	.word	0x20020088

0800ed58 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d009      	beq.n	800ed7e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4610      	mov	r0, r2
 800ed78:	4798      	blx	r3
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	e000      	b.n	800ed80 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800ed7e:	2300      	movs	r3, #0
    }
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800ed96:	3301      	adds	r3, #1
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f002 fe91 	bl	8011adc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	33ac      	adds	r3, #172	; 0xac
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	4798      	blx	r3
    }
 800edc6:	bf00      	nop
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800edd8:	2300      	movs	r3, #0
    }
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
	...

0800ede8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800edfc:	4b0f      	ldr	r3, [pc, #60]	; (800ee3c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800edfe:	4a10      	ldr	r2, [pc, #64]	; (800ee40 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800ee00:	f240 21d2 	movw	r1, #722	; 0x2d2
 800ee04:	480f      	ldr	r0, [pc, #60]	; (800ee44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800ee06:	f014 f8b9 	bl	8022f7c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bf14      	ite	ne
 800ee1c:	2301      	movne	r3, #1
 800ee1e:	2300      	moveq	r3, #0
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800ee24:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	338c      	adds	r3, #140	; 0x8c
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	4798      	blx	r3
    }
 800ee34:	bf00      	nop
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	080248cc 	.word	0x080248cc
 800ee40:	08024904 	.word	0x08024904
 800ee44:	08024888 	.word	0x08024888
 800ee48:	2002008a 	.word	0x2002008a

0800ee4c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	bf14      	ite	ne
 800ee62:	2301      	movne	r3, #1
 800ee64:	2300      	moveq	r3, #0
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800ee6a:	701a      	strb	r2, [r3, #0]
    }
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	2002008b 	.word	0x2002008b

0800ee7c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ee84:	2300      	movs	r3, #0
    }
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b082      	sub	sp, #8
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d004      	beq.n	800eeb0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeaa:	887a      	ldrh	r2, [r7, #2]
 800eeac:	4610      	mov	r0, r2
 800eeae:	4798      	blx	r3
        }
    }
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800eec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800eec4:	4618      	mov	r0, r3
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3318      	adds	r3, #24
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4610      	mov	r0, r2
 800eee8:	4798      	blx	r3
 800eeea:	4603      	mov	r3, r0
    }
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 800eefc:	4b0e      	ldr	r3, [pc, #56]	; (800ef38 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00c      	beq.n	800ef1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	3330      	adds	r3, #48	; 0x30
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	4798      	blx	r3
 800ef10:	4602      	mov	r2, r0
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d101      	bne.n	800ef1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e000      	b.n	800ef20 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	e001      	b.n	800ef2e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	2002008a 	.word	0x2002008a

0800ef3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d011      	beq.n	800ef78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800ef54:	4b14      	ldr	r3, [pc, #80]	; (800efa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d11e      	bne.n	800ef9a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800ef5c:	4b13      	ldr	r3, [pc, #76]	; (800efac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800ef62:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ef64:	881a      	ldrh	r2, [r3, #0]
 800ef66:	4b11      	ldr	r3, [pc, #68]	; (800efac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ef68:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800ef6a:	4a11      	ldr	r2, [pc, #68]	; (800efb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ef6c:	89bb      	ldrh	r3, [r7, #12]
 800ef6e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800ef70:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ef72:	2201      	movs	r2, #1
 800ef74:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800ef76:	e010      	b.n	800ef9a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800ef78:	4b0b      	ldr	r3, [pc, #44]	; (800efa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00c      	beq.n	800ef9a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800ef80:	4b0a      	ldr	r3, [pc, #40]	; (800efac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800ef86:	4b0a      	ldr	r3, [pc, #40]	; (800efb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ef88:	881a      	ldrh	r2, [r3, #0]
 800ef8a:	4b08      	ldr	r3, [pc, #32]	; (800efac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ef8c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800ef8e:	4a08      	ldr	r2, [pc, #32]	; (800efb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ef90:	89fb      	ldrh	r3, [r7, #14]
 800ef92:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800ef94:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	701a      	strb	r2, [r3, #0]
    }
 800ef9a:	bf00      	nop
 800ef9c:	3714      	adds	r7, #20
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	20020084 	.word	0x20020084
 800efac:	20020082 	.word	0x20020082
 800efb0:	20020080 	.word	0x20020080

0800efb4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
    {
    }
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
    {
    }
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f001 ffee 	bl	8010fc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800efec:	bf00      	nop
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	4a05      	ldr	r2, [pc, #20]	; (800f014 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	f7ff fe43 	bl	800ec90 <_ZN8touchgfx3HALD1Ev>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4618      	mov	r0, r3
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	0802527c 	.word	0x0802527c

0800f018 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7ff ffe7 	bl	800eff4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f026:	217c      	movs	r1, #124	; 0x7c
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f013 fa18 	bl	802245e <_ZdlPvj>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4618      	mov	r0, r3
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff ffca 	bl	800efdc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f048:	bf00      	nop
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <touchgfxSignalVSync>:
#include <touchgfx/hal/OSWrappers.hpp>
#include "main.h"

extern "C"
void touchgfxSignalVSync(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 800f054:	f7fe f892 	bl	800d17c <_ZN8touchgfx3HAL11getInstanceEv>
 800f058:	4603      	mov	r3, r0
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff fe94 	bl	800ed88 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 800f060:	f000 fab0 	bl	800f5c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800f064:	bf00      	nop
 800f066:	bd80      	pop	{r7, pc}

0800f068 <__ST7789H2_WriteData>:
#define LCD_REGISTER_ADDR FMC_BANK1_1
#define LCD_DATA_ADDR     (FMC_BANK1_1 | 0x00000002UL)

extern "C"
void __ST7789H2_WriteData(uint16_t *pData, uint16_t Length)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	807b      	strh	r3, [r7, #2]
     uint16_t i = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	81fb      	strh	r3, [r7, #14]
     while (i < Length)
 800f078:	89fa      	ldrh	r2, [r7, #14]
 800f07a:	887b      	ldrh	r3, [r7, #2]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d209      	bcs.n	800f094 <__ST7789H2_WriteData+0x2c>
     {
         /* Write data value */
         *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f080:	89fb      	ldrh	r3, [r7, #14]
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	81fa      	strh	r2, [r7, #14]
 800f086:	005b      	lsls	r3, r3, #1
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	4413      	add	r3, r2
 800f08c:	4a04      	ldr	r2, [pc, #16]	; (800f0a0 <__ST7789H2_WriteData+0x38>)
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	8013      	strh	r3, [r2, #0]
     while (i < Length)
 800f092:	e7f1      	b.n	800f078 <__ST7789H2_WriteData+0x10>
     }
}
 800f094:	bf00      	nop
 800f096:	3714      	adds	r7, #20
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr
 800f0a0:	60000002 	.word	0x60000002

0800f0a4 <__ST7789H2_ReadData>:

extern "C"
void __ST7789H2_ReadData(uint16_t *pData, uint16_t Length)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	81fb      	strh	r3, [r7, #14]
    while (i < Length)
 800f0b4:	89fa      	ldrh	r2, [r7, #14]
 800f0b6:	887b      	ldrh	r3, [r7, #2]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d209      	bcs.n	800f0d0 <__ST7789H2_ReadData+0x2c>
    {
        /* Read value */
        pData[i++] = *(uint16_t *)LCD_DATA_ADDR;
 800f0bc:	4907      	ldr	r1, [pc, #28]	; (800f0dc <__ST7789H2_ReadData+0x38>)
 800f0be:	89fb      	ldrh	r3, [r7, #14]
 800f0c0:	1c5a      	adds	r2, r3, #1
 800f0c2:	81fa      	strh	r2, [r7, #14]
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	880a      	ldrh	r2, [r1, #0]
 800f0cc:	801a      	strh	r2, [r3, #0]
    while (i < Length)
 800f0ce:	e7f1      	b.n	800f0b4 <__ST7789H2_ReadData+0x10>
    }
}
 800f0d0:	bf00      	nop
 800f0d2:	3714      	adds	r7, #20
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	60000002 	.word	0x60000002

0800f0e0 <__ST7789H2_WriteReg>:

extern "C"
void __ST7789H2_WriteReg(uint16_t Reg, uint16_t *pData, uint16_t Length)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	6039      	str	r1, [r7, #0]
 800f0ea:	80fb      	strh	r3, [r7, #6]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	80bb      	strh	r3, [r7, #4]
    uint16_t i = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	81fb      	strh	r3, [r7, #14]
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 800f0f4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800f0f8:	88fb      	ldrh	r3, [r7, #6]
 800f0fa:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f0fc:	89fa      	ldrh	r2, [r7, #14]
 800f0fe:	88bb      	ldrh	r3, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d209      	bcs.n	800f118 <__ST7789H2_WriteReg+0x38>
    {
        /* Write data value */
        *(uint16_t *)LCD_DATA_ADDR = pData[i++];
 800f104:	89fb      	ldrh	r3, [r7, #14]
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	81fa      	strh	r2, [r7, #14]
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	4413      	add	r3, r2
 800f110:	4a04      	ldr	r2, [pc, #16]	; (800f124 <__ST7789H2_WriteReg+0x44>)
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	8013      	strh	r3, [r2, #0]
    while (i < Length)
 800f116:	e7f1      	b.n	800f0fc <__ST7789H2_WriteReg+0x1c>
    }
}
 800f118:	bf00      	nop
 800f11a:	3714      	adds	r7, #20
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	60000002 	.word	0x60000002

0800f128 <__ST7789H2_GetOrientation>:
    }
}

extern "C"
uint32_t __ST7789H2_GetOrientation(void)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
    uint32_t Orientation = LCD_ORIENTATION_LANDSCAPE_ROT180;
 800f12e:	2303      	movs	r3, #3
 800f130:	607b      	str	r3, [r7, #4]
    //Lcd_Drv[0]->GetOrientation(Lcd_CompObj[0], &Orientation);

    return Orientation;
 800f132:	687b      	ldr	r3, [r7, #4]
}
 800f134:	4618      	mov	r0, r3
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <__ST7789H2_SetDisplayWindow>:

extern "C"
void __ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800f140:	b590      	push	{r4, r7, lr}
 800f142:	b089      	sub	sp, #36	; 0x24
 800f144:	af00      	add	r7, sp, #0
 800f146:	4604      	mov	r4, r0
 800f148:	4608      	mov	r0, r1
 800f14a:	4611      	mov	r1, r2
 800f14c:	461a      	mov	r2, r3
 800f14e:	4623      	mov	r3, r4
 800f150:	80fb      	strh	r3, [r7, #6]
 800f152:	4603      	mov	r3, r0
 800f154:	80bb      	strh	r3, [r7, #4]
 800f156:	460b      	mov	r3, r1
 800f158:	807b      	strh	r3, [r7, #2]
 800f15a:	4613      	mov	r3, r2
 800f15c:	803b      	strh	r3, [r7, #0]
    //if (refreshRect != Rect(Xpos, Ypos, Width, Height))
    {
        // Check ST7789H2_DrawBitmap() implementation
        uint8_t  parameter[8];
        uint32_t Xstart, Xstop, Ystart, Ystop;
        static uint32_t Orientation = __ST7789H2_GetOrientation(); // Fixed Orientation
 800f15e:	4b55      	ldr	r3, [pc, #340]	; (800f2b4 <__ST7789H2_SetDisplayWindow+0x174>)
 800f160:	e8d3 3f8f 	ldab	r3, [r3]
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bf0c      	ite	eq
 800f16e:	2301      	moveq	r3, #1
 800f170:	2300      	movne	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d012      	beq.n	800f19e <__ST7789H2_SetDisplayWindow+0x5e>
 800f178:	484e      	ldr	r0, [pc, #312]	; (800f2b4 <__ST7789H2_SetDisplayWindow+0x174>)
 800f17a:	f013 f972 	bl	8022462 <__cxa_guard_acquire>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	bf14      	ite	ne
 800f184:	2301      	movne	r3, #1
 800f186:	2300      	moveq	r3, #0
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d007      	beq.n	800f19e <__ST7789H2_SetDisplayWindow+0x5e>
 800f18e:	f7ff ffcb 	bl	800f128 <__ST7789H2_GetOrientation>
 800f192:	4603      	mov	r3, r0
 800f194:	4a48      	ldr	r2, [pc, #288]	; (800f2b8 <__ST7789H2_SetDisplayWindow+0x178>)
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	4846      	ldr	r0, [pc, #280]	; (800f2b4 <__ST7789H2_SetDisplayWindow+0x174>)
 800f19a:	f013 f96e 	bl	802247a <__cxa_guard_release>

        /* Compute new Y start and stop values */
        if (Orientation == LCD_ORIENTATION_PORTRAIT)
 800f19e:	4b46      	ldr	r3, [pc, #280]	; (800f2b8 <__ST7789H2_SetDisplayWindow+0x178>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10e      	bne.n	800f1c4 <__ST7789H2_SetDisplayWindow+0x84>
        {
            Ystart = Ypos;
 800f1a6:	88bb      	ldrh	r3, [r7, #4]
 800f1a8:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f1aa:	88ba      	ldrh	r2, [r7, #4]
 800f1ac:	883b      	ldrh	r3, [r7, #0]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f1b4:	88fb      	ldrh	r3, [r7, #6]
 800f1b6:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f1b8:	88fa      	ldrh	r2, [r7, #6]
 800f1ba:	887b      	ldrh	r3, [r7, #2]
 800f1bc:	4413      	add	r3, r2
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	61bb      	str	r3, [r7, #24]
 800f1c2:	e039      	b.n	800f238 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 800f1c4:	4b3c      	ldr	r3, [pc, #240]	; (800f2b8 <__ST7789H2_SetDisplayWindow+0x178>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b02      	cmp	r3, #2
 800f1ca:	d10f      	bne.n	800f1ec <__ST7789H2_SetDisplayWindow+0xac>
        {
            Ystart = Ypos;
 800f1cc:	88bb      	ldrh	r3, [r7, #4]
 800f1ce:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f1d0:	88ba      	ldrh	r2, [r7, #4]
 800f1d2:	883b      	ldrh	r3, [r7, #0]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	613b      	str	r3, [r7, #16]
            Xstart = Xpos + 0x50U;
 800f1da:	88fb      	ldrh	r3, [r7, #6]
 800f1dc:	3350      	adds	r3, #80	; 0x50
 800f1de:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1 + 0x50U;
 800f1e0:	88fa      	ldrh	r2, [r7, #6]
 800f1e2:	887b      	ldrh	r3, [r7, #2]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	334f      	adds	r3, #79	; 0x4f
 800f1e8:	61bb      	str	r3, [r7, #24]
 800f1ea:	e025      	b.n	800f238 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 800f1ec:	4b32      	ldr	r3, [pc, #200]	; (800f2b8 <__ST7789H2_SetDisplayWindow+0x178>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d10f      	bne.n	800f214 <__ST7789H2_SetDisplayWindow+0xd4>
        {
            Ystart = Ypos + 0x50U;
 800f1f4:	88bb      	ldrh	r3, [r7, #4]
 800f1f6:	3350      	adds	r3, #80	; 0x50
 800f1f8:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1 + 0x50U;
 800f1fa:	88ba      	ldrh	r2, [r7, #4]
 800f1fc:	883b      	ldrh	r3, [r7, #0]
 800f1fe:	4413      	add	r3, r2
 800f200:	334f      	adds	r3, #79	; 0x4f
 800f202:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f204:	88fb      	ldrh	r3, [r7, #6]
 800f206:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f208:	88fa      	ldrh	r2, [r7, #6]
 800f20a:	887b      	ldrh	r3, [r7, #2]
 800f20c:	4413      	add	r3, r2
 800f20e:	3b01      	subs	r3, #1
 800f210:	61bb      	str	r3, [r7, #24]
 800f212:	e011      	b.n	800f238 <__ST7789H2_SetDisplayWindow+0xf8>
        }
        else if (Orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800f214:	4b28      	ldr	r3, [pc, #160]	; (800f2b8 <__ST7789H2_SetDisplayWindow+0x178>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b03      	cmp	r3, #3
 800f21a:	d10d      	bne.n	800f238 <__ST7789H2_SetDisplayWindow+0xf8>
        {
            Ystart = Ypos;
 800f21c:	88bb      	ldrh	r3, [r7, #4]
 800f21e:	617b      	str	r3, [r7, #20]
            Ystop  = Ypos + Height - 1;
 800f220:	88ba      	ldrh	r2, [r7, #4]
 800f222:	883b      	ldrh	r3, [r7, #0]
 800f224:	4413      	add	r3, r2
 800f226:	3b01      	subs	r3, #1
 800f228:	613b      	str	r3, [r7, #16]
            Xstart = Xpos;
 800f22a:	88fb      	ldrh	r3, [r7, #6]
 800f22c:	61fb      	str	r3, [r7, #28]
            Xstop  = Xpos + Width - 1;
 800f22e:	88fa      	ldrh	r2, [r7, #6]
 800f230:	887b      	ldrh	r3, [r7, #2]
 800f232:	4413      	add	r3, r2
 800f234:	3b01      	subs	r3, #1
 800f236:	61bb      	str	r3, [r7, #24]
        }

        /* CASET: Column Address Set */
        parameter[0] = (uint8_t)(Xstart >> 8);           /* XS[15:8] */
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	0a1b      	lsrs	r3, r3, #8
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f240:	2300      	movs	r3, #0
 800f242:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Xstart;                 /* XS[7:0] */
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f24a:	2300      	movs	r3, #0
 800f24c:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Xstop >> 8);            /* XE[15:8] */
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	0a1b      	lsrs	r3, r3, #8
 800f252:	b2db      	uxtb	r3, r3
 800f254:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f256:	2300      	movs	r3, #0
 800f258:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Xstop;                  /* XE[7:0] */
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f260:	2300      	movs	r3, #0
 800f262:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_CASET, (uint16_t *)parameter, 4);
 800f264:	f107 0308 	add.w	r3, r7, #8
 800f268:	2204      	movs	r2, #4
 800f26a:	4619      	mov	r1, r3
 800f26c:	202a      	movs	r0, #42	; 0x2a
 800f26e:	f7ff ff37 	bl	800f0e0 <__ST7789H2_WriteReg>

        /* RASET: Row Address Set */
        parameter[0] = (uint8_t)(Ystart >> 8);           /* YS[15:8] */
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	0a1b      	lsrs	r3, r3, #8
 800f276:	b2db      	uxtb	r3, r3
 800f278:	723b      	strb	r3, [r7, #8]
        parameter[1] = 0x00;
 800f27a:	2300      	movs	r3, #0
 800f27c:	727b      	strb	r3, [r7, #9]
        parameter[2] = (uint8_t) Ystart;                 /* YS[7:0] */
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	72bb      	strb	r3, [r7, #10]
        parameter[3] = 0x00;
 800f284:	2300      	movs	r3, #0
 800f286:	72fb      	strb	r3, [r7, #11]
        parameter[4] = (uint8_t)(Ystop >> 8);            /* YE[15:8] */
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	0a1b      	lsrs	r3, r3, #8
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	733b      	strb	r3, [r7, #12]
        parameter[5] = 0x00;
 800f290:	2300      	movs	r3, #0
 800f292:	737b      	strb	r3, [r7, #13]
        parameter[6] = (uint8_t) Ystop;                  /* YE[7:0] */
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	b2db      	uxtb	r3, r3
 800f298:	73bb      	strb	r3, [r7, #14]
        parameter[7] = 0x00;
 800f29a:	2300      	movs	r3, #0
 800f29c:	73fb      	strb	r3, [r7, #15]
        __ST7789H2_WriteReg(ST7789V_RASET, (uint16_t *)parameter, 4);
 800f29e:	f107 0308 	add.w	r3, r7, #8
 800f2a2:	2204      	movs	r2, #4
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	202b      	movs	r0, #43	; 0x2b
 800f2a8:	f7ff ff1a 	bl	800f0e0 <__ST7789H2_WriteReg>

        //refreshRect = Rect(Xpos, Ypos, Width, Height);
    }
}
 800f2ac:	bf00      	nop
 800f2ae:	3724      	adds	r7, #36	; 0x24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd90      	pop	{r4, r7, pc}
 800f2b4:	2001f9c0 	.word	0x2001f9c0
 800f2b8:	2001f9bc 	.word	0x2001f9bc

0800f2bc <_ZN11TouchGFXHAL10initializeEv>:
/*///////////////////////////////////////////////////////////////*/

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 ffaa 	bl	8010220 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    /* Display ON command */
    __ST7789H2_WriteReg(ST7789V_DISPLAY_ON, (uint16_t*)NULL, 0);
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	2029      	movs	r0, #41	; 0x29
 800f2d2:	f7ff ff05 	bl	800f0e0 <__ST7789H2_WriteReg>

    /* Sleep Out command */
    __ST7789H2_WriteReg(ST7789V_SLEEP_OUT, (uint16_t*)NULL, 0);
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	2100      	movs	r1, #0
 800f2da:	2011      	movs	r0, #17
 800f2dc:	f7ff ff00 	bl	800f0e0 <__ST7789H2_WriteReg>
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 fff8 	bl	80102e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f2f8:	4603      	mov	r3, r0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	4618      	mov	r0, r3
 800f312:	f000 fff7 	bl	8010304 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f316:	bf00      	nop
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f000 fff4 	bl	801031a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    this->copyFrameBufferBlockToLCD(rect);
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	6819      	ldr	r1, [r3, #0]
 800f336:	460a      	mov	r2, r1
 800f338:	6859      	ldr	r1, [r3, #4]
 800f33a:	460b      	mov	r3, r1
 800f33c:	4611      	mov	r1, r2
 800f33e:	461a      	mov	r2, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 f805 	bl	800f350 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>
}
 800f346:	bf00      	nop
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect rect)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b088      	sub	sp, #32
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	1d3b      	adds	r3, r7, #4
 800f35a:	e883 0006 	stmia.w	r3, {r1, r2}
    uint16_t tmp;

    // Use default implementation (CPU copy!).
    // This can be accelerated using regular DMA hardware
    uint16_t *ptr = getClientFrameBuffer() + rect.x + rect.y * DISPLAY_WIDTH;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff fdc7 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f366:	4602      	mov	r2, r0
 800f368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f36c:	4619      	mov	r1, r3
 800f36e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f372:	4618      	mov	r0, r3
 800f374:	4b20      	ldr	r3, [pc, #128]	; (800f3f8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	fb00 f303 	mul.w	r3, r0, r3
 800f37c:	440b      	add	r3, r1
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	4413      	add	r3, r2
 800f382:	61bb      	str	r3, [r7, #24]

    /* Set Cursor */
    __ST7789H2_SetDisplayWindow(rect.x, rect.y, rect.width, rect.height);
 800f384:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f388:	b298      	uxth	r0, r3
 800f38a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f38e:	b299      	uxth	r1, r3
 800f390:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f394:	b29a      	uxth	r2, r3
 800f396:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	f7ff fed0 	bl	800f140 <__ST7789H2_SetDisplayWindow>

    /* Prepare to write */
    __ST7789H2_WriteReg(ST7789V_GRAM, (uint16_t*)NULL, 0);
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	202c      	movs	r0, #44	; 0x2c
 800f3a6:	f7ff fe9b 	bl	800f0e0 <__ST7789H2_WriteReg>

    /* Read dummy data */
    __ST7789H2_ReadData(&tmp, 1);
 800f3aa:	f107 0316 	add.w	r3, r7, #22
 800f3ae:	2101      	movs	r1, #1
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fe77 	bl	800f0a4 <__ST7789H2_ReadData>

    for (int32_t h = 0; h < rect.height ; h++)
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61fb      	str	r3, [r7, #28]
 800f3ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	da13      	bge.n	800f3ee <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x9e>
    {
#ifndef TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
        __ST7789H2_WriteData((ptr + h * DISPLAY_WIDTH), rect.width);
 800f3c6:	4b0c      	ldr	r3, [pc, #48]	; (800f3f8 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0xa8>)
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	fb02 f303 	mul.w	r3, r2, r3
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	69ba      	ldr	r2, [r7, #24]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f3dc:	b292      	uxth	r2, r2
 800f3de:	4611      	mov	r1, r2
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fe41 	bl	800f068 <__ST7789H2_WriteData>
    for (int32_t h = 0; h < rect.height ; h++)
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	e7e5      	b.n	800f3ba <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDEN8touchgfx4RectE+0x6a>
        MX_DMA_Init(2);
        HAL_DMA_Start(&hdma, (uint32_t)((ptr + h * DISPLAY_WIDTH)), (uint32_t)LCD_DATA_ADDR, 2 * rect.width);
        HAL_DMA_PollForTransfer(&hdma, HAL_DMA_FULL_TRANSFER, 100);
#endif // !TGFX_USE_REGULAR_DMA_FOR_LCD_REFRESH
    }
}
 800f3ee:	bf00      	nop
 800f3f0:	3720      	adds	r7, #32
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20020080 	.word	0x20020080

0800f3fc <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	68b9      	ldr	r1, [r7, #8]
 800f412:	f000 ff90 	bl	8010336 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800f416:	4603      	mov	r3, r0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 ff1a 	bl	8010264 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f000 ff18 	bl	8010278 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f448:	bf00      	nop
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 ff16 	bl	801028c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4618      	mov	r0, r3
 800f474:	f000 ff14 	bl	80102a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 ff12 	bl	80102b4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800f490:	4603      	mov	r3, r0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b082      	sub	sp, #8
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 ff12 	bl	80102ce <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
	...

0800f4b4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	4a05      	ldr	r2, [pc, #20]	; (800f4d4 <_ZN11TouchGFXHALD1Ev+0x20>)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	601a      	str	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fd95 	bl	800eff4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	0802505c 	.word	0x0802505c

0800f4d8 <_ZN11TouchGFXHALD0Ev>:
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff ffe7 	bl	800f4b4 <_ZN11TouchGFXHALD1Ev>
 800f4e6:	217c      	movs	r1, #124	; 0x7c
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f012 ffb8 	bl	802245e <_ZdlPvj>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2101      	movs	r1, #1
 800f500:	2001      	movs	r0, #1
 800f502:	f7fa fa7e 	bl	8009a02 <osSemaphoreNew>
 800f506:	4603      	mov	r3, r0
 800f508:	4a0f      	ldr	r2, [pc, #60]	; (800f548 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f50a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f50c:	4b0e      	ldr	r3, [pc, #56]	; (800f548 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800f514:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f516:	4a0e      	ldr	r2, [pc, #56]	; (800f550 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f518:	2128      	movs	r1, #40	; 0x28
 800f51a:	480e      	ldr	r0, [pc, #56]	; (800f554 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f51c:	f013 fd2e 	bl	8022f7c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800f520:	2200      	movs	r2, #0
 800f522:	2104      	movs	r1, #4
 800f524:	2001      	movs	r0, #1
 800f526:	f7fa fb83 	bl	8009c30 <osMessageQueueNew>
 800f52a:	4603      	mov	r3, r0
 800f52c:	4a0a      	ldr	r2, [pc, #40]	; (800f558 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f52e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800f530:	4b09      	ldr	r3, [pc, #36]	; (800f558 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d105      	bne.n	800f544 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800f538:	4b08      	ldr	r3, [pc, #32]	; (800f55c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f53a:	4a05      	ldr	r2, [pc, #20]	; (800f550 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f53c:	212c      	movs	r1, #44	; 0x2c
 800f53e:	4805      	ldr	r0, [pc, #20]	; (800f554 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f540:	f013 fd1c 	bl	8022f7c <__assert_func>
}
 800f544:	bf00      	nop
 800f546:	bd80      	pop	{r7, pc}
 800f548:	2001f9c4 	.word	0x2001f9c4
 800f54c:	08024954 	.word	0x08024954
 800f550:	080249a0 	.word	0x080249a0
 800f554:	080249d0 	.word	0x080249d0
 800f558:	2001f9c8 	.word	0x2001f9c8
 800f55c:	080249fc 	.word	0x080249fc

0800f560 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800f564:	4b04      	ldr	r3, [pc, #16]	; (800f578 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f04f 31ff 	mov.w	r1, #4294967295
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fa fad1 	bl	8009b14 <osSemaphoreAcquire>
}
 800f572:	bf00      	nop
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	2001f9c4 	.word	0x2001f9c4

0800f57c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f580:	4b03      	ldr	r3, [pc, #12]	; (800f590 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f7fa fb13 	bl	8009bb0 <osSemaphoreRelease>
}
 800f58a:	bf00      	nop
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	2001f9c4 	.word	0x2001f9c4

0800f594 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800f598:	4b03      	ldr	r3, [pc, #12]	; (800f5a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2100      	movs	r1, #0
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fa fab8 	bl	8009b14 <osSemaphoreAcquire>
}
 800f5a4:	bf00      	nop
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	2001f9c4 	.word	0x2001f9c4

0800f5ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800f5b0:	4b03      	ldr	r3, [pc, #12]	; (800f5c0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fa fafb 	bl	8009bb0 <osSemaphoreRelease>
}
 800f5ba:	bf00      	nop
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	2001f9c4 	.word	0x2001f9c4

0800f5c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800f5c8:	4b04      	ldr	r3, [pc, #16]	; (800f5dc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	4903      	ldr	r1, [pc, #12]	; (800f5e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800f5d2:	f7fa fba1 	bl	8009d18 <osMessageQueuePut>
}
 800f5d6:	bf00      	nop
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2001f9c8 	.word	0x2001f9c8
 800f5e0:	20000014 	.word	0x20000014

0800f5e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800f5ea:	4b09      	ldr	r3, [pc, #36]	; (800f610 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f5ec:	6818      	ldr	r0, [r3, #0]
 800f5ee:	1d39      	adds	r1, r7, #4
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f7fa fbec 	bl	8009dd0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800f5f8:	4b05      	ldr	r3, [pc, #20]	; (800f610 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800f5fa:	6818      	ldr	r0, [r3, #0]
 800f5fc:	1d39      	adds	r1, r7, #4
 800f5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f602:	2200      	movs	r2, #0
 800f604:	f7fa fbe4 	bl	8009dd0 <osMessageQueueGet>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	2001f9c8 	.word	0x2001f9c8

0800f614 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
        : color(0)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	601a      	str	r2, [r3, #0]
    }
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
    {
 800f638:	4a04      	ldr	r2, [pc, #16]	; (800f64c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	601a      	str	r2, [r3, #0]
    }
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	08025184 	.word	0x08025184

0800f650 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
    }
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7ff ffe9 	bl	800f630 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f65e:	2104      	movs	r1, #4
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f012 fefc 	bl	802245e <_ZdlPvj>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
    {
    }
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800f68c:	2300      	movs	r3, #0
    }
 800f68e:	4618      	mov	r0, r3
 800f690:	370c      	adds	r7, #12
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
	...

0800f69c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
    {
 800f6a4:	4a04      	ldr	r2, [pc, #16]	; (800f6b8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	601a      	str	r2, [r3, #0]
    }
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	08025680 	.word	0x08025680

0800f6bc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
    }
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff ffe9 	bl	800f69c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800f6ca:	210c      	movs	r1, #12
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f012 fec6 	bl	802245e <_ZdlPvj>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800f6e6:	4a09      	ldr	r2, [pc, #36]	; (800f70c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	601a      	str	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	605a      	str	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	721a      	strb	r2, [r3, #8]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	725a      	strb	r2, [r3, #9]
    {
    }
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	08025680 	.word	0x08025680

0800f710 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
    {
    }
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
    {
    }
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	330c      	adds	r3, #12
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff ff65 	bl	800f614 <_ZN8touchgfx9colortypeC1Ev>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	330c      	adds	r3, #12
 800f762:	4619      	mov	r1, r3
 800f764:	4610      	mov	r0, r2
 800f766:	f7ff ffb9 	bl	800f6dc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800f76a:	4a0b      	ldr	r2, [pc, #44]	; (800f798 <_ZN8STM32DMAC1Ev+0x44>)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	601a      	str	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f103 000c 	add.w	r0, r3, #12
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3320      	adds	r3, #32
 800f77a:	2201      	movs	r2, #1
 800f77c:	4619      	mov	r1, r3
 800f77e:	f002 fae7 	bl	8011d50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3320      	adds	r3, #32
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff ffd6 	bl	800f738 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	08025134 	.word	0x08025134

0800f79c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
	...

0800f7b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800f7be:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800f7c0:	4a03      	ldr	r2, [pc, #12]	; (800f7d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800f7c2:	2122      	movs	r1, #34	; 0x22
 800f7c4:	4803      	ldr	r0, [pc, #12]	; (800f7d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800f7c6:	f013 fbd9 	bl	8022f7c <__assert_func>
 800f7ca:	bf00      	nop
 800f7cc:	08024a40 	.word	0x08024a40
 800f7d0:	08024a64 	.word	0x08024a64
 800f7d4:	08024aa4 	.word	0x08024aa4

0800f7d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800f7e2:	4b03      	ldr	r3, [pc, #12]	; (800f7f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800f7e4:	4a03      	ldr	r2, [pc, #12]	; (800f7f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800f7e6:	2127      	movs	r1, #39	; 0x27
 800f7e8:	4803      	ldr	r0, [pc, #12]	; (800f7f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800f7ea:	f013 fbc7 	bl	8022f7c <__assert_func>
 800f7ee:	bf00      	nop
 800f7f0:	08024a40 	.word	0x08024a40
 800f7f4:	08024ad0 	.word	0x08024ad0
 800f7f8:	08024aa4 	.word	0x08024aa4

0800f7fc <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	4a08      	ldr	r2, [pc, #32]	; (800f828 <_ZN8STM32DMAD1Ev+0x2c>)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	330c      	adds	r3, #12
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 f81c 	bl	800f84c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff ff40 	bl	800f69c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	08025134 	.word	0x08025134

0800f82c <_ZN8STM32DMAD0Ev>:
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff ffe1 	bl	800f7fc <_ZN8STM32DMAD1Ev>
 800f83a:	2144      	movs	r1, #68	; 0x44
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f012 fe0e 	bl	802245e <_ZdlPvj>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	4a05      	ldr	r2, [pc, #20]	; (800f86c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	601a      	str	r2, [r3, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff fee7 	bl	800f630 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	080256d0 	.word	0x080256d0

0800f870 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff ffe7 	bl	800f84c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800f87e:	2114      	movs	r1, #20
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f012 fdec 	bl	802245e <_ZdlPvj>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800f898:	4a04      	ldr	r2, [pc, #16]	; (800f8ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6013      	str	r3, [r2, #0]
    }
 800f89e:	bf00      	nop
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	200200e8 	.word	0x200200e8

0800f8b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
 800f8bc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800f8be:	4a0b      	ldr	r2, [pc, #44]	; (800f8ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	605a      	str	r2, [r3, #4]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	609a      	str	r2, [r3, #8]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	60da      	str	r2, [r3, #12]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	69ba      	ldr	r2, [r7, #24]
 800f8da:	611a      	str	r2, [r3, #16]
    {
    }
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	0802526c 	.word	0x0802526c

0800f8f0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
    {
 800f8f8:	4a04      	ldr	r2, [pc, #16]	; (800f90c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	601a      	str	r2, [r3, #0]
    }
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	0802526c 	.word	0x0802526c

0800f910 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    }
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff ffe9 	bl	800f8f0 <_ZN8touchgfx7MVPHeapD1Ev>
 800f91e:	2114      	movs	r1, #20
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f012 fd9c 	bl	802245e <_ZdlPvj>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4618      	mov	r0, r3
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    {
 800f938:	4a04      	ldr	r2, [pc, #16]	; (800f94c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	601a      	str	r2, [r3, #0]
    }
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	08025a04 	.word	0x08025a04

0800f950 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
    }
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff ffe9 	bl	800f930 <_ZN8touchgfx3LCDD1Ev>
 800f95e:	2108      	movs	r1, #8
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f012 fd7c 	bl	802245e <_ZdlPvj>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	801a      	strh	r2, [r3, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	805a      	strh	r2, [r3, #2]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	809a      	strh	r2, [r3, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	80da      	strh	r2, [r3, #6]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	811a      	strh	r2, [r3, #8]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	815a      	strh	r2, [r3, #10]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	819a      	strh	r2, [r3, #12]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	739a      	strb	r2, [r3, #14]
        {
        }
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff ffd5 	bl	800f970 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	611a      	str	r2, [r3, #16]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	829a      	strh	r2, [r3, #20]
    {
    }
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800f9ea:	4a55      	ldr	r2, [pc, #340]	; (800fb40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	68ba      	ldr	r2, [r7, #8]
 800f9f4:	605a      	str	r2, [r3, #4]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	609a      	str	r2, [r3, #8]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	683a      	ldr	r2, [r7, #0]
 800fa00:	60da      	str	r2, [r3, #12]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2200      	movs	r2, #0
 800fa06:	611a      	str	r2, [r3, #16]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	615a      	str	r2, [r3, #20]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	619a      	str	r2, [r3, #24]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	331c      	adds	r3, #28
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7ff ffcc 	bl	800f9b6 <_ZN8touchgfx8GesturesC1Ev>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	639a      	str	r2, [r3, #56]	; 0x38
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	63da      	str	r2, [r3, #60]	; 0x3c
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	641a      	str	r2, [r3, #64]	; 0x40
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	645a      	str	r2, [r3, #68]	; 0x44
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	64da      	str	r2, [r3, #76]	; 0x4c
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	3350      	adds	r3, #80	; 0x50
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe f818 	bl	800da9e <_ZN8touchgfx4RectC1Ev>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2200      	movs	r2, #0
 800fa72:	659a      	str	r2, [r3, #88]	; 0x58
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	65da      	str	r2, [r3, #92]	; 0x5c
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	661a      	str	r2, [r3, #96]	; 0x60
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2201      	movs	r2, #1
 800fa84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2200      	movs	r2, #0
 800facc:	671a      	str	r2, [r3, #112]	; 0x70
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800faf6:	4a13      	ldr	r2, [pc, #76]	; (800fb44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800fafc:	4a12      	ldr	r2, [pc, #72]	; (800fb48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fafe:	8b3b      	ldrh	r3, [r7, #24]
 800fb00:	8013      	strh	r3, [r2, #0]
 800fb02:	4b11      	ldr	r3, [pc, #68]	; (800fb48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800fb04:	881a      	ldrh	r2, [r3, #0]
 800fb06:	4b11      	ldr	r3, [pc, #68]	; (800fb4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800fb08:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800fb0a:	4a11      	ldr	r2, [pc, #68]	; (800fb50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fb0c:	8bbb      	ldrh	r3, [r7, #28]
 800fb0e:	8013      	strh	r3, [r2, #0]
 800fb10:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800fb12:	881a      	ldrh	r2, [r3, #0]
 800fb14:	4b0f      	ldr	r3, [pc, #60]	; (800fb54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800fb16:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800fb18:	4b0f      	ldr	r3, [pc, #60]	; (800fb58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800fb1e:	8b3a      	ldrh	r2, [r7, #24]
 800fb20:	8bbb      	ldrh	r3, [r7, #28]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	bf34      	ite	cc
 800fb26:	2301      	movcc	r3, #1
 800fb28:	2300      	movcs	r3, #0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	4618      	mov	r0, r3
 800fb38:	3710      	adds	r7, #16
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	080255a8 	.word	0x080255a8
 800fb44:	2002008c 	.word	0x2002008c
 800fb48:	20020080 	.word	0x20020080
 800fb4c:	20020086 	.word	0x20020086
 800fb50:	20020082 	.word	0x20020082
 800fb54:	20020088 	.word	0x20020088
 800fb58:	20020084 	.word	0x20020084

0800fb5c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fd fcf9 	bl	800d560 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800fb6e:	bf00      	nop
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af02      	add	r7, sp, #8
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
 800fb84:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	f7ff fe8d 	bl	800f8b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800fb96:	4a04      	ldr	r2, [pc, #16]	; (800fba8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	601a      	str	r2, [r3, #0]
    {

    }
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	08025258 	.word	0x08025258

0800fbac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800fbac:	b580      	push	{r7, lr}
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	4801      	ldr	r0, [pc, #4]	; (800fbb8 <__tcf_0+0xc>)
 800fbb2:	f000 f965 	bl	800fe80 <_ZN12FrontendHeapD1Ev>
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	2001f9cc 	.word	0x2001f9cc

0800fbbc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800fbc0:	4b11      	ldr	r3, [pc, #68]	; (800fc08 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fbc2:	e8d3 3f8f 	ldab	r3, [r3]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 0301 	and.w	r3, r3, #1
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	bf0c      	ite	eq
 800fbd0:	2301      	moveq	r3, #1
 800fbd2:	2300      	movne	r3, #0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d013      	beq.n	800fc02 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fbda:	480b      	ldr	r0, [pc, #44]	; (800fc08 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fbdc:	f012 fc41 	bl	8022462 <__cxa_guard_acquire>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	bf14      	ite	ne
 800fbe6:	2301      	movne	r3, #1
 800fbe8:	2300      	moveq	r3, #0
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d008      	beq.n	800fc02 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800fbf0:	4806      	ldr	r0, [pc, #24]	; (800fc0c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800fbf2:	f000 f867 	bl	800fcc4 <_ZN12FrontendHeapC1Ev>
 800fbf6:	4806      	ldr	r0, [pc, #24]	; (800fc10 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800fbf8:	f013 f9de 	bl	8022fb8 <atexit>
 800fbfc:	4802      	ldr	r0, [pc, #8]	; (800fc08 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800fbfe:	f012 fc3c 	bl	802247a <__cxa_guard_release>
        return instance;
 800fc02:	4b02      	ldr	r3, [pc, #8]	; (800fc0c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800fc04:	4618      	mov	r0, r3
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	2001ff3c 	.word	0x2001ff3c
 800fc0c:	2001f9cc 	.word	0x2001f9cc
 800fc10:	0800fbad 	.word	0x0800fbad

0800fc14 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	4a05      	ldr	r2, [pc, #20]	; (800fc34 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7ff fe63 	bl	800f8f0 <_ZN8touchgfx7MVPHeapD1Ev>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	08025258 	.word	0x08025258

0800fc38 <_ZN16FrontendHeapBaseD0Ev>:
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7ff ffe7 	bl	800fc14 <_ZN16FrontendHeapBaseD1Ev>
 800fc46:	2114      	movs	r1, #20
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f012 fc08 	bl	802245e <_ZdlPvj>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 fb9e 	bl	80103a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fc68:	4a03      	ldr	r2, [pc, #12]	; (800fc78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	08025224 	.word	0x08025224

0800fc7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f000 fb8c 	bl	80103a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fc8c:	4a03      	ldr	r2, [pc, #12]	; (800fc9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	080251f0 	.word	0x080251f0

0800fca0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fb7a 	bl	80103a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800fcb0:	4a03      	ldr	r2, [pc, #12]	; (800fcc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	080251bc 	.word	0x080251bc

0800fcc4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800fcc4:	b590      	push	{r4, r7, lr}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f103 0114 	add.w	r1, r3, #20
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f203 4314 	addw	r3, r3, #1044	; 0x414
                     app(model, *this)
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	4623      	mov	r3, r4
 800fcea:	f7ff ff45 	bl	800fb78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800fcee:	4a18      	ldr	r2, [pc, #96]	; (800fd50 <_ZN12FrontendHeapC1Ev+0x8c>)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	3314      	adds	r3, #20
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff ffad 	bl	800fc58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	332c      	adds	r3, #44	; 0x2c
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7ff ffba 	bl	800fc7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff ffc6 	bl	800fca0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe fdbc 	bl	800e898 <_ZN5ModelC1Ev>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f203 4014 	addw	r0, r3, #1044	; 0x414
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	f7fe fd9c 	bl	800e86c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	4610      	mov	r0, r2
 800fd40:	f7ff ff0c 	bl	800fb5c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4618      	mov	r0, r3
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd90      	pop	{r4, r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	080251a8 	.word	0x080251a8

0800fd54 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b086      	sub	sp, #24
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
 800fd60:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	8bbb      	ldrh	r3, [r7, #28]
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	8b3b      	ldrh	r3, [r7, #24]
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	68b9      	ldr	r1, [r7, #8]
 800fd72:	f7ff fe33 	bl	800f9dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800fd76:	4a04      	ldr	r2, [pc, #16]	; (800fd88 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	601a      	str	r2, [r3, #0]
    }
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	0802527c 	.word	0x0802527c

0800fd8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b086      	sub	sp, #24
 800fd90:	af02      	add	r7, sp, #8
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	8bbb      	ldrh	r3, [r7, #28]
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	8b3b      	ldrh	r3, [r7, #24]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	68b9      	ldr	r1, [r7, #8]
 800fdaa:	f7ff ffd3 	bl	800fd54 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800fdae:	4a04      	ldr	r2, [pc, #16]	; (800fdc0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	601a      	str	r2, [r3, #0]
    }
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	0802505c 	.word	0x0802505c

0800fdc4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	08025044 	.word	0x08025044

0800fde4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7ff ffe8 	bl	800fdc4 <_ZN8touchgfx15TouchControllerC1Ev>
 800fdf4:	4a03      	ldr	r2, [pc, #12]	; (800fe04 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	601a      	str	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	0802502c 	.word	0x0802502c

0800fe08 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 240);

void touchgfx_init()
{
 800fe08:	b590      	push	{r4, r7, lr}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800fe0e:	f7fe fb2f 	bl	800e470 <_ZN14BitmapDatabase11getInstanceEv>
 800fe12:	4604      	mov	r4, r0
 800fe14:	f7fe fb36 	bl	800e484 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	2300      	movs	r3, #0
 800fe22:	2200      	movs	r2, #0
 800fe24:	4620      	mov	r0, r4
 800fe26:	f006 fd55 	bl	80168d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800fe2a:	4809      	ldr	r0, [pc, #36]	; (800fe50 <touchgfx_init+0x48>)
 800fe2c:	f7ff fd30 	bl	800f890 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800fe30:	2000      	movs	r0, #0
 800fe32:	f7fe fc53 	bl	800e6dc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800fe36:	4807      	ldr	r0, [pc, #28]	; (800fe54 <touchgfx_init+0x4c>)
 800fe38:	f006 fcb4 	bl	80167a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800fe3c:	f7ff febe 	bl	800fbbc <_ZN12FrontendHeap11getInstanceEv>
 800fe40:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800fe42:	4805      	ldr	r0, [pc, #20]	; (800fe58 <touchgfx_init+0x50>)
 800fe44:	f7ff fa3a 	bl	800f2bc <_ZN11TouchGFXHAL10initializeEv>
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd90      	pop	{r4, r7, pc}
 800fe50:	20020000 	.word	0x20020000
 800fe54:	20000018 	.word	0x20000018
 800fe58:	20020004 	.word	0x20020004

0800fe5c <touchgfx_components_init>:

void touchgfx_components_init()
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
}
 800fe60:	bf00      	nop
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
	...

0800fe6c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800fe70:	4802      	ldr	r0, [pc, #8]	; (800fe7c <touchgfx_taskEntry+0x10>)
 800fe72:	f001 f912 	bl	801109a <_ZN8touchgfx3HAL9taskEntryEv>
}
 800fe76:	bf00      	nop
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20020004 	.word	0x20020004

0800fe80 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	4a10      	ldr	r2, [pc, #64]	; (800fecc <_ZN12FrontendHeapD1Ev+0x4c>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fe fcb3 	bl	800e800 <_ZN19FrontendApplicationD1Ev>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 f827 	bl	800fef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	332c      	adds	r3, #44	; 0x2c
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 f844 	bl	800ff38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3314      	adds	r3, #20
 800feb4:	4618      	mov	r0, r3
 800feb6:	f000 f863 	bl	800ff80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fea9 	bl	800fc14 <_ZN16FrontendHeapBaseD1Ev>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	080251a8 	.word	0x080251a8

0800fed0 <_ZN12FrontendHeapD0Ev>:
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff ffd1 	bl	800fe80 <_ZN12FrontendHeapD1Ev>
 800fede:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f012 fabb 	bl	802245e <_ZdlPvj>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4618      	mov	r0, r3
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
	...

0800fef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	4a05      	ldr	r2, [pc, #20]	; (800ff14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	601a      	str	r2, [r3, #0]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f000 fa4b 	bl	80103a0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	080251bc 	.word	0x080251bc

0800ff18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff ffe7 	bl	800fef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ff26:	2114      	movs	r1, #20
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f012 fa98 	bl	802245e <_ZdlPvj>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	4a05      	ldr	r2, [pc, #20]	; (800ff58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 fa29 	bl	80103a0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	4618      	mov	r0, r3
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	080251f0 	.word	0x080251f0

0800ff5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff ffe7 	bl	800ff38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ff6a:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f012 fa75 	bl	802245e <_ZdlPvj>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
	...

0800ff80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	4a05      	ldr	r2, [pc, #20]	; (800ffa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f000 fa05 	bl	80103a0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	08025224 	.word	0x08025224

0800ffa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7ff ffe7 	bl	800ff80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ffb2:	2118      	movs	r1, #24
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f012 fa52 	bl	802245e <_ZdlPvj>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	4a05      	ldr	r2, [pc, #20]	; (800ffe4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	601a      	str	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7ff fcab 	bl	800f930 <_ZN8touchgfx3LCDD1Ev>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	08025e10 	.word	0x08025e10

0800ffe8 <_ZN8touchgfx8LCD16bppD0Ev>:
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff ffe7 	bl	800ffc4 <_ZN8touchgfx8LCD16bppD1Ev>
 800fff6:	2178      	movs	r1, #120	; 0x78
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f012 fa30 	bl	802245e <_ZdlPvj>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <_Z41__static_initialization_and_destruction_0ii>:
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af02      	add	r7, sp, #8
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d117      	bne.n	8010048 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801001e:	4293      	cmp	r3, r2
 8010020:	d112      	bne.n	8010048 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 8010022:	4817      	ldr	r0, [pc, #92]	; (8010080 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010024:	f7ff fede 	bl	800fde4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8010028:	4816      	ldr	r0, [pc, #88]	; (8010084 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801002a:	f7ff fb93 	bl	800f754 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801002e:	4816      	ldr	r0, [pc, #88]	; (8010088 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010030:	f009 fd50 	bl	8019ad4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 240);
 8010034:	23f0      	movs	r3, #240	; 0xf0
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	23f0      	movs	r3, #240	; 0xf0
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	4b10      	ldr	r3, [pc, #64]	; (8010080 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801003e:	4a12      	ldr	r2, [pc, #72]	; (8010088 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010040:	4910      	ldr	r1, [pc, #64]	; (8010084 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010042:	4812      	ldr	r0, [pc, #72]	; (801008c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010044:	f7ff fea2 	bl	800fd8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d113      	bne.n	8010076 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010054:	4293      	cmp	r3, r2
 8010056:	d10e      	bne.n	8010076 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010058:	480c      	ldr	r0, [pc, #48]	; (801008c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801005a:	f7ff fa2b 	bl	800f4b4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801005e:	480c      	ldr	r0, [pc, #48]	; (8010090 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010060:	f7fc fd0e 	bl	800ca80 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010064:	4808      	ldr	r0, [pc, #32]	; (8010088 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010066:	f7ff ffad 	bl	800ffc4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801006a:	4806      	ldr	r0, [pc, #24]	; (8010084 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801006c:	f7ff fbc6 	bl	800f7fc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8010070:	4803      	ldr	r0, [pc, #12]	; (8010080 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010072:	f7fe fd8f 	bl	800eb94 <_ZN20STM32TouchControllerD1Ev>
}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	2001ff40 	.word	0x2001ff40
 8010084:	2001ff44 	.word	0x2001ff44
 8010088:	2001ff88 	.word	0x2001ff88
 801008c:	20020004 	.word	0x20020004
 8010090:	20000018 	.word	0x20000018

08010094 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801009c:	2301      	movs	r3, #1
    }
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80100b2:	230c      	movs	r3, #12
    }
 80100b4:	4618      	mov	r0, r3
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	460b      	mov	r3, r1
 80100ca:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80100cc:	887a      	ldrh	r2, [r7, #2]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	3308      	adds	r3, #8
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	4413      	add	r3, r2
    }
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80100f4:	887a      	ldrh	r2, [r7, #2]
 80100f6:	4613      	mov	r3, r2
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	4413      	add	r3, r2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	3308      	adds	r3, #8
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	4413      	add	r3, r2
    }
 8010104:	4618      	mov	r0, r3
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010118:	2301      	movs	r3, #1
    }
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010126:	b480      	push	{r7}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801012e:	f44f 7372 	mov.w	r3, #968	; 0x3c8
    }
 8010132:	4618      	mov	r0, r3
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801013e:	b480      	push	{r7}
 8010140:	b083      	sub	sp, #12
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	460b      	mov	r3, r1
 8010148:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801014a:	887b      	ldrh	r3, [r7, #2]
 801014c:	f44f 7272 	mov.w	r2, #968	; 0x3c8
 8010150:	fb02 f303 	mul.w	r3, r2, r3
 8010154:	3308      	adds	r3, #8
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	4413      	add	r3, r2
    }
 801015a:	4618      	mov	r0, r3
 801015c:	370c      	adds	r7, #12
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010166:	b480      	push	{r7}
 8010168:	b083      	sub	sp, #12
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010172:	887b      	ldrh	r3, [r7, #2]
 8010174:	f44f 7272 	mov.w	r2, #968	; 0x3c8
 8010178:	fb02 f303 	mul.w	r3, r2, r3
 801017c:	3308      	adds	r3, #8
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	4413      	add	r3, r2
    }
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010196:	2301      	movs	r3, #1
    }
 8010198:	4618      	mov	r0, r3
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80101ac:	2310      	movs	r3, #16
    }
 80101ae:	4618      	mov	r0, r3
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80101ba:	b480      	push	{r7}
 80101bc:	b083      	sub	sp, #12
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	460b      	mov	r3, r1
 80101c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80101c6:	887b      	ldrh	r3, [r7, #2]
 80101c8:	011b      	lsls	r3, r3, #4
 80101ca:	3308      	adds	r3, #8
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	4413      	add	r3, r2
    }
 80101d0:	4618      	mov	r0, r3
 80101d2:	370c      	adds	r7, #12
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr

080101dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	460b      	mov	r3, r1
 80101e6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80101e8:	887b      	ldrh	r3, [r7, #2]
 80101ea:	011b      	lsls	r3, r3, #4
 80101ec:	3308      	adds	r3, #8
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	4413      	add	r3, r2
    }
 80101f2:	4618      	mov	r0, r3
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr

080101fe <_GLOBAL__sub_I_touchgfx_init>:
 80101fe:	b580      	push	{r7, lr}
 8010200:	af00      	add	r7, sp, #0
 8010202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010206:	2001      	movs	r0, #1
 8010208:	f7ff fefe 	bl	8010008 <_Z41__static_initialization_and_destruction_0ii>
 801020c:	bd80      	pop	{r7, pc}

0801020e <_GLOBAL__sub_D_touchgfx_init>:
 801020e:	b580      	push	{r7, lr}
 8010210:	af00      	add	r7, sp, #0
 8010212:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010216:	2000      	movs	r0, #0
 8010218:	f7ff fef6 	bl	8010008 <_Z41__static_initialization_and_destruction_0ii>
 801021c:	bd80      	pop	{r7, pc}
	...

08010220 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 240 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8010220:	b5b0      	push	{r4, r5, r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	4618      	mov	r0, r3
 801022c:	f000 ff21 	bl	8011072 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8010230:	687d      	ldr	r5, [r7, #4]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3364      	adds	r3, #100	; 0x64
 8010238:	681c      	ldr	r4, [r3, #0]
 801023a:	f003 fd31 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 801023e:	4603      	mov	r3, r0
 8010240:	4619      	mov	r1, r3
 8010242:	4628      	mov	r0, r5
 8010244:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3388      	adds	r3, #136	; 0x88
 801024e:	681c      	ldr	r4, [r3, #0]
 8010250:	2300      	movs	r3, #0
 8010252:	2200      	movs	r2, #0
 8010254:	4902      	ldr	r1, [pc, #8]	; (8010260 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8010256:	47a0      	blx	r4
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bdb0      	pop	{r4, r5, r7, pc}
 8010260:	200000fc 	.word	0x200000fc

08010264 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
}
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
}
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 febe 	bl	8011040 <_ZN8touchgfx3HAL10beginFrameEv>
 80102c4:	4603      	mov	r3, r0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	f000 febd 	bl	8011058 <_ZN8touchgfx3HAL8endFrameEv>
}
 80102de:	bf00      	nop
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
	...

080102e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80102f0:	4b03      	ldr	r3, [pc, #12]	; (8010300 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	370c      	adds	r7, #12
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	200000fc 	.word	0x200000fc

08010304 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 801030e:	bf00      	nop
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	4618      	mov	r0, r3
 801032a:	f000 fe53 	bl	8010fd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801032e:	bf00      	nop
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b084      	sub	sp, #16
 801033a:	af00      	add	r7, sp, #0
 801033c:	60f8      	str	r0, [r7, #12]
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	607a      	str	r2, [r7, #4]
 8010342:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	f000 ffad 	bl	80112aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8010350:	4603      	mov	r3, r0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801035a:	8880      	ldrh	r0, [r0, #4]
 801035c:	4770      	bx	lr

0801035e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801035e:	b570      	push	{r4, r5, r6, lr}
 8010360:	6803      	ldr	r3, [r0, #0]
 8010362:	4605      	mov	r5, r0
 8010364:	460c      	mov	r4, r1
 8010366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010368:	2100      	movs	r1, #0
 801036a:	4798      	blx	r3
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	4606      	mov	r6, r0
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	4628      	mov	r0, r5
 8010374:	4798      	blx	r3
 8010376:	1ba4      	subs	r4, r4, r6
 8010378:	b2a4      	uxth	r4, r4
 801037a:	fbb4 f0f0 	udiv	r0, r4, r0
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010380:	2300      	movs	r3, #0
 8010382:	8083      	strh	r3, [r0, #4]
 8010384:	4770      	bx	lr

08010386 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8010386:	b510      	push	{r4, lr}
 8010388:	4604      	mov	r4, r0
 801038a:	6803      	ldr	r3, [r0, #0]
 801038c:	8881      	ldrh	r1, [r0, #4]
 801038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010390:	4798      	blx	r3
 8010392:	88a3      	ldrh	r3, [r4, #4]
 8010394:	3301      	adds	r3, #1
 8010396:	80a3      	strh	r3, [r4, #4]
 8010398:	bd10      	pop	{r4, pc}

0801039a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801039a:	6803      	ldr	r3, [r0, #0]
 801039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039e:	4718      	bx	r3

080103a0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80103a0:	4770      	bx	lr
	...

080103a4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80103a4:	4a02      	ldr	r2, [pc, #8]	; (80103b0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80103a6:	6002      	str	r2, [r0, #0]
 80103a8:	2200      	movs	r2, #0
 80103aa:	8082      	strh	r2, [r0, #4]
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	08025354 	.word	0x08025354

080103b4 <_ZN8touchgfx9Container13getFirstChildEv>:
 80103b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80103b6:	4770      	bx	lr

080103b8 <_ZN8touchgfx11AnalogClock20getAnimationDurationEv>:
 80103b8:	f8b0 0324 	ldrh.w	r0, [r0, #804]	; 0x324
 80103bc:	4770      	bx	lr

080103be <_ZNK8touchgfx11AnalogClock17invalidateContentEv>:
 80103be:	b510      	push	{r4, lr}
 80103c0:	6803      	ldr	r3, [r0, #0]
 80103c2:	4604      	mov	r4, r0
 80103c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80103c8:	4798      	blx	r3
 80103ca:	b110      	cbz	r0, 80103d2 <_ZNK8touchgfx11AnalogClock17invalidateContentEv+0x14>
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7fd fbcd 	bl	800db6c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80103d2:	bd10      	pop	{r4, pc}

080103d4 <_ZN8touchgfx11AnalogClock17setRotationCenterEss>:
 80103d4:	f8a0 1326 	strh.w	r1, [r0, #806]	; 0x326
 80103d8:	f8a0 2328 	strh.w	r2, [r0, #808]	; 0x328
 80103dc:	4770      	bx	lr

080103de <_ZN8touchgfx11AnalogClock13setupHourHandEtss>:
 80103de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103e0:	6805      	ldr	r5, [r0, #0]
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	f8d5 50d4 	ldr.w	r5, [r5, #212]	; 0xd4
 80103e8:	4613      	mov	r3, r2
 80103ea:	460a      	mov	r2, r1
 80103ec:	f100 015c 	add.w	r1, r0, #92	; 0x5c
 80103f0:	47a8      	blx	r5
 80103f2:	b003      	add	sp, #12
 80103f4:	bd30      	pop	{r4, r5, pc}

080103f6 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>:
 80103f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103f8:	6805      	ldr	r5, [r0, #0]
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	f8d5 50d4 	ldr.w	r5, [r5, #212]	; 0xd4
 8010400:	4613      	mov	r3, r2
 8010402:	460a      	mov	r2, r1
 8010404:	f500 71a4 	add.w	r1, r0, #328	; 0x148
 8010408:	47a8      	blx	r5
 801040a:	b003      	add	sp, #12
 801040c:	bd30      	pop	{r4, r5, pc}

0801040e <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>:
 801040e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010410:	6805      	ldr	r5, [r0, #0]
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	f8d5 50d4 	ldr.w	r5, [r5, #212]	; 0xd4
 8010418:	4613      	mov	r3, r2
 801041a:	460a      	mov	r2, r1
 801041c:	f500 710d 	add.w	r1, r0, #564	; 0x234
 8010420:	47a8      	blx	r5
 8010422:	b003      	add	sp, #12
 8010424:	bd30      	pop	{r4, r5, pc}

08010426 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>:
 8010426:	b570      	push	{r4, r5, r6, lr}
 8010428:	f64f 75ff 	movw	r5, #65535	; 0xffff
 801042c:	2601      	movs	r6, #1
 801042e:	4604      	mov	r4, r0
 8010430:	f8a0 532a 	strh.w	r5, [r0, #810]	; 0x32a
 8010434:	f880 532c 	strb.w	r5, [r0, #812]	; 0x32c
 8010438:	f8b0 5324 	ldrh.w	r5, [r0, #804]	; 0x324
 801043c:	f8a0 6324 	strh.w	r6, [r0, #804]	; 0x324
 8010440:	6806      	ldr	r6, [r0, #0]
 8010442:	f8d6 6088 	ldr.w	r6, [r6, #136]	; 0x88
 8010446:	47b0      	blx	r6
 8010448:	f8a4 5324 	strh.w	r5, [r4, #804]	; 0x324
 801044c:	bd70      	pop	{r4, r5, r6, pc}

0801044e <_ZN8touchgfx11AnalogClock20initializeTime12HourEhhhb>:
 801044e:	b4f0      	push	{r4, r5, r6, r7}
 8010450:	6804      	ldr	r4, [r0, #0]
 8010452:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8010456:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 801045a:	240c      	movs	r4, #12
 801045c:	fbb1 f7f4 	udiv	r7, r1, r4
 8010460:	2e00      	cmp	r6, #0
 8010462:	fb07 1114 	mls	r1, r7, r4, r1
 8010466:	bf18      	it	ne
 8010468:	2400      	movne	r4, #0
 801046a:	fa54 f181 	uxtab	r1, r4, r1
 801046e:	46ac      	mov	ip, r5
 8010470:	bcf0      	pop	{r4, r5, r6, r7}
 8010472:	b2c9      	uxtb	r1, r1
 8010474:	4760      	bx	ip

08010476 <_ZN8touchgfx11AnalogClock8setAlphaEh>:
 8010476:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 801047a:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
 801047e:	f880 1170 	strb.w	r1, [r0, #368]	; 0x170
 8010482:	f880 125c 	strb.w	r1, [r0, #604]	; 0x25c
 8010486:	4770      	bx	lr

08010488 <_ZNK8touchgfx11AnalogClock8getAlphaEv>:
 8010488:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 801048c:	4770      	bx	lr
	...

08010490 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh>:
 8010490:	ee07 1a90 	vmov	s15, r1
 8010494:	ee07 3a10 	vmov	s14, r3
 8010498:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80104d0 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x40>
 801049c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80104a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80104a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80104a8:	ee86 0a87 	vdiv.f32	s0, s13, s14
 80104ac:	ee07 2a10 	vmov	s14, r2
 80104b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80104b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104bc:	ee30 0a07 	vadd.f32	s0, s0, s14
 80104c0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80104d4 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x44>
 80104c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80104c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	42700000 	.word	0x42700000
 80104d4:	40490fdb 	.word	0x40490fdb

080104d8 <_ZNK8touchgfx11AnalogClock27getHourHandMinuteCorrectionEv>:
 80104d8:	f890 032d 	ldrb.w	r0, [r0, #813]	; 0x32d
 80104dc:	4770      	bx	lr

080104de <_ZNK8touchgfx11AnalogClock29getMinuteHandSecondCorrectionEv>:
 80104de:	f890 032e 	ldrb.w	r0, [r0, #814]	; 0x32e
 80104e2:	4770      	bx	lr

080104e4 <_ZNK8touchgfx11AnalogClock16animationEnabledEv>:
 80104e4:	f8b0 0324 	ldrh.w	r0, [r0, #804]	; 0x324
 80104e8:	2801      	cmp	r0, #1
 80104ea:	bf94      	ite	ls
 80104ec:	2000      	movls	r0, #0
 80104ee:	2001      	movhi	r0, #1
 80104f0:	4770      	bx	lr

080104f2 <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>:
 80104f2:	f8a0 1324 	strh.w	r1, [r0, #804]	; 0x324
 80104f6:	f8c0 2320 	str.w	r2, [r0, #800]	; 0x320
 80104fa:	4770      	bx	lr

080104fc <_ZN8touchgfx11AnalogClock13setBackgroundEt>:
 80104fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104fe:	4606      	mov	r6, r0
 8010500:	6803      	ldr	r3, [r0, #0]
 8010502:	a802      	add	r0, sp, #8
 8010504:	f820 1d08 	strh.w	r1, [r0, #-8]!
 8010508:	460c      	mov	r4, r1
 801050a:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 801050e:	f006 f9f5 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010512:	4605      	mov	r5, r0
 8010514:	a802      	add	r0, sp, #8
 8010516:	f820 4d04 	strh.w	r4, [r0, #-4]!
 801051a:	f006 fa23 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801051e:	2202      	movs	r2, #2
 8010520:	fb90 f3f2 	sdiv	r3, r0, r2
 8010524:	fb95 f2f2 	sdiv	r2, r5, r2
 8010528:	b21b      	sxth	r3, r3
 801052a:	b212      	sxth	r2, r2
 801052c:	4621      	mov	r1, r4
 801052e:	4630      	mov	r0, r6
 8010530:	47b8      	blx	r7
 8010532:	b003      	add	sp, #12
 8010534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010536 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>:
 8010536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801053a:	6803      	ldr	r3, [r0, #0]
 801053c:	f880 132d 	strb.w	r1, [r0, #813]	; 0x32d
 8010540:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8010544:	4604      	mov	r4, r0
 8010546:	f000 faa1 	bl	8010a8c <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 801054a:	4606      	mov	r6, r0
 801054c:	4620      	mov	r0, r4
 801054e:	f000 faa0 	bl	8010a92 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8010552:	4607      	mov	r7, r0
 8010554:	4620      	mov	r0, r4
 8010556:	f000 fa9f 	bl	8010a98 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 801055a:	463a      	mov	r2, r7
 801055c:	4603      	mov	r3, r0
 801055e:	4631      	mov	r1, r6
 8010560:	4620      	mov	r0, r4
 8010562:	46ac      	mov	ip, r5
 8010564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010568:	4760      	bx	ip

0801056a <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>:
 801056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056e:	6803      	ldr	r3, [r0, #0]
 8010570:	f880 132e 	strb.w	r1, [r0, #814]	; 0x32e
 8010574:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8010578:	4604      	mov	r4, r0
 801057a:	f000 fa87 	bl	8010a8c <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 801057e:	4606      	mov	r6, r0
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fa86 	bl	8010a92 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8010586:	4607      	mov	r7, r0
 8010588:	4620      	mov	r0, r4
 801058a:	f000 fa85 	bl	8010a98 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 801058e:	463a      	mov	r2, r7
 8010590:	4603      	mov	r3, r0
 8010592:	4631      	mov	r1, r6
 8010594:	4620      	mov	r0, r4
 8010596:	46ac      	mov	ip, r5
 8010598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801059c:	4760      	bx	ip
	...

080105a0 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss>:
 80105a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105a2:	ed2d 8b02 	vpush	{d8}
 80105a6:	460c      	mov	r4, r1
 80105a8:	4616      	mov	r6, r2
 80105aa:	4605      	mov	r5, r0
 80105ac:	461f      	mov	r7, r3
 80105ae:	6803      	ldr	r3, [r0, #0]
 80105b0:	b083      	sub	sp, #12
 80105b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105b4:	4798      	blx	r3
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	a902      	add	r1, sp, #8
 80105ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105bc:	f821 6d04 	strh.w	r6, [r1, #-4]!
 80105c0:	4620      	mov	r0, r4
 80105c2:	4798      	blx	r3
 80105c4:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 80105c8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80105cc:	4620      	mov	r0, r4
 80105ce:	f7fd fb86 	bl	800dcde <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	4620      	mov	r0, r4
 80105d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d8:	2100      	movs	r1, #0
 80105da:	4798      	blx	r3
 80105dc:	6823      	ldr	r3, [r4, #0]
 80105de:	4620      	mov	r0, r4
 80105e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e2:	2100      	movs	r1, #0
 80105e4:	4798      	blx	r3
 80105e6:	6823      	ldr	r3, [r4, #0]
 80105e8:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	; 0x328
 80105ec:	f9b5 1326 	ldrsh.w	r1, [r5, #806]	; 0x326
 80105f0:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
 80105f4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80105f8:	1bc9      	subs	r1, r1, r7
 80105fa:	1ad2      	subs	r2, r2, r3
 80105fc:	4620      	mov	r0, r4
 80105fe:	47b0      	blx	r6
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	4620      	mov	r0, r4
 8010604:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010608:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8010690 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss+0xf0>
 801060c:	4798      	blx	r3
 801060e:	f9b5 2326 	ldrsh.w	r2, [r5, #806]	; 0x326
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	ee08 2a10 	vmov	s16, r2
 8010618:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	; 0x328
 801061c:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
 8010620:	ee08 2a90 	vmov	s17, r2
 8010624:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010628:	4620      	mov	r0, r4
 801062a:	4798      	blx	r3
 801062c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8010630:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010634:	eeb0 1a40 	vmov.f32	s2, s0
 8010638:	eef0 0a68 	vmov.f32	s1, s17
 801063c:	eeb0 0a48 	vmov.f32	s0, s16
 8010640:	4620      	mov	r0, r4
 8010642:	47b0      	blx	r6
 8010644:	6823      	ldr	r3, [r4, #0]
 8010646:	4620      	mov	r0, r4
 8010648:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 801064c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010650:	4798      	blx	r3
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	4620      	mov	r0, r4
 8010656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801065a:	eeb0 8a40 	vmov.f32	s16, s0
 801065e:	4798      	blx	r3
 8010660:	4620      	mov	r0, r4
 8010662:	eef0 0a40 	vmov.f32	s1, s0
 8010666:	eeb0 0a48 	vmov.f32	s0, s16
 801066a:	47b0      	blx	r6
 801066c:	6823      	ldr	r3, [r4, #0]
 801066e:	4620      	mov	r0, r4
 8010670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010672:	2101      	movs	r1, #1
 8010674:	4798      	blx	r3
 8010676:	682b      	ldr	r3, [r5, #0]
 8010678:	4621      	mov	r1, r4
 801067a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801067c:	4628      	mov	r0, r5
 801067e:	4798      	blx	r3
 8010680:	2301      	movs	r3, #1
 8010682:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8010686:	b003      	add	sp, #12
 8010688:	ecbd 8b02 	vpop	{d8}
 801068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801068e:	bf00      	nop
 8010690:	43960000 	.word	0x43960000

08010694 <_ZN8touchgfx11AnalogClock13setBackgroundEtss>:
 8010694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010696:	4604      	mov	r4, r0
 8010698:	461f      	mov	r7, r3
 801069a:	4616      	mov	r6, r2
 801069c:	aa02      	add	r2, sp, #8
 801069e:	f822 1d04 	strh.w	r1, [r2, #-4]!
 80106a2:	4611      	mov	r1, r2
 80106a4:	3030      	adds	r0, #48	; 0x30
 80106a6:	f002 fa57 	bl	8012b58 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80106aa:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 80106ae:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80106b2:	4620      	mov	r0, r4
 80106b4:	f7fd fb13 	bl	800dcde <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	463a      	mov	r2, r7
 80106bc:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80106c0:	4631      	mov	r1, r6
 80106c2:	4620      	mov	r0, r4
 80106c4:	47a8      	blx	r5
 80106c6:	b003      	add	sp, #12
 80106c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80106ca:	6802      	ldr	r2, [r0, #0]
 80106cc:	eeb0 1a40 	vmov.f32	s2, s0
 80106d0:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80106d2:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80106d6:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80106da:	4710      	bx	r2

080106dc <_ZN8touchgfx11AnalogClock11updateClockEv>:
 80106dc:	b530      	push	{r4, r5, lr}
 80106de:	ed2d 8b02 	vpush	{d8}
 80106e2:	f890 332a 	ldrb.w	r3, [r0, #810]	; 0x32a
 80106e6:	b083      	sub	sp, #12
 80106e8:	4604      	mov	r4, r0
 80106ea:	b15b      	cbz	r3, 8010704 <_ZN8touchgfx11AnalogClock11updateClockEv+0x28>
 80106ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80106f0:	b943      	cbnz	r3, 8010704 <_ZN8touchgfx11AnalogClock11updateClockEv+0x28>
 80106f2:	ed90 0a26 	vldr	s0, [r0, #152]	; 0x98
 80106f6:	eddf 7a84 	vldr	s15, [pc, #528]	; 8010908 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 80106fa:	305c      	adds	r0, #92	; 0x5c
 80106fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010700:	f7ff ffe3 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8010704:	f894 332b 	ldrb.w	r3, [r4, #811]	; 0x32b
 8010708:	b163      	cbz	r3, 8010724 <_ZN8touchgfx11AnalogClock11updateClockEv+0x48>
 801070a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801070e:	b94b      	cbnz	r3, 8010724 <_ZN8touchgfx11AnalogClock11updateClockEv+0x48>
 8010710:	ed94 0a61 	vldr	s0, [r4, #388]	; 0x184
 8010714:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8010908 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 8010718:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 801071c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010720:	f7ff ffd3 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8010724:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8010728:	b163      	cbz	r3, 8010744 <_ZN8touchgfx11AnalogClock11updateClockEv+0x68>
 801072a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801072e:	b94b      	cbnz	r3, 8010744 <_ZN8touchgfx11AnalogClock11updateClockEv+0x68>
 8010730:	ed94 0a9c 	vldr	s0, [r4, #624]	; 0x270
 8010734:	eddf 7a74 	vldr	s15, [pc, #464]	; 8010908 <_ZN8touchgfx11AnalogClock11updateClockEv+0x22c>
 8010738:	f504 700d 	add.w	r0, r4, #564	; 0x234
 801073c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010740:	f7ff ffc3 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8010744:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8010748:	2b00      	cmp	r3, #0
 801074a:	d045      	beq.n	80107d8 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 801074c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8010750:	f894 132a 	ldrb.w	r1, [r4, #810]	; 0x32a
 8010754:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8010758:	4291      	cmp	r1, r2
 801075a:	d107      	bne.n	801076c <_ZN8touchgfx11AnalogClock11updateClockEv+0x90>
 801075c:	2b00      	cmp	r3, #0
 801075e:	d03b      	beq.n	80107d8 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 8010760:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8010764:	f894 132b 	ldrb.w	r1, [r4, #811]	; 0x32b
 8010768:	4288      	cmp	r0, r1
 801076a:	d035      	beq.n	80107d8 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 801076c:	6821      	ldr	r1, [r4, #0]
 801076e:	f8d1 50d8 	ldr.w	r5, [r1, #216]	; 0xd8
 8010772:	b10b      	cbz	r3, 8010778 <_ZN8touchgfx11AnalogClock11updateClockEv+0x9c>
 8010774:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010778:	210c      	movs	r1, #12
 801077a:	4620      	mov	r0, r4
 801077c:	47a8      	blx	r5
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	4620      	mov	r0, r4
 8010782:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8010786:	eeb0 8a40 	vmov.f32	s16, s0
 801078a:	4798      	blx	r3
 801078c:	f104 055c 	add.w	r5, r4, #92	; 0x5c
 8010790:	b970      	cbnz	r0, 80107b0 <_ZN8touchgfx11AnalogClock11updateClockEv+0xd4>
 8010792:	6823      	ldr	r3, [r4, #0]
 8010794:	4620      	mov	r0, r4
 8010796:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801079a:	4798      	blx	r3
 801079c:	b110      	cbz	r0, 80107a4 <_ZN8touchgfx11AnalogClock11updateClockEv+0xc8>
 801079e:	4628      	mov	r0, r5
 80107a0:	f001 fbb0 	bl	8011f04 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 80107a4:	eeb0 0a48 	vmov.f32	s0, s16
 80107a8:	4628      	mov	r0, r5
 80107aa:	f7ff ff8e 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80107ae:	e013      	b.n	80107d8 <_ZN8touchgfx11AnalogClock11updateClockEv+0xfc>
 80107b0:	4628      	mov	r0, r5
 80107b2:	f001 fb60 	bl	8011e76 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d1ea      	bne.n	8010792 <_ZN8touchgfx11AnalogClock11updateClockEv+0xb6>
 80107bc:	f8d4 1320 	ldr.w	r1, [r4, #800]	; 0x320
 80107c0:	4628      	mov	r0, r5
 80107c2:	9100      	str	r1, [sp, #0]
 80107c4:	f8b4 2324 	ldrh.w	r2, [r4, #804]	; 0x324
 80107c8:	eeb0 0a48 	vmov.f32	s0, s16
 80107cc:	2102      	movs	r1, #2
 80107ce:	f001 fb55 	bl	8011e7c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 80107d2:	4628      	mov	r0, r5
 80107d4:	f001 fb66 	bl	8011ea4 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 80107d8:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d045      	beq.n	801086c <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 80107e0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80107e4:	f894 132b 	ldrb.w	r1, [r4, #811]	; 0x32b
 80107e8:	f894 332e 	ldrb.w	r3, [r4, #814]	; 0x32e
 80107ec:	4291      	cmp	r1, r2
 80107ee:	d107      	bne.n	8010800 <_ZN8touchgfx11AnalogClock11updateClockEv+0x124>
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d03b      	beq.n	801086c <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 80107f4:	f894 032c 	ldrb.w	r0, [r4, #812]	; 0x32c
 80107f8:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80107fc:	4288      	cmp	r0, r1
 80107fe:	d035      	beq.n	801086c <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 8010800:	6821      	ldr	r1, [r4, #0]
 8010802:	f8d1 50d8 	ldr.w	r5, [r1, #216]	; 0xd8
 8010806:	b10b      	cbz	r3, 801080c <_ZN8touchgfx11AnalogClock11updateClockEv+0x130>
 8010808:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801080c:	213c      	movs	r1, #60	; 0x3c
 801080e:	4620      	mov	r0, r4
 8010810:	47a8      	blx	r5
 8010812:	6823      	ldr	r3, [r4, #0]
 8010814:	4620      	mov	r0, r4
 8010816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801081a:	eeb0 8a40 	vmov.f32	s16, s0
 801081e:	4798      	blx	r3
 8010820:	f504 75a4 	add.w	r5, r4, #328	; 0x148
 8010824:	b970      	cbnz	r0, 8010844 <_ZN8touchgfx11AnalogClock11updateClockEv+0x168>
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	4620      	mov	r0, r4
 801082a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801082e:	4798      	blx	r3
 8010830:	b110      	cbz	r0, 8010838 <_ZN8touchgfx11AnalogClock11updateClockEv+0x15c>
 8010832:	4628      	mov	r0, r5
 8010834:	f001 fb66 	bl	8011f04 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 8010838:	eeb0 0a48 	vmov.f32	s0, s16
 801083c:	4628      	mov	r0, r5
 801083e:	f7ff ff44 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8010842:	e013      	b.n	801086c <_ZN8touchgfx11AnalogClock11updateClockEv+0x190>
 8010844:	4628      	mov	r0, r5
 8010846:	f001 fb16 	bl	8011e76 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 801084a:	4603      	mov	r3, r0
 801084c:	2800      	cmp	r0, #0
 801084e:	d1ea      	bne.n	8010826 <_ZN8touchgfx11AnalogClock11updateClockEv+0x14a>
 8010850:	f8d4 1320 	ldr.w	r1, [r4, #800]	; 0x320
 8010854:	4628      	mov	r0, r5
 8010856:	9100      	str	r1, [sp, #0]
 8010858:	f8b4 2324 	ldrh.w	r2, [r4, #804]	; 0x324
 801085c:	eeb0 0a48 	vmov.f32	s0, s16
 8010860:	2102      	movs	r1, #2
 8010862:	f001 fb0b 	bl	8011e7c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 8010866:	4628      	mov	r0, r5
 8010868:	f001 fb1c 	bl	8011ea4 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 801086c:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8010870:	2b00      	cmp	r3, #0
 8010872:	d039      	beq.n	80108e8 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 8010874:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8010878:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 801087c:	4293      	cmp	r3, r2
 801087e:	d033      	beq.n	80108e8 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	213c      	movs	r1, #60	; 0x3c
 8010884:	f8d3 50d8 	ldr.w	r5, [r3, #216]	; 0xd8
 8010888:	4620      	mov	r0, r4
 801088a:	2300      	movs	r3, #0
 801088c:	47a8      	blx	r5
 801088e:	6823      	ldr	r3, [r4, #0]
 8010890:	4620      	mov	r0, r4
 8010892:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8010896:	eeb0 8a40 	vmov.f32	s16, s0
 801089a:	4798      	blx	r3
 801089c:	f504 750d 	add.w	r5, r4, #564	; 0x234
 80108a0:	b970      	cbnz	r0, 80108c0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1e4>
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	4620      	mov	r0, r4
 80108a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80108aa:	4798      	blx	r3
 80108ac:	b110      	cbz	r0, 80108b4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1d8>
 80108ae:	4628      	mov	r0, r5
 80108b0:	f001 fb28 	bl	8011f04 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 80108b4:	eeb0 0a48 	vmov.f32	s0, s16
 80108b8:	4628      	mov	r0, r5
 80108ba:	f7ff ff06 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80108be:	e013      	b.n	80108e8 <_ZN8touchgfx11AnalogClock11updateClockEv+0x20c>
 80108c0:	4628      	mov	r0, r5
 80108c2:	f001 fad8 	bl	8011e76 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d1ea      	bne.n	80108a2 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1c6>
 80108cc:	f8d4 1320 	ldr.w	r1, [r4, #800]	; 0x320
 80108d0:	4628      	mov	r0, r5
 80108d2:	9100      	str	r1, [sp, #0]
 80108d4:	f8b4 2324 	ldrh.w	r2, [r4, #804]	; 0x324
 80108d8:	eeb0 0a48 	vmov.f32	s0, s16
 80108dc:	2102      	movs	r1, #2
 80108de:	f001 facd 	bl	8011e7c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 80108e2:	4628      	mov	r0, r5
 80108e4:	f001 fade 	bl	8011ea4 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 80108e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80108ec:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
 80108f0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80108f4:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
 80108f8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80108fc:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 8010900:	b003      	add	sp, #12
 8010902:	ecbd 8b02 	vpop	{d8}
 8010906:	bd30      	pop	{r4, r5, pc}
 8010908:	40c90fdb 	.word	0x40c90fdb

0801090c <_ZN8touchgfx11AnalogClockC1Ev>:
 801090c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010910:	4604      	mov	r4, r0
 8010912:	ed2d 8b02 	vpush	{d8}
 8010916:	4626      	mov	r6, r4
 8010918:	b083      	sub	sp, #12
 801091a:	f000 f89b 	bl	8010a54 <_ZN8touchgfx13AbstractClockC1Ev>
 801091e:	4b32      	ldr	r3, [pc, #200]	; (80109e8 <_ZN8touchgfx11AnalogClockC1Ev+0xdc>)
 8010920:	2201      	movs	r2, #1
 8010922:	f846 3b30 	str.w	r3, [r6], #48
 8010926:	2500      	movs	r5, #0
 8010928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801092c:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 80109ec <_ZN8touchgfx11AnalogClockC1Ev+0xe0>
 8010930:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8010934:	4a2e      	ldr	r2, [pc, #184]	; (80109f0 <_ZN8touchgfx11AnalogClockC1Ev+0xe4>)
 8010936:	a902      	add	r1, sp, #8
 8010938:	6322      	str	r2, [r4, #48]	; 0x30
 801093a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801093e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8010942:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8010946:	4630      	mov	r0, r6
 8010948:	f104 095c 	add.w	r9, r4, #92	; 0x5c
 801094c:	86a5      	strh	r5, [r4, #52]	; 0x34
 801094e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8010950:	8725      	strh	r5, [r4, #56]	; 0x38
 8010952:	8765      	strh	r5, [r4, #58]	; 0x3a
 8010954:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8010956:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8010958:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 801095c:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8010960:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8010964:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010966:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801096a:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801096e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8010972:	f002 f8f1 	bl	8012b58 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010976:	f504 78a4 	add.w	r8, r4, #328	; 0x148
 801097a:	4648      	mov	r0, r9
 801097c:	f001 fbe6 	bl	801214c <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 8010980:	f504 770d 	add.w	r7, r4, #564	; 0x234
 8010984:	4640      	mov	r0, r8
 8010986:	f001 fbe1 	bl	801214c <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 801098a:	4638      	mov	r0, r7
 801098c:	f001 fbde 	bl	801214c <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 8010990:	4b18      	ldr	r3, [pc, #96]	; (80109f4 <_ZN8touchgfx11AnalogClockC1Ev+0xe8>)
 8010992:	4631      	mov	r1, r6
 8010994:	f8c4 3320 	str.w	r3, [r4, #800]	; 0x320
 8010998:	4620      	mov	r0, r4
 801099a:	f8c4 5324 	str.w	r5, [r4, #804]	; 0x324
 801099e:	f8c4 5328 	str.w	r5, [r4, #808]	; 0x328
 80109a2:	f884 532c 	strb.w	r5, [r4, #812]	; 0x32c
 80109a6:	f884 532d 	strb.w	r5, [r4, #813]	; 0x32d
 80109aa:	f884 532e 	strb.w	r5, [r4, #814]	; 0x32e
 80109ae:	f000 f880 	bl	8010ab2 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80109b2:	eeb0 0a48 	vmov.f32	s0, s16
 80109b6:	4648      	mov	r0, r9
 80109b8:	f7ff fe87 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80109bc:	eeb0 0a48 	vmov.f32	s0, s16
 80109c0:	4640      	mov	r0, r8
 80109c2:	f7ff fe82 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80109c6:	4638      	mov	r0, r7
 80109c8:	eeb0 0a48 	vmov.f32	s0, s16
 80109cc:	f7ff fe7d 	bl	80106ca <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80109d0:	4620      	mov	r0, r4
 80109d2:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
 80109d6:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
 80109da:	f884 5259 	strb.w	r5, [r4, #601]	; 0x259
 80109de:	b003      	add	sp, #12
 80109e0:	ecbd 8b02 	vpop	{d8}
 80109e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109e8:	08025388 	.word	0x08025388
 80109ec:	00000000 	.word	0x00000000
 80109f0:	08025998 	.word	0x08025998
 80109f4:	080156a5 	.word	0x080156a5

080109f8 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 80109f8:	b470      	push	{r4, r5, r6}
 80109fa:	2518      	movs	r5, #24
 80109fc:	fbb1 f6f5 	udiv	r6, r1, r5
 8010a00:	fb06 1115 	mls	r1, r6, r5, r1
 8010a04:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8010a08:	213c      	movs	r1, #60	; 0x3c
 8010a0a:	fbb2 f5f1 	udiv	r5, r2, r1
 8010a0e:	fb05 2211 	mls	r2, r5, r1, r2
 8010a12:	bc70      	pop	{r4, r5, r6}
 8010a14:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8010a18:	fbb3 f2f1 	udiv	r2, r3, r1
 8010a1c:	fb02 3311 	mls	r3, r2, r1, r3
 8010a20:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8010a24:	6803      	ldr	r3, [r0, #0]
 8010a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a2a:	4718      	bx	r3

08010a2c <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8010a2c:	b4f0      	push	{r4, r5, r6, r7}
 8010a2e:	6804      	ldr	r4, [r0, #0]
 8010a30:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8010a34:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8010a38:	240c      	movs	r4, #12
 8010a3a:	fbb1 f7f4 	udiv	r7, r1, r4
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	fb07 1114 	mls	r1, r7, r4, r1
 8010a44:	bf18      	it	ne
 8010a46:	2400      	movne	r4, #0
 8010a48:	fa54 f181 	uxtab	r1, r4, r1
 8010a4c:	46ac      	mov	ip, r5
 8010a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8010a50:	b2c9      	uxtb	r1, r1
 8010a52:	4760      	bx	ip

08010a54 <_ZN8touchgfx13AbstractClockC1Ev>:
 8010a54:	2101      	movs	r1, #1
 8010a56:	2200      	movs	r2, #0
 8010a58:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8010a5c:	490a      	ldr	r1, [pc, #40]	; (8010a88 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8010a5e:	8082      	strh	r2, [r0, #4]
 8010a60:	80c2      	strh	r2, [r0, #6]
 8010a62:	8102      	strh	r2, [r0, #8]
 8010a64:	8142      	strh	r2, [r0, #10]
 8010a66:	8182      	strh	r2, [r0, #12]
 8010a68:	81c2      	strh	r2, [r0, #14]
 8010a6a:	8202      	strh	r2, [r0, #16]
 8010a6c:	8242      	strh	r2, [r0, #18]
 8010a6e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010a72:	61c2      	str	r2, [r0, #28]
 8010a74:	8402      	strh	r2, [r0, #32]
 8010a76:	8442      	strh	r2, [r0, #34]	; 0x22
 8010a78:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8010a7c:	6001      	str	r1, [r0, #0]
 8010a7e:	6282      	str	r2, [r0, #40]	; 0x28
 8010a80:	8582      	strh	r2, [r0, #44]	; 0x2c
 8010a82:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8010a86:	4770      	bx	lr
 8010a88:	08025470 	.word	0x08025470

08010a8c <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 8010a8c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8010a90:	4770      	bx	lr

08010a92 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8010a92:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8010a96:	4770      	bx	lr

08010a98 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8010a98:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8010a9c:	4770      	bx	lr

08010a9e <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010a9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	b12b      	cbz	r3, 8010ab0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010aa4:	b920      	cbnz	r0, 8010ab0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010aa6:	1a5a      	subs	r2, r3, r1
 8010aa8:	4250      	negs	r0, r2
 8010aaa:	4150      	adcs	r0, r2
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	e7f8      	b.n	8010aa2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8010ab0:	4770      	bx	lr

08010ab2 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	6148      	str	r0, [r1, #20]
 8010ab6:	618b      	str	r3, [r1, #24]
 8010ab8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010aba:	b913      	cbnz	r3, 8010ac2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8010abc:	6281      	str	r1, [r0, #40]	; 0x28
 8010abe:	4770      	bx	lr
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	699a      	ldr	r2, [r3, #24]
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	d1fb      	bne.n	8010ac0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8010ac8:	6199      	str	r1, [r3, #24]
 8010aca:	4770      	bx	lr

08010acc <_ZN8touchgfx9Container9removeAllEv>:
 8010acc:	2200      	movs	r2, #0
 8010ace:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010ad0:	b123      	cbz	r3, 8010adc <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010ad2:	6999      	ldr	r1, [r3, #24]
 8010ad4:	6281      	str	r1, [r0, #40]	; 0x28
 8010ad6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010ada:	e7f8      	b.n	8010ace <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010adc:	4770      	bx	lr

08010ade <_ZN8touchgfx9Container6unlinkEv>:
 8010ade:	2300      	movs	r3, #0
 8010ae0:	6283      	str	r3, [r0, #40]	; 0x28
 8010ae2:	4770      	bx	lr

08010ae4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	8002      	strh	r2, [r0, #0]
 8010ae8:	8042      	strh	r2, [r0, #2]
 8010aea:	8082      	strh	r2, [r0, #4]
 8010aec:	80c2      	strh	r2, [r0, #6]
 8010aee:	4770      	bx	lr

08010af0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	460d      	mov	r5, r1
 8010af4:	4616      	mov	r6, r2
 8010af6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010af8:	b13c      	cbz	r4, 8010b0a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	4620      	mov	r0, r4
 8010afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b00:	4632      	mov	r2, r6
 8010b02:	4629      	mov	r1, r5
 8010b04:	4798      	blx	r3
 8010b06:	69a4      	ldr	r4, [r4, #24]
 8010b08:	e7f6      	b.n	8010af8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}

08010b0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	460d      	mov	r5, r1
 8010b10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010b12:	b134      	cbz	r4, 8010b22 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	4621      	mov	r1, r4
 8010b18:	689b      	ldr	r3, [r3, #8]
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	4798      	blx	r3
 8010b1e:	69a4      	ldr	r4, [r4, #24]
 8010b20:	e7f7      	b.n	8010b12 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010b22:	bd38      	pop	{r3, r4, r5, pc}

08010b24 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010b24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010b26:	b19b      	cbz	r3, 8010b50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010b28:	428b      	cmp	r3, r1
 8010b2a:	d109      	bne.n	8010b40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	699a      	ldr	r2, [r3, #24]
 8010b30:	6159      	str	r1, [r3, #20]
 8010b32:	6282      	str	r2, [r0, #40]	; 0x28
 8010b34:	b902      	cbnz	r2, 8010b38 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010b36:	4770      	bx	lr
 8010b38:	6199      	str	r1, [r3, #24]
 8010b3a:	4770      	bx	lr
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	b13a      	cbz	r2, 8010b50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010b40:	699a      	ldr	r2, [r3, #24]
 8010b42:	428a      	cmp	r2, r1
 8010b44:	d1fa      	bne.n	8010b3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010b46:	698a      	ldr	r2, [r1, #24]
 8010b48:	619a      	str	r2, [r3, #24]
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010b50:	4770      	bx	lr

08010b52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010b52:	b410      	push	{r4}
 8010b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010b56:	4604      	mov	r4, r0
 8010b58:	b92b      	cbnz	r3, 8010b66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010b5a:	6803      	ldr	r3, [r0, #0]
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b64:	4718      	bx	r3
 8010b66:	b941      	cbnz	r1, 8010b7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010b68:	6193      	str	r3, [r2, #24]
 8010b6a:	6282      	str	r2, [r0, #40]	; 0x28
 8010b6c:	6154      	str	r4, [r2, #20]
 8010b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	4603      	mov	r3, r0
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d0f9      	beq.n	8010b6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010b7a:	4299      	cmp	r1, r3
 8010b7c:	6998      	ldr	r0, [r3, #24]
 8010b7e:	d1f9      	bne.n	8010b74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010b80:	6190      	str	r0, [r2, #24]
 8010b82:	618a      	str	r2, [r1, #24]
 8010b84:	e7f2      	b.n	8010b6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010b86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8a:	461f      	mov	r7, r3
 8010b8c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8010b90:	460d      	mov	r5, r1
 8010b92:	4616      	mov	r6, r2
 8010b94:	b103      	cbz	r3, 8010b98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010b96:	6038      	str	r0, [r7, #0]
 8010b98:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010b9a:	b314      	cbz	r4, 8010be2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010b9c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010ba0:	b1eb      	cbz	r3, 8010bde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010ba2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010ba6:	428d      	cmp	r5, r1
 8010ba8:	db19      	blt.n	8010bde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010baa:	8923      	ldrh	r3, [r4, #8]
 8010bac:	b289      	uxth	r1, r1
 8010bae:	440b      	add	r3, r1
 8010bb0:	b21b      	sxth	r3, r3
 8010bb2:	429d      	cmp	r5, r3
 8010bb4:	da13      	bge.n	8010bde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010bb6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010bba:	4296      	cmp	r6, r2
 8010bbc:	db0f      	blt.n	8010bde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010bbe:	8963      	ldrh	r3, [r4, #10]
 8010bc0:	b292      	uxth	r2, r2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	b21b      	sxth	r3, r3
 8010bc6:	429e      	cmp	r6, r3
 8010bc8:	da09      	bge.n	8010bde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	1ab2      	subs	r2, r6, r2
 8010bce:	1a69      	subs	r1, r5, r1
 8010bd0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8010bd4:	b212      	sxth	r2, r2
 8010bd6:	463b      	mov	r3, r7
 8010bd8:	b209      	sxth	r1, r1
 8010bda:	4620      	mov	r0, r4
 8010bdc:	47c0      	blx	r8
 8010bde:	69a4      	ldr	r4, [r4, #24]
 8010be0:	e7db      	b.n	8010b9a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010be8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	4c6c      	ldr	r4, [pc, #432]	; (8010da0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8010bee:	b0a1      	sub	sp, #132	; 0x84
 8010bf0:	6824      	ldr	r4, [r4, #0]
 8010bf2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8010bf4:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8010bf8:	2400      	movs	r4, #0
 8010bfa:	802c      	strh	r4, [r5, #0]
 8010bfc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8010bfe:	4606      	mov	r6, r0
 8010c00:	802c      	strh	r4, [r5, #0]
 8010c02:	601c      	str	r4, [r3, #0]
 8010c04:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010c08:	9303      	str	r3, [sp, #12]
 8010c0a:	f7ff ffbc 	bl	8010b86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010c0e:	f1b9 0f03 	cmp.w	r9, #3
 8010c12:	f340 80bf 	ble.w	8010d94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8010c16:	4631      	mov	r1, r6
 8010c18:	a80c      	add	r0, sp, #48	; 0x30
 8010c1a:	f004 f96b 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c1e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8010c22:	9306      	str	r3, [sp, #24]
 8010c24:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010c28:	9307      	str	r3, [sp, #28]
 8010c2a:	9b03      	ldr	r3, [sp, #12]
 8010c2c:	f8d3 a000 	ldr.w	sl, [r3]
 8010c30:	f1ba 0f00 	cmp.w	sl, #0
 8010c34:	f000 80b1 	beq.w	8010d9a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8010c38:	4651      	mov	r1, sl
 8010c3a:	a810      	add	r0, sp, #64	; 0x40
 8010c3c:	f004 f95a 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c40:	2002      	movs	r0, #2
 8010c42:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8010c46:	9b01      	ldr	r3, [sp, #4]
 8010c48:	fb91 f1f0 	sdiv	r1, r1, r0
 8010c4c:	9a06      	ldr	r2, [sp, #24]
 8010c4e:	189d      	adds	r5, r3, r2
 8010c50:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8010c54:	9a07      	ldr	r2, [sp, #28]
 8010c56:	4419      	add	r1, r3
 8010c58:	9b02      	ldr	r3, [sp, #8]
 8010c5a:	1a6d      	subs	r5, r5, r1
 8010c5c:	4413      	add	r3, r2
 8010c5e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010c62:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010c66:	fb92 f2f0 	sdiv	r2, r2, r0
 8010c6a:	440a      	add	r2, r1
 8010c6c:	1a9b      	subs	r3, r3, r2
 8010c6e:	435b      	muls	r3, r3
 8010c70:	fb05 3505 	mla	r5, r5, r5, r3
 8010c74:	4f4b      	ldr	r7, [pc, #300]	; (8010da4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010c76:	ac10      	add	r4, sp, #64	; 0x40
 8010c78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c84:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010c8c:	2303      	movs	r3, #3
 8010c8e:	f1b9 0f0c 	cmp.w	r9, #12
 8010c92:	bfda      	itte	le
 8010c94:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010c98:	fb92 f8f3 	sdivle	r8, r2, r3
 8010c9c:	4698      	movgt	r8, r3
 8010c9e:	2400      	movs	r4, #0
 8010ca0:	f8cd 9000 	str.w	r9, [sp]
 8010ca4:	1c63      	adds	r3, r4, #1
 8010ca6:	9308      	str	r3, [sp, #32]
 8010ca8:	9b00      	ldr	r3, [sp, #0]
 8010caa:	f04f 0b00 	mov.w	fp, #0
 8010cae:	fb93 f3f8 	sdiv	r3, r3, r8
 8010cb2:	f004 0401 	and.w	r4, r4, #1
 8010cb6:	aa10      	add	r2, sp, #64	; 0x40
 8010cb8:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	3404      	adds	r4, #4
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	9a04      	ldr	r2, [sp, #16]
 8010cc4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010cc8:	fb13 f302 	smulbb	r3, r3, r2
 8010ccc:	9a01      	ldr	r2, [sp, #4]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	1899      	adds	r1, r3, r2
 8010cd2:	9305      	str	r3, [sp, #20]
 8010cd4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010cd8:	b209      	sxth	r1, r1
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	db4d      	blt.n	8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010cde:	8932      	ldrh	r2, [r6, #8]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	b21b      	sxth	r3, r3
 8010ce4:	4299      	cmp	r1, r3
 8010ce6:	da48      	bge.n	8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010ce8:	9b04      	ldr	r3, [sp, #16]
 8010cea:	6827      	ldr	r7, [r4, #0]
 8010cec:	fb17 f703 	smulbb	r7, r7, r3
 8010cf0:	9b02      	ldr	r3, [sp, #8]
 8010cf2:	b2bf      	uxth	r7, r7
 8010cf4:	18fa      	adds	r2, r7, r3
 8010cf6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010cfa:	b212      	sxth	r2, r2
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	db3c      	blt.n	8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010d00:	8970      	ldrh	r0, [r6, #10]
 8010d02:	4403      	add	r3, r0
 8010d04:	b21b      	sxth	r3, r3
 8010d06:	429a      	cmp	r2, r3
 8010d08:	da37      	bge.n	8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d10:	ab0b      	add	r3, sp, #44	; 0x2c
 8010d12:	f7ff ff38 	bl	8010b86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d18:	b37a      	cbz	r2, 8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010d1a:	4552      	cmp	r2, sl
 8010d1c:	d02d      	beq.n	8010d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8010d1e:	4611      	mov	r1, r2
 8010d20:	a80e      	add	r0, sp, #56	; 0x38
 8010d22:	9209      	str	r2, [sp, #36]	; 0x24
 8010d24:	f004 f8e6 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010d28:	f04f 0e02 	mov.w	lr, #2
 8010d2c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8010d30:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8010d34:	fb91 f1fe 	sdiv	r1, r1, lr
 8010d38:	fb9c fcfe 	sdiv	ip, ip, lr
 8010d3c:	9a06      	ldr	r2, [sp, #24]
 8010d3e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010d42:	9b01      	ldr	r3, [sp, #4]
 8010d44:	4401      	add	r1, r0
 8010d46:	4413      	add	r3, r2
 8010d48:	1a58      	subs	r0, r3, r1
 8010d4a:	9a07      	ldr	r2, [sp, #28]
 8010d4c:	9b02      	ldr	r3, [sp, #8]
 8010d4e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010d52:	4413      	add	r3, r2
 8010d54:	448c      	add	ip, r1
 8010d56:	eba3 030c 	sub.w	r3, r3, ip
 8010d5a:	435b      	muls	r3, r3
 8010d5c:	fb00 3300 	mla	r3, r0, r0, r3
 8010d60:	42ab      	cmp	r3, r5
 8010d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d64:	d208      	bcs.n	8010d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8010d66:	461d      	mov	r5, r3
 8010d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d6a:	9803      	ldr	r0, [sp, #12]
 8010d6c:	6001      	str	r1, [r0, #0]
 8010d6e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010d70:	9805      	ldr	r0, [sp, #20]
 8010d72:	8008      	strh	r0, [r1, #0]
 8010d74:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010d76:	800f      	strh	r7, [r1, #0]
 8010d78:	4692      	mov	sl, r2
 8010d7a:	f10b 0b01 	add.w	fp, fp, #1
 8010d7e:	f1bb 0f04 	cmp.w	fp, #4
 8010d82:	f104 0408 	add.w	r4, r4, #8
 8010d86:	d19c      	bne.n	8010cc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8010d88:	9b00      	ldr	r3, [sp, #0]
 8010d8a:	9c08      	ldr	r4, [sp, #32]
 8010d8c:	444b      	add	r3, r9
 8010d8e:	4544      	cmp	r4, r8
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	d187      	bne.n	8010ca4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8010d94:	b021      	add	sp, #132	; 0x84
 8010d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9a:	f04f 35ff 	mov.w	r5, #4294967295
 8010d9e:	e769      	b.n	8010c74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010da0:	2002008c 	.word	0x2002008c
 8010da4:	08024b10 	.word	0x08024b10

08010da8 <_ZN8touchgfx4RectaNERKS0_>:
 8010da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dac:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010db0:	888c      	ldrh	r4, [r1, #4]
 8010db2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010db6:	443c      	add	r4, r7
 8010db8:	b2a4      	uxth	r4, r4
 8010dba:	fa0f f884 	sxth.w	r8, r4
 8010dbe:	45c1      	cmp	r9, r8
 8010dc0:	da2f      	bge.n	8010e22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010dc2:	8882      	ldrh	r2, [r0, #4]
 8010dc4:	444a      	add	r2, r9
 8010dc6:	b292      	uxth	r2, r2
 8010dc8:	fa0f fe82 	sxth.w	lr, r2
 8010dcc:	4577      	cmp	r7, lr
 8010dce:	da28      	bge.n	8010e22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010dd0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010dd4:	88cb      	ldrh	r3, [r1, #6]
 8010dd6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010dda:	442b      	add	r3, r5
 8010ddc:	b21b      	sxth	r3, r3
 8010dde:	429e      	cmp	r6, r3
 8010de0:	da1f      	bge.n	8010e22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010de2:	88c3      	ldrh	r3, [r0, #6]
 8010de4:	4433      	add	r3, r6
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	fa0f fc83 	sxth.w	ip, r3
 8010dec:	4565      	cmp	r5, ip
 8010dee:	da18      	bge.n	8010e22 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010df0:	454f      	cmp	r7, r9
 8010df2:	bfb8      	it	lt
 8010df4:	464f      	movlt	r7, r9
 8010df6:	42b5      	cmp	r5, r6
 8010df8:	bfb8      	it	lt
 8010dfa:	4635      	movlt	r5, r6
 8010dfc:	45f0      	cmp	r8, lr
 8010dfe:	bfd8      	it	le
 8010e00:	4622      	movle	r2, r4
 8010e02:	1bd2      	subs	r2, r2, r7
 8010e04:	8082      	strh	r2, [r0, #4]
 8010e06:	884a      	ldrh	r2, [r1, #2]
 8010e08:	88c9      	ldrh	r1, [r1, #6]
 8010e0a:	8007      	strh	r7, [r0, #0]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	b292      	uxth	r2, r2
 8010e10:	b211      	sxth	r1, r2
 8010e12:	458c      	cmp	ip, r1
 8010e14:	bfa8      	it	ge
 8010e16:	4613      	movge	r3, r2
 8010e18:	1b5b      	subs	r3, r3, r5
 8010e1a:	80c3      	strh	r3, [r0, #6]
 8010e1c:	8045      	strh	r5, [r0, #2]
 8010e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e22:	2300      	movs	r3, #0
 8010e24:	8003      	strh	r3, [r0, #0]
 8010e26:	8043      	strh	r3, [r0, #2]
 8010e28:	8083      	strh	r3, [r0, #4]
 8010e2a:	80c3      	strh	r3, [r0, #6]
 8010e2c:	e7f7      	b.n	8010e1e <_ZN8touchgfx4RectaNERKS0_+0x76>

08010e2e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8010e2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd06      	ble.n	8010e44 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010e36:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	bfcc      	ite	gt
 8010e3e:	2000      	movgt	r0, #0
 8010e40:	2001      	movle	r0, #1
 8010e42:	4770      	bx	lr
 8010e44:	2001      	movs	r0, #1
 8010e46:	4770      	bx	lr

08010e48 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010e48:	2300      	movs	r3, #0
 8010e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4e:	4604      	mov	r4, r0
 8010e50:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010e52:	8003      	strh	r3, [r0, #0]
 8010e54:	8043      	strh	r3, [r0, #2]
 8010e56:	8083      	strh	r3, [r0, #4]
 8010e58:	80c3      	strh	r3, [r0, #6]
 8010e5a:	2d00      	cmp	r5, #0
 8010e5c:	d040      	beq.n	8010ee0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8010e5e:	1d28      	adds	r0, r5, #4
 8010e60:	f7ff ffe5 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e64:	b988      	cbnz	r0, 8010e8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff ffe1 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e6c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010e70:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010e74:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010e78:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010e7c:	b138      	cbz	r0, 8010e8e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010e7e:	8022      	strh	r2, [r4, #0]
 8010e80:	8063      	strh	r3, [r4, #2]
 8010e82:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010e86:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010e8a:	69ad      	ldr	r5, [r5, #24]
 8010e8c:	e7e5      	b.n	8010e5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010e8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010e92:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010e96:	4290      	cmp	r0, r2
 8010e98:	4607      	mov	r7, r0
 8010e9a:	bfa8      	it	ge
 8010e9c:	4617      	movge	r7, r2
 8010e9e:	4299      	cmp	r1, r3
 8010ea0:	460e      	mov	r6, r1
 8010ea2:	bfa8      	it	ge
 8010ea4:	461e      	movge	r6, r3
 8010ea6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8010eaa:	4472      	add	r2, lr
 8010eac:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010eb0:	4440      	add	r0, r8
 8010eb2:	4471      	add	r1, lr
 8010eb4:	4463      	add	r3, ip
 8010eb6:	b200      	sxth	r0, r0
 8010eb8:	b212      	sxth	r2, r2
 8010eba:	b209      	sxth	r1, r1
 8010ebc:	b21b      	sxth	r3, r3
 8010ebe:	4290      	cmp	r0, r2
 8010ec0:	bfac      	ite	ge
 8010ec2:	ebc7 0200 	rsbge	r2, r7, r0
 8010ec6:	ebc7 0202 	rsblt	r2, r7, r2
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	bfac      	ite	ge
 8010ece:	ebc6 0301 	rsbge	r3, r6, r1
 8010ed2:	ebc6 0303 	rsblt	r3, r6, r3
 8010ed6:	8027      	strh	r7, [r4, #0]
 8010ed8:	8066      	strh	r6, [r4, #2]
 8010eda:	80a2      	strh	r2, [r4, #4]
 8010edc:	80e3      	strh	r3, [r4, #6]
 8010ede:	e7d4      	b.n	8010e8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ee6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010ee6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010eea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010eee:	b383      	cbz	r3, 8010f52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010ef0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010ef2:	b374      	cbz	r4, 8010f52 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010ef4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010ef8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010efc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010f00:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010f04:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010f08:	b303      	cbz	r3, 8010f4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010f0a:	4668      	mov	r0, sp
 8010f0c:	1d21      	adds	r1, r4, #4
 8010f0e:	f8ad 5000 	strh.w	r5, [sp]
 8010f12:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010f16:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010f1a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8010f1e:	f7ff ff43 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8010f22:	4668      	mov	r0, sp
 8010f24:	f7ff ff83 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f28:	b980      	cbnz	r0, 8010f4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010f2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f2e:	88a2      	ldrh	r2, [r4, #4]
 8010f30:	4669      	mov	r1, sp
 8010f32:	1a9b      	subs	r3, r3, r2
 8010f34:	f8ad 3000 	strh.w	r3, [sp]
 8010f38:	88e2      	ldrh	r2, [r4, #6]
 8010f3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	4798      	blx	r3
 8010f4c:	69a4      	ldr	r4, [r4, #24]
 8010f4e:	2c00      	cmp	r4, #0
 8010f50:	d1d8      	bne.n	8010f04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010f52:	b002      	add	sp, #8
 8010f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f5a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010f5e:	460d      	mov	r5, r1
 8010f60:	4616      	mov	r6, r2
 8010f62:	b323      	cbz	r3, 8010fae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010f64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010f66:	b314      	cbz	r4, 8010fae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010f68:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010f6c:	b1eb      	cbz	r3, 8010faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010f6e:	466b      	mov	r3, sp
 8010f70:	6828      	ldr	r0, [r5, #0]
 8010f72:	6869      	ldr	r1, [r5, #4]
 8010f74:	c303      	stmia	r3!, {r0, r1}
 8010f76:	4668      	mov	r0, sp
 8010f78:	1d21      	adds	r1, r4, #4
 8010f7a:	f7ff ff15 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8010f7e:	4668      	mov	r0, sp
 8010f80:	f7ff ff55 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f84:	b988      	cbnz	r0, 8010faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010f86:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f8a:	88a2      	ldrh	r2, [r4, #4]
 8010f8c:	4669      	mov	r1, sp
 8010f8e:	1a9b      	subs	r3, r3, r2
 8010f90:	f8ad 3000 	strh.w	r3, [sp]
 8010f94:	88e2      	ldrh	r2, [r4, #6]
 8010f96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	1a9b      	subs	r3, r3, r2
 8010f9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010fa2:	6823      	ldr	r3, [r4, #0]
 8010fa4:	4632      	mov	r2, r6
 8010fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fa8:	4798      	blx	r3
 8010faa:	69a4      	ldr	r4, [r4, #24]
 8010fac:	e7db      	b.n	8010f66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010fae:	b002      	add	sp, #8
 8010fb0:	bd70      	pop	{r4, r5, r6, pc}

08010fb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010fb2:	b513      	push	{r0, r1, r4, lr}
 8010fb4:	6803      	ldr	r3, [r0, #0]
 8010fb6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e9cd 3300 	strd	r3, r3, [sp]
 8010fc0:	466b      	mov	r3, sp
 8010fc2:	47a0      	blx	r4
 8010fc4:	b002      	add	sp, #8
 8010fc6:	bd10      	pop	{r4, pc}

08010fc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010fce:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010fd2:	4770      	bx	lr

08010fd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010fda:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010fde:	4770      	bx	lr

08010fe0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	6843      	ldr	r3, [r0, #4]
 8010fe4:	725a      	strb	r2, [r3, #9]
 8010fe6:	6840      	ldr	r0, [r0, #4]
 8010fe8:	6803      	ldr	r3, [r0, #0]
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	4718      	bx	r3

08010fee <_ZN8touchgfx3HAL8flushDMAEv>:
 8010fee:	6840      	ldr	r0, [r0, #4]
 8010ff0:	6803      	ldr	r3, [r0, #0]
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	4718      	bx	r3

08010ff6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010ff6:	b530      	push	{r4, r5, lr}
 8010ff8:	b08b      	sub	sp, #44	; 0x2c
 8010ffa:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8010ffe:	6804      	ldr	r4, [r0, #0]
 8011000:	9509      	str	r5, [sp, #36]	; 0x24
 8011002:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011006:	9508      	str	r5, [sp, #32]
 8011008:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801100c:	9507      	str	r5, [sp, #28]
 801100e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8011012:	9506      	str	r5, [sp, #24]
 8011014:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8011018:	9505      	str	r5, [sp, #20]
 801101a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801101e:	9504      	str	r5, [sp, #16]
 8011020:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8011024:	9503      	str	r5, [sp, #12]
 8011026:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801102a:	9502      	str	r5, [sp, #8]
 801102c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011030:	e9cd 3500 	strd	r3, r5, [sp]
 8011034:	4613      	mov	r3, r2
 8011036:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8011038:	2200      	movs	r2, #0
 801103a:	47a0      	blx	r4
 801103c:	b00b      	add	sp, #44	; 0x2c
 801103e:	bd30      	pop	{r4, r5, pc}

08011040 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011040:	4b04      	ldr	r3, [pc, #16]	; (8011054 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	b123      	cbz	r3, 8011050 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011046:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801104a:	f080 0001 	eor.w	r0, r0, #1
 801104e:	4770      	bx	lr
 8011050:	2001      	movs	r0, #1
 8011052:	4770      	bx	lr
 8011054:	2002008a 	.word	0x2002008a

08011058 <_ZN8touchgfx3HAL8endFrameEv>:
 8011058:	b510      	push	{r4, lr}
 801105a:	4604      	mov	r4, r0
 801105c:	6840      	ldr	r0, [r0, #4]
 801105e:	6803      	ldr	r3, [r0, #0]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	4798      	blx	r3
 8011064:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011068:	b113      	cbz	r3, 8011070 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801106a:	2301      	movs	r3, #1
 801106c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011070:	bd10      	pop	{r4, pc}

08011072 <_ZN8touchgfx3HAL10initializeEv>:
 8011072:	b510      	push	{r4, lr}
 8011074:	4604      	mov	r4, r0
 8011076:	f7fe fa3f 	bl	800f4f8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801107a:	f7fd fdad 	bl	800ebd8 <_ZN8touchgfx4GPIO4initEv>
 801107e:	6860      	ldr	r0, [r4, #4]
 8011080:	6803      	ldr	r3, [r0, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	4798      	blx	r3
 8011086:	68e0      	ldr	r0, [r4, #12]
 8011088:	6803      	ldr	r3, [r0, #0]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	4798      	blx	r3
 801108e:	6823      	ldr	r3, [r4, #0]
 8011090:	4620      	mov	r0, r4
 8011092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011098:	4718      	bx	r3

0801109a <_ZN8touchgfx3HAL9taskEntryEv>:
 801109a:	4604      	mov	r4, r0
 801109c:	b508      	push	{r3, lr}
 801109e:	6803      	ldr	r3, [r0, #0]
 80110a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110a4:	4798      	blx	r3
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110aa:	4620      	mov	r0, r4
 80110ac:	4798      	blx	r3
 80110ae:	f7fe fa99 	bl	800f5e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b6:	e7f8      	b.n	80110aa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080110b8 <_ZN8touchgfx3HAL4tickEv>:
 80110b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80110ba:	6803      	ldr	r3, [r0, #0]
 80110bc:	4604      	mov	r4, r0
 80110be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80110c2:	4798      	blx	r3
 80110c4:	4d59      	ldr	r5, [pc, #356]	; (801122c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f000 8095 	beq.w	80111f6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80110cc:	2600      	movs	r6, #0
 80110ce:	2001      	movs	r0, #1
 80110d0:	f7fd fd8a 	bl	800ebe8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80110d4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80110d8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80110dc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80110e0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80110e4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80110e8:	b133      	cbz	r3, 80110f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80110ea:	6823      	ldr	r3, [r4, #0]
 80110ec:	4620      	mov	r0, r4
 80110ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80110f2:	4798      	blx	r3
 80110f4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80110f8:	2601      	movs	r6, #1
 80110fa:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80110fe:	6862      	ldr	r2, [r4, #4]
 8011100:	f083 0301 	eor.w	r3, r3, #1
 8011104:	7253      	strb	r3, [r2, #9]
 8011106:	702e      	strb	r6, [r5, #0]
 8011108:	f002 fdca 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 801110c:	6803      	ldr	r3, [r0, #0]
 801110e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011110:	4798      	blx	r3
 8011112:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011116:	b90b      	cbnz	r3, 801111c <_ZN8touchgfx3HAL4tickEv+0x64>
 8011118:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801111c:	f002 fdc0 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 8011120:	6803      	ldr	r3, [r0, #0]
 8011122:	695b      	ldr	r3, [r3, #20]
 8011124:	4798      	blx	r3
 8011126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011128:	6803      	ldr	r3, [r0, #0]
 801112a:	691b      	ldr	r3, [r3, #16]
 801112c:	4798      	blx	r3
 801112e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011132:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8011136:	3b01      	subs	r3, #1
 8011138:	b2db      	uxtb	r3, r3
 801113a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801113e:	b10a      	cbz	r2, 8011144 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1eb      	bne.n	801111c <_ZN8touchgfx3HAL4tickEv+0x64>
 8011144:	4a3a      	ldr	r2, [pc, #232]	; (8011230 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011146:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801114a:	7813      	ldrb	r3, [r2, #0]
 801114c:	3301      	adds	r3, #1
 801114e:	b25b      	sxtb	r3, r3
 8011150:	4299      	cmp	r1, r3
 8011152:	7013      	strb	r3, [r2, #0]
 8011154:	dc10      	bgt.n	8011178 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011156:	2300      	movs	r3, #0
 8011158:	68e0      	ldr	r0, [r4, #12]
 801115a:	7013      	strb	r3, [r2, #0]
 801115c:	6803      	ldr	r3, [r0, #0]
 801115e:	aa03      	add	r2, sp, #12
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	a902      	add	r1, sp, #8
 8011164:	4798      	blx	r3
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	2800      	cmp	r0, #0
 801116a:	d050      	beq.n	801120e <_ZN8touchgfx3HAL4tickEv+0x156>
 801116c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011170:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011174:	4620      	mov	r0, r4
 8011176:	4798      	blx	r3
 8011178:	2300      	movs	r3, #0
 801117a:	6960      	ldr	r0, [r4, #20]
 801117c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011180:	b158      	cbz	r0, 801119a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011182:	6803      	ldr	r3, [r0, #0]
 8011184:	f10d 0107 	add.w	r1, sp, #7
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	4798      	blx	r3
 801118c:	b128      	cbz	r0, 801119a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801118e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011190:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011194:	6803      	ldr	r3, [r0, #0]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	4798      	blx	r3
 801119a:	f104 001c 	add.w	r0, r4, #28
 801119e:	f011 f8a9 	bl	80222f4 <_ZN8touchgfx8Gestures4tickEv>
 80111a2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80111a6:	b30b      	cbz	r3, 80111ec <_ZN8touchgfx3HAL4tickEv+0x134>
 80111a8:	6920      	ldr	r0, [r4, #16]
 80111aa:	6803      	ldr	r3, [r0, #0]
 80111ac:	691b      	ldr	r3, [r3, #16]
 80111ae:	4798      	blx	r3
 80111b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111b2:	4606      	mov	r6, r0
 80111b4:	b903      	cbnz	r3, 80111b8 <_ZN8touchgfx3HAL4tickEv+0x100>
 80111b6:	6720      	str	r0, [r4, #112]	; 0x70
 80111b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111ba:	4a1e      	ldr	r2, [pc, #120]	; (8011234 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80111bc:	1af3      	subs	r3, r6, r3
 80111be:	4293      	cmp	r3, r2
 80111c0:	d914      	bls.n	80111ec <_ZN8touchgfx3HAL4tickEv+0x134>
 80111c2:	6920      	ldr	r0, [r4, #16]
 80111c4:	6803      	ldr	r3, [r0, #0]
 80111c6:	699b      	ldr	r3, [r3, #24]
 80111c8:	4798      	blx	r3
 80111ca:	2264      	movs	r2, #100	; 0x64
 80111cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111ce:	1af3      	subs	r3, r6, r3
 80111d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80111d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80111d8:	2800      	cmp	r0, #0
 80111da:	dc1d      	bgt.n	8011218 <_ZN8touchgfx3HAL4tickEv+0x160>
 80111dc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80111e0:	6920      	ldr	r0, [r4, #16]
 80111e2:	2100      	movs	r1, #0
 80111e4:	6803      	ldr	r3, [r0, #0]
 80111e6:	69db      	ldr	r3, [r3, #28]
 80111e8:	4798      	blx	r3
 80111ea:	6726      	str	r6, [r4, #112]	; 0x70
 80111ec:	f002 fd58 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 80111f0:	6803      	ldr	r3, [r0, #0]
 80111f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f4:	4798      	blx	r3
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	4620      	mov	r0, r4
 80111fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80111fe:	4798      	blx	r3
 8011200:	2001      	movs	r0, #1
 8011202:	f7fd fd0d 	bl	800ec20 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011206:	2300      	movs	r3, #0
 8011208:	702b      	strb	r3, [r5, #0]
 801120a:	b004      	add	sp, #16
 801120c:	bd70      	pop	{r4, r5, r6, pc}
 801120e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011212:	4620      	mov	r0, r4
 8011214:	4798      	blx	r3
 8011216:	e7af      	b.n	8011178 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011218:	2863      	cmp	r0, #99	; 0x63
 801121a:	bfcb      	itete	gt
 801121c:	2300      	movgt	r3, #0
 801121e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8011222:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8011226:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801122a:	e7d9      	b.n	80111e0 <_ZN8touchgfx3HAL4tickEv+0x128>
 801122c:	20020090 	.word	0x20020090
 8011230:	20020091 	.word	0x20020091
 8011234:	05f5e100 	.word	0x05f5e100

08011238 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011238:	f7fe b9a0 	b.w	800f57c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801123c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801123c:	6581      	str	r1, [r0, #88]	; 0x58
 801123e:	301c      	adds	r0, #28
 8011240:	f011 b856 	b.w	80222f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011244 <_ZN8touchgfx3HAL5touchEll>:
 8011244:	b530      	push	{r4, r5, lr}
 8011246:	4604      	mov	r4, r0
 8011248:	b087      	sub	sp, #28
 801124a:	a804      	add	r0, sp, #16
 801124c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011250:	f002 fb14 	bl	801387c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8011254:	9b04      	ldr	r3, [sp, #16]
 8011256:	a906      	add	r1, sp, #24
 8011258:	f8ad 300c 	strh.w	r3, [sp, #12]
 801125c:	9b05      	ldr	r3, [sp, #20]
 801125e:	a803      	add	r0, sp, #12
 8011260:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8011264:	f002 fb5c 	bl	8013920 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8011268:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801126c:	f104 001c 	add.w	r0, r4, #28
 8011270:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011274:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011278:	b189      	cbz	r1, 801129e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801127a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011284:	4613      	mov	r3, r2
 8011286:	462a      	mov	r2, r5
 8011288:	f011 f842 	bl	8022310 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801128c:	b128      	cbz	r0, 801129a <_ZN8touchgfx3HAL5touchEll+0x56>
 801128e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011292:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011294:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011298:	6623      	str	r3, [r4, #96]	; 0x60
 801129a:	b007      	add	sp, #28
 801129c:	bd30      	pop	{r4, r5, pc}
 801129e:	f011 f877 	bl	8022390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80112a2:	2301      	movs	r3, #1
 80112a4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80112a8:	e7f1      	b.n	801128e <_ZN8touchgfx3HAL5touchEll+0x4a>

080112aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80112aa:	b510      	push	{r4, lr}
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d046      	beq.n	801133e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80112b0:	ea81 0002 	eor.w	r0, r1, r2
 80112b4:	07c4      	lsls	r4, r0, #31
 80112b6:	d508      	bpl.n	80112ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80112b8:	440b      	add	r3, r1
 80112ba:	3a01      	subs	r2, #1
 80112bc:	428b      	cmp	r3, r1
 80112be:	d93e      	bls.n	801133e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80112c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80112c4:	f801 0b01 	strb.w	r0, [r1], #1
 80112c8:	e7f8      	b.n	80112bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80112ca:	07d0      	lsls	r0, r2, #31
 80112cc:	bf42      	ittt	mi
 80112ce:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80112d2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80112d6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d911      	bls.n	8011302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80112de:	ea81 0402 	eor.w	r4, r1, r2
 80112e2:	07a4      	lsls	r4, r4, #30
 80112e4:	4610      	mov	r0, r2
 80112e6:	d022      	beq.n	801132e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80112e8:	f023 0401 	bic.w	r4, r3, #1
 80112ec:	440c      	add	r4, r1
 80112ee:	428c      	cmp	r4, r1
 80112f0:	4602      	mov	r2, r0
 80112f2:	d904      	bls.n	80112fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80112f4:	8812      	ldrh	r2, [r2, #0]
 80112f6:	3002      	adds	r0, #2
 80112f8:	f821 2b02 	strh.w	r2, [r1], #2
 80112fc:	e7f7      	b.n	80112ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80112fe:	f003 0301 	and.w	r3, r3, #1
 8011302:	f023 0003 	bic.w	r0, r3, #3
 8011306:	4408      	add	r0, r1
 8011308:	4288      	cmp	r0, r1
 801130a:	4614      	mov	r4, r2
 801130c:	d904      	bls.n	8011318 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801130e:	6824      	ldr	r4, [r4, #0]
 8011310:	3204      	adds	r2, #4
 8011312:	f841 4b04 	str.w	r4, [r1], #4
 8011316:	e7f7      	b.n	8011308 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011318:	f003 0303 	and.w	r3, r3, #3
 801131c:	440b      	add	r3, r1
 801131e:	3a01      	subs	r2, #1
 8011320:	428b      	cmp	r3, r1
 8011322:	d90c      	bls.n	801133e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011324:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011328:	f801 0b01 	strb.w	r0, [r1], #1
 801132c:	e7f8      	b.n	8011320 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801132e:	0790      	lsls	r0, r2, #30
 8011330:	d0e7      	beq.n	8011302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011332:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011336:	3b02      	subs	r3, #2
 8011338:	f821 0b02 	strh.w	r0, [r1], #2
 801133c:	e7e1      	b.n	8011302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801133e:	2001      	movs	r0, #1
 8011340:	bd10      	pop	{r4, pc}

08011342 <_ZN8touchgfx3HAL7noTouchEv>:
 8011342:	b510      	push	{r4, lr}
 8011344:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8011348:	4604      	mov	r4, r0
 801134a:	b153      	cbz	r3, 8011362 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801134c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8011350:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8011354:	2101      	movs	r1, #1
 8011356:	301c      	adds	r0, #28
 8011358:	f011 f81a 	bl	8022390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801135c:	2300      	movs	r3, #0
 801135e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011362:	bd10      	pop	{r4, pc}

08011364 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011368:	4604      	mov	r4, r0
 801136a:	2000      	movs	r0, #0
 801136c:	b085      	sub	sp, #20
 801136e:	ad04      	add	r5, sp, #16
 8011370:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011374:	69a0      	ldr	r0, [r4, #24]
 8011376:	4699      	mov	r9, r3
 8011378:	6806      	ldr	r6, [r0, #0]
 801137a:	9501      	str	r5, [sp, #4]
 801137c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8011380:	460f      	mov	r7, r1
 8011382:	9500      	str	r5, [sp, #0]
 8011384:	6835      	ldr	r5, [r6, #0]
 8011386:	4690      	mov	r8, r2
 8011388:	47a8      	blx	r5
 801138a:	4d10      	ldr	r5, [pc, #64]	; (80113cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801138c:	4606      	mov	r6, r0
 801138e:	f8a5 9000 	strh.w	r9, [r5]
 8011392:	f7fb feff 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011396:	6803      	ldr	r3, [r0, #0]
 8011398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139a:	4798      	blx	r3
 801139c:	b128      	cbz	r0, 80113aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801139e:	2801      	cmp	r0, #1
 80113a0:	d00b      	beq.n	80113ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80113a2:	4630      	mov	r0, r6
 80113a4:	b005      	add	sp, #20
 80113a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113aa:	882b      	ldrh	r3, [r5, #0]
 80113ac:	fb08 7203 	mla	r2, r8, r3, r7
 80113b0:	9b03      	ldr	r3, [sp, #12]
 80113b2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80113b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80113b8:	e7f3      	b.n	80113a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80113ba:	882a      	ldrh	r2, [r5, #0]
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	fb08 7202 	mla	r2, r8, r2, r7
 80113c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80113c6:	1a9a      	subs	r2, r3, r2
 80113c8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80113ca:	e7ea      	b.n	80113a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80113cc:	20020086 	.word	0x20020086

080113d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80113d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113d2:	b08b      	sub	sp, #44	; 0x2c
 80113d4:	4617      	mov	r7, r2
 80113d6:	4604      	mov	r4, r0
 80113d8:	460e      	mov	r6, r1
 80113da:	461d      	mov	r5, r3
 80113dc:	f7fb feda 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 80113e0:	6803      	ldr	r3, [r0, #0]
 80113e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e4:	4798      	blx	r3
 80113e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80113ea:	9007      	str	r0, [sp, #28]
 80113ec:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80113f0:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80113f2:	6822      	ldr	r2, [r4, #0]
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	4631      	mov	r1, r6
 80113f8:	9306      	str	r3, [sp, #24]
 80113fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80113fe:	4620      	mov	r0, r4
 8011400:	9305      	str	r3, [sp, #20]
 8011402:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011406:	9304      	str	r3, [sp, #16]
 8011408:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801140c:	9303      	str	r3, [sp, #12]
 801140e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011412:	9302      	str	r3, [sp, #8]
 8011414:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011418:	e9cd 5300 	strd	r5, r3, [sp]
 801141c:	463b      	mov	r3, r7
 801141e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8011420:	2200      	movs	r2, #0
 8011422:	47a8      	blx	r5
 8011424:	b00b      	add	sp, #44	; 0x2c
 8011426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011428:	20020086 	.word	0x20020086

0801142c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801142c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011430:	4698      	mov	r8, r3
 8011432:	6803      	ldr	r3, [r0, #0]
 8011434:	b08b      	sub	sp, #44	; 0x2c
 8011436:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8011438:	4b14      	ldr	r3, [pc, #80]	; (801148c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801143a:	4617      	mov	r7, r2
 801143c:	f8b3 9000 	ldrh.w	r9, [r3]
 8011440:	460e      	mov	r6, r1
 8011442:	4604      	mov	r4, r0
 8011444:	f7fb fea6 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011448:	6803      	ldr	r3, [r0, #0]
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	4798      	blx	r3
 801144e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011452:	2200      	movs	r2, #0
 8011454:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011458:	2302      	movs	r3, #2
 801145a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801145e:	2301      	movs	r3, #1
 8011460:	9305      	str	r3, [sp, #20]
 8011462:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011466:	4631      	mov	r1, r6
 8011468:	9304      	str	r3, [sp, #16]
 801146a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801146e:	4620      	mov	r0, r4
 8011470:	9303      	str	r3, [sp, #12]
 8011472:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011476:	9302      	str	r3, [sp, #8]
 8011478:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801147c:	e9cd 8300 	strd	r8, r3, [sp]
 8011480:	463b      	mov	r3, r7
 8011482:	47a8      	blx	r5
 8011484:	b00b      	add	sp, #44	; 0x2c
 8011486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801148a:	bf00      	nop
 801148c:	20020086 	.word	0x20020086

08011490 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011494:	4698      	mov	r8, r3
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	b087      	sub	sp, #28
 801149a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801149c:	4b10      	ldr	r3, [pc, #64]	; (80114e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801149e:	460e      	mov	r6, r1
 80114a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80114a4:	4617      	mov	r7, r2
 80114a6:	4604      	mov	r4, r0
 80114a8:	f7fb fe74 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 80114ac:	6803      	ldr	r3, [r0, #0]
 80114ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b0:	4798      	blx	r3
 80114b2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80114b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80114ba:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80114be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80114c2:	463a      	mov	r2, r7
 80114c4:	9302      	str	r3, [sp, #8]
 80114c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80114ca:	4631      	mov	r1, r6
 80114cc:	9301      	str	r3, [sp, #4]
 80114ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80114d2:	4620      	mov	r0, r4
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	4643      	mov	r3, r8
 80114d8:	47a8      	blx	r5
 80114da:	b007      	add	sp, #28
 80114dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114e0:	20020086 	.word	0x20020086

080114e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80114e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e8:	4604      	mov	r4, r0
 80114ea:	b08f      	sub	sp, #60	; 0x3c
 80114ec:	4610      	mov	r0, r2
 80114ee:	460d      	mov	r5, r1
 80114f0:	4691      	mov	r9, r2
 80114f2:	461e      	mov	r6, r3
 80114f4:	f005 f96e 	bl	80167d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	f000 809d 	beq.w	8011638 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	4620      	mov	r0, r4
 8011502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011504:	4798      	blx	r3
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	f8df b190 	ldr.w	fp, [pc, #400]	; 801169c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801150e:	4620      	mov	r0, r4
 8011510:	4798      	blx	r3
 8011512:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80116a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011516:	f8bb 3000 	ldrh.w	r3, [fp]
 801151a:	4f5d      	ldr	r7, [pc, #372]	; (8011690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801151c:	9301      	str	r3, [sp, #4]
 801151e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011522:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011526:	9302      	str	r3, [sp, #8]
 8011528:	883b      	ldrh	r3, [r7, #0]
 801152a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801152e:	9303      	str	r3, [sp, #12]
 8011530:	4b58      	ldr	r3, [pc, #352]	; (8011694 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011532:	4640      	mov	r0, r8
 8011534:	881a      	ldrh	r2, [r3, #0]
 8011536:	9305      	str	r3, [sp, #20]
 8011538:	9204      	str	r2, [sp, #16]
 801153a:	f005 f9df 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801153e:	8038      	strh	r0, [r7, #0]
 8011540:	4640      	mov	r0, r8
 8011542:	f005 fa0f 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011546:	9b05      	ldr	r3, [sp, #20]
 8011548:	b280      	uxth	r0, r0
 801154a:	8018      	strh	r0, [r3, #0]
 801154c:	4b52      	ldr	r3, [pc, #328]	; (8011698 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d174      	bne.n	801163e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011554:	883b      	ldrh	r3, [r7, #0]
 8011556:	f8aa 0000 	strh.w	r0, [sl]
 801155a:	f8ab 3000 	strh.w	r3, [fp]
 801155e:	4648      	mov	r0, r9
 8011560:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011564:	f005 f936 	bl	80167d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011568:	2200      	movs	r2, #0
 801156a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801156e:	4611      	mov	r1, r2
 8011570:	4628      	mov	r0, r5
 8011572:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011576:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801157a:	f7fc fb54 	bl	800dc26 <_ZN8touchgfx8Drawable5setXYEss>
 801157e:	2301      	movs	r3, #1
 8011580:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011584:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011588:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	dd5c      	ble.n	801164a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011590:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011594:	2b00      	cmp	r3, #0
 8011596:	dd58      	ble.n	801164a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011598:	462a      	mov	r2, r5
 801159a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801159e:	ab0a      	add	r3, sp, #40	; 0x28
 80115a0:	6851      	ldr	r1, [r2, #4]
 80115a2:	c303      	stmia	r3!, {r0, r1}
 80115a4:	4631      	mov	r1, r6
 80115a6:	a80a      	add	r0, sp, #40	; 0x28
 80115a8:	f7ff fbfe 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 80115ac:	2100      	movs	r1, #0
 80115ae:	4b38      	ldr	r3, [pc, #224]	; (8011690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80115b0:	910c      	str	r1, [sp, #48]	; 0x30
 80115b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80115b6:	4b37      	ldr	r3, [pc, #220]	; (8011694 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80115b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80115bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115c0:	aa0a      	add	r2, sp, #40	; 0x28
 80115c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80115c6:	ab08      	add	r3, sp, #32
 80115c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80115d0:	4618      	mov	r0, r3
 80115d2:	a90c      	add	r1, sp, #48	; 0x30
 80115d4:	f7ff fbe8 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 80115d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d13c      	bne.n	8011658 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80115de:	2000      	movs	r0, #0
 80115e0:	2600      	movs	r6, #0
 80115e2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80115e6:	696b      	ldr	r3, [r5, #20]
 80115e8:	682a      	ldr	r2, [r5, #0]
 80115ea:	616e      	str	r6, [r5, #20]
 80115ec:	9305      	str	r3, [sp, #20]
 80115ee:	6892      	ldr	r2, [r2, #8]
 80115f0:	a908      	add	r1, sp, #32
 80115f2:	4628      	mov	r0, r5
 80115f4:	4790      	blx	r2
 80115f6:	9b05      	ldr	r3, [sp, #20]
 80115f8:	4652      	mov	r2, sl
 80115fa:	616b      	str	r3, [r5, #20]
 80115fc:	4649      	mov	r1, r9
 80115fe:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011602:	4628      	mov	r0, r5
 8011604:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011608:	f7fc fb0d 	bl	800dc26 <_ZN8touchgfx8Drawable5setXYEss>
 801160c:	9a01      	ldr	r2, [sp, #4]
 801160e:	4b23      	ldr	r3, [pc, #140]	; (801169c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011610:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011614:	801a      	strh	r2, [r3, #0]
 8011616:	9a02      	ldr	r2, [sp, #8]
 8011618:	4b21      	ldr	r3, [pc, #132]	; (80116a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801161a:	4620      	mov	r0, r4
 801161c:	801a      	strh	r2, [r3, #0]
 801161e:	9a03      	ldr	r2, [sp, #12]
 8011620:	4b1b      	ldr	r3, [pc, #108]	; (8011690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011622:	801a      	strh	r2, [r3, #0]
 8011624:	4b1b      	ldr	r3, [pc, #108]	; (8011694 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011626:	9a04      	ldr	r2, [sp, #16]
 8011628:	801a      	strh	r2, [r3, #0]
 801162a:	6823      	ldr	r3, [r4, #0]
 801162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162e:	4798      	blx	r3
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	4620      	mov	r0, r4
 8011634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011636:	4798      	blx	r3
 8011638:	b00f      	add	sp, #60	; 0x3c
 801163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163e:	883b      	ldrh	r3, [r7, #0]
 8011640:	f8ab 0000 	strh.w	r0, [fp]
 8011644:	f8aa 3000 	strh.w	r3, [sl]
 8011648:	e789      	b.n	801155e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801164a:	462a      	mov	r2, r5
 801164c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011650:	ab0a      	add	r3, sp, #40	; 0x28
 8011652:	6851      	ldr	r1, [r2, #4]
 8011654:	c303      	stmia	r3!, {r0, r1}
 8011656:	e7a9      	b.n	80115ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011658:	a807      	add	r0, sp, #28
 801165a:	f005 fabf 	bl	8016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801165e:	4606      	mov	r6, r0
 8011660:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011662:	6803      	ldr	r3, [r0, #0]
 8011664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011666:	4798      	blx	r3
 8011668:	4286      	cmp	r6, r0
 801166a:	d1b8      	bne.n	80115de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801166c:	f7fb fd92 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011670:	6803      	ldr	r3, [r0, #0]
 8011672:	4606      	mov	r6, r0
 8011674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011676:	a807      	add	r0, sp, #28
 8011678:	9305      	str	r3, [sp, #20]
 801167a:	f005 faaf 	bl	8016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801167e:	9b05      	ldr	r3, [sp, #20]
 8011680:	4601      	mov	r1, r0
 8011682:	4630      	mov	r0, r6
 8011684:	4798      	blx	r3
 8011686:	f080 0001 	eor.w	r0, r0, #1
 801168a:	b2c0      	uxtb	r0, r0
 801168c:	e7a8      	b.n	80115e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801168e:	bf00      	nop
 8011690:	20020080 	.word	0x20020080
 8011694:	20020082 	.word	0x20020082
 8011698:	20020084 	.word	0x20020084
 801169c:	20020086 	.word	0x20020086
 80116a0:	20020088 	.word	0x20020088

080116a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80116a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a8:	461d      	mov	r5, r3
 80116aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116ae:	2400      	movs	r4, #0
 80116b0:	b08a      	sub	sp, #40	; 0x28
 80116b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80116b6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80116ba:	4690      	mov	r8, r2
 80116bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80116c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80116c4:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80116c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80116cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80116d0:	4607      	mov	r7, r0
 80116d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80116d6:	9404      	str	r4, [sp, #16]
 80116d8:	f88d 4020 	strb.w	r4, [sp, #32]
 80116dc:	f7fd fc0a 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80116e0:	fb06 8505 	mla	r5, r6, r5, r8
 80116e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	9505      	str	r5, [sp, #20]
 80116ec:	f8ad 601e 	strh.w	r6, [sp, #30]
 80116f0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80116f4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80116f8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80116fc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011700:	6803      	ldr	r3, [r0, #0]
 8011702:	a901      	add	r1, sp, #4
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	4798      	blx	r3
 8011708:	b00a      	add	sp, #40	; 0x28
 801170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801170e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801170e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011712:	2400      	movs	r4, #0
 8011714:	461d      	mov	r5, r3
 8011716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801171a:	4691      	mov	r9, r2
 801171c:	b08b      	sub	sp, #44	; 0x2c
 801171e:	4688      	mov	r8, r1
 8011720:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011724:	4607      	mov	r7, r0
 8011726:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801172a:	9404      	str	r4, [sp, #16]
 801172c:	f7fd fbe2 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011730:	fb06 9505 	mla	r5, r6, r5, r9
 8011734:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011738:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801173c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011740:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	9505      	str	r5, [sp, #20]
 8011748:	f8ad 301a 	strh.w	r3, [sp, #26]
 801174c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011750:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011754:	f8cd 8010 	str.w	r8, [sp, #16]
 8011758:	f8ad 4020 	strh.w	r4, [sp, #32]
 801175c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011760:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011764:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011768:	6803      	ldr	r3, [r0, #0]
 801176a:	a901      	add	r1, sp, #4
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	4798      	blx	r3
 8011770:	b00b      	add	sp, #44	; 0x2c
 8011772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011778 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177c:	4698      	mov	r8, r3
 801177e:	2300      	movs	r3, #0
 8011780:	b08a      	sub	sp, #40	; 0x28
 8011782:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011786:	4606      	mov	r6, r0
 8011788:	2d0b      	cmp	r5, #11
 801178a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801178e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011792:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011796:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801179a:	9304      	str	r3, [sp, #16]
 801179c:	d137      	bne.n	801180e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801179e:	2380      	movs	r3, #128	; 0x80
 80117a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80117a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80117a8:	f88d 0020 	strb.w	r0, [sp, #32]
 80117ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80117b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80117b4:	4630      	mov	r0, r6
 80117b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80117ba:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80117be:	9203      	str	r2, [sp, #12]
 80117c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80117c4:	f7fd fb96 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80117c8:	2c0b      	cmp	r4, #11
 80117ca:	bf8c      	ite	hi
 80117cc:	2100      	movhi	r1, #0
 80117ce:	4b1b      	ldrls	r3, [pc, #108]	; (801183c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80117d0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80117d4:	bf98      	it	ls
 80117d6:	5d19      	ldrbls	r1, [r3, r4]
 80117d8:	fb02 8307 	mla	r3, r2, r7, r8
 80117dc:	10c9      	asrs	r1, r1, #3
 80117de:	fb01 0003 	mla	r0, r1, r3, r0
 80117e2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80117e6:	9005      	str	r0, [sp, #20]
 80117e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80117ec:	2300      	movs	r3, #0
 80117ee:	6870      	ldr	r0, [r6, #4]
 80117f0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80117f4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80117f8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80117fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011800:	6803      	ldr	r3, [r0, #0]
 8011802:	a901      	add	r1, sp, #4
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	4798      	blx	r3
 8011808:	b00a      	add	sp, #40	; 0x28
 801180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801180e:	2d02      	cmp	r5, #2
 8011810:	d109      	bne.n	8011826 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011812:	28ff      	cmp	r0, #255	; 0xff
 8011814:	d105      	bne.n	8011822 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011816:	f1bc 0f00 	cmp.w	ip, #0
 801181a:	bf14      	ite	ne
 801181c:	2340      	movne	r3, #64	; 0x40
 801181e:	2320      	moveq	r3, #32
 8011820:	e7be      	b.n	80117a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011822:	2340      	movs	r3, #64	; 0x40
 8011824:	e7bc      	b.n	80117a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011826:	28ff      	cmp	r0, #255	; 0xff
 8011828:	d105      	bne.n	8011836 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801182a:	f1bc 0f00 	cmp.w	ip, #0
 801182e:	bf14      	ite	ne
 8011830:	2304      	movne	r3, #4
 8011832:	2301      	moveq	r3, #1
 8011834:	e7b4      	b.n	80117a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011836:	2304      	movs	r3, #4
 8011838:	e7b2      	b.n	80117a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801183a:	bf00      	nop
 801183c:	08025594 	.word	0x08025594

08011840 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	b08b      	sub	sp, #44	; 0x2c
 8011846:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801184a:	461d      	mov	r5, r3
 801184c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011850:	bf14      	ite	ne
 8011852:	2308      	movne	r3, #8
 8011854:	2302      	moveq	r3, #2
 8011856:	2400      	movs	r4, #0
 8011858:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801185c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011860:	4688      	mov	r8, r1
 8011862:	4693      	mov	fp, r2
 8011864:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011868:	9404      	str	r4, [sp, #16]
 801186a:	4607      	mov	r7, r0
 801186c:	f7fd fb42 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011870:	2e0b      	cmp	r6, #11
 8011872:	bf98      	it	ls
 8011874:	4b15      	ldrls	r3, [pc, #84]	; (80118cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011876:	fb05 b50a 	mla	r5, r5, sl, fp
 801187a:	bf98      	it	ls
 801187c:	5d9c      	ldrbls	r4, [r3, r6]
 801187e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011882:	10e4      	asrs	r4, r4, #3
 8011884:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011888:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801188c:	fb04 0405 	mla	r4, r4, r5, r0
 8011890:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011894:	2300      	movs	r3, #0
 8011896:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	9405      	str	r4, [sp, #20]
 801189e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80118a2:	f8ad a01e 	strh.w	sl, [sp, #30]
 80118a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80118aa:	f88d 9020 	strb.w	r9, [sp, #32]
 80118ae:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80118b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80118b6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80118ba:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80118be:	6803      	ldr	r3, [r0, #0]
 80118c0:	a901      	add	r1, sp, #4
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	4798      	blx	r3
 80118c6:	b00b      	add	sp, #44	; 0x2c
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	08025594 	.word	0x08025594

080118d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80118d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d4:	461e      	mov	r6, r3
 80118d6:	4b0a      	ldr	r3, [pc, #40]	; (8011900 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80118d8:	460f      	mov	r7, r1
 80118da:	881d      	ldrh	r5, [r3, #0]
 80118dc:	4690      	mov	r8, r2
 80118de:	f7fb fc59 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 80118e2:	6803      	ldr	r3, [r0, #0]
 80118e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e6:	4798      	blx	r3
 80118e8:	280b      	cmp	r0, #11
 80118ea:	bf8e      	itee	hi
 80118ec:	2400      	movhi	r4, #0
 80118ee:	4b05      	ldrls	r3, [pc, #20]	; (8011904 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80118f0:	5c1c      	ldrbls	r4, [r3, r0]
 80118f2:	fb08 7005 	mla	r0, r8, r5, r7
 80118f6:	10e4      	asrs	r4, r4, #3
 80118f8:	fb04 6000 	mla	r0, r4, r0, r6
 80118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011900:	20020086 	.word	0x20020086
 8011904:	08025594 	.word	0x08025594

08011908 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801190a:	2500      	movs	r5, #0
 801190c:	b08b      	sub	sp, #44	; 0x2c
 801190e:	461f      	mov	r7, r3
 8011910:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011914:	4604      	mov	r4, r0
 8011916:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801191a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801191e:	4616      	mov	r6, r2
 8011920:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011924:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011928:	9504      	str	r5, [sp, #16]
 801192a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801192e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011932:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011936:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801193a:	f88d 3020 	strb.w	r3, [sp, #32]
 801193e:	f7fd fad9 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011942:	463a      	mov	r2, r7
 8011944:	4631      	mov	r1, r6
 8011946:	4603      	mov	r3, r0
 8011948:	4620      	mov	r0, r4
 801194a:	f7ff ffc1 	bl	80118d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801194e:	4b0e      	ldr	r3, [pc, #56]	; (8011988 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011950:	9005      	str	r0, [sp, #20]
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011958:	f7fb fc1c 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 801195c:	6803      	ldr	r3, [r0, #0]
 801195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011960:	4798      	blx	r3
 8011962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011964:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011968:	9304      	str	r3, [sp, #16]
 801196a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801196e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011972:	6860      	ldr	r0, [r4, #4]
 8011974:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011978:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801197c:	6803      	ldr	r3, [r0, #0]
 801197e:	a901      	add	r1, sp, #4
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	4798      	blx	r3
 8011984:	b00b      	add	sp, #44	; 0x2c
 8011986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011988:	20020086 	.word	0x20020086

0801198c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198e:	b08d      	sub	sp, #52	; 0x34
 8011990:	466b      	mov	r3, sp
 8011992:	e883 0006 	stmia.w	r3, {r1, r2}
 8011996:	2300      	movs	r3, #0
 8011998:	2501      	movs	r5, #1
 801199a:	9306      	str	r3, [sp, #24]
 801199c:	6803      	ldr	r3, [r0, #0]
 801199e:	9503      	str	r5, [sp, #12]
 80119a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119a2:	4604      	mov	r4, r0
 80119a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80119a8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80119ac:	4798      	blx	r3
 80119ae:	463a      	mov	r2, r7
 80119b0:	4631      	mov	r1, r6
 80119b2:	4603      	mov	r3, r0
 80119b4:	4620      	mov	r0, r4
 80119b6:	f7ff ff8b 	bl	80118d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80119ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80119bc:	9004      	str	r0, [sp, #16]
 80119be:	9307      	str	r3, [sp, #28]
 80119c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80119c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80119c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80119cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80119d0:	4b0e      	ldr	r3, [pc, #56]	; (8011a0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80119d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80119dc:	f7fb fbda 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 80119e0:	6803      	ldr	r3, [r0, #0]
 80119e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e4:	4798      	blx	r3
 80119e6:	23ff      	movs	r3, #255	; 0xff
 80119e8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80119ec:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80119f0:	6860      	ldr	r0, [r4, #4]
 80119f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80119f6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80119fa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80119fe:	6803      	ldr	r3, [r0, #0]
 8011a00:	a903      	add	r1, sp, #12
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4798      	blx	r3
 8011a06:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011a08:	b00d      	add	sp, #52	; 0x34
 8011a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0c:	20020086 	.word	0x20020086

08011a10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	b08c      	sub	sp, #48	; 0x30
 8011a16:	466d      	mov	r5, sp
 8011a18:	461e      	mov	r6, r3
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	e885 0006 	stmia.w	r5, {r1, r2}
 8011a20:	2501      	movs	r5, #1
 8011a22:	9306      	str	r3, [sp, #24]
 8011a24:	6803      	ldr	r3, [r0, #0]
 8011a26:	9503      	str	r5, [sp, #12]
 8011a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	f8bd 7000 	ldrh.w	r7, [sp]
 8011a30:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011a34:	4798      	blx	r3
 8011a36:	4642      	mov	r2, r8
 8011a38:	4639      	mov	r1, r7
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f7ff ff47 	bl	80118d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011a42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011a46:	9004      	str	r0, [sp, #16]
 8011a48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011a4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011a50:	9607      	str	r6, [sp, #28]
 8011a52:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011a56:	4b10      	ldr	r3, [pc, #64]	; (8011a98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a60:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011a64:	f7fb fb96 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8011a68:	6803      	ldr	r3, [r0, #0]
 8011a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6c:	4798      	blx	r3
 8011a6e:	23ff      	movs	r3, #255	; 0xff
 8011a70:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011a74:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011a78:	6860      	ldr	r0, [r4, #4]
 8011a7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011a7e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011a82:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011a86:	6803      	ldr	r3, [r0, #0]
 8011a88:	a903      	add	r1, sp, #12
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	4798      	blx	r3
 8011a8e:	4630      	mov	r0, r6
 8011a90:	b00c      	add	sp, #48	; 0x30
 8011a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a96:	bf00      	nop
 8011a98:	20020086 	.word	0x20020086

08011a9c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	ac02      	add	r4, sp, #8
 8011aa2:	e884 0006 	stmia.w	r4, {r1, r2}
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011aac:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011ab0:	f7fd fa20 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011ab4:	463a      	mov	r2, r7
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	4631      	mov	r1, r6
 8011aba:	4628      	mov	r0, r5
 8011abc:	f7ff ff08 	bl	80118d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011ac0:	4a05      	ldr	r2, [pc, #20]	; (8011ad8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011ac2:	682b      	ldr	r3, [r5, #0]
 8011ac4:	8812      	ldrh	r2, [r2, #0]
 8011ac6:	9200      	str	r2, [sp, #0]
 8011ac8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8011aca:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011ace:	4603      	mov	r3, r0
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	47b0      	blx	r6
 8011ad4:	b005      	add	sp, #20
 8011ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad8:	20020086 	.word	0x20020086

08011adc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	b19b      	cbz	r3, 8011b0e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011ae6:	2002      	movs	r0, #2
 8011ae8:	f7fd f8b6 	bl	800ec58 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011aec:	2300      	movs	r3, #0
 8011aee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011af2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	4620      	mov	r0, r4
 8011afa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8011afe:	f7fd f9f9 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b02:	462b      	mov	r3, r5
 8011b04:	4601      	mov	r1, r0
 8011b06:	4620      	mov	r0, r4
 8011b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b0c:	4718      	bx	r3
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}

08011b10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8011b16:	4604      	mov	r4, r0
 8011b18:	428b      	cmp	r3, r1
 8011b1a:	460d      	mov	r5, r1
 8011b1c:	d006      	beq.n	8011b2c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011b1e:	6803      	ldr	r3, [r0, #0]
 8011b20:	b929      	cbnz	r1, 8011b2e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011b22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011b26:	4798      	blx	r3
 8011b28:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8011b2c:	bd38      	pop	{r3, r4, r5, pc}
 8011b2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011b32:	e7f8      	b.n	8011b26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011b34 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	4b0d      	ldr	r3, [pc, #52]	; (8011b6c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011b38:	4604      	mov	r4, r0
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	b95b      	cbnz	r3, 8011b56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011b3e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8011b42:	2b02      	cmp	r3, #2
 8011b44:	d007      	beq.n	8011b56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011b46:	6840      	ldr	r0, [r0, #4]
 8011b48:	f000 f90e 	bl	8011d68 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011b4c:	b118      	cbz	r0, 8011b56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011b4e:	6862      	ldr	r2, [r4, #4]
 8011b50:	7a53      	ldrb	r3, [r2, #9]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0fc      	beq.n	8011b50 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011b56:	f7fd fd03 	bl	800f560 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	2100      	movs	r1, #0
 8011b5e:	f7ff ffd7 	bl	8011b10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011b62:	4620      	mov	r0, r4
 8011b64:	f7fd f9c6 	bl	800eef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b68:	bd10      	pop	{r4, pc}
 8011b6a:	bf00      	nop
 8011b6c:	2002008a 	.word	0x2002008a

08011b70 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8011b70:	6803      	ldr	r3, [r0, #0]
 8011b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b74:	4718      	bx	r3

08011b76 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011b76:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011b7a:	1a13      	subs	r3, r2, r0
 8011b7c:	4258      	negs	r0, r3
 8011b7e:	4158      	adcs	r0, r3
 8011b80:	4770      	bx	lr

08011b82 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011b82:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011b86:	1a9b      	subs	r3, r3, r2
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	bfdc      	itt	le
 8011b8c:	6882      	ldrle	r2, [r0, #8]
 8011b8e:	189b      	addle	r3, r3, r2
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	bfcc      	ite	gt
 8011b94:	2000      	movgt	r0, #0
 8011b96:	2001      	movle	r0, #1
 8011b98:	4770      	bx	lr

08011b9a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011b9a:	6902      	ldr	r2, [r0, #16]
 8011b9c:	6843      	ldr	r3, [r0, #4]
 8011b9e:	2024      	movs	r0, #36	; 0x24
 8011ba0:	fb00 3002 	mla	r0, r0, r2, r3
 8011ba4:	4770      	bx	lr

08011ba6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011ba6:	6803      	ldr	r3, [r0, #0]
 8011ba8:	691b      	ldr	r3, [r3, #16]
 8011baa:	4718      	bx	r3

08011bac <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011bac:	2301      	movs	r3, #1
 8011bae:	b570      	push	{r4, r5, r6, lr}
 8011bb0:	7203      	strb	r3, [r0, #8]
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	6840      	ldr	r0, [r0, #4]
 8011bb6:	6803      	ldr	r3, [r0, #0]
 8011bb8:	699b      	ldr	r3, [r3, #24]
 8011bba:	4798      	blx	r3
 8011bbc:	6803      	ldr	r3, [r0, #0]
 8011bbe:	4605      	mov	r5, r0
 8011bc0:	2b40      	cmp	r3, #64	; 0x40
 8011bc2:	d00c      	beq.n	8011bde <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011bc4:	d810      	bhi.n	8011be8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011bc6:	2b04      	cmp	r3, #4
 8011bc8:	d01d      	beq.n	8011c06 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011bca:	d804      	bhi.n	8011bd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d006      	beq.n	8011bde <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011bd0:	2b02      	cmp	r3, #2
 8011bd2:	d02c      	beq.n	8011c2e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
 8011bd6:	2b08      	cmp	r3, #8
 8011bd8:	d01d      	beq.n	8011c16 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011bda:	2b20      	cmp	r3, #32
 8011bdc:	d1fa      	bne.n	8011bd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4620      	mov	r0, r4
 8011be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011be4:	4798      	blx	r3
 8011be6:	e013      	b.n	8011c10 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bec:	d0f7      	beq.n	8011bde <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011bee:	d804      	bhi.n	8011bfa <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011bf0:	2b80      	cmp	r3, #128	; 0x80
 8011bf2:	d0f4      	beq.n	8011bde <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bf8:	e7f0      	b.n	8011bdc <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bfe:	d0ee      	beq.n	8011bde <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c04:	e7e5      	b.n	8011bd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	7f01      	ldrb	r1, [r0, #28]
 8011c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	4798      	blx	r3
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c14:	e006      	b.n	8011c24 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011c16:	6823      	ldr	r3, [r4, #0]
 8011c18:	7f01      	ldrb	r1, [r0, #28]
 8011c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	4798      	blx	r3
 8011c20:	6823      	ldr	r3, [r4, #0]
 8011c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c24:	4629      	mov	r1, r5
 8011c26:	4620      	mov	r0, r4
 8011c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c2c:	4718      	bx	r3
 8011c2e:	6823      	ldr	r3, [r4, #0]
 8011c30:	4620      	mov	r0, r4
 8011c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c34:	4798      	blx	r3
 8011c36:	e7f3      	b.n	8011c20 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011c38 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011c38:	4770      	bx	lr

08011c3a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011c3a:	4770      	bx	lr

08011c3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011c3c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011c40:	1ad2      	subs	r2, r2, r3
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	b510      	push	{r4, lr}
 8011c46:	bfdc      	itt	le
 8011c48:	6884      	ldrle	r4, [r0, #8]
 8011c4a:	1912      	addle	r2, r2, r4
 8011c4c:	2a01      	cmp	r2, #1
 8011c4e:	dd16      	ble.n	8011c7e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011c50:	2424      	movs	r4, #36	; 0x24
 8011c52:	6842      	ldr	r2, [r0, #4]
 8011c54:	fb04 2303 	mla	r3, r4, r3, r2
 8011c58:	f101 0220 	add.w	r2, r1, #32
 8011c5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011c60:	4291      	cmp	r1, r2
 8011c62:	f843 4b04 	str.w	r4, [r3], #4
 8011c66:	d1f9      	bne.n	8011c5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011c68:	780a      	ldrb	r2, [r1, #0]
 8011c6a:	701a      	strb	r2, [r3, #0]
 8011c6c:	68c3      	ldr	r3, [r0, #12]
 8011c6e:	6882      	ldr	r2, [r0, #8]
 8011c70:	3301      	adds	r3, #1
 8011c72:	429a      	cmp	r2, r3
 8011c74:	bfd8      	it	le
 8011c76:	1a9b      	suble	r3, r3, r2
 8011c78:	f3bf 8f5b 	dmb	ish
 8011c7c:	60c3      	str	r3, [r0, #12]
 8011c7e:	bd10      	pop	{r4, pc}

08011c80 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011c80:	6903      	ldr	r3, [r0, #16]
 8011c82:	6882      	ldr	r2, [r0, #8]
 8011c84:	3301      	adds	r3, #1
 8011c86:	429a      	cmp	r2, r3
 8011c88:	bfd8      	it	le
 8011c8a:	1a9b      	suble	r3, r3, r2
 8011c8c:	f3bf 8f5b 	dmb	ish
 8011c90:	6103      	str	r3, [r0, #16]
 8011c92:	4770      	bx	lr

08011c94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	4604      	mov	r4, r0
 8011c98:	460e      	mov	r6, r1
 8011c9a:	6860      	ldr	r0, [r4, #4]
 8011c9c:	6803      	ldr	r3, [r0, #0]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	4798      	blx	r3
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d1f9      	bne.n	8011c9a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011ca6:	4d0d      	ldr	r5, [pc, #52]	; (8011cdc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011ca8:	6828      	ldr	r0, [r5, #0]
 8011caa:	6803      	ldr	r3, [r0, #0]
 8011cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cae:	4798      	blx	r3
 8011cb0:	f7fd fc70 	bl	800f594 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011cb4:	6828      	ldr	r0, [r5, #0]
 8011cb6:	2101      	movs	r1, #1
 8011cb8:	f7ff ff2a 	bl	8011b10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011cbc:	6860      	ldr	r0, [r4, #4]
 8011cbe:	4631      	mov	r1, r6
 8011cc0:	6803      	ldr	r3, [r0, #0]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	4798      	blx	r3
 8011cc6:	6823      	ldr	r3, [r4, #0]
 8011cc8:	4620      	mov	r0, r4
 8011cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ccc:	4798      	blx	r3
 8011cce:	6828      	ldr	r0, [r5, #0]
 8011cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cd4:	6803      	ldr	r3, [r0, #0]
 8011cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cd8:	4718      	bx	r3
 8011cda:	bf00      	nop
 8011cdc:	2002008c 	.word	0x2002008c

08011ce0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011ce0:	b508      	push	{r3, lr}
 8011ce2:	f7fd fc3d 	bl	800f560 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011cea:	f7fd bc47 	b.w	800f57c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011cee <_ZN8touchgfx13DMA_Interface5startEv>:
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	6840      	ldr	r0, [r0, #4]
 8011cf4:	6803      	ldr	r3, [r0, #0]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4798      	blx	r3
 8011cfa:	b948      	cbnz	r0, 8011d10 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011cfc:	7a63      	ldrb	r3, [r4, #9]
 8011cfe:	b13b      	cbz	r3, 8011d10 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011d00:	7a23      	ldrb	r3, [r4, #8]
 8011d02:	b92b      	cbnz	r3, 8011d10 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	4620      	mov	r0, r4
 8011d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0e:	4718      	bx	r3
 8011d10:	bd10      	pop	{r4, pc}

08011d12 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011d12:	b570      	push	{r4, r5, r6, lr}
 8011d14:	4604      	mov	r4, r0
 8011d16:	6840      	ldr	r0, [r0, #4]
 8011d18:	6803      	ldr	r3, [r0, #0]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4798      	blx	r3
 8011d1e:	4605      	mov	r5, r0
 8011d20:	b930      	cbnz	r0, 8011d30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011d22:	7a23      	ldrb	r3, [r4, #8]
 8011d24:	b123      	cbz	r3, 8011d30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011d26:	6860      	ldr	r0, [r4, #4]
 8011d28:	6803      	ldr	r3, [r0, #0]
 8011d2a:	695b      	ldr	r3, [r3, #20]
 8011d2c:	4798      	blx	r3
 8011d2e:	7225      	strb	r5, [r4, #8]
 8011d30:	6860      	ldr	r0, [r4, #4]
 8011d32:	6803      	ldr	r3, [r0, #0]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4798      	blx	r3
 8011d38:	b928      	cbnz	r0, 8011d46 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011d3a:	6823      	ldr	r3, [r4, #0]
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d44:	4718      	bx	r3
 8011d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d4a:	f7fd bc2f 	b.w	800f5ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08011d50 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011d50:	6082      	str	r2, [r0, #8]
 8011d52:	2200      	movs	r2, #0
 8011d54:	b510      	push	{r4, lr}
 8011d56:	4c03      	ldr	r4, [pc, #12]	; (8011d64 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011d58:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011d5c:	e9c0 4100 	strd	r4, r1, [r0]
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	bf00      	nop
 8011d64:	080256d0 	.word	0x080256d0

08011d68 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011d68:	6840      	ldr	r0, [r0, #4]
 8011d6a:	6803      	ldr	r3, [r0, #0]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4718      	bx	r3

08011d70 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8011d70:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011d74:	4770      	bx	lr

08011d76 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8011d76:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8011d7a:	4770      	bx	lr

08011d7c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8011d7c:	6802      	ldr	r2, [r0, #0]
 8011d7e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8011d82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011d84:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8011d88:	4710      	bx	r2

08011d8a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8011d8a:	6802      	ldr	r2, [r0, #0]
 8011d8c:	eef0 0a40 	vmov.f32	s1, s0
 8011d90:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011d92:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8011d96:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8011d9a:	4710      	bx	r2

08011d9c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8011d9c:	6802      	ldr	r2, [r0, #0]
 8011d9e:	eeb0 1a40 	vmov.f32	s2, s0
 8011da2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011da4:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8011da8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8011dac:	4710      	bx	r2

08011dae <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8011dae:	6802      	ldr	r2, [r0, #0]
 8011db0:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8011db4:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011db6:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8011dba:	4710      	bx	r2

08011dbc <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8011dbc:	6802      	ldr	r2, [r0, #0]
 8011dbe:	eef0 0a40 	vmov.f32	s1, s0
 8011dc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011dc4:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8011dc8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8011dcc:	4710      	bx	r2

08011dce <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8011dce:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8011dd2:	4770      	bx	lr

08011dd4 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8011dd4:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8011dd8:	4770      	bx	lr

08011dda <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8011dda:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8011dde:	4770      	bx	lr

08011de0 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8011de0:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8011de4:	4770      	bx	lr

08011de6 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8011de6:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8011dea:	4770      	bx	lr

08011dec <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8011dec:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8011df0:	4770      	bx	lr

08011df2 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8011df2:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8011df6:	4770      	bx	lr

08011df8 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8011df8:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8011dfc:	4770      	bx	lr

08011dfe <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8011dfe:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8011e02:	4770      	bx	lr

08011e04 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8011e04:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8011e08:	4770      	bx	lr

08011e0a <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8011e0a:	ee07 2a90 	vmov	s15, r2
 8011e0e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8011e12:	ee07 1a90 	vmov	s15, r1
 8011e16:	6803      	ldr	r3, [r0, #0]
 8011e18:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011e1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011e20:	4718      	bx	r3

08011e22 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8011e22:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8011e26:	4770      	bx	lr

08011e28 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8011e28:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8011e2c:	4770      	bx	lr

08011e2e <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8011e2e:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8011e32:	4770      	bx	lr

08011e34 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8011e34:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8011e38:	4770      	bx	lr

08011e3a <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8011e3a:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8011e3e:	4770      	bx	lr

08011e40 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8011e40:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8011e44:	4770      	bx	lr

08011e46 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8011e46:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8011e4a:	4770      	bx	lr

08011e4c <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8011e4c:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8011e50:	4770      	bx	lr

08011e52 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8011e52:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8011e56:	4770      	bx	lr

08011e58 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8011e58:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8011e5c:	4770      	bx	lr

08011e5e <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8011e5e:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8011e62:	4770      	bx	lr

08011e64 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8011e64:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8011e68:	4770      	bx	lr

08011e6a <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8011e6a:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8011e6e:	4770      	bx	lr

08011e70 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8011e70:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8011e74:	4770      	bx	lr

08011e76 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>:
 8011e76:	f890 00ea 	ldrb.w	r0, [r0, #234]	; 0xea
 8011e7a:	4770      	bx	lr

08011e7c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>:
 8011e7c:	b510      	push	{r4, lr}
 8011e7e:	2414      	movs	r4, #20
 8011e80:	fb04 0101 	mla	r1, r4, r1, r0
 8011e84:	2001      	movs	r0, #1
 8011e86:	ed81 0a26 	vstr	s0, [r1, #152]	; 0x98
 8011e8a:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
 8011e8e:	9b02      	ldr	r3, [sp, #8]
 8011e90:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
 8011e94:	f8a1 209e 	strh.w	r2, [r1, #158]	; 0x9e
 8011e98:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 8011e9c:	bd10      	pop	{r4, pc}

08011e9e <_ZN8touchgfx22AnimationTextureMapper16getAnimationStepEv>:
 8011e9e:	f8b0 00e8 	ldrh.w	r0, [r0, #232]	; 0xe8
 8011ea2:	4770      	bx	lr

08011ea4 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>:
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	f001 fefa 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 8011eac:	4621      	mov	r1, r4
 8011eae:	3004      	adds	r0, #4
 8011eb0:	f001 ffc4 	bl	8013e3c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
 8011eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ec0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8011ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ec6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8011eca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ecc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8011ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ed2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
 8011edc:	4623      	mov	r3, r4
 8011ede:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8011ee2:	b129      	cbz	r1, 8011ef0 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x4c>
 8011ee4:	f8b3 109c 	ldrh.w	r1, [r3, #156]	; 0x9c
 8011ee8:	f8b3 009e 	ldrh.w	r0, [r3, #158]	; 0x9e
 8011eec:	42c1      	cmn	r1, r0
 8011eee:	d108      	bne.n	8011f02 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x5e>
 8011ef0:	3314      	adds	r3, #20
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d1f3      	bne.n	8011ede <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x3a>
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f00:	4718      	bx	r3
 8011f02:	bd10      	pop	{r4, pc}

08011f04 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>:
 8011f04:	b510      	push	{r4, lr}
 8011f06:	4604      	mov	r4, r0
 8011f08:	f001 feca 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	3004      	adds	r0, #4
 8011f10:	f001 feeb 	bl	8013cea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8011f14:	2300      	movs	r3, #0
 8011f16:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
 8011f1a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8011f1e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8011f22:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 8011f26:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 8011f2a:	bd10      	pop	{r4, pc}

08011f2c <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8011f2c:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8011f30:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 8011f34:	f000 b9b4 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08011f38 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8011f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8011f48:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8011f4c:	f000 b9a8 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08011f50 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8011f50:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 8011f54:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8011f58:	f000 b9a2 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08011f5c <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8011f5c:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8011f60:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8011f64:	f000 b99c 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08011f68 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8011f68:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8011f6c:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8011f70:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 8011f74:	f000 b994 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08011f78 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	ed2d 8b06 	vpush	{d8-d10}
 8011f80:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8011f84:	b083      	sub	sp, #12
 8011f86:	4604      	mov	r4, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	f000 80c4 	beq.w	8012116 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19e>
 8011f8e:	2600      	movs	r6, #0
 8011f90:	ed90 8a0d 	vldr	s16, [r0, #52]	; 0x34
 8011f94:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
 8011f98:	ed90 9a0f 	vldr	s18, [r0, #60]	; 0x3c
 8011f9c:	edd0 9a10 	vldr	s19, [r0, #64]	; 0x40
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	46b2      	mov	sl, r6
 8011fa4:	46b0      	mov	r8, r6
 8011fa6:	46b3      	mov	fp, r6
 8011fa8:	eddf aa5d 	vldr	s21, [pc, #372]	; 8012120 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1a8>
 8011fac:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 8011fb0:	9601      	str	r6, [sp, #4]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8011fb8:	f895 9090 	ldrb.w	r9, [r5, #144]	; 0x90
 8011fbc:	f1b9 0f00 	cmp.w	r9, #0
 8011fc0:	d049      	beq.n	8012056 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xde>
 8011fc2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011fc6:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
 8011fca:	4298      	cmp	r0, r3
 8011fcc:	d337      	bcc.n	801203e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 8011fce:	ed95 7a26 	vldr	s14, [r5, #152]	; 0x98
 8011fd2:	edd5 7a25 	vldr	s15, [r5, #148]	; 0x94
 8011fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fde:	dd74      	ble.n	80120ca <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x152>
 8011fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fe4:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8011fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fec:	ee17 2a90 	vmov	r2, s15
 8011ff0:	ed9f aa4c 	vldr	s20, [pc, #304]	; 8012124 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1ac>
 8011ff4:	b212      	sxth	r2, r2
 8011ff6:	1ac0      	subs	r0, r0, r3
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	f8b5 309e 	ldrh.w	r3, [r5, #158]	; 0x9e
 8011ffe:	b280      	uxth	r0, r0
 8012000:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 8012004:	47b8      	blx	r7
 8012006:	ee07 0a90 	vmov	s15, r0
 801200a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801200e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8012012:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 8012016:	f1b8 0f02 	cmp.w	r8, #2
 801201a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801201e:	d060      	beq.n	80120e2 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x16a>
 8012020:	f1b8 0f03 	cmp.w	r8, #3
 8012024:	d062      	beq.n	80120ec <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x174>
 8012026:	f1b8 0f01 	cmp.w	r8, #1
 801202a:	bf15      	itete	ne
 801202c:	ed94 8a25 	vldrne	s16, [r4, #148]	; 0x94
 8012030:	edd4 8a2a 	vldreq	s17, [r4, #168]	; 0xa8
 8012034:	ee37 8a88 	vaddne.f32	s16, s15, s16
 8012038:	ee77 8aa8 	vaddeq.f32	s17, s15, s17
 801203c:	46ca      	mov	sl, r9
 801203e:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
 8012042:	f8b5 109e 	ldrh.w	r1, [r5, #158]	; 0x9e
 8012046:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801204a:	440b      	add	r3, r1
 801204c:	429a      	cmp	r2, r3
 801204e:	bf34      	ite	cc
 8012050:	464e      	movcc	r6, r9
 8012052:	f885 b090 	strbcs.w	fp, [r5, #144]	; 0x90
 8012056:	f108 0801 	add.w	r8, r8, #1
 801205a:	f1b8 0f04 	cmp.w	r8, #4
 801205e:	f105 0514 	add.w	r5, r5, #20
 8012062:	d1a9      	bne.n	8011fb8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x40>
 8012064:	f1ba 0f00 	cmp.w	sl, #0
 8012068:	d147      	bne.n	80120fa <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x182>
 801206a:	9b01      	ldr	r3, [sp, #4]
 801206c:	b19b      	cbz	r3, 8012096 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11e>
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	eeb0 0a69 	vmov.f32	s0, s19
 8012074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012078:	4620      	mov	r0, r4
 801207a:	4798      	blx	r3
 801207c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8012080:	b148      	cbz	r0, 8012096 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11e>
 8012082:	6803      	ldr	r3, [r0, #0]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	4798      	blx	r3
 8012088:	b128      	cbz	r0, 8012096 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11e>
 801208a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 801208e:	4621      	mov	r1, r4
 8012090:	6803      	ldr	r3, [r0, #0]
 8012092:	689b      	ldr	r3, [r3, #8]
 8012094:	4798      	blx	r3
 8012096:	2e00      	cmp	r6, #0
 8012098:	d13d      	bne.n	8012116 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19e>
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	4620      	mov	r0, r4
 801209e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80120a2:	4798      	blx	r3
 80120a4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d034      	beq.n	8012116 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19e>
 80120ac:	6803      	ldr	r3, [r0, #0]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	4798      	blx	r3
 80120b2:	b380      	cbz	r0, 8012116 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19e>
 80120b4:	4621      	mov	r1, r4
 80120b6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80120ba:	6803      	ldr	r3, [r0, #0]
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	b003      	add	sp, #12
 80120c0:	ecbd 8b06 	vpop	{d8-d10}
 80120c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	4718      	bx	r3
 80120ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120ce:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80120d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120d6:	ee17 2a90 	vmov	r2, s15
 80120da:	ed9f aa13 	vldr	s20, [pc, #76]	; 8012128 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1b0>
 80120de:	b212      	sxth	r2, r2
 80120e0:	e789      	b.n	8011ff6 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x7e>
 80120e2:	ed94 9a2f 	vldr	s18, [r4, #188]	; 0xbc
 80120e6:	ee37 9a89 	vadd.f32	s18, s15, s18
 80120ea:	e7a7      	b.n	801203c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc4>
 80120ec:	edd4 9a34 	vldr	s19, [r4, #208]	; 0xd0
 80120f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80120f4:	ee77 9aa9 	vadd.f32	s19, s15, s19
 80120f8:	e7a1      	b.n	801203e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	eeb0 1a49 	vmov.f32	s2, s18
 8012100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012102:	eef0 0a68 	vmov.f32	s1, s17
 8012106:	eeb0 0a48 	vmov.f32	s0, s16
 801210a:	4620      	mov	r0, r4
 801210c:	4798      	blx	r3
 801210e:	9b01      	ldr	r3, [sp, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d0b3      	beq.n	801207c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x104>
 8012114:	e7ab      	b.n	801206e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xf6>
 8012116:	b003      	add	sp, #12
 8012118:	ecbd 8b06 	vpop	{d8-d10}
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	447a0000 	.word	0x447a0000
 8012124:	00000001 	.word	0x00000001
 8012128:	ffffffff 	.word	0xffffffff

0801212c <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 801212c:	b513      	push	{r0, r1, r4, lr}
 801212e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8012132:	4604      	mov	r4, r0
 8012134:	b143      	cbz	r3, 8012148 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 8012136:	4601      	mov	r1, r0
 8012138:	4668      	mov	r0, sp
 801213a:	f000 fa1c 	bl	8012576 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	4669      	mov	r1, sp
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	4620      	mov	r0, r4
 8012146:	4798      	blx	r3
 8012148:	b002      	add	sp, #8
 801214a:	bd10      	pop	{r4, pc}

0801214c <_ZN8touchgfx22AnimationTextureMapperC1Ev>:
 801214c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012150:	b513      	push	{r0, r1, r4, lr}
 8012152:	4604      	mov	r4, r0
 8012154:	a902      	add	r1, sp, #8
 8012156:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801215a:	f000 f855 	bl	8012208 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801215e:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <_ZN8touchgfx22AnimationTextureMapperC1Ev+0x3c>)
 8012160:	4620      	mov	r0, r4
 8012162:	6023      	str	r3, [r4, #0]
 8012164:	2300      	movs	r3, #0
 8012166:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
 801216a:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
 801216e:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
 8012172:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8012176:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801217a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801217e:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 8012182:	b002      	add	sp, #8
 8012184:	bd10      	pop	{r4, pc}
 8012186:	bf00      	nop
 8012188:	080256f4 	.word	0x080256f4

0801218c <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 801218c:	b510      	push	{r4, lr}
 801218e:	ed2d 8b04 	vpush	{d8-d9}
 8012192:	4604      	mov	r4, r0
 8012194:	eeb0 8a40 	vmov.f32	s16, s0
 8012198:	eef0 8a60 	vmov.f32	s17, s1
 801219c:	eeb0 9a41 	vmov.f32	s18, s2
 80121a0:	6803      	ldr	r3, [r0, #0]
 80121a2:	699b      	ldr	r3, [r3, #24]
 80121a4:	4798      	blx	r3
 80121a6:	6823      	ldr	r3, [r4, #0]
 80121a8:	4620      	mov	r0, r4
 80121aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ac:	eeb0 1a49 	vmov.f32	s2, s18
 80121b0:	eef0 0a68 	vmov.f32	s1, s17
 80121b4:	eeb0 0a48 	vmov.f32	s0, s16
 80121b8:	4798      	blx	r3
 80121ba:	ecbd 8b04 	vpop	{d8-d9}
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	4620      	mov	r0, r4
 80121c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c6:	699b      	ldr	r3, [r3, #24]
 80121c8:	4718      	bx	r3

080121ca <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80121ca:	b510      	push	{r4, lr}
 80121cc:	ed2d 8b02 	vpush	{d8}
 80121d0:	4604      	mov	r4, r0
 80121d2:	eeb0 8a40 	vmov.f32	s16, s0
 80121d6:	6803      	ldr	r3, [r0, #0]
 80121d8:	699b      	ldr	r3, [r3, #24]
 80121da:	4798      	blx	r3
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	4620      	mov	r0, r4
 80121e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80121e4:	eeb0 0a48 	vmov.f32	s0, s16
 80121e8:	4798      	blx	r3
 80121ea:	ecbd 8b02 	vpop	{d8}
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	4620      	mov	r0, r4
 80121f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121f6:	699b      	ldr	r3, [r3, #24]
 80121f8:	4718      	bx	r3

080121fa <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 80121fa:	2200      	movs	r2, #0
 80121fc:	8002      	strh	r2, [r0, #0]
 80121fe:	8042      	strh	r2, [r0, #2]
 8012200:	8082      	strh	r2, [r0, #4]
 8012202:	80c2      	strh	r2, [r0, #6]
 8012204:	4770      	bx	lr
	...

08012208 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8012208:	b538      	push	{r3, r4, r5, lr}
 801220a:	2500      	movs	r5, #0
 801220c:	2301      	movs	r3, #1
 801220e:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8012212:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8012216:	4b1f      	ldr	r3, [pc, #124]	; (8012294 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8012218:	8085      	strh	r5, [r0, #4]
 801221a:	80c5      	strh	r5, [r0, #6]
 801221c:	8105      	strh	r5, [r0, #8]
 801221e:	8145      	strh	r5, [r0, #10]
 8012220:	8185      	strh	r5, [r0, #12]
 8012222:	81c5      	strh	r5, [r0, #14]
 8012224:	8205      	strh	r5, [r0, #16]
 8012226:	8245      	strh	r5, [r0, #18]
 8012228:	61c5      	str	r5, [r0, #28]
 801222a:	8405      	strh	r5, [r0, #32]
 801222c:	8445      	strh	r5, [r0, #34]	; 0x22
 801222e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8012232:	6003      	str	r3, [r0, #0]
 8012234:	880b      	ldrh	r3, [r1, #0]
 8012236:	4604      	mov	r4, r0
 8012238:	84c3      	strh	r3, [r0, #38]	; 0x26
 801223a:	23ff      	movs	r3, #255	; 0xff
 801223c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012240:	f000 fc8a 	bl	8012b58 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012244:	4b14      	ldr	r3, [pc, #80]	; (8012298 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8012246:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801224a:	6023      	str	r3, [r4, #0]
 801224c:	2300      	movs	r3, #0
 801224e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012250:	6323      	str	r3, [r4, #48]	; 0x30
 8012252:	6363      	str	r3, [r4, #52]	; 0x34
 8012254:	63a3      	str	r3, [r4, #56]	; 0x38
 8012256:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012258:	6463      	str	r3, [r4, #68]	; 0x44
 801225a:	64a3      	str	r3, [r4, #72]	; 0x48
 801225c:	6523      	str	r3, [r4, #80]	; 0x50
 801225e:	6563      	str	r3, [r4, #84]	; 0x54
 8012260:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012262:	6623      	str	r3, [r4, #96]	; 0x60
 8012264:	66a3      	str	r3, [r4, #104]	; 0x68
 8012266:	66e3      	str	r3, [r4, #108]	; 0x6c
 8012268:	6763      	str	r3, [r4, #116]	; 0x74
 801226a:	67a3      	str	r3, [r4, #120]	; 0x78
 801226c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8012270:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8012274:	230c      	movs	r3, #12
 8012276:	4909      	ldr	r1, [pc, #36]	; (801229c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8012278:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801227c:	6422      	str	r2, [r4, #64]	; 0x40
 801227e:	64e1      	str	r1, [r4, #76]	; 0x4c
 8012280:	65a1      	str	r1, [r4, #88]	; 0x58
 8012282:	6662      	str	r2, [r4, #100]	; 0x64
 8012284:	6722      	str	r2, [r4, #112]	; 0x70
 8012286:	67e2      	str	r2, [r4, #124]	; 0x7c
 8012288:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 801228c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8012290:	4620      	mov	r0, r4
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	08025998 	.word	0x08025998
 8012298:	0802581c 	.word	0x0802581c
 801229c:	447a0000 	.word	0x447a0000

080122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	ed2d 8b04 	vpush	{d8-d9}
 80122a6:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 80122aa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80122ac:	add0      	add	r5, sp, #832	; 0x340
 80122ae:	f825 3d40 	strh.w	r3, [r5, #-64]!
 80122b2:	4604      	mov	r4, r0
 80122b4:	4628      	mov	r0, r5
 80122b6:	f004 fb21 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80122ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80122bc:	4606      	mov	r6, r0
 80122be:	4628      	mov	r0, r5
 80122c0:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 80122c4:	f004 fb4e 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80122c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122cc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80122d0:	1c72      	adds	r2, r6, #1
 80122d2:	3001      	adds	r0, #1
 80122d4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80122d8:	ee07 2a90 	vmov	s15, r2
 80122dc:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80122e0:	ee06 0a90 	vmov	s13, r0
 80122e4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80122e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80122f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80122f6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80122fa:	9312      	str	r3, [sp, #72]	; 0x48
 80122fc:	9316      	str	r3, [sp, #88]	; 0x58
 80122fe:	931a      	str	r3, [sp, #104]	; 0x68
 8012300:	931e      	str	r3, [sp, #120]	; 0x78
 8012302:	2300      	movs	r3, #0
 8012304:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8012308:	9320      	str	r3, [sp, #128]	; 0x80
 801230a:	9321      	str	r3, [sp, #132]	; 0x84
 801230c:	9322      	str	r3, [sp, #136]	; 0x88
 801230e:	9324      	str	r3, [sp, #144]	; 0x90
 8012310:	9325      	str	r3, [sp, #148]	; 0x94
 8012312:	9326      	str	r3, [sp, #152]	; 0x98
 8012314:	9328      	str	r3, [sp, #160]	; 0xa0
 8012316:	9329      	str	r3, [sp, #164]	; 0xa4
 8012318:	932a      	str	r3, [sp, #168]	; 0xa8
 801231a:	932c      	str	r3, [sp, #176]	; 0xb0
 801231c:	932d      	str	r3, [sp, #180]	; 0xb4
 801231e:	932e      	str	r3, [sp, #184]	; 0xb8
 8012320:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012324:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8012328:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801232c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8012330:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8012334:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 8012338:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801233c:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 8012340:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8012344:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8012348:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801234c:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 8012350:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8012354:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8012358:	a830      	add	r0, sp, #192	; 0xc0
 801235a:	f003 fee1 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801235e:	eeb1 0a49 	vneg.f32	s0, s18
 8012362:	a830      	add	r0, sp, #192	; 0xc0
 8012364:	f003 ffae 	bl	80162c4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8012368:	eeb1 0a68 	vneg.f32	s0, s17
 801236c:	f003 ffb8 	bl	80162e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8012370:	eeb1 0a48 	vneg.f32	s0, s16
 8012374:	f003 ffc3 	bl	80162fe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8012378:	a840      	add	r0, sp, #256	; 0x100
 801237a:	f003 fed1 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801237e:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8012382:	a840      	add	r0, sp, #256	; 0x100
 8012384:	f003 ff22 	bl	80161cc <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8012388:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801238c:	f003 ff48 	bl	8016220 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8012390:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8012394:	f003 ff6d 	bl	8016272 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8012398:	a850      	add	r0, sp, #320	; 0x140
 801239a:	f003 fec1 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801239e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80123a2:	a850      	add	r0, sp, #320	; 0x140
 80123a4:	f003 ffba 	bl	801631c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 80123a8:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80123ac:	f003 ffc2 	bl	8016334 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 80123b0:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80123b4:	f003 ffcb 	bl	801634e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 80123b8:	a860      	add	r0, sp, #384	; 0x180
 80123ba:	f003 feb1 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 80123be:	eeb0 0a49 	vmov.f32	s0, s18
 80123c2:	a860      	add	r0, sp, #384	; 0x180
 80123c4:	f003 ff7e 	bl	80162c4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80123c8:	eeb0 0a68 	vmov.f32	s0, s17
 80123cc:	f003 ff88 	bl	80162e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80123d0:	eeb0 0a48 	vmov.f32	s0, s16
 80123d4:	f003 ff93 	bl	80162fe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80123d8:	aa50      	add	r2, sp, #320	; 0x140
 80123da:	a960      	add	r1, sp, #384	; 0x180
 80123dc:	a8b0      	add	r0, sp, #704	; 0x2c0
 80123de:	f003 feb7 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80123e2:	4628      	mov	r0, r5
 80123e4:	aa40      	add	r2, sp, #256	; 0x100
 80123e6:	a9b0      	add	r1, sp, #704	; 0x2c0
 80123e8:	f003 feb2 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80123ec:	4629      	mov	r1, r5
 80123ee:	aa30      	add	r2, sp, #192	; 0xc0
 80123f0:	a870      	add	r0, sp, #448	; 0x1c0
 80123f2:	f003 fead 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80123f6:	a880      	add	r0, sp, #512	; 0x200
 80123f8:	f003 fe92 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 80123fc:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8012400:	a880      	add	r0, sp, #512	; 0x200
 8012402:	eeb1 0a40 	vneg.f32	s0, s0
 8012406:	f003 ff5d 	bl	80162c4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801240a:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801240e:	a880      	add	r0, sp, #512	; 0x200
 8012410:	eeb1 0a40 	vneg.f32	s0, s0
 8012414:	f003 ff64 	bl	80162e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8012418:	a890      	add	r0, sp, #576	; 0x240
 801241a:	f003 fe81 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801241e:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8012422:	a890      	add	r0, sp, #576	; 0x240
 8012424:	f003 fec2 	bl	80161ac <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8012428:	a8a0      	add	r0, sp, #640	; 0x280
 801242a:	f003 fe79 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801242e:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8012432:	a8a0      	add	r0, sp, #640	; 0x280
 8012434:	f003 ff46 	bl	80162c4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8012438:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801243c:	f003 ff50 	bl	80162e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8012440:	aa90      	add	r2, sp, #576	; 0x240
 8012442:	a9a0      	add	r1, sp, #640	; 0x280
 8012444:	a8b0      	add	r0, sp, #704	; 0x2c0
 8012446:	f003 fe83 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801244a:	4628      	mov	r0, r5
 801244c:	aa80      	add	r2, sp, #512	; 0x200
 801244e:	a9b0      	add	r1, sp, #704	; 0x2c0
 8012450:	f003 fe7e 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8012454:	4629      	mov	r1, r5
 8012456:	466d      	mov	r5, sp
 8012458:	aa70      	add	r2, sp, #448	; 0x1c0
 801245a:	4668      	mov	r0, sp
 801245c:	ae70      	add	r6, sp, #448	; 0x1c0
 801245e:	f003 fe77 	bl	8016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8012462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012464:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012468:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801246c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801246e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012472:	2500      	movs	r5, #0
 8012474:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8012478:	0129      	lsls	r1, r5, #4
 801247a:	ab20      	add	r3, sp, #128	; 0x80
 801247c:	185e      	adds	r6, r3, r1
 801247e:	ab10      	add	r3, sp, #64	; 0x40
 8012480:	4419      	add	r1, r3
 8012482:	a870      	add	r0, sp, #448	; 0x1c0
 8012484:	f003 fe1c 	bl	80160c0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8012488:	3501      	adds	r5, #1
 801248a:	2d04      	cmp	r5, #4
 801248c:	ed86 0a00 	vstr	s0, [r6]
 8012490:	edc6 0a01 	vstr	s1, [r6, #4]
 8012494:	ed86 1a02 	vstr	s2, [r6, #8]
 8012498:	edc6 1a03 	vstr	s3, [r6, #12]
 801249c:	d1ec      	bne.n	8012478 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801249e:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80124a2:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80124a6:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 80124aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80124ae:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80124b2:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 80124b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80124ba:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 80124be:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80124c2:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 80124c6:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 80124ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80124ce:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80124d2:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 80124d6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80124da:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 80124de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80124e2:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 80124e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80124ea:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 80124ee:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 80124f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80124f6:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 80124fa:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 80124fe:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8012502:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8012506:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801250a:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801250e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8012512:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8012516:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801251a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801251e:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8012522:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 8012526:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801252a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801252e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012532:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012536:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801253a:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801253e:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8012542:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8012546:	ecbd 8b04 	vpop	{d8-d9}
 801254a:	bd70      	pop	{r4, r5, r6, pc}

0801254c <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 801254c:	b510      	push	{r4, lr}
 801254e:	4604      	mov	r4, r0
 8012550:	f000 fb02 	bl	8012b58 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012554:	4620      	mov	r0, r4
 8012556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801255a:	f7ff bea1 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801255e <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801255e:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 8012562:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 8012566:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 801256a:	f7ff be99 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801256e <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801256e:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 8012572:	f7ff be95 	b.w	80122a0 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08012576 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8012576:	b510      	push	{r4, lr}
 8012578:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 801257c:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 8012580:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012588:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 801258c:	bf54      	ite	pl
 801258e:	eeb0 7a65 	vmovpl.f32	s14, s11
 8012592:	eeb0 7a67 	vmovmi.f32	s14, s15
 8012596:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 80125a2:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80125a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80125aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ae:	fe37 7a26 	vselgt.f32	s14, s14, s13
 80125b2:	febb 7a47 	vrintm.f32	s14, s14
 80125b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80125ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125be:	bf58      	it	pl
 80125c0:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80125c4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80125c8:	bf56      	itet	pl
 80125ca:	ee17 3a10 	vmovpl	r3, s14
 80125ce:	2200      	movmi	r2, #0
 80125d0:	b21a      	sxthpl	r2, r3
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80125da:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80125de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e2:	bf58      	it	pl
 80125e4:	eef0 7a46 	vmovpl.f32	s15, s12
 80125e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80125ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80125f4:	bf58      	it	pl
 80125f6:	eef0 7a66 	vmovpl.f32	s15, s13
 80125fa:	ee07 4a10 	vmov	s14, r4
 80125fe:	fefa 7a67 	vrintp.f32	s15, s15
 8012602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012606:	eef4 7ac7 	vcmpe.f32	s15, s14
 801260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801260e:	bfd8      	it	le
 8012610:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8012614:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 8012618:	bfd8      	it	le
 801261a:	ee17 3a90 	vmovle	r3, s15
 801261e:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 8012622:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012626:	bfd8      	it	le
 8012628:	b21c      	sxthle	r4, r3
 801262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262e:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 8012632:	bf54      	ite	pl
 8012634:	eeb0 7a65 	vmovpl.f32	s14, s11
 8012638:	eeb0 7a67 	vmovmi.f32	s14, s15
 801263c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8012640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012644:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 8012648:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801264c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012654:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8012658:	febb 7a47 	vrintm.f32	s14, s14
 801265c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012664:	bf58      	it	pl
 8012666:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801266a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801266e:	bf56      	itet	pl
 8012670:	ee17 3a10 	vmovpl	r3, s14
 8012674:	2300      	movmi	r3, #0
 8012676:	b21b      	sxthpl	r3, r3
 8012678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8012680:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	bf58      	it	pl
 801268a:	eef0 7a46 	vmovpl.f32	s15, s12
 801268e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012696:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801269a:	bf58      	it	pl
 801269c:	eef0 7a66 	vmovpl.f32	s15, s13
 80126a0:	ee07 1a10 	vmov	s14, r1
 80126a4:	fefa 7a67 	vrintp.f32	s15, s15
 80126a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80126ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80126b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b4:	bfde      	ittt	le
 80126b6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80126ba:	ee17 1a90 	vmovle	r1, s15
 80126be:	b209      	sxthle	r1, r1
 80126c0:	8002      	strh	r2, [r0, #0]
 80126c2:	8043      	strh	r3, [r0, #2]
 80126c4:	1aa2      	subs	r2, r4, r2
 80126c6:	1acb      	subs	r3, r1, r3
 80126c8:	8082      	strh	r2, [r0, #4]
 80126ca:	80c3      	strh	r3, [r0, #6]
 80126cc:	bd10      	pop	{r4, pc}

080126ce <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80126ce:	4603      	mov	r3, r0
 80126d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80126d4:	3026      	adds	r0, #38	; 0x26
 80126d6:	b90b      	cbnz	r3, 80126dc <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80126d8:	f002 bcb0 	b.w	801503c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80126dc:	f002 bcbe 	b.w	801505c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

080126e0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	ed2d 8b04 	vpush	{d8-d9}
 80126e8:	b0b3      	sub	sp, #204	; 0xcc
 80126ea:	9206      	str	r2, [sp, #24]
 80126ec:	2200      	movs	r2, #0
 80126ee:	4604      	mov	r4, r0
 80126f0:	469b      	mov	fp, r3
 80126f2:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80126f6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80126fa:	f9b1 6000 	ldrsh.w	r6, [r1]
 80126fe:	8888      	ldrh	r0, [r1, #4]
 8012700:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 8012704:	4430      	add	r0, r6
 8012706:	b280      	uxth	r0, r0
 8012708:	fa0f fe80 	sxth.w	lr, r0
 801270c:	4596      	cmp	lr, r2
 801270e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8012712:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8012716:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8012718:	9211      	str	r2, [sp, #68]	; 0x44
 801271a:	f340 8129 	ble.w	8012970 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801271e:	45b4      	cmp	ip, r6
 8012720:	f340 8126 	ble.w	8012970 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8012724:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012728:	88ca      	ldrh	r2, [r1, #6]
 801272a:	442a      	add	r2, r5
 801272c:	b292      	uxth	r2, r2
 801272e:	b211      	sxth	r1, r2
 8012730:	2900      	cmp	r1, #0
 8012732:	f340 811d 	ble.w	8012970 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8012736:	42ab      	cmp	r3, r5
 8012738:	f340 811a 	ble.w	8012970 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801273c:	45f4      	cmp	ip, lr
 801273e:	bfb8      	it	lt
 8012740:	fa1f f08c 	uxthlt.w	r0, ip
 8012744:	428b      	cmp	r3, r1
 8012746:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801274a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801274e:	bfb8      	it	lt
 8012750:	b29a      	uxthlt	r2, r3
 8012752:	1b80      	subs	r0, r0, r6
 8012754:	1b52      	subs	r2, r2, r5
 8012756:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801275a:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801275e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8012762:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8012766:	6822      	ldr	r2, [r4, #0]
 8012768:	ab11      	add	r3, sp, #68	; 0x44
 801276a:	ad13      	add	r5, sp, #76	; 0x4c
 801276c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012770:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012772:	9307      	str	r3, [sp, #28]
 8012774:	e885 0003 	stmia.w	r5, {r0, r1}
 8012778:	4629      	mov	r1, r5
 801277a:	4620      	mov	r0, r4
 801277c:	4790      	blx	r2
 801277e:	4621      	mov	r1, r4
 8012780:	a815      	add	r0, sp, #84	; 0x54
 8012782:	f002 fbb7 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012786:	a815      	add	r0, sp, #84	; 0x54
 8012788:	f001 f8f8 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801278c:	9b07      	ldr	r3, [sp, #28]
 801278e:	1d26      	adds	r6, r4, #4
 8012790:	4618      	mov	r0, r3
 8012792:	4631      	mov	r1, r6
 8012794:	f001 f936 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012798:	4628      	mov	r0, r5
 801279a:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801279e:	f001 f8ed 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80127a2:	4628      	mov	r0, r5
 80127a4:	f004 f996 	bl	8016ad4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80127a8:	9007      	str	r0, [sp, #28]
 80127aa:	2800      	cmp	r0, #0
 80127ac:	f000 80db 	beq.w	8012966 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 80127b0:	f8db 2000 	ldr.w	r2, [fp]
 80127b4:	a90d      	add	r1, sp, #52	; 0x34
 80127b6:	9209      	str	r2, [sp, #36]	; 0x24
 80127b8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80127bc:	a809      	add	r0, sp, #36	; 0x24
 80127be:	920a      	str	r2, [sp, #40]	; 0x28
 80127c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80127c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80127c6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80127ca:	920c      	str	r2, [sp, #48]	; 0x30
 80127cc:	f8da 2000 	ldr.w	r2, [sl]
 80127d0:	920d      	str	r2, [sp, #52]	; 0x34
 80127d2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80127d6:	920e      	str	r2, [sp, #56]	; 0x38
 80127d8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80127dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80127de:	f8da 200c 	ldr.w	r2, [sl, #12]
 80127e2:	9210      	str	r2, [sp, #64]	; 0x40
 80127e4:	4632      	mov	r2, r6
 80127e6:	f001 f8f1 	bl	80139cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80127ea:	4632      	mov	r2, r6
 80127ec:	a90e      	add	r1, sp, #56	; 0x38
 80127ee:	a80a      	add	r0, sp, #40	; 0x28
 80127f0:	f001 f8ec 	bl	80139cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80127f4:	4632      	mov	r2, r6
 80127f6:	a90f      	add	r1, sp, #60	; 0x3c
 80127f8:	a80b      	add	r0, sp, #44	; 0x2c
 80127fa:	f001 f8e7 	bl	80139cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80127fe:	4632      	mov	r2, r6
 8012800:	a910      	add	r1, sp, #64	; 0x40
 8012802:	a80c      	add	r0, sp, #48	; 0x30
 8012804:	f001 f8e2 	bl	80139cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012808:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801280c:	eef0 6a67 	vmov.f32	s13, s15
 8012810:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8012814:	eeb0 7a67 	vmov.f32	s14, s15
 8012818:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801281c:	eeb0 6a67 	vmov.f32	s12, s15
 8012820:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8012824:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012828:	ee16 6a10 	vmov	r6, s12
 801282c:	eeb0 6a67 	vmov.f32	s12, s15
 8012830:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8012834:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012838:	ee16 0a10 	vmov	r0, s12
 801283c:	eeb0 6a67 	vmov.f32	s12, s15
 8012840:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8012844:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012848:	ee16 1a10 	vmov	r1, s12
 801284c:	eeb0 6a67 	vmov.f32	s12, s15
 8012850:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012854:	ee16 2a10 	vmov	r2, s12
 8012858:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801285c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8012860:	edd7 4a00 	vldr	s9, [r7]
 8012864:	edd7 5a01 	vldr	s11, [r7, #4]
 8012868:	ed98 4a00 	vldr	s8, [r8]
 801286c:	ed98 5a01 	vldr	s10, [r8, #4]
 8012870:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8012874:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8012878:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801287c:	ed99 9a00 	vldr	s18, [r9]
 8012880:	ed99 8a01 	vldr	s16, [r9, #4]
 8012884:	edd9 8a02 	vldr	s17, [r9, #8]
 8012888:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801288c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8012890:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8012894:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8012898:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801289c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80128a0:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 80128a4:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 80128a8:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80128ac:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 80128b0:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 80128b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80128b8:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80128bc:	68ff      	ldr	r7, [r7, #12]
 80128be:	9624      	str	r6, [sp, #144]	; 0x90
 80128c0:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 80128c4:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 80128c8:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 80128cc:	9b06      	ldr	r3, [sp, #24]
 80128ce:	922d      	str	r2, [sp, #180]	; 0xb4
 80128d0:	4a29      	ldr	r2, [pc, #164]	; (8012978 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 80128d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80128d4:	8812      	ldrh	r2, [r2, #0]
 80128d6:	9b07      	ldr	r3, [sp, #28]
 80128d8:	4628      	mov	r0, r5
 80128da:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80128de:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 80128e2:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80128e6:	9218      	str	r2, [sp, #96]	; 0x60
 80128e8:	9319      	str	r3, [sp, #100]	; 0x64
 80128ea:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80128ee:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80128f2:	9731      	str	r7, [sp, #196]	; 0xc4
 80128f4:	f004 f91e 	bl	8016b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80128f8:	901a      	str	r0, [sp, #104]	; 0x68
 80128fa:	4628      	mov	r0, r5
 80128fc:	f003 fffe 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012900:	901b      	str	r0, [sp, #108]	; 0x6c
 8012902:	4628      	mov	r0, r5
 8012904:	f004 f82e 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012908:	901c      	str	r0, [sp, #112]	; 0x70
 801290a:	4628      	mov	r0, r5
 801290c:	f003 fff6 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012910:	eeb4 9a48 	vcmp.f32	s18, s16
 8012914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012918:	901d      	str	r0, [sp, #116]	; 0x74
 801291a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 801291e:	d107      	bne.n	8012930 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8012920:	eeb4 8a68 	vcmp.f32	s16, s17
 8012924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292c:	bf08      	it	eq
 801292e:	461e      	moveq	r6, r3
 8012930:	4b12      	ldr	r3, [pc, #72]	; (801297c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012938:	b10a      	cbz	r2, 801293e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 801293a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801293c:	b905      	cbnz	r5, 8012940 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 801293e:	689d      	ldr	r5, [r3, #8]
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	4620      	mov	r0, r4
 8012944:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8012946:	f7ff fec2 	bl	80126ce <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 801294a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801294e:	9604      	str	r6, [sp, #16]
 8012950:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012954:	ab13      	add	r3, sp, #76	; 0x4c
 8012956:	9301      	str	r3, [sp, #4]
 8012958:	ab15      	add	r3, sp, #84	; 0x54
 801295a:	9300      	str	r3, [sp, #0]
 801295c:	aa1e      	add	r2, sp, #120	; 0x78
 801295e:	ab19      	add	r3, sp, #100	; 0x64
 8012960:	a917      	add	r1, sp, #92	; 0x5c
 8012962:	4628      	mov	r0, r5
 8012964:	47b8      	blx	r7
 8012966:	b033      	add	sp, #204	; 0xcc
 8012968:	ecbd 8b04 	vpop	{d8-d9}
 801296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012970:	2300      	movs	r3, #0
 8012972:	9312      	str	r3, [sp, #72]	; 0x48
 8012974:	e6f7      	b.n	8012766 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8012976:	bf00      	nop
 8012978:	20020086 	.word	0x20020086
 801297c:	2002008c 	.word	0x2002008c

08012980 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8012980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012984:	ed2d 8b02 	vpush	{d8}
 8012988:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801298c:	b098      	sub	sp, #96	; 0x60
 801298e:	4604      	mov	r4, r0
 8012990:	4688      	mov	r8, r1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d077      	beq.n	8012a86 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8012996:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801299a:	4628      	mov	r0, r5
 801299c:	f003 ffae 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80129a0:	ee07 0a90 	vmov	s15, r0
 80129a4:	4628      	mov	r0, r5
 80129a6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80129aa:	f003 ffdb 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80129ae:	ee07 0a90 	vmov	s15, r0
 80129b2:	4b4d      	ldr	r3, [pc, #308]	; (8012ae8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 80129b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d066      	beq.n	8012a90 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 80129c2:	eeb0 6a47 	vmov.f32	s12, s14
 80129c6:	ee17 3a10 	vmov	r3, s14
 80129ca:	eeb0 4a48 	vmov.f32	s8, s16
 80129ce:	eeb0 7a48 	vmov.f32	s14, s16
 80129d2:	eef0 4a67 	vmov.f32	s9, s15
 80129d6:	eeb0 8a67 	vmov.f32	s16, s15
 80129da:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 80129de:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 80129e2:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 80129e6:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 80129ea:	ee73 1a65 	vsub.f32	s3, s6, s11
 80129ee:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 80129f2:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 80129f6:	ee72 6ac5 	vsub.f32	s13, s5, s10
 80129fa:	ee32 1a45 	vsub.f32	s2, s4, s10
 80129fe:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8012a02:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8012a06:	eee1 6a21 	vfma.f32	s13, s2, s3
 8012a0a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a12:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8012a14:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8012a16:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012a18:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8012a1c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8012a20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012a24:	dd3d      	ble.n	8012aa2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8012a26:	ed8d 5a04 	vstr	s10, [sp, #16]
 8012a2a:	ed8d 2a05 	vstr	s4, [sp, #20]
 8012a2e:	edcd 2a06 	vstr	s5, [sp, #24]
 8012a32:	edcd 5a08 	vstr	s11, [sp, #32]
 8012a36:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8012a3a:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8012a3e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8012a42:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8012a46:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8012a4a:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8012a4e:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8012a52:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8012a56:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8012a5a:	f8cd c01c 	str.w	ip, [sp, #28]
 8012a5e:	970b      	str	r7, [sp, #44]	; 0x2c
 8012a60:	960c      	str	r6, [sp, #48]	; 0x30
 8012a62:	950d      	str	r5, [sp, #52]	; 0x34
 8012a64:	920e      	str	r2, [sp, #56]	; 0x38
 8012a66:	900f      	str	r0, [sp, #60]	; 0x3c
 8012a68:	9316      	str	r3, [sp, #88]	; 0x58
 8012a6a:	ab14      	add	r3, sp, #80	; 0x50
 8012a6c:	9303      	str	r3, [sp, #12]
 8012a6e:	ab10      	add	r3, sp, #64	; 0x40
 8012a70:	9302      	str	r3, [sp, #8]
 8012a72:	ab0c      	add	r3, sp, #48	; 0x30
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	ab08      	add	r3, sp, #32
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	ab04      	add	r3, sp, #16
 8012a7e:	4641      	mov	r1, r8
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7ff fe2d 	bl	80126e0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8012a86:	b018      	add	sp, #96	; 0x60
 8012a88:	ecbd 8b02 	vpop	{d8}
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	eeb0 6a48 	vmov.f32	s12, s16
 8012a94:	eef0 4a47 	vmov.f32	s9, s14
 8012a98:	ee17 3a90 	vmov	r3, s15
 8012a9c:	eeb0 4a67 	vmov.f32	s8, s15
 8012aa0:	e79b      	b.n	80129da <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8012aa2:	ed8d 5a05 	vstr	s10, [sp, #20]
 8012aa6:	ed8d 2a04 	vstr	s4, [sp, #16]
 8012aaa:	f8cd c018 	str.w	ip, [sp, #24]
 8012aae:	edcd 2a07 	vstr	s5, [sp, #28]
 8012ab2:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8012ab6:	ed8d 3a08 	vstr	s6, [sp, #32]
 8012aba:	970a      	str	r7, [sp, #40]	; 0x28
 8012abc:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8012ac0:	960d      	str	r6, [sp, #52]	; 0x34
 8012ac2:	950c      	str	r5, [sp, #48]	; 0x30
 8012ac4:	900e      	str	r0, [sp, #56]	; 0x38
 8012ac6:	920f      	str	r2, [sp, #60]	; 0x3c
 8012ac8:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8012acc:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8012ad0:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8012ad4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8012ad8:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8012adc:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8012ae0:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8012ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8012ae6:	e7c0      	b.n	8012a6a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8012ae8:	20020084 	.word	0x20020084

08012aec <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012aec:	2300      	movs	r3, #0
 8012aee:	8083      	strh	r3, [r0, #4]
 8012af0:	80c3      	strh	r3, [r0, #6]
 8012af2:	8003      	strh	r3, [r0, #0]
 8012af4:	8043      	strh	r3, [r0, #2]
 8012af6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8012afa:	2bff      	cmp	r3, #255	; 0xff
 8012afc:	bf01      	itttt	eq
 8012afe:	890b      	ldrheq	r3, [r1, #8]
 8012b00:	8083      	strheq	r3, [r0, #4]
 8012b02:	894b      	ldrheq	r3, [r1, #10]
 8012b04:	80c3      	strheq	r3, [r0, #6]
 8012b06:	4770      	bx	lr

08012b08 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	466b      	mov	r3, sp
 8012b0e:	6808      	ldr	r0, [r1, #0]
 8012b10:	6849      	ldr	r1, [r1, #4]
 8012b12:	c303      	stmia	r3!, {r0, r1}
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	4669      	mov	r1, sp
 8012b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	4798      	blx	r3
 8012b1e:	4b08      	ldr	r3, [pc, #32]	; (8012b40 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012b26:	b10a      	cbz	r2, 8012b2c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012b28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012b2a:	b900      	cbnz	r0, 8012b2e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012b2c:	6898      	ldr	r0, [r3, #8]
 8012b2e:	6803      	ldr	r3, [r0, #0]
 8012b30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012b32:	6a1d      	ldr	r5, [r3, #32]
 8012b34:	4669      	mov	r1, sp
 8012b36:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8012b3a:	47a8      	blx	r5
 8012b3c:	b003      	add	sp, #12
 8012b3e:	bd30      	pop	{r4, r5, pc}
 8012b40:	2002008c 	.word	0x2002008c

08012b44 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8012b44:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8012b48:	b12a      	cbz	r2, 8012b56 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012b4a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8012b4e:	b112      	cbz	r2, 8012b56 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012b50:	6803      	ldr	r3, [r0, #0]
 8012b52:	695b      	ldr	r3, [r3, #20]
 8012b54:	4718      	bx	r3
 8012b56:	4770      	bx	lr

08012b58 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	880b      	ldrh	r3, [r1, #0]
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012b60:	4608      	mov	r0, r1
 8012b62:	460d      	mov	r5, r1
 8012b64:	f003 feca 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b68:	4606      	mov	r6, r0
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f003 fefa 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b70:	4605      	mov	r5, r0
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	4631      	mov	r1, r6
 8012b76:	4620      	mov	r0, r4
 8012b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b7a:	4798      	blx	r3
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	4629      	mov	r1, r5
 8012b80:	4620      	mov	r0, r4
 8012b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b88:	4718      	bx	r3

08012b8a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8012b8a:	b510      	push	{r4, lr}
 8012b8c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8012b90:	4604      	mov	r4, r0
 8012b92:	2bff      	cmp	r3, #255	; 0xff
 8012b94:	d006      	beq.n	8012ba4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8012b96:	2300      	movs	r3, #0
 8012b98:	8003      	strh	r3, [r0, #0]
 8012b9a:	8043      	strh	r3, [r0, #2]
 8012b9c:	8083      	strh	r3, [r0, #4]
 8012b9e:	80c3      	strh	r3, [r0, #6]
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	bd10      	pop	{r4, pc}
 8012ba4:	3126      	adds	r1, #38	; 0x26
 8012ba6:	f003 ff11 	bl	80169cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012baa:	e7f9      	b.n	8012ba0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08012bac <_ZNK8touchgfx5Image17invalidateContentEv>:
 8012bac:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8012bb0:	b12a      	cbz	r2, 8012bbe <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8012bb2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8012bb6:	b112      	cbz	r2, 8012bbe <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8012bb8:	6803      	ldr	r3, [r0, #0]
 8012bba:	695b      	ldr	r3, [r3, #20]
 8012bbc:	4718      	bx	r3
 8012bbe:	4770      	bx	lr

08012bc0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8012bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	2500      	movs	r5, #0
 8012bc8:	f854 3b26 	ldr.w	r3, [r4], #38
 8012bcc:	b088      	sub	sp, #32
 8012bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd0:	460f      	mov	r7, r1
 8012bd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012bd6:	a904      	add	r1, sp, #16
 8012bd8:	4606      	mov	r6, r0
 8012bda:	4798      	blx	r3
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f003 fe8d 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012be2:	4680      	mov	r8, r0
 8012be4:	4620      	mov	r0, r4
 8012be6:	f003 febd 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012bea:	9506      	str	r5, [sp, #24]
 8012bec:	ad06      	add	r5, sp, #24
 8012bee:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012bf2:	4639      	mov	r1, r7
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	f8ad 801c 	strh.w	r8, [sp, #28]
 8012bfa:	f7fe f8d5 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8012bfe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	dd19      	ble.n	8012c3a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012c06:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	dd15      	ble.n	8012c3a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012c0e:	4b0c      	ldr	r3, [pc, #48]	; (8012c40 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012c16:	b10a      	cbz	r2, 8012c1c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8012c18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012c1a:	b900      	cbnz	r0, 8012c1e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012c1c:	6898      	ldr	r0, [r3, #8]
 8012c1e:	2701      	movs	r7, #1
 8012c20:	6801      	ldr	r1, [r0, #0]
 8012c22:	9702      	str	r7, [sp, #8]
 8012c24:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8012c28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012c2c:	e9cd 5600 	strd	r5, r6, [sp]
 8012c30:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012c34:	688d      	ldr	r5, [r1, #8]
 8012c36:	4621      	mov	r1, r4
 8012c38:	47a8      	blx	r5
 8012c3a:	b008      	add	sp, #32
 8012c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c40:	2002008c 	.word	0x2002008c

08012c44 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012c44:	b510      	push	{r4, lr}
 8012c46:	6803      	ldr	r3, [r0, #0]
 8012c48:	460c      	mov	r4, r1
 8012c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4c:	4798      	blx	r3
 8012c4e:	1b03      	subs	r3, r0, r4
 8012c50:	4258      	negs	r0, r3
 8012c52:	4158      	adcs	r0, r3
 8012c54:	bd10      	pop	{r4, pc}
	...

08012c58 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012c58:	4b01      	ldr	r3, [pc, #4]	; (8012c60 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8012c5a:	6019      	str	r1, [r3, #0]
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	20020094 	.word	0x20020094

08012c64 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c68:	4696      	mov	lr, r2
 8012c6a:	4614      	mov	r4, r2
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	460e      	mov	r6, r1
 8012c70:	461f      	mov	r7, r3
 8012c72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c76:	b097      	sub	sp, #92	; 0x5c
 8012c78:	f10d 0c1c 	add.w	ip, sp, #28
 8012c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c80:	f8de 3000 	ldr.w	r3, [lr]
 8012c84:	f104 0e14 	add.w	lr, r4, #20
 8012c88:	f8cc 3000 	str.w	r3, [ip]
 8012c8c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012c90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c98:	f8de 3000 	ldr.w	r3, [lr]
 8012c9c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012ca0:	f8cc 3000 	str.w	r3, [ip]
 8012ca4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012ca8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cb0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8012cb4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8012cb8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8012cbc:	f8de 3000 	ldr.w	r3, [lr]
 8012cc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cc2:	f8cc 3000 	str.w	r3, [ip]
 8012cc6:	9201      	str	r2, [sp, #4]
 8012cc8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012ccc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012cce:	682b      	ldr	r3, [r5, #0]
 8012cd0:	9200      	str	r2, [sp, #0]
 8012cd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8012cd6:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8012cda:	aa07      	add	r2, sp, #28
 8012cdc:	463b      	mov	r3, r7
 8012cde:	4631      	mov	r1, r6
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	47d8      	blx	fp
 8012ce4:	46a6      	mov	lr, r4
 8012ce6:	f10d 0c1c 	add.w	ip, sp, #28
 8012cea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012cee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cf2:	f8de 3000 	ldr.w	r3, [lr]
 8012cf6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012cfa:	f8cc 3000 	str.w	r3, [ip]
 8012cfe:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012d02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d0a:	f8de 3000 	ldr.w	r3, [lr]
 8012d0e:	343c      	adds	r4, #60	; 0x3c
 8012d10:	f8cc 3000 	str.w	r3, [ip]
 8012d14:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	4631      	mov	r1, r6
 8012d22:	f8cc 3000 	str.w	r3, [ip]
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012d2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d2e:	f8cd 8008 	str.w	r8, [sp, #8]
 8012d32:	9201      	str	r2, [sp, #4]
 8012d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012d36:	4628      	mov	r0, r5
 8012d38:	9200      	str	r2, [sp, #0]
 8012d3a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8012d3c:	aa07      	add	r2, sp, #28
 8012d3e:	463b      	mov	r3, r7
 8012d40:	47a0      	blx	r4
 8012d42:	b017      	add	sp, #92	; 0x5c
 8012d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d48 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012d48:	2000      	movs	r0, #0
 8012d4a:	4770      	bx	lr

08012d4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d50:	b08d      	sub	sp, #52	; 0x34
 8012d52:	4688      	mov	r8, r1
 8012d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012d56:	f8d3 c000 	ldr.w	ip, [r3]
 8012d5a:	680f      	ldr	r7, [r1, #0]
 8012d5c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8012d60:	eba7 070c 	sub.w	r7, r7, ip
 8012d64:	42bc      	cmp	r4, r7
 8012d66:	bfa8      	it	ge
 8012d68:	463c      	movge	r4, r7
 8012d6a:	ee07 4a90 	vmov	s15, r4
 8012d6e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8012d72:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012d76:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8012d7a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8012d7e:	edd3 6a07 	vldr	s13, [r3, #28]
 8012d82:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012d86:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012d8a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012d8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d92:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8012d96:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8012d9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012da0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8012da4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012da8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012dac:	eb09 0e0c 	add.w	lr, r9, ip
 8012db0:	4571      	cmp	r1, lr
 8012db2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012db6:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012dba:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012dbe:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012dc2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012dc6:	f340 808c 	ble.w	8012ee2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012dca:	eba1 060e 	sub.w	r6, r1, lr
 8012dce:	fb96 f5f4 	sdiv	r5, r6, r4
 8012dd2:	ee07 5a10 	vmov	s14, r5
 8012dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dda:	2d00      	cmp	r5, #0
 8012ddc:	fb04 6615 	mls	r6, r4, r5, r6
 8012de0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012de4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012de8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012dec:	dd12      	ble.n	8012e14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012dee:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012df2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012dfe:	bf14      	ite	ne
 8012e00:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012e04:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012e08:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012e0c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012e10:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012e14:	fb05 f204 	mul.w	r2, r5, r4
 8012e18:	1abf      	subs	r7, r7, r2
 8012e1a:	4494      	add	ip, r2
 8012e1c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012e20:	4411      	add	r1, r2
 8012e22:	eb09 020c 	add.w	r2, r9, ip
 8012e26:	443a      	add	r2, r7
 8012e28:	b209      	sxth	r1, r1
 8012e2a:	428a      	cmp	r2, r1
 8012e2c:	bfc4      	itt	gt
 8012e2e:	eba1 0209 	subgt.w	r2, r1, r9
 8012e32:	eba2 070c 	subgt.w	r7, r2, ip
 8012e36:	2f00      	cmp	r7, #0
 8012e38:	dd50      	ble.n	8012edc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012e3a:	fb97 f1f4 	sdiv	r1, r7, r4
 8012e3e:	fb04 7211 	mls	r2, r4, r1, r7
 8012e42:	b90a      	cbnz	r2, 8012e48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012e44:	4622      	mov	r2, r4
 8012e46:	3901      	subs	r1, #1
 8012e48:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012e4c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012e50:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012e54:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012e58:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012e5c:	ee17 7a90 	vmov	r7, s15
 8012e60:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012e64:	eef0 6a42 	vmov.f32	s13, s4
 8012e68:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012e6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012e70:	ee17 ca90 	vmov	ip, s15
 8012e74:	eeb0 7a61 	vmov.f32	s14, s3
 8012e78:	6840      	ldr	r0, [r0, #4]
 8012e7a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8012e7e:	f8d0 a000 	ldr.w	sl, [r0]
 8012e82:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012e86:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012e8a:	9008      	str	r0, [sp, #32]
 8012e8c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012e8e:	695b      	ldr	r3, [r3, #20]
 8012e90:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012e94:	fb9c fcf4 	sdiv	ip, ip, r4
 8012e98:	445b      	add	r3, fp
 8012e9a:	9307      	str	r3, [sp, #28]
 8012e9c:	ee16 3a90 	vmov	r3, s13
 8012ea0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012ea4:	fb0c 3306 	mla	r3, ip, r6, r3
 8012ea8:	fb97 f7f4 	sdiv	r7, r7, r4
 8012eac:	9302      	str	r3, [sp, #8]
 8012eae:	ee17 3a10 	vmov	r3, s14
 8012eb2:	2900      	cmp	r1, #0
 8012eb4:	bfcc      	ite	gt
 8012eb6:	46a1      	movgt	r9, r4
 8012eb8:	4691      	movle	r9, r2
 8012eba:	44b6      	add	lr, r6
 8012ebc:	fb04 e505 	mla	r5, r4, r5, lr
 8012ec0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012ec4:	fb07 3706 	mla	r7, r7, r6, r3
 8012ec8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012ecc:	e9cd 4700 	strd	r4, r7, [sp]
 8012ed0:	eba9 0306 	sub.w	r3, r9, r6
 8012ed4:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012eda:	47a0      	blx	r4
 8012edc:	b00d      	add	sp, #52	; 0x34
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	2500      	movs	r5, #0
 8012ee4:	462e      	mov	r6, r5
 8012ee6:	e799      	b.n	8012e1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	461d      	mov	r5, r3
 8012eee:	b0db      	sub	sp, #364	; 0x16c
 8012ef0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8012ef4:	910f      	str	r1, [sp, #60]	; 0x3c
 8012ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8012ef8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8012efc:	9009      	str	r0, [sp, #36]	; 0x24
 8012efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f00:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8012f04:	4614      	mov	r4, r2
 8012f06:	9310      	str	r3, [sp, #64]	; 0x40
 8012f08:	6803      	ldr	r3, [r0, #0]
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8012f0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f12:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8012f16:	47b8      	blx	r7
 8012f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f1a:	6058      	str	r0, [r3, #4]
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	f000 83a1 	beq.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f22:	ed94 7a02 	vldr	s14, [r4, #8]
 8012f26:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f2e:	682b      	ldr	r3, [r5, #0]
 8012f30:	9314      	str	r3, [sp, #80]	; 0x50
 8012f32:	686b      	ldr	r3, [r5, #4]
 8012f34:	9315      	str	r3, [sp, #84]	; 0x54
 8012f36:	4bc1      	ldr	r3, [pc, #772]	; (801323c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012f38:	7819      	ldrb	r1, [r3, #0]
 8012f3a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012f3e:	2900      	cmp	r1, #0
 8012f40:	bf16      	itet	ne
 8012f42:	4619      	movne	r1, r3
 8012f44:	4611      	moveq	r1, r2
 8012f46:	4613      	movne	r3, r2
 8012f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f4c:	9116      	str	r1, [sp, #88]	; 0x58
 8012f4e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8012f52:	f240 8387 	bls.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f56:	ed94 7a07 	vldr	s14, [r4, #28]
 8012f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f62:	f240 837f 	bls.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f66:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f72:	f240 8377 	bls.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f76:	6822      	ldr	r2, [r4, #0]
 8012f78:	4bb1      	ldr	r3, [pc, #708]	; (8013240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	f2c0 8372 	blt.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f80:	49b0      	ldr	r1, [pc, #704]	; (8013244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8012f82:	6963      	ldr	r3, [r4, #20]
 8012f84:	428a      	cmp	r2, r1
 8012f86:	f300 836d 	bgt.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f8a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012f8e:	48ae      	ldr	r0, [pc, #696]	; (8013248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012f90:	33ff      	adds	r3, #255	; 0xff
 8012f92:	4283      	cmp	r3, r0
 8012f94:	f200 8366 	bhi.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012f9a:	4dac      	ldr	r5, [pc, #688]	; (801324c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012f9c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012fa0:	33ff      	adds	r3, #255	; 0xff
 8012fa2:	42ab      	cmp	r3, r5
 8012fa4:	f200 835e 	bhi.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fa8:	6862      	ldr	r2, [r4, #4]
 8012faa:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8012fae:	33ff      	adds	r3, #255	; 0xff
 8012fb0:	4283      	cmp	r3, r0
 8012fb2:	f200 8357 	bhi.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fb6:	69a1      	ldr	r1, [r4, #24]
 8012fb8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8012fbc:	33ff      	adds	r3, #255	; 0xff
 8012fbe:	4283      	cmp	r3, r0
 8012fc0:	f200 8350 	bhi.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012fc6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8012fca:	30ff      	adds	r0, #255	; 0xff
 8012fcc:	42a8      	cmp	r0, r5
 8012fce:	f200 8349 	bhi.w	8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fd2:	428a      	cmp	r2, r1
 8012fd4:	f280 8110 	bge.w	80131f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	f300 8119 	bgt.w	8013210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012fde:	4299      	cmp	r1, r3
 8012fe0:	f280 811d 	bge.w	801321e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012fe4:	2502      	movs	r5, #2
 8012fe6:	2701      	movs	r7, #1
 8012fe8:	46a9      	mov	r9, r5
 8012fea:	46b8      	mov	r8, r7
 8012fec:	f04f 0a00 	mov.w	sl, #0
 8012ff0:	4621      	mov	r1, r4
 8012ff2:	a849      	add	r0, sp, #292	; 0x124
 8012ff4:	f003 f9b8 	bl	8016368 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012ff8:	4622      	mov	r2, r4
 8012ffa:	4653      	mov	r3, sl
 8012ffc:	a949      	add	r1, sp, #292	; 0x124
 8012ffe:	f8cd 9000 	str.w	r9, [sp]
 8013002:	a819      	add	r0, sp, #100	; 0x64
 8013004:	f003 fae2 	bl	80165cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013008:	4622      	mov	r2, r4
 801300a:	4653      	mov	r3, sl
 801300c:	a949      	add	r1, sp, #292	; 0x124
 801300e:	f8cd 8000 	str.w	r8, [sp]
 8013012:	a829      	add	r0, sp, #164	; 0xa4
 8013014:	f003 fada 	bl	80165cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013018:	4643      	mov	r3, r8
 801301a:	4622      	mov	r2, r4
 801301c:	a949      	add	r1, sp, #292	; 0x124
 801301e:	f8cd 9000 	str.w	r9, [sp]
 8013022:	a839      	add	r0, sp, #228	; 0xe4
 8013024:	f003 fad2 	bl	80165cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013028:	42af      	cmp	r7, r5
 801302a:	bfb5      	itete	lt
 801302c:	2300      	movlt	r3, #0
 801302e:	2301      	movge	r3, #1
 8013030:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013032:	930e      	strge	r3, [sp, #56]	; 0x38
 8013034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013036:	af12      	add	r7, sp, #72	; 0x48
 8013038:	e893 0003 	ldmia.w	r3, {r0, r1}
 801303c:	bfb9      	ittee	lt
 801303e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8013040:	ac19      	addlt	r4, sp, #100	; 0x64
 8013042:	ad19      	addge	r5, sp, #100	; 0x64
 8013044:	ac29      	addge	r4, sp, #164	; 0xa4
 8013046:	e887 0003 	stmia.w	r7, {r0, r1}
 801304a:	b928      	cbnz	r0, 8013058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801304c:	4b80      	ldr	r3, [pc, #512]	; (8013250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801304e:	6818      	ldr	r0, [r3, #0]
 8013050:	6803      	ldr	r3, [r0, #0]
 8013052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013054:	4798      	blx	r3
 8013056:	6038      	str	r0, [r7, #0]
 8013058:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801305a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801305e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013062:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013064:	930c      	str	r3, [sp, #48]	; 0x30
 8013066:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013068:	6963      	ldr	r3, [r4, #20]
 801306a:	440b      	add	r3, r1
 801306c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013070:	4408      	add	r0, r1
 8013072:	b200      	sxth	r0, r0
 8013074:	4283      	cmp	r3, r0
 8013076:	900d      	str	r0, [sp, #52]	; 0x34
 8013078:	f280 80dd 	bge.w	8013236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801307c:	428b      	cmp	r3, r1
 801307e:	da08      	bge.n	8013092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013080:	2a00      	cmp	r2, #0
 8013082:	dd06      	ble.n	8013092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013084:	1acb      	subs	r3, r1, r3
 8013086:	429a      	cmp	r2, r3
 8013088:	f2c0 80e4 	blt.w	8013254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801308c:	2b00      	cmp	r3, #0
 801308e:	f300 80e2 	bgt.w	8013256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013092:	6967      	ldr	r7, [r4, #20]
 8013094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013096:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801309a:	443b      	add	r3, r7
 801309c:	461f      	mov	r7, r3
 801309e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130a0:	1bdf      	subs	r7, r3, r7
 80130a2:	4297      	cmp	r7, r2
 80130a4:	bfa8      	it	ge
 80130a6:	4617      	movge	r7, r2
 80130a8:	2f00      	cmp	r7, #0
 80130aa:	f340 8166 	ble.w	801337a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80130ae:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80130b0:	6829      	ldr	r1, [r5, #0]
 80130b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80130b6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80130ba:	4411      	add	r1, r2
 80130bc:	4299      	cmp	r1, r3
 80130be:	6820      	ldr	r0, [r4, #0]
 80130c0:	dd1a      	ble.n	80130f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80130c2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80130c6:	4402      	add	r2, r0
 80130c8:	440b      	add	r3, r1
 80130ca:	b21b      	sxth	r3, r3
 80130cc:	429a      	cmp	r2, r3
 80130ce:	dc13      	bgt.n	80130f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80130d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80130d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130d4:	a912      	add	r1, sp, #72	; 0x48
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	9206      	str	r2, [sp, #24]
 80130da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130dc:	9500      	str	r5, [sp, #0]
 80130de:	9205      	str	r2, [sp, #20]
 80130e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130e4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80130e8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80130ea:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80130ee:	aa49      	add	r2, sp, #292	; 0x124
 80130f0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80130f4:	4623      	mov	r3, r4
 80130f6:	47c8      	blx	r9
 80130f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80130fc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8013100:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8013104:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013108:	ee37 7a27 	vadd.f32	s14, s14, s15
 801310c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8013110:	ed94 6a08 	vldr	s12, [r4, #32]
 8013114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013118:	edd4 6a07 	vldr	s13, [r4, #28]
 801311c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013120:	441a      	add	r2, r3
 8013122:	6963      	ldr	r3, [r4, #20]
 8013124:	68a1      	ldr	r1, [r4, #8]
 8013126:	3301      	adds	r3, #1
 8013128:	6163      	str	r3, [r4, #20]
 801312a:	69a3      	ldr	r3, [r4, #24]
 801312c:	6022      	str	r2, [r4, #0]
 801312e:	3b01      	subs	r3, #1
 8013130:	61a3      	str	r3, [r4, #24]
 8013132:	6923      	ldr	r3, [r4, #16]
 8013134:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013138:	440b      	add	r3, r1
 801313a:	68e1      	ldr	r1, [r4, #12]
 801313c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013140:	428b      	cmp	r3, r1
 8013142:	edc4 6a07 	vstr	s13, [r4, #28]
 8013146:	6123      	str	r3, [r4, #16]
 8013148:	db15      	blt.n	8013176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801314a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801314e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013152:	edc4 6a07 	vstr	s13, [r4, #28]
 8013156:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801315a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801315e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013162:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013166:	ee77 7a27 	vadd.f32	s15, s14, s15
 801316a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801316e:	3201      	adds	r2, #1
 8013170:	1a5b      	subs	r3, r3, r1
 8013172:	6022      	str	r2, [r4, #0]
 8013174:	6123      	str	r3, [r4, #16]
 8013176:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801317a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801317e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8013182:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013186:	ee37 7a27 	vadd.f32	s14, s14, s15
 801318a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801318e:	ed95 6a08 	vldr	s12, [r5, #32]
 8013192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013196:	edd5 6a07 	vldr	s13, [r5, #28]
 801319a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801319e:	441a      	add	r2, r3
 80131a0:	696b      	ldr	r3, [r5, #20]
 80131a2:	68a9      	ldr	r1, [r5, #8]
 80131a4:	3301      	adds	r3, #1
 80131a6:	616b      	str	r3, [r5, #20]
 80131a8:	69ab      	ldr	r3, [r5, #24]
 80131aa:	602a      	str	r2, [r5, #0]
 80131ac:	3b01      	subs	r3, #1
 80131ae:	61ab      	str	r3, [r5, #24]
 80131b0:	692b      	ldr	r3, [r5, #16]
 80131b2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80131b6:	440b      	add	r3, r1
 80131b8:	68e9      	ldr	r1, [r5, #12]
 80131ba:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80131be:	428b      	cmp	r3, r1
 80131c0:	edc5 6a07 	vstr	s13, [r5, #28]
 80131c4:	612b      	str	r3, [r5, #16]
 80131c6:	db15      	blt.n	80131f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80131c8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80131cc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80131d0:	edc5 6a07 	vstr	s13, [r5, #28]
 80131d4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80131d8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80131dc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80131e0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80131e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131e8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80131ec:	3201      	adds	r2, #1
 80131ee:	1a5b      	subs	r3, r3, r1
 80131f0:	602a      	str	r2, [r5, #0]
 80131f2:	612b      	str	r3, [r5, #16]
 80131f4:	3f01      	subs	r7, #1
 80131f6:	e757      	b.n	80130a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80131f8:	4299      	cmp	r1, r3
 80131fa:	dc13      	bgt.n	8013224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80131fc:	429a      	cmp	r2, r3
 80131fe:	da14      	bge.n	801322a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013200:	2502      	movs	r5, #2
 8013202:	2703      	movs	r7, #3
 8013204:	46a9      	mov	r9, r5
 8013206:	f04f 0800 	mov.w	r8, #0
 801320a:	f04f 0a01 	mov.w	sl, #1
 801320e:	e6ef      	b.n	8012ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013210:	2501      	movs	r5, #1
 8013212:	2700      	movs	r7, #0
 8013214:	46a9      	mov	r9, r5
 8013216:	46b8      	mov	r8, r7
 8013218:	f04f 0a02 	mov.w	sl, #2
 801321c:	e6e8      	b.n	8012ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801321e:	2501      	movs	r5, #1
 8013220:	2702      	movs	r7, #2
 8013222:	e6e1      	b.n	8012fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013224:	2500      	movs	r5, #0
 8013226:	2701      	movs	r7, #1
 8013228:	e7f4      	b.n	8013214 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801322a:	2702      	movs	r7, #2
 801322c:	2503      	movs	r5, #3
 801322e:	f04f 0900 	mov.w	r9, #0
 8013232:	46b8      	mov	r8, r7
 8013234:	e7e9      	b.n	801320a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013236:	4613      	mov	r3, r2
 8013238:	e728      	b.n	801308c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801323a:	bf00      	nop
 801323c:	20020084 	.word	0x20020084
 8013240:	fffd8f01 	.word	0xfffd8f01
 8013244:	00027100 	.word	0x00027100
 8013248:	0004e1ff 	.word	0x0004e1ff
 801324c:	0004e1fe 	.word	0x0004e1fe
 8013250:	2002008c 	.word	0x2002008c
 8013254:	4613      	mov	r3, r2
 8013256:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801325a:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801325e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8013262:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8013266:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801326a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801326e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013272:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8013276:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801327a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801327e:	469e      	mov	lr, r3
 8013280:	469c      	mov	ip, r3
 8013282:	f04f 0900 	mov.w	r9, #0
 8013286:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013288:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801328a:	9111      	str	r1, [sp, #68]	; 0x44
 801328c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8013290:	f1bc 0f00 	cmp.w	ip, #0
 8013294:	d147      	bne.n	8013326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013296:	eb03 0c07 	add.w	ip, r3, r7
 801329a:	1ad7      	subs	r7, r2, r3
 801329c:	f1b9 0f00 	cmp.w	r9, #0
 80132a0:	d009      	beq.n	80132b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80132a2:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80132a6:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80132aa:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80132ae:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80132b2:	9029      	str	r0, [sp, #164]	; 0xa4
 80132b4:	912d      	str	r1, [sp, #180]	; 0xb4
 80132b6:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80132ba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80132be:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80132c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80132c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80132ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80132ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80132d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80132d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80132da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80132de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80132e2:	f04f 0800 	mov.w	r8, #0
 80132e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80132e8:	9111      	str	r1, [sp, #68]	; 0x44
 80132ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80132ee:	f1be 0f00 	cmp.w	lr, #0
 80132f2:	d031      	beq.n	8013358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80132f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80132f6:	4450      	add	r0, sl
 80132f8:	4431      	add	r1, r6
 80132fa:	4549      	cmp	r1, r9
 80132fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013300:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013304:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013308:	db08      	blt.n	801331c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801330a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801330e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013312:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013316:	3001      	adds	r0, #1
 8013318:	eba1 0109 	sub.w	r1, r1, r9
 801331c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013320:	f04f 0801 	mov.w	r8, #1
 8013324:	e7e3      	b.n	80132ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8013326:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013328:	4450      	add	r0, sl
 801332a:	4431      	add	r1, r6
 801332c:	4541      	cmp	r1, r8
 801332e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013332:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013336:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801333a:	db08      	blt.n	801334e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801333c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013340:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013344:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013348:	3001      	adds	r0, #1
 801334a:	eba1 0108 	sub.w	r1, r1, r8
 801334e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013352:	f04f 0901 	mov.w	r9, #1
 8013356:	e79b      	b.n	8013290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013358:	449c      	add	ip, r3
 801335a:	1aff      	subs	r7, r7, r3
 801335c:	f1b8 0f00 	cmp.w	r8, #0
 8013360:	d009      	beq.n	8013376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013362:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013366:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801336a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801336e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8013372:	9019      	str	r0, [sp, #100]	; 0x64
 8013374:	911d      	str	r1, [sp, #116]	; 0x74
 8013376:	1ad2      	subs	r2, r2, r3
 8013378:	e68b      	b.n	8013092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801337c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 80d1 	beq.w	8013526 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013384:	ad19      	add	r5, sp, #100	; 0x64
 8013386:	ac39      	add	r4, sp, #228	; 0xe4
 8013388:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801338a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801338e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013392:	930c      	str	r3, [sp, #48]	; 0x30
 8013394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013396:	6963      	ldr	r3, [r4, #20]
 8013398:	440b      	add	r3, r1
 801339a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801339e:	4408      	add	r0, r1
 80133a0:	b200      	sxth	r0, r0
 80133a2:	4283      	cmp	r3, r0
 80133a4:	900d      	str	r0, [sp, #52]	; 0x34
 80133a6:	f280 80c1 	bge.w	801352c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80133aa:	428b      	cmp	r3, r1
 80133ac:	da08      	bge.n	80133c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80133ae:	2a00      	cmp	r2, #0
 80133b0:	dd06      	ble.n	80133c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80133b2:	1acb      	subs	r3, r1, r3
 80133b4:	429a      	cmp	r2, r3
 80133b6:	f2c0 80bb 	blt.w	8013530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f300 80b9 	bgt.w	8013532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80133c0:	6967      	ldr	r7, [r4, #20]
 80133c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133c4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80133c8:	443b      	add	r3, r7
 80133ca:	461f      	mov	r7, r3
 80133cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ce:	1bdf      	subs	r7, r3, r7
 80133d0:	4297      	cmp	r7, r2
 80133d2:	bfa8      	it	ge
 80133d4:	4617      	movge	r7, r2
 80133d6:	2f00      	cmp	r7, #0
 80133d8:	f340 813c 	ble.w	8013654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80133dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80133de:	6829      	ldr	r1, [r5, #0]
 80133e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133e4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80133e8:	4411      	add	r1, r2
 80133ea:	4299      	cmp	r1, r3
 80133ec:	6820      	ldr	r0, [r4, #0]
 80133ee:	dd1a      	ble.n	8013426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80133f0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80133f4:	4402      	add	r2, r0
 80133f6:	440b      	add	r3, r1
 80133f8:	b21b      	sxth	r3, r3
 80133fa:	429a      	cmp	r2, r3
 80133fc:	dc13      	bgt.n	8013426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80133fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013402:	a912      	add	r1, sp, #72	; 0x48
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	9206      	str	r2, [sp, #24]
 8013408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801340a:	9500      	str	r5, [sp, #0]
 801340c:	9205      	str	r2, [sp, #20]
 801340e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013412:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013416:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013418:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801341c:	aa49      	add	r2, sp, #292	; 0x124
 801341e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8013422:	4623      	mov	r3, r4
 8013424:	47c8      	blx	r9
 8013426:	e9d4 2300 	ldrd	r2, r3, [r4]
 801342a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801342e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8013432:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013436:	ee37 7a27 	vadd.f32	s14, s14, s15
 801343a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801343e:	ed94 6a08 	vldr	s12, [r4, #32]
 8013442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013446:	edd4 6a07 	vldr	s13, [r4, #28]
 801344a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801344e:	441a      	add	r2, r3
 8013450:	6963      	ldr	r3, [r4, #20]
 8013452:	68a1      	ldr	r1, [r4, #8]
 8013454:	3301      	adds	r3, #1
 8013456:	6163      	str	r3, [r4, #20]
 8013458:	69a3      	ldr	r3, [r4, #24]
 801345a:	6022      	str	r2, [r4, #0]
 801345c:	3b01      	subs	r3, #1
 801345e:	61a3      	str	r3, [r4, #24]
 8013460:	6923      	ldr	r3, [r4, #16]
 8013462:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013466:	440b      	add	r3, r1
 8013468:	68e1      	ldr	r1, [r4, #12]
 801346a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801346e:	428b      	cmp	r3, r1
 8013470:	edc4 6a07 	vstr	s13, [r4, #28]
 8013474:	6123      	str	r3, [r4, #16]
 8013476:	db15      	blt.n	80134a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013478:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801347c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013480:	edc4 6a07 	vstr	s13, [r4, #28]
 8013484:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013488:	ee36 7a87 	vadd.f32	s14, s13, s14
 801348c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013490:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013498:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801349c:	3201      	adds	r2, #1
 801349e:	1a5b      	subs	r3, r3, r1
 80134a0:	6022      	str	r2, [r4, #0]
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80134a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80134ac:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80134b0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80134b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134b8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80134bc:	ed95 6a08 	vldr	s12, [r5, #32]
 80134c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134c4:	edd5 6a07 	vldr	s13, [r5, #28]
 80134c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80134cc:	441a      	add	r2, r3
 80134ce:	696b      	ldr	r3, [r5, #20]
 80134d0:	68a9      	ldr	r1, [r5, #8]
 80134d2:	3301      	adds	r3, #1
 80134d4:	616b      	str	r3, [r5, #20]
 80134d6:	69ab      	ldr	r3, [r5, #24]
 80134d8:	602a      	str	r2, [r5, #0]
 80134da:	3b01      	subs	r3, #1
 80134dc:	61ab      	str	r3, [r5, #24]
 80134de:	692b      	ldr	r3, [r5, #16]
 80134e0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80134e4:	440b      	add	r3, r1
 80134e6:	68e9      	ldr	r1, [r5, #12]
 80134e8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80134ec:	428b      	cmp	r3, r1
 80134ee:	edc5 6a07 	vstr	s13, [r5, #28]
 80134f2:	612b      	str	r3, [r5, #16]
 80134f4:	db15      	blt.n	8013522 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80134f6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80134fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80134fe:	edc5 6a07 	vstr	s13, [r5, #28]
 8013502:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013506:	ee36 7a87 	vadd.f32	s14, s13, s14
 801350a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801350e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8013512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013516:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801351a:	3201      	adds	r2, #1
 801351c:	1a5b      	subs	r3, r3, r1
 801351e:	602a      	str	r2, [r5, #0]
 8013520:	612b      	str	r3, [r5, #16]
 8013522:	3f01      	subs	r7, #1
 8013524:	e757      	b.n	80133d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8013526:	ad39      	add	r5, sp, #228	; 0xe4
 8013528:	ac19      	add	r4, sp, #100	; 0x64
 801352a:	e72d      	b.n	8013388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801352c:	4613      	mov	r3, r2
 801352e:	e744      	b.n	80133ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013530:	4613      	mov	r3, r2
 8013532:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8013536:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801353a:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801353e:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8013542:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8013546:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801354a:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801354e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8013552:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8013556:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801355a:	469e      	mov	lr, r3
 801355c:	461f      	mov	r7, r3
 801355e:	f04f 0900 	mov.w	r9, #0
 8013562:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8013564:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8013568:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801356a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801356e:	960e      	str	r6, [sp, #56]	; 0x38
 8013570:	2f00      	cmp	r7, #0
 8013572:	d146      	bne.n	8013602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013574:	449c      	add	ip, r3
 8013576:	1ad7      	subs	r7, r2, r3
 8013578:	f1b9 0f00 	cmp.w	r9, #0
 801357c:	d009      	beq.n	8013592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801357e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8013582:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8013586:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801358a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801358e:	9039      	str	r0, [sp, #228]	; 0xe4
 8013590:	913d      	str	r1, [sp, #244]	; 0xf4
 8013592:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013596:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801359a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801359e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80135a2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80135a6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80135aa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80135ae:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80135b2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80135b6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80135ba:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80135be:	f04f 0800 	mov.w	r8, #0
 80135c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80135c4:	910e      	str	r1, [sp, #56]	; 0x38
 80135c6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80135ca:	f1be 0f00 	cmp.w	lr, #0
 80135ce:	d030      	beq.n	8013632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80135d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80135d2:	4450      	add	r0, sl
 80135d4:	4431      	add	r1, r6
 80135d6:	4549      	cmp	r1, r9
 80135d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80135dc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80135e0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80135e4:	db08      	blt.n	80135f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80135e6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80135ea:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80135ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 80135f2:	3001      	adds	r0, #1
 80135f4:	eba1 0109 	sub.w	r1, r1, r9
 80135f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80135fc:	f04f 0801 	mov.w	r8, #1
 8013600:	e7e3      	b.n	80135ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8013602:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013604:	4450      	add	r0, sl
 8013606:	4431      	add	r1, r6
 8013608:	4541      	cmp	r1, r8
 801360a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801360e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013612:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013616:	db08      	blt.n	801362a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013618:	ee76 6a85 	vadd.f32	s13, s13, s10
 801361c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013620:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013624:	3001      	adds	r0, #1
 8013626:	eba1 0108 	sub.w	r1, r1, r8
 801362a:	3f01      	subs	r7, #1
 801362c:	f04f 0901 	mov.w	r9, #1
 8013630:	e79e      	b.n	8013570 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013632:	449c      	add	ip, r3
 8013634:	1aff      	subs	r7, r7, r3
 8013636:	f1b8 0f00 	cmp.w	r8, #0
 801363a:	d009      	beq.n	8013650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801363c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013640:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013644:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013648:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801364c:	9019      	str	r0, [sp, #100]	; 0x64
 801364e:	911d      	str	r1, [sp, #116]	; 0x74
 8013650:	1ad2      	subs	r2, r2, r3
 8013652:	e6b5      	b.n	80133c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	b923      	cbnz	r3, 8013664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801365a:	4b04      	ldr	r3, [pc, #16]	; (801366c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801365c:	6818      	ldr	r0, [r3, #0]
 801365e:	6803      	ldr	r3, [r0, #0]
 8013660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013662:	4798      	blx	r3
 8013664:	b05b      	add	sp, #364	; 0x16c
 8013666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801366a:	bf00      	nop
 801366c:	2002008c 	.word	0x2002008c

08013670 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013670:	2b03      	cmp	r3, #3
 8013672:	d818      	bhi.n	80136a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013674:	e8df f003 	tbb	[pc, r3]
 8013678:	130d0602 	.word	0x130d0602
 801367c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013680:	1850      	adds	r0, r2, r1
 8013682:	4770      	bx	lr
 8013684:	8803      	ldrh	r3, [r0, #0]
 8013686:	8880      	ldrh	r0, [r0, #4]
 8013688:	4418      	add	r0, r3
 801368a:	b200      	sxth	r0, r0
 801368c:	1a80      	subs	r0, r0, r2
 801368e:	3801      	subs	r0, #1
 8013690:	4770      	bx	lr
 8013692:	8803      	ldrh	r3, [r0, #0]
 8013694:	8880      	ldrh	r0, [r0, #4]
 8013696:	4418      	add	r0, r3
 8013698:	b200      	sxth	r0, r0
 801369a:	1a40      	subs	r0, r0, r1
 801369c:	e7f7      	b.n	801368e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801369e:	f9b0 0000 	ldrsh.w	r0, [r0]
 80136a2:	4410      	add	r0, r2
 80136a4:	4770      	bx	lr
 80136a6:	2000      	movs	r0, #0
 80136a8:	4770      	bx	lr

080136aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80136aa:	2b03      	cmp	r3, #3
 80136ac:	d817      	bhi.n	80136de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80136ae:	e8df f003 	tbb	[pc, r3]
 80136b2:	0602      	.short	0x0602
 80136b4:	1009      	.short	0x1009
 80136b6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80136ba:	1850      	adds	r0, r2, r1
 80136bc:	4770      	bx	lr
 80136be:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80136c2:	e7fa      	b.n	80136ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80136c4:	8843      	ldrh	r3, [r0, #2]
 80136c6:	88c0      	ldrh	r0, [r0, #6]
 80136c8:	4418      	add	r0, r3
 80136ca:	b200      	sxth	r0, r0
 80136cc:	1a80      	subs	r0, r0, r2
 80136ce:	3801      	subs	r0, #1
 80136d0:	4770      	bx	lr
 80136d2:	8843      	ldrh	r3, [r0, #2]
 80136d4:	88c0      	ldrh	r0, [r0, #6]
 80136d6:	4418      	add	r0, r3
 80136d8:	b200      	sxth	r0, r0
 80136da:	1a40      	subs	r0, r0, r1
 80136dc:	e7f7      	b.n	80136ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80136de:	2000      	movs	r0, #0
 80136e0:	4770      	bx	lr
	...

080136e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80136e4:	2200      	movs	r2, #0
 80136e6:	4b01      	ldr	r3, [pc, #4]	; (80136ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	4770      	bx	lr
 80136ec:	20020094 	.word	0x20020094

080136f0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80136f0:	4603      	mov	r3, r0
 80136f2:	b1c8      	cbz	r0, 8013728 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80136f4:	0c02      	lsrs	r2, r0, #16
 80136f6:	0412      	lsls	r2, r2, #16
 80136f8:	b9a2      	cbnz	r2, 8013724 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80136fa:	0403      	lsls	r3, r0, #16
 80136fc:	2010      	movs	r0, #16
 80136fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013702:	bf04      	itt	eq
 8013704:	021b      	lsleq	r3, r3, #8
 8013706:	3008      	addeq	r0, #8
 8013708:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801370c:	bf04      	itt	eq
 801370e:	011b      	lsleq	r3, r3, #4
 8013710:	3004      	addeq	r0, #4
 8013712:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013716:	bf04      	itt	eq
 8013718:	009b      	lsleq	r3, r3, #2
 801371a:	3002      	addeq	r0, #2
 801371c:	2b00      	cmp	r3, #0
 801371e:	db04      	blt.n	801372a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013720:	3001      	adds	r0, #1
 8013722:	4770      	bx	lr
 8013724:	2000      	movs	r0, #0
 8013726:	e7ea      	b.n	80136fe <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013728:	2020      	movs	r0, #32
 801372a:	4770      	bx	lr

0801372c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013730:	b087      	sub	sp, #28
 8013732:	4681      	mov	r9, r0
 8013734:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8013738:	4610      	mov	r0, r2
 801373a:	4698      	mov	r8, r3
 801373c:	460d      	mov	r5, r1
 801373e:	b981      	cbnz	r1, 8013762 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8013740:	b14b      	cbz	r3, 8013756 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8013742:	460b      	mov	r3, r1
 8013744:	e9cd 4700 	strd	r4, r7, [sp]
 8013748:	464a      	mov	r2, r9
 801374a:	4641      	mov	r1, r8
 801374c:	f7ff ffee 	bl	801372c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013750:	b007      	add	sp, #28
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	f04f 33ff 	mov.w	r3, #4294967295
 801375a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801375e:	603b      	str	r3, [r7, #0]
 8013760:	e7f6      	b.n	8013750 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013762:	fa32 fa01 	lsrs.w	sl, r2, r1
 8013766:	d107      	bne.n	8013778 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8013768:	fb09 f602 	mul.w	r6, r9, r2
 801376c:	fbb6 f0f4 	udiv	r0, r6, r4
 8013770:	fb04 6610 	mls	r6, r4, r0, r6
 8013774:	603e      	str	r6, [r7, #0]
 8013776:	e7eb      	b.n	8013750 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013778:	fa09 fb01 	lsl.w	fp, r9, r1
 801377c:	fbbb f3f4 	udiv	r3, fp, r4
 8013780:	2601      	movs	r6, #1
 8013782:	9302      	str	r3, [sp, #8]
 8013784:	408e      	lsls	r6, r1
 8013786:	fb0a f303 	mul.w	r3, sl, r3
 801378a:	3e01      	subs	r6, #1
 801378c:	4016      	ands	r6, r2
 801378e:	4630      	mov	r0, r6
 8013790:	9303      	str	r3, [sp, #12]
 8013792:	f7ff ffad 	bl	80136f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013796:	464a      	mov	r2, r9
 8013798:	460b      	mov	r3, r1
 801379a:	e9cd 4700 	strd	r4, r7, [sp]
 801379e:	4601      	mov	r1, r0
 80137a0:	4630      	mov	r0, r6
 80137a2:	f7ff ffc3 	bl	801372c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80137a6:	9b02      	ldr	r3, [sp, #8]
 80137a8:	4606      	mov	r6, r0
 80137aa:	fb04 bb13 	mls	fp, r4, r3, fp
 80137ae:	4658      	mov	r0, fp
 80137b0:	eb05 0108 	add.w	r1, r5, r8
 80137b4:	f7ff ff9c 	bl	80136f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80137b8:	ab05      	add	r3, sp, #20
 80137ba:	e9cd 4300 	strd	r4, r3, [sp]
 80137be:	465a      	mov	r2, fp
 80137c0:	4603      	mov	r3, r0
 80137c2:	4650      	mov	r0, sl
 80137c4:	f7ff ffb2 	bl	801372c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	9a05      	ldr	r2, [sp, #20]
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	4411      	add	r1, r2
 80137d0:	fbb1 f2f4 	udiv	r2, r1, r4
 80137d4:	fb04 1412 	mls	r4, r4, r2, r1
 80137d8:	18d3      	adds	r3, r2, r3
 80137da:	441e      	add	r6, r3
 80137dc:	4430      	add	r0, r6
 80137de:	603c      	str	r4, [r7, #0]
 80137e0:	e7b6      	b.n	8013750 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080137e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80137e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137e6:	b085      	sub	sp, #20
 80137e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80137ea:	f1b0 0900 	subs.w	r9, r0, #0
 80137ee:	461d      	mov	r5, r3
 80137f0:	bfbf      	itttt	lt
 80137f2:	6823      	ldrlt	r3, [r4, #0]
 80137f4:	f1c9 0900 	rsblt	r9, r9, #0
 80137f8:	425b      	neglt	r3, r3
 80137fa:	6023      	strlt	r3, [r4, #0]
 80137fc:	bfb4      	ite	lt
 80137fe:	f04f 36ff 	movlt.w	r6, #4294967295
 8013802:	2601      	movge	r6, #1
 8013804:	2a00      	cmp	r2, #0
 8013806:	4617      	mov	r7, r2
 8013808:	da04      	bge.n	8013814 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	4257      	negs	r7, r2
 801380e:	425b      	negs	r3, r3
 8013810:	4276      	negs	r6, r6
 8013812:	6023      	str	r3, [r4, #0]
 8013814:	2d00      	cmp	r5, #0
 8013816:	4638      	mov	r0, r7
 8013818:	bfba      	itte	lt
 801381a:	426d      	neglt	r5, r5
 801381c:	f04f 38ff 	movlt.w	r8, #4294967295
 8013820:	f04f 0801 	movge.w	r8, #1
 8013824:	f7ff ff64 	bl	80136f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013828:	ab03      	add	r3, sp, #12
 801382a:	e9cd 5300 	strd	r5, r3, [sp]
 801382e:	463a      	mov	r2, r7
 8013830:	4603      	mov	r3, r0
 8013832:	4648      	mov	r0, r9
 8013834:	f7ff ff7a 	bl	801372c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013838:	6823      	ldr	r3, [r4, #0]
 801383a:	9a03      	ldr	r2, [sp, #12]
 801383c:	4546      	cmp	r6, r8
 801383e:	441a      	add	r2, r3
 8013840:	fb92 f3f5 	sdiv	r3, r2, r5
 8013844:	4418      	add	r0, r3
 8013846:	fb05 2313 	mls	r3, r5, r3, r2
 801384a:	bf18      	it	ne
 801384c:	4240      	negne	r0, r0
 801384e:	1c72      	adds	r2, r6, #1
 8013850:	6023      	str	r3, [r4, #0]
 8013852:	d105      	bne.n	8013860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013854:	2b00      	cmp	r3, #0
 8013856:	f1c3 0200 	rsb	r2, r3, #0
 801385a:	db0b      	blt.n	8013874 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801385c:	6022      	str	r2, [r4, #0]
 801385e:	e006      	b.n	801386e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013860:	2e01      	cmp	r6, #1
 8013862:	d104      	bne.n	801386e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013864:	2b00      	cmp	r3, #0
 8013866:	da02      	bge.n	801386e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013868:	442b      	add	r3, r5
 801386a:	3801      	subs	r0, #1
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	b005      	add	sp, #20
 8013870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013874:	3801      	subs	r0, #1
 8013876:	1b52      	subs	r2, r2, r5
 8013878:	e7f0      	b.n	801385c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801387c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801387c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013880:	4c1c      	ldr	r4, [pc, #112]	; (80138f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013882:	4605      	mov	r5, r0
 8013884:	69a3      	ldr	r3, [r4, #24]
 8013886:	6807      	ldr	r7, [r0, #0]
 8013888:	b92b      	cbnz	r3, 8013896 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801388a:	6840      	ldr	r0, [r0, #4]
 801388c:	e9c5 7000 	strd	r7, r0, [r5]
 8013890:	b004      	add	sp, #16
 8013892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013896:	f04f 0802 	mov.w	r8, #2
 801389a:	fb93 f1f8 	sdiv	r1, r3, r8
 801389e:	68a2      	ldr	r2, [r4, #8]
 80138a0:	ae04      	add	r6, sp, #16
 80138a2:	440a      	add	r2, r1
 80138a4:	f846 2d04 	str.w	r2, [r6, #-4]!
 80138a8:	69e1      	ldr	r1, [r4, #28]
 80138aa:	463a      	mov	r2, r7
 80138ac:	9600      	str	r6, [sp, #0]
 80138ae:	6820      	ldr	r0, [r4, #0]
 80138b0:	f7ff ff97 	bl	80137e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80138b4:	69a3      	ldr	r3, [r4, #24]
 80138b6:	4607      	mov	r7, r0
 80138b8:	686a      	ldr	r2, [r5, #4]
 80138ba:	6a21      	ldr	r1, [r4, #32]
 80138bc:	9600      	str	r6, [sp, #0]
 80138be:	6860      	ldr	r0, [r4, #4]
 80138c0:	f7ff ff8f 	bl	80137e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80138c4:	69a3      	ldr	r3, [r4, #24]
 80138c6:	6962      	ldr	r2, [r4, #20]
 80138c8:	fb93 f8f8 	sdiv	r8, r3, r8
 80138cc:	4442      	add	r2, r8
 80138ce:	9203      	str	r2, [sp, #12]
 80138d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80138d2:	682a      	ldr	r2, [r5, #0]
 80138d4:	4407      	add	r7, r0
 80138d6:	9600      	str	r6, [sp, #0]
 80138d8:	68e0      	ldr	r0, [r4, #12]
 80138da:	f7ff ff82 	bl	80137e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80138de:	9600      	str	r6, [sp, #0]
 80138e0:	4680      	mov	r8, r0
 80138e2:	69a3      	ldr	r3, [r4, #24]
 80138e4:	686a      	ldr	r2, [r5, #4]
 80138e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80138e8:	6920      	ldr	r0, [r4, #16]
 80138ea:	f7ff ff7a 	bl	80137e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80138ee:	4440      	add	r0, r8
 80138f0:	e7cc      	b.n	801388c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80138f2:	bf00      	nop
 80138f4:	20020098 	.word	0x20020098

080138f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80138f8:	4b07      	ldr	r3, [pc, #28]	; (8013918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d109      	bne.n	8013914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013900:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013904:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013908:	8003      	strh	r3, [r0, #0]
 801390a:	4b04      	ldr	r3, [pc, #16]	; (801391c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	3b01      	subs	r3, #1
 8013910:	1a9b      	subs	r3, r3, r2
 8013912:	800b      	strh	r3, [r1, #0]
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	20020084 	.word	0x20020084
 801391c:	20020080 	.word	0x20020080

08013920 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013920:	b510      	push	{r4, lr}
 8013922:	4b07      	ldr	r3, [pc, #28]	; (8013940 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	2b01      	cmp	r3, #1
 8013928:	d108      	bne.n	801393c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801392a:	4b06      	ldr	r3, [pc, #24]	; (8013944 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801392c:	880c      	ldrh	r4, [r1, #0]
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013934:	3b01      	subs	r3, #1
 8013936:	1b1b      	subs	r3, r3, r4
 8013938:	8003      	strh	r3, [r0, #0]
 801393a:	800a      	strh	r2, [r1, #0]
 801393c:	bd10      	pop	{r4, pc}
 801393e:	bf00      	nop
 8013940:	20020084 	.word	0x20020084
 8013944:	20020080 	.word	0x20020080

08013948 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013948:	b510      	push	{r4, lr}
 801394a:	4b0a      	ldr	r3, [pc, #40]	; (8013974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d10e      	bne.n	8013970 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013952:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013956:	8843      	ldrh	r3, [r0, #2]
 8013958:	f9b0 4000 	ldrsh.w	r4, [r0]
 801395c:	18ca      	adds	r2, r1, r3
 801395e:	4b06      	ldr	r3, [pc, #24]	; (8013978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013960:	8044      	strh	r4, [r0, #2]
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	1a9b      	subs	r3, r3, r2
 8013966:	8003      	strh	r3, [r0, #0]
 8013968:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801396c:	8081      	strh	r1, [r0, #4]
 801396e:	80c3      	strh	r3, [r0, #6]
 8013970:	bd10      	pop	{r4, pc}
 8013972:	bf00      	nop
 8013974:	20020084 	.word	0x20020084
 8013978:	20020080 	.word	0x20020080

0801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801397c:	4b08      	ldr	r3, [pc, #32]	; (80139a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b01      	cmp	r3, #1
 8013982:	d10c      	bne.n	801399e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013984:	8803      	ldrh	r3, [r0, #0]
 8013986:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801398a:	8842      	ldrh	r2, [r0, #2]
 801398c:	8002      	strh	r2, [r0, #0]
 801398e:	185a      	adds	r2, r3, r1
 8013990:	4b04      	ldr	r3, [pc, #16]	; (80139a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	1a9b      	subs	r3, r3, r2
 8013996:	8043      	strh	r3, [r0, #2]
 8013998:	88c3      	ldrh	r3, [r0, #6]
 801399a:	80c1      	strh	r1, [r0, #6]
 801399c:	8083      	strh	r3, [r0, #4]
 801399e:	4770      	bx	lr
 80139a0:	20020084 	.word	0x20020084
 80139a4:	20020080 	.word	0x20020080

080139a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80139a8:	b510      	push	{r4, lr}
 80139aa:	4b07      	ldr	r3, [pc, #28]	; (80139c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d108      	bne.n	80139c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80139b2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80139b6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80139ba:	8003      	strh	r3, [r0, #0]
 80139bc:	8893      	ldrh	r3, [r2, #4]
 80139be:	3b01      	subs	r3, #1
 80139c0:	1b1b      	subs	r3, r3, r4
 80139c2:	800b      	strh	r3, [r1, #0]
 80139c4:	bd10      	pop	{r4, pc}
 80139c6:	bf00      	nop
 80139c8:	20020084 	.word	0x20020084

080139cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80139cc:	4b0b      	ldr	r3, [pc, #44]	; (80139fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d111      	bne.n	80139f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80139d4:	680b      	ldr	r3, [r1, #0]
 80139d6:	ed90 7a00 	vldr	s14, [r0]
 80139da:	6003      	str	r3, [r0, #0]
 80139dc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80139e0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8013a00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80139e4:	ee07 3a90 	vmov	s15, r3
 80139e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80139f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139f4:	edc1 7a00 	vstr	s15, [r1]
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	20020084 	.word	0x20020084
 8013a00:	38d1b717 	.word	0x38d1b717

08013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013a04:	b510      	push	{r4, lr}
 8013a06:	4b0a      	ldr	r3, [pc, #40]	; (8013a30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013a08:	460a      	mov	r2, r1
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d10d      	bne.n	8013a2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013a10:	8881      	ldrh	r1, [r0, #4]
 8013a12:	8803      	ldrh	r3, [r0, #0]
 8013a14:	440b      	add	r3, r1
 8013a16:	4601      	mov	r1, r0
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	f821 3b02 	strh.w	r3, [r1], #2
 8013a1e:	f7ff ffc3 	bl	80139a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013a22:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013a26:	88c2      	ldrh	r2, [r0, #6]
 8013a28:	80c3      	strh	r3, [r0, #6]
 8013a2a:	8082      	strh	r2, [r0, #4]
 8013a2c:	bd10      	pop	{r4, pc}
 8013a2e:	bf00      	nop
 8013a30:	20020084 	.word	0x20020084

08013a34 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013a34:	2100      	movs	r1, #0
 8013a36:	4b06      	ldr	r3, [pc, #24]	; (8013a50 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013a38:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8013a3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013a40:	4b04      	ldr	r3, [pc, #16]	; (8013a54 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013a42:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8013a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a4a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8013a4e:	4770      	bx	lr
 8013a50:	20020080 	.word	0x20020080
 8013a54:	20020082 	.word	0x20020082

08013a58 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013a58:	4b03      	ldr	r3, [pc, #12]	; (8013a68 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8013a5a:	6818      	ldr	r0, [r3, #0]
 8013a5c:	b110      	cbz	r0, 8013a64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8013a5e:	6803      	ldr	r3, [r0, #0]
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	4718      	bx	r3
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	200200c8 	.word	0x200200c8

08013a6c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8013a6c:	4770      	bx	lr
	...

08013a70 <_ZN8touchgfx11Application4drawEv>:
 8013a70:	b507      	push	{r0, r1, r2, lr}
 8013a72:	2100      	movs	r1, #0
 8013a74:	4b08      	ldr	r3, [pc, #32]	; (8013a98 <_ZN8touchgfx11Application4drawEv+0x28>)
 8013a76:	9100      	str	r1, [sp, #0]
 8013a78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013a7c:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013a7e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a86:	4669      	mov	r1, sp
 8013a88:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013a8c:	6803      	ldr	r3, [r0, #0]
 8013a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a90:	4798      	blx	r3
 8013a92:	b003      	add	sp, #12
 8013a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a98:	20020080 	.word	0x20020080
 8013a9c:	20020082 	.word	0x20020082

08013aa0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013aa0:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013aa2:	6818      	ldr	r0, [r3, #0]
 8013aa4:	b110      	cbz	r0, 8013aac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013aa6:	6803      	ldr	r3, [r0, #0]
 8013aa8:	69db      	ldr	r3, [r3, #28]
 8013aaa:	4718      	bx	r3
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	200200c8 	.word	0x200200c8

08013ab4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013ab4:	4b03      	ldr	r3, [pc, #12]	; (8013ac4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013ab6:	6818      	ldr	r0, [r3, #0]
 8013ab8:	b110      	cbz	r0, 8013ac0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013aba:	6803      	ldr	r3, [r0, #0]
 8013abc:	6a1b      	ldr	r3, [r3, #32]
 8013abe:	4718      	bx	r3
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	200200c8 	.word	0x200200c8

08013ac8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8013ace:	4770      	bx	lr

08013ad0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013ad0:	4b03      	ldr	r3, [pc, #12]	; (8013ae0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013ad2:	6818      	ldr	r0, [r3, #0]
 8013ad4:	b110      	cbz	r0, 8013adc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013ad6:	6803      	ldr	r3, [r0, #0]
 8013ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ada:	4718      	bx	r3
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	200200c8 	.word	0x200200c8

08013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013ae4:	b510      	push	{r4, lr}
 8013ae6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013aea:	888a      	ldrh	r2, [r1, #4]
 8013aec:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013af0:	4422      	add	r2, r4
 8013af2:	b212      	sxth	r2, r2
 8013af4:	4293      	cmp	r3, r2
 8013af6:	da15      	bge.n	8013b24 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013af8:	8882      	ldrh	r2, [r0, #4]
 8013afa:	4413      	add	r3, r2
 8013afc:	b21b      	sxth	r3, r3
 8013afe:	429c      	cmp	r4, r3
 8013b00:	da10      	bge.n	8013b24 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013b02:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013b06:	88c9      	ldrh	r1, [r1, #6]
 8013b08:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013b0c:	4419      	add	r1, r3
 8013b0e:	b209      	sxth	r1, r1
 8013b10:	428a      	cmp	r2, r1
 8013b12:	da07      	bge.n	8013b24 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013b14:	88c0      	ldrh	r0, [r0, #6]
 8013b16:	4410      	add	r0, r2
 8013b18:	b200      	sxth	r0, r0
 8013b1a:	4283      	cmp	r3, r0
 8013b1c:	bfac      	ite	ge
 8013b1e:	2000      	movge	r0, #0
 8013b20:	2001      	movlt	r0, #1
 8013b22:	bd10      	pop	{r4, pc}
 8013b24:	2000      	movs	r0, #0
 8013b26:	e7fc      	b.n	8013b22 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013b28 <_ZN8touchgfx4Rect10restrictToEss>:
 8013b28:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013b2c:	b510      	push	{r4, lr}
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	da04      	bge.n	8013b3c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013b32:	8884      	ldrh	r4, [r0, #4]
 8013b34:	4423      	add	r3, r4
 8013b36:	8083      	strh	r3, [r0, #4]
 8013b38:	2300      	movs	r3, #0
 8013b3a:	8003      	strh	r3, [r0, #0]
 8013b3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013b40:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013b44:	1b09      	subs	r1, r1, r4
 8013b46:	428b      	cmp	r3, r1
 8013b48:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013b4c:	bfc8      	it	gt
 8013b4e:	8081      	strhgt	r1, [r0, #4]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	da04      	bge.n	8013b5e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013b54:	88c1      	ldrh	r1, [r0, #6]
 8013b56:	440b      	add	r3, r1
 8013b58:	80c3      	strh	r3, [r0, #6]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	8043      	strh	r3, [r0, #2]
 8013b5e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013b62:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013b66:	1a52      	subs	r2, r2, r1
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	bfc8      	it	gt
 8013b6c:	80c2      	strhgt	r2, [r0, #6]
 8013b6e:	bd10      	pop	{r4, pc}

08013b70 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013b70:	b510      	push	{r4, lr}
 8013b72:	460c      	mov	r4, r1
 8013b74:	4b0f      	ldr	r3, [pc, #60]	; (8013bb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8013b76:	4620      	mov	r0, r4
 8013b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013b7c:	4b0e      	ldr	r3, [pc, #56]	; (8013bb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013b7e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013b82:	f7ff ffd1 	bl	8013b28 <_ZN8touchgfx4Rect10restrictToEss>
 8013b86:	4b0d      	ldr	r3, [pc, #52]	; (8013bbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8013b88:	6818      	ldr	r0, [r3, #0]
 8013b8a:	b190      	cbz	r0, 8013bb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013b8c:	6803      	ldr	r3, [r0, #0]
 8013b8e:	4621      	mov	r1, r4
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	4798      	blx	r3
 8013b94:	4b0a      	ldr	r3, [pc, #40]	; (8013bc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8013b96:	6818      	ldr	r0, [r3, #0]
 8013b98:	b118      	cbz	r0, 8013ba2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8013b9a:	6803      	ldr	r3, [r0, #0]
 8013b9c:	4621      	mov	r1, r4
 8013b9e:	689b      	ldr	r3, [r3, #8]
 8013ba0:	4798      	blx	r3
 8013ba2:	4b08      	ldr	r3, [pc, #32]	; (8013bc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013baa:	6818      	ldr	r0, [r3, #0]
 8013bac:	6803      	ldr	r3, [r0, #0]
 8013bae:	69db      	ldr	r3, [r3, #28]
 8013bb0:	4718      	bx	r3
 8013bb2:	bd10      	pop	{r4, pc}
 8013bb4:	20020082 	.word	0x20020082
 8013bb8:	20020080 	.word	0x20020080
 8013bbc:	200200c8 	.word	0x200200c8
 8013bc0:	200200c4 	.word	0x200200c4
 8013bc4:	2002008c 	.word	0x2002008c

08013bc8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8013bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bca:	4606      	mov	r6, r0
 8013bcc:	4608      	mov	r0, r1
 8013bce:	460f      	mov	r7, r1
 8013bd0:	f7fd f92d 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013bd4:	b9e8      	cbnz	r0, 8013c12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013bd6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8013bda:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013bde:	42a5      	cmp	r5, r4
 8013be0:	db17      	blt.n	8013c12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013be2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013be6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	db11      	blt.n	8013c12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013bee:	88b9      	ldrh	r1, [r7, #4]
 8013bf0:	440d      	add	r5, r1
 8013bf2:	88b1      	ldrh	r1, [r6, #4]
 8013bf4:	b22d      	sxth	r5, r5
 8013bf6:	440c      	add	r4, r1
 8013bf8:	b224      	sxth	r4, r4
 8013bfa:	42a5      	cmp	r5, r4
 8013bfc:	dc09      	bgt.n	8013c12 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013bfe:	88f8      	ldrh	r0, [r7, #6]
 8013c00:	4410      	add	r0, r2
 8013c02:	88f2      	ldrh	r2, [r6, #6]
 8013c04:	b200      	sxth	r0, r0
 8013c06:	4413      	add	r3, r2
 8013c08:	b21b      	sxth	r3, r3
 8013c0a:	4298      	cmp	r0, r3
 8013c0c:	bfcc      	ite	gt
 8013c0e:	2000      	movgt	r0, #0
 8013c10:	2001      	movle	r0, #1
 8013c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c14 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c16:	4604      	mov	r4, r0
 8013c18:	4608      	mov	r0, r1
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	f7fd f907 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c20:	b978      	cbnz	r0, 8013c42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7fd f903 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c28:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013c2c:	b150      	cbz	r0, 8013c44 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013c2e:	8026      	strh	r6, [r4, #0]
 8013c30:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013c34:	8063      	strh	r3, [r4, #2]
 8013c36:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013c3a:	80a3      	strh	r3, [r4, #4]
 8013c3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013c40:	80e3      	strh	r3, [r4, #6]
 8013c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c44:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013c48:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013c4c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013c50:	42b1      	cmp	r1, r6
 8013c52:	460f      	mov	r7, r1
 8013c54:	bfa8      	it	ge
 8013c56:	4637      	movge	r7, r6
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	bfa8      	it	ge
 8013c5e:	4610      	movge	r0, r2
 8013c60:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013c64:	88ed      	ldrh	r5, [r5, #6]
 8013c66:	4466      	add	r6, ip
 8013c68:	442a      	add	r2, r5
 8013c6a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013c6e:	88e5      	ldrh	r5, [r4, #6]
 8013c70:	4461      	add	r1, ip
 8013c72:	442b      	add	r3, r5
 8013c74:	b236      	sxth	r6, r6
 8013c76:	b209      	sxth	r1, r1
 8013c78:	b212      	sxth	r2, r2
 8013c7a:	b21b      	sxth	r3, r3
 8013c7c:	428e      	cmp	r6, r1
 8013c7e:	bfac      	ite	ge
 8013c80:	ebc7 0106 	rsbge	r1, r7, r6
 8013c84:	ebc7 0101 	rsblt	r1, r7, r1
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	bfac      	ite	ge
 8013c8c:	ebc0 0202 	rsbge	r2, r0, r2
 8013c90:	ebc0 0203 	rsblt	r2, r0, r3
 8013c94:	8027      	strh	r7, [r4, #0]
 8013c96:	8060      	strh	r0, [r4, #2]
 8013c98:	80a1      	strh	r1, [r4, #4]
 8013c9a:	80e2      	strh	r2, [r4, #6]
 8013c9c:	e7d1      	b.n	8013c42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013ca0 <_ZN8touchgfx11Application11getInstanceEv>:
 8013ca0:	4b01      	ldr	r3, [pc, #4]	; (8013ca8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013ca2:	6818      	ldr	r0, [r3, #0]
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	200200d8 	.word	0x200200d8

08013cac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013cac:	2300      	movs	r3, #0
 8013cae:	b510      	push	{r4, lr}
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8013cb6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8013cba:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013cbe:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013cc2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d90e      	bls.n	8013ce8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8013cca:	18e2      	adds	r2, r4, r3
 8013ccc:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8013cd0:	b122      	cbz	r2, 8013cdc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8013cd2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013cd6:	6803      	ldr	r3, [r0, #0]
 8013cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cda:	4798      	blx	r3
 8013cdc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8013ce6:	e7ea      	b.n	8013cbe <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8013ce8:	bd10      	pop	{r4, pc}

08013cea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8013cea:	2200      	movs	r2, #0
 8013cec:	b530      	push	{r4, r5, lr}
 8013cee:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 8013cf2:	b293      	uxth	r3, r2
 8013cf4:	429d      	cmp	r5, r3
 8013cf6:	d90e      	bls.n	8013d16 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8013cf8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8013cfc:	428b      	cmp	r3, r1
 8013cfe:	d10b      	bne.n	8013d18 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8013d00:	1884      	adds	r4, r0, r2
 8013d02:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8013d06:	b13b      	cbz	r3, 8013d18 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8013d08:	3b01      	subs	r3, #1
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8013d10:	b90b      	cbnz	r3, 8013d16 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8013d12:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013d16:	bd30      	pop	{r4, r5, pc}
 8013d18:	3201      	adds	r2, #1
 8013d1a:	e7ea      	b.n	8013cf2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08013d1c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8013d22:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013d26:	30a4      	adds	r0, #164	; 0xa4
 8013d28:	f802 3b01 	strb.w	r3, [r2], #1
 8013d2c:	4282      	cmp	r2, r0
 8013d2e:	d1fb      	bne.n	8013d28 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8013d30:	4770      	bx	lr
	...

08013d34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	4c0b      	ldr	r4, [pc, #44]	; (8013d64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8013d38:	4605      	mov	r5, r0
 8013d3a:	6820      	ldr	r0, [r4, #0]
 8013d3c:	460e      	mov	r6, r1
 8013d3e:	b110      	cbz	r0, 8013d46 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8013d40:	6803      	ldr	r3, [r0, #0]
 8013d42:	695b      	ldr	r3, [r3, #20]
 8013d44:	4798      	blx	r3
 8013d46:	1d28      	adds	r0, r5, #4
 8013d48:	f7ff ffe8 	bl	8013d1c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013d4c:	6026      	str	r6, [r4, #0]
 8013d4e:	6833      	ldr	r3, [r6, #0]
 8013d50:	4630      	mov	r0, r6
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	4798      	blx	r3
 8013d56:	682b      	ldr	r3, [r5, #0]
 8013d58:	4628      	mov	r0, r5
 8013d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d60:	4718      	bx	r3
 8013d62:	bf00      	nop
 8013d64:	200200c8 	.word	0x200200c8

08013d68 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8013d68:	2300      	movs	r3, #0
 8013d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	461c      	mov	r4, r3
 8013d70:	461d      	mov	r5, r3
 8013d72:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8013d76:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8013d7a:	459c      	cmp	ip, r3
 8013d7c:	dd1a      	ble.n	8013db4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8013d7e:	18c6      	adds	r6, r0, r3
 8013d80:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8013d84:	b16e      	cbz	r6, 8013da2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d008      	beq.n	8013d9c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8013d8a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8013d8e:	fa1f fe82 	uxth.w	lr, r2
 8013d92:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8013d96:	1887      	adds	r7, r0, r2
 8013d98:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8013d9c:	3201      	adds	r2, #1
 8013d9e:	3301      	adds	r3, #1
 8013da0:	e7eb      	b.n	8013d7a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8013da2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8013da6:	4299      	cmp	r1, r3
 8013da8:	bfa8      	it	ge
 8013daa:	3501      	addge	r5, #1
 8013dac:	429e      	cmp	r6, r3
 8013dae:	bfc8      	it	gt
 8013db0:	3401      	addgt	r4, #1
 8013db2:	e7f4      	b.n	8013d9e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8013db4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8013db8:	1b49      	subs	r1, r1, r5
 8013dba:	1b1b      	subs	r3, r3, r4
 8013dbc:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8013dc0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013dc4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	dd03      	ble.n	8013dd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8013dcc:	3b01      	subs	r3, #1
 8013dce:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013dd2:	e7f7      	b.n	8013dc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013dd8 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013dd8:	b570      	push	{r4, r5, r6, lr}
 8013dda:	4d16      	ldr	r5, [pc, #88]	; (8013e34 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8013ddc:	4604      	mov	r4, r0
 8013dde:	6828      	ldr	r0, [r5, #0]
 8013de0:	b140      	cbz	r0, 8013df4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013de2:	7a03      	ldrb	r3, [r0, #8]
 8013de4:	b933      	cbnz	r3, 8013df4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013de6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8013dea:	6803      	ldr	r3, [r0, #0]
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013df2:	4718      	bx	r3
 8013df4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8013df8:	4e0f      	ldr	r6, [pc, #60]	; (8013e38 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8013dfa:	b973      	cbnz	r3, 8013e1a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013dfc:	b168      	cbz	r0, 8013e1a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013dfe:	7a03      	ldrb	r3, [r0, #8]
 8013e00:	b15b      	cbz	r3, 8013e1a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013e02:	6830      	ldr	r0, [r6, #0]
 8013e04:	b110      	cbz	r0, 8013e0c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013e06:	6803      	ldr	r3, [r0, #0]
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	4798      	blx	r3
 8013e0c:	6828      	ldr	r0, [r5, #0]
 8013e0e:	6803      	ldr	r3, [r0, #0]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	4798      	blx	r3
 8013e14:	2301      	movs	r3, #1
 8013e16:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8013e1a:	3404      	adds	r4, #4
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f7ff ff45 	bl	8013cac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8013e22:	4620      	mov	r0, r4
 8013e24:	f7ff ffa0 	bl	8013d68 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013e28:	6830      	ldr	r0, [r6, #0]
 8013e2a:	b110      	cbz	r0, 8013e32 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8013e2c:	6803      	ldr	r3, [r0, #0]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e30:	e7dd      	b.n	8013dee <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8013e32:	bd70      	pop	{r4, r5, r6, pc}
 8013e34:	200200cc 	.word	0x200200cc
 8013e38:	200200c8 	.word	0x200200c8

08013e3c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8013e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3e:	2300      	movs	r3, #0
 8013e40:	4604      	mov	r4, r0
 8013e42:	460d      	mov	r5, r1
 8013e44:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 8013e48:	4618      	mov	r0, r3
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	4291      	cmp	r1, r2
 8013e4e:	d911      	bls.n	8013e74 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8013e50:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8013e54:	18e6      	adds	r6, r4, r3
 8013e56:	42af      	cmp	r7, r5
 8013e58:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 8013e5c:	d105      	bne.n	8013e6a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8013e5e:	2aff      	cmp	r2, #255	; 0xff
 8013e60:	d002      	beq.n	8013e68 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8013e62:	3201      	adds	r2, #1
 8013e64:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 8013e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e6a:	2a00      	cmp	r2, #0
 8013e6c:	bf08      	it	eq
 8013e6e:	2001      	moveq	r0, #1
 8013e70:	3301      	adds	r3, #1
 8013e72:	e7ea      	b.n	8013e4a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8013e74:	b120      	cbz	r0, 8013e80 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8013e76:	2920      	cmp	r1, #32
 8013e78:	d102      	bne.n	8013e80 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	f7ff ff74 	bl	8013d68 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013e80:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8013e84:	2b1f      	cmp	r3, #31
 8013e86:	d8ef      	bhi.n	8013e68 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8013e88:	2101      	movs	r1, #1
 8013e8a:	18e2      	adds	r2, r4, r3
 8013e8c:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 8013e90:	185a      	adds	r2, r3, r1
 8013e92:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8013e96:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013e9a:	e7e5      	b.n	8013e68 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08013e9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8013ea4:	801a      	strh	r2, [r3, #0]
 8013ea6:	805a      	strh	r2, [r3, #2]
 8013ea8:	809a      	strh	r2, [r3, #4]
 8013eaa:	80da      	strh	r2, [r3, #6]
 8013eac:	3308      	adds	r3, #8
 8013eae:	428b      	cmp	r3, r1
 8013eb0:	d1f8      	bne.n	8013ea4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8013eb2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013eb6:	4770      	bx	lr

08013eb8 <_ZN8touchgfx11ApplicationC1Ev>:
 8013eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eba:	4606      	mov	r6, r0
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	2500      	movs	r5, #0
 8013ec0:	4b1b      	ldr	r3, [pc, #108]	; (8013f30 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013ec2:	22a8      	movs	r2, #168	; 0xa8
 8013ec4:	f846 3b04 	str.w	r3, [r6], #4
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4630      	mov	r0, r6
 8013ecc:	f00f f9db 	bl	8023286 <memset>
 8013ed0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8013ed4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013ed8:	f7ff ffe0 	bl	8013e9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013edc:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8013ee0:	f7ff ffdc 	bl	8013e9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013ee4:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8013ee8:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8013eec:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8013ef0:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8013ef4:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8013ef8:	490e      	ldr	r1, [pc, #56]	; (8013f34 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013efa:	480f      	ldr	r0, [pc, #60]	; (8013f38 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013efc:	f00e f9a6 	bl	802224c <CRC_Lock>
 8013f00:	4f0e      	ldr	r7, [pc, #56]	; (8013f3c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8013f02:	4b0f      	ldr	r3, [pc, #60]	; (8013f40 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8013f04:	b158      	cbz	r0, 8013f1e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8013f06:	801d      	strh	r5, [r3, #0]
 8013f08:	2300      	movs	r3, #0
 8013f0a:	4a0e      	ldr	r2, [pc, #56]	; (8013f44 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	6013      	str	r3, [r2, #0]
 8013f10:	4a0d      	ldr	r2, [pc, #52]	; (8013f48 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8013f12:	603b      	str	r3, [r7, #0]
 8013f14:	6013      	str	r3, [r2, #0]
 8013f16:	f7ff ff01 	bl	8013d1c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f22:	2002      	movs	r0, #2
 8013f24:	801a      	strh	r2, [r3, #0]
 8013f26:	6038      	str	r0, [r7, #0]
 8013f28:	f001 fa42 	bl	80153b0 <_ZN8touchgfx6Screen4drawEv>
 8013f2c:	e7ec      	b.n	8013f08 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8013f2e:	bf00      	nop
 8013f30:	08025a5c 	.word	0x08025a5c
 8013f34:	b5e8b5cd 	.word	0xb5e8b5cd
 8013f38:	f407a5c2 	.word	0xf407a5c2
 8013f3c:	200200c8 	.word	0x200200c8
 8013f40:	2000001c 	.word	0x2000001c
 8013f44:	200200d8 	.word	0x200200d8
 8013f48:	200200cc 	.word	0x200200cc

08013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013f4c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8013f50:	b510      	push	{r4, lr}
 8013f52:	3b01      	subs	r3, #1
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	428b      	cmp	r3, r1
 8013f58:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8013f5c:	d908      	bls.n	8013f70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8013f5e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013f68:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013f6c:	685a      	ldr	r2, [r3, #4]
 8013f6e:	6062      	str	r2, [r4, #4]
 8013f70:	bd10      	pop	{r4, pc}
	...

08013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f78:	4b8f      	ldr	r3, [pc, #572]	; (80141b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8013f7a:	b08f      	sub	sp, #60	; 0x3c
 8013f7c:	ac0a      	add	r4, sp, #40	; 0x28
 8013f7e:	e884 0006 	stmia.w	r4, {r1, r2}
 8013f82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f86:	4b8d      	ldr	r3, [pc, #564]	; (80141bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8013f88:	4683      	mov	fp, r0
 8013f8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f7ff fdca 	bl	8013b28 <_ZN8touchgfx4Rect10restrictToEss>
 8013f94:	4620      	mov	r0, r4
 8013f96:	f7fc ff4a 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d16a      	bne.n	8014074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013f9e:	9403      	str	r4, [sp, #12]
 8013fa0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8013fa4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013fa8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8013fac:	35a4      	adds	r5, #164	; 0xa4
 8013fae:	9301      	str	r3, [sp, #4]
 8013fb0:	b15c      	cbz	r4, 8013fca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	9803      	ldr	r0, [sp, #12]
 8013fb6:	f7ff fe07 	bl	8013bc8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013fba:	3c01      	subs	r4, #1
 8013fbc:	b118      	cbz	r0, 8013fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8013fbe:	b2a1      	uxth	r1, r4
 8013fc0:	9801      	ldr	r0, [sp, #4]
 8013fc2:	f7ff ffc3 	bl	8013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013fc6:	3d08      	subs	r5, #8
 8013fc8:	e7f2      	b.n	8013fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8013fca:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8013fce:	f108 33ff 	add.w	r3, r8, #4294967295
 8013fd2:	9302      	str	r3, [sp, #8]
 8013fd4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013fd8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013fdc:	f8cd 8010 	str.w	r8, [sp, #16]
 8013fe0:	9306      	str	r3, [sp, #24]
 8013fe2:	445c      	add	r4, fp
 8013fe4:	2500      	movs	r5, #0
 8013fe6:	4626      	mov	r6, r4
 8013fe8:	462f      	mov	r7, r5
 8013fea:	f8cd 8014 	str.w	r8, [sp, #20]
 8013fee:	9b05      	ldr	r3, [sp, #20]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d073      	beq.n	80140dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013ff4:	9903      	ldr	r1, [sp, #12]
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f7ff fd74 	bl	8013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ffc:	b350      	cbz	r0, 8014054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013ffe:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8014002:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014006:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801400a:	45e6      	cmp	lr, ip
 801400c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014010:	db33      	blt.n	801407a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014012:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8014016:	88b3      	ldrh	r3, [r6, #4]
 8014018:	4472      	add	r2, lr
 801401a:	4463      	add	r3, ip
 801401c:	b212      	sxth	r2, r2
 801401e:	b21b      	sxth	r3, r3
 8014020:	429a      	cmp	r2, r3
 8014022:	dc2a      	bgt.n	801407a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014024:	88f3      	ldrh	r3, [r6, #6]
 8014026:	fa1f f289 	uxth.w	r2, r9
 801402a:	4413      	add	r3, r2
 801402c:	b29b      	uxth	r3, r3
 801402e:	45ca      	cmp	sl, r9
 8014030:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8014034:	fa0f fe83 	sxth.w	lr, r3
 8014038:	fa1f fc8a 	uxth.w	ip, sl
 801403c:	db0f      	blt.n	801405e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801403e:	eba3 030c 	sub.w	r3, r3, ip
 8014042:	1ac9      	subs	r1, r1, r3
 8014044:	b209      	sxth	r1, r1
 8014046:	2900      	cmp	r1, #0
 8014048:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801404c:	dd12      	ble.n	8014074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801404e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8014052:	4605      	mov	r5, r0
 8014054:	9b05      	ldr	r3, [sp, #20]
 8014056:	3e08      	subs	r6, #8
 8014058:	3b01      	subs	r3, #1
 801405a:	9305      	str	r3, [sp, #20]
 801405c:	e7c7      	b.n	8013fee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801405e:	4461      	add	r1, ip
 8014060:	b209      	sxth	r1, r1
 8014062:	4571      	cmp	r1, lr
 8014064:	dc38      	bgt.n	80140d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014066:	eba2 020c 	sub.w	r2, r2, ip
 801406a:	b212      	sxth	r2, r2
 801406c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8014070:	2a00      	cmp	r2, #0
 8014072:	dcee      	bgt.n	8014052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014074:	b00f      	add	sp, #60	; 0x3c
 8014076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801407a:	45ca      	cmp	sl, r9
 801407c:	db2c      	blt.n	80140d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801407e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8014082:	449a      	add	sl, r3
 8014084:	88f3      	ldrh	r3, [r6, #6]
 8014086:	fa0f fa8a 	sxth.w	sl, sl
 801408a:	4499      	add	r9, r3
 801408c:	fa0f f989 	sxth.w	r9, r9
 8014090:	45ca      	cmp	sl, r9
 8014092:	dc21      	bgt.n	80140d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014094:	88b3      	ldrh	r3, [r6, #4]
 8014096:	fa1f f28c 	uxth.w	r2, ip
 801409a:	4413      	add	r3, r2
 801409c:	b29b      	uxth	r3, r3
 801409e:	45e6      	cmp	lr, ip
 80140a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80140a4:	fa1f f98e 	uxth.w	r9, lr
 80140a8:	fa0f fa83 	sxth.w	sl, r3
 80140ac:	db0a      	blt.n	80140c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80140ae:	eba3 0309 	sub.w	r3, r3, r9
 80140b2:	1ac9      	subs	r1, r1, r3
 80140b4:	b209      	sxth	r1, r1
 80140b6:	2900      	cmp	r1, #0
 80140b8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80140bc:	ddda      	ble.n	8014074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80140be:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80140c2:	e7c6      	b.n	8014052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80140c4:	4449      	add	r1, r9
 80140c6:	b209      	sxth	r1, r1
 80140c8:	4551      	cmp	r1, sl
 80140ca:	dc05      	bgt.n	80140d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80140cc:	eba2 0209 	sub.w	r2, r2, r9
 80140d0:	b212      	sxth	r2, r2
 80140d2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80140d6:	e7cb      	b.n	8014070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80140d8:	4607      	mov	r7, r0
 80140da:	e7bb      	b.n	8014054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80140dc:	2d00      	cmp	r5, #0
 80140de:	d181      	bne.n	8013fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80140e0:	2f00      	cmp	r7, #0
 80140e2:	f000 81de 	beq.w	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80140e6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80140ea:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80140ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80140f2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80140f6:	b2b9      	uxth	r1, r7
 80140f8:	b2b3      	uxth	r3, r6
 80140fa:	441a      	add	r2, r3
 80140fc:	448a      	add	sl, r1
 80140fe:	b292      	uxth	r2, r2
 8014100:	fa1f fa8a 	uxth.w	sl, sl
 8014104:	fa0f f882 	sxth.w	r8, r2
 8014108:	9105      	str	r1, [sp, #20]
 801410a:	fa0f f98a 	sxth.w	r9, sl
 801410e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014112:	9b04      	ldr	r3, [sp, #16]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d053      	beq.n	80141c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8014118:	9903      	ldr	r1, [sp, #12]
 801411a:	4620      	mov	r0, r4
 801411c:	f7ff fce2 	bl	8013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014120:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014124:	b1c0      	cbz	r0, 8014158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8014126:	f9b4 e000 	ldrsh.w	lr, [r4]
 801412a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801412e:	4576      	cmp	r6, lr
 8014130:	dc23      	bgt.n	801417a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014132:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014136:	44f4      	add	ip, lr
 8014138:	fa0f fc8c 	sxth.w	ip, ip
 801413c:	45e0      	cmp	r8, ip
 801413e:	db1c      	blt.n	801417a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014140:	428f      	cmp	r7, r1
 8014142:	fa1f fc81 	uxth.w	ip, r1
 8014146:	88e1      	ldrh	r1, [r4, #6]
 8014148:	dc0d      	bgt.n	8014166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801414a:	ebaa 0c0c 	sub.w	ip, sl, ip
 801414e:	eba1 010c 	sub.w	r1, r1, ip
 8014152:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014156:	80e1      	strh	r1, [r4, #6]
 8014158:	4628      	mov	r0, r5
 801415a:	9904      	ldr	r1, [sp, #16]
 801415c:	3c08      	subs	r4, #8
 801415e:	3901      	subs	r1, #1
 8014160:	9104      	str	r1, [sp, #16]
 8014162:	4605      	mov	r5, r0
 8014164:	e7d3      	b.n	801410e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8014166:	4461      	add	r1, ip
 8014168:	b209      	sxth	r1, r1
 801416a:	4549      	cmp	r1, r9
 801416c:	dcf5      	bgt.n	801415a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801416e:	9905      	ldr	r1, [sp, #20]
 8014170:	eba1 0c0c 	sub.w	ip, r1, ip
 8014174:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014178:	e7ee      	b.n	8014158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801417a:	428f      	cmp	r7, r1
 801417c:	dced      	bgt.n	801415a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801417e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014182:	4461      	add	r1, ip
 8014184:	b209      	sxth	r1, r1
 8014186:	4589      	cmp	r9, r1
 8014188:	dbe7      	blt.n	801415a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801418a:	4576      	cmp	r6, lr
 801418c:	fa1f fc8e 	uxth.w	ip, lr
 8014190:	88a1      	ldrh	r1, [r4, #4]
 8014192:	dc07      	bgt.n	80141a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8014194:	eba2 0c0c 	sub.w	ip, r2, ip
 8014198:	eba1 010c 	sub.w	r1, r1, ip
 801419c:	f8a4 8000 	strh.w	r8, [r4]
 80141a0:	80a1      	strh	r1, [r4, #4]
 80141a2:	e7d9      	b.n	8014158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80141a4:	4461      	add	r1, ip
 80141a6:	b209      	sxth	r1, r1
 80141a8:	4588      	cmp	r8, r1
 80141aa:	dbd6      	blt.n	801415a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80141ac:	eba3 0c0c 	sub.w	ip, r3, ip
 80141b0:	f8a4 c004 	strh.w	ip, [r4, #4]
 80141b4:	e7d0      	b.n	8014158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80141b6:	bf00      	nop
 80141b8:	20020082 	.word	0x20020082
 80141bc:	20020080 	.word	0x20020080
 80141c0:	2d00      	cmp	r5, #0
 80141c2:	f000 816e 	beq.w	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80141c6:	9b06      	ldr	r3, [sp, #24]
 80141c8:	445b      	add	r3, fp
 80141ca:	461c      	mov	r4, r3
 80141cc:	9b02      	ldr	r3, [sp, #8]
 80141ce:	3301      	adds	r3, #1
 80141d0:	f000 8167 	beq.w	80144a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80141d4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80141d8:	4629      	mov	r1, r5
 80141da:	9803      	ldr	r0, [sp, #12]
 80141dc:	f7ff fcf4 	bl	8013bc8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80141e0:	b120      	cbz	r0, 80141ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80141e2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80141e6:	9801      	ldr	r0, [sp, #4]
 80141e8:	f7ff feb0 	bl	8013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80141ec:	9903      	ldr	r1, [sp, #12]
 80141ee:	4628      	mov	r0, r5
 80141f0:	f7ff fc78 	bl	8013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	f000 809c 	beq.w	8014332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80141fa:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80141fe:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8014202:	fa1f f189 	uxth.w	r1, r9
 8014206:	eb01 0c03 	add.w	ip, r1, r3
 801420a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801420e:	fa1f fa8c 	uxth.w	sl, ip
 8014212:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8014216:	9309      	str	r3, [sp, #36]	; 0x24
 8014218:	b283      	uxth	r3, r0
 801421a:	eb03 050c 	add.w	r5, r3, ip
 801421e:	b2ad      	uxth	r5, r5
 8014220:	9505      	str	r5, [sp, #20]
 8014222:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014226:	4548      	cmp	r0, r9
 8014228:	9504      	str	r5, [sp, #16]
 801422a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801422e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8014232:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8014236:	f340 8099 	ble.w	801436c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801423a:	1a5b      	subs	r3, r3, r1
 801423c:	b29b      	uxth	r3, r3
 801423e:	4596      	cmp	lr, r2
 8014240:	fa0f f08a 	sxth.w	r0, sl
 8014244:	b21e      	sxth	r6, r3
 8014246:	dd2e      	ble.n	80142a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8014248:	9f02      	ldr	r7, [sp, #8]
 801424a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801424e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014252:	9f04      	ldr	r7, [sp, #16]
 8014254:	fa1f fe8e 	uxth.w	lr, lr
 8014258:	1a3f      	subs	r7, r7, r0
 801425a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801425e:	b292      	uxth	r2, r2
 8014260:	ebae 0102 	sub.w	r1, lr, r2
 8014264:	44a6      	add	lr, r4
 8014266:	4402      	add	r2, r0
 8014268:	b289      	uxth	r1, r1
 801426a:	fa0f fe8e 	sxth.w	lr, lr
 801426e:	b212      	sxth	r2, r2
 8014270:	b20d      	sxth	r5, r1
 8014272:	ebae 0202 	sub.w	r2, lr, r2
 8014276:	436f      	muls	r7, r5
 8014278:	4372      	muls	r2, r6
 801427a:	4297      	cmp	r7, r2
 801427c:	db09      	blt.n	8014292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801427e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8014282:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8014286:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801428a:	449c      	add	ip, r3
 801428c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8014290:	e686      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014292:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8014296:	4421      	add	r1, r4
 8014298:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801429c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80142a0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80142a4:	e67c      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80142a6:	9f04      	ldr	r7, [sp, #16]
 80142a8:	42b8      	cmp	r0, r7
 80142aa:	da27      	bge.n	80142fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80142ac:	9902      	ldr	r1, [sp, #8]
 80142ae:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80142b2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80142b6:	eb05 010e 	add.w	r1, r5, lr
 80142ba:	fa1f f881 	uxth.w	r8, r1
 80142be:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80142c2:	fa0f f988 	sxth.w	r9, r8
 80142c6:	4411      	add	r1, r2
 80142c8:	eba1 0108 	sub.w	r1, r1, r8
 80142cc:	b289      	uxth	r1, r1
 80142ce:	fa0f f881 	sxth.w	r8, r1
 80142d2:	eba2 020e 	sub.w	r2, r2, lr
 80142d6:	1a3f      	subs	r7, r7, r0
 80142d8:	4372      	muls	r2, r6
 80142da:	fb08 f707 	mul.w	r7, r8, r7
 80142de:	42ba      	cmp	r2, r7
 80142e0:	dc06      	bgt.n	80142f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80142e2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80142e6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80142ea:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80142ee:	e7ca      	b.n	8014286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80142f0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80142f4:	4429      	add	r1, r5
 80142f6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80142fa:	e651      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80142fc:	9805      	ldr	r0, [sp, #20]
 80142fe:	2d06      	cmp	r5, #6
 8014300:	ebaa 0000 	sub.w	r0, sl, r0
 8014304:	b280      	uxth	r0, r0
 8014306:	fa0f fe80 	sxth.w	lr, r0
 801430a:	d817      	bhi.n	801433c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801430c:	9b04      	ldr	r3, [sp, #16]
 801430e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8014312:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8014316:	1c6b      	adds	r3, r5, #1
 8014318:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801431c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8014320:	9b01      	ldr	r3, [sp, #4]
 8014322:	9801      	ldr	r0, [sp, #4]
 8014324:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014328:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801432c:	805a      	strh	r2, [r3, #2]
 801432e:	809e      	strh	r6, [r3, #4]
 8014330:	80d9      	strh	r1, [r3, #6]
 8014332:	9b02      	ldr	r3, [sp, #8]
 8014334:	3c08      	subs	r4, #8
 8014336:	3b01      	subs	r3, #1
 8014338:	9302      	str	r3, [sp, #8]
 801433a:	e747      	b.n	80141cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801433c:	9a02      	ldr	r2, [sp, #8]
 801433e:	45b6      	cmp	lr, r6
 8014340:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014344:	db0d      	blt.n	8014362 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8014346:	449c      	add	ip, r3
 8014348:	fa1f fc8c 	uxth.w	ip, ip
 801434c:	445a      	add	r2, fp
 801434e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8014352:	448c      	add	ip, r1
 8014354:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8014358:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801435c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8014360:	e61e      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014362:	445a      	add	r2, fp
 8014364:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8014368:	4484      	add	ip, r0
 801436a:	e78f      	b.n	801428c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801436c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8014370:	fa1f f18e 	uxth.w	r1, lr
 8014374:	eb01 0806 	add.w	r8, r1, r6
 8014378:	b293      	uxth	r3, r2
 801437a:	fa1f f888 	uxth.w	r8, r8
 801437e:	9306      	str	r3, [sp, #24]
 8014380:	fa0f f388 	sxth.w	r3, r8
 8014384:	9307      	str	r3, [sp, #28]
 8014386:	9f06      	ldr	r7, [sp, #24]
 8014388:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801438c:	4596      	cmp	lr, r2
 801438e:	443b      	add	r3, r7
 8014390:	b29b      	uxth	r3, r3
 8014392:	9308      	str	r3, [sp, #32]
 8014394:	da24      	bge.n	80143e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8014396:	9905      	ldr	r1, [sp, #20]
 8014398:	eba3 0308 	sub.w	r3, r3, r8
 801439c:	ebaa 0401 	sub.w	r4, sl, r1
 80143a0:	b2a4      	uxth	r4, r4
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	b225      	sxth	r5, r4
 80143a6:	b219      	sxth	r1, r3
 80143a8:	eba2 020e 	sub.w	r2, r2, lr
 80143ac:	eba9 0000 	sub.w	r0, r9, r0
 80143b0:	436a      	muls	r2, r5
 80143b2:	4348      	muls	r0, r1
 80143b4:	4282      	cmp	r2, r0
 80143b6:	9a02      	ldr	r2, [sp, #8]
 80143b8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80143bc:	445a      	add	r2, fp
 80143be:	dc06      	bgt.n	80143ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80143c0:	9b07      	ldr	r3, [sp, #28]
 80143c2:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80143c6:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80143ca:	44a4      	add	ip, r4
 80143cc:	e75e      	b.n	801428c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80143ce:	9904      	ldr	r1, [sp, #16]
 80143d0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80143d4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80143d8:	4433      	add	r3, r6
 80143da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80143de:	e5df      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80143e0:	9f06      	ldr	r7, [sp, #24]
 80143e2:	9b04      	ldr	r3, [sp, #16]
 80143e4:	1bc9      	subs	r1, r1, r7
 80143e6:	fa0f f78a 	sxth.w	r7, sl
 80143ea:	b289      	uxth	r1, r1
 80143ec:	429f      	cmp	r7, r3
 80143ee:	fa0f fe81 	sxth.w	lr, r1
 80143f2:	dd24      	ble.n	801443e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80143f4:	9a05      	ldr	r2, [sp, #20]
 80143f6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80143fa:	ebaa 0202 	sub.w	r2, sl, r2
 80143fe:	9d07      	ldr	r5, [sp, #28]
 8014400:	b292      	uxth	r2, r2
 8014402:	eba5 0a03 	sub.w	sl, r5, r3
 8014406:	b214      	sxth	r4, r2
 8014408:	eba9 0000 	sub.w	r0, r9, r0
 801440c:	fb0e f000 	mul.w	r0, lr, r0
 8014410:	fb04 fa0a 	mul.w	sl, r4, sl
 8014414:	9b02      	ldr	r3, [sp, #8]
 8014416:	4550      	cmp	r0, sl
 8014418:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801441c:	445b      	add	r3, fp
 801441e:	db03      	blt.n	8014428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8014420:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8014424:	4494      	add	ip, r2
 8014426:	e731      	b.n	801428c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014428:	9a04      	ldr	r2, [sp, #16]
 801442a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801442e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8014432:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8014436:	4431      	add	r1, r6
 8014438:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801443c:	e75b      	b.n	80142f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801443e:	9b08      	ldr	r3, [sp, #32]
 8014440:	2d06      	cmp	r5, #6
 8014442:	eba3 0308 	sub.w	r3, r3, r8
 8014446:	b29b      	uxth	r3, r3
 8014448:	b218      	sxth	r0, r3
 801444a:	d813      	bhi.n	8014474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 801444c:	9b07      	ldr	r3, [sp, #28]
 801444e:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8014452:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8014456:	1c6b      	adds	r3, r5, #1
 8014458:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801445c:	9b01      	ldr	r3, [sp, #4]
 801445e:	9901      	ldr	r1, [sp, #4]
 8014460:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014464:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014468:	805a      	strh	r2, [r3, #2]
 801446a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801446c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014470:	809a      	strh	r2, [r3, #4]
 8014472:	e75e      	b.n	8014332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014474:	9c02      	ldr	r4, [sp, #8]
 8014476:	4570      	cmp	r0, lr
 8014478:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801447c:	db0d      	blt.n	801449a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801447e:	4431      	add	r1, r6
 8014480:	9b06      	ldr	r3, [sp, #24]
 8014482:	b289      	uxth	r1, r1
 8014484:	445c      	add	r4, fp
 8014486:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801448a:	4419      	add	r1, r3
 801448c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8014490:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8014494:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8014498:	e582      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801449a:	445c      	add	r4, fp
 801449c:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80144a0:	e79a      	b.n	80143d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80144a2:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80144a6:	2e07      	cmp	r6, #7
 80144a8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80144ac:	d812      	bhi.n	80144d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 80144ae:	1c75      	adds	r5, r6, #1
 80144b0:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80144b4:	9d01      	ldr	r5, [sp, #4]
 80144b6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80144ba:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80144be:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80144c2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80144c6:	442c      	add	r4, r5
 80144c8:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80144cc:	8061      	strh	r1, [r4, #2]
 80144ce:	80a2      	strh	r2, [r4, #4]
 80144d0:	80e3      	strh	r3, [r4, #6]
 80144d2:	e5cf      	b.n	8014074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80144d4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80144d8:	f04f 37ff 	mov.w	r7, #4294967295
 80144dc:	2500      	movs	r5, #0
 80144de:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80144e2:	3e01      	subs	r6, #1
 80144e4:	445c      	add	r4, fp
 80144e6:	9305      	str	r3, [sp, #20]
 80144e8:	1e72      	subs	r2, r6, #1
 80144ea:	4691      	mov	r9, r2
 80144ec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80144f0:	9302      	str	r3, [sp, #8]
 80144f2:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80144f6:	9304      	str	r3, [sp, #16]
 80144f8:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80144fc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014500:	bf16      	itet	ne
 8014502:	9905      	ldrne	r1, [sp, #20]
 8014504:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8014508:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801450c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014510:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014514:	6818      	ldr	r0, [r3, #0]
 8014516:	fb18 f801 	smulbb	r8, r8, r1
 801451a:	6859      	ldr	r1, [r3, #4]
 801451c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014520:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014524:	4671      	mov	r1, lr
 8014526:	a80c      	add	r0, sp, #48	; 0x30
 8014528:	9207      	str	r2, [sp, #28]
 801452a:	9306      	str	r3, [sp, #24]
 801452c:	f7ff fb72 	bl	8013c14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014530:	f04f 0c08 	mov.w	ip, #8
 8014534:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8014538:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801453c:	9b04      	ldr	r3, [sp, #16]
 801453e:	9a02      	ldr	r2, [sp, #8]
 8014540:	fb10 f001 	smulbb	r0, r0, r1
 8014544:	fb02 8803 	mla	r8, r2, r3, r8
 8014548:	eba0 0108 	sub.w	r1, r0, r8
 801454c:	fb90 f0fc 	sdiv	r0, r0, ip
 8014550:	4288      	cmp	r0, r1
 8014552:	dc20      	bgt.n	8014596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8014554:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014558:	4551      	cmp	r1, sl
 801455a:	da03      	bge.n	8014564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 801455c:	b1d9      	cbz	r1, 8014596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801455e:	468a      	mov	sl, r1
 8014560:	464f      	mov	r7, r9
 8014562:	4635      	mov	r5, r6
 8014564:	f109 39ff 	add.w	r9, r9, #4294967295
 8014568:	f119 0f02 	cmn.w	r9, #2
 801456c:	d1c6      	bne.n	80144fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 801456e:	4616      	mov	r6, r2
 8014570:	3201      	adds	r2, #1
 8014572:	f1a4 0408 	sub.w	r4, r4, #8
 8014576:	d1b7      	bne.n	80144e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8014578:	9b01      	ldr	r3, [sp, #4]
 801457a:	b2ac      	uxth	r4, r5
 801457c:	00ed      	lsls	r5, r5, #3
 801457e:	1958      	adds	r0, r3, r5
 8014580:	1c7b      	adds	r3, r7, #1
 8014582:	d10b      	bne.n	801459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8014584:	4601      	mov	r1, r0
 8014586:	9803      	ldr	r0, [sp, #12]
 8014588:	f7ff fb44 	bl	8013c14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801458c:	4621      	mov	r1, r4
 801458e:	9801      	ldr	r0, [sp, #4]
 8014590:	f7ff fcdc 	bl	8013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014594:	e504      	b.n	8013fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014596:	464f      	mov	r7, r9
 8014598:	4635      	mov	r5, r6
 801459a:	e7ed      	b.n	8014578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801459c:	9b01      	ldr	r3, [sp, #4]
 801459e:	00ff      	lsls	r7, r7, #3
 80145a0:	19d9      	adds	r1, r3, r7
 80145a2:	f7ff fb37 	bl	8013c14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80145a6:	9b03      	ldr	r3, [sp, #12]
 80145a8:	445f      	add	r7, fp
 80145aa:	cb03      	ldmia	r3!, {r0, r1}
 80145ac:	445d      	add	r5, fp
 80145ae:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80145b2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80145b6:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80145ba:	9b03      	ldr	r3, [sp, #12]
 80145bc:	6869      	ldr	r1, [r5, #4]
 80145be:	c303      	stmia	r3!, {r0, r1}
 80145c0:	e7e4      	b.n	801458c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 80145c2:	bf00      	nop

080145c4 <_ZN8touchgfx11Application10invalidateEv>:
 80145c4:	2100      	movs	r1, #0
 80145c6:	4b09      	ldr	r3, [pc, #36]	; (80145ec <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80145c8:	b082      	sub	sp, #8
 80145ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145ce:	4b08      	ldr	r3, [pc, #32]	; (80145f0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80145d0:	9100      	str	r1, [sp, #0]
 80145d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80145da:	f8ad 3006 	strh.w	r3, [sp, #6]
 80145de:	ab02      	add	r3, sp, #8
 80145e0:	e913 0006 	ldmdb	r3, {r1, r2}
 80145e4:	b002      	add	sp, #8
 80145e6:	f7ff bcc5 	b.w	8013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80145ea:	bf00      	nop
 80145ec:	20020080 	.word	0x20020080
 80145f0:	20020082 	.word	0x20020082

080145f4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80145f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80145fc:	b09b      	sub	sp, #108	; 0x6c
 80145fe:	4604      	mov	r4, r0
 8014600:	4630      	mov	r0, r6
 8014602:	f7fc fc14 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014606:	4605      	mov	r5, r0
 8014608:	b940      	cbnz	r0, 801461c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801460a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801460e:	4620      	mov	r0, r4
 8014610:	f7ff fcb0 	bl	8013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014614:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8014618:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801461c:	4bc9      	ldr	r3, [pc, #804]	; (8014944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d03e      	beq.n	80146a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8014624:	4dc8      	ldr	r5, [pc, #800]	; (8014948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8014626:	4628      	mov	r0, r5
 8014628:	f7fc fc01 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801462c:	4606      	mov	r6, r0
 801462e:	2800      	cmp	r0, #0
 8014630:	d137      	bne.n	80146a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8014632:	4628      	mov	r0, r5
 8014634:	f7ff f988 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014638:	6829      	ldr	r1, [r5, #0]
 801463a:	686a      	ldr	r2, [r5, #4]
 801463c:	4620      	mov	r0, r4
 801463e:	f7ff fc99 	bl	8013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014642:	802e      	strh	r6, [r5, #0]
 8014644:	806e      	strh	r6, [r5, #2]
 8014646:	80ae      	strh	r6, [r5, #4]
 8014648:	80ee      	strh	r6, [r5, #6]
 801464a:	ae09      	add	r6, sp, #36	; 0x24
 801464c:	4630      	mov	r0, r6
 801464e:	f7ff fc25 	bl	8013e9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014652:	4abe      	ldr	r2, [pc, #760]	; (801494c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8014654:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8014658:	8815      	ldrh	r5, [r2, #0]
 801465a:	9202      	str	r2, [sp, #8]
 801465c:	462b      	mov	r3, r5
 801465e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8014662:	429f      	cmp	r7, r3
 8014664:	d924      	bls.n	80146b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8014666:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801466a:	2907      	cmp	r1, #7
 801466c:	d816      	bhi.n	801469c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801466e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014672:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8014676:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801467a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801467e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8014682:	1c4a      	adds	r2, r1, #1
 8014684:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8014688:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801468c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8014690:	f8a2 9002 	strh.w	r9, [r2, #2]
 8014694:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014698:	f8a2 c006 	strh.w	ip, [r2, #6]
 801469c:	3301      	adds	r3, #1
 801469e:	b29b      	uxth	r3, r3
 80146a0:	e7df      	b.n	8014662 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80146a2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d1cf      	bne.n	801464a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80146aa:	b01b      	add	sp, #108	; 0x6c
 80146ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b0:	462f      	mov	r7, r5
 80146b2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80146b6:	42bb      	cmp	r3, r7
 80146b8:	d90b      	bls.n	80146d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80146ba:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80146be:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80146c2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80146c6:	4620      	mov	r0, r4
 80146c8:	3701      	adds	r7, #1
 80146ca:	f7ff fc53 	bl	8013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80146ce:	b2bf      	uxth	r7, r7
 80146d0:	e7ef      	b.n	80146b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80146d2:	4a9f      	ldr	r2, [pc, #636]	; (8014950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80146d4:	6813      	ldr	r3, [r2, #0]
 80146d6:	4690      	mov	r8, r2
 80146d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80146dc:	2b01      	cmp	r3, #1
 80146de:	f040 80e6 	bne.w	80148ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 80146e2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80146e6:	4629      	mov	r1, r5
 80146e8:	2500      	movs	r5, #0
 80146ea:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80146ee:	33ae      	adds	r3, #174	; 0xae
 80146f0:	428f      	cmp	r7, r1
 80146f2:	f103 0308 	add.w	r3, r3, #8
 80146f6:	dd0a      	ble.n	801470e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80146f8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80146fc:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8014700:	3101      	adds	r1, #1
 8014702:	4402      	add	r2, r0
 8014704:	b212      	sxth	r2, r2
 8014706:	4295      	cmp	r5, r2
 8014708:	bfb8      	it	lt
 801470a:	4615      	movlt	r5, r2
 801470c:	e7f0      	b.n	80146f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801470e:	4b91      	ldr	r3, [pc, #580]	; (8014954 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8014710:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8014950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8014714:	881b      	ldrh	r3, [r3, #0]
 8014716:	46d8      	mov	r8, fp
 8014718:	2b0f      	cmp	r3, #15
 801471a:	bf88      	it	hi
 801471c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8014720:	f04f 0300 	mov.w	r3, #0
 8014724:	bf98      	it	ls
 8014726:	f04f 0a01 	movls.w	sl, #1
 801472a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801472e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8014732:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014736:	4438      	add	r0, r7
 8014738:	b207      	sxth	r7, r0
 801473a:	f8db 0000 	ldr.w	r0, [fp]
 801473e:	42bd      	cmp	r5, r7
 8014740:	6803      	ldr	r3, [r0, #0]
 8014742:	f340 8084 	ble.w	801484e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801474a:	4798      	blx	r3
 801474c:	eb07 030a 	add.w	r3, r7, sl
 8014750:	4298      	cmp	r0, r3
 8014752:	da07      	bge.n	8014764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014754:	4285      	cmp	r5, r0
 8014756:	dd05      	ble.n	8014764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014758:	4287      	cmp	r7, r0
 801475a:	dd6d      	ble.n	8014838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801475c:	2f00      	cmp	r7, #0
 801475e:	dd6b      	ble.n	8014838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8014760:	4628      	mov	r0, r5
 8014762:	e004      	b.n	801476e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8014764:	4287      	cmp	r7, r0
 8014766:	dcfb      	bgt.n	8014760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014768:	42a8      	cmp	r0, r5
 801476a:	bfa8      	it	ge
 801476c:	4628      	movge	r0, r5
 801476e:	2200      	movs	r2, #0
 8014770:	4b79      	ldr	r3, [pc, #484]	; (8014958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8014772:	1bc0      	subs	r0, r0, r7
 8014774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014778:	f8ad 7016 	strh.w	r7, [sp, #22]
 801477c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014780:	9b02      	ldr	r3, [sp, #8]
 8014782:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014786:	881f      	ldrh	r7, [r3, #0]
 8014788:	f8ad 001a 	strh.w	r0, [sp, #26]
 801478c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014790:	42bb      	cmp	r3, r7
 8014792:	d9cc      	bls.n	801472e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014794:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8014798:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801479c:	ab07      	add	r3, sp, #28
 801479e:	6851      	ldr	r1, [r2, #4]
 80147a0:	c303      	stmia	r3!, {r0, r1}
 80147a2:	a905      	add	r1, sp, #20
 80147a4:	a807      	add	r0, sp, #28
 80147a6:	f7ff f99d 	bl	8013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	d04c      	beq.n	8014848 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80147ae:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80147b2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80147b6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80147ba:	4686      	mov	lr, r0
 80147bc:	4290      	cmp	r0, r2
 80147be:	4448      	add	r0, r9
 80147c0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80147c4:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80147c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80147cc:	bfb8      	it	lt
 80147ce:	4696      	movlt	lr, r2
 80147d0:	444a      	add	r2, r9
 80147d2:	4299      	cmp	r1, r3
 80147d4:	b280      	uxth	r0, r0
 80147d6:	b292      	uxth	r2, r2
 80147d8:	468c      	mov	ip, r1
 80147da:	9303      	str	r3, [sp, #12]
 80147dc:	bfb8      	it	lt
 80147de:	469c      	movlt	ip, r3
 80147e0:	fa0f f982 	sxth.w	r9, r2
 80147e4:	b203      	sxth	r3, r0
 80147e6:	454b      	cmp	r3, r9
 80147e8:	bfb8      	it	lt
 80147ea:	4602      	movlt	r2, r0
 80147ec:	eba2 020e 	sub.w	r2, r2, lr
 80147f0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80147f4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80147f8:	9b03      	ldr	r3, [sp, #12]
 80147fa:	4411      	add	r1, r2
 80147fc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014800:	b289      	uxth	r1, r1
 8014802:	4413      	add	r3, r2
 8014804:	b29b      	uxth	r3, r3
 8014806:	b208      	sxth	r0, r1
 8014808:	b21a      	sxth	r2, r3
 801480a:	4290      	cmp	r0, r2
 801480c:	bfb8      	it	lt
 801480e:	460b      	movlt	r3, r1
 8014810:	eba3 030c 	sub.w	r3, r3, ip
 8014814:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014818:	f8ad e01c 	strh.w	lr, [sp, #28]
 801481c:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014820:	a807      	add	r0, sp, #28
 8014822:	f7fc fb04 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014826:	b920      	cbnz	r0, 8014832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	a907      	add	r1, sp, #28
 801482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801482e:	4620      	mov	r0, r4
 8014830:	4798      	blx	r3
 8014832:	3701      	adds	r7, #1
 8014834:	b2bf      	uxth	r7, r7
 8014836:	e7a9      	b.n	801478c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8014838:	f8d8 0000 	ldr.w	r0, [r8]
 801483c:	2101      	movs	r1, #1
 801483e:	6803      	ldr	r3, [r0, #0]
 8014840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014844:	4798      	blx	r3
 8014846:	e772      	b.n	801472e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014848:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801484c:	e7e8      	b.n	8014820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014850:	4798      	blx	r3
 8014852:	4b42      	ldr	r3, [pc, #264]	; (801495c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	f43f af27 	beq.w	80146aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801485c:	2300      	movs	r3, #0
 801485e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8014862:	9b02      	ldr	r3, [sp, #8]
 8014864:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801486e:	429d      	cmp	r5, r3
 8014870:	f67f af1b 	bls.w	80146aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014874:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8014878:	2907      	cmp	r1, #7
 801487a:	d815      	bhi.n	80148a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801487c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8014880:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014884:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014888:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801488c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8014890:	1c4a      	adds	r2, r1, #1
 8014892:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8014896:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801489a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801489e:	f8a2 e002 	strh.w	lr, [r2, #2]
 80148a2:	f8a2 c004 	strh.w	ip, [r2, #4]
 80148a6:	80d7      	strh	r7, [r2, #6]
 80148a8:	3301      	adds	r3, #1
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	e7df      	b.n	801486e <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 80148ae:	2b02      	cmp	r3, #2
 80148b0:	f040 8136 	bne.w	8014b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80148b4:	4b2a      	ldr	r3, [pc, #168]	; (8014960 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 80148b6:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	2b01      	cmp	r3, #1
 80148be:	f000 809c 	beq.w	80149fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80148c2:	9b02      	ldr	r3, [sp, #8]
 80148c4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80148c8:	f8b3 b000 	ldrh.w	fp, [r3]
 80148cc:	f10b 0b01 	add.w	fp, fp, #1
 80148d0:	fa1f fb8b 	uxth.w	fp, fp
 80148d4:	2a00      	cmp	r2, #0
 80148d6:	d0bc      	beq.n	8014852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80148d8:	4659      	mov	r1, fp
 80148da:	f04f 0800 	mov.w	r8, #0
 80148de:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80148e2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80148e6:	441d      	add	r5, r3
 80148e8:	b22d      	sxth	r5, r5
 80148ea:	b28b      	uxth	r3, r1
 80148ec:	429a      	cmp	r2, r3
 80148ee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80148f2:	f240 80c1 	bls.w	8014a78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80148f6:	4427      	add	r7, r4
 80148f8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80148fc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8014900:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8014904:	4608      	mov	r0, r1
 8014906:	4563      	cmp	r3, ip
 8014908:	f340 80a3 	ble.w	8014a52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801490c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8014910:	4465      	add	r5, ip
 8014912:	b22d      	sxth	r5, r5
 8014914:	429d      	cmp	r5, r3
 8014916:	bfa8      	it	ge
 8014918:	461d      	movge	r5, r3
 801491a:	3101      	adds	r1, #1
 801491c:	4680      	mov	r8, r0
 801491e:	e7e4      	b.n	80148ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8014920:	d10b      	bne.n	801493a <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8014922:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8014926:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801492a:	458c      	cmp	ip, r1
 801492c:	bfb4      	ite	lt
 801492e:	469c      	movlt	ip, r3
 8014930:	46bc      	movge	ip, r7
 8014932:	4572      	cmp	r2, lr
 8014934:	bfb8      	it	lt
 8014936:	4672      	movlt	r2, lr
 8014938:	e088      	b.n	8014a4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801493a:	428a      	cmp	r2, r1
 801493c:	bfb8      	it	lt
 801493e:	460a      	movlt	r2, r1
 8014940:	46bc      	mov	ip, r7
 8014942:	e083      	b.n	8014a4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8014944:	200200c4 	.word	0x200200c4
 8014948:	200200d0 	.word	0x200200d0
 801494c:	2000001c 	.word	0x2000001c
 8014950:	2002008c 	.word	0x2002008c
 8014954:	20020082 	.word	0x20020082
 8014958:	20020080 	.word	0x20020080
 801495c:	2002008a 	.word	0x2002008a
 8014960:	20020084 	.word	0x20020084
 8014964:	1961      	adds	r1, r4, r5
 8014966:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801496a:	ab07      	add	r3, sp, #28
 801496c:	6849      	ldr	r1, [r1, #4]
 801496e:	c303      	stmia	r3!, {r0, r1}
 8014970:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014974:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014978:	2b13      	cmp	r3, #19
 801497a:	bfd8      	it	le
 801497c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8014980:	440b      	add	r3, r1
 8014982:	1a9b      	subs	r3, r3, r2
 8014984:	a807      	add	r0, sp, #28
 8014986:	f8ad 3020 	strh.w	r3, [sp, #32]
 801498a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801498e:	f7fe fff5 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014992:	a807      	add	r0, sp, #28
 8014994:	f7fc fa4b 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014998:	bb78      	cbnz	r0, 80149fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801499a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801499e:	f8d8 0000 	ldr.w	r0, [r8]
 80149a2:	f1bc 0f14 	cmp.w	ip, #20
 80149a6:	bfa8      	it	ge
 80149a8:	f04f 0c14 	movge.w	ip, #20
 80149ac:	f8d0 e000 	ldr.w	lr, [r0]
 80149b0:	fa1f fc8c 	uxth.w	ip, ip
 80149b4:	f8cd c000 	str.w	ip, [sp]
 80149b8:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80149bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80149c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80149c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80149c8:	47d0      	blx	sl
 80149ca:	4682      	mov	sl, r0
 80149cc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80149d0:	a807      	add	r0, sp, #28
 80149d2:	f7fe ffb9 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80149d6:	6823      	ldr	r3, [r4, #0]
 80149d8:	4620      	mov	r0, r4
 80149da:	4425      	add	r5, r4
 80149dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149de:	a907      	add	r1, sp, #28
 80149e0:	4798      	blx	r3
 80149e2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80149e6:	eba0 000a 	sub.w	r0, r0, sl
 80149ea:	b200      	sxth	r0, r0
 80149ec:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80149f0:	b918      	cbnz	r0, 80149fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80149f2:	b2b9      	uxth	r1, r7
 80149f4:	4648      	mov	r0, r9
 80149f6:	f7ff faa9 	bl	8013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80149fa:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80149fe:	f1bb 0f00 	cmp.w	fp, #0
 8014a02:	f43f af26 	beq.w	8014852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8014a06:	2700      	movs	r7, #0
 8014a08:	9b02      	ldr	r3, [sp, #8]
 8014a0a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8014a0e:	881b      	ldrh	r3, [r3, #0]
 8014a10:	3301      	adds	r3, #1
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	b299      	uxth	r1, r3
 8014a16:	458b      	cmp	fp, r1
 8014a18:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8014a1c:	d9a2      	bls.n	8014964 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8014a1e:	4425      	add	r5, r4
 8014a20:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8014a24:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8014a28:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8014a2c:	4408      	add	r0, r1
 8014a2e:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8014a32:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8014a36:	b200      	sxth	r0, r0
 8014a38:	4471      	add	r1, lr
 8014a3a:	b209      	sxth	r1, r1
 8014a3c:	4288      	cmp	r0, r1
 8014a3e:	469c      	mov	ip, r3
 8014a40:	f6bf af6e 	bge.w	8014920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8014a44:	4586      	cmp	lr, r0
 8014a46:	4672      	mov	r2, lr
 8014a48:	bfb8      	it	lt
 8014a4a:	4602      	movlt	r2, r0
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	4667      	mov	r7, ip
 8014a50:	e7e0      	b.n	8014a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8014a52:	d10c      	bne.n	8014a6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8014a54:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8014a58:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8014a5c:	4287      	cmp	r7, r0
 8014a5e:	bfb4      	ite	lt
 8014a60:	4608      	movlt	r0, r1
 8014a62:	4640      	movge	r0, r8
 8014a64:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8014a68:	443b      	add	r3, r7
 8014a6a:	b21b      	sxth	r3, r3
 8014a6c:	e752      	b.n	8014914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8014a6e:	4565      	cmp	r5, ip
 8014a70:	bfa8      	it	ge
 8014a72:	4665      	movge	r5, ip
 8014a74:	4640      	mov	r0, r8
 8014a76:	e750      	b.n	801491a <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8014a78:	eb09 0007 	add.w	r0, r9, r7
 8014a7c:	4427      	add	r7, r4
 8014a7e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8014a82:	9203      	str	r2, [sp, #12]
 8014a84:	f1ba 0f13 	cmp.w	sl, #19
 8014a88:	bfde      	ittt	le
 8014a8a:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8014a8e:	4455      	addle	r5, sl
 8014a90:	b22d      	sxthle	r5, r5
 8014a92:	f7fc f9cc 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014a96:	9a03      	ldr	r2, [sp, #12]
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	f47f af1b 	bne.w	80148d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8014a9e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8014aa2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014aa6:	1aad      	subs	r5, r5, r2
 8014aa8:	2d14      	cmp	r5, #20
 8014aaa:	bfa8      	it	ge
 8014aac:	2514      	movge	r5, #20
 8014aae:	4828      	ldr	r0, [pc, #160]	; (8014b50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8014ab0:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8014ab4:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8014ab8:	6800      	ldr	r0, [r0, #0]
 8014aba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014abe:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014ac2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014ac6:	f8d0 c000 	ldr.w	ip, [r0]
 8014aca:	b2ad      	uxth	r5, r5
 8014acc:	fa1f fa8a 	uxth.w	sl, sl
 8014ad0:	4555      	cmp	r5, sl
 8014ad2:	bf94      	ite	ls
 8014ad4:	9500      	strls	r5, [sp, #0]
 8014ad6:	f8cd a000 	strhi.w	sl, [sp]
 8014ada:	b292      	uxth	r2, r2
 8014adc:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	b289      	uxth	r1, r1
 8014ae4:	47a8      	blx	r5
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014aee:	a907      	add	r1, sp, #28
 8014af0:	4620      	mov	r0, r4
 8014af2:	4798      	blx	r3
 8014af4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014af8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8014afc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8014b00:	1a5b      	subs	r3, r3, r1
 8014b02:	440a      	add	r2, r1
 8014b04:	b21b      	sxth	r3, r3
 8014b06:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8014b0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f47f aed7 	bne.w	80148c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8014b14:	fa1f f188 	uxth.w	r1, r8
 8014b18:	4648      	mov	r0, r9
 8014b1a:	f7ff fa17 	bl	8013f4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014b1e:	e6d0      	b.n	80148c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8014b20:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014b24:	42ab      	cmp	r3, r5
 8014b26:	f67f ae94 	bls.w	8014852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8014b2a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8014b2e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014b32:	ab07      	add	r3, sp, #28
 8014b34:	6851      	ldr	r1, [r2, #4]
 8014b36:	c303      	stmia	r3!, {r0, r1}
 8014b38:	a807      	add	r0, sp, #28
 8014b3a:	f7fc f978 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014b3e:	b920      	cbnz	r0, 8014b4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8014b40:	6823      	ldr	r3, [r4, #0]
 8014b42:	a907      	add	r1, sp, #28
 8014b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b46:	4620      	mov	r0, r4
 8014b48:	4798      	blx	r3
 8014b4a:	3501      	adds	r5, #1
 8014b4c:	b2ad      	uxth	r5, r5
 8014b4e:	e7e7      	b.n	8014b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8014b50:	2002008c 	.word	0x2002008c

08014b54 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014b54:	2200      	movs	r2, #0
 8014b56:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014b58:	801a      	strh	r2, [r3, #0]
 8014b5a:	805a      	strh	r2, [r3, #2]
 8014b5c:	809a      	strh	r2, [r3, #4]
 8014b5e:	80da      	strh	r2, [r3, #6]
 8014b60:	4770      	bx	lr
 8014b62:	bf00      	nop
 8014b64:	200200d0 	.word	0x200200d0

08014b68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8014b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6c:	4606      	mov	r6, r0
 8014b6e:	b09d      	sub	sp, #116	; 0x74
 8014b70:	a803      	add	r0, sp, #12
 8014b72:	4614      	mov	r4, r2
 8014b74:	468a      	mov	sl, r1
 8014b76:	461d      	mov	r5, r3
 8014b78:	f000 fdc1 	bl	80156fe <_ZN8touchgfx12TextProviderC1Ev>
 8014b7c:	6833      	ldr	r3, [r6, #0]
 8014b7e:	4630      	mov	r0, r6
 8014b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b82:	4798      	blx	r3
 8014b84:	6833      	ldr	r3, [r6, #0]
 8014b86:	4607      	mov	r7, r0
 8014b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	4798      	blx	r3
 8014b8e:	462a      	mov	r2, r5
 8014b90:	2500      	movs	r5, #0
 8014b92:	9000      	str	r0, [sp, #0]
 8014b94:	4621      	mov	r1, r4
 8014b96:	463b      	mov	r3, r7
 8014b98:	a803      	add	r0, sp, #12
 8014b9a:	f000 fe03 	bl	80157a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014b9e:	462c      	mov	r4, r5
 8014ba0:	46a9      	mov	r9, r5
 8014ba2:	46a8      	mov	r8, r5
 8014ba4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8014ba8:	2300      	movs	r3, #0
 8014baa:	9302      	str	r3, [sp, #8]
 8014bac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014bb0:	429c      	cmp	r4, r3
 8014bb2:	d002      	beq.n	8014bba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014bb4:	455c      	cmp	r4, fp
 8014bb6:	bf18      	it	ne
 8014bb8:	4625      	movne	r5, r4
 8014bba:	ab02      	add	r3, sp, #8
 8014bbc:	4632      	mov	r2, r6
 8014bbe:	4651      	mov	r1, sl
 8014bc0:	a803      	add	r0, sp, #12
 8014bc2:	f001 f8df 	bl	8015d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	b108      	cbz	r0, 8014bce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014bca:	280a      	cmp	r0, #10
 8014bcc:	d10a      	bne.n	8014be4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8014bce:	45c1      	cmp	r9, r8
 8014bd0:	bf38      	it	cc
 8014bd2:	46c1      	movcc	r9, r8
 8014bd4:	f04f 0800 	mov.w	r8, #0
 8014bd8:	2c00      	cmp	r4, #0
 8014bda:	d1e5      	bne.n	8014ba8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014bdc:	4648      	mov	r0, r9
 8014bde:	b01d      	add	sp, #116	; 0x74
 8014be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be4:	9a02      	ldr	r2, [sp, #8]
 8014be6:	2a00      	cmp	r2, #0
 8014be8:	d0de      	beq.n	8014ba8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014bea:	7b57      	ldrb	r7, [r2, #13]
 8014bec:	6833      	ldr	r3, [r6, #0]
 8014bee:	007f      	lsls	r7, r7, #1
 8014bf0:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014bf4:	7a97      	ldrb	r7, [r2, #10]
 8014bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bf8:	4307      	orrs	r7, r0
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	8894      	ldrh	r4, [r2, #4]
 8014c00:	4798      	blx	r3
 8014c02:	4438      	add	r0, r7
 8014c04:	4480      	add	r8, r0
 8014c06:	fa1f f888 	uxth.w	r8, r8
 8014c0a:	e7e5      	b.n	8014bd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014c0c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014c0c:	b508      	push	{r3, lr}
 8014c0e:	6803      	ldr	r3, [r0, #0]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	4798      	blx	r3
 8014c14:	b128      	cbz	r0, 8014c22 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014c16:	7b43      	ldrb	r3, [r0, #13]
 8014c18:	7a80      	ldrb	r0, [r0, #10]
 8014c1a:	005b      	lsls	r3, r3, #1
 8014c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c20:	4318      	orrs	r0, r3
 8014c22:	bd08      	pop	{r3, pc}

08014c24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014c24:	b40e      	push	{r1, r2, r3}
 8014c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c28:	4605      	mov	r5, r0
 8014c2a:	b09e      	sub	sp, #120	; 0x78
 8014c2c:	ab23      	add	r3, sp, #140	; 0x8c
 8014c2e:	f853 4b04 	ldr.w	r4, [r3], #4
 8014c32:	a805      	add	r0, sp, #20
 8014c34:	9303      	str	r3, [sp, #12]
 8014c36:	f000 fd62 	bl	80156fe <_ZN8touchgfx12TextProviderC1Ev>
 8014c3a:	682b      	ldr	r3, [r5, #0]
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c40:	4798      	blx	r3
 8014c42:	682b      	ldr	r3, [r5, #0]
 8014c44:	4606      	mov	r6, r0
 8014c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c48:	4628      	mov	r0, r5
 8014c4a:	4798      	blx	r3
 8014c4c:	4621      	mov	r1, r4
 8014c4e:	2400      	movs	r4, #0
 8014c50:	4633      	mov	r3, r6
 8014c52:	9000      	str	r0, [sp, #0]
 8014c54:	9a03      	ldr	r2, [sp, #12]
 8014c56:	ae1e      	add	r6, sp, #120	; 0x78
 8014c58:	a805      	add	r0, sp, #20
 8014c5a:	f000 fda3 	bl	80157a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014c5e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8014c62:	4633      	mov	r3, r6
 8014c64:	462a      	mov	r2, r5
 8014c66:	4621      	mov	r1, r4
 8014c68:	a805      	add	r0, sp, #20
 8014c6a:	f001 f88b 	bl	8015d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014c6e:	b1f0      	cbz	r0, 8014cae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8014c70:	280a      	cmp	r0, #10
 8014c72:	d018      	beq.n	8014ca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014c74:	9f04      	ldr	r7, [sp, #16]
 8014c76:	b1b7      	cbz	r7, 8014ca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014c78:	7b78      	ldrb	r0, [r7, #13]
 8014c7a:	7a3b      	ldrb	r3, [r7, #8]
 8014c7c:	00c1      	lsls	r1, r0, #3
 8014c7e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014c82:	4319      	orrs	r1, r3
 8014c84:	0643      	lsls	r3, r0, #25
 8014c86:	bf44      	itt	mi
 8014c88:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8014c8c:	b219      	sxthmi	r1, r3
 8014c8e:	0100      	lsls	r0, r0, #4
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	88ea      	ldrh	r2, [r5, #6]
 8014c94:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014c98:	4303      	orrs	r3, r0
 8014c9a:	4413      	add	r3, r2
 8014c9c:	1a5b      	subs	r3, r3, r1
 8014c9e:	b21b      	sxth	r3, r3
 8014ca0:	429c      	cmp	r4, r3
 8014ca2:	bfb8      	it	lt
 8014ca4:	461c      	movlt	r4, r3
 8014ca6:	4633      	mov	r3, r6
 8014ca8:	462a      	mov	r2, r5
 8014caa:	2100      	movs	r1, #0
 8014cac:	e7dc      	b.n	8014c68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8014cae:	b2a0      	uxth	r0, r4
 8014cb0:	b01e      	add	sp, #120	; 0x78
 8014cb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014cb6:	b003      	add	sp, #12
 8014cb8:	4770      	bx	lr

08014cba <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8014cba:	7a43      	ldrb	r3, [r0, #9]
 8014cbc:	8880      	ldrh	r0, [r0, #4]
 8014cbe:	4418      	add	r0, r3
 8014cc0:	b280      	uxth	r0, r0
 8014cc2:	4770      	bx	lr

08014cc4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014cc4:	6803      	ldr	r3, [r0, #0]
 8014cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cc8:	4718      	bx	r3

08014cca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014cca:	b40e      	push	{r1, r2, r3}
 8014ccc:	b570      	push	{r4, r5, r6, lr}
 8014cce:	4604      	mov	r4, r0
 8014cd0:	b09d      	sub	sp, #116	; 0x74
 8014cd2:	ab21      	add	r3, sp, #132	; 0x84
 8014cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8014cd8:	a803      	add	r0, sp, #12
 8014cda:	9302      	str	r3, [sp, #8]
 8014cdc:	f000 fd0f 	bl	80156fe <_ZN8touchgfx12TextProviderC1Ev>
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ce6:	4798      	blx	r3
 8014ce8:	6823      	ldr	r3, [r4, #0]
 8014cea:	4606      	mov	r6, r0
 8014cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cee:	4620      	mov	r0, r4
 8014cf0:	4798      	blx	r3
 8014cf2:	4633      	mov	r3, r6
 8014cf4:	9000      	str	r0, [sp, #0]
 8014cf6:	9a02      	ldr	r2, [sp, #8]
 8014cf8:	4629      	mov	r1, r5
 8014cfa:	a803      	add	r0, sp, #12
 8014cfc:	f000 fd52 	bl	80157a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014d00:	a803      	add	r0, sp, #12
 8014d02:	f001 f8c1 	bl	8015e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014d06:	2401      	movs	r4, #1
 8014d08:	b2a3      	uxth	r3, r4
 8014d0a:	b140      	cbz	r0, 8014d1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8014d0c:	280a      	cmp	r0, #10
 8014d0e:	bf08      	it	eq
 8014d10:	3301      	addeq	r3, #1
 8014d12:	a803      	add	r0, sp, #12
 8014d14:	bf08      	it	eq
 8014d16:	b21c      	sxtheq	r4, r3
 8014d18:	f001 f8b6 	bl	8015e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014d1c:	e7f4      	b.n	8014d08 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014d1e:	4618      	mov	r0, r3
 8014d20:	b01d      	add	sp, #116	; 0x74
 8014d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d26:	b003      	add	sp, #12
 8014d28:	4770      	bx	lr

08014d2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8014d2a:	b40e      	push	{r1, r2, r3}
 8014d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d2e:	4604      	mov	r4, r0
 8014d30:	b09e      	sub	sp, #120	; 0x78
 8014d32:	ab23      	add	r3, sp, #140	; 0x8c
 8014d34:	f853 5b04 	ldr.w	r5, [r3], #4
 8014d38:	a805      	add	r0, sp, #20
 8014d3a:	9303      	str	r3, [sp, #12]
 8014d3c:	f000 fcdf 	bl	80156fe <_ZN8touchgfx12TextProviderC1Ev>
 8014d40:	6823      	ldr	r3, [r4, #0]
 8014d42:	4620      	mov	r0, r4
 8014d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d46:	4798      	blx	r3
 8014d48:	6823      	ldr	r3, [r4, #0]
 8014d4a:	4606      	mov	r6, r0
 8014d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d4e:	4620      	mov	r0, r4
 8014d50:	4798      	blx	r3
 8014d52:	4633      	mov	r3, r6
 8014d54:	4629      	mov	r1, r5
 8014d56:	9000      	str	r0, [sp, #0]
 8014d58:	9a03      	ldr	r2, [sp, #12]
 8014d5a:	a805      	add	r0, sp, #20
 8014d5c:	f000 fd22 	bl	80157a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014d60:	2100      	movs	r1, #0
 8014d62:	ad1e      	add	r5, sp, #120	; 0x78
 8014d64:	f845 1d68 	str.w	r1, [r5, #-104]!
 8014d68:	462b      	mov	r3, r5
 8014d6a:	4622      	mov	r2, r4
 8014d6c:	a805      	add	r0, sp, #20
 8014d6e:	f001 f809 	bl	8015d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014d72:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8014d76:	b1d8      	cbz	r0, 8014db0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8014d78:	280a      	cmp	r0, #10
 8014d7a:	d012      	beq.n	8014da2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8014d7c:	9804      	ldr	r0, [sp, #16]
 8014d7e:	b180      	cbz	r0, 8014da2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8014d80:	7b47      	ldrb	r7, [r0, #13]
 8014d82:	88e2      	ldrh	r2, [r4, #6]
 8014d84:	00fb      	lsls	r3, r7, #3
 8014d86:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014d8a:	7a03      	ldrb	r3, [r0, #8]
 8014d8c:	430b      	orrs	r3, r1
 8014d8e:	0679      	lsls	r1, r7, #25
 8014d90:	bf44      	itt	mi
 8014d92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014d96:	b21b      	sxthmi	r3, r3
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	b21b      	sxth	r3, r3
 8014d9c:	429e      	cmp	r6, r3
 8014d9e:	bfa8      	it	ge
 8014da0:	461e      	movge	r6, r3
 8014da2:	462b      	mov	r3, r5
 8014da4:	4622      	mov	r2, r4
 8014da6:	2100      	movs	r1, #0
 8014da8:	a805      	add	r0, sp, #20
 8014daa:	f000 ffeb 	bl	8015d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014dae:	e7e2      	b.n	8014d76 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8014db0:	4630      	mov	r0, r6
 8014db2:	b01e      	add	sp, #120	; 0x78
 8014db4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014db8:	b003      	add	sp, #12
 8014dba:	4770      	bx	lr

08014dbc <_ZNK8touchgfx8Drawable10invalidateEv>:
 8014dbc:	b513      	push	{r0, r1, r4, lr}
 8014dbe:	2400      	movs	r4, #0
 8014dc0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014dc4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014dc8:	6803      	ldr	r3, [r0, #0]
 8014dca:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014dce:	9400      	str	r4, [sp, #0]
 8014dd0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014dd4:	691b      	ldr	r3, [r3, #16]
 8014dd6:	4669      	mov	r1, sp
 8014dd8:	4798      	blx	r3
 8014dda:	b002      	add	sp, #8
 8014ddc:	bd10      	pop	{r4, pc}

08014dde <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014dde:	b538      	push	{r3, r4, r5, lr}
 8014de0:	460c      	mov	r4, r1
 8014de2:	4605      	mov	r5, r0
 8014de4:	680b      	ldr	r3, [r1, #0]
 8014de6:	68db      	ldr	r3, [r3, #12]
 8014de8:	4798      	blx	r3
 8014dea:	6823      	ldr	r3, [r4, #0]
 8014dec:	4620      	mov	r0, r4
 8014dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df0:	4629      	mov	r1, r5
 8014df2:	4798      	blx	r3
 8014df4:	4628      	mov	r0, r5
 8014df6:	bd38      	pop	{r3, r4, r5, pc}

08014df8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014df8:	b410      	push	{r4}
 8014dfa:	880a      	ldrh	r2, [r1, #0]
 8014dfc:	8884      	ldrh	r4, [r0, #4]
 8014dfe:	4422      	add	r2, r4
 8014e00:	800a      	strh	r2, [r1, #0]
 8014e02:	88c4      	ldrh	r4, [r0, #6]
 8014e04:	884a      	ldrh	r2, [r1, #2]
 8014e06:	4422      	add	r2, r4
 8014e08:	804a      	strh	r2, [r1, #2]
 8014e0a:	6940      	ldr	r0, [r0, #20]
 8014e0c:	b120      	cbz	r0, 8014e18 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014e0e:	6803      	ldr	r3, [r0, #0]
 8014e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e16:	4718      	bx	r3
 8014e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e1c:	4770      	bx	lr

08014e1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014e1e:	b570      	push	{r4, r5, r6, lr}
 8014e20:	460c      	mov	r4, r1
 8014e22:	8882      	ldrh	r2, [r0, #4]
 8014e24:	880b      	ldrh	r3, [r1, #0]
 8014e26:	4605      	mov	r5, r0
 8014e28:	4413      	add	r3, r2
 8014e2a:	800b      	strh	r3, [r1, #0]
 8014e2c:	88c2      	ldrh	r2, [r0, #6]
 8014e2e:	884b      	ldrh	r3, [r1, #2]
 8014e30:	4413      	add	r3, r2
 8014e32:	804b      	strh	r3, [r1, #2]
 8014e34:	1d01      	adds	r1, r0, #4
 8014e36:	4620      	mov	r0, r4
 8014e38:	f7fb ffb6 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8014e3c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	dd0b      	ble.n	8014e5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014e44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	dd07      	ble.n	8014e5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014e4c:	6968      	ldr	r0, [r5, #20]
 8014e4e:	b128      	cbz	r0, 8014e5c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014e50:	6803      	ldr	r3, [r0, #0]
 8014e52:	4621      	mov	r1, r4
 8014e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e5a:	4718      	bx	r3
 8014e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014e60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8014e60:	b570      	push	{r4, r5, r6, lr}
 8014e62:	460c      	mov	r4, r1
 8014e64:	8882      	ldrh	r2, [r0, #4]
 8014e66:	880b      	ldrh	r3, [r1, #0]
 8014e68:	4605      	mov	r5, r0
 8014e6a:	4413      	add	r3, r2
 8014e6c:	800b      	strh	r3, [r1, #0]
 8014e6e:	88c2      	ldrh	r2, [r0, #6]
 8014e70:	884b      	ldrh	r3, [r1, #2]
 8014e72:	4413      	add	r3, r2
 8014e74:	804b      	strh	r3, [r1, #2]
 8014e76:	1d01      	adds	r1, r0, #4
 8014e78:	4620      	mov	r0, r4
 8014e7a:	f7fb ff95 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8014e7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	dd18      	ble.n	8014eb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014e86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	dd14      	ble.n	8014eb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014e8e:	6968      	ldr	r0, [r5, #20]
 8014e90:	b128      	cbz	r0, 8014e9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8014e92:	6803      	ldr	r3, [r0, #0]
 8014e94:	4621      	mov	r1, r4
 8014e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e9a:	691b      	ldr	r3, [r3, #16]
 8014e9c:	4718      	bx	r3
 8014e9e:	4b07      	ldr	r3, [pc, #28]	; (8014ebc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	429d      	cmp	r5, r3
 8014ea6:	d107      	bne.n	8014eb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014ea8:	f7fe fefa 	bl	8013ca0 <_ZN8touchgfx11Application11getInstanceEv>
 8014eac:	6821      	ldr	r1, [r4, #0]
 8014eae:	6862      	ldr	r2, [r4, #4]
 8014eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eb4:	f7ff b85e 	b.w	8013f74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014eb8:	bd70      	pop	{r4, r5, r6, pc}
 8014eba:	bf00      	nop
 8014ebc:	200200c8 	.word	0x200200c8

08014ec0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014ec0:	b570      	push	{r4, r5, r6, lr}
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	4616      	mov	r6, r2
 8014ec6:	460d      	mov	r5, r1
 8014ec8:	b901      	cbnz	r1, 8014ecc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8014eca:	b192      	cbz	r2, 8014ef2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8014ecc:	6823      	ldr	r3, [r4, #0]
 8014ece:	4620      	mov	r0, r4
 8014ed0:	699b      	ldr	r3, [r3, #24]
 8014ed2:	4798      	blx	r3
 8014ed4:	88e2      	ldrh	r2, [r4, #6]
 8014ed6:	88a1      	ldrh	r1, [r4, #4]
 8014ed8:	4432      	add	r2, r6
 8014eda:	4429      	add	r1, r5
 8014edc:	4620      	mov	r0, r4
 8014ede:	b212      	sxth	r2, r2
 8014ee0:	b209      	sxth	r1, r1
 8014ee2:	f7f8 fea0 	bl	800dc26 <_ZN8touchgfx8Drawable5setXYEss>
 8014ee6:	6823      	ldr	r3, [r4, #0]
 8014ee8:	4620      	mov	r0, r4
 8014eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eee:	699b      	ldr	r3, [r3, #24]
 8014ef0:	4718      	bx	r3
 8014ef2:	bd70      	pop	{r4, r5, r6, pc}

08014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014ef4:	b510      	push	{r4, lr}
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	4604      	mov	r4, r0
 8014efa:	4608      	mov	r0, r1
 8014efc:	8023      	strh	r3, [r4, #0]
 8014efe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014f02:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014f06:	8063      	strh	r3, [r4, #2]
 8014f08:	6803      	ldr	r3, [r0, #0]
 8014f0a:	80a1      	strh	r1, [r4, #4]
 8014f0c:	80e2      	strh	r2, [r4, #6]
 8014f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f10:	4621      	mov	r1, r4
 8014f12:	4798      	blx	r3
 8014f14:	4620      	mov	r0, r4
 8014f16:	bd10      	pop	{r4, pc}

08014f18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014f18:	b530      	push	{r4, r5, lr}
 8014f1a:	8083      	strh	r3, [r0, #4]
 8014f1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014f20:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014f24:	80c3      	strh	r3, [r0, #6]
 8014f26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014f2a:	6141      	str	r1, [r0, #20]
 8014f2c:	7203      	strb	r3, [r0, #8]
 8014f2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014f32:	8302      	strh	r2, [r0, #24]
 8014f34:	7243      	strb	r3, [r0, #9]
 8014f36:	7a83      	ldrb	r3, [r0, #10]
 8014f38:	f365 0306 	bfi	r3, r5, #0, #7
 8014f3c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014f40:	f365 13c7 	bfi	r3, r5, #7, #1
 8014f44:	7283      	strb	r3, [r0, #10]
 8014f46:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014f4a:	72c3      	strb	r3, [r0, #11]
 8014f4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014f50:	7303      	strb	r3, [r0, #12]
 8014f52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014f56:	81c3      	strh	r3, [r0, #14]
 8014f58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8014f5c:	8203      	strh	r3, [r0, #16]
 8014f5e:	4b01      	ldr	r3, [pc, #4]	; (8014f64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8014f60:	6003      	str	r3, [r0, #0]
 8014f62:	bd30      	pop	{r4, r5, pc}
 8014f64:	08025b10 	.word	0x08025b10

08014f68 <_ZNK8touchgfx9ConstFont4findEt>:
 8014f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f6a:	6944      	ldr	r4, [r0, #20]
 8014f6c:	b3bc      	cbz	r4, 8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014f6e:	88a3      	ldrh	r3, [r4, #4]
 8014f70:	8b02      	ldrh	r2, [r0, #24]
 8014f72:	1acb      	subs	r3, r1, r3
 8014f74:	f102 32ff 	add.w	r2, r2, #4294967295
 8014f78:	d431      	bmi.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	dd0c      	ble.n	8014f98 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8014f7e:	230e      	movs	r3, #14
 8014f80:	fb03 4302 	mla	r3, r3, r2, r4
 8014f84:	889b      	ldrh	r3, [r3, #4]
 8014f86:	1a5b      	subs	r3, r3, r1
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	db27      	blt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	bfbc      	itt	lt
 8014f92:	2302      	movlt	r3, #2
 8014f94:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014f98:	2500      	movs	r5, #0
 8014f9a:	260e      	movs	r6, #14
 8014f9c:	4295      	cmp	r5, r2
 8014f9e:	dc1e      	bgt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014fa0:	fb06 4003 	mla	r0, r6, r3, r4
 8014fa4:	8887      	ldrh	r7, [r0, #4]
 8014fa6:	42b9      	cmp	r1, r7
 8014fa8:	d01a      	beq.n	8014fe0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014faa:	d20d      	bcs.n	8014fc8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014fac:	1e5a      	subs	r2, r3, #1
 8014fae:	4295      	cmp	r5, r2
 8014fb0:	dc15      	bgt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014fb2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014fb6:	1a5b      	subs	r3, r3, r1
 8014fb8:	1ad3      	subs	r3, r2, r3
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	db0f      	blt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014fbe:	429d      	cmp	r5, r3
 8014fc0:	ddec      	ble.n	8014f9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014fc2:	1953      	adds	r3, r2, r5
 8014fc4:	105b      	asrs	r3, r3, #1
 8014fc6:	e7e9      	b.n	8014f9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014fc8:	1c5d      	adds	r5, r3, #1
 8014fca:	42aa      	cmp	r2, r5
 8014fcc:	db07      	blt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014fce:	8a43      	ldrh	r3, [r0, #18]
 8014fd0:	1acb      	subs	r3, r1, r3
 8014fd2:	442b      	add	r3, r5
 8014fd4:	429d      	cmp	r5, r3
 8014fd6:	dc02      	bgt.n	8014fde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	dadf      	bge.n	8014f9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014fdc:	e7f1      	b.n	8014fc2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014fde:	2000      	movs	r0, #0
 8014fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fe2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	4617      	mov	r7, r2
 8014fe8:	461e      	mov	r6, r3
 8014fea:	b911      	cbnz	r1, 8014ff2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014fec:	2500      	movs	r5, #0
 8014fee:	4628      	mov	r0, r5
 8014ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ff2:	290a      	cmp	r1, #10
 8014ff4:	d0fa      	beq.n	8014fec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014ff6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014ffa:	4291      	cmp	r1, r2
 8014ffc:	d0f6      	beq.n	8014fec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014ffe:	f242 020b 	movw	r2, #8203	; 0x200b
 8015002:	4291      	cmp	r1, r2
 8015004:	d0f2      	beq.n	8014fec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015006:	f7ff ffaf 	bl	8014f68 <_ZNK8touchgfx9ConstFont4findEt>
 801500a:	4605      	mov	r5, r0
 801500c:	b950      	cbnz	r0, 8015024 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801500e:	6823      	ldr	r3, [r4, #0]
 8015010:	4620      	mov	r0, r4
 8015012:	691b      	ldr	r3, [r3, #16]
 8015014:	4798      	blx	r3
 8015016:	4601      	mov	r1, r0
 8015018:	4620      	mov	r0, r4
 801501a:	f7ff ffa5 	bl	8014f68 <_ZNK8touchgfx9ConstFont4findEt>
 801501e:	4605      	mov	r5, r0
 8015020:	2800      	cmp	r0, #0
 8015022:	d0e3      	beq.n	8014fec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015024:	6823      	ldr	r3, [r4, #0]
 8015026:	4629      	mov	r1, r5
 8015028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801502a:	4620      	mov	r0, r4
 801502c:	4798      	blx	r3
 801502e:	6038      	str	r0, [r7, #0]
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	4620      	mov	r0, r4
 8015034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015036:	4798      	blx	r3
 8015038:	7030      	strb	r0, [r6, #0]
 801503a:	e7d8      	b.n	8014fee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801503c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801503c:	b538      	push	{r3, r4, r5, lr}
 801503e:	4605      	mov	r5, r0
 8015040:	f001 fdcc 	bl	8016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015044:	4604      	mov	r4, r0
 8015046:	4628      	mov	r0, r5
 8015048:	f001 fd0c 	bl	8016a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801504c:	2800      	cmp	r0, #0
 801504e:	bf14      	ite	ne
 8015050:	2002      	movne	r0, #2
 8015052:	2000      	moveq	r0, #0
 8015054:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8015058:	b280      	uxth	r0, r0
 801505a:	bd38      	pop	{r3, r4, r5, pc}

0801505c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801505c:	b538      	push	{r3, r4, r5, lr}
 801505e:	4605      	mov	r5, r0
 8015060:	f001 fdbc 	bl	8016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015064:	4604      	mov	r4, r0
 8015066:	4628      	mov	r0, r5
 8015068:	f001 fcfc 	bl	8016a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801506c:	2800      	cmp	r0, #0
 801506e:	bf14      	ite	ne
 8015070:	2002      	movne	r0, #2
 8015072:	2000      	moveq	r0, #0
 8015074:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8015078:	f040 0001 	orr.w	r0, r0, #1
 801507c:	b280      	uxth	r0, r0
 801507e:	bd38      	pop	{r3, r4, r5, pc}

08015080 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8015080:	2000      	movs	r0, #0
 8015082:	4770      	bx	lr

08015084 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015084:	2001      	movs	r0, #1
 8015086:	4770      	bx	lr

08015088 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015088:	2002      	movs	r0, #2
 801508a:	4770      	bx	lr

0801508c <_ZN8touchgfx12GestureEventD1Ev>:
 801508c:	4770      	bx	lr

0801508e <_ZN8touchgfx9DragEventD1Ev>:
 801508e:	4770      	bx	lr

08015090 <_ZN8touchgfx10ClickEventD1Ev>:
 8015090:	4770      	bx	lr

08015092 <_ZN8touchgfx10ClickEventD0Ev>:
 8015092:	b510      	push	{r4, lr}
 8015094:	4604      	mov	r4, r0
 8015096:	210c      	movs	r1, #12
 8015098:	f00d f9e1 	bl	802245e <_ZdlPvj>
 801509c:	4620      	mov	r0, r4
 801509e:	bd10      	pop	{r4, pc}

080150a0 <_ZN8touchgfx9DragEventD0Ev>:
 80150a0:	b510      	push	{r4, lr}
 80150a2:	4604      	mov	r4, r0
 80150a4:	2110      	movs	r1, #16
 80150a6:	f00d f9da 	bl	802245e <_ZdlPvj>
 80150aa:	4620      	mov	r0, r4
 80150ac:	bd10      	pop	{r4, pc}

080150ae <_ZN8touchgfx12GestureEventD0Ev>:
 80150ae:	b510      	push	{r4, lr}
 80150b0:	4604      	mov	r4, r0
 80150b2:	210c      	movs	r1, #12
 80150b4:	f00d f9d3 	bl	802245e <_ZdlPvj>
 80150b8:	4620      	mov	r0, r4
 80150ba:	bd10      	pop	{r4, pc}

080150bc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80150bc:	b530      	push	{r4, r5, lr}
 80150be:	460d      	mov	r5, r1
 80150c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80150c2:	b087      	sub	sp, #28
 80150c4:	4604      	mov	r4, r0
 80150c6:	b301      	cbz	r1, 801510a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80150c8:	a801      	add	r0, sp, #4
 80150ca:	f7ff ff13 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80150ce:	892a      	ldrh	r2, [r5, #8]
 80150d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80150d4:	7928      	ldrb	r0, [r5, #4]
 80150d6:	1ad2      	subs	r2, r2, r3
 80150d8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80150da:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80150de:	441a      	add	r2, r3
 80150e0:	896b      	ldrh	r3, [r5, #10]
 80150e2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80150e6:	f88d 0010 	strb.w	r0, [sp, #16]
 80150ea:	1b5b      	subs	r3, r3, r5
 80150ec:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80150ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80150f0:	442b      	add	r3, r5
 80150f2:	4d07      	ldr	r5, [pc, #28]	; (8015110 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80150f4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80150f8:	9503      	str	r5, [sp, #12]
 80150fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 80150fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015102:	6803      	ldr	r3, [r0, #0]
 8015104:	a903      	add	r1, sp, #12
 8015106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015108:	4798      	blx	r3
 801510a:	b007      	add	sp, #28
 801510c:	bd30      	pop	{r4, r5, pc}
 801510e:	bf00      	nop
 8015110:	08025b98 	.word	0x08025b98

08015114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801511a:	b08a      	sub	sp, #40	; 0x28
 801511c:	4604      	mov	r4, r0
 801511e:	460d      	mov	r5, r1
 8015120:	b113      	cbz	r3, 8015128 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8015122:	790b      	ldrb	r3, [r1, #4]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d044      	beq.n	80151b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015128:	f104 0804 	add.w	r8, r4, #4
 801512c:	4641      	mov	r1, r8
 801512e:	a803      	add	r0, sp, #12
 8015130:	f7ff fee0 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015134:	792b      	ldrb	r3, [r5, #4]
 8015136:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801513a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801513e:	b983      	cbnz	r3, 8015162 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8015140:	892a      	ldrh	r2, [r5, #8]
 8015142:	88e9      	ldrh	r1, [r5, #6]
 8015144:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8015148:	1b92      	subs	r2, r2, r6
 801514a:	1bc9      	subs	r1, r1, r7
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	b212      	sxth	r2, r2
 8015156:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801515a:	b209      	sxth	r1, r1
 801515c:	4640      	mov	r0, r8
 801515e:	f7fb fd43 	bl	8010be8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8015162:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015164:	b329      	cbz	r1, 80151b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015166:	a805      	add	r0, sp, #20
 8015168:	f7ff fec4 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801516c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015170:	792b      	ldrb	r3, [r5, #4]
 8015172:	1abf      	subs	r7, r7, r2
 8015174:	88ea      	ldrh	r2, [r5, #6]
 8015176:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015178:	4417      	add	r7, r2
 801517a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801517c:	f88d 3020 	strb.w	r3, [sp, #32]
 8015180:	4417      	add	r7, r2
 8015182:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015186:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801518a:	1ab6      	subs	r6, r6, r2
 801518c:	892a      	ldrh	r2, [r5, #8]
 801518e:	a907      	add	r1, sp, #28
 8015190:	4416      	add	r6, r2
 8015192:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015194:	4416      	add	r6, r2
 8015196:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801519a:	2600      	movs	r6, #0
 801519c:	4a06      	ldr	r2, [pc, #24]	; (80151b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801519e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80151a2:	9207      	str	r2, [sp, #28]
 80151a4:	6803      	ldr	r3, [r0, #0]
 80151a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151a8:	4798      	blx	r3
 80151aa:	792b      	ldrb	r3, [r5, #4]
 80151ac:	b10b      	cbz	r3, 80151b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80151ae:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80151b2:	b00a      	add	sp, #40	; 0x28
 80151b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b8:	08025b70 	.word	0x08025b70

080151bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80151bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c0:	460c      	mov	r4, r1
 80151c2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80151c4:	b088      	sub	sp, #32
 80151c6:	4605      	mov	r5, r0
 80151c8:	2900      	cmp	r1, #0
 80151ca:	d06d      	beq.n	80152a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80151cc:	4668      	mov	r0, sp
 80151ce:	f7ff fe91 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80151d2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80151d4:	88e3      	ldrh	r3, [r4, #6]
 80151d6:	f9bd 8000 	ldrsh.w	r8, [sp]
 80151da:	440b      	add	r3, r1
 80151dc:	b21b      	sxth	r3, r3
 80151de:	4543      	cmp	r3, r8
 80151e0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80151e4:	db31      	blt.n	801524a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80151e6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80151ea:	44c4      	add	ip, r8
 80151ec:	fa0f fc8c 	sxth.w	ip, ip
 80151f0:	4563      	cmp	r3, ip
 80151f2:	da2a      	bge.n	801524a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80151f4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80151f6:	8926      	ldrh	r6, [r4, #8]
 80151f8:	4416      	add	r6, r2
 80151fa:	b236      	sxth	r6, r6
 80151fc:	42be      	cmp	r6, r7
 80151fe:	db24      	blt.n	801524a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015200:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015204:	4438      	add	r0, r7
 8015206:	b200      	sxth	r0, r0
 8015208:	4286      	cmp	r6, r0
 801520a:	da1e      	bge.n	801524a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801520c:	8963      	ldrh	r3, [r4, #10]
 801520e:	4419      	add	r1, r3
 8015210:	b209      	sxth	r1, r1
 8015212:	4541      	cmp	r1, r8
 8015214:	db08      	blt.n	8015228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015216:	4561      	cmp	r1, ip
 8015218:	da06      	bge.n	8015228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801521a:	89a3      	ldrh	r3, [r4, #12]
 801521c:	441a      	add	r2, r3
 801521e:	b212      	sxth	r2, r2
 8015220:	42ba      	cmp	r2, r7
 8015222:	db01      	blt.n	8015228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015224:	4282      	cmp	r2, r0
 8015226:	db10      	blt.n	801524a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015228:	4b21      	ldr	r3, [pc, #132]	; (80152b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801522a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801522c:	9304      	str	r3, [sp, #16]
 801522e:	2302      	movs	r3, #2
 8015230:	f88d 3014 	strb.w	r3, [sp, #20]
 8015234:	2300      	movs	r3, #0
 8015236:	f8ad 3016 	strh.w	r3, [sp, #22]
 801523a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801523e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015242:	6803      	ldr	r3, [r0, #0]
 8015244:	a904      	add	r1, sp, #16
 8015246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015248:	4798      	blx	r3
 801524a:	1d29      	adds	r1, r5, #4
 801524c:	a802      	add	r0, sp, #8
 801524e:	f7ff fe51 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015252:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015256:	88e0      	ldrh	r0, [r4, #6]
 8015258:	eba3 0808 	sub.w	r8, r3, r8
 801525c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015260:	7921      	ldrb	r1, [r4, #4]
 8015262:	1bdf      	subs	r7, r3, r7
 8015264:	b2bb      	uxth	r3, r7
 8015266:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801526a:	fa1f f888 	uxth.w	r8, r8
 801526e:	8922      	ldrh	r2, [r4, #8]
 8015270:	8967      	ldrh	r7, [r4, #10]
 8015272:	89a4      	ldrh	r4, [r4, #12]
 8015274:	4440      	add	r0, r8
 8015276:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8015278:	4460      	add	r0, ip
 801527a:	441a      	add	r2, r3
 801527c:	44b8      	add	r8, r7
 801527e:	4423      	add	r3, r4
 8015280:	4c0c      	ldr	r4, [pc, #48]	; (80152b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015282:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015286:	4433      	add	r3, r6
 8015288:	4432      	add	r2, r6
 801528a:	44e0      	add	r8, ip
 801528c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801528e:	f88d 1014 	strb.w	r1, [sp, #20]
 8015292:	9404      	str	r4, [sp, #16]
 8015294:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015298:	f8ad 801a 	strh.w	r8, [sp, #26]
 801529c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80152a0:	6803      	ldr	r3, [r0, #0]
 80152a2:	a904      	add	r1, sp, #16
 80152a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152a6:	4798      	blx	r3
 80152a8:	b008      	add	sp, #32
 80152aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152ae:	bf00      	nop
 80152b0:	08025b70 	.word	0x08025b70
 80152b4:	08025b84 	.word	0x08025b84

080152b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80152b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152ba:	4604      	mov	r4, r0
 80152bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80152c0:	3201      	adds	r2, #1
 80152c2:	d112      	bne.n	80152ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80152c4:	2500      	movs	r5, #0
 80152c6:	9500      	str	r5, [sp, #0]
 80152c8:	466d      	mov	r5, sp
 80152ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80152ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80152d2:	6803      	ldr	r3, [r0, #0]
 80152d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80152d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80152dc:	4629      	mov	r1, r5
 80152de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152e0:	4798      	blx	r3
 80152e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80152e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80152ea:	4620      	mov	r0, r4
 80152ec:	b003      	add	sp, #12
 80152ee:	bd30      	pop	{r4, r5, pc}

080152f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80152f0:	b513      	push	{r0, r1, r4, lr}
 80152f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80152f6:	4604      	mov	r4, r0
 80152f8:	3301      	adds	r3, #1
 80152fa:	d109      	bne.n	8015310 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80152fc:	4601      	mov	r1, r0
 80152fe:	4668      	mov	r0, sp
 8015300:	f7ff fdf8 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015304:	f8bd 3000 	ldrh.w	r3, [sp]
 8015308:	8423      	strh	r3, [r4, #32]
 801530a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801530e:	8463      	strh	r3, [r4, #34]	; 0x22
 8015310:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015314:	b002      	add	sp, #8
 8015316:	bd10      	pop	{r4, pc}

08015318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015318:	b513      	push	{r0, r1, r4, lr}
 801531a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801531e:	4604      	mov	r4, r0
 8015320:	3301      	adds	r3, #1
 8015322:	d109      	bne.n	8015338 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8015324:	4601      	mov	r1, r0
 8015326:	4668      	mov	r0, sp
 8015328:	f7ff fde4 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801532c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015330:	8423      	strh	r3, [r4, #32]
 8015332:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015336:	8463      	strh	r3, [r4, #34]	; 0x22
 8015338:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801533c:	b002      	add	sp, #8
 801533e:	bd10      	pop	{r4, pc}

08015340 <_ZN8touchgfx6ScreenC1Ev>:
 8015340:	b570      	push	{r4, r5, r6, lr}
 8015342:	4605      	mov	r5, r0
 8015344:	4b16      	ldr	r3, [pc, #88]	; (80153a0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8015346:	2101      	movs	r1, #1
 8015348:	f845 3b04 	str.w	r3, [r5], #4
 801534c:	2300      	movs	r3, #0
 801534e:	4604      	mov	r4, r0
 8015350:	8103      	strh	r3, [r0, #8]
 8015352:	8143      	strh	r3, [r0, #10]
 8015354:	8183      	strh	r3, [r0, #12]
 8015356:	81c3      	strh	r3, [r0, #14]
 8015358:	8203      	strh	r3, [r0, #16]
 801535a:	8243      	strh	r3, [r0, #18]
 801535c:	8283      	strh	r3, [r0, #20]
 801535e:	82c3      	strh	r3, [r0, #22]
 8015360:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8015364:	6203      	str	r3, [r0, #32]
 8015366:	8483      	strh	r3, [r0, #36]	; 0x24
 8015368:	84c3      	strh	r3, [r0, #38]	; 0x26
 801536a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801536e:	4a0d      	ldr	r2, [pc, #52]	; (80153a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8015370:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8015374:	6343      	str	r3, [r0, #52]	; 0x34
 8015376:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8015378:	6042      	str	r2, [r0, #4]
 801537a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801537e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8015380:	4a0a      	ldr	r2, [pc, #40]	; (80153ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8015382:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8015386:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801538a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801538e:	4628      	mov	r0, r5
 8015390:	4798      	blx	r3
 8015392:	6863      	ldr	r3, [r4, #4]
 8015394:	4628      	mov	r0, r5
 8015396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015398:	4631      	mov	r1, r6
 801539a:	4798      	blx	r3
 801539c:	4620      	mov	r0, r4
 801539e:	bd70      	pop	{r4, r5, r6, pc}
 80153a0:	08025bac 	.word	0x08025bac
 80153a4:	0802550c 	.word	0x0802550c
 80153a8:	20020082 	.word	0x20020082
 80153ac:	20020080 	.word	0x20020080

080153b0 <_ZN8touchgfx6Screen4drawEv>:
 80153b0:	b507      	push	{r0, r1, r2, lr}
 80153b2:	2100      	movs	r1, #0
 80153b4:	4b08      	ldr	r3, [pc, #32]	; (80153d8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80153b6:	9100      	str	r1, [sp, #0]
 80153b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80153bc:	4b07      	ldr	r3, [pc, #28]	; (80153dc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80153be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80153c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153c6:	4669      	mov	r1, sp
 80153c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80153cc:	6803      	ldr	r3, [r0, #0]
 80153ce:	689b      	ldr	r3, [r3, #8]
 80153d0:	4798      	blx	r3
 80153d2:	b003      	add	sp, #12
 80153d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80153d8:	20020080 	.word	0x20020080
 80153dc:	20020082 	.word	0x20020082

080153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80153e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80153e8:	b089      	sub	sp, #36	; 0x24
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	4680      	mov	r8, r0
 80153ee:	460c      	mov	r4, r1
 80153f0:	4615      	mov	r5, r2
 80153f2:	dd0e      	ble.n	8015412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80153f4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	dd0a      	ble.n	8015412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80153fc:	4628      	mov	r0, r5
 80153fe:	f7ff ff5b 	bl	80152b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015402:	4621      	mov	r1, r4
 8015404:	f7fe fb6e 	bl	8013ae4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015408:	69eb      	ldr	r3, [r5, #28]
 801540a:	b928      	cbnz	r0, 8015418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801540c:	461d      	mov	r5, r3
 801540e:	2b00      	cmp	r3, #0
 8015410:	d1f4      	bne.n	80153fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8015412:	b009      	add	sp, #36	; 0x24
 8015414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015418:	ae04      	add	r6, sp, #16
 801541a:	2b00      	cmp	r3, #0
 801541c:	f000 80b5 	beq.w	801558a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015420:	682b      	ldr	r3, [r5, #0]
 8015422:	4629      	mov	r1, r5
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	a802      	add	r0, sp, #8
 8015428:	4798      	blx	r3
 801542a:	4628      	mov	r0, r5
 801542c:	f7ff ff60 	bl	80152f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015430:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8015434:	4407      	add	r7, r0
 8015436:	4628      	mov	r0, r5
 8015438:	f7ff ff6e 	bl	8015318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801543c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015440:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015444:	4418      	add	r0, r3
 8015446:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801544a:	4621      	mov	r1, r4
 801544c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015450:	b23f      	sxth	r7, r7
 8015452:	4630      	mov	r0, r6
 8015454:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015458:	f8ad 3016 	strh.w	r3, [sp, #22]
 801545c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8015460:	f7fb fca2 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8015464:	4628      	mov	r0, r5
 8015466:	f7ff ff27 	bl	80152b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801546a:	4602      	mov	r2, r0
 801546c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015470:	ab06      	add	r3, sp, #24
 8015472:	e883 0003 	stmia.w	r3, {r0, r1}
 8015476:	4611      	mov	r1, r2
 8015478:	4618      	mov	r0, r3
 801547a:	f7fb fc95 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 801547e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015482:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015486:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801548a:	4299      	cmp	r1, r3
 801548c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015490:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015494:	d10b      	bne.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015496:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801549a:	4552      	cmp	r2, sl
 801549c:	d107      	bne.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801549e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80154a2:	455a      	cmp	r2, fp
 80154a4:	d103      	bne.n	80154ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80154a6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80154aa:	454a      	cmp	r2, r9
 80154ac:	d06d      	beq.n	801558a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80154ae:	f1bb 0f00 	cmp.w	fp, #0
 80154b2:	dd65      	ble.n	8015580 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80154b4:	f1b9 0f00 	cmp.w	r9, #0
 80154b8:	dd62      	ble.n	8015580 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80154ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80154be:	fa1f f08a 	uxth.w	r0, sl
 80154c2:	4552      	cmp	r2, sl
 80154c4:	9000      	str	r0, [sp, #0]
 80154c6:	da12      	bge.n	80154ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80154c8:	9301      	str	r3, [sp, #4]
 80154ca:	9b00      	ldr	r3, [sp, #0]
 80154cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80154d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80154d4:	1a9a      	subs	r2, r3, r2
 80154d6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80154da:	f8ad 0014 	strh.w	r0, [sp, #20]
 80154de:	f8ad 2016 	strh.w	r2, [sp, #22]
 80154e2:	69ea      	ldr	r2, [r5, #28]
 80154e4:	4631      	mov	r1, r6
 80154e6:	4640      	mov	r0, r8
 80154e8:	f7ff ff7a 	bl	80153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80154ec:	9b01      	ldr	r3, [sp, #4]
 80154ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 80154f2:	b29f      	uxth	r7, r3
 80154f4:	429a      	cmp	r2, r3
 80154f6:	da0d      	bge.n	8015514 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80154f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80154fc:	1aba      	subs	r2, r7, r2
 80154fe:	f8ad a012 	strh.w	sl, [sp, #18]
 8015502:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015506:	f8ad 9016 	strh.w	r9, [sp, #22]
 801550a:	69ea      	ldr	r2, [r5, #28]
 801550c:	4631      	mov	r1, r6
 801550e:	4640      	mov	r0, r8
 8015510:	f7ff ff66 	bl	80153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015514:	8822      	ldrh	r2, [r4, #0]
 8015516:	88a3      	ldrh	r3, [r4, #4]
 8015518:	445f      	add	r7, fp
 801551a:	4413      	add	r3, r2
 801551c:	b29b      	uxth	r3, r3
 801551e:	b2bf      	uxth	r7, r7
 8015520:	b23a      	sxth	r2, r7
 8015522:	b219      	sxth	r1, r3
 8015524:	4291      	cmp	r1, r2
 8015526:	dd0d      	ble.n	8015544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8015528:	1bdb      	subs	r3, r3, r7
 801552a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801552e:	f8ad a012 	strh.w	sl, [sp, #18]
 8015532:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015536:	f8ad 9016 	strh.w	r9, [sp, #22]
 801553a:	69ea      	ldr	r2, [r5, #28]
 801553c:	4631      	mov	r1, r6
 801553e:	4640      	mov	r0, r8
 8015540:	f7ff ff4e 	bl	80153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015544:	88e2      	ldrh	r2, [r4, #6]
 8015546:	8863      	ldrh	r3, [r4, #2]
 8015548:	4413      	add	r3, r2
 801554a:	9a00      	ldr	r2, [sp, #0]
 801554c:	b29b      	uxth	r3, r3
 801554e:	444a      	add	r2, r9
 8015550:	fa1f f982 	uxth.w	r9, r2
 8015554:	fa0f f289 	sxth.w	r2, r9
 8015558:	b219      	sxth	r1, r3
 801555a:	428a      	cmp	r2, r1
 801555c:	da15      	bge.n	801558a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801555e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015562:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015566:	eba3 0309 	sub.w	r3, r3, r9
 801556a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801556e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015572:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015576:	f8ad 3016 	strh.w	r3, [sp, #22]
 801557a:	69ea      	ldr	r2, [r5, #28]
 801557c:	4631      	mov	r1, r6
 801557e:	e001      	b.n	8015584 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8015580:	4621      	mov	r1, r4
 8015582:	69ea      	ldr	r2, [r5, #28]
 8015584:	4640      	mov	r0, r8
 8015586:	f7ff ff2b 	bl	80153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801558a:	4628      	mov	r0, r5
 801558c:	f7ff fe94 	bl	80152b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015590:	4633      	mov	r3, r6
 8015592:	4602      	mov	r2, r0
 8015594:	6861      	ldr	r1, [r4, #4]
 8015596:	6820      	ldr	r0, [r4, #0]
 8015598:	c303      	stmia	r3!, {r0, r1}
 801559a:	4611      	mov	r1, r2
 801559c:	4630      	mov	r0, r6
 801559e:	f7fb fc03 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 80155a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f77f af33 	ble.w	8015412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80155ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f77f af2e 	ble.w	8015412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80155b6:	4628      	mov	r0, r5
 80155b8:	f7ff fe9a 	bl	80152f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80155bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80155c0:	1a18      	subs	r0, r3, r0
 80155c2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80155c6:	4628      	mov	r0, r5
 80155c8:	f7ff fea6 	bl	8015318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80155cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80155d0:	4631      	mov	r1, r6
 80155d2:	1a18      	subs	r0, r3, r0
 80155d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80155d8:	682b      	ldr	r3, [r5, #0]
 80155da:	4628      	mov	r0, r5
 80155dc:	689b      	ldr	r3, [r3, #8]
 80155de:	4798      	blx	r3
 80155e0:	e717      	b.n	8015412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080155e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80155e2:	b570      	push	{r4, r5, r6, lr}
 80155e4:	2300      	movs	r3, #0
 80155e6:	460c      	mov	r4, r1
 80155e8:	b086      	sub	sp, #24
 80155ea:	1d06      	adds	r6, r0, #4
 80155ec:	4631      	mov	r1, r6
 80155ee:	4605      	mov	r5, r0
 80155f0:	a802      	add	r0, sp, #8
 80155f2:	9301      	str	r3, [sp, #4]
 80155f4:	f7ff fc7e 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80155f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80155fc:	8822      	ldrh	r2, [r4, #0]
 80155fe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015602:	1ad2      	subs	r2, r2, r3
 8015604:	8863      	ldrh	r3, [r4, #2]
 8015606:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801560a:	1a5b      	subs	r3, r3, r1
 801560c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015610:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015614:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015618:	f8ad 1016 	strh.w	r1, [sp, #22]
 801561c:	aa01      	add	r2, sp, #4
 801561e:	a904      	add	r1, sp, #16
 8015620:	4630      	mov	r0, r6
 8015622:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015626:	f7fb fc97 	bl	8010f58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801562a:	9a01      	ldr	r2, [sp, #4]
 801562c:	b11a      	cbz	r2, 8015636 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801562e:	4621      	mov	r1, r4
 8015630:	4628      	mov	r0, r5
 8015632:	f7ff fed5 	bl	80153e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015636:	b006      	add	sp, #24
 8015638:	bd70      	pop	{r4, r5, r6, pc}

0801563a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801563a:	b530      	push	{r4, r5, lr}
 801563c:	4602      	mov	r2, r0
 801563e:	b085      	sub	sp, #20
 8015640:	460d      	mov	r5, r1
 8015642:	466b      	mov	r3, sp
 8015644:	4604      	mov	r4, r0
 8015646:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801564a:	6851      	ldr	r1, [r2, #4]
 801564c:	c303      	stmia	r3!, {r0, r1}
 801564e:	4629      	mov	r1, r5
 8015650:	4668      	mov	r0, sp
 8015652:	f7fb fba9 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 8015656:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801565a:	b12b      	cbz	r3, 8015668 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801565c:	4669      	mov	r1, sp
 801565e:	4620      	mov	r0, r4
 8015660:	f7ff ffbf 	bl	80155e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8015664:	b005      	add	sp, #20
 8015666:	bd30      	pop	{r4, r5, pc}
 8015668:	3404      	adds	r4, #4
 801566a:	4621      	mov	r1, r4
 801566c:	a802      	add	r0, sp, #8
 801566e:	f7ff fc41 	bl	8014ef4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015672:	f8bd 3000 	ldrh.w	r3, [sp]
 8015676:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801567a:	4669      	mov	r1, sp
 801567c:	1a9b      	subs	r3, r3, r2
 801567e:	f8ad 3000 	strh.w	r3, [sp]
 8015682:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015686:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801568a:	4620      	mov	r0, r4
 801568c:	1a9b      	subs	r3, r3, r2
 801568e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015692:	f7fb fc28 	bl	8010ee6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015696:	e7e5      	b.n	8015664 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015698 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015698:	460b      	mov	r3, r1
 801569a:	680a      	ldr	r2, [r1, #0]
 801569c:	1d01      	adds	r1, r0, #4
 801569e:	6992      	ldr	r2, [r2, #24]
 80156a0:	4618      	mov	r0, r3
 80156a2:	4710      	bx	r2

080156a4 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80156a4:	4298      	cmp	r0, r3
 80156a6:	d200      	bcs.n	80156aa <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80156a8:	b913      	cbnz	r3, 80156b0 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80156aa:	440a      	add	r2, r1
 80156ac:	b210      	sxth	r0, r2
 80156ae:	4770      	bx	lr
 80156b0:	ee07 2a90 	vmov	s15, r2
 80156b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80156b8:	ee07 0a90 	vmov	s15, r0
 80156bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156c4:	ee07 3a10 	vmov	s14, r3
 80156c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80156cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80156d0:	ee07 1a90 	vmov	s15, r1
 80156d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80156e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e8:	bfcc      	ite	gt
 80156ea:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80156ee:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80156f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156f6:	ee17 3a90 	vmov	r3, s15
 80156fa:	b218      	sxth	r0, r3
 80156fc:	4770      	bx	lr

080156fe <_ZN8touchgfx12TextProviderC1Ev>:
 80156fe:	b538      	push	{r3, r4, r5, lr}
 8015700:	2500      	movs	r5, #0
 8015702:	2302      	movs	r3, #2
 8015704:	4604      	mov	r4, r0
 8015706:	e9c0 5500 	strd	r5, r5, [r0]
 801570a:	7403      	strb	r3, [r0, #16]
 801570c:	6145      	str	r5, [r0, #20]
 801570e:	7605      	strb	r5, [r0, #24]
 8015710:	83c5      	strh	r5, [r0, #30]
 8015712:	8405      	strh	r5, [r0, #32]
 8015714:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015716:	8705      	strh	r5, [r0, #56]	; 0x38
 8015718:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801571a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801571e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8015722:	220e      	movs	r2, #14
 8015724:	4629      	mov	r1, r5
 8015726:	304c      	adds	r0, #76	; 0x4c
 8015728:	f00d fdad 	bl	8023286 <memset>
 801572c:	2301      	movs	r3, #1
 801572e:	4620      	mov	r0, r4
 8015730:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8015734:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015738:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801573c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8015740:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8015744:	f7f8 ffbe 	bl	800e6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8015748:	4620      	mov	r0, r4
 801574a:	bd38      	pop	{r3, r4, r5, pc}

0801574c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801574c:	b530      	push	{r4, r5, lr}
 801574e:	2500      	movs	r5, #0
 8015750:	2401      	movs	r4, #1
 8015752:	6843      	ldr	r3, [r0, #4]
 8015754:	b913      	cbnz	r3, 801575c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015756:	6803      	ldr	r3, [r0, #0]
 8015758:	b313      	cbz	r3, 80157a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801575a:	6043      	str	r3, [r0, #4]
 801575c:	7e03      	ldrb	r3, [r0, #24]
 801575e:	b143      	cbz	r3, 8015772 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8015760:	6943      	ldr	r3, [r0, #20]
 8015762:	b12b      	cbz	r3, 8015770 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015764:	881a      	ldrh	r2, [r3, #0]
 8015766:	b11a      	cbz	r2, 8015770 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015768:	1c9a      	adds	r2, r3, #2
 801576a:	6142      	str	r2, [r0, #20]
 801576c:	8818      	ldrh	r0, [r3, #0]
 801576e:	bd30      	pop	{r4, r5, pc}
 8015770:	7605      	strb	r5, [r0, #24]
 8015772:	6843      	ldr	r3, [r0, #4]
 8015774:	8819      	ldrh	r1, [r3, #0]
 8015776:	b199      	cbz	r1, 80157a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015778:	1c9a      	adds	r2, r3, #2
 801577a:	2902      	cmp	r1, #2
 801577c:	6042      	str	r2, [r0, #4]
 801577e:	d1f5      	bne.n	801576c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8015780:	7c03      	ldrb	r3, [r0, #16]
 8015782:	2b01      	cmp	r3, #1
 8015784:	d8e5      	bhi.n	8015752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015786:	1c5a      	adds	r2, r3, #1
 8015788:	7402      	strb	r2, [r0, #16]
 801578a:	3302      	adds	r3, #2
 801578c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015790:	6143      	str	r3, [r0, #20]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0dd      	beq.n	8015752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015796:	881b      	ldrh	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d0da      	beq.n	8015752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801579c:	7604      	strb	r4, [r0, #24]
 801579e:	e7d8      	b.n	8015752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80157a0:	2000      	movs	r0, #0
 80157a2:	e7e4      	b.n	801576e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080157a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80157a4:	6001      	str	r1, [r0, #0]
 80157a6:	2100      	movs	r1, #0
 80157a8:	b430      	push	{r4, r5}
 80157aa:	6041      	str	r1, [r0, #4]
 80157ac:	6815      	ldr	r5, [r2, #0]
 80157ae:	6085      	str	r5, [r0, #8]
 80157b0:	6852      	ldr	r2, [r2, #4]
 80157b2:	6443      	str	r3, [r0, #68]	; 0x44
 80157b4:	9b02      	ldr	r3, [sp, #8]
 80157b6:	60c2      	str	r2, [r0, #12]
 80157b8:	7401      	strb	r1, [r0, #16]
 80157ba:	6141      	str	r1, [r0, #20]
 80157bc:	7601      	strb	r1, [r0, #24]
 80157be:	8701      	strh	r1, [r0, #56]	; 0x38
 80157c0:	8401      	strh	r1, [r0, #32]
 80157c2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80157c6:	6483      	str	r3, [r0, #72]	; 0x48
 80157c8:	bc30      	pop	{r4, r5}
 80157ca:	f7f8 bf7b 	b.w	800e6c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080157ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80157ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157d0:	4605      	mov	r5, r0
 80157d2:	4608      	mov	r0, r1
 80157d4:	b1e9      	cbz	r1, 8015812 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80157d6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80157da:	460b      	mov	r3, r1
 80157dc:	4622      	mov	r2, r4
 80157de:	f101 0708 	add.w	r7, r1, #8
 80157e2:	4626      	mov	r6, r4
 80157e4:	6818      	ldr	r0, [r3, #0]
 80157e6:	6859      	ldr	r1, [r3, #4]
 80157e8:	3308      	adds	r3, #8
 80157ea:	c603      	stmia	r6!, {r0, r1}
 80157ec:	42bb      	cmp	r3, r7
 80157ee:	4634      	mov	r4, r6
 80157f0:	d1f7      	bne.n	80157e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80157f2:	6818      	ldr	r0, [r3, #0]
 80157f4:	6030      	str	r0, [r6, #0]
 80157f6:	4610      	mov	r0, r2
 80157f8:	889b      	ldrh	r3, [r3, #4]
 80157fa:	80b3      	strh	r3, [r6, #4]
 80157fc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8015800:	015b      	lsls	r3, r3, #5
 8015802:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015806:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801580a:	430b      	orrs	r3, r1
 801580c:	425b      	negs	r3, r3
 801580e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	460c      	mov	r4, r1
 8015818:	6811      	ldr	r1, [r2, #0]
 801581a:	4610      	mov	r0, r2
 801581c:	68cd      	ldr	r5, [r1, #12]
 801581e:	4619      	mov	r1, r3
 8015820:	47a8      	blx	r5
 8015822:	2800      	cmp	r0, #0
 8015824:	bf08      	it	eq
 8015826:	4620      	moveq	r0, r4
 8015828:	bd38      	pop	{r3, r4, r5, pc}
	...

0801582c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	4604      	mov	r4, r0
 8015830:	4615      	mov	r5, r2
 8015832:	4608      	mov	r0, r1
 8015834:	b93a      	cbnz	r2, 8015846 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015836:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801583a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801583e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015842:	4628      	mov	r0, r5
 8015844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015846:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801584a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801584e:	8893      	ldrh	r3, [r2, #4]
 8015850:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015854:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015858:	79ee      	ldrb	r6, [r5, #7]
 801585a:	4316      	orrs	r6, r2
 801585c:	19da      	adds	r2, r3, r7
 801585e:	b291      	uxth	r1, r2
 8015860:	291d      	cmp	r1, #29
 8015862:	b2b7      	uxth	r7, r6
 8015864:	d879      	bhi.n	801595a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8015866:	2201      	movs	r2, #1
 8015868:	408a      	lsls	r2, r1
 801586a:	4974      	ldr	r1, [pc, #464]	; (8015a3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801586c:	10f6      	asrs	r6, r6, #3
 801586e:	420a      	tst	r2, r1
 8015870:	d12d      	bne.n	80158ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8015872:	f412 7f60 	tst.w	r2, #896	; 0x380
 8015876:	d070      	beq.n	801595a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8015878:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801587c:	462b      	mov	r3, r5
 801587e:	f105 0e08 	add.w	lr, r5, #8
 8015882:	4615      	mov	r5, r2
 8015884:	4694      	mov	ip, r2
 8015886:	6818      	ldr	r0, [r3, #0]
 8015888:	6859      	ldr	r1, [r3, #4]
 801588a:	3308      	adds	r3, #8
 801588c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015890:	4573      	cmp	r3, lr
 8015892:	4662      	mov	r2, ip
 8015894:	d1f6      	bne.n	8015884 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8015896:	6818      	ldr	r0, [r3, #0]
 8015898:	f8cc 0000 	str.w	r0, [ip]
 801589c:	889b      	ldrh	r3, [r3, #4]
 801589e:	f8ac 3004 	strh.w	r3, [ip, #4]
 80158a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80158a6:	b2b3      	uxth	r3, r6
 80158a8:	1aca      	subs	r2, r1, r3
 80158aa:	b292      	uxth	r2, r2
 80158ac:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80158b0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80158b4:	10d2      	asrs	r2, r2, #3
 80158b6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80158ba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80158be:	4302      	orrs	r2, r0
 80158c0:	1bcf      	subs	r7, r1, r7
 80158c2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80158c6:	1afb      	subs	r3, r7, r3
 80158c8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80158cc:	e7b9      	b.n	8015842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80158ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80158d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80158d4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80158d6:	f640 6333 	movw	r3, #3635	; 0xe33
 80158da:	4299      	cmp	r1, r3
 80158dc:	d110      	bne.n	8015900 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80158de:	6803      	ldr	r3, [r0, #0]
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	4798      	blx	r3
 80158e4:	7b41      	ldrb	r1, [r0, #13]
 80158e6:	00cb      	lsls	r3, r1, #3
 80158e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80158ec:	7a03      	ldrb	r3, [r0, #8]
 80158ee:	0648      	lsls	r0, r1, #25
 80158f0:	ea43 0302 	orr.w	r3, r3, r2
 80158f4:	bf44      	itt	mi
 80158f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80158fa:	b21b      	sxthmi	r3, r3
 80158fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015900:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015904:	462a      	mov	r2, r5
 8015906:	443b      	add	r3, r7
 8015908:	4433      	add	r3, r6
 801590a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801590e:	f105 0c08 	add.w	ip, r5, #8
 8015912:	4635      	mov	r5, r6
 8015914:	b29b      	uxth	r3, r3
 8015916:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801591a:	4637      	mov	r7, r6
 801591c:	6810      	ldr	r0, [r2, #0]
 801591e:	6851      	ldr	r1, [r2, #4]
 8015920:	3208      	adds	r2, #8
 8015922:	c703      	stmia	r7!, {r0, r1}
 8015924:	4562      	cmp	r2, ip
 8015926:	463e      	mov	r6, r7
 8015928:	d1f7      	bne.n	801591a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801592a:	6810      	ldr	r0, [r2, #0]
 801592c:	6038      	str	r0, [r7, #0]
 801592e:	8892      	ldrh	r2, [r2, #4]
 8015930:	80ba      	strh	r2, [r7, #4]
 8015932:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015936:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801593a:	10db      	asrs	r3, r3, #3
 801593c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015944:	4313      	orrs	r3, r2
 8015946:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801594a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801594e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8015952:	1a9b      	subs	r3, r3, r2
 8015954:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015958:	e773      	b.n	8015842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801595a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801595e:	f023 0204 	bic.w	r2, r3, #4
 8015962:	428a      	cmp	r2, r1
 8015964:	d003      	beq.n	801596e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8015966:	f640 621d 	movw	r2, #3613	; 0xe1d
 801596a:	4293      	cmp	r3, r2
 801596c:	d120      	bne.n	80159b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801596e:	3b01      	subs	r3, #1
 8015970:	4602      	mov	r2, r0
 8015972:	b29b      	uxth	r3, r3
 8015974:	4629      	mov	r1, r5
 8015976:	4620      	mov	r0, r4
 8015978:	f7ff ff4c 	bl	8015814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801597c:	7b41      	ldrb	r1, [r0, #13]
 801597e:	00cb      	lsls	r3, r1, #3
 8015980:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015984:	7a03      	ldrb	r3, [r0, #8]
 8015986:	0649      	lsls	r1, r1, #25
 8015988:	ea43 0302 	orr.w	r3, r3, r2
 801598c:	bf44      	itt	mi
 801598e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015992:	b21b      	sxthmi	r3, r3
 8015994:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015998:	7b6b      	ldrb	r3, [r5, #13]
 801599a:	7aaa      	ldrb	r2, [r5, #10]
 801599c:	005b      	lsls	r3, r3, #1
 801599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159a2:	4313      	orrs	r3, r2
 80159a4:	115a      	asrs	r2, r3, #5
 80159a6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80159aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80159ae:	e036      	b.n	8015a1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80159b0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80159b4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80159b8:	7a2a      	ldrb	r2, [r5, #8]
 80159ba:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80159be:	ea42 0201 	orr.w	r2, r2, r1
 80159c2:	f640 6109 	movw	r1, #3593	; 0xe09
 80159c6:	bf1c      	itt	ne
 80159c8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80159cc:	b212      	sxthne	r2, r2
 80159ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80159d2:	f023 0210 	bic.w	r2, r3, #16
 80159d6:	428a      	cmp	r2, r1
 80159d8:	d003      	beq.n	80159e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80159da:	f640 6213 	movw	r2, #3603	; 0xe13
 80159de:	4293      	cmp	r3, r2
 80159e0:	d12a      	bne.n	8015a38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80159e2:	7b6e      	ldrb	r6, [r5, #13]
 80159e4:	4629      	mov	r1, r5
 80159e6:	0076      	lsls	r6, r6, #1
 80159e8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80159ec:	7aae      	ldrb	r6, [r5, #10]
 80159ee:	4316      	orrs	r6, r2
 80159f0:	f640 6213 	movw	r2, #3603	; 0xe13
 80159f4:	4293      	cmp	r3, r2
 80159f6:	bf18      	it	ne
 80159f8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80159fc:	4602      	mov	r2, r0
 80159fe:	bf14      	ite	ne
 8015a00:	b29b      	uxthne	r3, r3
 8015a02:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015a06:	4620      	mov	r0, r4
 8015a08:	f7ff ff04 	bl	8015814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015a0c:	7b43      	ldrb	r3, [r0, #13]
 8015a0e:	7a82      	ldrb	r2, [r0, #10]
 8015a10:	005b      	lsls	r3, r3, #1
 8015a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a16:	4313      	orrs	r3, r2
 8015a18:	1af6      	subs	r6, r6, r3
 8015a1a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8015a1e:	7b69      	ldrb	r1, [r5, #13]
 8015a20:	00cb      	lsls	r3, r1, #3
 8015a22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015a26:	7a2b      	ldrb	r3, [r5, #8]
 8015a28:	4313      	orrs	r3, r2
 8015a2a:	064a      	lsls	r2, r1, #25
 8015a2c:	bf44      	itt	mi
 8015a2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015a32:	b21b      	sxthmi	r3, r3
 8015a34:	1bdb      	subs	r3, r3, r7
 8015a36:	e747      	b.n	80158c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e7b6      	b.n	80159aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8015a3c:	3fc00079 	.word	0x3fc00079

08015a40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a44:	4604      	mov	r4, r0
 8015a46:	b942      	cbnz	r2, 8015a5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a4c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015a50:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015a54:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015a58:	e047      	b.n	8015aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015a5a:	7b51      	ldrb	r1, [r2, #13]
 8015a5c:	8893      	ldrh	r3, [r2, #4]
 8015a5e:	010d      	lsls	r5, r1, #4
 8015a60:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8015a64:	79d5      	ldrb	r5, [r2, #7]
 8015a66:	4305      	orrs	r5, r0
 8015a68:	2d04      	cmp	r5, #4
 8015a6a:	bfcc      	ite	gt
 8015a6c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8015a70:	f04f 0e01 	movle.w	lr, #1
 8015a74:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8015a78:	f200 80ab 	bhi.w	8015bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015a7c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8015a80:	4283      	cmp	r3, r0
 8015a82:	d216      	bcs.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015a84:	f240 605b 	movw	r0, #1627	; 0x65b
 8015a88:	4283      	cmp	r3, r0
 8015a8a:	d859      	bhi.n	8015b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015a8c:	f240 6057 	movw	r0, #1623	; 0x657
 8015a90:	4283      	cmp	r3, r0
 8015a92:	d20e      	bcs.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015a94:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015a98:	d24a      	bcs.n	8015b30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015a9a:	f240 604e 	movw	r0, #1614	; 0x64e
 8015a9e:	4283      	cmp	r3, r0
 8015aa0:	d207      	bcs.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015aa2:	f240 601a 	movw	r0, #1562	; 0x61a
 8015aa6:	4283      	cmp	r3, r0
 8015aa8:	d02a      	beq.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015aaa:	d821      	bhi.n	8015af0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015aac:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8015ab0:	d35b      	bcc.n	8015b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015ab2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8015ab6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015aba:	f040 80d0 	bne.w	8015c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015abe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015ac2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015ac6:	f040 80ca 	bne.w	8015c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015aca:	00cb      	lsls	r3, r1, #3
 8015acc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015ad0:	7a13      	ldrb	r3, [r2, #8]
 8015ad2:	0649      	lsls	r1, r1, #25
 8015ad4:	ea43 0300 	orr.w	r3, r3, r0
 8015ad8:	bf44      	itt	mi
 8015ada:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015ade:	b21b      	sxthmi	r3, r3
 8015ae0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015ae4:	1b5d      	subs	r5, r3, r5
 8015ae6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015aea:	4610      	mov	r0, r2
 8015aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015af0:	f240 604b 	movw	r0, #1611	; 0x64b
 8015af4:	4283      	cmp	r3, r0
 8015af6:	d338      	bcc.n	8015b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015af8:	f240 604c 	movw	r0, #1612	; 0x64c
 8015afc:	4283      	cmp	r3, r0
 8015afe:	d9d8      	bls.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b00:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015b04:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015b08:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015b0c:	f040 80f2 	bne.w	8015cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8015b10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015b14:	f040 80ee 	bne.w	8015cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8015b18:	00cb      	lsls	r3, r1, #3
 8015b1a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015b1e:	7a13      	ldrb	r3, [r2, #8]
 8015b20:	064e      	lsls	r6, r1, #25
 8015b22:	ea43 0300 	orr.w	r3, r3, r0
 8015b26:	bf44      	itt	mi
 8015b28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015b2c:	b21b      	sxthmi	r3, r3
 8015b2e:	e7d9      	b.n	8015ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015b30:	f240 6054 	movw	r0, #1620	; 0x654
 8015b34:	4283      	cmp	r3, r0
 8015b36:	d8e3      	bhi.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015b38:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015b3c:	d9e0      	bls.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015b3e:	e7b8      	b.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b40:	f240 6074 	movw	r0, #1652	; 0x674
 8015b44:	4283      	cmp	r3, r0
 8015b46:	d0b4      	beq.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b48:	d82d      	bhi.n	8015ba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8015b4a:	f240 605e 	movw	r0, #1630	; 0x65e
 8015b4e:	4283      	cmp	r3, r0
 8015b50:	d804      	bhi.n	8015b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015b52:	f240 605d 	movw	r0, #1629	; 0x65d
 8015b56:	4283      	cmp	r3, r0
 8015b58:	d3d2      	bcc.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015b5a:	e7aa      	b.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b5c:	f240 605f 	movw	r0, #1631	; 0x65f
 8015b60:	4283      	cmp	r3, r0
 8015b62:	d0cd      	beq.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015b64:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8015b68:	d0a3      	beq.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015b6a:	00cb      	lsls	r3, r1, #3
 8015b6c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015b70:	7a13      	ldrb	r3, [r2, #8]
 8015b72:	0649      	lsls	r1, r1, #25
 8015b74:	ea43 0300 	orr.w	r3, r3, r0
 8015b78:	bf44      	itt	mi
 8015b7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015b7e:	b21b      	sxthmi	r3, r3
 8015b80:	1b5d      	subs	r5, r3, r5
 8015b82:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015b86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015b8a:	7b53      	ldrb	r3, [r2, #13]
 8015b8c:	015b      	lsls	r3, r3, #5
 8015b8e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015b92:	7993      	ldrb	r3, [r2, #6]
 8015b94:	430b      	orrs	r3, r1
 8015b96:	2105      	movs	r1, #5
 8015b98:	005b      	lsls	r3, r3, #1
 8015b9a:	fb93 f3f1 	sdiv	r3, r3, r1
 8015b9e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015ba2:	440b      	add	r3, r1
 8015ba4:	e756      	b.n	8015a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015ba6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8015baa:	4283      	cmp	r3, r0
 8015bac:	d809      	bhi.n	8015bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015bae:	f240 60df 	movw	r0, #1759	; 0x6df
 8015bb2:	4283      	cmp	r3, r0
 8015bb4:	f4bf af7d 	bcs.w	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015bb8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8015bbc:	2b05      	cmp	r3, #5
 8015bbe:	d8d4      	bhi.n	8015b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015bc0:	e777      	b.n	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015bc2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015bc6:	4283      	cmp	r3, r0
 8015bc8:	d09a      	beq.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015bca:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8015bce:	4283      	cmp	r3, r0
 8015bd0:	e7ca      	b.n	8015b68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015bd2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015bd6:	d22b      	bcs.n	8015c30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015bd8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8015bdc:	4283      	cmp	r3, r0
 8015bde:	d28f      	bcs.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015be0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015be4:	4283      	cmp	r3, r0
 8015be6:	d816      	bhi.n	8015c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015be8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8015bec:	4283      	cmp	r3, r0
 8015bee:	f4bf af60 	bcs.w	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015bf2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015bf6:	4283      	cmp	r3, r0
 8015bf8:	d80a      	bhi.n	8015c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015bfa:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8015bfe:	4283      	cmp	r3, r0
 8015c00:	f4bf af57 	bcs.w	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c04:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8015c08:	4283      	cmp	r3, r0
 8015c0a:	f43f af79 	beq.w	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c0e:	e7ac      	b.n	8015b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015c10:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015c14:	e7f8      	b.n	8015c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015c16:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8015c1a:	4283      	cmp	r3, r0
 8015c1c:	d802      	bhi.n	8015c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8015c1e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015c22:	e798      	b.n	8015b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015c24:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8015c28:	4283      	cmp	r3, r0
 8015c2a:	f47f af42 	bne.w	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c2e:	e767      	b.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c30:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8015c34:	4283      	cmp	r3, r0
 8015c36:	f43f af63 	beq.w	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c3a:	d802      	bhi.n	8015c42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8015c3c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8015c40:	e7f2      	b.n	8015c28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8015c42:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8015c46:	4283      	cmp	r3, r0
 8015c48:	d805      	bhi.n	8015c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8015c4a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8015c4e:	4283      	cmp	r3, r0
 8015c50:	f4ff af2f 	bcc.w	8015ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015c54:	e754      	b.n	8015b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015c56:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8015c5a:	4283      	cmp	r3, r0
 8015c5c:	e7af      	b.n	8015bbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8015c5e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8015c62:	4617      	mov	r7, r2
 8015c64:	4666      	mov	r6, ip
 8015c66:	f102 0808 	add.w	r8, r2, #8
 8015c6a:	46e6      	mov	lr, ip
 8015c6c:	6838      	ldr	r0, [r7, #0]
 8015c6e:	6879      	ldr	r1, [r7, #4]
 8015c70:	3708      	adds	r7, #8
 8015c72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015c76:	4547      	cmp	r7, r8
 8015c78:	46f4      	mov	ip, lr
 8015c7a:	d1f6      	bne.n	8015c6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8015c7c:	6838      	ldr	r0, [r7, #0]
 8015c7e:	f8ce 0000 	str.w	r0, [lr]
 8015c82:	88b9      	ldrh	r1, [r7, #4]
 8015c84:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015c88:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015c8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015c90:	d009      	beq.n	8015ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8015c92:	7b51      	ldrb	r1, [r2, #13]
 8015c94:	7992      	ldrb	r2, [r2, #6]
 8015c96:	0149      	lsls	r1, r1, #5
 8015c98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015c9c:	4311      	orrs	r1, r2
 8015c9e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015ca2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015ca6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015caa:	b2ad      	uxth	r5, r5
 8015cac:	d00d      	beq.n	8015cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8015cae:	442b      	add	r3, r5
 8015cb0:	b29b      	uxth	r3, r3
 8015cb2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015cb6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015cba:	10db      	asrs	r3, r3, #3
 8015cbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015cc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015cc4:	4313      	orrs	r3, r2
 8015cc6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015cca:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015cce:	00cb      	lsls	r3, r1, #3
 8015cd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015cd4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8015cd8:	064f      	lsls	r7, r1, #25
 8015cda:	ea43 0302 	orr.w	r3, r3, r2
 8015cde:	bf44      	itt	mi
 8015ce0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015ce4:	b21b      	sxthmi	r3, r3
 8015ce6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015cea:	1b5b      	subs	r3, r3, r5
 8015cec:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015cf0:	4632      	mov	r2, r6
 8015cf2:	e6fa      	b.n	8015aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015cf4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8015cf8:	4617      	mov	r7, r2
 8015cfa:	4666      	mov	r6, ip
 8015cfc:	f102 0908 	add.w	r9, r2, #8
 8015d00:	46e0      	mov	r8, ip
 8015d02:	6838      	ldr	r0, [r7, #0]
 8015d04:	6879      	ldr	r1, [r7, #4]
 8015d06:	3708      	adds	r7, #8
 8015d08:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015d0c:	454f      	cmp	r7, r9
 8015d0e:	46c4      	mov	ip, r8
 8015d10:	d1f6      	bne.n	8015d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8015d12:	6838      	ldr	r0, [r7, #0]
 8015d14:	f8c8 0000 	str.w	r0, [r8]
 8015d18:	88b9      	ldrh	r1, [r7, #4]
 8015d1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015d1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015d22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015d26:	d009      	beq.n	8015d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8015d28:	7b51      	ldrb	r1, [r2, #13]
 8015d2a:	7992      	ldrb	r2, [r2, #6]
 8015d2c:	0149      	lsls	r1, r1, #5
 8015d2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015d32:	4311      	orrs	r1, r2
 8015d34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015d38:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015d3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015d40:	d00e      	beq.n	8015d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8015d42:	eba3 030e 	sub.w	r3, r3, lr
 8015d46:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015d50:	10db      	asrs	r3, r3, #3
 8015d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015d5a:	4313      	orrs	r3, r2
 8015d5c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015d60:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015d64:	00cb      	lsls	r3, r1, #3
 8015d66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015d6a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8015d6e:	0648      	lsls	r0, r1, #25
 8015d70:	ea43 0302 	orr.w	r3, r3, r2
 8015d74:	bf44      	itt	mi
 8015d76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015d7a:	b21b      	sxthmi	r3, r3
 8015d7c:	1b5d      	subs	r5, r3, r5
 8015d7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015d82:	e7b5      	b.n	8015cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08015d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d88:	461e      	mov	r6, r3
 8015d8a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015d92:	4617      	mov	r7, r2
 8015d94:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8015d98:	f7f8 fbee 	bl	800e578 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	b918      	cbnz	r0, 8015da8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8015da0:	6030      	str	r0, [r6, #0]
 8015da2:	4628      	mov	r0, r5
 8015da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	4601      	mov	r1, r0
 8015dac:	68db      	ldr	r3, [r3, #12]
 8015dae:	4638      	mov	r0, r7
 8015db0:	4798      	blx	r3
 8015db2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8015db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015dba:	4602      	mov	r2, r0
 8015dbc:	6030      	str	r0, [r6, #0]
 8015dbe:	d213      	bcs.n	8015de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015dc0:	4643      	mov	r3, r8
 8015dc2:	4639      	mov	r1, r7
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	f7ff fe3b 	bl	8015a40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015dca:	6030      	str	r0, [r6, #0]
 8015dcc:	6833      	ldr	r3, [r6, #0]
 8015dce:	b143      	cbz	r3, 8015de2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015dd0:	7b5a      	ldrb	r2, [r3, #13]
 8015dd2:	7a9b      	ldrb	r3, [r3, #10]
 8015dd4:	0052      	lsls	r2, r2, #1
 8015dd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	bf0c      	ite	eq
 8015dde:	2301      	moveq	r3, #1
 8015de0:	2300      	movne	r3, #0
 8015de2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8015de6:	e7dc      	b.n	8015da2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015de8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015dec:	b29b      	uxth	r3, r3
 8015dee:	2b7f      	cmp	r3, #127	; 0x7f
 8015df0:	d804      	bhi.n	8015dfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015df2:	4639      	mov	r1, r7
 8015df4:	4620      	mov	r0, r4
 8015df6:	f7ff fd19 	bl	801582c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015dfa:	e7e6      	b.n	8015dca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015dfc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d0e3      	beq.n	8015dcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015e04:	f640 1302 	movw	r3, #2306	; 0x902
 8015e08:	429d      	cmp	r5, r3
 8015e0a:	d1df      	bne.n	8015dcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015e0c:	4601      	mov	r1, r0
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7ff fcdd 	bl	80157ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015e14:	e7d9      	b.n	8015dca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015e16:	b510      	push	{r4, lr}
 8015e18:	4604      	mov	r4, r0
 8015e1a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8015e1e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015e20:	b1f1      	cbz	r1, 8015e60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8015e22:	2b0a      	cmp	r3, #10
 8015e24:	d02f      	beq.n	8015e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8015e26:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015e28:	3901      	subs	r1, #1
 8015e2a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8015e2e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8015e30:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8015e34:	1c51      	adds	r1, r2, #1
 8015e36:	b289      	uxth	r1, r1
 8015e38:	2901      	cmp	r1, #1
 8015e3a:	bf84      	itt	hi
 8015e3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015e40:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8015e42:	f103 0201 	add.w	r2, r3, #1
 8015e46:	8722      	strh	r2, [r4, #56]	; 0x38
 8015e48:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015e4a:	bf98      	it	ls
 8015e4c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8015e4e:	4413      	add	r3, r2
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	2b09      	cmp	r3, #9
 8015e54:	bf88      	it	hi
 8015e56:	3b0a      	subhi	r3, #10
 8015e58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015e5c:	8458      	strh	r0, [r3, #34]	; 0x22
 8015e5e:	e7dc      	b.n	8015e1a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015e60:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015e62:	2b0a      	cmp	r3, #10
 8015e64:	d00f      	beq.n	8015e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8015e66:	4620      	mov	r0, r4
 8015e68:	f7ff fc70 	bl	801574c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015e6c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015e6e:	1c5a      	adds	r2, r3, #1
 8015e70:	8722      	strh	r2, [r4, #56]	; 0x38
 8015e72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015e74:	4413      	add	r3, r2
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	2b09      	cmp	r3, #9
 8015e7a:	bf88      	it	hi
 8015e7c:	3b0a      	subhi	r3, #10
 8015e7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015e82:	8458      	strh	r0, [r3, #34]	; 0x22
 8015e84:	e7ec      	b.n	8015e60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8015e86:	bd10      	pop	{r4, pc}

08015e88 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015e8e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8015e92:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8015e94:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8015e96:	3a01      	subs	r2, #1
 8015e98:	8702      	strh	r2, [r0, #56]	; 0x38
 8015e9a:	1c5a      	adds	r2, r3, #1
 8015e9c:	b292      	uxth	r2, r2
 8015e9e:	2a09      	cmp	r2, #9
 8015ea0:	bf86      	itte	hi
 8015ea2:	3b09      	subhi	r3, #9
 8015ea4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8015ea6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8015ea8:	f7ff ffb5 	bl	8015e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015eac:	8c23      	ldrh	r3, [r4, #32]
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	bf9c      	itt	ls
 8015eb2:	3301      	addls	r3, #1
 8015eb4:	8423      	strhls	r3, [r4, #32]
 8015eb6:	8be3      	ldrh	r3, [r4, #30]
 8015eb8:	b90b      	cbnz	r3, 8015ebe <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015eba:	2302      	movs	r3, #2
 8015ebc:	83e3      	strh	r3, [r4, #30]
 8015ebe:	8be3      	ldrh	r3, [r4, #30]
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	3b01      	subs	r3, #1
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	83e3      	strh	r3, [r4, #30]
 8015ec8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015ecc:	8365      	strh	r5, [r4, #26]
 8015ece:	bd38      	pop	{r3, r4, r5, pc}

08015ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015ed0:	428a      	cmp	r2, r1
 8015ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8015ed8:	d931      	bls.n	8015f3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8015eda:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8015edc:	1a54      	subs	r4, r2, r1
 8015ede:	19ee      	adds	r6, r5, r7
 8015ee0:	3e01      	subs	r6, #1
 8015ee2:	fa1f fe84 	uxth.w	lr, r4
 8015ee6:	b2b4      	uxth	r4, r6
 8015ee8:	eba4 090e 	sub.w	r9, r4, lr
 8015eec:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8015ef0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8015ef4:	fa1f f989 	uxth.w	r9, r9
 8015ef8:	2c09      	cmp	r4, #9
 8015efa:	4626      	mov	r6, r4
 8015efc:	bf88      	it	hi
 8015efe:	f1a4 060a 	subhi.w	r6, r4, #10
 8015f02:	f1bc 0f00 	cmp.w	ip, #0
 8015f06:	bf08      	it	eq
 8015f08:	f04f 0c02 	moveq.w	ip, #2
 8015f0c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8015f10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f14:	3c01      	subs	r4, #1
 8015f16:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8015f1a:	fa1f fc8c 	uxth.w	ip, ip
 8015f1e:	b2a4      	uxth	r4, r4
 8015f20:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015f24:	454c      	cmp	r4, r9
 8015f26:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8015f2a:	d1e5      	bne.n	8015ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015f2c:	eba5 050e 	sub.w	r5, r5, lr
 8015f30:	eb0e 0408 	add.w	r4, lr, r8
 8015f34:	8705      	strh	r5, [r0, #56]	; 0x38
 8015f36:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8015f3a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8015f3e:	250a      	movs	r5, #10
 8015f40:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8015f42:	1a64      	subs	r4, r4, r1
 8015f44:	4439      	add	r1, r7
 8015f46:	b289      	uxth	r1, r1
 8015f48:	2909      	cmp	r1, #9
 8015f4a:	bf88      	it	hi
 8015f4c:	390a      	subhi	r1, #10
 8015f4e:	8704      	strh	r4, [r0, #56]	; 0x38
 8015f50:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015f52:	b18a      	cbz	r2, 8015f78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8015f54:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8015f56:	3a01      	subs	r2, #1
 8015f58:	3101      	adds	r1, #1
 8015f5a:	b292      	uxth	r2, r2
 8015f5c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8015f60:	8701      	strh	r1, [r0, #56]	; 0x38
 8015f62:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015f64:	b901      	cbnz	r1, 8015f68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8015f66:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015f68:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015f6a:	3901      	subs	r1, #1
 8015f6c:	b289      	uxth	r1, r1
 8015f6e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015f70:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8015f74:	844c      	strh	r4, [r1, #34]	; 0x22
 8015f76:	e7ec      	b.n	8015f52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8015f78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f7c:	f7ff bf4b 	b.w	8015e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08015f80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8015f80:	b570      	push	{r4, r5, r6, lr}
 8015f82:	2500      	movs	r5, #0
 8015f84:	4295      	cmp	r5, r2
 8015f86:	d011      	beq.n	8015fac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015f88:	8bc4      	ldrh	r4, [r0, #30]
 8015f8a:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015f8e:	4414      	add	r4, r2
 8015f90:	3c01      	subs	r4, #1
 8015f92:	1b64      	subs	r4, r4, r5
 8015f94:	b2a4      	uxth	r4, r4
 8015f96:	2c01      	cmp	r4, #1
 8015f98:	bf88      	it	hi
 8015f9a:	3c02      	subhi	r4, #2
 8015f9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015fa0:	8b64      	ldrh	r4, [r4, #26]
 8015fa2:	42b4      	cmp	r4, r6
 8015fa4:	d117      	bne.n	8015fd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015fa6:	3501      	adds	r5, #1
 8015fa8:	b2ad      	uxth	r5, r5
 8015faa:	e7eb      	b.n	8015f84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015fac:	2400      	movs	r4, #0
 8015fae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	b2a2      	uxth	r2, r4
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	da0f      	bge.n	8015fda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015fba:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8015fbc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8015fc0:	4432      	add	r2, r6
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	2a09      	cmp	r2, #9
 8015fc6:	bf88      	it	hi
 8015fc8:	3a0a      	subhi	r2, #10
 8015fca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8015fce:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8015fd0:	3401      	adds	r4, #1
 8015fd2:	42aa      	cmp	r2, r5
 8015fd4:	d0ee      	beq.n	8015fb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	bd70      	pop	{r4, r5, r6, pc}
 8015fda:	2001      	movs	r0, #1
 8015fdc:	e7fc      	b.n	8015fd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08015fde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	4616      	mov	r6, r2
 8015fe6:	1c8c      	adds	r4, r1, #2
 8015fe8:	8809      	ldrh	r1, [r1, #0]
 8015fea:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015fee:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8015ff2:	42b3      	cmp	r3, r6
 8015ff4:	d124      	bne.n	8016040 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015ff6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015ffa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015ffe:	f001 070f 	and.w	r7, r1, #15
 8016002:	f8cd 8000 	str.w	r8, [sp]
 8016006:	464b      	mov	r3, r9
 8016008:	4652      	mov	r2, sl
 801600a:	4621      	mov	r1, r4
 801600c:	4628      	mov	r0, r5
 801600e:	f7ff ffb7 	bl	8015f80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016012:	4683      	mov	fp, r0
 8016014:	b168      	cbz	r0, 8016032 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016016:	eb0a 0109 	add.w	r1, sl, r9
 801601a:	4441      	add	r1, r8
 801601c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016020:	463a      	mov	r2, r7
 8016022:	4649      	mov	r1, r9
 8016024:	4628      	mov	r0, r5
 8016026:	f7ff ff53 	bl	8015ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801602a:	4658      	mov	r0, fp
 801602c:	b003      	add	sp, #12
 801602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016032:	eb07 010a 	add.w	r1, r7, sl
 8016036:	4449      	add	r1, r9
 8016038:	4441      	add	r1, r8
 801603a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801603e:	e7d2      	b.n	8015fe6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016040:	f04f 0b00 	mov.w	fp, #0
 8016044:	e7f1      	b.n	801602a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016046 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016046:	b570      	push	{r4, r5, r6, lr}
 8016048:	8810      	ldrh	r0, [r2, #0]
 801604a:	4298      	cmp	r0, r3
 801604c:	d817      	bhi.n	801607e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801604e:	1e48      	subs	r0, r1, #1
 8016050:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016054:	4298      	cmp	r0, r3
 8016056:	d312      	bcc.n	801607e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016058:	2400      	movs	r4, #0
 801605a:	428c      	cmp	r4, r1
 801605c:	d20f      	bcs.n	801607e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801605e:	1860      	adds	r0, r4, r1
 8016060:	1040      	asrs	r0, r0, #1
 8016062:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016066:	0085      	lsls	r5, r0, #2
 8016068:	42b3      	cmp	r3, r6
 801606a:	d902      	bls.n	8016072 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801606c:	3001      	adds	r0, #1
 801606e:	b284      	uxth	r4, r0
 8016070:	e7f3      	b.n	801605a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016072:	d201      	bcs.n	8016078 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016074:	b281      	uxth	r1, r0
 8016076:	e7f0      	b.n	801605a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016078:	442a      	add	r2, r5
 801607a:	8850      	ldrh	r0, [r2, #2]
 801607c:	bd70      	pop	{r4, r5, r6, pc}
 801607e:	2000      	movs	r0, #0
 8016080:	e7fc      	b.n	801607c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016082 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016086:	4604      	mov	r4, r0
 8016088:	260b      	movs	r6, #11
 801608a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801608c:	886f      	ldrh	r7, [r5, #2]
 801608e:	087f      	lsrs	r7, r7, #1
 8016090:	3e01      	subs	r6, #1
 8016092:	d013      	beq.n	80160bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016096:	462a      	mov	r2, r5
 8016098:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801609c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80160a0:	4639      	mov	r1, r7
 80160a2:	4643      	mov	r3, r8
 80160a4:	4620      	mov	r0, r4
 80160a6:	f7ff ffce 	bl	8016046 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80160aa:	b138      	cbz	r0, 80160bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80160ac:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80160b0:	4642      	mov	r2, r8
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ff ff93 	bl	8015fde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80160b8:	2800      	cmp	r0, #0
 80160ba:	d1e9      	bne.n	8016090 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80160bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160c0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 80160c0:	2300      	movs	r3, #0
 80160c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160c4:	b08d      	sub	sp, #52	; 0x34
 80160c6:	9304      	str	r3, [sp, #16]
 80160c8:	9305      	str	r3, [sp, #20]
 80160ca:	9306      	str	r3, [sp, #24]
 80160cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80160d0:	aa04      	add	r2, sp, #16
 80160d2:	9307      	str	r3, [sp, #28]
 80160d4:	4613      	mov	r3, r2
 80160d6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80160da:	f101 0710 	add.w	r7, r1, #16
 80160de:	460c      	mov	r4, r1
 80160e0:	4605      	mov	r5, r0
 80160e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801611c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 80160e6:	ecb4 7a01 	vldmia	r4!, {s14}
 80160ea:	ecf5 6a01 	vldmia	r5!, {s13}
 80160ee:	42bc      	cmp	r4, r7
 80160f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80160f4:	d1f7      	bne.n	80160e6 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 80160f6:	3010      	adds	r0, #16
 80160f8:	42b0      	cmp	r0, r6
 80160fa:	ece2 7a01 	vstmia	r2!, {s15}
 80160fe:	d1ee      	bne.n	80160de <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8016100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016102:	ac0c      	add	r4, sp, #48	; 0x30
 8016104:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016108:	ed9d 0a08 	vldr	s0, [sp, #32]
 801610c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8016110:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8016114:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8016118:	b00d      	add	sp, #52	; 0x34
 801611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801611c:	00000000 	.word	0x00000000

08016120 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8016120:	2300      	movs	r3, #0
 8016122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016126:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801614c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 801612a:	2200      	movs	r2, #0
 801612c:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8016130:	4293      	cmp	r3, r2
 8016132:	f102 0201 	add.w	r2, r2, #1
 8016136:	fe47 6a87 	vseleq.f32	s13, s15, s14
 801613a:	2a04      	cmp	r2, #4
 801613c:	ece1 6a01 	vstmia	r1!, {s13}
 8016140:	d1f6      	bne.n	8016130 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8016142:	3301      	adds	r3, #1
 8016144:	2b04      	cmp	r3, #4
 8016146:	d1f0      	bne.n	801612a <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	00000000 	.word	0x00000000

08016150 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8016150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016154:	460c      	mov	r4, r1
 8016156:	4605      	mov	r5, r0
 8016158:	4690      	mov	r8, r2
 801615a:	f7ff ffe1 	bl	8016120 <_ZN8touchgfx9Matrix4x4C1Ev>
 801615e:	4628      	mov	r0, r5
 8016160:	4621      	mov	r1, r4
 8016162:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8016166:	2300      	movs	r3, #0
 8016168:	460f      	mov	r7, r1
 801616a:	2400      	movs	r4, #0
 801616c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80161a8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 8016170:	eb08 0603 	add.w	r6, r8, r3
 8016174:	4632      	mov	r2, r6
 8016176:	ecf7 6a01 	vldmia	r7!, {s13}
 801617a:	ed92 7a00 	vldr	s14, [r2]
 801617e:	3401      	adds	r4, #1
 8016180:	2c04      	cmp	r4, #4
 8016182:	f106 0610 	add.w	r6, r6, #16
 8016186:	eee6 7a87 	vfma.f32	s15, s13, s14
 801618a:	d1f3      	bne.n	8016174 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801618c:	18c2      	adds	r2, r0, r3
 801618e:	3304      	adds	r3, #4
 8016190:	2b10      	cmp	r3, #16
 8016192:	edc2 7a00 	vstr	s15, [r2]
 8016196:	d1e7      	bne.n	8016168 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8016198:	3110      	adds	r1, #16
 801619a:	4561      	cmp	r1, ip
 801619c:	f100 0010 	add.w	r0, r0, #16
 80161a0:	d1e1      	bne.n	8016166 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 80161a2:	4628      	mov	r0, r5
 80161a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a8:	00000000 	.word	0x00000000

080161ac <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 80161ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80161b0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80161b4:	f100 0320 	add.w	r3, r0, #32
 80161b8:	3030      	adds	r0, #48	; 0x30
 80161ba:	ecf3 7a01 	vldmia	r3!, {s15}
 80161be:	ee60 7a27 	vmul.f32	s15, s0, s15
 80161c2:	4283      	cmp	r3, r0
 80161c4:	edc3 7a03 	vstr	s15, [r3, #12]
 80161c8:	d1f7      	bne.n	80161ba <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 80161ca:	4770      	bx	lr

080161cc <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 80161cc:	b510      	push	{r4, lr}
 80161ce:	ed2d 8b02 	vpush	{d8}
 80161d2:	4604      	mov	r4, r0
 80161d4:	eef0 8a40 	vmov.f32	s17, s0
 80161d8:	f00c f9ac 	bl	8022534 <sinf>
 80161dc:	eeb0 8a40 	vmov.f32	s16, s0
 80161e0:	eeb0 0a68 	vmov.f32	s0, s17
 80161e4:	f00c f962 	bl	80224ac <cosf>
 80161e8:	eeb1 6a48 	vneg.f32	s12, s16
 80161ec:	f104 0310 	add.w	r3, r4, #16
 80161f0:	f104 0220 	add.w	r2, r4, #32
 80161f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80161f8:	edd3 6a00 	vldr	s13, [r3]
 80161fc:	ee26 7a27 	vmul.f32	s14, s12, s15
 8016200:	eea6 7a80 	vfma.f32	s14, s13, s0
 8016204:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016208:	eca3 7a01 	vstmia	r3!, {s14}
 801620c:	eee6 7a88 	vfma.f32	s15, s13, s16
 8016210:	429a      	cmp	r2, r3
 8016212:	edc3 7a03 	vstr	s15, [r3, #12]
 8016216:	d1ed      	bne.n	80161f4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8016218:	ecbd 8b02 	vpop	{d8}
 801621c:	4620      	mov	r0, r4
 801621e:	bd10      	pop	{r4, pc}

08016220 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8016220:	b510      	push	{r4, lr}
 8016222:	ed2d 8b02 	vpush	{d8}
 8016226:	4604      	mov	r4, r0
 8016228:	eef0 8a40 	vmov.f32	s17, s0
 801622c:	f00c f982 	bl	8022534 <sinf>
 8016230:	eeb0 8a40 	vmov.f32	s16, s0
 8016234:	eeb0 0a68 	vmov.f32	s0, s17
 8016238:	f00c f938 	bl	80224ac <cosf>
 801623c:	4623      	mov	r3, r4
 801623e:	eeb1 6a48 	vneg.f32	s12, s16
 8016242:	f104 0210 	add.w	r2, r4, #16
 8016246:	edd3 7a08 	vldr	s15, [r3, #32]
 801624a:	edd3 6a00 	vldr	s13, [r3]
 801624e:	ee27 7a88 	vmul.f32	s14, s15, s16
 8016252:	eea6 7a80 	vfma.f32	s14, s13, s0
 8016256:	ee67 7a80 	vmul.f32	s15, s15, s0
 801625a:	eca3 7a01 	vstmia	r3!, {s14}
 801625e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8016262:	429a      	cmp	r2, r3
 8016264:	edc3 7a07 	vstr	s15, [r3, #28]
 8016268:	d1ed      	bne.n	8016246 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801626a:	ecbd 8b02 	vpop	{d8}
 801626e:	4620      	mov	r0, r4
 8016270:	bd10      	pop	{r4, pc}

08016272 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8016272:	b510      	push	{r4, lr}
 8016274:	ed2d 8b02 	vpush	{d8}
 8016278:	4604      	mov	r4, r0
 801627a:	eef0 8a40 	vmov.f32	s17, s0
 801627e:	f00c f959 	bl	8022534 <sinf>
 8016282:	eeb0 8a40 	vmov.f32	s16, s0
 8016286:	eeb0 0a68 	vmov.f32	s0, s17
 801628a:	f00c f90f 	bl	80224ac <cosf>
 801628e:	4623      	mov	r3, r4
 8016290:	eeb1 6a48 	vneg.f32	s12, s16
 8016294:	f104 0210 	add.w	r2, r4, #16
 8016298:	edd3 7a04 	vldr	s15, [r3, #16]
 801629c:	edd3 6a00 	vldr	s13, [r3]
 80162a0:	ee26 7a27 	vmul.f32	s14, s12, s15
 80162a4:	eea6 7a80 	vfma.f32	s14, s13, s0
 80162a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80162ac:	eca3 7a01 	vstmia	r3!, {s14}
 80162b0:	eee6 7a88 	vfma.f32	s15, s13, s16
 80162b4:	429a      	cmp	r2, r3
 80162b6:	edc3 7a03 	vstr	s15, [r3, #12]
 80162ba:	d1ed      	bne.n	8016298 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 80162bc:	ecbd 8b02 	vpop	{d8}
 80162c0:	4620      	mov	r0, r4
 80162c2:	bd10      	pop	{r4, pc}

080162c4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 80162c4:	4603      	mov	r3, r0
 80162c6:	f100 0210 	add.w	r2, r0, #16
 80162ca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80162ce:	edd3 7a00 	vldr	s15, [r3]
 80162d2:	eee7 7a00 	vfma.f32	s15, s14, s0
 80162d6:	ece3 7a01 	vstmia	r3!, {s15}
 80162da:	4293      	cmp	r3, r2
 80162dc:	d1f5      	bne.n	80162ca <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 80162de:	4770      	bx	lr

080162e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 80162e0:	f100 0310 	add.w	r3, r0, #16
 80162e4:	f100 0220 	add.w	r2, r0, #32
 80162e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80162ec:	edd3 7a00 	vldr	s15, [r3]
 80162f0:	eee7 7a00 	vfma.f32	s15, s14, s0
 80162f4:	ece3 7a01 	vstmia	r3!, {s15}
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d1f5      	bne.n	80162e8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 80162fc:	4770      	bx	lr

080162fe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 80162fe:	f100 0320 	add.w	r3, r0, #32
 8016302:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016306:	ed93 7a04 	vldr	s14, [r3, #16]
 801630a:	edd3 7a00 	vldr	s15, [r3]
 801630e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8016312:	ece3 7a01 	vstmia	r3!, {s15}
 8016316:	4293      	cmp	r3, r2
 8016318:	d1f5      	bne.n	8016306 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801631a:	4770      	bx	lr

0801631c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801631c:	4603      	mov	r3, r0
 801631e:	f100 0210 	add.w	r2, r0, #16
 8016322:	edd3 7a00 	vldr	s15, [r3]
 8016326:	ee67 7a80 	vmul.f32	s15, s15, s0
 801632a:	ece3 7a01 	vstmia	r3!, {s15}
 801632e:	4293      	cmp	r3, r2
 8016330:	d1f7      	bne.n	8016322 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8016332:	4770      	bx	lr

08016334 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8016334:	f100 0310 	add.w	r3, r0, #16
 8016338:	f100 0220 	add.w	r2, r0, #32
 801633c:	edd3 7a00 	vldr	s15, [r3]
 8016340:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016344:	ece3 7a01 	vstmia	r3!, {s15}
 8016348:	4293      	cmp	r3, r2
 801634a:	d1f7      	bne.n	801633c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801634c:	4770      	bx	lr

0801634e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801634e:	f100 0320 	add.w	r3, r0, #32
 8016352:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016356:	edd3 7a00 	vldr	s15, [r3]
 801635a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801635e:	ece3 7a01 	vstmia	r3!, {s15}
 8016362:	4293      	cmp	r3, r2
 8016364:	d1f7      	bne.n	8016356 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8016366:	4770      	bx	lr

08016368 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	694a      	ldr	r2, [r1, #20]
 801636c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801636e:	684b      	ldr	r3, [r1, #4]
 8016370:	1b54      	subs	r4, r2, r5
 8016372:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8016374:	f000 8107 	beq.w	8016586 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8016378:	1b9b      	subs	r3, r3, r6
 801637a:	d003      	beq.n	8016384 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801637c:	2210      	movs	r2, #16
 801637e:	4363      	muls	r3, r4
 8016380:	fb93 f3f2 	sdiv	r3, r3, r2
 8016384:	680c      	ldr	r4, [r1, #0]
 8016386:	698a      	ldr	r2, [r1, #24]
 8016388:	1b65      	subs	r5, r4, r5
 801638a:	f000 80fe 	beq.w	801658a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801638e:	1b92      	subs	r2, r2, r6
 8016390:	d003      	beq.n	801639a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016392:	2410      	movs	r4, #16
 8016394:	436a      	muls	r2, r5
 8016396:	fb92 f2f4 	sdiv	r2, r2, r4
 801639a:	1a9b      	subs	r3, r3, r2
 801639c:	ee07 3a90 	vmov	s15, r3
 80163a0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80165c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 80163a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80163ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 80163b0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80163b4:	460a      	mov	r2, r1
 80163b6:	eeb1 6a43 	vneg.f32	s12, s6
 80163ba:	4603      	mov	r3, r0
 80163bc:	f100 040c 	add.w	r4, r0, #12
 80163c0:	edd2 7a02 	vldr	s15, [r2, #8]
 80163c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80163c8:	ece3 6a01 	vstmia	r3!, {s13}
 80163cc:	edd2 7a03 	vldr	s15, [r2, #12]
 80163d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80163d4:	edc3 7a02 	vstr	s15, [r3, #8]
 80163d8:	edd2 7a04 	vldr	s15, [r2, #16]
 80163dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80163e0:	429c      	cmp	r4, r3
 80163e2:	edc3 7a05 	vstr	s15, [r3, #20]
 80163e6:	f102 0214 	add.w	r2, r2, #20
 80163ea:	d1e9      	bne.n	80163c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80163ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80163ee:	698b      	ldr	r3, [r1, #24]
 80163f0:	edd0 4a02 	vldr	s9, [r0, #8]
 80163f4:	1a9b      	subs	r3, r3, r2
 80163f6:	ee07 3a90 	vmov	s15, r3
 80163fa:	684b      	ldr	r3, [r1, #4]
 80163fc:	edd0 3a00 	vldr	s7, [r0]
 8016400:	1a9b      	subs	r3, r3, r2
 8016402:	edd0 6a01 	vldr	s13, [r0, #4]
 8016406:	ee07 3a10 	vmov	s14, r3
 801640a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801640e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016412:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016416:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801641a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801641e:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016422:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016426:	eee6 7a87 	vfma.f32	s15, s13, s14
 801642a:	ee67 7a83 	vmul.f32	s15, s15, s6
 801642e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8016432:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016434:	694a      	ldr	r2, [r1, #20]
 8016436:	ed90 5a05 	vldr	s10, [r0, #20]
 801643a:	1b13      	subs	r3, r2, r4
 801643c:	ee07 3a10 	vmov	s14, r3
 8016440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016444:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016448:	680b      	ldr	r3, [r1, #0]
 801644a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801644e:	1b1b      	subs	r3, r3, r4
 8016450:	ee07 3a10 	vmov	s14, r3
 8016454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016458:	ee27 7a04 	vmul.f32	s14, s14, s8
 801645c:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016460:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016464:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8016468:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801646a:	698b      	ldr	r3, [r1, #24]
 801646c:	ed90 2a03 	vldr	s4, [r0, #12]
 8016470:	1a9b      	subs	r3, r3, r2
 8016472:	ee06 3a90 	vmov	s13, r3
 8016476:	684b      	ldr	r3, [r1, #4]
 8016478:	edd0 5a04 	vldr	s11, [r0, #16]
 801647c:	1a9b      	subs	r3, r3, r2
 801647e:	ee07 3a10 	vmov	s14, r3
 8016482:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016486:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801648a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801648e:	ee32 5a45 	vsub.f32	s10, s4, s10
 8016492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016496:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801649a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801649e:	eee5 6a87 	vfma.f32	s13, s11, s14
 80164a2:	ee66 6a83 	vmul.f32	s13, s13, s6
 80164a6:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80164aa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80164ac:	694a      	ldr	r2, [r1, #20]
 80164ae:	ed90 1a07 	vldr	s2, [r0, #28]
 80164b2:	1b13      	subs	r3, r2, r4
 80164b4:	ee07 3a10 	vmov	s14, r3
 80164b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80164bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80164c0:	680b      	ldr	r3, [r1, #0]
 80164c2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80164c6:	1b1b      	subs	r3, r3, r4
 80164c8:	ee07 3a10 	vmov	s14, r3
 80164cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80164d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80164d4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80164d8:	ee25 5a06 	vmul.f32	s10, s10, s12
 80164dc:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80164e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80164e2:	698b      	ldr	r3, [r1, #24]
 80164e4:	edd0 5a08 	vldr	s11, [r0, #32]
 80164e8:	1a9b      	subs	r3, r3, r2
 80164ea:	ee07 3a10 	vmov	s14, r3
 80164ee:	684b      	ldr	r3, [r1, #4]
 80164f0:	edd0 2a06 	vldr	s5, [r0, #24]
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	ee01 3a90 	vmov	s3, r3
 80164fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80164fe:	ee31 1a65 	vsub.f32	s2, s2, s11
 8016502:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016506:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801650a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801650e:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8016512:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016516:	eea1 7a21 	vfma.f32	s14, s2, s3
 801651a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801651e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8016522:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016524:	694a      	ldr	r2, [r1, #20]
 8016526:	1b13      	subs	r3, r2, r4
 8016528:	ee03 3a10 	vmov	s6, r3
 801652c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016530:	ee23 3a04 	vmul.f32	s6, s6, s8
 8016534:	680b      	ldr	r3, [r1, #0]
 8016536:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801653a:	1b1b      	subs	r3, r3, r4
 801653c:	ee03 3a10 	vmov	s6, r3
 8016540:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016544:	ee23 4a04 	vmul.f32	s8, s6, s8
 8016548:	eee1 5a04 	vfma.f32	s11, s2, s8
 801654c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016550:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8016554:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8016558:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016560:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8016564:	dd13      	ble.n	801658e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801656a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801656e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8016572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801657a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801657c:	dd15      	ble.n	80165aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801657e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016582:	6403      	str	r3, [r0, #64]	; 0x40
 8016584:	bd70      	pop	{r4, r5, r6, pc}
 8016586:	4623      	mov	r3, r4
 8016588:	e6fc      	b.n	8016384 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801658a:	462a      	mov	r2, r5
 801658c:	e705      	b.n	801639a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801658e:	d502      	bpl.n	8016596 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8016590:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016594:	e7e9      	b.n	801656a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8016596:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801659a:	eea3 2a85 	vfma.f32	s4, s7, s10
 801659e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80165a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a6:	dade      	bge.n	8016566 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 80165a8:	e7f2      	b.n	8016590 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 80165aa:	d502      	bpl.n	80165b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 80165ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80165b0:	e7e7      	b.n	8016582 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 80165b2:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80165b6:	eee3 4a86 	vfma.f32	s9, s7, s12
 80165ba:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	dadc      	bge.n	801657e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 80165c4:	e7f2      	b.n	80165ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 80165c6:	bf00      	nop
 80165c8:	3d800000 	.word	0x3d800000

080165cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80165cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d0:	2714      	movs	r7, #20
 80165d2:	435f      	muls	r7, r3
 80165d4:	eb02 0c07 	add.w	ip, r2, r7
 80165d8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80165dc:	f115 0e0f 	adds.w	lr, r5, #15
 80165e0:	f100 80a2 	bmi.w	8016728 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80165e4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80165e8:	2614      	movs	r6, #20
 80165ea:	9c08      	ldr	r4, [sp, #32]
 80165ec:	f8c0 e014 	str.w	lr, [r0, #20]
 80165f0:	4366      	muls	r6, r4
 80165f2:	eb02 0806 	add.w	r8, r2, r6
 80165f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80165fa:	f115 040f 	adds.w	r4, r5, #15
 80165fe:	f100 809f 	bmi.w	8016740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8016602:	1124      	asrs	r4, r4, #4
 8016604:	eba4 040e 	sub.w	r4, r4, lr
 8016608:	6184      	str	r4, [r0, #24]
 801660a:	2c00      	cmp	r4, #0
 801660c:	f000 808a 	beq.w	8016724 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8016610:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8016614:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016618:	5995      	ldr	r5, [r2, r6]
 801661a:	eba4 0809 	sub.w	r8, r4, r9
 801661e:	59d4      	ldr	r4, [r2, r7]
 8016620:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8016624:	eba5 0a04 	sub.w	sl, r5, r4
 8016628:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801662c:	fb0e fe05 	mul.w	lr, lr, r5
 8016630:	fb0a ee19 	mls	lr, sl, r9, lr
 8016634:	fb08 e404 	mla	r4, r8, r4, lr
 8016638:	3c01      	subs	r4, #1
 801663a:	19a4      	adds	r4, r4, r6
 801663c:	f100 808c 	bmi.w	8016758 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8016640:	fb94 fef6 	sdiv	lr, r4, r6
 8016644:	fb06 441e 	mls	r4, r6, lr, r4
 8016648:	f8c0 e000 	str.w	lr, [r0]
 801664c:	6104      	str	r4, [r0, #16]
 801664e:	2d00      	cmp	r5, #0
 8016650:	f2c0 8095 	blt.w	801677e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8016654:	fb95 f4f6 	sdiv	r4, r5, r6
 8016658:	fb06 5514 	mls	r5, r6, r4, r5
 801665c:	6044      	str	r4, [r0, #4]
 801665e:	6085      	str	r5, [r0, #8]
 8016660:	60c6      	str	r6, [r0, #12]
 8016662:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8016666:	6945      	ldr	r5, [r0, #20]
 8016668:	59d2      	ldr	r2, [r2, r7]
 801666a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801666e:	ee07 4a10 	vmov	s14, r4
 8016672:	6804      	ldr	r4, [r0, #0]
 8016674:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80167a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8016678:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801667c:	ee07 2a90 	vmov	s15, r2
 8016680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016688:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801668c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8016690:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016698:	edd3 6a00 	vldr	s13, [r3]
 801669c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80166a0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80166a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80166a8:	edc0 6a07 	vstr	s13, [r0, #28]
 80166ac:	edd0 6a01 	vldr	s13, [r0, #4]
 80166b0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80166b4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80166b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80166bc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80166c0:	ed80 6a08 	vstr	s12, [r0, #32]
 80166c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80166c6:	6242      	str	r2, [r0, #36]	; 0x24
 80166c8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80166cc:	ed93 6a03 	vldr	s12, [r3, #12]
 80166d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80166d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80166d8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80166dc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80166e0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80166e4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80166e8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80166ec:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80166f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80166f2:	6302      	str	r2, [r0, #48]	; 0x30
 80166f4:	ed93 6a06 	vldr	s12, [r3, #24]
 80166f8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80166fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016700:	eeb0 7a46 	vmov.f32	s14, s12
 8016704:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8016708:	eea6 7a27 	vfma.f32	s14, s12, s15
 801670c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8016710:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8016714:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8016718:	eee6 7a87 	vfma.f32	s15, s13, s14
 801671c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8016720:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016722:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016728:	2410      	movs	r4, #16
 801672a:	f1c5 0501 	rsb	r5, r5, #1
 801672e:	f015 050f 	ands.w	r5, r5, #15
 8016732:	fb9e fef4 	sdiv	lr, lr, r4
 8016736:	bf18      	it	ne
 8016738:	2501      	movne	r5, #1
 801673a:	ebae 0e05 	sub.w	lr, lr, r5
 801673e:	e753      	b.n	80165e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8016740:	f04f 0910 	mov.w	r9, #16
 8016744:	f1c5 0501 	rsb	r5, r5, #1
 8016748:	f015 050f 	ands.w	r5, r5, #15
 801674c:	fb94 f4f9 	sdiv	r4, r4, r9
 8016750:	bf18      	it	ne
 8016752:	2501      	movne	r5, #1
 8016754:	1b64      	subs	r4, r4, r5
 8016756:	e755      	b.n	8016604 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8016758:	4264      	negs	r4, r4
 801675a:	fb94 fef6 	sdiv	lr, r4, r6
 801675e:	fb06 441e 	mls	r4, r6, lr, r4
 8016762:	f1ce 0800 	rsb	r8, lr, #0
 8016766:	f8c0 8000 	str.w	r8, [r0]
 801676a:	6104      	str	r4, [r0, #16]
 801676c:	2c00      	cmp	r4, #0
 801676e:	f43f af6e 	beq.w	801664e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8016772:	ea6f 0e0e 	mvn.w	lr, lr
 8016776:	1b34      	subs	r4, r6, r4
 8016778:	f8c0 e000 	str.w	lr, [r0]
 801677c:	e766      	b.n	801664c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801677e:	426d      	negs	r5, r5
 8016780:	fb95 f4f6 	sdiv	r4, r5, r6
 8016784:	fb06 5514 	mls	r5, r6, r4, r5
 8016788:	f1c4 0e00 	rsb	lr, r4, #0
 801678c:	f8c0 e004 	str.w	lr, [r0, #4]
 8016790:	6085      	str	r5, [r0, #8]
 8016792:	2d00      	cmp	r5, #0
 8016794:	f43f af64 	beq.w	8016660 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8016798:	43e4      	mvns	r4, r4
 801679a:	1b75      	subs	r5, r6, r5
 801679c:	6044      	str	r4, [r0, #4]
 801679e:	e75e      	b.n	801665e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80167a0:	3d800000 	.word	0x3d800000

080167a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80167a4:	4b01      	ldr	r3, [pc, #4]	; (80167ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80167a6:	6018      	str	r0, [r3, #0]
 80167a8:	4770      	bx	lr
 80167aa:	bf00      	nop
 80167ac:	200200ec 	.word	0x200200ec

080167b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80167b0:	4b06      	ldr	r3, [pc, #24]	; (80167cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80167b2:	881a      	ldrh	r2, [r3, #0]
 80167b4:	4282      	cmp	r2, r0
 80167b6:	d807      	bhi.n	80167c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80167b8:	4b05      	ldr	r3, [pc, #20]	; (80167d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80167ba:	881b      	ldrh	r3, [r3, #0]
 80167bc:	4413      	add	r3, r2
 80167be:	4298      	cmp	r0, r3
 80167c0:	bfac      	ite	ge
 80167c2:	2000      	movge	r0, #0
 80167c4:	2001      	movlt	r0, #1
 80167c6:	4770      	bx	lr
 80167c8:	2000      	movs	r0, #0
 80167ca:	4770      	bx	lr
 80167cc:	2002010c 	.word	0x2002010c
 80167d0:	20020110 	.word	0x20020110

080167d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80167d4:	b508      	push	{r3, lr}
 80167d6:	4601      	mov	r1, r0
 80167d8:	f7ff ffea 	bl	80167b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80167dc:	b118      	cbz	r0, 80167e6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80167de:	4b02      	ldr	r3, [pc, #8]	; (80167e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80167e6:	bd08      	pop	{r3, pc}
 80167e8:	200200f0 	.word	0x200200f0

080167ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80167ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ee:	4c24      	ldr	r4, [pc, #144]	; (8016880 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80167f0:	6823      	ldr	r3, [r4, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d042      	beq.n	801687c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80167f6:	4a23      	ldr	r2, [pc, #140]	; (8016884 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80167f8:	4d23      	ldr	r5, [pc, #140]	; (8016888 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80167fa:	8811      	ldrh	r1, [r2, #0]
 80167fc:	f8b5 c000 	ldrh.w	ip, [r5]
 8016800:	4822      	ldr	r0, [pc, #136]	; (801688c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8016802:	4461      	add	r1, ip
 8016804:	1c4a      	adds	r2, r1, #1
 8016806:	f022 0201 	bic.w	r2, r2, #1
 801680a:	008f      	lsls	r7, r1, #2
 801680c:	0412      	lsls	r2, r2, #16
 801680e:	19de      	adds	r6, r3, r7
 8016810:	0c12      	lsrs	r2, r2, #16
 8016812:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016816:	6006      	str	r6, [r0, #0]
 8016818:	4e1d      	ldr	r6, [pc, #116]	; (8016890 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801681a:	19da      	adds	r2, r3, r7
 801681c:	6032      	str	r2, [r6, #0]
 801681e:	220e      	movs	r2, #14
 8016820:	fb02 f20c 	mul.w	r2, r2, ip
 8016824:	3203      	adds	r2, #3
 8016826:	f022 0203 	bic.w	r2, r2, #3
 801682a:	443a      	add	r2, r7
 801682c:	4f19      	ldr	r7, [pc, #100]	; (8016894 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801682e:	4413      	add	r3, r2
 8016830:	603b      	str	r3, [r7, #0]
 8016832:	2300      	movs	r3, #0
 8016834:	4f18      	ldr	r7, [pc, #96]	; (8016898 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8016836:	469c      	mov	ip, r3
 8016838:	803b      	strh	r3, [r7, #0]
 801683a:	4f18      	ldr	r7, [pc, #96]	; (801689c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801683c:	683f      	ldr	r7, [r7, #0]
 801683e:	1aba      	subs	r2, r7, r2
 8016840:	4f17      	ldr	r7, [pc, #92]	; (80168a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8016842:	603a      	str	r2, [r7, #0]
 8016844:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016848:	4a16      	ldr	r2, [pc, #88]	; (80168a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801684a:	8013      	strh	r3, [r2, #0]
 801684c:	428b      	cmp	r3, r1
 801684e:	d10d      	bne.n	801686c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8016850:	2300      	movs	r3, #0
 8016852:	240e      	movs	r4, #14
 8016854:	882d      	ldrh	r5, [r5, #0]
 8016856:	6830      	ldr	r0, [r6, #0]
 8016858:	429d      	cmp	r5, r3
 801685a:	d90f      	bls.n	801687c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801685c:	fb04 0203 	mla	r2, r4, r3, r0
 8016860:	7b11      	ldrb	r1, [r2, #12]
 8016862:	3301      	adds	r3, #1
 8016864:	f36f 1145 	bfc	r1, #5, #1
 8016868:	7311      	strb	r1, [r2, #12]
 801686a:	e7f5      	b.n	8016858 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801686c:	6822      	ldr	r2, [r4, #0]
 801686e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8016872:	6802      	ldr	r2, [r0, #0]
 8016874:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016878:	3301      	adds	r3, #1
 801687a:	e7e7      	b.n	801684c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801687e:	bf00      	nop
 8016880:	200200f0 	.word	0x200200f0
 8016884:	2002010c 	.word	0x2002010c
 8016888:	20020110 	.word	0x20020110
 801688c:	20020104 	.word	0x20020104
 8016890:	200200f4 	.word	0x200200f4
 8016894:	200200fc 	.word	0x200200fc
 8016898:	2002010e 	.word	0x2002010e
 801689c:	200200f8 	.word	0x200200f8
 80168a0:	20020108 	.word	0x20020108
 80168a4:	20020100 	.word	0x20020100

080168a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80168a8:	4b06      	ldr	r3, [pc, #24]	; (80168c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	b943      	cbnz	r3, 80168c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80168ae:	b139      	cbz	r1, 80168c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80168b0:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80168b2:	801a      	strh	r2, [r3, #0]
 80168b4:	4b05      	ldr	r3, [pc, #20]	; (80168cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80168b6:	6019      	str	r1, [r3, #0]
 80168b8:	4b05      	ldr	r3, [pc, #20]	; (80168d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80168ba:	6018      	str	r0, [r3, #0]
 80168bc:	f7ff bf96 	b.w	80167ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	200200fc 	.word	0x200200fc
 80168c8:	20020110 	.word	0x20020110
 80168cc:	200200f8 	.word	0x200200f8
 80168d0:	200200f0 	.word	0x200200f0

080168d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80168d4:	b470      	push	{r4, r5, r6}
 80168d6:	4c07      	ldr	r4, [pc, #28]	; (80168f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80168d8:	4605      	mov	r5, r0
 80168da:	6826      	ldr	r6, [r4, #0]
 80168dc:	4610      	mov	r0, r2
 80168de:	9a03      	ldr	r2, [sp, #12]
 80168e0:	b936      	cbnz	r6, 80168f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80168e2:	6025      	str	r5, [r4, #0]
 80168e4:	4c04      	ldr	r4, [pc, #16]	; (80168f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80168e6:	8021      	strh	r1, [r4, #0]
 80168e8:	bc70      	pop	{r4, r5, r6}
 80168ea:	4619      	mov	r1, r3
 80168ec:	f7ff bfdc 	b.w	80168a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80168f0:	bc70      	pop	{r4, r5, r6}
 80168f2:	4770      	bx	lr
 80168f4:	20020114 	.word	0x20020114
 80168f8:	2002010c 	.word	0x2002010c

080168fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80168fc:	4a12      	ldr	r2, [pc, #72]	; (8016948 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80168fe:	8803      	ldrh	r3, [r0, #0]
 8016900:	8812      	ldrh	r2, [r2, #0]
 8016902:	4293      	cmp	r3, r2
 8016904:	d207      	bcs.n	8016916 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8016906:	2114      	movs	r1, #20
 8016908:	4a10      	ldr	r2, [pc, #64]	; (801694c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801690a:	6812      	ldr	r2, [r2, #0]
 801690c:	fb01 2303 	mla	r3, r1, r3, r2
 8016910:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8016914:	4770      	bx	lr
 8016916:	490e      	ldr	r1, [pc, #56]	; (8016950 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8016918:	8809      	ldrh	r1, [r1, #0]
 801691a:	4411      	add	r1, r2
 801691c:	428b      	cmp	r3, r1
 801691e:	da04      	bge.n	801692a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8016920:	1a9b      	subs	r3, r3, r2
 8016922:	4a0c      	ldr	r2, [pc, #48]	; (8016954 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8016924:	210e      	movs	r1, #14
 8016926:	6812      	ldr	r2, [r2, #0]
 8016928:	e7f0      	b.n	801690c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801692a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801692e:	4293      	cmp	r3, r2
 8016930:	d108      	bne.n	8016944 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8016932:	4b09      	ldr	r3, [pc, #36]	; (8016958 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	b91b      	cbnz	r3, 8016940 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8016938:	4b08      	ldr	r3, [pc, #32]	; (801695c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801693a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801693e:	4770      	bx	lr
 8016940:	4b07      	ldr	r3, [pc, #28]	; (8016960 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8016942:	e7fa      	b.n	801693a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8016944:	2000      	movs	r0, #0
 8016946:	4770      	bx	lr
 8016948:	2002010c 	.word	0x2002010c
 801694c:	20020114 	.word	0x20020114
 8016950:	20020110 	.word	0x20020110
 8016954:	200200f4 	.word	0x200200f4
 8016958:	20020084 	.word	0x20020084
 801695c:	20020086 	.word	0x20020086
 8016960:	20020088 	.word	0x20020088

08016964 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8016964:	4a12      	ldr	r2, [pc, #72]	; (80169b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8016966:	8803      	ldrh	r3, [r0, #0]
 8016968:	8812      	ldrh	r2, [r2, #0]
 801696a:	4293      	cmp	r3, r2
 801696c:	d207      	bcs.n	801697e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801696e:	2114      	movs	r1, #20
 8016970:	4a10      	ldr	r2, [pc, #64]	; (80169b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8016972:	6812      	ldr	r2, [r2, #0]
 8016974:	fb01 2303 	mla	r3, r1, r3, r2
 8016978:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801697c:	4770      	bx	lr
 801697e:	490e      	ldr	r1, [pc, #56]	; (80169b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8016980:	8809      	ldrh	r1, [r1, #0]
 8016982:	4411      	add	r1, r2
 8016984:	428b      	cmp	r3, r1
 8016986:	da04      	bge.n	8016992 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8016988:	1a9b      	subs	r3, r3, r2
 801698a:	4a0c      	ldr	r2, [pc, #48]	; (80169bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801698c:	210e      	movs	r1, #14
 801698e:	6812      	ldr	r2, [r2, #0]
 8016990:	e7f0      	b.n	8016974 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8016992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016996:	4293      	cmp	r3, r2
 8016998:	d108      	bne.n	80169ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801699a:	4b09      	ldr	r3, [pc, #36]	; (80169c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	b91b      	cbnz	r3, 80169a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80169a0:	4b08      	ldr	r3, [pc, #32]	; (80169c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80169a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80169a6:	4770      	bx	lr
 80169a8:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80169aa:	e7fa      	b.n	80169a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80169ac:	2000      	movs	r0, #0
 80169ae:	4770      	bx	lr
 80169b0:	2002010c 	.word	0x2002010c
 80169b4:	20020114 	.word	0x20020114
 80169b8:	20020110 	.word	0x20020110
 80169bc:	200200f4 	.word	0x200200f4
 80169c0:	20020084 	.word	0x20020084
 80169c4:	20020088 	.word	0x20020088
 80169c8:	20020086 	.word	0x20020086

080169cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80169cc:	b510      	push	{r4, lr}
 80169ce:	4a1f      	ldr	r2, [pc, #124]	; (8016a4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80169d0:	880b      	ldrh	r3, [r1, #0]
 80169d2:	8812      	ldrh	r2, [r2, #0]
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d213      	bcs.n	8016a00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80169d8:	2114      	movs	r1, #20
 80169da:	4a1d      	ldr	r2, [pc, #116]	; (8016a50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80169dc:	6812      	ldr	r2, [r2, #0]
 80169de:	fb01 2303 	mla	r3, r1, r3, r2
 80169e2:	8a1a      	ldrh	r2, [r3, #16]
 80169e4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80169e8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80169ec:	8a5b      	ldrh	r3, [r3, #18]
 80169ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80169f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169f6:	8004      	strh	r4, [r0, #0]
 80169f8:	8041      	strh	r1, [r0, #2]
 80169fa:	8082      	strh	r2, [r0, #4]
 80169fc:	80c3      	strh	r3, [r0, #6]
 80169fe:	e00e      	b.n	8016a1e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016a00:	4914      	ldr	r1, [pc, #80]	; (8016a54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8016a02:	8809      	ldrh	r1, [r1, #0]
 8016a04:	4411      	add	r1, r2
 8016a06:	428b      	cmp	r3, r1
 8016a08:	da0a      	bge.n	8016a20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8016a0a:	210e      	movs	r1, #14
 8016a0c:	1a9b      	subs	r3, r3, r2
 8016a0e:	4a12      	ldr	r2, [pc, #72]	; (8016a58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8016a10:	6812      	ldr	r2, [r2, #0]
 8016a12:	fb01 2303 	mla	r3, r1, r3, r2
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	6002      	str	r2, [r0, #0]
 8016a1a:	685a      	ldr	r2, [r3, #4]
 8016a1c:	6042      	str	r2, [r0, #4]
 8016a1e:	bd10      	pop	{r4, pc}
 8016a20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016a24:	4293      	cmp	r3, r2
 8016a26:	d10b      	bne.n	8016a40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8016a28:	4b0c      	ldr	r3, [pc, #48]	; (8016a5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8016a2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016a2e:	4b0c      	ldr	r3, [pc, #48]	; (8016a60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016a30:	8081      	strh	r1, [r0, #4]
 8016a32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a36:	2300      	movs	r3, #0
 8016a38:	80c2      	strh	r2, [r0, #6]
 8016a3a:	8003      	strh	r3, [r0, #0]
 8016a3c:	8043      	strh	r3, [r0, #2]
 8016a3e:	e7ee      	b.n	8016a1e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016a40:	2300      	movs	r3, #0
 8016a42:	8003      	strh	r3, [r0, #0]
 8016a44:	8043      	strh	r3, [r0, #2]
 8016a46:	8083      	strh	r3, [r0, #4]
 8016a48:	e7d8      	b.n	80169fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8016a4a:	bf00      	nop
 8016a4c:	2002010c 	.word	0x2002010c
 8016a50:	20020114 	.word	0x20020114
 8016a54:	20020110 	.word	0x20020110
 8016a58:	200200f4 	.word	0x200200f4
 8016a5c:	20020080 	.word	0x20020080
 8016a60:	20020082 	.word	0x20020082

08016a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8016a64:	4a17      	ldr	r2, [pc, #92]	; (8016ac4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8016a66:	8803      	ldrh	r3, [r0, #0]
 8016a68:	8812      	ldrh	r2, [r2, #0]
 8016a6a:	4293      	cmp	r3, r2
 8016a6c:	d213      	bcs.n	8016a96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8016a6e:	2114      	movs	r1, #20
 8016a70:	4a15      	ldr	r2, [pc, #84]	; (8016ac8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8016a72:	6812      	ldr	r2, [r2, #0]
 8016a74:	fb01 2303 	mla	r3, r1, r3, r2
 8016a78:	8a1a      	ldrh	r2, [r3, #16]
 8016a7a:	8919      	ldrh	r1, [r3, #8]
 8016a7c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016a80:	428a      	cmp	r2, r1
 8016a82:	db1d      	blt.n	8016ac0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8016a84:	8a58      	ldrh	r0, [r3, #18]
 8016a86:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016a8a:	895b      	ldrh	r3, [r3, #10]
 8016a8c:	4298      	cmp	r0, r3
 8016a8e:	bfac      	ite	ge
 8016a90:	2000      	movge	r0, #0
 8016a92:	2001      	movlt	r0, #1
 8016a94:	4770      	bx	lr
 8016a96:	490d      	ldr	r1, [pc, #52]	; (8016acc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8016a98:	8809      	ldrh	r1, [r1, #0]
 8016a9a:	4411      	add	r1, r2
 8016a9c:	428b      	cmp	r3, r1
 8016a9e:	da0d      	bge.n	8016abc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8016aa0:	210e      	movs	r1, #14
 8016aa2:	1a9b      	subs	r3, r3, r2
 8016aa4:	4a0a      	ldr	r2, [pc, #40]	; (8016ad0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8016aa6:	6812      	ldr	r2, [r2, #0]
 8016aa8:	fb01 2303 	mla	r3, r1, r3, r2
 8016aac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016ab0:	891a      	ldrh	r2, [r3, #8]
 8016ab2:	4291      	cmp	r1, r2
 8016ab4:	db04      	blt.n	8016ac0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8016ab6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8016aba:	e7e6      	b.n	8016a8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8016abc:	2000      	movs	r0, #0
 8016abe:	4770      	bx	lr
 8016ac0:	2001      	movs	r0, #1
 8016ac2:	4770      	bx	lr
 8016ac4:	2002010c 	.word	0x2002010c
 8016ac8:	20020114 	.word	0x20020114
 8016acc:	20020110 	.word	0x20020110
 8016ad0:	200200f4 	.word	0x200200f4

08016ad4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016ad4:	4a12      	ldr	r2, [pc, #72]	; (8016b20 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8016ad6:	8803      	ldrh	r3, [r0, #0]
 8016ad8:	8811      	ldrh	r1, [r2, #0]
 8016ada:	428b      	cmp	r3, r1
 8016adc:	d20b      	bcs.n	8016af6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8016ade:	4a11      	ldr	r2, [pc, #68]	; (8016b24 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016ae0:	6812      	ldr	r2, [r2, #0]
 8016ae2:	b112      	cbz	r2, 8016aea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016ae4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016ae8:	b9c0      	cbnz	r0, 8016b1c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8016aea:	4a0f      	ldr	r2, [pc, #60]	; (8016b28 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8016aec:	6811      	ldr	r1, [r2, #0]
 8016aee:	2214      	movs	r2, #20
 8016af0:	4353      	muls	r3, r2
 8016af2:	58c8      	ldr	r0, [r1, r3]
 8016af4:	4770      	bx	lr
 8016af6:	4a0d      	ldr	r2, [pc, #52]	; (8016b2c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016af8:	8812      	ldrh	r2, [r2, #0]
 8016afa:	440a      	add	r2, r1
 8016afc:	4293      	cmp	r3, r2
 8016afe:	da04      	bge.n	8016b0a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016b00:	4a08      	ldr	r2, [pc, #32]	; (8016b24 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016b02:	6812      	ldr	r2, [r2, #0]
 8016b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016b08:	4770      	bx	lr
 8016b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d103      	bne.n	8016b1a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016b12:	4b07      	ldr	r3, [pc, #28]	; (8016b30 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8016b18:	4770      	bx	lr
 8016b1a:	2000      	movs	r0, #0
 8016b1c:	4770      	bx	lr
 8016b1e:	bf00      	nop
 8016b20:	2002010c 	.word	0x2002010c
 8016b24:	200200f0 	.word	0x200200f0
 8016b28:	20020114 	.word	0x20020114
 8016b2c:	20020110 	.word	0x20020110
 8016b30:	2002008c 	.word	0x2002008c

08016b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016b34:	4b24      	ldr	r3, [pc, #144]	; (8016bc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8016b36:	8802      	ldrh	r2, [r0, #0]
 8016b38:	8818      	ldrh	r0, [r3, #0]
 8016b3a:	4282      	cmp	r2, r0
 8016b3c:	d221      	bcs.n	8016b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8016b3e:	4b23      	ldr	r3, [pc, #140]	; (8016bcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016b40:	6819      	ldr	r1, [r3, #0]
 8016b42:	2314      	movs	r3, #20
 8016b44:	fb03 1302 	mla	r3, r3, r2, r1
 8016b48:	6858      	ldr	r0, [r3, #4]
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	d03a      	beq.n	8016bc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016b4e:	4920      	ldr	r1, [pc, #128]	; (8016bd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016b50:	6809      	ldr	r1, [r1, #0]
 8016b52:	2900      	cmp	r1, #0
 8016b54:	d036      	beq.n	8016bc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016b56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b5a:	2900      	cmp	r1, #0
 8016b5c:	d032      	beq.n	8016bc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016b5e:	891a      	ldrh	r2, [r3, #8]
 8016b60:	8958      	ldrh	r0, [r3, #10]
 8016b62:	4350      	muls	r0, r2
 8016b64:	7c5a      	ldrb	r2, [r3, #17]
 8016b66:	7cdb      	ldrb	r3, [r3, #19]
 8016b68:	0952      	lsrs	r2, r2, #5
 8016b6a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8016b6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8016b72:	2b0b      	cmp	r3, #11
 8016b74:	bf18      	it	ne
 8016b76:	0040      	lslne	r0, r0, #1
 8016b78:	3003      	adds	r0, #3
 8016b7a:	f020 0003 	bic.w	r0, r0, #3
 8016b7e:	4408      	add	r0, r1
 8016b80:	4770      	bx	lr
 8016b82:	4b14      	ldr	r3, [pc, #80]	; (8016bd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8016b84:	881b      	ldrh	r3, [r3, #0]
 8016b86:	4403      	add	r3, r0
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	da1a      	bge.n	8016bc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016b8c:	210e      	movs	r1, #14
 8016b8e:	4b12      	ldr	r3, [pc, #72]	; (8016bd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8016b90:	1a10      	subs	r0, r2, r0
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	fb01 3000 	mla	r0, r1, r0, r3
 8016b98:	7b03      	ldrb	r3, [r0, #12]
 8016b9a:	f003 031f 	and.w	r3, r3, #31
 8016b9e:	2b0b      	cmp	r3, #11
 8016ba0:	d10b      	bne.n	8016bba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8016ba2:	8903      	ldrh	r3, [r0, #8]
 8016ba4:	8940      	ldrh	r0, [r0, #10]
 8016ba6:	4358      	muls	r0, r3
 8016ba8:	4b09      	ldr	r3, [pc, #36]	; (8016bd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016baa:	3003      	adds	r0, #3
 8016bac:	6819      	ldr	r1, [r3, #0]
 8016bae:	f020 0303 	bic.w	r3, r0, #3
 8016bb2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8016bb6:	4418      	add	r0, r3
 8016bb8:	4770      	bx	lr
 8016bba:	2b0d      	cmp	r3, #13
 8016bbc:	d101      	bne.n	8016bc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016bbe:	300d      	adds	r0, #13
 8016bc0:	4770      	bx	lr
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	4770      	bx	lr
 8016bc6:	bf00      	nop
 8016bc8:	2002010c 	.word	0x2002010c
 8016bcc:	20020114 	.word	0x20020114
 8016bd0:	200200f0 	.word	0x200200f0
 8016bd4:	20020110 	.word	0x20020110
 8016bd8:	200200f4 	.word	0x200200f4

08016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8016bdc:	b510      	push	{r4, lr}
 8016bde:	4a17      	ldr	r2, [pc, #92]	; (8016c3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8016be0:	8803      	ldrh	r3, [r0, #0]
 8016be2:	8812      	ldrh	r2, [r2, #0]
 8016be4:	4293      	cmp	r3, r2
 8016be6:	d20c      	bcs.n	8016c02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016be8:	2114      	movs	r1, #20
 8016bea:	4a15      	ldr	r2, [pc, #84]	; (8016c40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8016bec:	6812      	ldr	r2, [r2, #0]
 8016bee:	fb01 2303 	mla	r3, r1, r3, r2
 8016bf2:	7c58      	ldrb	r0, [r3, #17]
 8016bf4:	0942      	lsrs	r2, r0, #5
 8016bf6:	7cd8      	ldrb	r0, [r3, #19]
 8016bf8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8016bfc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016c00:	bd10      	pop	{r4, pc}
 8016c02:	4910      	ldr	r1, [pc, #64]	; (8016c44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016c04:	8809      	ldrh	r1, [r1, #0]
 8016c06:	4411      	add	r1, r2
 8016c08:	428b      	cmp	r3, r1
 8016c0a:	da09      	bge.n	8016c20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8016c0c:	210e      	movs	r1, #14
 8016c0e:	1a9b      	subs	r3, r3, r2
 8016c10:	4a0d      	ldr	r2, [pc, #52]	; (8016c48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016c12:	6812      	ldr	r2, [r2, #0]
 8016c14:	fb01 2303 	mla	r3, r1, r3, r2
 8016c18:	7b18      	ldrb	r0, [r3, #12]
 8016c1a:	f000 001f 	and.w	r0, r0, #31
 8016c1e:	e7ef      	b.n	8016c00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016c20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d106      	bne.n	8016c36 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8016c28:	f7f6 fab4 	bl	800d194 <_ZN8touchgfx3HAL3lcdEv>
 8016c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c30:	6803      	ldr	r3, [r0, #0]
 8016c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c34:	4718      	bx	r3
 8016c36:	2000      	movs	r0, #0
 8016c38:	e7e2      	b.n	8016c00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016c3a:	bf00      	nop
 8016c3c:	2002010c 	.word	0x2002010c
 8016c40:	20020114 	.word	0x20020114
 8016c44:	20020110 	.word	0x20020110
 8016c48:	200200f4 	.word	0x200200f4

08016c4c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8016c4c:	2010      	movs	r0, #16
 8016c4e:	4770      	bx	lr

08016c50 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8016c50:	2000      	movs	r0, #0
 8016c52:	4770      	bx	lr

08016c54 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8016c54:	4b02      	ldr	r3, [pc, #8]	; (8016c60 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8016c56:	8818      	ldrh	r0, [r3, #0]
 8016c58:	0040      	lsls	r0, r0, #1
 8016c5a:	b280      	uxth	r0, r0
 8016c5c:	4770      	bx	lr
 8016c5e:	bf00      	nop
 8016c60:	20020086 	.word	0x20020086

08016c64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016c64:	2bff      	cmp	r3, #255	; 0xff
 8016c66:	d050      	beq.n	8016d0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8016c68:	2a0b      	cmp	r2, #11
 8016c6a:	d04a      	beq.n	8016d02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016c6c:	d80e      	bhi.n	8016c8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8016c6e:	2a03      	cmp	r2, #3
 8016c70:	d03f      	beq.n	8016cf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8016c72:	d804      	bhi.n	8016c7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016c74:	2a01      	cmp	r2, #1
 8016c76:	d03e      	beq.n	8016cf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8016c78:	d93f      	bls.n	8016cfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8016c7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016c7c:	4770      	bx	lr
 8016c7e:	2a09      	cmp	r2, #9
 8016c80:	d03f      	beq.n	8016d02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016c82:	d83c      	bhi.n	8016cfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016c84:	2a08      	cmp	r2, #8
 8016c86:	d03a      	beq.n	8016cfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016c88:	2000      	movs	r0, #0
 8016c8a:	4770      	bx	lr
 8016c8c:	2a2f      	cmp	r2, #47	; 0x2f
 8016c8e:	d024      	beq.n	8016cda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8016c90:	d80d      	bhi.n	8016cae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8016c92:	2a2d      	cmp	r2, #45	; 0x2d
 8016c94:	d014      	beq.n	8016cc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8016c96:	d826      	bhi.n	8016ce6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8016c98:	2a2c      	cmp	r2, #44	; 0x2c
 8016c9a:	d1f5      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016c9c:	684b      	ldr	r3, [r1, #4]
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d018      	beq.n	8016cd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8016ca4:	d323      	bcc.n	8016cee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8016ca6:	2b02      	cmp	r3, #2
 8016ca8:	d1ee      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016caa:	6880      	ldr	r0, [r0, #8]
 8016cac:	4770      	bx	lr
 8016cae:	2a31      	cmp	r2, #49	; 0x31
 8016cb0:	d004      	beq.n	8016cbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8016cb2:	d328      	bcc.n	8016d06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016cb4:	2a32      	cmp	r2, #50	; 0x32
 8016cb6:	d026      	beq.n	8016d06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016cb8:	2a33      	cmp	r2, #51	; 0x33
 8016cba:	d1e5      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016cbc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8016cbe:	4770      	bx	lr
 8016cc0:	684b      	ldr	r3, [r1, #4]
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d004      	beq.n	8016cd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016cc8:	d30b      	bcc.n	8016ce2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d1dc      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016cce:	6900      	ldr	r0, [r0, #16]
 8016cd0:	4770      	bx	lr
 8016cd2:	6a00      	ldr	r0, [r0, #32]
 8016cd4:	4770      	bx	lr
 8016cd6:	6980      	ldr	r0, [r0, #24]
 8016cd8:	4770      	bx	lr
 8016cda:	684b      	ldr	r3, [r1, #4]
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d1d2      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016ce2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016ce4:	4770      	bx	lr
 8016ce6:	684b      	ldr	r3, [r1, #4]
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1cc      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016cee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016cf0:	4770      	bx	lr
 8016cf2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016cf4:	4770      	bx	lr
 8016cf6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016cf8:	4770      	bx	lr
 8016cfa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016cfc:	4770      	bx	lr
 8016cfe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8016d00:	4770      	bx	lr
 8016d02:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016d04:	4770      	bx	lr
 8016d06:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016d08:	4770      	bx	lr
 8016d0a:	2a0b      	cmp	r2, #11
 8016d0c:	d049      	beq.n	8016da2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016d0e:	d80e      	bhi.n	8016d2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8016d10:	2a03      	cmp	r2, #3
 8016d12:	d040      	beq.n	8016d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016d14:	d804      	bhi.n	8016d20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8016d16:	2a01      	cmp	r2, #1
 8016d18:	d03f      	beq.n	8016d9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8016d1a:	d940      	bls.n	8016d9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016d1c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016d1e:	4770      	bx	lr
 8016d20:	2a09      	cmp	r2, #9
 8016d22:	d03e      	beq.n	8016da2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016d24:	d801      	bhi.n	8016d2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8016d26:	2a08      	cmp	r2, #8
 8016d28:	d1ae      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d2a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8016d2c:	4770      	bx	lr
 8016d2e:	2a2f      	cmp	r2, #47	; 0x2f
 8016d30:	d024      	beq.n	8016d7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016d32:	d80d      	bhi.n	8016d50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016d34:	2a2d      	cmp	r2, #45	; 0x2d
 8016d36:	d014      	beq.n	8016d62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8016d38:	d826      	bhi.n	8016d88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8016d3a:	2a2c      	cmp	r2, #44	; 0x2c
 8016d3c:	d1a4      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d3e:	684b      	ldr	r3, [r1, #4]
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d018      	beq.n	8016d78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8016d46:	d324      	bcc.n	8016d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016d48:	2b02      	cmp	r3, #2
 8016d4a:	d19d      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d4c:	68c0      	ldr	r0, [r0, #12]
 8016d4e:	4770      	bx	lr
 8016d50:	2a31      	cmp	r2, #49	; 0x31
 8016d52:	d004      	beq.n	8016d5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8016d54:	d327      	bcc.n	8016da6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016d56:	2a32      	cmp	r2, #50	; 0x32
 8016d58:	d025      	beq.n	8016da6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016d5a:	2a33      	cmp	r2, #51	; 0x33
 8016d5c:	d194      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d5e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016d60:	4770      	bx	lr
 8016d62:	684b      	ldr	r3, [r1, #4]
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	2b01      	cmp	r3, #1
 8016d68:	d004      	beq.n	8016d74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8016d6a:	d30b      	bcc.n	8016d84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8016d6c:	2b02      	cmp	r3, #2
 8016d6e:	d18b      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d70:	6940      	ldr	r0, [r0, #20]
 8016d72:	4770      	bx	lr
 8016d74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016d76:	4770      	bx	lr
 8016d78:	69c0      	ldr	r0, [r0, #28]
 8016d7a:	4770      	bx	lr
 8016d7c:	684b      	ldr	r3, [r1, #4]
 8016d7e:	781b      	ldrb	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d181      	bne.n	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d84:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016d86:	4770      	bx	lr
 8016d88:	684b      	ldr	r3, [r1, #4]
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f47f af7b 	bne.w	8016c88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016d92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016d94:	4770      	bx	lr
 8016d96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016d98:	4770      	bx	lr
 8016d9a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016d9c:	4770      	bx	lr
 8016d9e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016da0:	4770      	bx	lr
 8016da2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016da4:	4770      	bx	lr
 8016da6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8016da8:	4770      	bx	lr

08016daa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dae:	b087      	sub	sp, #28
 8016db0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016db2:	9101      	str	r1, [sp, #4]
 8016db4:	9205      	str	r2, [sp, #20]
 8016db6:	6841      	ldr	r1, [r0, #4]
 8016db8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016dbc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8016dc0:	9202      	str	r2, [sp, #8]
 8016dc2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8016dc6:	fb01 2404 	mla	r4, r1, r4, r2
 8016dca:	6802      	ldr	r2, [r0, #0]
 8016dcc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016dd0:	f8de 2000 	ldr.w	r2, [lr]
 8016dd4:	9203      	str	r2, [sp, #12]
 8016dd6:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016dda:	3204      	adds	r2, #4
 8016ddc:	9204      	str	r2, [sp, #16]
 8016dde:	9a02      	ldr	r2, [sp, #8]
 8016de0:	43d6      	mvns	r6, r2
 8016de2:	b2f6      	uxtb	r6, r6
 8016de4:	9a01      	ldr	r2, [sp, #4]
 8016de6:	2a00      	cmp	r2, #0
 8016de8:	dc03      	bgt.n	8016df2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016dea:	9a05      	ldr	r2, [sp, #20]
 8016dec:	2a00      	cmp	r2, #0
 8016dee:	f340 8129 	ble.w	8017044 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016df2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016df4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016df8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016dfe:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016e02:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	dd0e      	ble.n	8016e28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016e0a:	1408      	asrs	r0, r1, #16
 8016e0c:	d405      	bmi.n	8016e1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e0e:	4560      	cmp	r0, ip
 8016e10:	da03      	bge.n	8016e1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e12:	1410      	asrs	r0, r2, #16
 8016e14:	d401      	bmi.n	8016e1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e16:	42b8      	cmp	r0, r7
 8016e18:	db07      	blt.n	8016e2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016e1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016e1c:	3b01      	subs	r3, #1
 8016e1e:	4401      	add	r1, r0
 8016e20:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016e22:	3402      	adds	r4, #2
 8016e24:	4402      	add	r2, r0
 8016e26:	e7ee      	b.n	8016e06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e28:	d071      	beq.n	8016f0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016e2c:	1e58      	subs	r0, r3, #1
 8016e2e:	fb05 1500 	mla	r5, r5, r0, r1
 8016e32:	142d      	asrs	r5, r5, #16
 8016e34:	d45f      	bmi.n	8016ef6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016e36:	4565      	cmp	r5, ip
 8016e38:	da5d      	bge.n	8016ef6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016e3a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016e3c:	fb05 2000 	mla	r0, r5, r0, r2
 8016e40:	1400      	asrs	r0, r0, #16
 8016e42:	d458      	bmi.n	8016ef6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016e44:	42b8      	cmp	r0, r7
 8016e46:	da56      	bge.n	8016ef6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016e48:	4699      	mov	r9, r3
 8016e4a:	46a2      	mov	sl, r4
 8016e4c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8016e50:	f1b9 0f00 	cmp.w	r9, #0
 8016e54:	dd57      	ble.n	8016f06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016e56:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016e5a:	9803      	ldr	r0, [sp, #12]
 8016e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e60:	fb07 000c 	mla	r0, r7, ip, r0
 8016e64:	140d      	asrs	r5, r1, #16
 8016e66:	5d40      	ldrb	r0, [r0, r5]
 8016e68:	9d04      	ldr	r5, [sp, #16]
 8016e6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8016e6e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016e72:	f8ba 5000 	ldrh.w	r5, [sl]
 8016e76:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016e7a:	122f      	asrs	r7, r5, #8
 8016e7c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016e80:	fb17 f706 	smulbb	r7, r7, r6
 8016e84:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8016e88:	00ed      	lsls	r5, r5, #3
 8016e8a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016e8e:	b2ed      	uxtb	r5, r5
 8016e90:	fb18 f806 	smulbb	r8, r8, r6
 8016e94:	fb15 f506 	smulbb	r5, r5, r6
 8016e98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016e9c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8016ea0:	10c7      	asrs	r7, r0, #3
 8016ea2:	00c0      	lsls	r0, r0, #3
 8016ea4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016ea8:	b2c0      	uxtb	r0, r0
 8016eaa:	fb07 870b 	mla	r7, r7, fp, r8
 8016eae:	fb00 500b 	mla	r0, r0, fp, r5
 8016eb2:	fa1f fc8c 	uxth.w	ip, ip
 8016eb6:	b280      	uxth	r0, r0
 8016eb8:	b2bf      	uxth	r7, r7
 8016eba:	f10c 0501 	add.w	r5, ip, #1
 8016ebe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016ec2:	f107 0801 	add.w	r8, r7, #1
 8016ec6:	1c45      	adds	r5, r0, #1
 8016ec8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016ecc:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016ed0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016ed2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016ed6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016eda:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016ede:	ea45 0c0c 	orr.w	ip, r5, ip
 8016ee2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016ee6:	4401      	add	r1, r0
 8016ee8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016eea:	ea4c 0c08 	orr.w	ip, ip, r8
 8016eee:	f82a cb02 	strh.w	ip, [sl], #2
 8016ef2:	4402      	add	r2, r0
 8016ef4:	e7ac      	b.n	8016e50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016ef6:	f04f 0800 	mov.w	r8, #0
 8016efa:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8016efe:	eb03 0008 	add.w	r0, r3, r8
 8016f02:	2800      	cmp	r0, #0
 8016f04:	dc41      	bgt.n	8016f8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8016f06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016f0e:	9b01      	ldr	r3, [sp, #4]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f340 8097 	ble.w	8017044 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016f1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016f26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f2a:	eef0 6a62 	vmov.f32	s13, s5
 8016f2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f32:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f42:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8016f46:	eef0 6a43 	vmov.f32	s13, s6
 8016f4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f4e:	ee12 2a90 	vmov	r2, s5
 8016f52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f60:	ee13 2a10 	vmov	r2, s6
 8016f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f68:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8016f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f70:	9314      	str	r3, [sp, #80]	; 0x50
 8016f72:	9b01      	ldr	r3, [sp, #4]
 8016f74:	9a05      	ldr	r2, [sp, #20]
 8016f76:	3b01      	subs	r3, #1
 8016f78:	9301      	str	r3, [sp, #4]
 8016f7a:	eeb0 3a67 	vmov.f32	s6, s15
 8016f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f80:	eef0 2a47 	vmov.f32	s5, s14
 8016f84:	bf08      	it	eq
 8016f86:	4613      	moveq	r3, r2
 8016f88:	e72c      	b.n	8016de4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016f8a:	140f      	asrs	r7, r1, #16
 8016f8c:	d453      	bmi.n	8017036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016f8e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8016f92:	42bd      	cmp	r5, r7
 8016f94:	dd4f      	ble.n	8017036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016f96:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016f9a:	d44c      	bmi.n	8017036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016f9c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8016fa0:	4560      	cmp	r0, ip
 8016fa2:	dd48      	ble.n	8017036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016fa4:	9803      	ldr	r0, [sp, #12]
 8016fa6:	b22d      	sxth	r5, r5
 8016fa8:	fb0c 0505 	mla	r5, ip, r5, r0
 8016fac:	5de8      	ldrb	r0, [r5, r7]
 8016fae:	9d04      	ldr	r5, [sp, #16]
 8016fb0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016fb4:	f06f 0501 	mvn.w	r5, #1
 8016fb8:	fb05 fb08 	mul.w	fp, r5, r8
 8016fbc:	f834 500b 	ldrh.w	r5, [r4, fp]
 8016fc0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016fc4:	122f      	asrs	r7, r5, #8
 8016fc6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016fca:	fb17 f706 	smulbb	r7, r7, r6
 8016fce:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016fd2:	00ed      	lsls	r5, r5, #3
 8016fd4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8016fd8:	b2ed      	uxtb	r5, r5
 8016fda:	fb19 f906 	smulbb	r9, r9, r6
 8016fde:	fb15 f506 	smulbb	r5, r5, r6
 8016fe2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016fe6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8016fea:	10c7      	asrs	r7, r0, #3
 8016fec:	00c0      	lsls	r0, r0, #3
 8016fee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016ff2:	b2c0      	uxtb	r0, r0
 8016ff4:	fb07 970a 	mla	r7, r7, sl, r9
 8016ff8:	fb00 500a 	mla	r0, r0, sl, r5
 8016ffc:	fa1f fc8c 	uxth.w	ip, ip
 8017000:	b2bf      	uxth	r7, r7
 8017002:	b280      	uxth	r0, r0
 8017004:	f10c 0501 	add.w	r5, ip, #1
 8017008:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801700c:	f107 0901 	add.w	r9, r7, #1
 8017010:	1c45      	adds	r5, r0, #1
 8017012:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017016:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801701a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801701e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017022:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017026:	ea45 0c0c 	orr.w	ip, r5, ip
 801702a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801702e:	ea4c 0c09 	orr.w	ip, ip, r9
 8017032:	f824 c00b 	strh.w	ip, [r4, fp]
 8017036:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017038:	f108 38ff 	add.w	r8, r8, #4294967295
 801703c:	4401      	add	r1, r0
 801703e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017040:	4402      	add	r2, r0
 8017042:	e75c      	b.n	8016efe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017044:	b007      	add	sp, #28
 8017046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801704a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801704a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801704e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017052:	b085      	sub	sp, #20
 8017054:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017056:	4693      	mov	fp, r2
 8017058:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801705c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017060:	6870      	ldr	r0, [r6, #4]
 8017062:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017064:	fb00 2404 	mla	r4, r0, r4, r2
 8017068:	6832      	ldr	r2, [r6, #0]
 801706a:	9100      	str	r1, [sp, #0]
 801706c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017070:	682a      	ldr	r2, [r5, #0]
 8017072:	9201      	str	r2, [sp, #4]
 8017074:	686a      	ldr	r2, [r5, #4]
 8017076:	3204      	adds	r2, #4
 8017078:	9202      	str	r2, [sp, #8]
 801707a:	9a00      	ldr	r2, [sp, #0]
 801707c:	2a00      	cmp	r2, #0
 801707e:	dc03      	bgt.n	8017088 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017080:	f1bb 0f00 	cmp.w	fp, #0
 8017084:	f340 80a0 	ble.w	80171c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801708a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801708e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017092:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017094:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017098:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801709c:	2b00      	cmp	r3, #0
 801709e:	dd0c      	ble.n	80170ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80170a0:	1406      	asrs	r6, r0, #16
 80170a2:	d405      	bmi.n	80170b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80170a4:	454e      	cmp	r6, r9
 80170a6:	da03      	bge.n	80170b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80170a8:	1416      	asrs	r6, r2, #16
 80170aa:	d401      	bmi.n	80170b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80170ac:	4546      	cmp	r6, r8
 80170ae:	db05      	blt.n	80170bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80170b0:	4470      	add	r0, lr
 80170b2:	4462      	add	r2, ip
 80170b4:	3b01      	subs	r3, #1
 80170b6:	3402      	adds	r4, #2
 80170b8:	e7f0      	b.n	801709c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80170ba:	d00f      	beq.n	80170dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80170bc:	1e5e      	subs	r6, r3, #1
 80170be:	fb0e 0706 	mla	r7, lr, r6, r0
 80170c2:	143f      	asrs	r7, r7, #16
 80170c4:	d541      	bpl.n	801714a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80170c6:	4698      	mov	r8, r3
 80170c8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80170cc:	9603      	str	r6, [sp, #12]
 80170ce:	f1b8 0f00 	cmp.w	r8, #0
 80170d2:	dc59      	bgt.n	8017188 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80170d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80170d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80170dc:	9b00      	ldr	r3, [sp, #0]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	dd72      	ble.n	80171c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80170e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80170ee:	eeb0 6a62 	vmov.f32	s12, s5
 80170f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80170fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017102:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017106:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801710a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801710e:	eeb0 6a43 	vmov.f32	s12, s6
 8017112:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017116:	ee12 2a90 	vmov	r2, s5
 801711a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801711e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017120:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017124:	fb92 fef3 	sdiv	lr, r2, r3
 8017128:	ee13 2a10 	vmov	r2, s6
 801712c:	fb92 fcf3 	sdiv	ip, r2, r3
 8017130:	9b00      	ldr	r3, [sp, #0]
 8017132:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017136:	3b01      	subs	r3, #1
 8017138:	9300      	str	r3, [sp, #0]
 801713a:	eeb0 3a67 	vmov.f32	s6, s15
 801713e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017140:	eef0 2a47 	vmov.f32	s5, s14
 8017144:	bf08      	it	eq
 8017146:	465b      	moveq	r3, fp
 8017148:	e797      	b.n	801707a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801714a:	454f      	cmp	r7, r9
 801714c:	dabb      	bge.n	80170c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801714e:	fb0c 2606 	mla	r6, ip, r6, r2
 8017152:	1436      	asrs	r6, r6, #16
 8017154:	d4b7      	bmi.n	80170c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017156:	4546      	cmp	r6, r8
 8017158:	dab5      	bge.n	80170c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801715a:	461e      	mov	r6, r3
 801715c:	46a0      	mov	r8, r4
 801715e:	2e00      	cmp	r6, #0
 8017160:	ddb8      	ble.n	80170d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017162:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017166:	9901      	ldr	r1, [sp, #4]
 8017168:	1417      	asrs	r7, r2, #16
 801716a:	fb0a 1707 	mla	r7, sl, r7, r1
 801716e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017172:	f817 7009 	ldrb.w	r7, [r7, r9]
 8017176:	9902      	ldr	r1, [sp, #8]
 8017178:	4470      	add	r0, lr
 801717a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801717e:	4462      	add	r2, ip
 8017180:	f828 7b02 	strh.w	r7, [r8], #2
 8017184:	3e01      	subs	r6, #1
 8017186:	e7ea      	b.n	801715e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017188:	ea5f 4920 	movs.w	r9, r0, asr #16
 801718c:	d417      	bmi.n	80171be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801718e:	68ae      	ldr	r6, [r5, #8]
 8017190:	454e      	cmp	r6, r9
 8017192:	dd14      	ble.n	80171be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017194:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017198:	d411      	bmi.n	80171be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801719a:	68ef      	ldr	r7, [r5, #12]
 801719c:	4557      	cmp	r7, sl
 801719e:	dd0e      	ble.n	80171be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80171a0:	f06f 0101 	mvn.w	r1, #1
 80171a4:	9f01      	ldr	r7, [sp, #4]
 80171a6:	b236      	sxth	r6, r6
 80171a8:	fb0a 7606 	mla	r6, sl, r6, r7
 80171ac:	9f02      	ldr	r7, [sp, #8]
 80171ae:	f816 6009 	ldrb.w	r6, [r6, r9]
 80171b2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80171b6:	fb01 f608 	mul.w	r6, r1, r8
 80171ba:	9903      	ldr	r1, [sp, #12]
 80171bc:	538f      	strh	r7, [r1, r6]
 80171be:	4470      	add	r0, lr
 80171c0:	4462      	add	r2, ip
 80171c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80171c6:	e782      	b.n	80170ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80171c8:	b005      	add	sp, #20
 80171ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80171ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d2:	b087      	sub	sp, #28
 80171d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80171d6:	9102      	str	r1, [sp, #8]
 80171d8:	9205      	str	r2, [sp, #20]
 80171da:	6861      	ldr	r1, [r4, #4]
 80171dc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80171e0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80171e4:	9203      	str	r2, [sp, #12]
 80171e6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80171ea:	fb01 2000 	mla	r0, r1, r0, r2
 80171ee:	6822      	ldr	r2, [r4, #0]
 80171f0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80171f4:	9200      	str	r2, [sp, #0]
 80171f6:	f8dc 2000 	ldr.w	r2, [ip]
 80171fa:	9204      	str	r2, [sp, #16]
 80171fc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017200:	3204      	adds	r2, #4
 8017202:	9201      	str	r2, [sp, #4]
 8017204:	9a03      	ldr	r2, [sp, #12]
 8017206:	43d5      	mvns	r5, r2
 8017208:	b2ed      	uxtb	r5, r5
 801720a:	9a02      	ldr	r2, [sp, #8]
 801720c:	2a00      	cmp	r2, #0
 801720e:	dc03      	bgt.n	8017218 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017210:	9a05      	ldr	r2, [sp, #20]
 8017212:	2a00      	cmp	r2, #0
 8017214:	f340 812c 	ble.w	8017470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017218:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801721a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801721e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017224:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017228:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801722c:	2b00      	cmp	r3, #0
 801722e:	dd10      	ble.n	8017252 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017230:	140c      	asrs	r4, r1, #16
 8017232:	d405      	bmi.n	8017240 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017234:	4574      	cmp	r4, lr
 8017236:	da03      	bge.n	8017240 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017238:	1414      	asrs	r4, r2, #16
 801723a:	d401      	bmi.n	8017240 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801723c:	42bc      	cmp	r4, r7
 801723e:	db09      	blt.n	8017254 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017240:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017242:	9800      	ldr	r0, [sp, #0]
 8017244:	4421      	add	r1, r4
 8017246:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017248:	3002      	adds	r0, #2
 801724a:	4422      	add	r2, r4
 801724c:	3b01      	subs	r3, #1
 801724e:	9000      	str	r0, [sp, #0]
 8017250:	e7ec      	b.n	801722c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017252:	d071      	beq.n	8017338 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017254:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017256:	1e5c      	subs	r4, r3, #1
 8017258:	fb06 1604 	mla	r6, r6, r4, r1
 801725c:	1436      	asrs	r6, r6, #16
 801725e:	d45d      	bmi.n	801731c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017260:	4576      	cmp	r6, lr
 8017262:	da5b      	bge.n	801731c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017264:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017266:	fb06 2404 	mla	r4, r6, r4, r2
 801726a:	1424      	asrs	r4, r4, #16
 801726c:	d456      	bmi.n	801731c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801726e:	42bc      	cmp	r4, r7
 8017270:	da54      	bge.n	801731c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017272:	4698      	mov	r8, r3
 8017274:	f8dd 9000 	ldr.w	r9, [sp]
 8017278:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801727c:	f1b8 0f00 	cmp.w	r8, #0
 8017280:	dd54      	ble.n	801732c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017282:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017286:	9804      	ldr	r0, [sp, #16]
 8017288:	1414      	asrs	r4, r2, #16
 801728a:	fb07 0404 	mla	r4, r7, r4, r0
 801728e:	140e      	asrs	r6, r1, #16
 8017290:	f814 e006 	ldrb.w	lr, [r4, r6]
 8017294:	9801      	ldr	r0, [sp, #4]
 8017296:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801729a:	eb00 0b0e 	add.w	fp, r0, lr
 801729e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80172a2:	f8b9 4000 	ldrh.w	r4, [r9]
 80172a6:	fb16 f60a 	smulbb	r6, r6, sl
 80172aa:	1227      	asrs	r7, r4, #8
 80172ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80172b0:	fb07 6705 	mla	r7, r7, r5, r6
 80172b4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80172b8:	10e6      	asrs	r6, r4, #3
 80172ba:	00e4      	lsls	r4, r4, #3
 80172bc:	b2e4      	uxtb	r4, r4
 80172be:	fb1b fb0a 	smulbb	fp, fp, sl
 80172c2:	fb14 f405 	smulbb	r4, r4, r5
 80172c6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80172ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80172ce:	fb06 b605 	mla	r6, r6, r5, fp
 80172d2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80172d6:	b2bf      	uxth	r7, r7
 80172d8:	b2b6      	uxth	r6, r6
 80172da:	fa1f fe8e 	uxth.w	lr, lr
 80172de:	1c7c      	adds	r4, r7, #1
 80172e0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80172e4:	f106 0b01 	add.w	fp, r6, #1
 80172e8:	f10e 0401 	add.w	r4, lr, #1
 80172ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80172ee:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80172f2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80172f6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80172fa:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80172fe:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017302:	4327      	orrs	r7, r4
 8017304:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017308:	4401      	add	r1, r0
 801730a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801730c:	ea47 070b 	orr.w	r7, r7, fp
 8017310:	f829 7b02 	strh.w	r7, [r9], #2
 8017314:	4402      	add	r2, r0
 8017316:	f108 38ff 	add.w	r8, r8, #4294967295
 801731a:	e7af      	b.n	801727c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801731c:	f04f 0e00 	mov.w	lr, #0
 8017320:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8017324:	eb03 040e 	add.w	r4, r3, lr
 8017328:	2c00      	cmp	r4, #0
 801732a:	dc43      	bgt.n	80173b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801732c:	9a00      	ldr	r2, [sp, #0]
 801732e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017332:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	9b02      	ldr	r3, [sp, #8]
 801733a:	2b00      	cmp	r3, #0
 801733c:	f340 8098 	ble.w	8017470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017344:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017348:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801734c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017350:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017354:	eef0 6a62 	vmov.f32	s13, s5
 8017358:	ee31 1a05 	vadd.f32	s2, s2, s10
 801735c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017360:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017364:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017368:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801736c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017370:	eef0 6a43 	vmov.f32	s13, s6
 8017374:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017378:	ee12 2a90 	vmov	r2, s5
 801737c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017382:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017386:	fb92 f3f3 	sdiv	r3, r2, r3
 801738a:	ee13 2a10 	vmov	r2, s6
 801738e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017392:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017396:	fb92 f3f3 	sdiv	r3, r2, r3
 801739a:	9314      	str	r3, [sp, #80]	; 0x50
 801739c:	9b02      	ldr	r3, [sp, #8]
 801739e:	9a05      	ldr	r2, [sp, #20]
 80173a0:	3b01      	subs	r3, #1
 80173a2:	9302      	str	r3, [sp, #8]
 80173a4:	eeb0 3a67 	vmov.f32	s6, s15
 80173a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173aa:	eef0 2a47 	vmov.f32	s5, s14
 80173ae:	bf08      	it	eq
 80173b0:	4613      	moveq	r3, r2
 80173b2:	e72a      	b.n	801720a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80173b4:	140f      	asrs	r7, r1, #16
 80173b6:	d454      	bmi.n	8017462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80173b8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80173bc:	42be      	cmp	r6, r7
 80173be:	dd50      	ble.n	8017462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80173c0:	ea5f 4822 	movs.w	r8, r2, asr #16
 80173c4:	d44d      	bmi.n	8017462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80173c6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80173ca:	4544      	cmp	r4, r8
 80173cc:	dd49      	ble.n	8017462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80173ce:	f06f 0001 	mvn.w	r0, #1
 80173d2:	9c04      	ldr	r4, [sp, #16]
 80173d4:	b236      	sxth	r6, r6
 80173d6:	fb08 4606 	mla	r6, r8, r6, r4
 80173da:	f816 8007 	ldrb.w	r8, [r6, r7]
 80173de:	9c01      	ldr	r4, [sp, #4]
 80173e0:	fb00 fa0e 	mul.w	sl, r0, lr
 80173e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80173e8:	eb04 0b08 	add.w	fp, r4, r8
 80173ec:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80173f0:	9800      	ldr	r0, [sp, #0]
 80173f2:	fb16 f609 	smulbb	r6, r6, r9
 80173f6:	f830 400a 	ldrh.w	r4, [r0, sl]
 80173fa:	f89b b001 	ldrb.w	fp, [fp, #1]
 80173fe:	1227      	asrs	r7, r4, #8
 8017400:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017404:	fb07 6705 	mla	r7, r7, r5, r6
 8017408:	10e6      	asrs	r6, r4, #3
 801740a:	00e4      	lsls	r4, r4, #3
 801740c:	b2e4      	uxtb	r4, r4
 801740e:	fb1b fb09 	smulbb	fp, fp, r9
 8017412:	9801      	ldr	r0, [sp, #4]
 8017414:	fb14 f405 	smulbb	r4, r4, r5
 8017418:	f810 8008 	ldrb.w	r8, [r0, r8]
 801741c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017420:	fb06 b605 	mla	r6, r6, r5, fp
 8017424:	fb08 4809 	mla	r8, r8, r9, r4
 8017428:	b2bf      	uxth	r7, r7
 801742a:	b2b6      	uxth	r6, r6
 801742c:	fa1f f888 	uxth.w	r8, r8
 8017430:	1c7c      	adds	r4, r7, #1
 8017432:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017436:	f106 0b01 	add.w	fp, r6, #1
 801743a:	f108 0401 	add.w	r4, r8, #1
 801743e:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8017442:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017446:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801744a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801744e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017452:	4327      	orrs	r7, r4
 8017454:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017458:	9800      	ldr	r0, [sp, #0]
 801745a:	ea47 070b 	orr.w	r7, r7, fp
 801745e:	f820 700a 	strh.w	r7, [r0, sl]
 8017462:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017464:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017468:	4401      	add	r1, r0
 801746a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801746c:	4402      	add	r2, r0
 801746e:	e759      	b.n	8017324 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017470:	b007      	add	sp, #28
 8017472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017478 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	b085      	sub	sp, #20
 8017482:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017484:	9203      	str	r2, [sp, #12]
 8017486:	6870      	ldr	r0, [r6, #4]
 8017488:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801748c:	fb00 2404 	mla	r4, r0, r4, r2
 8017490:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017492:	6832      	ldr	r2, [r6, #0]
 8017494:	686f      	ldr	r7, [r5, #4]
 8017496:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801749a:	682a      	ldr	r2, [r5, #0]
 801749c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80174a0:	9101      	str	r1, [sp, #4]
 80174a2:	9202      	str	r2, [sp, #8]
 80174a4:	3704      	adds	r7, #4
 80174a6:	9a01      	ldr	r2, [sp, #4]
 80174a8:	2a00      	cmp	r2, #0
 80174aa:	dc03      	bgt.n	80174b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80174ac:	9a03      	ldr	r2, [sp, #12]
 80174ae:	2a00      	cmp	r2, #0
 80174b0:	f340 80cc 	ble.w	801764c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80174b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80174b6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80174ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80174be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80174c0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80174c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	dd0d      	ble.n	80174e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80174cc:	1406      	asrs	r6, r0, #16
 80174ce:	d405      	bmi.n	80174dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80174d0:	454e      	cmp	r6, r9
 80174d2:	da03      	bge.n	80174dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80174d4:	1416      	asrs	r6, r2, #16
 80174d6:	d401      	bmi.n	80174dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80174d8:	4546      	cmp	r6, r8
 80174da:	db06      	blt.n	80174ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80174dc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80174de:	4460      	add	r0, ip
 80174e0:	4432      	add	r2, r6
 80174e2:	3b01      	subs	r3, #1
 80174e4:	3402      	adds	r4, #2
 80174e6:	e7ef      	b.n	80174c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80174e8:	d00f      	beq.n	801750a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80174ea:	1e5e      	subs	r6, r3, #1
 80174ec:	fb0c 0e06 	mla	lr, ip, r6, r0
 80174f0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80174f4:	d543      	bpl.n	801757e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80174f6:	4698      	mov	r8, r3
 80174f8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80174fc:	f1b8 0f00 	cmp.w	r8, #0
 8017500:	dc71      	bgt.n	80175e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8017502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017506:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801750a:	9b01      	ldr	r3, [sp, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	f340 809d 	ble.w	801764c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017512:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017516:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801751a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801751e:	eeb0 6a62 	vmov.f32	s12, s5
 8017522:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017526:	ee31 1a05 	vadd.f32	s2, s2, s10
 801752a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801752e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017532:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017536:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801753a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801753e:	eeb0 6a43 	vmov.f32	s12, s6
 8017542:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017546:	ee12 2a90 	vmov	r2, s5
 801754a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801754e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017550:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017554:	fb92 fcf3 	sdiv	ip, r2, r3
 8017558:	ee13 2a10 	vmov	r2, s6
 801755c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017560:	9312      	str	r3, [sp, #72]	; 0x48
 8017562:	9b01      	ldr	r3, [sp, #4]
 8017564:	9a03      	ldr	r2, [sp, #12]
 8017566:	3b01      	subs	r3, #1
 8017568:	9301      	str	r3, [sp, #4]
 801756a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801756e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017570:	eeb0 3a67 	vmov.f32	s6, s15
 8017574:	bf08      	it	eq
 8017576:	4613      	moveq	r3, r2
 8017578:	eef0 2a47 	vmov.f32	s5, s14
 801757c:	e793      	b.n	80174a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801757e:	45ce      	cmp	lr, r9
 8017580:	dab9      	bge.n	80174f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017582:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017584:	fb01 2606 	mla	r6, r1, r6, r2
 8017588:	1436      	asrs	r6, r6, #16
 801758a:	d4b4      	bmi.n	80174f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801758c:	4546      	cmp	r6, r8
 801758e:	dab2      	bge.n	80174f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017590:	4698      	mov	r8, r3
 8017592:	46a2      	mov	sl, r4
 8017594:	f1b8 0f00 	cmp.w	r8, #0
 8017598:	ddb3      	ble.n	8017502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801759a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801759e:	9902      	ldr	r1, [sp, #8]
 80175a0:	1416      	asrs	r6, r2, #16
 80175a2:	fb09 1606 	mla	r6, r9, r6, r1
 80175a6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80175aa:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80175ae:	4929      	ldr	r1, [pc, #164]	; (8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80175b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80175b4:	eb07 0b0e 	add.w	fp, r7, lr
 80175b8:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80175bc:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80175c0:	00f6      	lsls	r6, r6, #3
 80175c2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80175c6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80175ca:	ea49 0606 	orr.w	r6, r9, r6
 80175ce:	f817 900e 	ldrb.w	r9, [r7, lr]
 80175d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80175d4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 80175d8:	f82a 6b02 	strh.w	r6, [sl], #2
 80175dc:	4460      	add	r0, ip
 80175de:	440a      	add	r2, r1
 80175e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80175e4:	e7d6      	b.n	8017594 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80175e6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80175ea:	d429      	bmi.n	8017640 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80175ec:	68ae      	ldr	r6, [r5, #8]
 80175ee:	454e      	cmp	r6, r9
 80175f0:	dd26      	ble.n	8017640 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80175f2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80175f6:	d423      	bmi.n	8017640 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80175f8:	68e9      	ldr	r1, [r5, #12]
 80175fa:	4559      	cmp	r1, fp
 80175fc:	dd20      	ble.n	8017640 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80175fe:	9902      	ldr	r1, [sp, #8]
 8017600:	fa0f fe86 	sxth.w	lr, r6
 8017604:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017608:	f06f 0101 	mvn.w	r1, #1
 801760c:	f81e e009 	ldrb.w	lr, [lr, r9]
 8017610:	fb01 f908 	mul.w	r9, r1, r8
 8017614:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017618:	eb07 060e 	add.w	r6, r7, lr
 801761c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017620:	7876      	ldrb	r6, [r6, #1]
 8017622:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8017626:	00f6      	lsls	r6, r6, #3
 8017628:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801762c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017630:	ea4b 0606 	orr.w	r6, fp, r6
 8017634:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8017638:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801763c:	f82a 6009 	strh.w	r6, [sl, r9]
 8017640:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017642:	4460      	add	r0, ip
 8017644:	440a      	add	r2, r1
 8017646:	f108 38ff 	add.w	r8, r8, #4294967295
 801764a:	e757      	b.n	80174fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801764c:	b005      	add	sp, #20
 801764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017652:	bf00      	nop
 8017654:	fffff800 	.word	0xfffff800

08017658 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017660:	b087      	sub	sp, #28
 8017662:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017664:	468b      	mov	fp, r1
 8017666:	9204      	str	r2, [sp, #16]
 8017668:	6841      	ldr	r1, [r0, #4]
 801766a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801766e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017672:	9205      	str	r2, [sp, #20]
 8017674:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017678:	fb01 2404 	mla	r4, r1, r4, r2
 801767c:	6802      	ldr	r2, [r0, #0]
 801767e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017682:	f8dc 2000 	ldr.w	r2, [ip]
 8017686:	9201      	str	r2, [sp, #4]
 8017688:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801768c:	3204      	adds	r2, #4
 801768e:	9202      	str	r2, [sp, #8]
 8017690:	f1bb 0f00 	cmp.w	fp, #0
 8017694:	dc03      	bgt.n	801769e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017696:	9a04      	ldr	r2, [sp, #16]
 8017698:	2a00      	cmp	r2, #0
 801769a:	f340 8138 	ble.w	801790e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801769e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80176a0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80176a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80176a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176aa:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80176ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	dd0e      	ble.n	80176d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80176b6:	1402      	asrs	r2, r0, #16
 80176b8:	d405      	bmi.n	80176c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80176ba:	42ba      	cmp	r2, r7
 80176bc:	da03      	bge.n	80176c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80176be:	140a      	asrs	r2, r1, #16
 80176c0:	d401      	bmi.n	80176c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80176c2:	42b2      	cmp	r2, r6
 80176c4:	db07      	blt.n	80176d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80176c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80176c8:	3b01      	subs	r3, #1
 80176ca:	4410      	add	r0, r2
 80176cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176ce:	3402      	adds	r4, #2
 80176d0:	4411      	add	r1, r2
 80176d2:	e7ee      	b.n	80176b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80176d4:	d019      	beq.n	801770a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80176d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80176d8:	1e5a      	subs	r2, r3, #1
 80176da:	fb05 0502 	mla	r5, r5, r2, r0
 80176de:	142d      	asrs	r5, r5, #16
 80176e0:	d409      	bmi.n	80176f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80176e2:	42bd      	cmp	r5, r7
 80176e4:	da07      	bge.n	80176f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80176e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80176e8:	fb05 1202 	mla	r2, r5, r2, r1
 80176ec:	1412      	asrs	r2, r2, #16
 80176ee:	d402      	bmi.n	80176f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80176f0:	42b2      	cmp	r2, r6
 80176f2:	f2c0 80ac 	blt.w	801784e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80176f6:	f04f 0e00 	mov.w	lr, #0
 80176fa:	eb03 020e 	add.w	r2, r3, lr
 80176fe:	2a00      	cmp	r2, #0
 8017700:	dc3e      	bgt.n	8017780 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017702:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017706:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801770a:	f1bb 0f00 	cmp.w	fp, #0
 801770e:	f340 80fe 	ble.w	801790e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017712:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017716:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801771a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801771e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017722:	eeb0 6a62 	vmov.f32	s12, s5
 8017726:	ee31 1a05 	vadd.f32	s2, s2, s10
 801772a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801772e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017732:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017736:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801773a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801773e:	eeb0 6a43 	vmov.f32	s12, s6
 8017742:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017746:	ee12 2a90 	vmov	r2, s5
 801774a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801774e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017754:	fb92 f3f3 	sdiv	r3, r2, r3
 8017758:	ee13 2a10 	vmov	r2, s6
 801775c:	9313      	str	r3, [sp, #76]	; 0x4c
 801775e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017760:	f1bb 0b01 	subs.w	fp, fp, #1
 8017764:	fb92 f3f3 	sdiv	r3, r2, r3
 8017768:	9a04      	ldr	r2, [sp, #16]
 801776a:	9314      	str	r3, [sp, #80]	; 0x50
 801776c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017772:	eeb0 3a67 	vmov.f32	s6, s15
 8017776:	bf08      	it	eq
 8017778:	4613      	moveq	r3, r2
 801777a:	eef0 2a47 	vmov.f32	s5, s14
 801777e:	e787      	b.n	8017690 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017780:	1406      	asrs	r6, r0, #16
 8017782:	d45d      	bmi.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017784:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8017788:	42b5      	cmp	r5, r6
 801778a:	dd59      	ble.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801778c:	140f      	asrs	r7, r1, #16
 801778e:	d457      	bmi.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017790:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017794:	42ba      	cmp	r2, r7
 8017796:	dd53      	ble.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017798:	9a01      	ldr	r2, [sp, #4]
 801779a:	b22d      	sxth	r5, r5
 801779c:	fb07 2505 	mla	r5, r7, r5, r2
 80177a0:	5daa      	ldrb	r2, [r5, r6]
 80177a2:	9d02      	ldr	r5, [sp, #8]
 80177a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80177a8:	0e2e      	lsrs	r6, r5, #24
 80177aa:	d049      	beq.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80177ac:	f06f 0201 	mvn.w	r2, #1
 80177b0:	fb02 f20e 	mul.w	r2, r2, lr
 80177b4:	f834 8002 	ldrh.w	r8, [r4, r2]
 80177b8:	9203      	str	r2, [sp, #12]
 80177ba:	9a05      	ldr	r2, [sp, #20]
 80177bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80177c0:	4356      	muls	r6, r2
 80177c2:	1c72      	adds	r2, r6, #1
 80177c4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80177c8:	1212      	asrs	r2, r2, #8
 80177ca:	fa1f f982 	uxth.w	r9, r2
 80177ce:	43d2      	mvns	r2, r2
 80177d0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80177d4:	fb16 f609 	smulbb	r6, r6, r9
 80177d8:	b2ed      	uxtb	r5, r5
 80177da:	ea4f 2728 	mov.w	r7, r8, asr #8
 80177de:	fb15 f509 	smulbb	r5, r5, r9
 80177e2:	b2d2      	uxtb	r2, r2
 80177e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80177e8:	fb07 6702 	mla	r7, r7, r2, r6
 80177ec:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80177f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80177f4:	fb1a fa09 	smulbb	sl, sl, r9
 80177f8:	fa5f f888 	uxtb.w	r8, r8
 80177fc:	fb08 5502 	mla	r5, r8, r2, r5
 8017800:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017804:	fb06 a602 	mla	r6, r6, r2, sl
 8017808:	b2bf      	uxth	r7, r7
 801780a:	b2ad      	uxth	r5, r5
 801780c:	1c7a      	adds	r2, r7, #1
 801780e:	f105 0a01 	add.w	sl, r5, #1
 8017812:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017816:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801781a:	b2b6      	uxth	r6, r6
 801781c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017820:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017824:	ea4a 0707 	orr.w	r7, sl, r7
 8017828:	f106 0a01 	add.w	sl, r6, #1
 801782c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017830:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017834:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017838:	9a03      	ldr	r2, [sp, #12]
 801783a:	ea47 070a 	orr.w	r7, r7, sl
 801783e:	52a7      	strh	r7, [r4, r2]
 8017840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017842:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017846:	4410      	add	r0, r2
 8017848:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801784a:	4411      	add	r1, r2
 801784c:	e755      	b.n	80176fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801784e:	f04f 0800 	mov.w	r8, #0
 8017852:	eba3 0208 	sub.w	r2, r3, r8
 8017856:	2a00      	cmp	r2, #0
 8017858:	f77f af53 	ble.w	8017702 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801785c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8017860:	9f01      	ldr	r7, [sp, #4]
 8017862:	140a      	asrs	r2, r1, #16
 8017864:	fb06 7202 	mla	r2, r6, r2, r7
 8017868:	1405      	asrs	r5, r0, #16
 801786a:	5d52      	ldrb	r2, [r2, r5]
 801786c:	9d02      	ldr	r5, [sp, #8]
 801786e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017872:	0e2e      	lsrs	r6, r5, #24
 8017874:	d044      	beq.n	8017900 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8017876:	9a05      	ldr	r2, [sp, #20]
 8017878:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801787c:	4356      	muls	r6, r2
 801787e:	1c72      	adds	r2, r6, #1
 8017880:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8017884:	1212      	asrs	r2, r2, #8
 8017886:	fa1f f982 	uxth.w	r9, r2
 801788a:	43d2      	mvns	r2, r2
 801788c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017890:	fb16 f609 	smulbb	r6, r6, r9
 8017894:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017898:	b2ed      	uxtb	r5, r5
 801789a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801789e:	fb15 f509 	smulbb	r5, r5, r9
 80178a2:	b2d2      	uxtb	r2, r2
 80178a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80178a8:	fb07 6702 	mla	r7, r7, r2, r6
 80178ac:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80178b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80178b4:	fb1a fa09 	smulbb	sl, sl, r9
 80178b8:	fa5f fe8e 	uxtb.w	lr, lr
 80178bc:	fb0e 5502 	mla	r5, lr, r2, r5
 80178c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80178c4:	fb06 a602 	mla	r6, r6, r2, sl
 80178c8:	b2bf      	uxth	r7, r7
 80178ca:	b2ad      	uxth	r5, r5
 80178cc:	1c7a      	adds	r2, r7, #1
 80178ce:	f105 0a01 	add.w	sl, r5, #1
 80178d2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80178d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80178da:	b2b6      	uxth	r6, r6
 80178dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80178e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80178e4:	ea4a 0707 	orr.w	r7, sl, r7
 80178e8:	f106 0a01 	add.w	sl, r6, #1
 80178ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80178f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80178f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80178f8:	ea47 070a 	orr.w	r7, r7, sl
 80178fc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017902:	f108 0801 	add.w	r8, r8, #1
 8017906:	4410      	add	r0, r2
 8017908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801790a:	4411      	add	r1, r2
 801790c:	e7a1      	b.n	8017852 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801790e:	b007      	add	sp, #28
 8017910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801791c:	b085      	sub	sp, #20
 801791e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017920:	468b      	mov	fp, r1
 8017922:	6841      	ldr	r1, [r0, #4]
 8017924:	9203      	str	r2, [sp, #12]
 8017926:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801792a:	fb01 2404 	mla	r4, r1, r4, r2
 801792e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8017932:	6802      	ldr	r2, [r0, #0]
 8017934:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017938:	f8de 2000 	ldr.w	r2, [lr]
 801793c:	9200      	str	r2, [sp, #0]
 801793e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017942:	3204      	adds	r2, #4
 8017944:	9201      	str	r2, [sp, #4]
 8017946:	f1bb 0f00 	cmp.w	fp, #0
 801794a:	dc03      	bgt.n	8017954 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801794c:	9a03      	ldr	r2, [sp, #12]
 801794e:	2a00      	cmp	r2, #0
 8017950:	f340 8153 	ble.w	8017bfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017956:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801795a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801795e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017960:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017964:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017968:	2b00      	cmp	r3, #0
 801796a:	dd0e      	ble.n	801798a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801796c:	1408      	asrs	r0, r1, #16
 801796e:	d405      	bmi.n	801797c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017970:	42b8      	cmp	r0, r7
 8017972:	da03      	bge.n	801797c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017974:	1410      	asrs	r0, r2, #16
 8017976:	d401      	bmi.n	801797c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017978:	42b0      	cmp	r0, r6
 801797a:	db07      	blt.n	801798c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801797c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801797e:	3b01      	subs	r3, #1
 8017980:	4401      	add	r1, r0
 8017982:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017984:	3402      	adds	r4, #2
 8017986:	4402      	add	r2, r0
 8017988:	e7ee      	b.n	8017968 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801798a:	d017      	beq.n	80179bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801798c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801798e:	1e58      	subs	r0, r3, #1
 8017990:	fb05 1500 	mla	r5, r5, r0, r1
 8017994:	142d      	asrs	r5, r5, #16
 8017996:	d409      	bmi.n	80179ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017998:	42bd      	cmp	r5, r7
 801799a:	da07      	bge.n	80179ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801799c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801799e:	fb05 2000 	mla	r0, r5, r0, r2
 80179a2:	1400      	asrs	r0, r0, #16
 80179a4:	d402      	bmi.n	80179ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80179a6:	42b0      	cmp	r0, r6
 80179a8:	f2c0 80bc 	blt.w	8017b24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80179ac:	2600      	movs	r6, #0
 80179ae:	1998      	adds	r0, r3, r6
 80179b0:	2800      	cmp	r0, #0
 80179b2:	dc3e      	bgt.n	8017a32 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80179b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80179b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80179bc:	f1bb 0f00 	cmp.w	fp, #0
 80179c0:	f340 811b 	ble.w	8017bfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80179c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80179c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80179cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80179d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80179d4:	eeb0 6a62 	vmov.f32	s12, s5
 80179d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80179dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80179e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80179e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80179e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80179ec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80179f0:	eeb0 6a43 	vmov.f32	s12, s6
 80179f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80179f8:	ee12 2a90 	vmov	r2, s5
 80179fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8017a0a:	ee13 2a10 	vmov	r2, s6
 8017a0e:	9311      	str	r3, [sp, #68]	; 0x44
 8017a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a12:	f1bb 0b01 	subs.w	fp, fp, #1
 8017a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8017a1a:	9a03      	ldr	r2, [sp, #12]
 8017a1c:	9312      	str	r3, [sp, #72]	; 0x48
 8017a1e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a24:	eeb0 3a67 	vmov.f32	s6, s15
 8017a28:	bf08      	it	eq
 8017a2a:	4613      	moveq	r3, r2
 8017a2c:	eef0 2a47 	vmov.f32	s5, s14
 8017a30:	e789      	b.n	8017946 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017a32:	140f      	asrs	r7, r1, #16
 8017a34:	d426      	bmi.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017a36:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017a3a:	42bd      	cmp	r5, r7
 8017a3c:	dd22      	ble.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017a3e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017a42:	d41f      	bmi.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017a44:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017a48:	4560      	cmp	r0, ip
 8017a4a:	dd1b      	ble.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017a4c:	9800      	ldr	r0, [sp, #0]
 8017a4e:	b22d      	sxth	r5, r5
 8017a50:	fb0c 0505 	mla	r5, ip, r5, r0
 8017a54:	5de8      	ldrb	r0, [r5, r7]
 8017a56:	9d01      	ldr	r5, [sp, #4]
 8017a58:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017a5c:	0e07      	lsrs	r7, r0, #24
 8017a5e:	2fff      	cmp	r7, #255	; 0xff
 8017a60:	d116      	bne.n	8017a90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017a62:	f06f 0501 	mvn.w	r5, #1
 8017a66:	fb05 f706 	mul.w	r7, r5, r6
 8017a6a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8017a6e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8017a72:	0945      	lsrs	r5, r0, #5
 8017a74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017a78:	ea4c 0505 	orr.w	r5, ip, r5
 8017a7c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8017a80:	4305      	orrs	r5, r0
 8017a82:	53e5      	strh	r5, [r4, r7]
 8017a84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017a86:	3e01      	subs	r6, #1
 8017a88:	4401      	add	r1, r0
 8017a8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a8c:	4402      	add	r2, r0
 8017a8e:	e78e      	b.n	80179ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017a90:	b2fd      	uxtb	r5, r7
 8017a92:	2f00      	cmp	r7, #0
 8017a94:	d0f6      	beq.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017a96:	f06f 0701 	mvn.w	r7, #1
 8017a9a:	fa1f f985 	uxth.w	r9, r5
 8017a9e:	43ed      	mvns	r5, r5
 8017aa0:	4377      	muls	r7, r6
 8017aa2:	f834 8007 	ldrh.w	r8, [r4, r7]
 8017aa6:	9702      	str	r7, [sp, #8]
 8017aa8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017aac:	fb17 f709 	smulbb	r7, r7, r9
 8017ab0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017ab4:	b2c0      	uxtb	r0, r0
 8017ab6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017aba:	fb10 f009 	smulbb	r0, r0, r9
 8017abe:	b2ed      	uxtb	r5, r5
 8017ac0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017ac4:	fb0c 7c05 	mla	ip, ip, r5, r7
 8017ac8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8017acc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017ad0:	fb1a fa09 	smulbb	sl, sl, r9
 8017ad4:	fa5f f888 	uxtb.w	r8, r8
 8017ad8:	fb08 0005 	mla	r0, r8, r5, r0
 8017adc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017ae0:	fb07 a705 	mla	r7, r7, r5, sl
 8017ae4:	b280      	uxth	r0, r0
 8017ae6:	fa1f fc8c 	uxth.w	ip, ip
 8017aea:	f100 0a01 	add.w	sl, r0, #1
 8017aee:	f10c 0501 	add.w	r5, ip, #1
 8017af2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8017af6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017afa:	b2bf      	uxth	r7, r7
 8017afc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017b00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017b04:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017b08:	f107 0a01 	add.w	sl, r7, #1
 8017b0c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017b10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017b14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017b18:	9802      	ldr	r0, [sp, #8]
 8017b1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017b1e:	f824 c000 	strh.w	ip, [r4, r0]
 8017b22:	e7af      	b.n	8017a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017b24:	f04f 0800 	mov.w	r8, #0
 8017b28:	eba3 0008 	sub.w	r0, r3, r8
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	f77f af41 	ble.w	80179b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017b32:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017b36:	9f00      	ldr	r7, [sp, #0]
 8017b38:	1410      	asrs	r0, r2, #16
 8017b3a:	fb06 7000 	mla	r0, r6, r0, r7
 8017b3e:	140d      	asrs	r5, r1, #16
 8017b40:	5d40      	ldrb	r0, [r0, r5]
 8017b42:	9d01      	ldr	r5, [sp, #4]
 8017b44:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017b48:	0e2e      	lsrs	r6, r5, #24
 8017b4a:	2eff      	cmp	r6, #255	; 0xff
 8017b4c:	d112      	bne.n	8017b74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8017b4e:	482c      	ldr	r0, [pc, #176]	; (8017c00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8017b50:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017b54:	0968      	lsrs	r0, r5, #5
 8017b56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017b5a:	4330      	orrs	r0, r6
 8017b5c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017b60:	4328      	orrs	r0, r5
 8017b62:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8017b66:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017b68:	f108 0801 	add.w	r8, r8, #1
 8017b6c:	4401      	add	r1, r0
 8017b6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017b70:	4402      	add	r2, r0
 8017b72:	e7d9      	b.n	8017b28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017b74:	b2f0      	uxtb	r0, r6
 8017b76:	2e00      	cmp	r6, #0
 8017b78:	d0f5      	beq.n	8017b66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017b7a:	fa1f f980 	uxth.w	r9, r0
 8017b7e:	43c0      	mvns	r0, r0
 8017b80:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017b84:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8017b88:	fb16 f609 	smulbb	r6, r6, r9
 8017b8c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017b90:	b2ed      	uxtb	r5, r5
 8017b92:	ea4f 272c 	mov.w	r7, ip, asr #8
 8017b96:	fb15 f509 	smulbb	r5, r5, r9
 8017b9a:	b2c0      	uxtb	r0, r0
 8017b9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017ba0:	fb07 6700 	mla	r7, r7, r0, r6
 8017ba4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8017ba8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017bac:	fb1a fa09 	smulbb	sl, sl, r9
 8017bb0:	fa5f fc8c 	uxtb.w	ip, ip
 8017bb4:	fb0c 5500 	mla	r5, ip, r0, r5
 8017bb8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017bbc:	fb06 a600 	mla	r6, r6, r0, sl
 8017bc0:	b2bf      	uxth	r7, r7
 8017bc2:	b2ad      	uxth	r5, r5
 8017bc4:	1c78      	adds	r0, r7, #1
 8017bc6:	f105 0a01 	add.w	sl, r5, #1
 8017bca:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8017bce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017bd2:	b2b6      	uxth	r6, r6
 8017bd4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017bd8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017bdc:	ea4a 0707 	orr.w	r7, sl, r7
 8017be0:	f106 0a01 	add.w	sl, r6, #1
 8017be4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017be8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017bec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017bf0:	ea47 070a 	orr.w	r7, r7, sl
 8017bf4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017bf8:	e7b5      	b.n	8017b66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017bfa:	b005      	add	sp, #20
 8017bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c00:	fffff800 	.word	0xfffff800

08017c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0c:	b087      	sub	sp, #28
 8017c0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017c10:	468b      	mov	fp, r1
 8017c12:	9204      	str	r2, [sp, #16]
 8017c14:	6861      	ldr	r1, [r4, #4]
 8017c16:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017c1a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017c1e:	9205      	str	r2, [sp, #20]
 8017c20:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017c24:	fb01 2000 	mla	r0, r1, r0, r2
 8017c28:	6822      	ldr	r2, [r4, #0]
 8017c2a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017c2e:	f8de 2000 	ldr.w	r2, [lr]
 8017c32:	9201      	str	r2, [sp, #4]
 8017c34:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017c38:	9202      	str	r2, [sp, #8]
 8017c3a:	f1bb 0f00 	cmp.w	fp, #0
 8017c3e:	dc03      	bgt.n	8017c48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017c40:	9a04      	ldr	r2, [sp, #16]
 8017c42:	2a00      	cmp	r2, #0
 8017c44:	f340 8142 	ble.w	8017ecc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017c48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c4a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017c4e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017c52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c54:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017c58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	dd0e      	ble.n	8017c7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017c60:	140c      	asrs	r4, r1, #16
 8017c62:	d405      	bmi.n	8017c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017c64:	42bc      	cmp	r4, r7
 8017c66:	da03      	bge.n	8017c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017c68:	1414      	asrs	r4, r2, #16
 8017c6a:	d401      	bmi.n	8017c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017c6c:	42b4      	cmp	r4, r6
 8017c6e:	db07      	blt.n	8017c80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017c70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c72:	3b01      	subs	r3, #1
 8017c74:	4421      	add	r1, r4
 8017c76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017c78:	3002      	adds	r0, #2
 8017c7a:	4422      	add	r2, r4
 8017c7c:	e7ee      	b.n	8017c5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8017c7e:	d019      	beq.n	8017cb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017c80:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017c82:	1e5c      	subs	r4, r3, #1
 8017c84:	fb05 1504 	mla	r5, r5, r4, r1
 8017c88:	142d      	asrs	r5, r5, #16
 8017c8a:	d409      	bmi.n	8017ca0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017c8c:	42bd      	cmp	r5, r7
 8017c8e:	da07      	bge.n	8017ca0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017c90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017c92:	fb05 2404 	mla	r4, r5, r4, r2
 8017c96:	1424      	asrs	r4, r4, #16
 8017c98:	d402      	bmi.n	8017ca0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017c9a:	42b4      	cmp	r4, r6
 8017c9c:	f2c0 80b1 	blt.w	8017e02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017ca0:	f04f 0800 	mov.w	r8, #0
 8017ca4:	eb03 0408 	add.w	r4, r3, r8
 8017ca8:	2c00      	cmp	r4, #0
 8017caa:	dc3e      	bgt.n	8017d2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017cb0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017cb4:	f1bb 0f00 	cmp.w	fp, #0
 8017cb8:	f340 8108 	ble.w	8017ecc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017cbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017cc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017cc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017cc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017ccc:	eeb0 6a62 	vmov.f32	s12, s5
 8017cd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017cd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017cd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017cdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ce0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ce4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017ce8:	eeb0 6a43 	vmov.f32	s12, s6
 8017cec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017cf0:	ee12 2a90 	vmov	r2, s5
 8017cf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d02:	ee13 2a10 	vmov	r2, s6
 8017d06:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d0a:	f1bb 0b01 	subs.w	fp, fp, #1
 8017d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d12:	9a04      	ldr	r2, [sp, #16]
 8017d14:	9314      	str	r3, [sp, #80]	; 0x50
 8017d16:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d1c:	eeb0 3a67 	vmov.f32	s6, s15
 8017d20:	bf08      	it	eq
 8017d22:	4613      	moveq	r3, r2
 8017d24:	eef0 2a47 	vmov.f32	s5, s14
 8017d28:	e787      	b.n	8017c3a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017d2a:	140e      	asrs	r6, r1, #16
 8017d2c:	d462      	bmi.n	8017df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017d2e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017d32:	42b5      	cmp	r5, r6
 8017d34:	dd5e      	ble.n	8017df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017d36:	1417      	asrs	r7, r2, #16
 8017d38:	d45c      	bmi.n	8017df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017d3a:	f8de 400c 	ldr.w	r4, [lr, #12]
 8017d3e:	42bc      	cmp	r4, r7
 8017d40:	dd58      	ble.n	8017df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017d42:	b22d      	sxth	r5, r5
 8017d44:	fb07 6505 	mla	r5, r7, r5, r6
 8017d48:	9c02      	ldr	r4, [sp, #8]
 8017d4a:	5d66      	ldrb	r6, [r4, r5]
 8017d4c:	2e00      	cmp	r6, #0
 8017d4e:	d051      	beq.n	8017df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017d50:	9c01      	ldr	r4, [sp, #4]
 8017d52:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8017d56:	f06f 0401 	mvn.w	r4, #1
 8017d5a:	fb04 f408 	mul.w	r4, r4, r8
 8017d5e:	5b05      	ldrh	r5, [r0, r4]
 8017d60:	9403      	str	r4, [sp, #12]
 8017d62:	9c05      	ldr	r4, [sp, #20]
 8017d64:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017d68:	4366      	muls	r6, r4
 8017d6a:	1c74      	adds	r4, r6, #1
 8017d6c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017d70:	1224      	asrs	r4, r4, #8
 8017d72:	b2a7      	uxth	r7, r4
 8017d74:	43e4      	mvns	r4, r4
 8017d76:	122e      	asrs	r6, r5, #8
 8017d78:	b2e4      	uxtb	r4, r4
 8017d7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017d7e:	fb16 f604 	smulbb	r6, r6, r4
 8017d82:	00ed      	lsls	r5, r5, #3
 8017d84:	b2ed      	uxtb	r5, r5
 8017d86:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8017d8a:	fb15 f504 	smulbb	r5, r5, r4
 8017d8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017d92:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017d96:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017d9a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8017d9e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017da2:	fb1a fa04 	smulbb	sl, sl, r4
 8017da6:	fa5f f989 	uxtb.w	r9, r9
 8017daa:	fb09 5507 	mla	r5, r9, r7, r5
 8017dae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017db2:	fb06 a607 	mla	r6, r6, r7, sl
 8017db6:	fa1f fc8c 	uxth.w	ip, ip
 8017dba:	b2ad      	uxth	r5, r5
 8017dbc:	f10c 0401 	add.w	r4, ip, #1
 8017dc0:	f105 0a01 	add.w	sl, r5, #1
 8017dc4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017dc8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017dcc:	b2b6      	uxth	r6, r6
 8017dce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017dd2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017dd6:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017dda:	f106 0a01 	add.w	sl, r6, #1
 8017dde:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017de2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017de6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017dea:	9c03      	ldr	r4, [sp, #12]
 8017dec:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017df0:	f820 c004 	strh.w	ip, [r0, r4]
 8017df4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017df6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017dfa:	4421      	add	r1, r4
 8017dfc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017dfe:	4422      	add	r2, r4
 8017e00:	e750      	b.n	8017ca4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017e02:	f04f 0900 	mov.w	r9, #0
 8017e06:	eba3 0409 	sub.w	r4, r3, r9
 8017e0a:	2c00      	cmp	r4, #0
 8017e0c:	f77f af4e 	ble.w	8017cac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017e10:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017e14:	140d      	asrs	r5, r1, #16
 8017e16:	1414      	asrs	r4, r2, #16
 8017e18:	fb06 5404 	mla	r4, r6, r4, r5
 8017e1c:	9d02      	ldr	r5, [sp, #8]
 8017e1e:	5d2e      	ldrb	r6, [r5, r4]
 8017e20:	2e00      	cmp	r6, #0
 8017e22:	d04c      	beq.n	8017ebe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017e24:	9d01      	ldr	r5, [sp, #4]
 8017e26:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8017e2a:	9c05      	ldr	r4, [sp, #20]
 8017e2c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017e30:	4366      	muls	r6, r4
 8017e32:	1c74      	adds	r4, r6, #1
 8017e34:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017e38:	1224      	asrs	r4, r4, #8
 8017e3a:	b2a7      	uxth	r7, r4
 8017e3c:	43e4      	mvns	r4, r4
 8017e3e:	122e      	asrs	r6, r5, #8
 8017e40:	b2e4      	uxtb	r4, r4
 8017e42:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017e46:	fb16 f604 	smulbb	r6, r6, r4
 8017e4a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017e4e:	00ed      	lsls	r5, r5, #3
 8017e50:	b2ed      	uxtb	r5, r5
 8017e52:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017e56:	fb15 f504 	smulbb	r5, r5, r4
 8017e5a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017e5e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017e62:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017e66:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8017e6a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017e6e:	fb1a fa04 	smulbb	sl, sl, r4
 8017e72:	fa5f f888 	uxtb.w	r8, r8
 8017e76:	fb08 5507 	mla	r5, r8, r7, r5
 8017e7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017e7e:	fb06 a607 	mla	r6, r6, r7, sl
 8017e82:	fa1f fc8c 	uxth.w	ip, ip
 8017e86:	b2ad      	uxth	r5, r5
 8017e88:	f10c 0401 	add.w	r4, ip, #1
 8017e8c:	f105 0a01 	add.w	sl, r5, #1
 8017e90:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017e94:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017e98:	b2b6      	uxth	r6, r6
 8017e9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017e9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017ea2:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017ea6:	f106 0a01 	add.w	sl, r6, #1
 8017eaa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017eae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017eb2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017eb6:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017eba:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8017ebe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017ec0:	f109 0901 	add.w	r9, r9, #1
 8017ec4:	4421      	add	r1, r4
 8017ec6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017ec8:	4422      	add	r2, r4
 8017eca:	e79c      	b.n	8017e06 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8017ecc:	b007      	add	sp, #28
 8017ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ed2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eda:	b085      	sub	sp, #20
 8017edc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017ede:	468b      	mov	fp, r1
 8017ee0:	6861      	ldr	r1, [r4, #4]
 8017ee2:	9203      	str	r2, [sp, #12]
 8017ee4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8017ee8:	fb01 2000 	mla	r0, r1, r0, r2
 8017eec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017ef0:	6822      	ldr	r2, [r4, #0]
 8017ef2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8017efa:	9200      	str	r2, [sp, #0]
 8017efc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017f00:	9201      	str	r2, [sp, #4]
 8017f02:	f1bb 0f00 	cmp.w	fp, #0
 8017f06:	dc03      	bgt.n	8017f10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017f08:	9a03      	ldr	r2, [sp, #12]
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	f340 8146 	ble.w	801819c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f12:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017f16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f1c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017f20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	dd0e      	ble.n	8017f46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017f28:	140c      	asrs	r4, r1, #16
 8017f2a:	d405      	bmi.n	8017f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f2c:	42bc      	cmp	r4, r7
 8017f2e:	da03      	bge.n	8017f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f30:	1414      	asrs	r4, r2, #16
 8017f32:	d401      	bmi.n	8017f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f34:	42b4      	cmp	r4, r6
 8017f36:	db07      	blt.n	8017f48 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017f38:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	4421      	add	r1, r4
 8017f3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017f40:	3002      	adds	r0, #2
 8017f42:	4422      	add	r2, r4
 8017f44:	e7ee      	b.n	8017f24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017f46:	d017      	beq.n	8017f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017f48:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017f4a:	1e5c      	subs	r4, r3, #1
 8017f4c:	fb05 1504 	mla	r5, r5, r4, r1
 8017f50:	142d      	asrs	r5, r5, #16
 8017f52:	d409      	bmi.n	8017f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f54:	42bd      	cmp	r5, r7
 8017f56:	da07      	bge.n	8017f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017f5a:	fb05 2404 	mla	r4, r5, r4, r2
 8017f5e:	1424      	asrs	r4, r4, #16
 8017f60:	d402      	bmi.n	8017f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017f62:	42b4      	cmp	r4, r6
 8017f64:	f2c0 80b3 	blt.w	80180ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8017f68:	2600      	movs	r6, #0
 8017f6a:	199c      	adds	r4, r3, r6
 8017f6c:	2c00      	cmp	r4, #0
 8017f6e:	dc3e      	bgt.n	8017fee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017f70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017f78:	f1bb 0f00 	cmp.w	fp, #0
 8017f7c:	f340 810e 	ble.w	801819c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f90:	eeb0 6a62 	vmov.f32	s12, s5
 8017f94:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fa8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017fac:	eeb0 6a43 	vmov.f32	s12, s6
 8017fb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fb4:	ee12 2a90 	vmov	r2, s5
 8017fb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fc6:	ee13 2a10 	vmov	r2, s6
 8017fca:	9311      	str	r3, [sp, #68]	; 0x44
 8017fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fce:	f1bb 0b01 	subs.w	fp, fp, #1
 8017fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fd6:	9a03      	ldr	r2, [sp, #12]
 8017fd8:	9312      	str	r3, [sp, #72]	; 0x48
 8017fda:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fe0:	eeb0 3a67 	vmov.f32	s6, s15
 8017fe4:	bf08      	it	eq
 8017fe6:	4613      	moveq	r3, r2
 8017fe8:	eef0 2a47 	vmov.f32	s5, s14
 8017fec:	e789      	b.n	8017f02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017fee:	140f      	asrs	r7, r1, #16
 8017ff0:	d418      	bmi.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ff2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017ff6:	42bd      	cmp	r5, r7
 8017ff8:	dd14      	ble.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ffa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017ffe:	d411      	bmi.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018000:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018004:	4564      	cmp	r4, ip
 8018006:	dd0d      	ble.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018008:	b22d      	sxth	r5, r5
 801800a:	fb0c 7505 	mla	r5, ip, r5, r7
 801800e:	9c01      	ldr	r4, [sp, #4]
 8018010:	5d64      	ldrb	r4, [r4, r5]
 8018012:	2cff      	cmp	r4, #255	; 0xff
 8018014:	d10c      	bne.n	8018030 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018016:	9c00      	ldr	r4, [sp, #0]
 8018018:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801801c:	f06f 0401 	mvn.w	r4, #1
 8018020:	4374      	muls	r4, r6
 8018022:	5305      	strh	r5, [r0, r4]
 8018024:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018026:	3e01      	subs	r6, #1
 8018028:	4421      	add	r1, r4
 801802a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801802c:	4422      	add	r2, r4
 801802e:	e79c      	b.n	8017f6a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018030:	2c00      	cmp	r4, #0
 8018032:	d0f7      	beq.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018034:	9f00      	ldr	r7, [sp, #0]
 8018036:	fa1f fc84 	uxth.w	ip, r4
 801803a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801803e:	f06f 0501 	mvn.w	r5, #1
 8018042:	43e4      	mvns	r4, r4
 8018044:	4375      	muls	r5, r6
 8018046:	9502      	str	r5, [sp, #8]
 8018048:	5b45      	ldrh	r5, [r0, r5]
 801804a:	b2e4      	uxtb	r4, r4
 801804c:	122f      	asrs	r7, r5, #8
 801804e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018052:	fb17 f704 	smulbb	r7, r7, r4
 8018056:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801805a:	00ed      	lsls	r5, r5, #3
 801805c:	b2ed      	uxtb	r5, r5
 801805e:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8018062:	fb15 f504 	smulbb	r5, r5, r4
 8018066:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801806a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801806e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018072:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018076:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801807a:	fb1a fa04 	smulbb	sl, sl, r4
 801807e:	fa5f f989 	uxtb.w	r9, r9
 8018082:	fb09 550c 	mla	r5, r9, ip, r5
 8018086:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801808a:	fb07 a70c 	mla	r7, r7, ip, sl
 801808e:	fa1f fe8e 	uxth.w	lr, lr
 8018092:	b2ad      	uxth	r5, r5
 8018094:	f10e 0401 	add.w	r4, lr, #1
 8018098:	f105 0a01 	add.w	sl, r5, #1
 801809c:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80180a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80180a4:	b2bf      	uxth	r7, r7
 80180a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80180aa:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80180ae:	ea4a 0e0e 	orr.w	lr, sl, lr
 80180b2:	f107 0a01 	add.w	sl, r7, #1
 80180b6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80180ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80180be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80180c2:	9c02      	ldr	r4, [sp, #8]
 80180c4:	ea4e 0e0a 	orr.w	lr, lr, sl
 80180c8:	f820 e004 	strh.w	lr, [r0, r4]
 80180cc:	e7aa      	b.n	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80180ce:	f04f 0900 	mov.w	r9, #0
 80180d2:	eba3 0409 	sub.w	r4, r3, r9
 80180d6:	2c00      	cmp	r4, #0
 80180d8:	f77f af4a 	ble.w	8017f70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180dc:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80180e0:	1414      	asrs	r4, r2, #16
 80180e2:	140d      	asrs	r5, r1, #16
 80180e4:	fb06 5504 	mla	r5, r6, r4, r5
 80180e8:	9c01      	ldr	r4, [sp, #4]
 80180ea:	5d64      	ldrb	r4, [r4, r5]
 80180ec:	2cff      	cmp	r4, #255	; 0xff
 80180ee:	d10b      	bne.n	8018108 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80180f0:	9c00      	ldr	r4, [sp, #0]
 80180f2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80180f6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80180fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80180fc:	f109 0901 	add.w	r9, r9, #1
 8018100:	4421      	add	r1, r4
 8018102:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018104:	4422      	add	r2, r4
 8018106:	e7e4      	b.n	80180d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018108:	2c00      	cmp	r4, #0
 801810a:	d0f6      	beq.n	80180fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801810c:	b2a7      	uxth	r7, r4
 801810e:	43e4      	mvns	r4, r4
 8018110:	9e00      	ldr	r6, [sp, #0]
 8018112:	b2e4      	uxtb	r4, r4
 8018114:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018118:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801811c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018120:	122e      	asrs	r6, r5, #8
 8018122:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018126:	fb16 f604 	smulbb	r6, r6, r4
 801812a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801812e:	00ed      	lsls	r5, r5, #3
 8018130:	b2ed      	uxtb	r5, r5
 8018132:	fb15 f504 	smulbb	r5, r5, r4
 8018136:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801813a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801813e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018142:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018146:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801814a:	fb1a fa04 	smulbb	sl, sl, r4
 801814e:	fa5f fe8e 	uxtb.w	lr, lr
 8018152:	fb0e 5507 	mla	r5, lr, r7, r5
 8018156:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801815a:	fb06 a607 	mla	r6, r6, r7, sl
 801815e:	fa1f fc8c 	uxth.w	ip, ip
 8018162:	b2ad      	uxth	r5, r5
 8018164:	f10c 0401 	add.w	r4, ip, #1
 8018168:	f105 0a01 	add.w	sl, r5, #1
 801816c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018170:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018174:	b2b6      	uxth	r6, r6
 8018176:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801817a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801817e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018182:	f106 0a01 	add.w	sl, r6, #1
 8018186:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801818a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801818e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018192:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018196:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801819a:	e7ae      	b.n	80180fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801819c:	b005      	add	sp, #20
 801819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080181a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80181a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a6:	b085      	sub	sp, #20
 80181a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80181aa:	9100      	str	r1, [sp, #0]
 80181ac:	9203      	str	r2, [sp, #12]
 80181ae:	6841      	ldr	r1, [r0, #4]
 80181b0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80181b4:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80181b8:	9201      	str	r2, [sp, #4]
 80181ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80181be:	fb01 2404 	mla	r4, r1, r4, r2
 80181c2:	6802      	ldr	r2, [r0, #0]
 80181c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80181c8:	f8de 2000 	ldr.w	r2, [lr]
 80181cc:	9202      	str	r2, [sp, #8]
 80181ce:	9a01      	ldr	r2, [sp, #4]
 80181d0:	43d6      	mvns	r6, r2
 80181d2:	b2f6      	uxtb	r6, r6
 80181d4:	9a00      	ldr	r2, [sp, #0]
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	dc03      	bgt.n	80181e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80181da:	9a03      	ldr	r2, [sp, #12]
 80181dc:	2a00      	cmp	r2, #0
 80181de:	f340 8124 	ble.w	801842a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80181e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80181e4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80181e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80181ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181ee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80181f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	dd0e      	ble.n	8018218 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80181fa:	1408      	asrs	r0, r1, #16
 80181fc:	d405      	bmi.n	801820a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80181fe:	4560      	cmp	r0, ip
 8018200:	da03      	bge.n	801820a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018202:	1410      	asrs	r0, r2, #16
 8018204:	d401      	bmi.n	801820a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018206:	42b8      	cmp	r0, r7
 8018208:	db07      	blt.n	801821a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801820a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801820c:	3b01      	subs	r3, #1
 801820e:	4401      	add	r1, r0
 8018210:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018212:	3402      	adds	r4, #2
 8018214:	4402      	add	r2, r0
 8018216:	e7ee      	b.n	80181f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018218:	d06e      	beq.n	80182f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801821a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801821c:	1e58      	subs	r0, r3, #1
 801821e:	fb05 1500 	mla	r5, r5, r0, r1
 8018222:	142d      	asrs	r5, r5, #16
 8018224:	d45c      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018226:	4565      	cmp	r5, ip
 8018228:	da5a      	bge.n	80182e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801822a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801822c:	fb05 2000 	mla	r0, r5, r0, r2
 8018230:	1400      	asrs	r0, r0, #16
 8018232:	d455      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018234:	42b8      	cmp	r0, r7
 8018236:	da53      	bge.n	80182e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018238:	4699      	mov	r9, r3
 801823a:	46a2      	mov	sl, r4
 801823c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8018240:	f1b9 0f00 	cmp.w	r9, #0
 8018244:	dd54      	ble.n	80182f0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018246:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801824a:	140d      	asrs	r5, r1, #16
 801824c:	1410      	asrs	r0, r2, #16
 801824e:	fb07 5000 	mla	r0, r7, r0, r5
 8018252:	9d02      	ldr	r5, [sp, #8]
 8018254:	f109 39ff 	add.w	r9, r9, #4294967295
 8018258:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801825c:	f8ba 5000 	ldrh.w	r5, [sl]
 8018260:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018264:	122f      	asrs	r7, r5, #8
 8018266:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801826a:	fb17 f706 	smulbb	r7, r7, r6
 801826e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8018272:	00ed      	lsls	r5, r5, #3
 8018274:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8018278:	b2ed      	uxtb	r5, r5
 801827a:	fb18 f806 	smulbb	r8, r8, r6
 801827e:	fb15 f506 	smulbb	r5, r5, r6
 8018282:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018286:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801828a:	10c7      	asrs	r7, r0, #3
 801828c:	00c0      	lsls	r0, r0, #3
 801828e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018292:	b2c0      	uxtb	r0, r0
 8018294:	fb07 870b 	mla	r7, r7, fp, r8
 8018298:	fb00 500b 	mla	r0, r0, fp, r5
 801829c:	fa1f fc8c 	uxth.w	ip, ip
 80182a0:	b280      	uxth	r0, r0
 80182a2:	b2bf      	uxth	r7, r7
 80182a4:	f10c 0501 	add.w	r5, ip, #1
 80182a8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80182ac:	f107 0801 	add.w	r8, r7, #1
 80182b0:	1c45      	adds	r5, r0, #1
 80182b2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80182b6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80182ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80182bc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80182c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80182c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80182c8:	ea45 0c0c 	orr.w	ip, r5, ip
 80182cc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80182d0:	4401      	add	r1, r0
 80182d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80182d4:	ea4c 0c08 	orr.w	ip, ip, r8
 80182d8:	f82a cb02 	strh.w	ip, [sl], #2
 80182dc:	4402      	add	r2, r0
 80182de:	e7af      	b.n	8018240 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80182e0:	f04f 0800 	mov.w	r8, #0
 80182e4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80182e8:	eb03 0008 	add.w	r0, r3, r8
 80182ec:	2800      	cmp	r0, #0
 80182ee:	dc41      	bgt.n	8018374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80182f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80182f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80182f8:	9b00      	ldr	r3, [sp, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	f340 8095 	ble.w	801842a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018304:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018308:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801830c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018310:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018314:	eef0 6a62 	vmov.f32	s13, s5
 8018318:	ee31 1a05 	vadd.f32	s2, s2, s10
 801831c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018320:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018324:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018328:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801832c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8018330:	eef0 6a43 	vmov.f32	s13, s6
 8018334:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018338:	ee12 2a90 	vmov	r2, s5
 801833c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018342:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018346:	fb92 f3f3 	sdiv	r3, r2, r3
 801834a:	ee13 2a10 	vmov	r2, s6
 801834e:	9311      	str	r3, [sp, #68]	; 0x44
 8018350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018352:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8018356:	fb92 f3f3 	sdiv	r3, r2, r3
 801835a:	9312      	str	r3, [sp, #72]	; 0x48
 801835c:	9b00      	ldr	r3, [sp, #0]
 801835e:	9a03      	ldr	r2, [sp, #12]
 8018360:	3b01      	subs	r3, #1
 8018362:	9300      	str	r3, [sp, #0]
 8018364:	eeb0 3a67 	vmov.f32	s6, s15
 8018368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801836a:	eef0 2a47 	vmov.f32	s5, s14
 801836e:	bf08      	it	eq
 8018370:	4613      	moveq	r3, r2
 8018372:	e72f      	b.n	80181d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018374:	140f      	asrs	r7, r1, #16
 8018376:	d451      	bmi.n	801841c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018378:	f8de 5008 	ldr.w	r5, [lr, #8]
 801837c:	42bd      	cmp	r5, r7
 801837e:	dd4d      	ble.n	801841c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018380:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018384:	d44a      	bmi.n	801841c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018386:	f8de 000c 	ldr.w	r0, [lr, #12]
 801838a:	4560      	cmp	r0, ip
 801838c:	dd46      	ble.n	801841c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801838e:	b22d      	sxth	r5, r5
 8018390:	fb0c 7505 	mla	r5, ip, r5, r7
 8018394:	9802      	ldr	r0, [sp, #8]
 8018396:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801839a:	f06f 0501 	mvn.w	r5, #1
 801839e:	fb05 fb08 	mul.w	fp, r5, r8
 80183a2:	f834 500b 	ldrh.w	r5, [r4, fp]
 80183a6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80183aa:	122f      	asrs	r7, r5, #8
 80183ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80183b0:	fb17 f706 	smulbb	r7, r7, r6
 80183b4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80183b8:	00ed      	lsls	r5, r5, #3
 80183ba:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80183be:	b2ed      	uxtb	r5, r5
 80183c0:	fb19 f906 	smulbb	r9, r9, r6
 80183c4:	fb15 f506 	smulbb	r5, r5, r6
 80183c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80183cc:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80183d0:	10c7      	asrs	r7, r0, #3
 80183d2:	00c0      	lsls	r0, r0, #3
 80183d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80183d8:	b2c0      	uxtb	r0, r0
 80183da:	fb07 970a 	mla	r7, r7, sl, r9
 80183de:	fb00 500a 	mla	r0, r0, sl, r5
 80183e2:	fa1f fc8c 	uxth.w	ip, ip
 80183e6:	b2bf      	uxth	r7, r7
 80183e8:	b280      	uxth	r0, r0
 80183ea:	f10c 0501 	add.w	r5, ip, #1
 80183ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80183f2:	f107 0901 	add.w	r9, r7, #1
 80183f6:	1c45      	adds	r5, r0, #1
 80183f8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80183fc:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018400:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018404:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018408:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801840c:	ea45 0c0c 	orr.w	ip, r5, ip
 8018410:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018414:	ea4c 0c09 	orr.w	ip, ip, r9
 8018418:	f824 c00b 	strh.w	ip, [r4, fp]
 801841c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801841e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018422:	4401      	add	r1, r0
 8018424:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018426:	4402      	add	r2, r0
 8018428:	e75e      	b.n	80182e8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801842a:	b005      	add	sp, #20
 801842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018430 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	b085      	sub	sp, #20
 801843a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801843c:	4693      	mov	fp, r2
 801843e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018442:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018446:	6870      	ldr	r0, [r6, #4]
 8018448:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801844a:	fb00 2404 	mla	r4, r0, r4, r2
 801844e:	6832      	ldr	r2, [r6, #0]
 8018450:	9101      	str	r1, [sp, #4]
 8018452:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018456:	682a      	ldr	r2, [r5, #0]
 8018458:	9202      	str	r2, [sp, #8]
 801845a:	9a01      	ldr	r2, [sp, #4]
 801845c:	2a00      	cmp	r2, #0
 801845e:	dc03      	bgt.n	8018468 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018460:	f1bb 0f00 	cmp.w	fp, #0
 8018464:	f340 809a 	ble.w	801859c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801846a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801846e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018472:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018474:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018478:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801847c:	2b00      	cmp	r3, #0
 801847e:	dd0c      	ble.n	801849a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018480:	1406      	asrs	r6, r0, #16
 8018482:	d405      	bmi.n	8018490 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018484:	454e      	cmp	r6, r9
 8018486:	da03      	bge.n	8018490 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018488:	1416      	asrs	r6, r2, #16
 801848a:	d401      	bmi.n	8018490 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801848c:	4546      	cmp	r6, r8
 801848e:	db05      	blt.n	801849c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018490:	4470      	add	r0, lr
 8018492:	4462      	add	r2, ip
 8018494:	3b01      	subs	r3, #1
 8018496:	3402      	adds	r4, #2
 8018498:	e7f0      	b.n	801847c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801849a:	d00f      	beq.n	80184bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801849c:	1e5e      	subs	r6, r3, #1
 801849e:	fb0e 0706 	mla	r7, lr, r6, r0
 80184a2:	143f      	asrs	r7, r7, #16
 80184a4:	d541      	bpl.n	801852a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80184a6:	4698      	mov	r8, r3
 80184a8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80184ac:	9603      	str	r6, [sp, #12]
 80184ae:	f1b8 0f00 	cmp.w	r8, #0
 80184b2:	dc56      	bgt.n	8018562 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80184b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80184bc:	9b01      	ldr	r3, [sp, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	dd6c      	ble.n	801859c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80184c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80184c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80184ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80184ce:	eeb0 6a62 	vmov.f32	s12, s5
 80184d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80184d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80184da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80184de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80184e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80184e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80184ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80184ee:	eeb0 6a43 	vmov.f32	s12, s6
 80184f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80184f6:	ee12 2a90 	vmov	r2, s5
 80184fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80184fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018500:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018504:	fb92 fef3 	sdiv	lr, r2, r3
 8018508:	ee13 2a10 	vmov	r2, s6
 801850c:	fb92 fcf3 	sdiv	ip, r2, r3
 8018510:	9b01      	ldr	r3, [sp, #4]
 8018512:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018516:	3b01      	subs	r3, #1
 8018518:	9301      	str	r3, [sp, #4]
 801851a:	eeb0 3a67 	vmov.f32	s6, s15
 801851e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018520:	eef0 2a47 	vmov.f32	s5, s14
 8018524:	bf08      	it	eq
 8018526:	465b      	moveq	r3, fp
 8018528:	e797      	b.n	801845a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801852a:	454f      	cmp	r7, r9
 801852c:	dabb      	bge.n	80184a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801852e:	fb0c 2606 	mla	r6, ip, r6, r2
 8018532:	1436      	asrs	r6, r6, #16
 8018534:	d4b7      	bmi.n	80184a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018536:	4546      	cmp	r6, r8
 8018538:	dab5      	bge.n	80184a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801853a:	461e      	mov	r6, r3
 801853c:	46a0      	mov	r8, r4
 801853e:	2e00      	cmp	r6, #0
 8018540:	ddb8      	ble.n	80184b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018542:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018546:	1417      	asrs	r7, r2, #16
 8018548:	ea4f 4920 	mov.w	r9, r0, asr #16
 801854c:	fb0a 9707 	mla	r7, sl, r7, r9
 8018550:	9902      	ldr	r1, [sp, #8]
 8018552:	4470      	add	r0, lr
 8018554:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018558:	4462      	add	r2, ip
 801855a:	f828 7b02 	strh.w	r7, [r8], #2
 801855e:	3e01      	subs	r6, #1
 8018560:	e7ed      	b.n	801853e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8018562:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018566:	d414      	bmi.n	8018592 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018568:	68ae      	ldr	r6, [r5, #8]
 801856a:	454e      	cmp	r6, r9
 801856c:	dd11      	ble.n	8018592 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801856e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018572:	d40e      	bmi.n	8018592 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018574:	68ef      	ldr	r7, [r5, #12]
 8018576:	4557      	cmp	r7, sl
 8018578:	dd0b      	ble.n	8018592 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801857a:	f06f 0101 	mvn.w	r1, #1
 801857e:	b236      	sxth	r6, r6
 8018580:	fb0a 9606 	mla	r6, sl, r6, r9
 8018584:	9f02      	ldr	r7, [sp, #8]
 8018586:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801858a:	fb01 f608 	mul.w	r6, r1, r8
 801858e:	9903      	ldr	r1, [sp, #12]
 8018590:	538f      	strh	r7, [r1, r6]
 8018592:	4470      	add	r0, lr
 8018594:	4462      	add	r2, ip
 8018596:	f108 38ff 	add.w	r8, r8, #4294967295
 801859a:	e788      	b.n	80184ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801859c:	b005      	add	sp, #20
 801859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80185a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185aa:	b087      	sub	sp, #28
 80185ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80185ae:	468b      	mov	fp, r1
 80185b0:	9203      	str	r2, [sp, #12]
 80185b2:	6841      	ldr	r1, [r0, #4]
 80185b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80185b8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80185bc:	9204      	str	r2, [sp, #16]
 80185be:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80185c2:	fb01 2505 	mla	r5, r1, r5, r2
 80185c6:	6802      	ldr	r2, [r0, #0]
 80185c8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80185cc:	f8d9 2000 	ldr.w	r2, [r9]
 80185d0:	9201      	str	r2, [sp, #4]
 80185d2:	f1bb 0f00 	cmp.w	fp, #0
 80185d6:	dc03      	bgt.n	80185e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80185d8:	9a03      	ldr	r2, [sp, #12]
 80185da:	2a00      	cmp	r2, #0
 80185dc:	f340 8159 	ble.w	8018892 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80185e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80185e2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80185e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80185ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185ec:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80185f0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	dd0e      	ble.n	8018616 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80185f8:	1402      	asrs	r2, r0, #16
 80185fa:	d405      	bmi.n	8018608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80185fc:	42ba      	cmp	r2, r7
 80185fe:	da03      	bge.n	8018608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018600:	140a      	asrs	r2, r1, #16
 8018602:	d401      	bmi.n	8018608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018604:	42b2      	cmp	r2, r6
 8018606:	db07      	blt.n	8018618 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801860a:	3b01      	subs	r3, #1
 801860c:	4410      	add	r0, r2
 801860e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018610:	3502      	adds	r5, #2
 8018612:	4411      	add	r1, r2
 8018614:	e7ee      	b.n	80185f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018616:	d017      	beq.n	8018648 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018618:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801861a:	1e5a      	subs	r2, r3, #1
 801861c:	fb04 0402 	mla	r4, r4, r2, r0
 8018620:	1424      	asrs	r4, r4, #16
 8018622:	d409      	bmi.n	8018638 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018624:	42bc      	cmp	r4, r7
 8018626:	da07      	bge.n	8018638 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018628:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801862a:	fb04 1202 	mla	r2, r4, r2, r1
 801862e:	1412      	asrs	r2, r2, #16
 8018630:	d402      	bmi.n	8018638 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018632:	42b2      	cmp	r2, r6
 8018634:	f2c0 80bf 	blt.w	80187b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018638:	2700      	movs	r7, #0
 801863a:	19da      	adds	r2, r3, r7
 801863c:	2a00      	cmp	r2, #0
 801863e:	dc3e      	bgt.n	80186be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018640:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018644:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8018648:	f1bb 0f00 	cmp.w	fp, #0
 801864c:	f340 8121 	ble.w	8018892 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8018650:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018654:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018658:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801865c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018660:	eeb0 6a62 	vmov.f32	s12, s5
 8018664:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018668:	ee77 2a62 	vsub.f32	s5, s14, s5
 801866c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018670:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018674:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018678:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801867c:	eeb0 6a43 	vmov.f32	s12, s6
 8018680:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018684:	ee12 2a90 	vmov	r2, s5
 8018688:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801868c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801868e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018692:	fb92 f3f3 	sdiv	r3, r2, r3
 8018696:	ee13 2a10 	vmov	r2, s6
 801869a:	9313      	str	r3, [sp, #76]	; 0x4c
 801869c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801869e:	f1bb 0b01 	subs.w	fp, fp, #1
 80186a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80186a6:	9a03      	ldr	r2, [sp, #12]
 80186a8:	9314      	str	r3, [sp, #80]	; 0x50
 80186aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80186ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186b0:	eeb0 3a67 	vmov.f32	s6, s15
 80186b4:	bf08      	it	eq
 80186b6:	4613      	moveq	r3, r2
 80186b8:	eef0 2a47 	vmov.f32	s5, s14
 80186bc:	e789      	b.n	80185d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80186be:	1406      	asrs	r6, r0, #16
 80186c0:	d42d      	bmi.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80186c2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80186c6:	42b4      	cmp	r4, r6
 80186c8:	dd29      	ble.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80186ca:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80186ce:	d426      	bmi.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80186d0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80186d4:	4562      	cmp	r2, ip
 80186d6:	dd22      	ble.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80186d8:	b224      	sxth	r4, r4
 80186da:	fb0c 6404 	mla	r4, ip, r4, r6
 80186de:	9a01      	ldr	r2, [sp, #4]
 80186e0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80186e4:	0e22      	lsrs	r2, r4, #24
 80186e6:	d01a      	beq.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80186e8:	9e04      	ldr	r6, [sp, #16]
 80186ea:	4372      	muls	r2, r6
 80186ec:	1c56      	adds	r6, r2, #1
 80186ee:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80186f2:	1212      	asrs	r2, r2, #8
 80186f4:	0a26      	lsrs	r6, r4, #8
 80186f6:	2aff      	cmp	r2, #255	; 0xff
 80186f8:	9605      	str	r6, [sp, #20]
 80186fa:	d116      	bne.n	801872a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80186fc:	f06f 0201 	mvn.w	r2, #1
 8018700:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018704:	fb02 fc07 	mul.w	ip, r2, r7
 8018708:	0962      	lsrs	r2, r4, #5
 801870a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801870e:	f026 0607 	bic.w	r6, r6, #7
 8018712:	4316      	orrs	r6, r2
 8018714:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018718:	4326      	orrs	r6, r4
 801871a:	f825 600c 	strh.w	r6, [r5, ip]
 801871e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018720:	3f01      	subs	r7, #1
 8018722:	4410      	add	r0, r2
 8018724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018726:	4411      	add	r1, r2
 8018728:	e787      	b.n	801863a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801872a:	f06f 0601 	mvn.w	r6, #1
 801872e:	fa1f fa82 	uxth.w	sl, r2
 8018732:	43d2      	mvns	r2, r2
 8018734:	437e      	muls	r6, r7
 8018736:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801873a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801873e:	fb1c fc0a 	smulbb	ip, ip, sl
 8018742:	b2e4      	uxtb	r4, r4
 8018744:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8018748:	fb14 f40a 	smulbb	r4, r4, sl
 801874c:	b2d2      	uxtb	r2, r2
 801874e:	9602      	str	r6, [sp, #8]
 8018750:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018754:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018758:	fb0e ce02 	mla	lr, lr, r2, ip
 801875c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018760:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018764:	fb16 f60a 	smulbb	r6, r6, sl
 8018768:	fa5f f888 	uxtb.w	r8, r8
 801876c:	fb08 4402 	mla	r4, r8, r2, r4
 8018770:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018774:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018778:	fa1f fe8e 	uxth.w	lr, lr
 801877c:	b2a4      	uxth	r4, r4
 801877e:	f10e 0201 	add.w	r2, lr, #1
 8018782:	1c66      	adds	r6, r4, #1
 8018784:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018788:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801878c:	fa1f fc8c 	uxth.w	ip, ip
 8018790:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018794:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018798:	ea46 0e0e 	orr.w	lr, r6, lr
 801879c:	f10c 0601 	add.w	r6, ip, #1
 80187a0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80187a4:	0976      	lsrs	r6, r6, #5
 80187a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80187aa:	9a02      	ldr	r2, [sp, #8]
 80187ac:	ea4e 0e06 	orr.w	lr, lr, r6
 80187b0:	f825 e002 	strh.w	lr, [r5, r2]
 80187b4:	e7b3      	b.n	801871e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80187b6:	f04f 0800 	mov.w	r8, #0
 80187ba:	eba3 0208 	sub.w	r2, r3, r8
 80187be:	2a00      	cmp	r2, #0
 80187c0:	f77f af3e 	ble.w	8018640 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80187c4:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80187c8:	1404      	asrs	r4, r0, #16
 80187ca:	140a      	asrs	r2, r1, #16
 80187cc:	fb06 4202 	mla	r2, r6, r2, r4
 80187d0:	9c01      	ldr	r4, [sp, #4]
 80187d2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80187d6:	0e22      	lsrs	r2, r4, #24
 80187d8:	d016      	beq.n	8018808 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80187da:	9e04      	ldr	r6, [sp, #16]
 80187dc:	4372      	muls	r2, r6
 80187de:	1c56      	adds	r6, r2, #1
 80187e0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80187e4:	1212      	asrs	r2, r2, #8
 80187e6:	2aff      	cmp	r2, #255	; 0xff
 80187e8:	ea4f 2614 	mov.w	r6, r4, lsr #8
 80187ec:	d113      	bne.n	8018816 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80187ee:	0962      	lsrs	r2, r4, #5
 80187f0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80187f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80187f8:	f026 0607 	bic.w	r6, r6, #7
 80187fc:	4316      	orrs	r6, r2
 80187fe:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018802:	4326      	orrs	r6, r4
 8018804:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8018808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801880a:	f108 0801 	add.w	r8, r8, #1
 801880e:	4410      	add	r0, r2
 8018810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018812:	4411      	add	r1, r2
 8018814:	e7d1      	b.n	80187ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018816:	fa1f fa82 	uxth.w	sl, r2
 801881a:	43d2      	mvns	r2, r2
 801881c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8018820:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8018824:	fb17 f70a 	smulbb	r7, r7, sl
 8018828:	b2e4      	uxtb	r4, r4
 801882a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801882e:	fb14 f40a 	smulbb	r4, r4, sl
 8018832:	b2d2      	uxtb	r2, r2
 8018834:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018838:	fb0c 7c02 	mla	ip, ip, r2, r7
 801883c:	b2f6      	uxtb	r6, r6
 801883e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018842:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018846:	fb16 f60a 	smulbb	r6, r6, sl
 801884a:	fa5f fe8e 	uxtb.w	lr, lr
 801884e:	fb0e 4402 	mla	r4, lr, r2, r4
 8018852:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018856:	fb07 6702 	mla	r7, r7, r2, r6
 801885a:	fa1f fc8c 	uxth.w	ip, ip
 801885e:	b2a4      	uxth	r4, r4
 8018860:	f10c 0201 	add.w	r2, ip, #1
 8018864:	1c66      	adds	r6, r4, #1
 8018866:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801886a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801886e:	b2bf      	uxth	r7, r7
 8018870:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018874:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018878:	ea46 0c0c 	orr.w	ip, r6, ip
 801887c:	1c7e      	adds	r6, r7, #1
 801887e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8018882:	0976      	lsrs	r6, r6, #5
 8018884:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018888:	ea4c 0c06 	orr.w	ip, ip, r6
 801888c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8018890:	e7ba      	b.n	8018808 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8018892:	b007      	add	sp, #28
 8018894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018898 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188a0:	b085      	sub	sp, #20
 80188a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80188a4:	468b      	mov	fp, r1
 80188a6:	6841      	ldr	r1, [r0, #4]
 80188a8:	9203      	str	r2, [sp, #12]
 80188aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80188ae:	fb01 2404 	mla	r4, r1, r4, r2
 80188b2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80188b6:	6802      	ldr	r2, [r0, #0]
 80188b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80188bc:	f8d8 2000 	ldr.w	r2, [r8]
 80188c0:	9201      	str	r2, [sp, #4]
 80188c2:	f1bb 0f00 	cmp.w	fp, #0
 80188c6:	dc03      	bgt.n	80188d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80188c8:	9a03      	ldr	r2, [sp, #12]
 80188ca:	2a00      	cmp	r2, #0
 80188cc:	f340 814f 	ble.w	8018b6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80188d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188d2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80188d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80188da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80188dc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80188e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	dd0e      	ble.n	8018906 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80188e8:	1408      	asrs	r0, r1, #16
 80188ea:	d405      	bmi.n	80188f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80188ec:	42b8      	cmp	r0, r7
 80188ee:	da03      	bge.n	80188f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80188f0:	1410      	asrs	r0, r2, #16
 80188f2:	d401      	bmi.n	80188f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80188f4:	42b0      	cmp	r0, r6
 80188f6:	db07      	blt.n	8018908 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80188f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80188fa:	3b01      	subs	r3, #1
 80188fc:	4401      	add	r1, r0
 80188fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018900:	3402      	adds	r4, #2
 8018902:	4402      	add	r2, r0
 8018904:	e7ee      	b.n	80188e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018906:	d017      	beq.n	8018938 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018908:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801890a:	1e58      	subs	r0, r3, #1
 801890c:	fb05 1500 	mla	r5, r5, r0, r1
 8018910:	142d      	asrs	r5, r5, #16
 8018912:	d409      	bmi.n	8018928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018914:	42bd      	cmp	r5, r7
 8018916:	da07      	bge.n	8018928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018918:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801891a:	fb05 2000 	mla	r0, r5, r0, r2
 801891e:	1400      	asrs	r0, r0, #16
 8018920:	d402      	bmi.n	8018928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018922:	42b0      	cmp	r0, r6
 8018924:	f2c0 80ba 	blt.w	8018a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018928:	2600      	movs	r6, #0
 801892a:	1998      	adds	r0, r3, r6
 801892c:	2800      	cmp	r0, #0
 801892e:	dc3e      	bgt.n	80189ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8018930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018934:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018938:	f1bb 0f00 	cmp.w	fp, #0
 801893c:	f340 8117 	ble.w	8018b6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8018940:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018944:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018948:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801894c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018950:	eeb0 6a62 	vmov.f32	s12, s5
 8018954:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018958:	ee77 2a62 	vsub.f32	s5, s14, s5
 801895c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018960:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018964:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018968:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801896c:	eeb0 6a43 	vmov.f32	s12, s6
 8018970:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018974:	ee12 2a90 	vmov	r2, s5
 8018978:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801897c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801897e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018982:	fb92 f3f3 	sdiv	r3, r2, r3
 8018986:	ee13 2a10 	vmov	r2, s6
 801898a:	9311      	str	r3, [sp, #68]	; 0x44
 801898c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801898e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018992:	fb92 f3f3 	sdiv	r3, r2, r3
 8018996:	9a03      	ldr	r2, [sp, #12]
 8018998:	9312      	str	r3, [sp, #72]	; 0x48
 801899a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801899e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189a0:	eeb0 3a67 	vmov.f32	s6, s15
 80189a4:	bf08      	it	eq
 80189a6:	4613      	moveq	r3, r2
 80189a8:	eef0 2a47 	vmov.f32	s5, s14
 80189ac:	e789      	b.n	80188c2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80189ae:	140f      	asrs	r7, r1, #16
 80189b0:	d424      	bmi.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80189b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80189b6:	42bd      	cmp	r5, r7
 80189b8:	dd20      	ble.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80189ba:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80189be:	d41d      	bmi.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80189c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80189c4:	4560      	cmp	r0, ip
 80189c6:	dd19      	ble.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80189c8:	b22d      	sxth	r5, r5
 80189ca:	fb0c 7505 	mla	r5, ip, r5, r7
 80189ce:	9801      	ldr	r0, [sp, #4]
 80189d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80189d4:	0e07      	lsrs	r7, r0, #24
 80189d6:	2fff      	cmp	r7, #255	; 0xff
 80189d8:	d116      	bne.n	8018a08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80189da:	f06f 0501 	mvn.w	r5, #1
 80189de:	fb05 f706 	mul.w	r7, r5, r6
 80189e2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80189e6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80189ea:	0945      	lsrs	r5, r0, #5
 80189ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80189f0:	ea4c 0505 	orr.w	r5, ip, r5
 80189f4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80189f8:	4305      	orrs	r5, r0
 80189fa:	53e5      	strh	r5, [r4, r7]
 80189fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80189fe:	3e01      	subs	r6, #1
 8018a00:	4401      	add	r1, r0
 8018a02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a04:	4402      	add	r2, r0
 8018a06:	e790      	b.n	801892a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018a08:	b2fd      	uxtb	r5, r7
 8018a0a:	2f00      	cmp	r7, #0
 8018a0c:	d0f6      	beq.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a0e:	f06f 0701 	mvn.w	r7, #1
 8018a12:	fa1f f985 	uxth.w	r9, r5
 8018a16:	43ed      	mvns	r5, r5
 8018a18:	4377      	muls	r7, r6
 8018a1a:	f834 e007 	ldrh.w	lr, [r4, r7]
 8018a1e:	9702      	str	r7, [sp, #8]
 8018a20:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018a24:	fb17 f709 	smulbb	r7, r7, r9
 8018a28:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018a2c:	b2c0      	uxtb	r0, r0
 8018a2e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018a32:	fb10 f009 	smulbb	r0, r0, r9
 8018a36:	b2ed      	uxtb	r5, r5
 8018a38:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018a3c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018a40:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018a44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018a48:	fb1a fa09 	smulbb	sl, sl, r9
 8018a4c:	fa5f fe8e 	uxtb.w	lr, lr
 8018a50:	fb0e 0005 	mla	r0, lr, r5, r0
 8018a54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018a58:	fb07 a705 	mla	r7, r7, r5, sl
 8018a5c:	b280      	uxth	r0, r0
 8018a5e:	fa1f fc8c 	uxth.w	ip, ip
 8018a62:	f100 0a01 	add.w	sl, r0, #1
 8018a66:	f10c 0501 	add.w	r5, ip, #1
 8018a6a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018a6e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018a72:	b2bf      	uxth	r7, r7
 8018a74:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018a78:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018a7c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018a80:	f107 0a01 	add.w	sl, r7, #1
 8018a84:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018a88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018a8c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018a90:	9802      	ldr	r0, [sp, #8]
 8018a92:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018a96:	f824 c000 	strh.w	ip, [r4, r0]
 8018a9a:	e7af      	b.n	80189fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a9c:	f04f 0e00 	mov.w	lr, #0
 8018aa0:	eba3 000e 	sub.w	r0, r3, lr
 8018aa4:	2800      	cmp	r0, #0
 8018aa6:	f77f af43 	ble.w	8018930 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018aaa:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018aae:	140d      	asrs	r5, r1, #16
 8018ab0:	1410      	asrs	r0, r2, #16
 8018ab2:	fb06 5000 	mla	r0, r6, r0, r5
 8018ab6:	9d01      	ldr	r5, [sp, #4]
 8018ab8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018abc:	0e2e      	lsrs	r6, r5, #24
 8018abe:	2eff      	cmp	r6, #255	; 0xff
 8018ac0:	d112      	bne.n	8018ae8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8018ac2:	482c      	ldr	r0, [pc, #176]	; (8018b74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8018ac4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018ac8:	0968      	lsrs	r0, r5, #5
 8018aca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018ace:	4330      	orrs	r0, r6
 8018ad0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018ad4:	4328      	orrs	r0, r5
 8018ad6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8018ada:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018adc:	f10e 0e01 	add.w	lr, lr, #1
 8018ae0:	4401      	add	r1, r0
 8018ae2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018ae4:	4402      	add	r2, r0
 8018ae6:	e7db      	b.n	8018aa0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018ae8:	b2f0      	uxtb	r0, r6
 8018aea:	2e00      	cmp	r6, #0
 8018aec:	d0f5      	beq.n	8018ada <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018aee:	fa1f f980 	uxth.w	r9, r0
 8018af2:	43c0      	mvns	r0, r0
 8018af4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018af8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018afc:	fb16 f609 	smulbb	r6, r6, r9
 8018b00:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018b04:	b2ed      	uxtb	r5, r5
 8018b06:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018b0a:	fb15 f509 	smulbb	r5, r5, r9
 8018b0e:	b2c0      	uxtb	r0, r0
 8018b10:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018b14:	fb07 6700 	mla	r7, r7, r0, r6
 8018b18:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018b1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018b20:	fb1a fa09 	smulbb	sl, sl, r9
 8018b24:	fa5f fc8c 	uxtb.w	ip, ip
 8018b28:	fb0c 5500 	mla	r5, ip, r0, r5
 8018b2c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018b30:	fb06 a600 	mla	r6, r6, r0, sl
 8018b34:	b2bf      	uxth	r7, r7
 8018b36:	b2ad      	uxth	r5, r5
 8018b38:	1c78      	adds	r0, r7, #1
 8018b3a:	f105 0a01 	add.w	sl, r5, #1
 8018b3e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018b42:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018b46:	b2b6      	uxth	r6, r6
 8018b48:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b4c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018b50:	ea4a 0707 	orr.w	r7, sl, r7
 8018b54:	f106 0a01 	add.w	sl, r6, #1
 8018b58:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018b5c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b60:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018b64:	ea47 070a 	orr.w	r7, r7, sl
 8018b68:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8018b6c:	e7b5      	b.n	8018ada <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018b6e:	b005      	add	sp, #20
 8018b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b74:	fffff800 	.word	0xfffff800

08018b78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b80:	b087      	sub	sp, #28
 8018b82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018b84:	468b      	mov	fp, r1
 8018b86:	9203      	str	r2, [sp, #12]
 8018b88:	6841      	ldr	r1, [r0, #4]
 8018b8a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018b8e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018b92:	9204      	str	r2, [sp, #16]
 8018b94:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018b98:	fb01 2404 	mla	r4, r1, r4, r2
 8018b9c:	6802      	ldr	r2, [r0, #0]
 8018b9e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018ba2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018ba6:	3201      	adds	r2, #1
 8018ba8:	f022 0201 	bic.w	r2, r2, #1
 8018bac:	9200      	str	r2, [sp, #0]
 8018bae:	f8d9 2000 	ldr.w	r2, [r9]
 8018bb2:	9201      	str	r2, [sp, #4]
 8018bb4:	f1bb 0f00 	cmp.w	fp, #0
 8018bb8:	dc03      	bgt.n	8018bc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018bba:	9a03      	ldr	r2, [sp, #12]
 8018bbc:	2a00      	cmp	r2, #0
 8018bbe:	f340 816a 	ble.w	8018e96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018bc4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018bc8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018bce:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018bd2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	dd0e      	ble.n	8018bf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018bda:	1402      	asrs	r2, r0, #16
 8018bdc:	d405      	bmi.n	8018bea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018bde:	42ba      	cmp	r2, r7
 8018be0:	da03      	bge.n	8018bea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018be2:	140a      	asrs	r2, r1, #16
 8018be4:	d401      	bmi.n	8018bea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018be6:	42b2      	cmp	r2, r6
 8018be8:	db07      	blt.n	8018bfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018bea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018bec:	3b01      	subs	r3, #1
 8018bee:	4410      	add	r0, r2
 8018bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018bf2:	3402      	adds	r4, #2
 8018bf4:	4411      	add	r1, r2
 8018bf6:	e7ee      	b.n	8018bd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018bf8:	d017      	beq.n	8018c2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018bfa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018bfc:	1e5a      	subs	r2, r3, #1
 8018bfe:	fb05 0502 	mla	r5, r5, r2, r0
 8018c02:	142d      	asrs	r5, r5, #16
 8018c04:	d409      	bmi.n	8018c1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018c06:	42bd      	cmp	r5, r7
 8018c08:	da07      	bge.n	8018c1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018c0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018c0c:	fb05 1202 	mla	r2, r5, r2, r1
 8018c10:	1412      	asrs	r2, r2, #16
 8018c12:	d402      	bmi.n	8018c1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018c14:	42b2      	cmp	r2, r6
 8018c16:	f2c0 80c8 	blt.w	8018daa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8018c1a:	2700      	movs	r7, #0
 8018c1c:	19da      	adds	r2, r3, r7
 8018c1e:	2a00      	cmp	r2, #0
 8018c20:	dc3e      	bgt.n	8018ca0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018c22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018c2a:	f1bb 0f00 	cmp.w	fp, #0
 8018c2e:	f340 8132 	ble.w	8018e96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018c32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018c3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018c42:	eeb0 6a62 	vmov.f32	s12, s5
 8018c46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018c4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018c4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018c52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018c5a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018c5e:	eeb0 6a43 	vmov.f32	s12, s6
 8018c62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018c66:	ee12 2a90 	vmov	r2, s5
 8018c6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c78:	ee13 2a10 	vmov	r2, s6
 8018c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c80:	f1bb 0b01 	subs.w	fp, fp, #1
 8018c84:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c88:	9a03      	ldr	r2, [sp, #12]
 8018c8a:	9314      	str	r3, [sp, #80]	; 0x50
 8018c8c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c92:	eeb0 3a67 	vmov.f32	s6, s15
 8018c96:	bf08      	it	eq
 8018c98:	4613      	moveq	r3, r2
 8018c9a:	eef0 2a47 	vmov.f32	s5, s14
 8018c9e:	e789      	b.n	8018bb4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018ca0:	1405      	asrs	r5, r0, #16
 8018ca2:	d436      	bmi.n	8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018ca4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018ca8:	42aa      	cmp	r2, r5
 8018caa:	dd32      	ble.n	8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018cac:	140e      	asrs	r6, r1, #16
 8018cae:	d430      	bmi.n	8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018cb0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018cb4:	42b2      	cmp	r2, r6
 8018cb6:	dd2c      	ble.n	8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018cb8:	9a00      	ldr	r2, [sp, #0]
 8018cba:	fb06 5502 	mla	r5, r6, r2, r5
 8018cbe:	9e01      	ldr	r6, [sp, #4]
 8018cc0:	086a      	lsrs	r2, r5, #1
 8018cc2:	5cb2      	ldrb	r2, [r6, r2]
 8018cc4:	07ee      	lsls	r6, r5, #31
 8018cc6:	bf54      	ite	pl
 8018cc8:	f002 020f 	andpl.w	r2, r2, #15
 8018ccc:	1112      	asrmi	r2, r2, #4
 8018cce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018cd2:	b2d2      	uxtb	r2, r2
 8018cd4:	b1ea      	cbz	r2, 8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018cd6:	9d04      	ldr	r5, [sp, #16]
 8018cd8:	436a      	muls	r2, r5
 8018cda:	1c55      	adds	r5, r2, #1
 8018cdc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018ce0:	4d6e      	ldr	r5, [pc, #440]	; (8018e9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018ce2:	1212      	asrs	r2, r2, #8
 8018ce4:	682d      	ldr	r5, [r5, #0]
 8018ce6:	2aff      	cmp	r2, #255	; 0xff
 8018ce8:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8018cec:	9605      	str	r6, [sp, #20]
 8018cee:	d116      	bne.n	8018d1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018cf0:	f06f 0201 	mvn.w	r2, #1
 8018cf4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018cf8:	fb02 fc07 	mul.w	ip, r2, r7
 8018cfc:	096a      	lsrs	r2, r5, #5
 8018cfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018d02:	f026 0607 	bic.w	r6, r6, #7
 8018d06:	4316      	orrs	r6, r2
 8018d08:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018d0c:	432e      	orrs	r6, r5
 8018d0e:	f824 600c 	strh.w	r6, [r4, ip]
 8018d12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018d14:	3f01      	subs	r7, #1
 8018d16:	4410      	add	r0, r2
 8018d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d1a:	4411      	add	r1, r2
 8018d1c:	e77e      	b.n	8018c1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018d1e:	f06f 0601 	mvn.w	r6, #1
 8018d22:	fa1f fa82 	uxth.w	sl, r2
 8018d26:	43d2      	mvns	r2, r2
 8018d28:	437e      	muls	r6, r7
 8018d2a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8018d2e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8018d32:	fb1c fc0a 	smulbb	ip, ip, sl
 8018d36:	b2ed      	uxtb	r5, r5
 8018d38:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8018d3c:	fb15 f50a 	smulbb	r5, r5, sl
 8018d40:	b2d2      	uxtb	r2, r2
 8018d42:	9602      	str	r6, [sp, #8]
 8018d44:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018d48:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018d4c:	fb0e ce02 	mla	lr, lr, r2, ip
 8018d50:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018d54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018d58:	fb16 f60a 	smulbb	r6, r6, sl
 8018d5c:	fa5f f888 	uxtb.w	r8, r8
 8018d60:	fb08 5502 	mla	r5, r8, r2, r5
 8018d64:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018d68:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018d6c:	fa1f fe8e 	uxth.w	lr, lr
 8018d70:	b2ad      	uxth	r5, r5
 8018d72:	f10e 0201 	add.w	r2, lr, #1
 8018d76:	1c6e      	adds	r6, r5, #1
 8018d78:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018d7c:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8018d80:	fa1f fc8c 	uxth.w	ip, ip
 8018d84:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018d88:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018d8c:	ea46 0e0e 	orr.w	lr, r6, lr
 8018d90:	f10c 0601 	add.w	r6, ip, #1
 8018d94:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018d98:	0976      	lsrs	r6, r6, #5
 8018d9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018d9e:	9a02      	ldr	r2, [sp, #8]
 8018da0:	ea4e 0e06 	orr.w	lr, lr, r6
 8018da4:	f824 e002 	strh.w	lr, [r4, r2]
 8018da8:	e7b3      	b.n	8018d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018daa:	f04f 0800 	mov.w	r8, #0
 8018dae:	eba3 0208 	sub.w	r2, r3, r8
 8018db2:	2a00      	cmp	r2, #0
 8018db4:	f77f af35 	ble.w	8018c22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018db8:	9e00      	ldr	r6, [sp, #0]
 8018dba:	1402      	asrs	r2, r0, #16
 8018dbc:	140d      	asrs	r5, r1, #16
 8018dbe:	fb06 2505 	mla	r5, r6, r5, r2
 8018dc2:	9e01      	ldr	r6, [sp, #4]
 8018dc4:	086a      	lsrs	r2, r5, #1
 8018dc6:	5cb2      	ldrb	r2, [r6, r2]
 8018dc8:	07ed      	lsls	r5, r5, #31
 8018dca:	bf54      	ite	pl
 8018dcc:	f002 020f 	andpl.w	r2, r2, #15
 8018dd0:	1112      	asrmi	r2, r2, #4
 8018dd2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018dd6:	b2d2      	uxtb	r2, r2
 8018dd8:	b1c2      	cbz	r2, 8018e0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018dda:	9d04      	ldr	r5, [sp, #16]
 8018ddc:	436a      	muls	r2, r5
 8018dde:	1c55      	adds	r5, r2, #1
 8018de0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018de4:	4d2d      	ldr	r5, [pc, #180]	; (8018e9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018de6:	1212      	asrs	r2, r2, #8
 8018de8:	682e      	ldr	r6, [r5, #0]
 8018dea:	2aff      	cmp	r2, #255	; 0xff
 8018dec:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8018df0:	d113      	bne.n	8018e1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018df2:	0972      	lsrs	r2, r6, #5
 8018df4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8018df8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018dfc:	f025 0507 	bic.w	r5, r5, #7
 8018e00:	4315      	orrs	r5, r2
 8018e02:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8018e06:	4335      	orrs	r5, r6
 8018e08:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8018e0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e0e:	f108 0801 	add.w	r8, r8, #1
 8018e12:	4410      	add	r0, r2
 8018e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e16:	4411      	add	r1, r2
 8018e18:	e7c9      	b.n	8018dae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018e1a:	fa1f fa82 	uxth.w	sl, r2
 8018e1e:	43d2      	mvns	r2, r2
 8018e20:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018e24:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018e28:	fb17 f70a 	smulbb	r7, r7, sl
 8018e2c:	b2f6      	uxtb	r6, r6
 8018e2e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018e32:	fb16 f60a 	smulbb	r6, r6, sl
 8018e36:	b2d2      	uxtb	r2, r2
 8018e38:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018e3c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8018e40:	b2ed      	uxtb	r5, r5
 8018e42:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018e46:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018e4a:	fb15 f50a 	smulbb	r5, r5, sl
 8018e4e:	fa5f fe8e 	uxtb.w	lr, lr
 8018e52:	fb0e 6602 	mla	r6, lr, r2, r6
 8018e56:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018e5a:	fb07 5702 	mla	r7, r7, r2, r5
 8018e5e:	fa1f fc8c 	uxth.w	ip, ip
 8018e62:	b2b6      	uxth	r6, r6
 8018e64:	f10c 0201 	add.w	r2, ip, #1
 8018e68:	1c75      	adds	r5, r6, #1
 8018e6a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018e6e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8018e72:	b2bf      	uxth	r7, r7
 8018e74:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018e78:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018e7c:	ea45 0c0c 	orr.w	ip, r5, ip
 8018e80:	1c7d      	adds	r5, r7, #1
 8018e82:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8018e86:	096d      	lsrs	r5, r5, #5
 8018e88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018e8c:	ea4c 0c05 	orr.w	ip, ip, r5
 8018e90:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8018e94:	e7ba      	b.n	8018e0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018e96:	b007      	add	sp, #28
 8018e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9c:	20020094 	.word	0x20020094

08018ea0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea8:	b087      	sub	sp, #28
 8018eaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018eac:	9101      	str	r1, [sp, #4]
 8018eae:	6841      	ldr	r1, [r0, #4]
 8018eb0:	9205      	str	r2, [sp, #20]
 8018eb2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018eb6:	fb01 2404 	mla	r4, r1, r4, r2
 8018eba:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8018ebe:	6802      	ldr	r2, [r0, #0]
 8018ec0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80191b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8018ec4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018ec8:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018ecc:	3201      	adds	r2, #1
 8018ece:	f022 0201 	bic.w	r2, r2, #1
 8018ed2:	9202      	str	r2, [sp, #8]
 8018ed4:	f8db 2000 	ldr.w	r2, [fp]
 8018ed8:	9203      	str	r2, [sp, #12]
 8018eda:	9a01      	ldr	r2, [sp, #4]
 8018edc:	2a00      	cmp	r2, #0
 8018ede:	dc03      	bgt.n	8018ee8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018ee0:	9a05      	ldr	r2, [sp, #20]
 8018ee2:	2a00      	cmp	r2, #0
 8018ee4:	f340 8162 	ble.w	80191ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018ee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018eea:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8018eee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018ef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ef4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8018ef8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	dd0e      	ble.n	8018f1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f00:	1402      	asrs	r2, r0, #16
 8018f02:	d405      	bmi.n	8018f10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f04:	42ba      	cmp	r2, r7
 8018f06:	da03      	bge.n	8018f10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f08:	140a      	asrs	r2, r1, #16
 8018f0a:	d401      	bmi.n	8018f10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f0c:	42b2      	cmp	r2, r6
 8018f0e:	db07      	blt.n	8018f20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f12:	3b01      	subs	r3, #1
 8018f14:	4410      	add	r0, r2
 8018f16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f18:	3402      	adds	r4, #2
 8018f1a:	4411      	add	r1, r2
 8018f1c:	e7ee      	b.n	8018efc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018f1e:	d017      	beq.n	8018f50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018f20:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018f22:	1e5a      	subs	r2, r3, #1
 8018f24:	fb05 0502 	mla	r5, r5, r2, r0
 8018f28:	142d      	asrs	r5, r5, #16
 8018f2a:	d409      	bmi.n	8018f40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f2c:	42bd      	cmp	r5, r7
 8018f2e:	da07      	bge.n	8018f40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f30:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018f32:	fb05 1202 	mla	r2, r5, r2, r1
 8018f36:	1412      	asrs	r2, r2, #16
 8018f38:	d402      	bmi.n	8018f40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f3a:	42b2      	cmp	r2, r6
 8018f3c:	f2c0 80c3 	blt.w	80190c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8018f40:	2500      	movs	r5, #0
 8018f42:	195a      	adds	r2, r3, r5
 8018f44:	2a00      	cmp	r2, #0
 8018f46:	dc3f      	bgt.n	8018fc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018f48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018f50:	9b01      	ldr	r3, [sp, #4]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	f340 812a 	ble.w	80191ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8018f58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018f64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018f68:	eeb0 6a62 	vmov.f32	s12, s5
 8018f6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018f74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018f78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018f80:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018f84:	eeb0 6a43 	vmov.f32	s12, s6
 8018f88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018f8c:	ee12 2a90 	vmov	r2, s5
 8018f90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f9e:	ee13 2a10 	vmov	r2, s6
 8018fa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8018fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fa6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fae:	9314      	str	r3, [sp, #80]	; 0x50
 8018fb0:	9b01      	ldr	r3, [sp, #4]
 8018fb2:	9a05      	ldr	r2, [sp, #20]
 8018fb4:	3b01      	subs	r3, #1
 8018fb6:	9301      	str	r3, [sp, #4]
 8018fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8018fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fbe:	eef0 2a47 	vmov.f32	s5, s14
 8018fc2:	bf08      	it	eq
 8018fc4:	4613      	moveq	r3, r2
 8018fc6:	e788      	b.n	8018eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018fc8:	1406      	asrs	r6, r0, #16
 8018fca:	d42c      	bmi.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018fcc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018fd0:	42b2      	cmp	r2, r6
 8018fd2:	dd28      	ble.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018fd4:	140f      	asrs	r7, r1, #16
 8018fd6:	d426      	bmi.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018fd8:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018fdc:	42ba      	cmp	r2, r7
 8018fde:	dd22      	ble.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018fe0:	9a02      	ldr	r2, [sp, #8]
 8018fe2:	fb07 6602 	mla	r6, r7, r2, r6
 8018fe6:	9f03      	ldr	r7, [sp, #12]
 8018fe8:	0872      	lsrs	r2, r6, #1
 8018fea:	5cba      	ldrb	r2, [r7, r2]
 8018fec:	07f6      	lsls	r6, r6, #31
 8018fee:	bf54      	ite	pl
 8018ff0:	f002 020f 	andpl.w	r2, r2, #15
 8018ff4:	1112      	asrmi	r2, r2, #4
 8018ff6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018ffa:	b2d2      	uxtb	r2, r2
 8018ffc:	2aff      	cmp	r2, #255	; 0xff
 8018ffe:	d118      	bne.n	8019032 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019000:	f06f 0601 	mvn.w	r6, #1
 8019004:	f8d8 2000 	ldr.w	r2, [r8]
 8019008:	fb06 f705 	mul.w	r7, r6, r5
 801900c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8019010:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019014:	0956      	lsrs	r6, r2, #5
 8019016:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801901a:	ea4c 0606 	orr.w	r6, ip, r6
 801901e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019022:	4316      	orrs	r6, r2
 8019024:	53e6      	strh	r6, [r4, r7]
 8019026:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019028:	3d01      	subs	r5, #1
 801902a:	4410      	add	r0, r2
 801902c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801902e:	4411      	add	r1, r2
 8019030:	e787      	b.n	8018f42 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019032:	2a00      	cmp	r2, #0
 8019034:	d0f7      	beq.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019036:	f06f 0601 	mvn.w	r6, #1
 801903a:	fa1f f982 	uxth.w	r9, r2
 801903e:	43d2      	mvns	r2, r2
 8019040:	436e      	muls	r6, r5
 8019042:	f8d8 c000 	ldr.w	ip, [r8]
 8019046:	f834 e006 	ldrh.w	lr, [r4, r6]
 801904a:	9604      	str	r6, [sp, #16]
 801904c:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8019050:	fb16 f609 	smulbb	r6, r6, r9
 8019054:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8019058:	fa5f fc8c 	uxtb.w	ip, ip
 801905c:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019060:	fb1c fc09 	smulbb	ip, ip, r9
 8019064:	b2d2      	uxtb	r2, r2
 8019066:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801906a:	fb07 6702 	mla	r7, r7, r2, r6
 801906e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019072:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019076:	fb1a fa09 	smulbb	sl, sl, r9
 801907a:	fa5f fe8e 	uxtb.w	lr, lr
 801907e:	fb0e cc02 	mla	ip, lr, r2, ip
 8019082:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019086:	fb06 a602 	mla	r6, r6, r2, sl
 801908a:	b2bf      	uxth	r7, r7
 801908c:	fa1f fc8c 	uxth.w	ip, ip
 8019090:	1c7a      	adds	r2, r7, #1
 8019092:	f10c 0a01 	add.w	sl, ip, #1
 8019096:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801909a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801909e:	b2b6      	uxth	r6, r6
 80190a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80190a4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80190a8:	ea4a 0707 	orr.w	r7, sl, r7
 80190ac:	f106 0a01 	add.w	sl, r6, #1
 80190b0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80190b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80190b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80190bc:	9a04      	ldr	r2, [sp, #16]
 80190be:	ea47 070a 	orr.w	r7, r7, sl
 80190c2:	52a7      	strh	r7, [r4, r2]
 80190c4:	e7af      	b.n	8019026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80190c6:	f04f 0e00 	mov.w	lr, #0
 80190ca:	eba3 020e 	sub.w	r2, r3, lr
 80190ce:	2a00      	cmp	r2, #0
 80190d0:	f77f af3a 	ble.w	8018f48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80190d4:	9e02      	ldr	r6, [sp, #8]
 80190d6:	1402      	asrs	r2, r0, #16
 80190d8:	140d      	asrs	r5, r1, #16
 80190da:	fb06 2505 	mla	r5, r6, r5, r2
 80190de:	9e03      	ldr	r6, [sp, #12]
 80190e0:	086a      	lsrs	r2, r5, #1
 80190e2:	5cb2      	ldrb	r2, [r6, r2]
 80190e4:	07ed      	lsls	r5, r5, #31
 80190e6:	bf54      	ite	pl
 80190e8:	f002 020f 	andpl.w	r2, r2, #15
 80190ec:	1112      	asrmi	r2, r2, #4
 80190ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80190f2:	b2d2      	uxtb	r2, r2
 80190f4:	2aff      	cmp	r2, #255	; 0xff
 80190f6:	d115      	bne.n	8019124 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80190f8:	f8d8 5000 	ldr.w	r5, [r8]
 80190fc:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8019100:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019104:	096a      	lsrs	r2, r5, #5
 8019106:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801910a:	4332      	orrs	r2, r6
 801910c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019110:	432a      	orrs	r2, r5
 8019112:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019116:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019118:	f10e 0e01 	add.w	lr, lr, #1
 801911c:	4410      	add	r0, r2
 801911e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019120:	4411      	add	r1, r2
 8019122:	e7d2      	b.n	80190ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019124:	2a00      	cmp	r2, #0
 8019126:	d0f6      	beq.n	8019116 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019128:	fa1f f982 	uxth.w	r9, r2
 801912c:	43d2      	mvns	r2, r2
 801912e:	f8d8 7000 	ldr.w	r7, [r8]
 8019132:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019136:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801913a:	fb15 f509 	smulbb	r5, r5, r9
 801913e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019142:	b2ff      	uxtb	r7, r7
 8019144:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019148:	fb17 f709 	smulbb	r7, r7, r9
 801914c:	b2d2      	uxtb	r2, r2
 801914e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019152:	fb06 5602 	mla	r6, r6, r2, r5
 8019156:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801915a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801915e:	fb1a fa09 	smulbb	sl, sl, r9
 8019162:	fa5f fc8c 	uxtb.w	ip, ip
 8019166:	fb0c 7702 	mla	r7, ip, r2, r7
 801916a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801916e:	fb05 a502 	mla	r5, r5, r2, sl
 8019172:	b2b6      	uxth	r6, r6
 8019174:	b2bf      	uxth	r7, r7
 8019176:	1c72      	adds	r2, r6, #1
 8019178:	f107 0a01 	add.w	sl, r7, #1
 801917c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8019180:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019184:	b2ad      	uxth	r5, r5
 8019186:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801918a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801918e:	ea4a 0606 	orr.w	r6, sl, r6
 8019192:	f105 0a01 	add.w	sl, r5, #1
 8019196:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801919a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801919e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80191a2:	ea46 060a 	orr.w	r6, r6, sl
 80191a6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80191aa:	e7b4      	b.n	8019116 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80191ac:	b007      	add	sp, #28
 80191ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b2:	bf00      	nop
 80191b4:	20020094 	.word	0x20020094

080191b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80191b8:	4770      	bx	lr

080191ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80191ba:	4770      	bx	lr

080191bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80191bc:	4770      	bx	lr

080191be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80191be:	4770      	bx	lr

080191c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80191c0:	4770      	bx	lr

080191c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80191c2:	4770      	bx	lr

080191c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80191c4:	4770      	bx	lr

080191c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80191c6:	4770      	bx	lr

080191c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80191c8:	4770      	bx	lr

080191ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80191ca:	4770      	bx	lr

080191cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80191cc:	4770      	bx	lr

080191ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80191ce:	4770      	bx	lr

080191d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80191d0:	4770      	bx	lr

080191d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80191d2:	4770      	bx	lr

080191d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80191d4:	4770      	bx	lr

080191d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80191d6:	4770      	bx	lr

080191d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80191d8:	4770      	bx	lr

080191da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80191da:	4770      	bx	lr

080191dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80191dc:	4770      	bx	lr

080191de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80191de:	4770      	bx	lr

080191e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80191e0:	4770      	bx	lr

080191e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80191e2:	4770      	bx	lr

080191e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80191e4:	4770      	bx	lr

080191e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80191e6:	4770      	bx	lr

080191e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80191e8:	4770      	bx	lr

080191ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80191ea:	4770      	bx	lr

080191ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80191ec:	4770      	bx	lr

080191ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80191ee:	4770      	bx	lr

080191f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80191f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191f4:	b088      	sub	sp, #32
 80191f6:	ac08      	add	r4, sp, #32
 80191f8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80191fc:	4606      	mov	r6, r0
 80191fe:	4620      	mov	r0, r4
 8019200:	4688      	mov	r8, r1
 8019202:	4691      	mov	r9, r2
 8019204:	f7fd fc66 	bl	8016ad4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019208:	6833      	ldr	r3, [r6, #0]
 801920a:	4605      	mov	r5, r0
 801920c:	4620      	mov	r0, r4
 801920e:	699f      	ldr	r7, [r3, #24]
 8019210:	f7fd fb74 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019214:	4682      	mov	sl, r0
 8019216:	4620      	mov	r0, r4
 8019218:	f7fd fba4 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801921c:	9500      	str	r5, [sp, #0]
 801921e:	e9cd a001 	strd	sl, r0, [sp, #4]
 8019222:	464b      	mov	r3, r9
 8019224:	a806      	add	r0, sp, #24
 8019226:	4642      	mov	r2, r8
 8019228:	4631      	mov	r1, r6
 801922a:	47b8      	blx	r7
 801922c:	4628      	mov	r0, r5
 801922e:	b008      	add	sp, #32
 8019230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019234 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019238:	2300      	movs	r3, #0
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	4b3d      	ldr	r3, [pc, #244]	; (8019334 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d137      	bne.n	80192b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8019244:	4a3c      	ldr	r2, [pc, #240]	; (8019338 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019246:	f9b2 2000 	ldrsh.w	r2, [r2]
 801924a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d132      	bne.n	80192b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8019252:	4b3a      	ldr	r3, [pc, #232]	; (801933c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019258:	6808      	ldr	r0, [r1, #0]
 801925a:	6849      	ldr	r1, [r1, #4]
 801925c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019260:	ac02      	add	r4, sp, #8
 8019262:	ab02      	add	r3, sp, #8
 8019264:	c303      	stmia	r3!, {r0, r1}
 8019266:	4669      	mov	r1, sp
 8019268:	4620      	mov	r0, r4
 801926a:	f7fa fbcb 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801926e:	4668      	mov	r0, sp
 8019270:	f7fa fb84 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019274:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019278:	f8bd 2000 	ldrh.w	r2, [sp]
 801927c:	4d30      	ldr	r5, [pc, #192]	; (8019340 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801927e:	4413      	add	r3, r2
 8019280:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019284:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019288:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801928c:	6828      	ldr	r0, [r5, #0]
 801928e:	4413      	add	r3, r2
 8019290:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019294:	6803      	ldr	r3, [r0, #0]
 8019296:	462f      	mov	r7, r5
 8019298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801929a:	4798      	blx	r3
 801929c:	f010 0f01 	tst.w	r0, #1
 80192a0:	d00c      	beq.n	80192bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80192a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80192a6:	6828      	ldr	r0, [r5, #0]
 80192a8:	6803      	ldr	r3, [r0, #0]
 80192aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192ac:	4798      	blx	r3
 80192ae:	b004      	add	sp, #16
 80192b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192b4:	4a21      	ldr	r2, [pc, #132]	; (801933c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80192b6:	e7c6      	b.n	8019246 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80192b8:	4b1f      	ldr	r3, [pc, #124]	; (8019338 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80192ba:	e7cb      	b.n	8019254 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80192bc:	6838      	ldr	r0, [r7, #0]
 80192be:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80192c2:	6803      	ldr	r3, [r0, #0]
 80192c4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80192c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192ca:	4798      	blx	r3
 80192cc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80192d0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80192d4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80192d8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80192dc:	fb16 3602 	smlabb	r6, r6, r2, r3
 80192e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80192e4:	6838      	ldr	r0, [r7, #0]
 80192e6:	6803      	ldr	r3, [r0, #0]
 80192e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ea:	4798      	blx	r3
 80192ec:	4a12      	ldr	r2, [pc, #72]	; (8019338 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80192ee:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80192f2:	4691      	mov	r9, r2
 80192f4:	8813      	ldrh	r3, [r2, #0]
 80192f6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80192fa:	435d      	muls	r5, r3
 80192fc:	fb03 1404 	mla	r4, r3, r4, r1
 8019300:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019304:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019308:	6838      	ldr	r0, [r7, #0]
 801930a:	42ac      	cmp	r4, r5
 801930c:	6803      	ldr	r3, [r0, #0]
 801930e:	d20e      	bcs.n	801932e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8019310:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8019314:	4632      	mov	r2, r6
 8019316:	4643      	mov	r3, r8
 8019318:	4621      	mov	r1, r4
 801931a:	47d0      	blx	sl
 801931c:	f8b9 3000 	ldrh.w	r3, [r9]
 8019320:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019324:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019328:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801932c:	e7ec      	b.n	8019308 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019330:	4798      	blx	r3
 8019332:	e7bc      	b.n	80192ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019334:	20020084 	.word	0x20020084
 8019338:	20020086 	.word	0x20020086
 801933c:	20020088 	.word	0x20020088
 8019340:	2002008c 	.word	0x2002008c

08019344 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019348:	b08b      	sub	sp, #44	; 0x2c
 801934a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801934e:	460f      	mov	r7, r1
 8019350:	4616      	mov	r6, r2
 8019352:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8019356:	f1bb 0f00 	cmp.w	fp, #0
 801935a:	d049      	beq.n	80193f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801935c:	6810      	ldr	r0, [r2, #0]
 801935e:	6851      	ldr	r1, [r2, #4]
 8019360:	ad06      	add	r5, sp, #24
 8019362:	c503      	stmia	r5!, {r0, r1}
 8019364:	6818      	ldr	r0, [r3, #0]
 8019366:	6859      	ldr	r1, [r3, #4]
 8019368:	ad08      	add	r5, sp, #32
 801936a:	c503      	stmia	r5!, {r0, r1}
 801936c:	a806      	add	r0, sp, #24
 801936e:	f7fa fb05 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019372:	4631      	mov	r1, r6
 8019374:	a808      	add	r0, sp, #32
 8019376:	f7fa fb45 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801937a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801937e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019382:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019386:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801938a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801938e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8019392:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019396:	4f60      	ldr	r7, [pc, #384]	; (8019518 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019398:	440a      	add	r2, r1
 801939a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801939e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80193a2:	6838      	ldr	r0, [r7, #0]
 80193a4:	4413      	add	r3, r2
 80193a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80193aa:	6803      	ldr	r3, [r0, #0]
 80193ac:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80193b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193b2:	4798      	blx	r3
 80193b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80193b8:	46b9      	mov	r9, r7
 80193ba:	d01c      	beq.n	80193f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80193bc:	f010 0f04 	tst.w	r0, #4
 80193c0:	d01d      	beq.n	80193fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80193c2:	2700      	movs	r7, #0
 80193c4:	f8d9 0000 	ldr.w	r0, [r9]
 80193c8:	b2ad      	uxth	r5, r5
 80193ca:	6801      	ldr	r1, [r0, #0]
 80193cc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80193d0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80193d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80193d8:	9402      	str	r4, [sp, #8]
 80193da:	fa1f f488 	uxth.w	r4, r8
 80193de:	9501      	str	r5, [sp, #4]
 80193e0:	9400      	str	r4, [sp, #0]
 80193e2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80193e4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80193e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80193ec:	4631      	mov	r1, r6
 80193ee:	47a0      	blx	r4
 80193f0:	b00b      	add	sp, #44	; 0x2c
 80193f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193f6:	b914      	cbnz	r4, 80193fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80193f8:	f010 0f01 	tst.w	r0, #1
 80193fc:	e7e0      	b.n	80193c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80193fe:	f8d9 0000 	ldr.w	r0, [r9]
 8019402:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8019406:	6803      	ldr	r3, [r0, #0]
 8019408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801940a:	4798      	blx	r3
 801940c:	4b43      	ldr	r3, [pc, #268]	; (801951c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801940e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8019412:	881a      	ldrh	r2, [r3, #0]
 8019414:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019418:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801941c:	fb02 1404 	mla	r4, r2, r4, r1
 8019420:	469a      	mov	sl, r3
 8019422:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019426:	fb05 f502 	mul.w	r5, r5, r2
 801942a:	d059      	beq.n	80194e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801942c:	469e      	mov	lr, r3
 801942e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8019432:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019436:	fa1f f28b 	uxth.w	r2, fp
 801943a:	fa1f f989 	uxth.w	r9, r9
 801943e:	42ac      	cmp	r4, r5
 8019440:	d264      	bcs.n	801950c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019442:	eb04 0a07 	add.w	sl, r4, r7
 8019446:	4554      	cmp	r4, sl
 8019448:	d23d      	bcs.n	80194c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801944a:	8821      	ldrh	r1, [r4, #0]
 801944c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8019450:	1208      	asrs	r0, r1, #8
 8019452:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019456:	fb10 f009 	smulbb	r0, r0, r9
 801945a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801945e:	00c9      	lsls	r1, r1, #3
 8019460:	b2c9      	uxtb	r1, r1
 8019462:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019466:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801946a:	fb11 f109 	smulbb	r1, r1, r9
 801946e:	fb1b fb09 	smulbb	fp, fp, r9
 8019472:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019476:	fb0c 0c02 	mla	ip, ip, r2, r0
 801947a:	10d8      	asrs	r0, r3, #3
 801947c:	00db      	lsls	r3, r3, #3
 801947e:	b2db      	uxtb	r3, r3
 8019480:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019484:	fb03 1302 	mla	r3, r3, r2, r1
 8019488:	fb00 b002 	mla	r0, r0, r2, fp
 801948c:	fa1f fc8c 	uxth.w	ip, ip
 8019490:	f10c 0b01 	add.w	fp, ip, #1
 8019494:	b29b      	uxth	r3, r3
 8019496:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801949a:	b280      	uxth	r0, r0
 801949c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80194a0:	f103 0c01 	add.w	ip, r3, #1
 80194a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80194a8:	1c43      	adds	r3, r0, #1
 80194aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80194ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80194b2:	0940      	lsrs	r0, r0, #5
 80194b4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80194b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80194bc:	ea4c 0c00 	orr.w	ip, ip, r0
 80194c0:	f824 cb02 	strh.w	ip, [r4], #2
 80194c4:	e7bf      	b.n	8019446 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80194c6:	f8be 3000 	ldrh.w	r3, [lr]
 80194ca:	eba3 0308 	sub.w	r3, r3, r8
 80194ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80194d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80194d6:	eba3 0308 	sub.w	r3, r3, r8
 80194da:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80194de:	e7ae      	b.n	801943e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80194e0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80194e4:	f8d9 0000 	ldr.w	r0, [r9]
 80194e8:	42ac      	cmp	r4, r5
 80194ea:	6803      	ldr	r3, [r0, #0]
 80194ec:	d20e      	bcs.n	801950c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80194ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80194f2:	4632      	mov	r2, r6
 80194f4:	463b      	mov	r3, r7
 80194f6:	4621      	mov	r1, r4
 80194f8:	47c0      	blx	r8
 80194fa:	f8ba 3000 	ldrh.w	r3, [sl]
 80194fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019502:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019506:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801950a:	e7eb      	b.n	80194e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801950c:	4b02      	ldr	r3, [pc, #8]	; (8019518 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801950e:	6818      	ldr	r0, [r3, #0]
 8019510:	6803      	ldr	r3, [r0, #0]
 8019512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019514:	4798      	blx	r3
 8019516:	e76b      	b.n	80193f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019518:	2002008c 	.word	0x2002008c
 801951c:	20020086 	.word	0x20020086

08019520 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019520:	b510      	push	{r4, lr}
 8019522:	4604      	mov	r4, r0
 8019524:	2104      	movs	r1, #4
 8019526:	f008 ff9a 	bl	802245e <_ZdlPvj>
 801952a:	4620      	mov	r0, r4
 801952c:	bd10      	pop	{r4, pc}

0801952e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801952e:	b510      	push	{r4, lr}
 8019530:	4604      	mov	r4, r0
 8019532:	2104      	movs	r1, #4
 8019534:	f008 ff93 	bl	802245e <_ZdlPvj>
 8019538:	4620      	mov	r0, r4
 801953a:	bd10      	pop	{r4, pc}

0801953c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801953c:	b510      	push	{r4, lr}
 801953e:	4604      	mov	r4, r0
 8019540:	2104      	movs	r1, #4
 8019542:	f008 ff8c 	bl	802245e <_ZdlPvj>
 8019546:	4620      	mov	r0, r4
 8019548:	bd10      	pop	{r4, pc}

0801954a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801954a:	b510      	push	{r4, lr}
 801954c:	4604      	mov	r4, r0
 801954e:	2104      	movs	r1, #4
 8019550:	f008 ff85 	bl	802245e <_ZdlPvj>
 8019554:	4620      	mov	r0, r4
 8019556:	bd10      	pop	{r4, pc}

08019558 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019558:	b510      	push	{r4, lr}
 801955a:	4604      	mov	r4, r0
 801955c:	2104      	movs	r1, #4
 801955e:	f008 ff7e 	bl	802245e <_ZdlPvj>
 8019562:	4620      	mov	r0, r4
 8019564:	bd10      	pop	{r4, pc}

08019566 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019566:	b510      	push	{r4, lr}
 8019568:	4604      	mov	r4, r0
 801956a:	2104      	movs	r1, #4
 801956c:	f008 ff77 	bl	802245e <_ZdlPvj>
 8019570:	4620      	mov	r0, r4
 8019572:	bd10      	pop	{r4, pc}

08019574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019574:	b510      	push	{r4, lr}
 8019576:	4604      	mov	r4, r0
 8019578:	2104      	movs	r1, #4
 801957a:	f008 ff70 	bl	802245e <_ZdlPvj>
 801957e:	4620      	mov	r0, r4
 8019580:	bd10      	pop	{r4, pc}

08019582 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019582:	b510      	push	{r4, lr}
 8019584:	4604      	mov	r4, r0
 8019586:	2104      	movs	r1, #4
 8019588:	f008 ff69 	bl	802245e <_ZdlPvj>
 801958c:	4620      	mov	r0, r4
 801958e:	bd10      	pop	{r4, pc}

08019590 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019590:	b510      	push	{r4, lr}
 8019592:	4604      	mov	r4, r0
 8019594:	2104      	movs	r1, #4
 8019596:	f008 ff62 	bl	802245e <_ZdlPvj>
 801959a:	4620      	mov	r0, r4
 801959c:	bd10      	pop	{r4, pc}

0801959e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801959e:	b510      	push	{r4, lr}
 80195a0:	4604      	mov	r4, r0
 80195a2:	2104      	movs	r1, #4
 80195a4:	f008 ff5b 	bl	802245e <_ZdlPvj>
 80195a8:	4620      	mov	r0, r4
 80195aa:	bd10      	pop	{r4, pc}

080195ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80195ac:	b510      	push	{r4, lr}
 80195ae:	4604      	mov	r4, r0
 80195b0:	2104      	movs	r1, #4
 80195b2:	f008 ff54 	bl	802245e <_ZdlPvj>
 80195b6:	4620      	mov	r0, r4
 80195b8:	bd10      	pop	{r4, pc}

080195ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80195ba:	b510      	push	{r4, lr}
 80195bc:	4604      	mov	r4, r0
 80195be:	2104      	movs	r1, #4
 80195c0:	f008 ff4d 	bl	802245e <_ZdlPvj>
 80195c4:	4620      	mov	r0, r4
 80195c6:	bd10      	pop	{r4, pc}

080195c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80195c8:	b510      	push	{r4, lr}
 80195ca:	4604      	mov	r4, r0
 80195cc:	2104      	movs	r1, #4
 80195ce:	f008 ff46 	bl	802245e <_ZdlPvj>
 80195d2:	4620      	mov	r0, r4
 80195d4:	bd10      	pop	{r4, pc}

080195d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80195d6:	b510      	push	{r4, lr}
 80195d8:	4604      	mov	r4, r0
 80195da:	2104      	movs	r1, #4
 80195dc:	f008 ff3f 	bl	802245e <_ZdlPvj>
 80195e0:	4620      	mov	r0, r4
 80195e2:	bd10      	pop	{r4, pc}

080195e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80195e4:	b510      	push	{r4, lr}
 80195e6:	4604      	mov	r4, r0
 80195e8:	2104      	movs	r1, #4
 80195ea:	f008 ff38 	bl	802245e <_ZdlPvj>
 80195ee:	4620      	mov	r0, r4
 80195f0:	bd10      	pop	{r4, pc}

080195f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80195f2:	b510      	push	{r4, lr}
 80195f4:	4604      	mov	r4, r0
 80195f6:	2104      	movs	r1, #4
 80195f8:	f008 ff31 	bl	802245e <_ZdlPvj>
 80195fc:	4620      	mov	r0, r4
 80195fe:	bd10      	pop	{r4, pc}

08019600 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019600:	b510      	push	{r4, lr}
 8019602:	4604      	mov	r4, r0
 8019604:	2104      	movs	r1, #4
 8019606:	f008 ff2a 	bl	802245e <_ZdlPvj>
 801960a:	4620      	mov	r0, r4
 801960c:	bd10      	pop	{r4, pc}

0801960e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801960e:	b510      	push	{r4, lr}
 8019610:	4604      	mov	r4, r0
 8019612:	2104      	movs	r1, #4
 8019614:	f008 ff23 	bl	802245e <_ZdlPvj>
 8019618:	4620      	mov	r0, r4
 801961a:	bd10      	pop	{r4, pc}

0801961c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801961c:	b510      	push	{r4, lr}
 801961e:	4604      	mov	r4, r0
 8019620:	2104      	movs	r1, #4
 8019622:	f008 ff1c 	bl	802245e <_ZdlPvj>
 8019626:	4620      	mov	r0, r4
 8019628:	bd10      	pop	{r4, pc}

0801962a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801962a:	b510      	push	{r4, lr}
 801962c:	4604      	mov	r4, r0
 801962e:	2104      	movs	r1, #4
 8019630:	f008 ff15 	bl	802245e <_ZdlPvj>
 8019634:	4620      	mov	r0, r4
 8019636:	bd10      	pop	{r4, pc}

08019638 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019638:	b510      	push	{r4, lr}
 801963a:	4604      	mov	r4, r0
 801963c:	2104      	movs	r1, #4
 801963e:	f008 ff0e 	bl	802245e <_ZdlPvj>
 8019642:	4620      	mov	r0, r4
 8019644:	bd10      	pop	{r4, pc}

08019646 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019646:	b510      	push	{r4, lr}
 8019648:	4604      	mov	r4, r0
 801964a:	2104      	movs	r1, #4
 801964c:	f008 ff07 	bl	802245e <_ZdlPvj>
 8019650:	4620      	mov	r0, r4
 8019652:	bd10      	pop	{r4, pc}

08019654 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019654:	b510      	push	{r4, lr}
 8019656:	4604      	mov	r4, r0
 8019658:	2104      	movs	r1, #4
 801965a:	f008 ff00 	bl	802245e <_ZdlPvj>
 801965e:	4620      	mov	r0, r4
 8019660:	bd10      	pop	{r4, pc}

08019662 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019662:	b510      	push	{r4, lr}
 8019664:	4604      	mov	r4, r0
 8019666:	2104      	movs	r1, #4
 8019668:	f008 fef9 	bl	802245e <_ZdlPvj>
 801966c:	4620      	mov	r0, r4
 801966e:	bd10      	pop	{r4, pc}

08019670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019670:	b510      	push	{r4, lr}
 8019672:	4604      	mov	r4, r0
 8019674:	2104      	movs	r1, #4
 8019676:	f008 fef2 	bl	802245e <_ZdlPvj>
 801967a:	4620      	mov	r0, r4
 801967c:	bd10      	pop	{r4, pc}

0801967e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801967e:	b510      	push	{r4, lr}
 8019680:	4604      	mov	r4, r0
 8019682:	2104      	movs	r1, #4
 8019684:	f008 feeb 	bl	802245e <_ZdlPvj>
 8019688:	4620      	mov	r0, r4
 801968a:	bd10      	pop	{r4, pc}

0801968c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801968c:	b510      	push	{r4, lr}
 801968e:	4604      	mov	r4, r0
 8019690:	2104      	movs	r1, #4
 8019692:	f008 fee4 	bl	802245e <_ZdlPvj>
 8019696:	4620      	mov	r0, r4
 8019698:	bd10      	pop	{r4, pc}

0801969a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801969a:	b510      	push	{r4, lr}
 801969c:	4604      	mov	r4, r0
 801969e:	2104      	movs	r1, #4
 80196a0:	f008 fedd 	bl	802245e <_ZdlPvj>
 80196a4:	4620      	mov	r0, r4
 80196a6:	bd10      	pop	{r4, pc}

080196a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80196a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ac:	469b      	mov	fp, r3
 80196ae:	4616      	mov	r6, r2
 80196b0:	b091      	sub	sp, #68	; 0x44
 80196b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80196b6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80196ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80196be:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80196c2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80196c6:	4604      	mov	r4, r0
 80196c8:	460d      	mov	r5, r1
 80196ca:	4640      	mov	r0, r8
 80196cc:	4659      	mov	r1, fp
 80196ce:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80196d2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80196d6:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80196da:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 80196de:	f7f7 fb63 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 80196e2:	4631      	mov	r1, r6
 80196e4:	4640      	mov	r0, r8
 80196e6:	f7f7 fb5f 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 80196ea:	4b74      	ldr	r3, [pc, #464]	; (80198bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80196ec:	8818      	ldrh	r0, [r3, #0]
 80196ee:	4b74      	ldr	r3, [pc, #464]	; (80198c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80196f0:	b202      	sxth	r2, r0
 80196f2:	8819      	ldrh	r1, [r3, #0]
 80196f4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80196f8:	b20e      	sxth	r6, r1
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	da07      	bge.n	801970e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80196fe:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8019702:	4463      	add	r3, ip
 8019704:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019708:	2300      	movs	r3, #0
 801970a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801970e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019712:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8019716:	1ad2      	subs	r2, r2, r3
 8019718:	4594      	cmp	ip, r2
 801971a:	bfc4      	itt	gt
 801971c:	1ac2      	subgt	r2, r0, r3
 801971e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8019722:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019726:	2a00      	cmp	r2, #0
 8019728:	da07      	bge.n	801973a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801972a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801972e:	4462      	add	r2, ip
 8019730:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8019734:	2200      	movs	r2, #0
 8019736:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801973a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801973e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8019742:	eba6 060a 	sub.w	r6, r6, sl
 8019746:	42b2      	cmp	r2, r6
 8019748:	bfc4      	itt	gt
 801974a:	eba1 020a 	subgt.w	r2, r1, sl
 801974e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8019752:	4a5c      	ldr	r2, [pc, #368]	; (80198c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8019754:	7812      	ldrb	r2, [r2, #0]
 8019756:	b9a2      	cbnz	r2, 8019782 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8019758:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801975c:	4286      	cmp	r6, r0
 801975e:	4640      	mov	r0, r8
 8019760:	9303      	str	r3, [sp, #12]
 8019762:	bf14      	ite	ne
 8019764:	2600      	movne	r6, #0
 8019766:	2601      	moveq	r6, #1
 8019768:	f7f7 fb61 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801976c:	9b03      	ldr	r3, [sp, #12]
 801976e:	b160      	cbz	r0, 801978a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8019770:	2300      	movs	r3, #0
 8019772:	8023      	strh	r3, [r4, #0]
 8019774:	8063      	strh	r3, [r4, #2]
 8019776:	80a3      	strh	r3, [r4, #4]
 8019778:	4620      	mov	r0, r4
 801977a:	80e3      	strh	r3, [r4, #6]
 801977c:	b011      	add	sp, #68	; 0x44
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8019786:	428e      	cmp	r6, r1
 8019788:	e7e9      	b.n	801975e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801978a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801978e:	a90e      	add	r1, sp, #56	; 0x38
 8019790:	9205      	str	r2, [sp, #20]
 8019792:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8019796:	900e      	str	r0, [sp, #56]	; 0x38
 8019798:	9206      	str	r2, [sp, #24]
 801979a:	f8bb 2000 	ldrh.w	r2, [fp]
 801979e:	a80c      	add	r0, sp, #48	; 0x30
 80197a0:	1a9b      	subs	r3, r3, r2
 80197a2:	b21b      	sxth	r3, r3
 80197a4:	9303      	str	r3, [sp, #12]
 80197a6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80197aa:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 80197ae:	ebaa 0a03 	sub.w	sl, sl, r3
 80197b2:	fa0f f38a 	sxth.w	r3, sl
 80197b6:	9304      	str	r3, [sp, #16]
 80197b8:	9b03      	ldr	r3, [sp, #12]
 80197ba:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 80197be:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80197c2:	9b04      	ldr	r3, [sp, #16]
 80197c4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80198cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80197c8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80197cc:	9b05      	ldr	r3, [sp, #20]
 80197ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80197d2:	9b06      	ldr	r3, [sp, #24]
 80197d4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80197d8:	f7fa f914 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80197dc:	4640      	mov	r0, r8
 80197de:	f7fa f8cd 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197e2:	a80e      	add	r0, sp, #56	; 0x38
 80197e4:	f7fa f8ca 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197e8:	4b37      	ldr	r3, [pc, #220]	; (80198c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80197ea:	4628      	mov	r0, r5
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80197f2:	9307      	str	r3, [sp, #28]
 80197f4:	682b      	ldr	r3, [r5, #0]
 80197f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197f8:	4798      	blx	r3
 80197fa:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 80197fe:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8019802:	4681      	mov	r9, r0
 8019804:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8019808:	f8db 0000 	ldr.w	r0, [fp]
 801980c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801980e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019812:	6803      	ldr	r3, [r0, #0]
 8019814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019816:	4798      	blx	r3
 8019818:	4607      	mov	r7, r0
 801981a:	f8db 0000 	ldr.w	r0, [fp]
 801981e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8019822:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019826:	6803      	ldr	r3, [r0, #0]
 8019828:	9109      	str	r1, [sp, #36]	; 0x24
 801982a:	9208      	str	r2, [sp, #32]
 801982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801982e:	4798      	blx	r3
 8019830:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019834:	f010 0f01 	tst.w	r0, #1
 8019838:	d012      	beq.n	8019860 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801983a:	f8db 0000 	ldr.w	r0, [fp]
 801983e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019842:	6803      	ldr	r3, [r0, #0]
 8019844:	9200      	str	r2, [sp, #0]
 8019846:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8019848:	e898 0006 	ldmia.w	r8, {r1, r2}
 801984c:	462b      	mov	r3, r5
 801984e:	47b0      	blx	r6
 8019850:	9b03      	ldr	r3, [sp, #12]
 8019852:	8023      	strh	r3, [r4, #0]
 8019854:	9b04      	ldr	r3, [sp, #16]
 8019856:	8063      	strh	r3, [r4, #2]
 8019858:	9b05      	ldr	r3, [sp, #20]
 801985a:	80a3      	strh	r3, [r4, #4]
 801985c:	9b06      	ldr	r3, [sp, #24]
 801985e:	e78b      	b.n	8019778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8019860:	fb09 f202 	mul.w	r2, r9, r2
 8019864:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019868:	440f      	add	r7, r1
 801986a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801986e:	b166      	cbz	r6, 801988a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8019870:	9a07      	ldr	r2, [sp, #28]
 8019872:	4592      	cmp	sl, r2
 8019874:	d109      	bne.n	801988a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8019876:	f8db 0000 	ldr.w	r0, [fp]
 801987a:	fb09 f303 	mul.w	r3, r9, r3
 801987e:	6802      	ldr	r2, [r0, #0]
 8019880:	4629      	mov	r1, r5
 8019882:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8019884:	463a      	mov	r2, r7
 8019886:	47b0      	blx	r6
 8019888:	e7e2      	b.n	8019850 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801988a:	fb0a f303 	mul.w	r3, sl, r3
 801988e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80198cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8019892:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8019896:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801989a:	4545      	cmp	r5, r8
 801989c:	d2d8      	bcs.n	8019850 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801989e:	f8db 0000 	ldr.w	r0, [fp]
 80198a2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80198a6:	6802      	ldr	r2, [r0, #0]
 80198a8:	4629      	mov	r1, r5
 80198aa:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80198ae:	005b      	lsls	r3, r3, #1
 80198b0:	463a      	mov	r2, r7
 80198b2:	47d0      	blx	sl
 80198b4:	444f      	add	r7, r9
 80198b6:	4435      	add	r5, r6
 80198b8:	e7ef      	b.n	801989a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80198ba:	bf00      	nop
 80198bc:	20020080 	.word	0x20020080
 80198c0:	20020082 	.word	0x20020082
 80198c4:	20020084 	.word	0x20020084
 80198c8:	20020086 	.word	0x20020086
 80198cc:	2002008c 	.word	0x2002008c

080198d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80198d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198d2:	4606      	mov	r6, r0
 80198d4:	b087      	sub	sp, #28
 80198d6:	460c      	mov	r4, r1
 80198d8:	4617      	mov	r7, r2
 80198da:	461d      	mov	r5, r3
 80198dc:	b333      	cbz	r3, 801992c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80198de:	4608      	mov	r0, r1
 80198e0:	f7f7 faa5 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 80198e4:	bb10      	cbnz	r0, 801992c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80198e6:	6820      	ldr	r0, [r4, #0]
 80198e8:	6861      	ldr	r1, [r4, #4]
 80198ea:	ab04      	add	r3, sp, #16
 80198ec:	4c1b      	ldr	r4, [pc, #108]	; (801995c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80198ee:	c303      	stmia	r3!, {r0, r1}
 80198f0:	a804      	add	r0, sp, #16
 80198f2:	f7fa f843 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198f6:	6820      	ldr	r0, [r4, #0]
 80198f8:	6803      	ldr	r3, [r0, #0]
 80198fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198fc:	4798      	blx	r3
 80198fe:	2dff      	cmp	r5, #255	; 0xff
 8019900:	d016      	beq.n	8019930 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8019902:	f010 0f08 	tst.w	r0, #8
 8019906:	6820      	ldr	r0, [r4, #0]
 8019908:	d015      	beq.n	8019936 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801990a:	2400      	movs	r4, #0
 801990c:	6801      	ldr	r1, [r0, #0]
 801990e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8019912:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019916:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801991a:	9401      	str	r4, [sp, #4]
 801991c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019920:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019924:	9400      	str	r4, [sp, #0]
 8019926:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019928:	4639      	mov	r1, r7
 801992a:	47a0      	blx	r4
 801992c:	b007      	add	sp, #28
 801992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019930:	f010 0f02 	tst.w	r0, #2
 8019934:	e7e7      	b.n	8019906 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8019936:	6803      	ldr	r3, [r0, #0]
 8019938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801993a:	4798      	blx	r3
 801993c:	4b08      	ldr	r3, [pc, #32]	; (8019960 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801993e:	4601      	mov	r1, r0
 8019940:	881a      	ldrh	r2, [r3, #0]
 8019942:	e9cd 7500 	strd	r7, r5, [sp]
 8019946:	6833      	ldr	r3, [r6, #0]
 8019948:	4630      	mov	r0, r6
 801994a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801994c:	ab04      	add	r3, sp, #16
 801994e:	47a8      	blx	r5
 8019950:	6820      	ldr	r0, [r4, #0]
 8019952:	6803      	ldr	r3, [r0, #0]
 8019954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019956:	4798      	blx	r3
 8019958:	e7e8      	b.n	801992c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801995a:	bf00      	nop
 801995c:	2002008c 	.word	0x2002008c
 8019960:	20020086 	.word	0x20020086

08019964 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019968:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801996c:	4688      	mov	r8, r1
 801996e:	4614      	mov	r4, r2
 8019970:	461d      	mov	r5, r3
 8019972:	9e08      	ldr	r6, [sp, #32]
 8019974:	2f00      	cmp	r7, #0
 8019976:	f000 80a9 	beq.w	8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801997a:	4618      	mov	r0, r3
 801997c:	f7f7 fa57 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019980:	2800      	cmp	r0, #0
 8019982:	f040 80a3 	bne.w	8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019986:	f9b5 1000 	ldrsh.w	r1, [r5]
 801998a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801998e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8019992:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8019996:	fb04 1303 	mla	r3, r4, r3, r1
 801999a:	4365      	muls	r5, r4
 801999c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80199a0:	2fff      	cmp	r7, #255	; 0xff
 80199a2:	eba4 0200 	sub.w	r2, r4, r0
 80199a6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80199aa:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80199ae:	d04a      	beq.n	8019a46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 80199b0:	b2bc      	uxth	r4, r7
 80199b2:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80199b6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80199ba:	fa5f f788 	uxtb.w	r7, r8
 80199be:	b2f3      	uxtb	r3, r6
 80199c0:	fb0e fe04 	mul.w	lr, lr, r4
 80199c4:	4367      	muls	r7, r4
 80199c6:	4363      	muls	r3, r4
 80199c8:	0040      	lsls	r0, r0, #1
 80199ca:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80199ce:	fa1f fc8c 	uxth.w	ip, ip
 80199d2:	42a9      	cmp	r1, r5
 80199d4:	d27a      	bcs.n	8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80199d6:	eb01 0900 	add.w	r9, r1, r0
 80199da:	4549      	cmp	r1, r9
 80199dc:	d231      	bcs.n	8019a42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 80199de:	880a      	ldrh	r2, [r1, #0]
 80199e0:	1214      	asrs	r4, r2, #8
 80199e2:	10d6      	asrs	r6, r2, #3
 80199e4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80199e8:	00d2      	lsls	r2, r2, #3
 80199ea:	b2d2      	uxtb	r2, r2
 80199ec:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80199f0:	fb14 f40c 	smulbb	r4, r4, ip
 80199f4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80199f8:	fb12 f20c 	smulbb	r2, r2, ip
 80199fc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019a00:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019a04:	4474      	add	r4, lr
 8019a06:	fb16 f60c 	smulbb	r6, r6, ip
 8019a0a:	b2a4      	uxth	r4, r4
 8019a0c:	441a      	add	r2, r3
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	f104 0a01 	add.w	sl, r4, #1
 8019a14:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019a18:	f102 0a01 	add.w	sl, r2, #1
 8019a1c:	443e      	add	r6, r7
 8019a1e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019a22:	b2b6      	uxth	r6, r6
 8019a24:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8019a28:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019a2c:	4322      	orrs	r2, r4
 8019a2e:	1c74      	adds	r4, r6, #1
 8019a30:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019a34:	0976      	lsrs	r6, r6, #5
 8019a36:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019a3a:	4332      	orrs	r2, r6
 8019a3c:	f821 2b02 	strh.w	r2, [r1], #2
 8019a40:	e7cb      	b.n	80199da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8019a42:	4441      	add	r1, r8
 8019a44:	e7c5      	b.n	80199d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8019a46:	4f22      	ldr	r7, [pc, #136]	; (8019ad0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8019a48:	0973      	lsrs	r3, r6, #5
 8019a4a:	ea08 0707 	and.w	r7, r8, r7
 8019a4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019a52:	433b      	orrs	r3, r7
 8019a54:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019a58:	4333      	orrs	r3, r6
 8019a5a:	07e7      	lsls	r7, r4, #31
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	d50b      	bpl.n	8019a78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8019a60:	0040      	lsls	r0, r0, #1
 8019a62:	0052      	lsls	r2, r2, #1
 8019a64:	42a9      	cmp	r1, r5
 8019a66:	d231      	bcs.n	8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019a68:	180c      	adds	r4, r1, r0
 8019a6a:	42a1      	cmp	r1, r4
 8019a6c:	d202      	bcs.n	8019a74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8019a6e:	f821 3b02 	strh.w	r3, [r1], #2
 8019a72:	e7fa      	b.n	8019a6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8019a74:	4411      	add	r1, r2
 8019a76:	e7f5      	b.n	8019a64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8019a78:	078e      	lsls	r6, r1, #30
 8019a7a:	d008      	beq.n	8019a8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8019a7c:	460a      	mov	r2, r1
 8019a7e:	0066      	lsls	r6, r4, #1
 8019a80:	42aa      	cmp	r2, r5
 8019a82:	d202      	bcs.n	8019a8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8019a84:	8013      	strh	r3, [r2, #0]
 8019a86:	4432      	add	r2, r6
 8019a88:	e7fa      	b.n	8019a80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8019a8a:	3102      	adds	r1, #2
 8019a8c:	3801      	subs	r0, #1
 8019a8e:	07c2      	lsls	r2, r0, #31
 8019a90:	d50b      	bpl.n	8019aaa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8019a92:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8019a96:	3a01      	subs	r2, #1
 8019a98:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019a9c:	0066      	lsls	r6, r4, #1
 8019a9e:	42aa      	cmp	r2, r5
 8019aa0:	d202      	bcs.n	8019aa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8019aa2:	8013      	strh	r3, [r2, #0]
 8019aa4:	4432      	add	r2, r6
 8019aa6:	e7fa      	b.n	8019a9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8019aa8:	3801      	subs	r0, #1
 8019aaa:	b178      	cbz	r0, 8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019aac:	1040      	asrs	r0, r0, #1
 8019aae:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8019ab2:	0080      	lsls	r0, r0, #2
 8019ab4:	0064      	lsls	r4, r4, #1
 8019ab6:	42a9      	cmp	r1, r5
 8019ab8:	d208      	bcs.n	8019acc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019aba:	460a      	mov	r2, r1
 8019abc:	180e      	adds	r6, r1, r0
 8019abe:	42b2      	cmp	r2, r6
 8019ac0:	d202      	bcs.n	8019ac8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8019ac2:	f842 3b04 	str.w	r3, [r2], #4
 8019ac6:	e7fa      	b.n	8019abe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8019ac8:	4421      	add	r1, r4
 8019aca:	e7f4      	b.n	8019ab6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8019acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ad0:	00fff800 	.word	0x00fff800

08019ad4 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	4910      	ldr	r1, [pc, #64]	; (8019b18 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8019ad8:	6042      	str	r2, [r0, #4]
 8019ada:	6001      	str	r1, [r0, #0]
 8019adc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019ae0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019ae4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019ae8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8019aec:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019af0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019af4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8019af8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8019afc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019b00:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019b04:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019b08:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019b0c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019b10:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019b14:	4770      	bx	lr
 8019b16:	bf00      	nop
 8019b18:	08025e10 	.word	0x08025e10

08019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b20:	460d      	mov	r5, r1
 8019b22:	4604      	mov	r4, r0
 8019b24:	4699      	mov	r9, r3
 8019b26:	b08d      	sub	sp, #52	; 0x34
 8019b28:	6808      	ldr	r0, [r1, #0]
 8019b2a:	6849      	ldr	r1, [r1, #4]
 8019b2c:	ab08      	add	r3, sp, #32
 8019b2e:	c303      	stmia	r3!, {r0, r1}
 8019b30:	6810      	ldr	r0, [r2, #0]
 8019b32:	6851      	ldr	r1, [r2, #4]
 8019b34:	ab0a      	add	r3, sp, #40	; 0x28
 8019b36:	c303      	stmia	r3!, {r0, r1}
 8019b38:	a808      	add	r0, sp, #32
 8019b3a:	f7f9 ff1f 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b3e:	4629      	mov	r1, r5
 8019b40:	a80a      	add	r0, sp, #40	; 0x28
 8019b42:	f7f9 ff5f 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b46:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019b4a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019b4e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019b52:	4d63      	ldr	r5, [pc, #396]	; (8019ce0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019b54:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019b58:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019b5c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019b60:	6828      	ldr	r0, [r5, #0]
 8019b62:	440a      	add	r2, r1
 8019b64:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019b68:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019b6c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019b70:	4413      	add	r3, r2
 8019b72:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019b76:	6803      	ldr	r3, [r0, #0]
 8019b78:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8019b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b7e:	4798      	blx	r3
 8019b80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019b84:	d119      	bne.n	8019bba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8019b86:	f010 0f20 	tst.w	r0, #32
 8019b8a:	6828      	ldr	r0, [r5, #0]
 8019b8c:	d018      	beq.n	8019bc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8019b8e:	2500      	movs	r5, #0
 8019b90:	6801      	ldr	r1, [r0, #0]
 8019b92:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019b96:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8019b9a:	b2b6      	uxth	r6, r6
 8019b9c:	9502      	str	r5, [sp, #8]
 8019b9e:	fa1f f588 	uxth.w	r5, r8
 8019ba2:	9601      	str	r6, [sp, #4]
 8019ba4:	9500      	str	r5, [sp, #0]
 8019ba6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8019ba8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019bac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019bb0:	4621      	mov	r1, r4
 8019bb2:	47a8      	blx	r5
 8019bb4:	b00d      	add	sp, #52	; 0x34
 8019bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019bbe:	e7e4      	b.n	8019b8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019bc0:	6803      	ldr	r3, [r0, #0]
 8019bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bc4:	4798      	blx	r3
 8019bc6:	4947      	ldr	r1, [pc, #284]	; (8019ce4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8019bc8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019bcc:	468a      	mov	sl, r1
 8019bce:	880b      	ldrh	r3, [r1, #0]
 8019bd0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019bd4:	fb03 5202 	mla	r2, r3, r2, r5
 8019bd8:	4373      	muls	r3, r6
 8019bda:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019bde:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019be2:	9307      	str	r3, [sp, #28]
 8019be4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019be8:	9306      	str	r3, [sp, #24]
 8019bea:	9b07      	ldr	r3, [sp, #28]
 8019bec:	4298      	cmp	r0, r3
 8019bee:	d270      	bcs.n	8019cd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019bf0:	4621      	mov	r1, r4
 8019bf2:	9b06      	ldr	r3, [sp, #24]
 8019bf4:	eb00 0b03 	add.w	fp, r0, r3
 8019bf8:	4558      	cmp	r0, fp
 8019bfa:	d25d      	bcs.n	8019cb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019bfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8019c00:	0e23      	lsrs	r3, r4, #24
 8019c02:	d014      	beq.n	8019c2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019c04:	2bff      	cmp	r3, #255	; 0xff
 8019c06:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8019c0a:	d112      	bne.n	8019c32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019c0c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019c10:	d10f      	bne.n	8019c32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019c12:	0963      	lsrs	r3, r4, #5
 8019c14:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8019c18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019c1c:	f02c 0c07 	bic.w	ip, ip, #7
 8019c20:	ea43 0c0c 	orr.w	ip, r3, ip
 8019c24:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019c28:	ea4c 0404 	orr.w	r4, ip, r4
 8019c2c:	8004      	strh	r4, [r0, #0]
 8019c2e:	3002      	adds	r0, #2
 8019c30:	e7e2      	b.n	8019bf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019c32:	fb09 f303 	mul.w	r3, r9, r3
 8019c36:	1c5a      	adds	r2, r3, #1
 8019c38:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8019c3c:	1212      	asrs	r2, r2, #8
 8019c3e:	b293      	uxth	r3, r2
 8019c40:	43d2      	mvns	r2, r2
 8019c42:	8807      	ldrh	r7, [r0, #0]
 8019c44:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8019c48:	fb1e fe03 	smulbb	lr, lr, r3
 8019c4c:	123e      	asrs	r6, r7, #8
 8019c4e:	fa5f fc8c 	uxtb.w	ip, ip
 8019c52:	b2e4      	uxtb	r4, r4
 8019c54:	fb1c fc03 	smulbb	ip, ip, r3
 8019c58:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019c5c:	fb14 f403 	smulbb	r4, r4, r3
 8019c60:	b2d2      	uxtb	r2, r2
 8019c62:	10fd      	asrs	r5, r7, #3
 8019c64:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019c68:	00ff      	lsls	r7, r7, #3
 8019c6a:	fb06 e602 	mla	r6, r6, r2, lr
 8019c6e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019c72:	b2ff      	uxtb	r7, r7
 8019c74:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019c78:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019c7c:	fb05 c502 	mla	r5, r5, r2, ip
 8019c80:	fb07 4702 	mla	r7, r7, r2, r4
 8019c84:	b2b6      	uxth	r6, r6
 8019c86:	f106 0e01 	add.w	lr, r6, #1
 8019c8a:	b2ad      	uxth	r5, r5
 8019c8c:	b2bf      	uxth	r7, r7
 8019c8e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019c92:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8019c96:	f105 0c01 	add.w	ip, r5, #1
 8019c9a:	1c7e      	adds	r6, r7, #1
 8019c9c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019ca0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019ca4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019ca8:	096d      	lsrs	r5, r5, #5
 8019caa:	ea46 060e 	orr.w	r6, r6, lr
 8019cae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019cb2:	432e      	orrs	r6, r5
 8019cb4:	8006      	strh	r6, [r0, #0]
 8019cb6:	e7ba      	b.n	8019c2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019cb8:	f8ba 3000 	ldrh.w	r3, [sl]
 8019cbc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8019cc0:	eba3 0308 	sub.w	r3, r3, r8
 8019cc4:	eba4 0408 	sub.w	r4, r4, r8
 8019cc8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019ccc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019cd0:	e78b      	b.n	8019bea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019cd2:	4b03      	ldr	r3, [pc, #12]	; (8019ce0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019cd4:	6818      	ldr	r0, [r3, #0]
 8019cd6:	6803      	ldr	r3, [r0, #0]
 8019cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cda:	4798      	blx	r3
 8019cdc:	e76a      	b.n	8019bb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019cde:	bf00      	nop
 8019ce0:	2002008c 	.word	0x2002008c
 8019ce4:	20020086 	.word	0x20020086

08019ce8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019cec:	b085      	sub	sp, #20
 8019cee:	466d      	mov	r5, sp
 8019cf0:	4616      	mov	r6, r2
 8019cf2:	460c      	mov	r4, r1
 8019cf4:	6810      	ldr	r0, [r2, #0]
 8019cf6:	6851      	ldr	r1, [r2, #4]
 8019cf8:	c503      	stmia	r5!, {r0, r1}
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	6859      	ldr	r1, [r3, #4]
 8019cfe:	c503      	stmia	r5!, {r0, r1}
 8019d00:	4668      	mov	r0, sp
 8019d02:	f7f9 fe3b 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d06:	4631      	mov	r1, r6
 8019d08:	a802      	add	r0, sp, #8
 8019d0a:	f7f9 fe7b 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019d0e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019d12:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019d16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019d1a:	4d28      	ldr	r5, [pc, #160]	; (8019dbc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8019d1c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019d20:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019d24:	f8bd 1000 	ldrh.w	r1, [sp]
 8019d28:	6828      	ldr	r0, [r5, #0]
 8019d2a:	440a      	add	r2, r1
 8019d2c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019d30:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019d34:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019d38:	4413      	add	r3, r2
 8019d3a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019d3e:	6803      	ldr	r3, [r0, #0]
 8019d40:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d46:	4798      	blx	r3
 8019d48:	4e1d      	ldr	r6, [pc, #116]	; (8019dc0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8019d4a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019d4e:	8833      	ldrh	r3, [r6, #0]
 8019d50:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019d54:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8019dc4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019d58:	fb03 1202 	mla	r2, r3, r2, r1
 8019d5c:	fb08 f303 	mul.w	r3, r8, r3
 8019d60:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019d64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d68:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8019d6c:	4298      	cmp	r0, r3
 8019d6e:	d21d      	bcs.n	8019dac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8019d70:	eb00 080c 	add.w	r8, r0, ip
 8019d74:	4540      	cmp	r0, r8
 8019d76:	d20f      	bcs.n	8019d98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8019d78:	f854 1b04 	ldr.w	r1, [r4], #4
 8019d7c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8019d80:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8019d84:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019d88:	ea42 0209 	orr.w	r2, r2, r9
 8019d8c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8019d90:	430a      	orrs	r2, r1
 8019d92:	f820 2b02 	strh.w	r2, [r0], #2
 8019d96:	e7ed      	b.n	8019d74 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8019d98:	8832      	ldrh	r2, [r6, #0]
 8019d9a:	1bd2      	subs	r2, r2, r7
 8019d9c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019da0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019da4:	1bd2      	subs	r2, r2, r7
 8019da6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8019daa:	e7df      	b.n	8019d6c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8019dac:	6828      	ldr	r0, [r5, #0]
 8019dae:	6803      	ldr	r3, [r0, #0]
 8019db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019db2:	4798      	blx	r3
 8019db4:	b005      	add	sp, #20
 8019db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dba:	bf00      	nop
 8019dbc:	2002008c 	.word	0x2002008c
 8019dc0:	20020086 	.word	0x20020086
 8019dc4:	fffff800 	.word	0xfffff800

08019dc8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8019dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dcc:	460e      	mov	r6, r1
 8019dce:	4604      	mov	r4, r0
 8019dd0:	461d      	mov	r5, r3
 8019dd2:	b08e      	sub	sp, #56	; 0x38
 8019dd4:	6808      	ldr	r0, [r1, #0]
 8019dd6:	6849      	ldr	r1, [r1, #4]
 8019dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8019dda:	c303      	stmia	r3!, {r0, r1}
 8019ddc:	6810      	ldr	r0, [r2, #0]
 8019dde:	6851      	ldr	r1, [r2, #4]
 8019de0:	ab0c      	add	r3, sp, #48	; 0x30
 8019de2:	c303      	stmia	r3!, {r0, r1}
 8019de4:	a80a      	add	r0, sp, #40	; 0x28
 8019de6:	f7f9 fdc9 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019dea:	4631      	mov	r1, r6
 8019dec:	a80c      	add	r0, sp, #48	; 0x30
 8019dee:	f7f9 fe09 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019df2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019df6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019dfa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019dfe:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019fb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019e02:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019e06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e0a:	440c      	add	r4, r1
 8019e0c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019e10:	f8d8 0000 	ldr.w	r0, [r8]
 8019e14:	440a      	add	r2, r1
 8019e16:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8019e1a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8019e1e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8019e22:	4413      	add	r3, r2
 8019e24:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019e28:	6803      	ldr	r3, [r0, #0]
 8019e2a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8019e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e30:	4798      	blx	r3
 8019e32:	2dff      	cmp	r5, #255	; 0xff
 8019e34:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8019fb4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8019e38:	d124      	bne.n	8019e84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8019e3a:	f010 0f01 	tst.w	r0, #1
 8019e3e:	f8d8 0000 	ldr.w	r0, [r8]
 8019e42:	d022      	beq.n	8019e8a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8019e44:	2100      	movs	r1, #0
 8019e46:	f04f 0e01 	mov.w	lr, #1
 8019e4a:	f8d0 c000 	ldr.w	ip, [r0]
 8019e4e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8019e52:	f8cd e018 	str.w	lr, [sp, #24]
 8019e56:	f8b9 e000 	ldrh.w	lr, [r9]
 8019e5a:	b2b6      	uxth	r6, r6
 8019e5c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019e60:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019e64:	b2bf      	uxth	r7, r7
 8019e66:	9102      	str	r1, [sp, #8]
 8019e68:	9503      	str	r5, [sp, #12]
 8019e6a:	9601      	str	r6, [sp, #4]
 8019e6c:	9700      	str	r7, [sp, #0]
 8019e6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019e72:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8019e76:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8019e7a:	4621      	mov	r1, r4
 8019e7c:	47a8      	blx	r5
 8019e7e:	b00e      	add	sp, #56	; 0x38
 8019e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e84:	f010 0f04 	tst.w	r0, #4
 8019e88:	e7d9      	b.n	8019e3e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8019e8a:	6803      	ldr	r3, [r0, #0]
 8019e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e8e:	4798      	blx	r3
 8019e90:	f8b9 3000 	ldrh.w	r3, [r9]
 8019e94:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8019e98:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019e9c:	435e      	muls	r6, r3
 8019e9e:	fb03 1202 	mla	r2, r3, r2, r1
 8019ea2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8019ea6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019eaa:	ebac 0c07 	sub.w	ip, ip, r7
 8019eae:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8019eb2:	2dff      	cmp	r5, #255	; 0xff
 8019eb4:	eba3 0707 	sub.w	r7, r3, r7
 8019eb8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019ebc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019ec0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8019ec4:	d049      	beq.n	8019f5a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8019ec6:	43eb      	mvns	r3, r5
 8019ec8:	fa1f f985 	uxth.w	r9, r5
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	42b0      	cmp	r0, r6
 8019ed0:	d266      	bcs.n	8019fa0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019ed2:	eb00 0a0e 	add.w	sl, r0, lr
 8019ed6:	4550      	cmp	r0, sl
 8019ed8:	4621      	mov	r1, r4
 8019eda:	f104 0403 	add.w	r4, r4, #3
 8019ede:	d25b      	bcs.n	8019f98 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019ee0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019ee4:	8802      	ldrh	r2, [r0, #0]
 8019ee6:	fb11 f109 	smulbb	r1, r1, r9
 8019eea:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019eee:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8019ef2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8019ef6:	fb08 1803 	mla	r8, r8, r3, r1
 8019efa:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8019efe:	10d5      	asrs	r5, r2, #3
 8019f00:	fb11 f109 	smulbb	r1, r1, r9
 8019f04:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019f08:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019f0c:	fb05 1503 	mla	r5, r5, r3, r1
 8019f10:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019f14:	00d2      	lsls	r2, r2, #3
 8019f16:	fb11 f109 	smulbb	r1, r1, r9
 8019f1a:	b2d2      	uxtb	r2, r2
 8019f1c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019f20:	fb02 1203 	mla	r2, r2, r3, r1
 8019f24:	fa1f f888 	uxth.w	r8, r8
 8019f28:	b292      	uxth	r2, r2
 8019f2a:	f108 0101 	add.w	r1, r8, #1
 8019f2e:	b2ad      	uxth	r5, r5
 8019f30:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019f34:	1c51      	adds	r1, r2, #1
 8019f36:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019f3a:	1c69      	adds	r1, r5, #1
 8019f3c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8019f40:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8019f44:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019f48:	096d      	lsrs	r5, r5, #5
 8019f4a:	ea42 0208 	orr.w	r2, r2, r8
 8019f4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019f52:	432a      	orrs	r2, r5
 8019f54:	f820 2b02 	strh.w	r2, [r0], #2
 8019f58:	e7bd      	b.n	8019ed6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8019f5a:	4a14      	ldr	r2, [pc, #80]	; (8019fac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8019f5c:	42b0      	cmp	r0, r6
 8019f5e:	d21f      	bcs.n	8019fa0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019f60:	eb00 050e 	add.w	r5, r0, lr
 8019f64:	42a8      	cmp	r0, r5
 8019f66:	4621      	mov	r1, r4
 8019f68:	f104 0403 	add.w	r4, r4, #3
 8019f6c:	d210      	bcs.n	8019f90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8019f6e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8019f72:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019f76:	00db      	lsls	r3, r3, #3
 8019f78:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8019f7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f80:	430b      	orrs	r3, r1
 8019f82:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019f86:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8019f8a:	f820 3b02 	strh.w	r3, [r0], #2
 8019f8e:	e7e9      	b.n	8019f64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8019f90:	4438      	add	r0, r7
 8019f92:	eb01 040c 	add.w	r4, r1, ip
 8019f96:	e7e1      	b.n	8019f5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8019f98:	4438      	add	r0, r7
 8019f9a:	eb01 040c 	add.w	r4, r1, ip
 8019f9e:	e796      	b.n	8019ece <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8019fa0:	4b03      	ldr	r3, [pc, #12]	; (8019fb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8019fa2:	6818      	ldr	r0, [r3, #0]
 8019fa4:	6803      	ldr	r3, [r0, #0]
 8019fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fa8:	4798      	blx	r3
 8019faa:	e768      	b.n	8019e7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8019fac:	fffff800 	.word	0xfffff800
 8019fb0:	2002008c 	.word	0x2002008c
 8019fb4:	20020086 	.word	0x20020086

08019fb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019fb8:	b4f0      	push	{r4, r5, r6, r7}
 8019fba:	4616      	mov	r6, r2
 8019fbc:	2e01      	cmp	r6, #1
 8019fbe:	461c      	mov	r4, r3
 8019fc0:	460d      	mov	r5, r1
 8019fc2:	9a04      	ldr	r2, [sp, #16]
 8019fc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019fc8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8019fcc:	d012      	beq.n	8019ff4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8019fce:	d303      	bcc.n	8019fd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8019fd0:	2e02      	cmp	r6, #2
 8019fd2:	d00a      	beq.n	8019fea <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8019fd4:	bcf0      	pop	{r4, r5, r6, r7}
 8019fd6:	4770      	bx	lr
 8019fd8:	6805      	ldr	r5, [r0, #0]
 8019fda:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8019fde:	68ed      	ldr	r5, [r5, #12]
 8019fe0:	4613      	mov	r3, r2
 8019fe2:	46ac      	mov	ip, r5
 8019fe4:	4622      	mov	r2, r4
 8019fe6:	bcf0      	pop	{r4, r5, r6, r7}
 8019fe8:	4760      	bx	ip
 8019fea:	4621      	mov	r1, r4
 8019fec:	4628      	mov	r0, r5
 8019fee:	bcf0      	pop	{r4, r5, r6, r7}
 8019ff0:	f7ff bd94 	b.w	8019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019ff4:	4621      	mov	r1, r4
 8019ff6:	4628      	mov	r0, r5
 8019ff8:	bcf0      	pop	{r4, r5, r6, r7}
 8019ffa:	f7ff bee5 	b.w	8019dc8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801a000 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a004:	4616      	mov	r6, r2
 801a006:	4681      	mov	r9, r0
 801a008:	b093      	sub	sp, #76	; 0x4c
 801a00a:	6810      	ldr	r0, [r2, #0]
 801a00c:	4688      	mov	r8, r1
 801a00e:	6851      	ldr	r1, [r2, #4]
 801a010:	ac0e      	add	r4, sp, #56	; 0x38
 801a012:	c403      	stmia	r4!, {r0, r1}
 801a014:	6818      	ldr	r0, [r3, #0]
 801a016:	6859      	ldr	r1, [r3, #4]
 801a018:	ac10      	add	r4, sp, #64	; 0x40
 801a01a:	c403      	stmia	r4!, {r0, r1}
 801a01c:	a80e      	add	r0, sp, #56	; 0x38
 801a01e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801a022:	f7f9 fcab 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a026:	4631      	mov	r1, r6
 801a028:	a810      	add	r0, sp, #64	; 0x40
 801a02a:	f7f9 fceb 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a02e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a032:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a036:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a03a:	4e62      	ldr	r6, [pc, #392]	; (801a1c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801a03c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a040:	4489      	add	r9, r1
 801a042:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a046:	6830      	ldr	r0, [r6, #0]
 801a048:	440a      	add	r2, r1
 801a04a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a04e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a052:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801a056:	4413      	add	r3, r2
 801a058:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a05c:	6803      	ldr	r3, [r0, #0]
 801a05e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a064:	4798      	blx	r3
 801a066:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a06a:	4f57      	ldr	r7, [pc, #348]	; (801a1c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801a06c:	6830      	ldr	r0, [r6, #0]
 801a06e:	d01d      	beq.n	801a0ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a070:	2200      	movs	r2, #0
 801a072:	6801      	ldr	r1, [r0, #0]
 801a074:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a078:	220b      	movs	r2, #11
 801a07a:	9207      	str	r2, [sp, #28]
 801a07c:	883a      	ldrh	r2, [r7, #0]
 801a07e:	b2a4      	uxth	r4, r4
 801a080:	9206      	str	r2, [sp, #24]
 801a082:	2201      	movs	r2, #1
 801a084:	e9cd a204 	strd	sl, r2, [sp, #16]
 801a088:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a08c:	b2ad      	uxth	r5, r5
 801a08e:	9203      	str	r2, [sp, #12]
 801a090:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a094:	9502      	str	r5, [sp, #8]
 801a096:	9200      	str	r2, [sp, #0]
 801a098:	9401      	str	r4, [sp, #4]
 801a09a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801a09c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a0a0:	4642      	mov	r2, r8
 801a0a2:	4649      	mov	r1, r9
 801a0a4:	47a0      	blx	r4
 801a0a6:	b013      	add	sp, #76	; 0x4c
 801a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ac:	6803      	ldr	r3, [r0, #0]
 801a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0b0:	4798      	blx	r3
 801a0b2:	f04f 0e04 	mov.w	lr, #4
 801a0b6:	883b      	ldrh	r3, [r7, #0]
 801a0b8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801a0bc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801a0c0:	435d      	muls	r5, r3
 801a0c2:	fb03 1202 	mla	r2, r3, r2, r1
 801a0c6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a0ca:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a0ce:	920c      	str	r2, [sp, #48]	; 0x30
 801a0d0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a0d4:	1b12      	subs	r2, r2, r4
 801a0d6:	920d      	str	r2, [sp, #52]	; 0x34
 801a0d8:	0062      	lsls	r2, r4, #1
 801a0da:	1b1c      	subs	r4, r3, r4
 801a0dc:	0063      	lsls	r3, r4, #1
 801a0de:	920a      	str	r2, [sp, #40]	; 0x28
 801a0e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0e4:	4298      	cmp	r0, r3
 801a0e6:	d266      	bcs.n	801a1b6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801a0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0ea:	eb00 0b03 	add.w	fp, r0, r3
 801a0ee:	4558      	cmp	r0, fp
 801a0f0:	d25c      	bcs.n	801a1ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a0f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a0f6:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a0fa:	f858 2003 	ldr.w	r2, [r8, r3]
 801a0fe:	0e11      	lsrs	r1, r2, #24
 801a100:	d012      	beq.n	801a128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a102:	29ff      	cmp	r1, #255	; 0xff
 801a104:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801a108:	d110      	bne.n	801a12c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a10a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a10e:	d10d      	bne.n	801a12c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a110:	0953      	lsrs	r3, r2, #5
 801a112:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801a116:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a11a:	f027 0707 	bic.w	r7, r7, #7
 801a11e:	431f      	orrs	r7, r3
 801a120:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a124:	433a      	orrs	r2, r7
 801a126:	8002      	strh	r2, [r0, #0]
 801a128:	3002      	adds	r0, #2
 801a12a:	e7e0      	b.n	801a0ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801a12c:	fb0a f101 	mul.w	r1, sl, r1
 801a130:	1c4b      	adds	r3, r1, #1
 801a132:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801a136:	121b      	asrs	r3, r3, #8
 801a138:	b299      	uxth	r1, r3
 801a13a:	43db      	mvns	r3, r3
 801a13c:	8806      	ldrh	r6, [r0, #0]
 801a13e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a142:	b2d2      	uxtb	r2, r2
 801a144:	fb1c fc01 	smulbb	ip, ip, r1
 801a148:	fb12 f201 	smulbb	r2, r2, r1
 801a14c:	1235      	asrs	r5, r6, #8
 801a14e:	10f4      	asrs	r4, r6, #3
 801a150:	00f6      	lsls	r6, r6, #3
 801a152:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a156:	b2f6      	uxtb	r6, r6
 801a158:	b2ff      	uxtb	r7, r7
 801a15a:	b2db      	uxtb	r3, r3
 801a15c:	fb17 f701 	smulbb	r7, r7, r1
 801a160:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801a164:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a168:	fb05 c503 	mla	r5, r5, r3, ip
 801a16c:	fb06 2203 	mla	r2, r6, r3, r2
 801a170:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801a174:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801a178:	fb04 7403 	mla	r4, r4, r3, r7
 801a17c:	b2ad      	uxth	r5, r5
 801a17e:	b292      	uxth	r2, r2
 801a180:	f105 0c01 	add.w	ip, r5, #1
 801a184:	1c57      	adds	r7, r2, #1
 801a186:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a18a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a18e:	b2a4      	uxth	r4, r4
 801a190:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a194:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a198:	433d      	orrs	r5, r7
 801a19a:	1c67      	adds	r7, r4, #1
 801a19c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a1a0:	0964      	lsrs	r4, r4, #5
 801a1a2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a1a6:	4325      	orrs	r5, r4
 801a1a8:	8005      	strh	r5, [r0, #0]
 801a1aa:	e7bd      	b.n	801a128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1ae:	4418      	add	r0, r3
 801a1b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1b2:	4499      	add	r9, r3
 801a1b4:	e795      	b.n	801a0e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801a1b6:	4b03      	ldr	r3, [pc, #12]	; (801a1c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801a1b8:	6818      	ldr	r0, [r3, #0]
 801a1ba:	6803      	ldr	r3, [r0, #0]
 801a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1be:	4798      	blx	r3
 801a1c0:	e771      	b.n	801a0a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801a1c2:	bf00      	nop
 801a1c4:	2002008c 	.word	0x2002008c
 801a1c8:	20020086 	.word	0x20020086

0801a1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d0:	b087      	sub	sp, #28
 801a1d2:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801a1d6:	4680      	mov	r8, r0
 801a1d8:	460d      	mov	r5, r1
 801a1da:	4614      	mov	r4, r2
 801a1dc:	2e00      	cmp	r6, #0
 801a1de:	f000 80b9 	beq.w	801a354 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801a1e2:	6810      	ldr	r0, [r2, #0]
 801a1e4:	6851      	ldr	r1, [r2, #4]
 801a1e6:	af02      	add	r7, sp, #8
 801a1e8:	c703      	stmia	r7!, {r0, r1}
 801a1ea:	6818      	ldr	r0, [r3, #0]
 801a1ec:	6859      	ldr	r1, [r3, #4]
 801a1ee:	af04      	add	r7, sp, #16
 801a1f0:	c703      	stmia	r7!, {r0, r1}
 801a1f2:	a802      	add	r0, sp, #8
 801a1f4:	f7f9 fbc2 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1f8:	4621      	mov	r1, r4
 801a1fa:	a804      	add	r0, sp, #16
 801a1fc:	f7f9 fc02 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a200:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a204:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a208:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a20c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a210:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a214:	eb08 0401 	add.w	r4, r8, r1
 801a218:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a21c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a220:	440a      	add	r2, r1
 801a222:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a226:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a22a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a22e:	4413      	add	r3, r2
 801a230:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a234:	4b49      	ldr	r3, [pc, #292]	; (801a35c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a236:	6818      	ldr	r0, [r3, #0]
 801a238:	6803      	ldr	r3, [r0, #0]
 801a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a23c:	4798      	blx	r3
 801a23e:	4b48      	ldr	r3, [pc, #288]	; (801a360 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801a240:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a244:	881a      	ldrh	r2, [r3, #0]
 801a246:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a24a:	2eff      	cmp	r6, #255	; 0xff
 801a24c:	fb02 c101 	mla	r1, r2, r1, ip
 801a250:	fb02 f207 	mul.w	r2, r2, r7
 801a254:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a258:	f105 0104 	add.w	r1, r5, #4
 801a25c:	461d      	mov	r5, r3
 801a25e:	d05a      	beq.n	801a316 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801a260:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801a264:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a268:	b2b6      	uxth	r6, r6
 801a26a:	fa1f fe8e 	uxth.w	lr, lr
 801a26e:	9301      	str	r3, [sp, #4]
 801a270:	4282      	cmp	r2, r0
 801a272:	d96a      	bls.n	801a34a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a274:	eb00 0b0a 	add.w	fp, r0, sl
 801a278:	4583      	cmp	fp, r0
 801a27a:	d940      	bls.n	801a2fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801a27c:	8805      	ldrh	r5, [r0, #0]
 801a27e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a282:	122f      	asrs	r7, r5, #8
 801a284:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a28c:	fb17 f70e 	smulbb	r7, r7, lr
 801a290:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a294:	00ed      	lsls	r5, r5, #3
 801a296:	b2ed      	uxtb	r5, r5
 801a298:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a29c:	fb15 f50e 	smulbb	r5, r5, lr
 801a2a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a2a4:	fb0c 7c06 	mla	ip, ip, r6, r7
 801a2a8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a2ac:	10df      	asrs	r7, r3, #3
 801a2ae:	00db      	lsls	r3, r3, #3
 801a2b0:	fb19 f90e 	smulbb	r9, r9, lr
 801a2b4:	b2db      	uxtb	r3, r3
 801a2b6:	fb03 5306 	mla	r3, r3, r6, r5
 801a2ba:	fa1f fc8c 	uxth.w	ip, ip
 801a2be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a2c2:	fb07 9706 	mla	r7, r7, r6, r9
 801a2c6:	f10c 0901 	add.w	r9, ip, #1
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a2d0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801a2d4:	f103 0c01 	add.w	ip, r3, #1
 801a2d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a2dc:	b2bf      	uxth	r7, r7
 801a2de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a2e2:	ea4c 0c09 	orr.w	ip, ip, r9
 801a2e6:	f107 0901 	add.w	r9, r7, #1
 801a2ea:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a2ee:	097f      	lsrs	r7, r7, #5
 801a2f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a2f4:	ea4c 0c07 	orr.w	ip, ip, r7
 801a2f8:	f820 cb02 	strh.w	ip, [r0], #2
 801a2fc:	e7bc      	b.n	801a278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801a2fe:	9b01      	ldr	r3, [sp, #4]
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	eba3 0308 	sub.w	r3, r3, r8
 801a306:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a30a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a30e:	eba3 0308 	sub.w	r3, r3, r8
 801a312:	441c      	add	r4, r3
 801a314:	e7ac      	b.n	801a270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801a316:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a31a:	4282      	cmp	r2, r0
 801a31c:	d915      	bls.n	801a34a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a31e:	eb00 060a 	add.w	r6, r0, sl
 801a322:	4286      	cmp	r6, r0
 801a324:	d906      	bls.n	801a334 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801a326:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a32a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a32e:	f820 3b02 	strh.w	r3, [r0], #2
 801a332:	e7f6      	b.n	801a322 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801a334:	882b      	ldrh	r3, [r5, #0]
 801a336:	eba3 0308 	sub.w	r3, r3, r8
 801a33a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a33e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a342:	eba3 0308 	sub.w	r3, r3, r8
 801a346:	441c      	add	r4, r3
 801a348:	e7e7      	b.n	801a31a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801a34a:	4b04      	ldr	r3, [pc, #16]	; (801a35c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a34c:	6818      	ldr	r0, [r3, #0]
 801a34e:	6803      	ldr	r3, [r0, #0]
 801a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a352:	4798      	blx	r3
 801a354:	b007      	add	sp, #28
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35a:	bf00      	nop
 801a35c:	2002008c 	.word	0x2002008c
 801a360:	20020086 	.word	0x20020086

0801a364 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a368:	b091      	sub	sp, #68	; 0x44
 801a36a:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801a36e:	4680      	mov	r8, r0
 801a370:	460f      	mov	r7, r1
 801a372:	4614      	mov	r4, r2
 801a374:	2d00      	cmp	r5, #0
 801a376:	d051      	beq.n	801a41c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a378:	6810      	ldr	r0, [r2, #0]
 801a37a:	6851      	ldr	r1, [r2, #4]
 801a37c:	ae0c      	add	r6, sp, #48	; 0x30
 801a37e:	c603      	stmia	r6!, {r0, r1}
 801a380:	6818      	ldr	r0, [r3, #0]
 801a382:	6859      	ldr	r1, [r3, #4]
 801a384:	ae0e      	add	r6, sp, #56	; 0x38
 801a386:	c603      	stmia	r6!, {r0, r1}
 801a388:	a80c      	add	r0, sp, #48	; 0x30
 801a38a:	f7f9 faf7 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a38e:	4621      	mov	r1, r4
 801a390:	a80e      	add	r0, sp, #56	; 0x38
 801a392:	f7f9 fb37 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a396:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a39a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a39e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a3a2:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801a580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801a3a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a3aa:	eb08 0401 	add.w	r4, r8, r1
 801a3ae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a3b2:	f8d9 0000 	ldr.w	r0, [r9]
 801a3b6:	440a      	add	r2, r1
 801a3b8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a3bc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a3c0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801a3c4:	4413      	add	r3, r2
 801a3c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a3ca:	6803      	ldr	r3, [r0, #0]
 801a3cc:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3d2:	4798      	blx	r3
 801a3d4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a3d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801a3dc:	f8d9 0000 	ldr.w	r0, [r9]
 801a3e0:	d01f      	beq.n	801a422 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	6801      	ldr	r1, [r0, #0]
 801a3e6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a3ea:	220b      	movs	r2, #11
 801a3ec:	9207      	str	r2, [sp, #28]
 801a3ee:	f8b8 2000 	ldrh.w	r2, [r8]
 801a3f2:	b2b6      	uxth	r6, r6
 801a3f4:	9206      	str	r2, [sp, #24]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801a3fc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a400:	9601      	str	r6, [sp, #4]
 801a402:	9203      	str	r2, [sp, #12]
 801a404:	fa1f f28a 	uxth.w	r2, sl
 801a408:	9202      	str	r2, [sp, #8]
 801a40a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a40e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a412:	9200      	str	r2, [sp, #0]
 801a414:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a416:	463a      	mov	r2, r7
 801a418:	4621      	mov	r1, r4
 801a41a:	47a8      	blx	r5
 801a41c:	b011      	add	sp, #68	; 0x44
 801a41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a422:	6803      	ldr	r3, [r0, #0]
 801a424:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801a428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a42a:	4798      	blx	r3
 801a42c:	f8b8 2000 	ldrh.w	r2, [r8]
 801a430:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a434:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801a438:	2dff      	cmp	r5, #255	; 0xff
 801a43a:	fb02 1303 	mla	r3, r2, r3, r1
 801a43e:	fb0a fa02 	mul.w	sl, sl, r2
 801a442:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a446:	d062      	beq.n	801a50e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801a448:	ea6f 0c05 	mvn.w	ip, r5
 801a44c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801a450:	930a      	str	r3, [sp, #40]	; 0x28
 801a452:	b2ad      	uxth	r5, r5
 801a454:	fa5f fc8c 	uxtb.w	ip, ip
 801a458:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801a45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a45e:	4298      	cmp	r0, r3
 801a460:	f080 8085 	bcs.w	801a56e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a464:	eb00 0b09 	add.w	fp, r0, r9
 801a468:	4558      	cmp	r0, fp
 801a46a:	d246      	bcs.n	801a4fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801a46c:	2303      	movs	r3, #3
 801a46e:	2204      	movs	r2, #4
 801a470:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a474:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801a478:	eb07 0a0e 	add.w	sl, r7, lr
 801a47c:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801a480:	8803      	ldrh	r3, [r0, #0]
 801a482:	fb18 f805 	smulbb	r8, r8, r5
 801a486:	1219      	asrs	r1, r3, #8
 801a488:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a48c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801a490:	fb01 810c 	mla	r1, r1, ip, r8
 801a494:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a498:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a49c:	fb1e fe05 	smulbb	lr, lr, r5
 801a4a0:	fb18 f805 	smulbb	r8, r8, r5
 801a4a4:	10da      	asrs	r2, r3, #3
 801a4a6:	00db      	lsls	r3, r3, #3
 801a4a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a4b2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a4b6:	fb02 820c 	mla	r2, r2, ip, r8
 801a4ba:	fb03 e30c 	mla	r3, r3, ip, lr
 801a4be:	b289      	uxth	r1, r1
 801a4c0:	b292      	uxth	r2, r2
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	f101 0801 	add.w	r8, r1, #1
 801a4c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a4cc:	f103 0e01 	add.w	lr, r3, #1
 801a4d0:	f102 0801 	add.w	r8, r2, #1
 801a4d4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a4d8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801a4dc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a4e0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a4e4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a4e8:	ea4e 0101 	orr.w	r1, lr, r1
 801a4ec:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a4f0:	ea41 0108 	orr.w	r1, r1, r8
 801a4f4:	f820 1b02 	strh.w	r1, [r0], #2
 801a4f8:	e7b6      	b.n	801a468 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801a4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4fc:	881b      	ldrh	r3, [r3, #0]
 801a4fe:	1b9b      	subs	r3, r3, r6
 801a500:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a504:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a508:	1b9b      	subs	r3, r3, r6
 801a50a:	441c      	add	r4, r3
 801a50c:	e7a6      	b.n	801a45c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a50e:	2203      	movs	r2, #3
 801a510:	2504      	movs	r5, #4
 801a512:	491a      	ldr	r1, [pc, #104]	; (801a57c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801a514:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801a518:	4550      	cmp	r0, sl
 801a51a:	d228      	bcs.n	801a56e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a51c:	eb00 0c09 	add.w	ip, r0, r9
 801a520:	4560      	cmp	r0, ip
 801a522:	4623      	mov	r3, r4
 801a524:	d219      	bcs.n	801a55a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801a526:	f893 e000 	ldrb.w	lr, [r3]
 801a52a:	3401      	adds	r4, #1
 801a52c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801a530:	eb07 0b0e 	add.w	fp, r7, lr
 801a534:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a538:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a53c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a540:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a544:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801a548:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a54c:	ea43 030b 	orr.w	r3, r3, fp
 801a550:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801a554:	f820 3b02 	strh.w	r3, [r0], #2
 801a558:	e7e2      	b.n	801a520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801a55a:	f8b8 3000 	ldrh.w	r3, [r8]
 801a55e:	1b9b      	subs	r3, r3, r6
 801a560:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a564:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a568:	1b9b      	subs	r3, r3, r6
 801a56a:	441c      	add	r4, r3
 801a56c:	e7d4      	b.n	801a518 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a56e:	4b04      	ldr	r3, [pc, #16]	; (801a580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801a570:	6818      	ldr	r0, [r3, #0]
 801a572:	6803      	ldr	r3, [r0, #0]
 801a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a576:	4798      	blx	r3
 801a578:	e750      	b.n	801a41c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a57a:	bf00      	nop
 801a57c:	fffff800 	.word	0xfffff800
 801a580:	2002008c 	.word	0x2002008c
 801a584:	20020086 	.word	0x20020086

0801a588 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a588:	b430      	push	{r4, r5}
 801a58a:	780d      	ldrb	r5, [r1, #0]
 801a58c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801a590:	2d01      	cmp	r5, #1
 801a592:	d00a      	beq.n	801a5aa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801a594:	d305      	bcc.n	801a5a2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801a596:	2d02      	cmp	r5, #2
 801a598:	d10b      	bne.n	801a5b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801a59a:	9402      	str	r4, [sp, #8]
 801a59c:	bc30      	pop	{r4, r5}
 801a59e:	f7ff be15 	b.w	801a1cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801a5a2:	9402      	str	r4, [sp, #8]
 801a5a4:	bc30      	pop	{r4, r5}
 801a5a6:	f7ff bd2b 	b.w	801a000 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a5aa:	9402      	str	r4, [sp, #8]
 801a5ac:	bc30      	pop	{r4, r5}
 801a5ae:	f7ff bed9 	b.w	801a364 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a5b2:	bc30      	pop	{r4, r5}
 801a5b4:	4770      	bx	lr
	...

0801a5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5bc:	4617      	mov	r7, r2
 801a5be:	4604      	mov	r4, r0
 801a5c0:	460e      	mov	r6, r1
 801a5c2:	b087      	sub	sp, #28
 801a5c4:	6810      	ldr	r0, [r2, #0]
 801a5c6:	6851      	ldr	r1, [r2, #4]
 801a5c8:	ad02      	add	r5, sp, #8
 801a5ca:	c503      	stmia	r5!, {r0, r1}
 801a5cc:	6818      	ldr	r0, [r3, #0]
 801a5ce:	6859      	ldr	r1, [r3, #4]
 801a5d0:	ad04      	add	r5, sp, #16
 801a5d2:	c503      	stmia	r5!, {r0, r1}
 801a5d4:	a802      	add	r0, sp, #8
 801a5d6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801a5da:	f7f9 f9cf 	bl	801397c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a5de:	4639      	mov	r1, r7
 801a5e0:	a804      	add	r0, sp, #16
 801a5e2:	f7f9 fa0f 	bl	8013a04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a5e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a5ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a5ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a5f2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a5f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a5fa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a5fe:	440e      	add	r6, r1
 801a600:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a604:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801a608:	440a      	add	r2, r1
 801a60a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a60e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a612:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801a800 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801a616:	4413      	add	r3, r2
 801a618:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a61c:	4b77      	ldr	r3, [pc, #476]	; (801a7fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a61e:	6818      	ldr	r0, [r3, #0]
 801a620:	6803      	ldr	r3, [r0, #0]
 801a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a624:	4798      	blx	r3
 801a626:	f8b9 b000 	ldrh.w	fp, [r9]
 801a62a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a62e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a632:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a636:	fb0b 2303 	mla	r3, fp, r3, r2
 801a63a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a63e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a642:	fb05 f50b 	mul.w	r5, r5, fp
 801a646:	9300      	str	r3, [sp, #0]
 801a648:	d069      	beq.n	801a71e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801a64a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801a64e:	4558      	cmp	r0, fp
 801a650:	f080 80cc 	bcs.w	801a7ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a654:	4631      	mov	r1, r6
 801a656:	9b00      	ldr	r3, [sp, #0]
 801a658:	18c3      	adds	r3, r0, r3
 801a65a:	9301      	str	r3, [sp, #4]
 801a65c:	9b01      	ldr	r3, [sp, #4]
 801a65e:	4298      	cmp	r0, r3
 801a660:	d24f      	bcs.n	801a702 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a666:	2a00      	cmp	r2, #0
 801a668:	d048      	beq.n	801a6fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a66a:	fb0a f202 	mul.w	r2, sl, r2
 801a66e:	1c53      	adds	r3, r2, #1
 801a670:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a674:	121b      	asrs	r3, r3, #8
 801a676:	d041      	beq.n	801a6fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a678:	b29e      	uxth	r6, r3
 801a67a:	43db      	mvns	r3, r3
 801a67c:	8802      	ldrh	r2, [r0, #0]
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	1215      	asrs	r5, r2, #8
 801a682:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a686:	f8b4 c000 	ldrh.w	ip, [r4]
 801a68a:	fb15 f503 	smulbb	r5, r5, r3
 801a68e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801a692:	00d2      	lsls	r2, r2, #3
 801a694:	b2d2      	uxtb	r2, r2
 801a696:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a69a:	fb12 f203 	smulbb	r2, r2, r3
 801a69e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6a2:	fb07 5706 	mla	r7, r7, r6, r5
 801a6a6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a6aa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a6ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a6b2:	fb1e fe03 	smulbb	lr, lr, r3
 801a6b6:	fa5f fc8c 	uxtb.w	ip, ip
 801a6ba:	fb0c 2c06 	mla	ip, ip, r6, r2
 801a6be:	b2bf      	uxth	r7, r7
 801a6c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a6c4:	fb05 e506 	mla	r5, r5, r6, lr
 801a6c8:	f107 0e01 	add.w	lr, r7, #1
 801a6cc:	fa1f fc8c 	uxth.w	ip, ip
 801a6d0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a6d4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801a6d8:	f10c 0701 	add.w	r7, ip, #1
 801a6dc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a6e0:	b2ad      	uxth	r5, r5
 801a6e2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a6e6:	ea47 070e 	orr.w	r7, r7, lr
 801a6ea:	f105 0e01 	add.w	lr, r5, #1
 801a6ee:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801a6f2:	096d      	lsrs	r5, r5, #5
 801a6f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a6f8:	432f      	orrs	r7, r5
 801a6fa:	8007      	strh	r7, [r0, #0]
 801a6fc:	3002      	adds	r0, #2
 801a6fe:	3402      	adds	r4, #2
 801a700:	e7ac      	b.n	801a65c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801a702:	f8b9 3000 	ldrh.w	r3, [r9]
 801a706:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a70a:	eba3 0308 	sub.w	r3, r3, r8
 801a70e:	eba6 0608 	sub.w	r6, r6, r8
 801a712:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a716:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a71a:	440e      	add	r6, r1
 801a71c:	e797      	b.n	801a64e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801a71e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a722:	42a8      	cmp	r0, r5
 801a724:	d262      	bcs.n	801a7ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a726:	4631      	mov	r1, r6
 801a728:	9b00      	ldr	r3, [sp, #0]
 801a72a:	eb00 0b03 	add.w	fp, r0, r3
 801a72e:	4558      	cmp	r0, fp
 801a730:	d24e      	bcs.n	801a7d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801a732:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a736:	b12b      	cbz	r3, 801a744 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a738:	2bff      	cmp	r3, #255	; 0xff
 801a73a:	f8b4 e000 	ldrh.w	lr, [r4]
 801a73e:	d104      	bne.n	801a74a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801a740:	f8a0 e000 	strh.w	lr, [r0]
 801a744:	3002      	adds	r0, #2
 801a746:	3402      	adds	r4, #2
 801a748:	e7f1      	b.n	801a72e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801a74a:	b29f      	uxth	r7, r3
 801a74c:	43db      	mvns	r3, r3
 801a74e:	8802      	ldrh	r2, [r0, #0]
 801a750:	b2db      	uxtb	r3, r3
 801a752:	1216      	asrs	r6, r2, #8
 801a754:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a758:	fb16 f603 	smulbb	r6, r6, r3
 801a75c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801a760:	00d2      	lsls	r2, r2, #3
 801a762:	b2d2      	uxtb	r2, r2
 801a764:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a768:	fb1a fa03 	smulbb	sl, sl, r3
 801a76c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a770:	fb12 f303 	smulbb	r3, r2, r3
 801a774:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a778:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a77c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a780:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a784:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a788:	fa5f fe8e 	uxtb.w	lr, lr
 801a78c:	fb06 a607 	mla	r6, r6, r7, sl
 801a790:	fb0e 3307 	mla	r3, lr, r7, r3
 801a794:	fa1f fc8c 	uxth.w	ip, ip
 801a798:	f10c 0201 	add.w	r2, ip, #1
 801a79c:	b2b6      	uxth	r6, r6
 801a79e:	b29b      	uxth	r3, r3
 801a7a0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a7a4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801a7a8:	f106 0a01 	add.w	sl, r6, #1
 801a7ac:	f103 0c01 	add.w	ip, r3, #1
 801a7b0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a7b4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801a7b8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a7bc:	0976      	lsrs	r6, r6, #5
 801a7be:	ea4c 0c02 	orr.w	ip, ip, r2
 801a7c2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a7c6:	ea4c 0c06 	orr.w	ip, ip, r6
 801a7ca:	f8a0 c000 	strh.w	ip, [r0]
 801a7ce:	e7b9      	b.n	801a744 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a7d0:	f8b9 3000 	ldrh.w	r3, [r9]
 801a7d4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a7d8:	eba3 0308 	sub.w	r3, r3, r8
 801a7dc:	eba6 0608 	sub.w	r6, r6, r8
 801a7e0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a7e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a7e8:	440e      	add	r6, r1
 801a7ea:	e79a      	b.n	801a722 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801a7ec:	4b03      	ldr	r3, [pc, #12]	; (801a7fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a7ee:	6818      	ldr	r0, [r3, #0]
 801a7f0:	6803      	ldr	r3, [r0, #0]
 801a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7f4:	4798      	blx	r3
 801a7f6:	b007      	add	sp, #28
 801a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7fc:	2002008c 	.word	0x2002008c
 801a800:	20020086 	.word	0x20020086

0801a804 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a808:	b089      	sub	sp, #36	; 0x24
 801a80a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801a80e:	4682      	mov	sl, r0
 801a810:	460f      	mov	r7, r1
 801a812:	4691      	mov	r9, r2
 801a814:	4698      	mov	r8, r3
 801a816:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a818:	2e00      	cmp	r6, #0
 801a81a:	d036      	beq.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a81c:	4608      	mov	r0, r1
 801a81e:	f7fc f86d 	bl	80168fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a822:	4605      	mov	r5, r0
 801a824:	4638      	mov	r0, r7
 801a826:	f7fc f89d 	bl	8016964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a82a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a82e:	4638      	mov	r0, r7
 801a830:	f8ad 9008 	strh.w	r9, [sp, #8]
 801a834:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a838:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a83c:	f7fc f94a 	bl	8016ad4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a840:	4605      	mov	r5, r0
 801a842:	4638      	mov	r0, r7
 801a844:	f7fc f976 	bl	8016b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a848:	4681      	mov	r9, r0
 801a84a:	4638      	mov	r0, r7
 801a84c:	f7fc f9c6 	bl	8016bdc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a850:	280b      	cmp	r0, #11
 801a852:	d81a      	bhi.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a854:	e8df f000 	tbb	[pc, r0]
 801a858:	1906aebd 	.word	0x1906aebd
 801a85c:	19191919 	.word	0x19191919
 801a860:	b5191919 	.word	0xb5191919
 801a864:	4bb0      	ldr	r3, [pc, #704]	; (801ab28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801a866:	6818      	ldr	r0, [r3, #0]
 801a868:	6803      	ldr	r3, [r0, #0]
 801a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a86c:	4798      	blx	r3
 801a86e:	2eff      	cmp	r6, #255	; 0xff
 801a870:	d121      	bne.n	801a8b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801a872:	0683      	lsls	r3, r0, #26
 801a874:	d41f      	bmi.n	801a8b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801a876:	4638      	mov	r0, r7
 801a878:	f7fc f8f4 	bl	8016a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a87c:	b940      	cbnz	r0, 801a890 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801a87e:	4623      	mov	r3, r4
 801a880:	aa02      	add	r2, sp, #8
 801a882:	4629      	mov	r1, r5
 801a884:	4650      	mov	r0, sl
 801a886:	f7ff fa2f 	bl	8019ce8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a88a:	b009      	add	sp, #36	; 0x24
 801a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a890:	f10d 0818 	add.w	r8, sp, #24
 801a894:	4639      	mov	r1, r7
 801a896:	4640      	mov	r0, r8
 801a898:	af04      	add	r7, sp, #16
 801a89a:	f7fc f897 	bl	80169cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a89e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a8a2:	e887 0003 	stmia.w	r7, {r0, r1}
 801a8a6:	4638      	mov	r0, r7
 801a8a8:	4621      	mov	r1, r4
 801a8aa:	f7f6 fa7d 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 801a8ae:	4638      	mov	r0, r7
 801a8b0:	f7f6 fabd 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8b4:	b130      	cbz	r0, 801a8c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801a8b6:	4633      	mov	r3, r6
 801a8b8:	4622      	mov	r2, r4
 801a8ba:	a902      	add	r1, sp, #8
 801a8bc:	4628      	mov	r0, r5
 801a8be:	f7ff f92d 	bl	8019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a8c2:	e7e2      	b.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a8c4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a8c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	dd12      	ble.n	801a8f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801a8d0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a8d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a8d8:	1a9b      	subs	r3, r3, r2
 801a8da:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a8de:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a8e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a8e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a8ea:	4642      	mov	r2, r8
 801a8ec:	4633      	mov	r3, r6
 801a8ee:	a902      	add	r1, sp, #8
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	f7ff f913 	bl	8019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a8f6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a8fa:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a8fe:	4293      	cmp	r3, r2
 801a900:	dd12      	ble.n	801a928 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801a902:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a906:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a90a:	1a9b      	subs	r3, r3, r2
 801a90c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a910:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a914:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a918:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a91c:	23ff      	movs	r3, #255	; 0xff
 801a91e:	4642      	mov	r2, r8
 801a920:	a902      	add	r1, sp, #8
 801a922:	4628      	mov	r0, r5
 801a924:	f7ff f8fa 	bl	8019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a928:	463b      	mov	r3, r7
 801a92a:	aa02      	add	r2, sp, #8
 801a92c:	4629      	mov	r1, r5
 801a92e:	4650      	mov	r0, sl
 801a930:	f7ff f9da 	bl	8019ce8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a934:	88a2      	ldrh	r2, [r4, #4]
 801a936:	8823      	ldrh	r3, [r4, #0]
 801a938:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a93c:	4413      	add	r3, r2
 801a93e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a942:	b29b      	uxth	r3, r3
 801a944:	440a      	add	r2, r1
 801a946:	b292      	uxth	r2, r2
 801a948:	b211      	sxth	r1, r2
 801a94a:	b218      	sxth	r0, r3
 801a94c:	4288      	cmp	r0, r1
 801a94e:	dd12      	ble.n	801a976 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801a950:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a954:	1a9b      	subs	r3, r3, r2
 801a956:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801a95a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a95e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a962:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a966:	23ff      	movs	r3, #255	; 0xff
 801a968:	4642      	mov	r2, r8
 801a96a:	a902      	add	r1, sp, #8
 801a96c:	4628      	mov	r0, r5
 801a96e:	f8ad 601a 	strh.w	r6, [sp, #26]
 801a972:	f7ff f8d3 	bl	8019b1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a976:	88e2      	ldrh	r2, [r4, #6]
 801a978:	8863      	ldrh	r3, [r4, #2]
 801a97a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801a97e:	4413      	add	r3, r2
 801a980:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801a984:	b29b      	uxth	r3, r3
 801a986:	440a      	add	r2, r1
 801a988:	b292      	uxth	r2, r2
 801a98a:	b211      	sxth	r1, r2
 801a98c:	b218      	sxth	r0, r3
 801a98e:	4288      	cmp	r0, r1
 801a990:	f77f af7b 	ble.w	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a994:	f9b4 6000 	ldrsh.w	r6, [r4]
 801a998:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a99c:	1a9b      	subs	r3, r3, r2
 801a99e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a9a2:	f8ad 6018 	strh.w	r6, [sp, #24]
 801a9a6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a9aa:	f8ad 001c 	strh.w	r0, [sp, #28]
 801a9ae:	23ff      	movs	r3, #255	; 0xff
 801a9b0:	4642      	mov	r2, r8
 801a9b2:	e782      	b.n	801a8ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801a9b4:	4633      	mov	r3, r6
 801a9b6:	4622      	mov	r2, r4
 801a9b8:	a902      	add	r1, sp, #8
 801a9ba:	4628      	mov	r0, r5
 801a9bc:	f7ff fa04 	bl	8019dc8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a9c0:	e763      	b.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a9c2:	9600      	str	r6, [sp, #0]
 801a9c4:	4623      	mov	r3, r4
 801a9c6:	aa02      	add	r2, sp, #8
 801a9c8:	4649      	mov	r1, r9
 801a9ca:	4628      	mov	r0, r5
 801a9cc:	f7ff fddc 	bl	801a588 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a9d0:	e75b      	b.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a9d2:	4638      	mov	r0, r7
 801a9d4:	f7fc f846 	bl	8016a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a9d8:	b950      	cbnz	r0, 801a9f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801a9da:	e9cd 6000 	strd	r6, r0, [sp]
 801a9de:	f8da 3000 	ldr.w	r3, [sl]
 801a9e2:	aa02      	add	r2, sp, #8
 801a9e4:	68de      	ldr	r6, [r3, #12]
 801a9e6:	4629      	mov	r1, r5
 801a9e8:	4623      	mov	r3, r4
 801a9ea:	4650      	mov	r0, sl
 801a9ec:	47b0      	blx	r6
 801a9ee:	e74c      	b.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a9f0:	f10d 0818 	add.w	r8, sp, #24
 801a9f4:	4639      	mov	r1, r7
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	af04      	add	r7, sp, #16
 801a9fa:	f7fb ffe7 	bl	80169cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a9fe:	e898 0003 	ldmia.w	r8, {r0, r1}
 801aa02:	e887 0003 	stmia.w	r7, {r0, r1}
 801aa06:	4638      	mov	r0, r7
 801aa08:	4621      	mov	r1, r4
 801aa0a:	f7f6 f9cd 	bl	8010da8 <_ZN8touchgfx4RectaNERKS0_>
 801aa0e:	4638      	mov	r0, r7
 801aa10:	f7f6 fa0d 	bl	8010e2e <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa14:	b138      	cbz	r0, 801aa26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801aa16:	4623      	mov	r3, r4
 801aa18:	9600      	str	r6, [sp, #0]
 801aa1a:	aa02      	add	r2, sp, #8
 801aa1c:	4649      	mov	r1, r9
 801aa1e:	4628      	mov	r0, r5
 801aa20:	f7ff fdca 	bl	801a5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aa24:	e731      	b.n	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801aa26:	e9cd 6000 	strd	r6, r0, [sp]
 801aa2a:	f8da 3000 	ldr.w	r3, [sl]
 801aa2e:	aa02      	add	r2, sp, #8
 801aa30:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801aa34:	4629      	mov	r1, r5
 801aa36:	463b      	mov	r3, r7
 801aa38:	4650      	mov	r0, sl
 801aa3a:	47d8      	blx	fp
 801aa3c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aa40:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aa44:	4293      	cmp	r3, r2
 801aa46:	dd13      	ble.n	801aa70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801aa48:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aa4c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aa50:	1a9b      	subs	r3, r3, r2
 801aa52:	f8ad 0018 	strh.w	r0, [sp, #24]
 801aa56:	f8ad 201a 	strh.w	r2, [sp, #26]
 801aa5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aa5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa62:	9600      	str	r6, [sp, #0]
 801aa64:	4643      	mov	r3, r8
 801aa66:	aa02      	add	r2, sp, #8
 801aa68:	4649      	mov	r1, r9
 801aa6a:	4628      	mov	r0, r5
 801aa6c:	f7ff fda4 	bl	801a5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aa70:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801aa74:	f9b4 2000 	ldrsh.w	r2, [r4]
 801aa78:	4293      	cmp	r3, r2
 801aa7a:	dd13      	ble.n	801aaa4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801aa7c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801aa80:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801aa84:	1a9b      	subs	r3, r3, r2
 801aa86:	f8ad 2018 	strh.w	r2, [sp, #24]
 801aa8a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801aa8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aa92:	f8ad 101e 	strh.w	r1, [sp, #30]
 801aa96:	9600      	str	r6, [sp, #0]
 801aa98:	4643      	mov	r3, r8
 801aa9a:	aa02      	add	r2, sp, #8
 801aa9c:	4649      	mov	r1, r9
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	f7ff fd8a 	bl	801a5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aaa4:	88a2      	ldrh	r2, [r4, #4]
 801aaa6:	8823      	ldrh	r3, [r4, #0]
 801aaa8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801aaac:	4413      	add	r3, r2
 801aaae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	440a      	add	r2, r1
 801aab6:	b292      	uxth	r2, r2
 801aab8:	b211      	sxth	r1, r2
 801aaba:	b218      	sxth	r0, r3
 801aabc:	4288      	cmp	r0, r1
 801aabe:	dd13      	ble.n	801aae8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801aac0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801aac4:	1a9b      	subs	r3, r3, r2
 801aac6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801aaca:	f8ad 1018 	strh.w	r1, [sp, #24]
 801aace:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aad2:	f8ad 001e 	strh.w	r0, [sp, #30]
 801aad6:	9600      	str	r6, [sp, #0]
 801aad8:	4643      	mov	r3, r8
 801aada:	aa02      	add	r2, sp, #8
 801aadc:	4649      	mov	r1, r9
 801aade:	4628      	mov	r0, r5
 801aae0:	f8ad 701a 	strh.w	r7, [sp, #26]
 801aae4:	f7ff fd68 	bl	801a5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aae8:	88e2      	ldrh	r2, [r4, #6]
 801aaea:	8863      	ldrh	r3, [r4, #2]
 801aaec:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801aaf0:	4413      	add	r3, r2
 801aaf2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	440a      	add	r2, r1
 801aafa:	b292      	uxth	r2, r2
 801aafc:	b211      	sxth	r1, r2
 801aafe:	b218      	sxth	r0, r3
 801ab00:	4288      	cmp	r0, r1
 801ab02:	f77f aec2 	ble.w	801a88a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab06:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ab0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ab0e:	1a9b      	subs	r3, r3, r2
 801ab10:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ab14:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ab18:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ab1c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ab20:	9600      	str	r6, [sp, #0]
 801ab22:	4643      	mov	r3, r8
 801ab24:	e779      	b.n	801aa1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801ab26:	bf00      	nop
 801ab28:	2002008c 	.word	0x2002008c

0801ab2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ab2c:	b180      	cbz	r0, 801ab50 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ab2e:	2903      	cmp	r1, #3
 801ab30:	d81c      	bhi.n	801ab6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ab32:	e8df f001 	tbb	[pc, r1]
 801ab36:	1d02      	.short	0x1d02
 801ab38:	1f08      	.short	0x1f08
 801ab3a:	4b10      	ldr	r3, [pc, #64]	; (801ab7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ab3c:	8818      	ldrh	r0, [r3, #0]
 801ab3e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ab42:	4240      	negs	r0, r0
 801ab44:	4770      	bx	lr
 801ab46:	4b0d      	ldr	r3, [pc, #52]	; (801ab7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ab48:	8818      	ldrh	r0, [r3, #0]
 801ab4a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ab4e:	4770      	bx	lr
 801ab50:	2903      	cmp	r1, #3
 801ab52:	d80b      	bhi.n	801ab6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ab54:	a301      	add	r3, pc, #4	; (adr r3, 801ab5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801ab56:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ab5a:	bf00      	nop
 801ab5c:	0801ab71 	.word	0x0801ab71
 801ab60:	0801ab47 	.word	0x0801ab47
 801ab64:	0801ab75 	.word	0x0801ab75
 801ab68:	0801ab3b 	.word	0x0801ab3b
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	4770      	bx	lr
 801ab70:	2001      	movs	r0, #1
 801ab72:	4770      	bx	lr
 801ab74:	f04f 30ff 	mov.w	r0, #4294967295
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	20020086 	.word	0x20020086

0801ab80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ab80:	b180      	cbz	r0, 801aba4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801ab82:	2903      	cmp	r1, #3
 801ab84:	d81c      	bhi.n	801abc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ab86:	e8df f001 	tbb	[pc, r1]
 801ab8a:	021d      	.short	0x021d
 801ab8c:	071f      	.short	0x071f
 801ab8e:	4b10      	ldr	r3, [pc, #64]	; (801abd0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ab90:	8818      	ldrh	r0, [r3, #0]
 801ab92:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ab96:	4770      	bx	lr
 801ab98:	4b0d      	ldr	r3, [pc, #52]	; (801abd0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ab9a:	8818      	ldrh	r0, [r3, #0]
 801ab9c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aba0:	4240      	negs	r0, r0
 801aba2:	4770      	bx	lr
 801aba4:	2903      	cmp	r1, #3
 801aba6:	d80b      	bhi.n	801abc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801aba8:	a301      	add	r3, pc, #4	; (adr r3, 801abb0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801abaa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801abae:	bf00      	nop
 801abb0:	0801ab8f 	.word	0x0801ab8f
 801abb4:	0801abc9 	.word	0x0801abc9
 801abb8:	0801ab99 	.word	0x0801ab99
 801abbc:	0801abc5 	.word	0x0801abc5
 801abc0:	2000      	movs	r0, #0
 801abc2:	4770      	bx	lr
 801abc4:	2001      	movs	r0, #1
 801abc6:	4770      	bx	lr
 801abc8:	f04f 30ff 	mov.w	r0, #4294967295
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	20020086 	.word	0x20020086

0801abd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd8:	b099      	sub	sp, #100	; 0x64
 801abda:	910b      	str	r1, [sp, #44]	; 0x2c
 801abdc:	a914      	add	r1, sp, #80	; 0x50
 801abde:	e881 000c 	stmia.w	r1, {r2, r3}
 801abe2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801abe6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801abea:	f891 900d 	ldrb.w	r9, [r1, #13]
 801abee:	9309      	str	r3, [sp, #36]	; 0x24
 801abf0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801abf4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801abf8:	9310      	str	r3, [sp, #64]	; 0x40
 801abfa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801abfe:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801ac02:	930c      	str	r3, [sp, #48]	; 0x30
 801ac04:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801ac08:	798f      	ldrb	r7, [r1, #6]
 801ac0a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801ac0e:	431f      	orrs	r7, r3
 801ac10:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801ac14:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801ac18:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801ac1c:	f000 8194 	beq.w	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ac20:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ac24:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801ac28:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ac2c:	ea59 0903 	orrs.w	r9, r9, r3
 801ac30:	f000 818a 	beq.w	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ac34:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ac38:	b29b      	uxth	r3, r3
 801ac3a:	2d00      	cmp	r5, #0
 801ac3c:	f000 812f 	beq.w	801ae9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801ac40:	1aed      	subs	r5, r5, r3
 801ac42:	b2ad      	uxth	r5, r5
 801ac44:	042b      	lsls	r3, r5, #16
 801ac46:	d502      	bpl.n	801ac4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ac48:	1b64      	subs	r4, r4, r5
 801ac4a:	2500      	movs	r5, #0
 801ac4c:	b224      	sxth	r4, r4
 801ac4e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ac52:	a814      	add	r0, sp, #80	; 0x50
 801ac54:	428c      	cmp	r4, r1
 801ac56:	b28b      	uxth	r3, r1
 801ac58:	bfbf      	itttt	lt
 801ac5a:	18ed      	addlt	r5, r5, r3
 801ac5c:	1b2c      	sublt	r4, r5, r4
 801ac5e:	b2a5      	uxthlt	r5, r4
 801ac60:	460c      	movlt	r4, r1
 801ac62:	8891      	ldrh	r1, [r2, #4]
 801ac64:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801ac68:	440b      	add	r3, r1
 801ac6a:	b21b      	sxth	r3, r3
 801ac6c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ac6e:	88d3      	ldrh	r3, [r2, #6]
 801ac70:	8852      	ldrh	r2, [r2, #2]
 801ac72:	4621      	mov	r1, r4
 801ac74:	4413      	add	r3, r2
 801ac76:	b21b      	sxth	r3, r3
 801ac78:	930d      	str	r3, [sp, #52]	; 0x34
 801ac7a:	4bbd      	ldr	r3, [pc, #756]	; (801af70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801ac7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac7e:	f893 b000 	ldrb.w	fp, [r3]
 801ac82:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ac86:	f1dc 0300 	rsbs	r3, ip, #0
 801ac8a:	eb43 030c 	adc.w	r3, r3, ip
 801ac8e:	930e      	str	r3, [sp, #56]	; 0x38
 801ac90:	4653      	mov	r3, sl
 801ac92:	f7f8 fced 	bl	8013670 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ac96:	4621      	mov	r1, r4
 801ac98:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ac9c:	4653      	mov	r3, sl
 801ac9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aca0:	a814      	add	r0, sp, #80	; 0x50
 801aca2:	f7f8 fd02 	bl	80136aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801aca6:	a918      	add	r1, sp, #96	; 0x60
 801aca8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801acac:	a817      	add	r0, sp, #92	; 0x5c
 801acae:	f7f8 fe23 	bl	80138f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801acb2:	f1ba 0f00 	cmp.w	sl, #0
 801acb6:	f040 80f5 	bne.w	801aea4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801acba:	f1bb 0f01 	cmp.w	fp, #1
 801acbe:	f040 80f9 	bne.w	801aeb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801acc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	f040 8144 	bne.w	801af52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801acca:	b2ba      	uxth	r2, r7
 801accc:	b905      	cbnz	r5, 801acd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801acce:	b16e      	cbz	r6, 801acec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801acd0:	4631      	mov	r1, r6
 801acd2:	fb06 5302 	mla	r3, r6, r2, r5
 801acd6:	fb08 f303 	mul.w	r3, r8, r3
 801acda:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801acdc:	f003 0607 	and.w	r6, r3, #7
 801ace0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801ace4:	9328      	str	r3, [sp, #160]	; 0xa0
 801ace6:	eba9 0301 	sub.w	r3, r9, r1
 801acea:	930a      	str	r3, [sp, #40]	; 0x28
 801acec:	4651      	mov	r1, sl
 801acee:	980e      	ldr	r0, [sp, #56]	; 0x38
 801acf0:	f7ff ff1c 	bl	801ab2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801acf4:	4681      	mov	r9, r0
 801acf6:	980e      	ldr	r0, [sp, #56]	; 0x38
 801acf8:	f7ff ff42 	bl	801ab80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801acfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad00:	4683      	mov	fp, r0
 801ad02:	eba3 0a01 	sub.w	sl, r3, r1
 801ad06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad08:	459a      	cmp	sl, r3
 801ad0a:	bfa8      	it	ge
 801ad0c:	469a      	movge	sl, r3
 801ad0e:	f1ba 0f00 	cmp.w	sl, #0
 801ad12:	f340 8119 	ble.w	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ad16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad18:	1b64      	subs	r4, r4, r5
 801ad1a:	1b1c      	subs	r4, r3, r4
 801ad1c:	42bc      	cmp	r4, r7
 801ad1e:	bfd4      	ite	le
 801ad20:	ebc5 0504 	rsble	r5, r5, r4
 801ad24:	ebc5 0507 	rsbgt	r5, r5, r7
 801ad28:	2d00      	cmp	r5, #0
 801ad2a:	f340 810d 	ble.w	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ad2e:	1b52      	subs	r2, r2, r5
 801ad30:	fb08 f302 	mul.w	r3, r8, r2
 801ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	f040 8115 	bne.w	801af68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801ad3e:	4b8d      	ldr	r3, [pc, #564]	; (801af74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801ad40:	6818      	ldr	r0, [r3, #0]
 801ad42:	6803      	ldr	r3, [r0, #0]
 801ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad46:	4798      	blx	r3
 801ad48:	2301      	movs	r3, #1
 801ad4a:	fa03 f308 	lsl.w	r3, r3, r8
 801ad4e:	4a8a      	ldr	r2, [pc, #552]	; (801af78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801ad50:	3b01      	subs	r3, #1
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	8811      	ldrh	r1, [r2, #0]
 801ad56:	930e      	str	r3, [sp, #56]	; 0x38
 801ad58:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ad5c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ad60:	fb01 2303 	mla	r3, r1, r3, r2
 801ad64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad68:	930a      	str	r3, [sp, #40]	; 0x28
 801ad6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad6c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ad70:	9313      	str	r3, [sp, #76]	; 0x4c
 801ad72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad74:	0a19      	lsrs	r1, r3, #8
 801ad76:	b2cb      	uxtb	r3, r1
 801ad78:	9312      	str	r3, [sp, #72]	; 0x48
 801ad7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad7c:	b2db      	uxtb	r3, r3
 801ad7e:	9311      	str	r3, [sp, #68]	; 0x44
 801ad80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad82:	095a      	lsrs	r2, r3, #5
 801ad84:	4b7d      	ldr	r3, [pc, #500]	; (801af7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801ad86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ad8a:	400b      	ands	r3, r1
 801ad8c:	4313      	orrs	r3, r2
 801ad8e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ad90:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ad94:	4313      	orrs	r3, r2
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	9310      	str	r3, [sp, #64]	; 0x40
 801ad9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ad9c:	781a      	ldrb	r2, [r3, #0]
 801ad9e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801ada2:	fb05 b919 	mls	r9, r5, r9, fp
 801ada6:	fb03 fb05 	mul.w	fp, r3, r5
 801adaa:	4132      	asrs	r2, r6
 801adac:	b2d2      	uxtb	r2, r2
 801adae:	930d      	str	r3, [sp, #52]	; 0x34
 801adb0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801adb4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801adb8:	f0c0 80f3 	bcc.w	801afa2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801adbc:	46ae      	mov	lr, r5
 801adbe:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801adc2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801adc6:	f0c0 80db 	bcc.w	801af80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801adca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adcc:	4013      	ands	r3, r2
 801adce:	d055      	beq.n	801ae7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801add0:	20ff      	movs	r0, #255	; 0xff
 801add2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801add4:	fb90 f1f1 	sdiv	r1, r0, r1
 801add8:	434b      	muls	r3, r1
 801adda:	2bfe      	cmp	r3, #254	; 0xfe
 801addc:	dd03      	ble.n	801ade6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801adde:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ade0:	4281      	cmp	r1, r0
 801ade2:	f000 80c3 	beq.w	801af6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ade6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ade8:	f8bc 4000 	ldrh.w	r4, [ip]
 801adec:	fb11 f303 	smulbb	r3, r1, r3
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	1c59      	adds	r1, r3, #1
 801adf4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801adf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801adfc:	b29f      	uxth	r7, r3
 801adfe:	43db      	mvns	r3, r3
 801ae00:	b2db      	uxtb	r3, r3
 801ae02:	9309      	str	r3, [sp, #36]	; 0x24
 801ae04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae06:	1220      	asrs	r0, r4, #8
 801ae08:	fb13 f907 	smulbb	r9, r3, r7
 801ae0c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ae10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae12:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ae16:	fb00 9003 	mla	r0, r0, r3, r9
 801ae1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ae1c:	10e1      	asrs	r1, r4, #3
 801ae1e:	fb13 f907 	smulbb	r9, r3, r7
 801ae22:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae28:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801ae2c:	fb01 9103 	mla	r1, r1, r3, r9
 801ae30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ae32:	00e4      	lsls	r4, r4, #3
 801ae34:	fb13 f707 	smulbb	r7, r3, r7
 801ae38:	b2e4      	uxtb	r4, r4
 801ae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae3c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801ae40:	fb04 7403 	mla	r4, r4, r3, r7
 801ae44:	b280      	uxth	r0, r0
 801ae46:	b2a4      	uxth	r4, r4
 801ae48:	1c43      	adds	r3, r0, #1
 801ae4a:	f104 0901 	add.w	r9, r4, #1
 801ae4e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ae52:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801ae56:	b289      	uxth	r1, r1
 801ae58:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801ae5c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ae60:	ea49 0000 	orr.w	r0, r9, r0
 801ae64:	f101 0901 	add.w	r9, r1, #1
 801ae68:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801ae6c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ae70:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae74:	ea40 0009 	orr.w	r0, r0, r9
 801ae78:	f8ac 0000 	strh.w	r0, [ip]
 801ae7c:	4446      	add	r6, r8
 801ae7e:	b2b6      	uxth	r6, r6
 801ae80:	2e07      	cmp	r6, #7
 801ae82:	bf89      	itett	hi
 801ae84:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801ae86:	fa42 f208 	asrls.w	r2, r2, r8
 801ae8a:	785a      	ldrbhi	r2, [r3, #1]
 801ae8c:	3301      	addhi	r3, #1
 801ae8e:	bf88      	it	hi
 801ae90:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801ae92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae94:	bf94      	ite	ls
 801ae96:	b2d2      	uxtbls	r2, r2
 801ae98:	2600      	movhi	r6, #0
 801ae9a:	449c      	add	ip, r3
 801ae9c:	e791      	b.n	801adc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ae9e:	441c      	add	r4, r3
 801aea0:	b224      	sxth	r4, r4
 801aea2:	e6d4      	b.n	801ac4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801aea4:	f1ba 0f01 	cmp.w	sl, #1
 801aea8:	f47f af0b 	bne.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801aeac:	f1bb 0f01 	cmp.w	fp, #1
 801aeb0:	f47f af07 	bne.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801aeb4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801af74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801aeb8:	f8db 0000 	ldr.w	r0, [fp]
 801aebc:	6803      	ldr	r3, [r0, #0]
 801aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aec0:	4798      	blx	r3
 801aec2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801aec6:	465a      	mov	r2, fp
 801aec8:	d006      	beq.n	801aed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801aeca:	f1b8 0f04 	cmp.w	r8, #4
 801aece:	d13e      	bne.n	801af4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801aed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aed2:	3300      	adds	r3, #0
 801aed4:	bf18      	it	ne
 801aed6:	2301      	movne	r3, #1
 801aed8:	0580      	lsls	r0, r0, #22
 801aeda:	d56b      	bpl.n	801afb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801aedc:	f1b8 0f08 	cmp.w	r8, #8
 801aee0:	d168      	bne.n	801afb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	bf0c      	ite	eq
 801aee6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801aeea:	f44f 7180 	movne.w	r1, #256	; 0x100
 801aeee:	2d00      	cmp	r5, #0
 801aef0:	f47f aee7 	bne.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801aef4:	2e00      	cmp	r6, #0
 801aef6:	f47f aee4 	bne.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801aefa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801aefc:	19e3      	adds	r3, r4, r7
 801aefe:	4283      	cmp	r3, r0
 801af00:	f73f aedf 	bgt.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801af04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af06:	980d      	ldr	r0, [sp, #52]	; 0x34
 801af08:	444b      	add	r3, r9
 801af0a:	4283      	cmp	r3, r0
 801af0c:	f73f aed9 	bgt.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801af10:	2500      	movs	r5, #0
 801af12:	6810      	ldr	r0, [r2, #0]
 801af14:	b2bf      	uxth	r7, r7
 801af16:	6804      	ldr	r4, [r0, #0]
 801af18:	f1b8 0f08 	cmp.w	r8, #8
 801af1c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801af20:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af22:	bf1c      	itt	ne
 801af24:	3701      	addne	r7, #1
 801af26:	f027 0701 	bicne.w	r7, r7, #1
 801af2a:	9104      	str	r1, [sp, #16]
 801af2c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801af2e:	bf18      	it	ne
 801af30:	b2bf      	uxthne	r7, r7
 801af32:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801af36:	e9cd 7900 	strd	r7, r9, [sp]
 801af3a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801af3e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801af42:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801af44:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801af46:	47a0      	blx	r4
 801af48:	b019      	add	sp, #100	; 0x64
 801af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af4e:	2300      	movs	r3, #0
 801af50:	e7c2      	b.n	801aed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801af52:	2208      	movs	r2, #8
 801af54:	fb92 f3f8 	sdiv	r3, r2, r8
 801af58:	1e5a      	subs	r2, r3, #1
 801af5a:	443a      	add	r2, r7
 801af5c:	fb92 f2f3 	sdiv	r2, r2, r3
 801af60:	fb12 f203 	smulbb	r2, r2, r3
 801af64:	b292      	uxth	r2, r2
 801af66:	e6b1      	b.n	801accc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801af68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801af6a:	e6ed      	b.n	801ad48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801af6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801af6e:	e783      	b.n	801ae78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801af70:	20020084 	.word	0x20020084
 801af74:	2002008c 	.word	0x2002008c
 801af78:	20020086 	.word	0x20020086
 801af7c:	00fff800 	.word	0x00fff800
 801af80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af82:	b153      	cbz	r3, 801af9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801af84:	441e      	add	r6, r3
 801af86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af88:	b2b6      	uxth	r6, r6
 801af8a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801af8e:	781a      	ldrb	r2, [r3, #0]
 801af90:	f006 0607 	and.w	r6, r6, #7
 801af94:	4132      	asrs	r2, r6
 801af96:	9328      	str	r3, [sp, #160]	; 0xa0
 801af98:	b2d2      	uxtb	r2, r2
 801af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af9c:	445b      	add	r3, fp
 801af9e:	930a      	str	r3, [sp, #40]	; 0x28
 801afa0:	e708      	b.n	801adb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801afa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1cf      	bne.n	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801afa8:	4b05      	ldr	r3, [pc, #20]	; (801afc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801afaa:	6818      	ldr	r0, [r3, #0]
 801afac:	6803      	ldr	r3, [r0, #0]
 801afae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afb0:	4798      	blx	r3
 801afb2:	e7c9      	b.n	801af48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	f43f ae84 	beq.w	801acc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801afba:	f44f 7180 	mov.w	r1, #256	; 0x100
 801afbe:	e796      	b.n	801aeee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801afc0:	2002008c 	.word	0x2002008c

0801afc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801afc4:	b538      	push	{r3, r4, r5, lr}
 801afc6:	4605      	mov	r5, r0
 801afc8:	4c13      	ldr	r4, [pc, #76]	; (801b018 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801afca:	e8d4 3f8f 	ldab	r3, [r4]
 801afce:	07da      	lsls	r2, r3, #31
 801afd0:	d40b      	bmi.n	801afea <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801afd2:	4620      	mov	r0, r4
 801afd4:	f007 fa45 	bl	8022462 <__cxa_guard_acquire>
 801afd8:	b138      	cbz	r0, 801afea <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801afda:	4620      	mov	r0, r4
 801afdc:	f007 fa4d 	bl	802247a <__cxa_guard_release>
 801afe0:	4a0e      	ldr	r2, [pc, #56]	; (801b01c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801afe2:	490f      	ldr	r1, [pc, #60]	; (801b020 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801afe4:	480f      	ldr	r0, [pc, #60]	; (801b024 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801afe6:	f007 fa35 	bl	8022454 <__aeabi_atexit>
 801afea:	4c0f      	ldr	r4, [pc, #60]	; (801b028 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801afec:	e8d4 3f8f 	ldab	r3, [r4]
 801aff0:	07db      	lsls	r3, r3, #31
 801aff2:	d40b      	bmi.n	801b00c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801aff4:	4620      	mov	r0, r4
 801aff6:	f007 fa34 	bl	8022462 <__cxa_guard_acquire>
 801affa:	b138      	cbz	r0, 801b00c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801affc:	4620      	mov	r0, r4
 801affe:	f007 fa3c 	bl	802247a <__cxa_guard_release>
 801b002:	4a06      	ldr	r2, [pc, #24]	; (801b01c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b004:	4909      	ldr	r1, [pc, #36]	; (801b02c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b006:	480a      	ldr	r0, [pc, #40]	; (801b030 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b008:	f007 fa24 	bl	8022454 <__aeabi_atexit>
 801b00c:	4b05      	ldr	r3, [pc, #20]	; (801b024 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b00e:	612b      	str	r3, [r5, #16]
 801b010:	4b07      	ldr	r3, [pc, #28]	; (801b030 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b012:	616b      	str	r3, [r5, #20]
 801b014:	bd38      	pop	{r3, r4, r5, pc}
 801b016:	bf00      	nop
 801b018:	20020158 	.word	0x20020158
 801b01c:	20000000 	.word	0x20000000
 801b020:	080191eb 	.word	0x080191eb
 801b024:	20000060 	.word	0x20000060
 801b028:	2002015c 	.word	0x2002015c
 801b02c:	080191e9 	.word	0x080191e9
 801b030:	20000064 	.word	0x20000064

0801b034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801b034:	b538      	push	{r3, r4, r5, lr}
 801b036:	4605      	mov	r5, r0
 801b038:	4c13      	ldr	r4, [pc, #76]	; (801b088 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801b03a:	e8d4 3f8f 	ldab	r3, [r4]
 801b03e:	07da      	lsls	r2, r3, #31
 801b040:	d40b      	bmi.n	801b05a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801b042:	4620      	mov	r0, r4
 801b044:	f007 fa0d 	bl	8022462 <__cxa_guard_acquire>
 801b048:	b138      	cbz	r0, 801b05a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801b04a:	4620      	mov	r0, r4
 801b04c:	f007 fa15 	bl	802247a <__cxa_guard_release>
 801b050:	4a0e      	ldr	r2, [pc, #56]	; (801b08c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801b052:	490f      	ldr	r1, [pc, #60]	; (801b090 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b054:	480f      	ldr	r0, [pc, #60]	; (801b094 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801b056:	f007 f9fd 	bl	8022454 <__aeabi_atexit>
 801b05a:	4c0f      	ldr	r4, [pc, #60]	; (801b098 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b05c:	e8d4 3f8f 	ldab	r3, [r4]
 801b060:	07db      	lsls	r3, r3, #31
 801b062:	d40b      	bmi.n	801b07c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801b064:	4620      	mov	r0, r4
 801b066:	f007 f9fc 	bl	8022462 <__cxa_guard_acquire>
 801b06a:	b138      	cbz	r0, 801b07c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801b06c:	4620      	mov	r0, r4
 801b06e:	f007 fa04 	bl	802247a <__cxa_guard_release>
 801b072:	4a06      	ldr	r2, [pc, #24]	; (801b08c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801b074:	4909      	ldr	r1, [pc, #36]	; (801b09c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801b076:	480a      	ldr	r0, [pc, #40]	; (801b0a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801b078:	f007 f9ec 	bl	8022454 <__aeabi_atexit>
 801b07c:	4b05      	ldr	r3, [pc, #20]	; (801b094 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801b07e:	60ab      	str	r3, [r5, #8]
 801b080:	4b07      	ldr	r3, [pc, #28]	; (801b0a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801b082:	60eb      	str	r3, [r5, #12]
 801b084:	bd38      	pop	{r3, r4, r5, pc}
 801b086:	bf00      	nop
 801b088:	20020130 	.word	0x20020130
 801b08c:	20000000 	.word	0x20000000
 801b090:	080191ef 	.word	0x080191ef
 801b094:	20000038 	.word	0x20000038
 801b098:	20020134 	.word	0x20020134
 801b09c:	080191ed 	.word	0x080191ed
 801b0a0:	2000003c 	.word	0x2000003c

0801b0a4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801b0a4:	b510      	push	{r4, lr}
 801b0a6:	4604      	mov	r4, r0
 801b0a8:	f7ff ff8c 	bl	801afc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0b2:	f7ff bfbf 	b.w	801b034 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801b0b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	4605      	mov	r5, r0
 801b0bc:	4c13      	ldr	r4, [pc, #76]	; (801b10c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801b0be:	e8d4 3f8f 	ldab	r3, [r4]
 801b0c2:	07da      	lsls	r2, r3, #31
 801b0c4:	d40b      	bmi.n	801b0de <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801b0c6:	4620      	mov	r0, r4
 801b0c8:	f007 f9cb 	bl	8022462 <__cxa_guard_acquire>
 801b0cc:	b138      	cbz	r0, 801b0de <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f007 f9d3 	bl	802247a <__cxa_guard_release>
 801b0d4:	4a0e      	ldr	r2, [pc, #56]	; (801b110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b0d6:	490f      	ldr	r1, [pc, #60]	; (801b114 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b0d8:	480f      	ldr	r0, [pc, #60]	; (801b118 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b0da:	f007 f9bb 	bl	8022454 <__aeabi_atexit>
 801b0de:	4c0f      	ldr	r4, [pc, #60]	; (801b11c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b0e0:	e8d4 3f8f 	ldab	r3, [r4]
 801b0e4:	07db      	lsls	r3, r3, #31
 801b0e6:	d40b      	bmi.n	801b100 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f007 f9ba 	bl	8022462 <__cxa_guard_acquire>
 801b0ee:	b138      	cbz	r0, 801b100 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	f007 f9c2 	bl	802247a <__cxa_guard_release>
 801b0f6:	4a06      	ldr	r2, [pc, #24]	; (801b110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b0f8:	4909      	ldr	r1, [pc, #36]	; (801b120 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b0fa:	480a      	ldr	r0, [pc, #40]	; (801b124 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b0fc:	f007 f9aa 	bl	8022454 <__aeabi_atexit>
 801b100:	4b05      	ldr	r3, [pc, #20]	; (801b118 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b102:	622b      	str	r3, [r5, #32]
 801b104:	4b07      	ldr	r3, [pc, #28]	; (801b124 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b106:	626b      	str	r3, [r5, #36]	; 0x24
 801b108:	bd38      	pop	{r3, r4, r5, pc}
 801b10a:	bf00      	nop
 801b10c:	20020160 	.word	0x20020160
 801b110:	20000000 	.word	0x20000000
 801b114:	080191e3 	.word	0x080191e3
 801b118:	20000068 	.word	0x20000068
 801b11c:	20020164 	.word	0x20020164
 801b120:	080191e1 	.word	0x080191e1
 801b124:	2000006c 	.word	0x2000006c

0801b128 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b128:	b538      	push	{r3, r4, r5, lr}
 801b12a:	4605      	mov	r5, r0
 801b12c:	4c13      	ldr	r4, [pc, #76]	; (801b17c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801b12e:	e8d4 3f8f 	ldab	r3, [r4]
 801b132:	07da      	lsls	r2, r3, #31
 801b134:	d40b      	bmi.n	801b14e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801b136:	4620      	mov	r0, r4
 801b138:	f007 f993 	bl	8022462 <__cxa_guard_acquire>
 801b13c:	b138      	cbz	r0, 801b14e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801b13e:	4620      	mov	r0, r4
 801b140:	f007 f99b 	bl	802247a <__cxa_guard_release>
 801b144:	4a0e      	ldr	r2, [pc, #56]	; (801b180 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b146:	490f      	ldr	r1, [pc, #60]	; (801b184 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b148:	480f      	ldr	r0, [pc, #60]	; (801b188 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b14a:	f007 f983 	bl	8022454 <__aeabi_atexit>
 801b14e:	4c0f      	ldr	r4, [pc, #60]	; (801b18c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b150:	e8d4 3f8f 	ldab	r3, [r4]
 801b154:	07db      	lsls	r3, r3, #31
 801b156:	d40b      	bmi.n	801b170 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801b158:	4620      	mov	r0, r4
 801b15a:	f007 f982 	bl	8022462 <__cxa_guard_acquire>
 801b15e:	b138      	cbz	r0, 801b170 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801b160:	4620      	mov	r0, r4
 801b162:	f007 f98a 	bl	802247a <__cxa_guard_release>
 801b166:	4a06      	ldr	r2, [pc, #24]	; (801b180 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b168:	4909      	ldr	r1, [pc, #36]	; (801b190 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b16a:	480a      	ldr	r0, [pc, #40]	; (801b194 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b16c:	f007 f972 	bl	8022454 <__aeabi_atexit>
 801b170:	4b05      	ldr	r3, [pc, #20]	; (801b188 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b172:	61ab      	str	r3, [r5, #24]
 801b174:	4b07      	ldr	r3, [pc, #28]	; (801b194 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b176:	61eb      	str	r3, [r5, #28]
 801b178:	bd38      	pop	{r3, r4, r5, pc}
 801b17a:	bf00      	nop
 801b17c:	20020138 	.word	0x20020138
 801b180:	20000000 	.word	0x20000000
 801b184:	080191e7 	.word	0x080191e7
 801b188:	20000040 	.word	0x20000040
 801b18c:	2002013c 	.word	0x2002013c
 801b190:	080191e5 	.word	0x080191e5
 801b194:	20000044 	.word	0x20000044

0801b198 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801b198:	b510      	push	{r4, lr}
 801b19a:	4604      	mov	r4, r0
 801b19c:	f7ff ff8c 	bl	801b0b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a6:	f7ff bfbf 	b.w	801b128 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b1ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	4605      	mov	r5, r0
 801b1b0:	4c13      	ldr	r4, [pc, #76]	; (801b200 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801b1b2:	e8d4 3f8f 	ldab	r3, [r4]
 801b1b6:	07da      	lsls	r2, r3, #31
 801b1b8:	d40b      	bmi.n	801b1d2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f007 f951 	bl	8022462 <__cxa_guard_acquire>
 801b1c0:	b138      	cbz	r0, 801b1d2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801b1c2:	4620      	mov	r0, r4
 801b1c4:	f007 f959 	bl	802247a <__cxa_guard_release>
 801b1c8:	4a0e      	ldr	r2, [pc, #56]	; (801b204 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b1ca:	490f      	ldr	r1, [pc, #60]	; (801b208 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b1cc:	480f      	ldr	r0, [pc, #60]	; (801b20c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b1ce:	f007 f941 	bl	8022454 <__aeabi_atexit>
 801b1d2:	4c0f      	ldr	r4, [pc, #60]	; (801b210 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b1d4:	e8d4 3f8f 	ldab	r3, [r4]
 801b1d8:	07db      	lsls	r3, r3, #31
 801b1da:	d40b      	bmi.n	801b1f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f007 f940 	bl	8022462 <__cxa_guard_acquire>
 801b1e2:	b138      	cbz	r0, 801b1f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	f007 f948 	bl	802247a <__cxa_guard_release>
 801b1ea:	4a06      	ldr	r2, [pc, #24]	; (801b204 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b1ec:	4909      	ldr	r1, [pc, #36]	; (801b214 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b1ee:	480a      	ldr	r0, [pc, #40]	; (801b218 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b1f0:	f007 f930 	bl	8022454 <__aeabi_atexit>
 801b1f4:	4b05      	ldr	r3, [pc, #20]	; (801b20c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b1f6:	632b      	str	r3, [r5, #48]	; 0x30
 801b1f8:	4b07      	ldr	r3, [pc, #28]	; (801b218 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b1fa:	636b      	str	r3, [r5, #52]	; 0x34
 801b1fc:	bd38      	pop	{r3, r4, r5, pc}
 801b1fe:	bf00      	nop
 801b200:	20020170 	.word	0x20020170
 801b204:	20000000 	.word	0x20000000
 801b208:	080191db 	.word	0x080191db
 801b20c:	20000078 	.word	0x20000078
 801b210:	20020174 	.word	0x20020174
 801b214:	080191d9 	.word	0x080191d9
 801b218:	2000007c 	.word	0x2000007c

0801b21c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b21c:	b538      	push	{r3, r4, r5, lr}
 801b21e:	4605      	mov	r5, r0
 801b220:	4c13      	ldr	r4, [pc, #76]	; (801b270 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801b222:	e8d4 3f8f 	ldab	r3, [r4]
 801b226:	07da      	lsls	r2, r3, #31
 801b228:	d40b      	bmi.n	801b242 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801b22a:	4620      	mov	r0, r4
 801b22c:	f007 f919 	bl	8022462 <__cxa_guard_acquire>
 801b230:	b138      	cbz	r0, 801b242 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801b232:	4620      	mov	r0, r4
 801b234:	f007 f921 	bl	802247a <__cxa_guard_release>
 801b238:	4a0e      	ldr	r2, [pc, #56]	; (801b274 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b23a:	490f      	ldr	r1, [pc, #60]	; (801b278 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b23c:	480f      	ldr	r0, [pc, #60]	; (801b27c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b23e:	f007 f909 	bl	8022454 <__aeabi_atexit>
 801b242:	4c0f      	ldr	r4, [pc, #60]	; (801b280 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b244:	e8d4 3f8f 	ldab	r3, [r4]
 801b248:	07db      	lsls	r3, r3, #31
 801b24a:	d40b      	bmi.n	801b264 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801b24c:	4620      	mov	r0, r4
 801b24e:	f007 f908 	bl	8022462 <__cxa_guard_acquire>
 801b252:	b138      	cbz	r0, 801b264 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801b254:	4620      	mov	r0, r4
 801b256:	f007 f910 	bl	802247a <__cxa_guard_release>
 801b25a:	4a06      	ldr	r2, [pc, #24]	; (801b274 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b25c:	4909      	ldr	r1, [pc, #36]	; (801b284 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b25e:	480a      	ldr	r0, [pc, #40]	; (801b288 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b260:	f007 f8f8 	bl	8022454 <__aeabi_atexit>
 801b264:	4b05      	ldr	r3, [pc, #20]	; (801b27c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b266:	62ab      	str	r3, [r5, #40]	; 0x28
 801b268:	4b07      	ldr	r3, [pc, #28]	; (801b288 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b26a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b26c:	bd38      	pop	{r3, r4, r5, pc}
 801b26e:	bf00      	nop
 801b270:	20020140 	.word	0x20020140
 801b274:	20000000 	.word	0x20000000
 801b278:	080191df 	.word	0x080191df
 801b27c:	20000048 	.word	0x20000048
 801b280:	20020144 	.word	0x20020144
 801b284:	080191dd 	.word	0x080191dd
 801b288:	2000004c 	.word	0x2000004c

0801b28c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b28c:	b510      	push	{r4, lr}
 801b28e:	4604      	mov	r4, r0
 801b290:	f7ff ff8c 	bl	801b1ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b294:	4620      	mov	r0, r4
 801b296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b29a:	f7ff bfbf 	b.w	801b21c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b2a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	4605      	mov	r5, r0
 801b2a4:	4c13      	ldr	r4, [pc, #76]	; (801b2f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801b2a6:	e8d4 3f8f 	ldab	r3, [r4]
 801b2aa:	07da      	lsls	r2, r3, #31
 801b2ac:	d40b      	bmi.n	801b2c6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801b2ae:	4620      	mov	r0, r4
 801b2b0:	f007 f8d7 	bl	8022462 <__cxa_guard_acquire>
 801b2b4:	b138      	cbz	r0, 801b2c6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	f007 f8df 	bl	802247a <__cxa_guard_release>
 801b2bc:	4a0e      	ldr	r2, [pc, #56]	; (801b2f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801b2be:	490f      	ldr	r1, [pc, #60]	; (801b2fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b2c0:	480f      	ldr	r0, [pc, #60]	; (801b300 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801b2c2:	f007 f8c7 	bl	8022454 <__aeabi_atexit>
 801b2c6:	4c0f      	ldr	r4, [pc, #60]	; (801b304 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b2c8:	e8d4 3f8f 	ldab	r3, [r4]
 801b2cc:	07db      	lsls	r3, r3, #31
 801b2ce:	d40b      	bmi.n	801b2e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801b2d0:	4620      	mov	r0, r4
 801b2d2:	f007 f8c6 	bl	8022462 <__cxa_guard_acquire>
 801b2d6:	b138      	cbz	r0, 801b2e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801b2d8:	4620      	mov	r0, r4
 801b2da:	f007 f8ce 	bl	802247a <__cxa_guard_release>
 801b2de:	4a06      	ldr	r2, [pc, #24]	; (801b2f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801b2e0:	4909      	ldr	r1, [pc, #36]	; (801b308 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801b2e2:	480a      	ldr	r0, [pc, #40]	; (801b30c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801b2e4:	f007 f8b6 	bl	8022454 <__aeabi_atexit>
 801b2e8:	4b05      	ldr	r3, [pc, #20]	; (801b300 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801b2ea:	652b      	str	r3, [r5, #80]	; 0x50
 801b2ec:	4b07      	ldr	r3, [pc, #28]	; (801b30c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801b2ee:	656b      	str	r3, [r5, #84]	; 0x54
 801b2f0:	bd38      	pop	{r3, r4, r5, pc}
 801b2f2:	bf00      	nop
 801b2f4:	20020178 	.word	0x20020178
 801b2f8:	20000000 	.word	0x20000000
 801b2fc:	080191cb 	.word	0x080191cb
 801b300:	20000080 	.word	0x20000080
 801b304:	2002017c 	.word	0x2002017c
 801b308:	080191c9 	.word	0x080191c9
 801b30c:	20000084 	.word	0x20000084

0801b310 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801b310:	b538      	push	{r3, r4, r5, lr}
 801b312:	4605      	mov	r5, r0
 801b314:	4c13      	ldr	r4, [pc, #76]	; (801b364 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801b316:	e8d4 3f8f 	ldab	r3, [r4]
 801b31a:	07da      	lsls	r2, r3, #31
 801b31c:	d40b      	bmi.n	801b336 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801b31e:	4620      	mov	r0, r4
 801b320:	f007 f89f 	bl	8022462 <__cxa_guard_acquire>
 801b324:	b138      	cbz	r0, 801b336 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801b326:	4620      	mov	r0, r4
 801b328:	f007 f8a7 	bl	802247a <__cxa_guard_release>
 801b32c:	4a0e      	ldr	r2, [pc, #56]	; (801b368 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801b32e:	490f      	ldr	r1, [pc, #60]	; (801b36c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b330:	480f      	ldr	r0, [pc, #60]	; (801b370 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801b332:	f007 f88f 	bl	8022454 <__aeabi_atexit>
 801b336:	4c0f      	ldr	r4, [pc, #60]	; (801b374 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b338:	e8d4 3f8f 	ldab	r3, [r4]
 801b33c:	07db      	lsls	r3, r3, #31
 801b33e:	d40b      	bmi.n	801b358 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801b340:	4620      	mov	r0, r4
 801b342:	f007 f88e 	bl	8022462 <__cxa_guard_acquire>
 801b346:	b138      	cbz	r0, 801b358 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801b348:	4620      	mov	r0, r4
 801b34a:	f007 f896 	bl	802247a <__cxa_guard_release>
 801b34e:	4a06      	ldr	r2, [pc, #24]	; (801b368 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801b350:	4909      	ldr	r1, [pc, #36]	; (801b378 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801b352:	480a      	ldr	r0, [pc, #40]	; (801b37c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801b354:	f007 f87e 	bl	8022454 <__aeabi_atexit>
 801b358:	4b05      	ldr	r3, [pc, #20]	; (801b370 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801b35a:	64ab      	str	r3, [r5, #72]	; 0x48
 801b35c:	4b07      	ldr	r3, [pc, #28]	; (801b37c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801b35e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b360:	bd38      	pop	{r3, r4, r5, pc}
 801b362:	bf00      	nop
 801b364:	20020180 	.word	0x20020180
 801b368:	20000000 	.word	0x20000000
 801b36c:	080191cf 	.word	0x080191cf
 801b370:	20000088 	.word	0x20000088
 801b374:	20020184 	.word	0x20020184
 801b378:	080191cd 	.word	0x080191cd
 801b37c:	2000008c 	.word	0x2000008c

0801b380 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	4605      	mov	r5, r0
 801b384:	4c13      	ldr	r4, [pc, #76]	; (801b3d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801b386:	e8d4 3f8f 	ldab	r3, [r4]
 801b38a:	07da      	lsls	r2, r3, #31
 801b38c:	d40b      	bmi.n	801b3a6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801b38e:	4620      	mov	r0, r4
 801b390:	f007 f867 	bl	8022462 <__cxa_guard_acquire>
 801b394:	b138      	cbz	r0, 801b3a6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801b396:	4620      	mov	r0, r4
 801b398:	f007 f86f 	bl	802247a <__cxa_guard_release>
 801b39c:	4a0e      	ldr	r2, [pc, #56]	; (801b3d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801b39e:	490f      	ldr	r1, [pc, #60]	; (801b3dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b3a0:	480f      	ldr	r0, [pc, #60]	; (801b3e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801b3a2:	f007 f857 	bl	8022454 <__aeabi_atexit>
 801b3a6:	4c0f      	ldr	r4, [pc, #60]	; (801b3e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b3a8:	e8d4 3f8f 	ldab	r3, [r4]
 801b3ac:	07db      	lsls	r3, r3, #31
 801b3ae:	d40b      	bmi.n	801b3c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f007 f856 	bl	8022462 <__cxa_guard_acquire>
 801b3b6:	b138      	cbz	r0, 801b3c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	f007 f85e 	bl	802247a <__cxa_guard_release>
 801b3be:	4a06      	ldr	r2, [pc, #24]	; (801b3d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801b3c0:	4909      	ldr	r1, [pc, #36]	; (801b3e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801b3c2:	480a      	ldr	r0, [pc, #40]	; (801b3ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801b3c4:	f007 f846 	bl	8022454 <__aeabi_atexit>
 801b3c8:	4b05      	ldr	r3, [pc, #20]	; (801b3e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801b3ca:	642b      	str	r3, [r5, #64]	; 0x40
 801b3cc:	4b07      	ldr	r3, [pc, #28]	; (801b3ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801b3ce:	646b      	str	r3, [r5, #68]	; 0x44
 801b3d0:	bd38      	pop	{r3, r4, r5, pc}
 801b3d2:	bf00      	nop
 801b3d4:	20020148 	.word	0x20020148
 801b3d8:	20000000 	.word	0x20000000
 801b3dc:	080191d3 	.word	0x080191d3
 801b3e0:	20000050 	.word	0x20000050
 801b3e4:	2002014c 	.word	0x2002014c
 801b3e8:	080191d1 	.word	0x080191d1
 801b3ec:	20000054 	.word	0x20000054

0801b3f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801b3f0:	b538      	push	{r3, r4, r5, lr}
 801b3f2:	4605      	mov	r5, r0
 801b3f4:	4c13      	ldr	r4, [pc, #76]	; (801b444 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801b3f6:	e8d4 3f8f 	ldab	r3, [r4]
 801b3fa:	07da      	lsls	r2, r3, #31
 801b3fc:	d40b      	bmi.n	801b416 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801b3fe:	4620      	mov	r0, r4
 801b400:	f007 f82f 	bl	8022462 <__cxa_guard_acquire>
 801b404:	b138      	cbz	r0, 801b416 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801b406:	4620      	mov	r0, r4
 801b408:	f007 f837 	bl	802247a <__cxa_guard_release>
 801b40c:	4a0e      	ldr	r2, [pc, #56]	; (801b448 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801b40e:	490f      	ldr	r1, [pc, #60]	; (801b44c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b410:	480f      	ldr	r0, [pc, #60]	; (801b450 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801b412:	f007 f81f 	bl	8022454 <__aeabi_atexit>
 801b416:	4c0f      	ldr	r4, [pc, #60]	; (801b454 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b418:	e8d4 3f8f 	ldab	r3, [r4]
 801b41c:	07db      	lsls	r3, r3, #31
 801b41e:	d40b      	bmi.n	801b438 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801b420:	4620      	mov	r0, r4
 801b422:	f007 f81e 	bl	8022462 <__cxa_guard_acquire>
 801b426:	b138      	cbz	r0, 801b438 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801b428:	4620      	mov	r0, r4
 801b42a:	f007 f826 	bl	802247a <__cxa_guard_release>
 801b42e:	4a06      	ldr	r2, [pc, #24]	; (801b448 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801b430:	4909      	ldr	r1, [pc, #36]	; (801b458 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801b432:	480a      	ldr	r0, [pc, #40]	; (801b45c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801b434:	f007 f80e 	bl	8022454 <__aeabi_atexit>
 801b438:	4b05      	ldr	r3, [pc, #20]	; (801b450 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801b43a:	63ab      	str	r3, [r5, #56]	; 0x38
 801b43c:	4b07      	ldr	r3, [pc, #28]	; (801b45c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801b43e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b440:	bd38      	pop	{r3, r4, r5, pc}
 801b442:	bf00      	nop
 801b444:	20020168 	.word	0x20020168
 801b448:	20000000 	.word	0x20000000
 801b44c:	080191d7 	.word	0x080191d7
 801b450:	20000070 	.word	0x20000070
 801b454:	2002016c 	.word	0x2002016c
 801b458:	080191d5 	.word	0x080191d5
 801b45c:	20000074 	.word	0x20000074

0801b460 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801b460:	b510      	push	{r4, lr}
 801b462:	4604      	mov	r4, r0
 801b464:	f7ff ff1c 	bl	801b2a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801b468:	4620      	mov	r0, r4
 801b46a:	f7ff ff89 	bl	801b380 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801b46e:	4620      	mov	r0, r4
 801b470:	f7ff ff4e 	bl	801b310 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801b474:	4620      	mov	r0, r4
 801b476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b47a:	f7ff bfb9 	b.w	801b3f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801b480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b480:	b538      	push	{r3, r4, r5, lr}
 801b482:	4605      	mov	r5, r0
 801b484:	4c13      	ldr	r4, [pc, #76]	; (801b4d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801b486:	e8d4 3f8f 	ldab	r3, [r4]
 801b48a:	07da      	lsls	r2, r3, #31
 801b48c:	d40b      	bmi.n	801b4a6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801b48e:	4620      	mov	r0, r4
 801b490:	f006 ffe7 	bl	8022462 <__cxa_guard_acquire>
 801b494:	b138      	cbz	r0, 801b4a6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801b496:	4620      	mov	r0, r4
 801b498:	f006 ffef 	bl	802247a <__cxa_guard_release>
 801b49c:	4a0e      	ldr	r2, [pc, #56]	; (801b4d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b49e:	490f      	ldr	r1, [pc, #60]	; (801b4dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b4a0:	480f      	ldr	r0, [pc, #60]	; (801b4e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b4a2:	f006 ffd7 	bl	8022454 <__aeabi_atexit>
 801b4a6:	4c0f      	ldr	r4, [pc, #60]	; (801b4e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b4a8:	e8d4 3f8f 	ldab	r3, [r4]
 801b4ac:	07db      	lsls	r3, r3, #31
 801b4ae:	d40b      	bmi.n	801b4c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f006 ffd6 	bl	8022462 <__cxa_guard_acquire>
 801b4b6:	b138      	cbz	r0, 801b4c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f006 ffde 	bl	802247a <__cxa_guard_release>
 801b4be:	4a06      	ldr	r2, [pc, #24]	; (801b4d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b4c0:	4909      	ldr	r1, [pc, #36]	; (801b4e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b4c2:	480a      	ldr	r0, [pc, #40]	; (801b4ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b4c4:	f006 ffc6 	bl	8022454 <__aeabi_atexit>
 801b4c8:	4b05      	ldr	r3, [pc, #20]	; (801b4e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b4ca:	662b      	str	r3, [r5, #96]	; 0x60
 801b4cc:	4b07      	ldr	r3, [pc, #28]	; (801b4ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b4ce:	666b      	str	r3, [r5, #100]	; 0x64
 801b4d0:	bd38      	pop	{r3, r4, r5, pc}
 801b4d2:	bf00      	nop
 801b4d4:	20020150 	.word	0x20020150
 801b4d8:	20000000 	.word	0x20000000
 801b4dc:	080191c3 	.word	0x080191c3
 801b4e0:	20000058 	.word	0x20000058
 801b4e4:	20020154 	.word	0x20020154
 801b4e8:	080191c1 	.word	0x080191c1
 801b4ec:	2000005c 	.word	0x2000005c

0801b4f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	4605      	mov	r5, r0
 801b4f4:	4c13      	ldr	r4, [pc, #76]	; (801b544 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801b4f6:	e8d4 3f8f 	ldab	r3, [r4]
 801b4fa:	07da      	lsls	r2, r3, #31
 801b4fc:	d40b      	bmi.n	801b516 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801b4fe:	4620      	mov	r0, r4
 801b500:	f006 ffaf 	bl	8022462 <__cxa_guard_acquire>
 801b504:	b138      	cbz	r0, 801b516 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801b506:	4620      	mov	r0, r4
 801b508:	f006 ffb7 	bl	802247a <__cxa_guard_release>
 801b50c:	4a0e      	ldr	r2, [pc, #56]	; (801b548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b50e:	490f      	ldr	r1, [pc, #60]	; (801b54c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b510:	480f      	ldr	r0, [pc, #60]	; (801b550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b512:	f006 ff9f 	bl	8022454 <__aeabi_atexit>
 801b516:	4c0f      	ldr	r4, [pc, #60]	; (801b554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b518:	e8d4 3f8f 	ldab	r3, [r4]
 801b51c:	07db      	lsls	r3, r3, #31
 801b51e:	d40b      	bmi.n	801b538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801b520:	4620      	mov	r0, r4
 801b522:	f006 ff9e 	bl	8022462 <__cxa_guard_acquire>
 801b526:	b138      	cbz	r0, 801b538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801b528:	4620      	mov	r0, r4
 801b52a:	f006 ffa6 	bl	802247a <__cxa_guard_release>
 801b52e:	4a06      	ldr	r2, [pc, #24]	; (801b548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b530:	4909      	ldr	r1, [pc, #36]	; (801b558 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b532:	480a      	ldr	r0, [pc, #40]	; (801b55c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b534:	f006 ff8e 	bl	8022454 <__aeabi_atexit>
 801b538:	4b05      	ldr	r3, [pc, #20]	; (801b550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b53a:	65ab      	str	r3, [r5, #88]	; 0x58
 801b53c:	4b07      	ldr	r3, [pc, #28]	; (801b55c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b53e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801b540:	bd38      	pop	{r3, r4, r5, pc}
 801b542:	bf00      	nop
 801b544:	20020128 	.word	0x20020128
 801b548:	20000000 	.word	0x20000000
 801b54c:	080191c7 	.word	0x080191c7
 801b550:	20000030 	.word	0x20000030
 801b554:	2002012c 	.word	0x2002012c
 801b558:	080191c5 	.word	0x080191c5
 801b55c:	20000034 	.word	0x20000034

0801b560 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801b560:	b510      	push	{r4, lr}
 801b562:	4604      	mov	r4, r0
 801b564:	f7ff ff8c 	bl	801b480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b568:	4620      	mov	r0, r4
 801b56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b56e:	f7ff bfbf 	b.w	801b4f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b574 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b574:	b538      	push	{r3, r4, r5, lr}
 801b576:	4605      	mov	r5, r0
 801b578:	4c13      	ldr	r4, [pc, #76]	; (801b5c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801b57a:	e8d4 3f8f 	ldab	r3, [r4]
 801b57e:	07da      	lsls	r2, r3, #31
 801b580:	d40b      	bmi.n	801b59a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801b582:	4620      	mov	r0, r4
 801b584:	f006 ff6d 	bl	8022462 <__cxa_guard_acquire>
 801b588:	b138      	cbz	r0, 801b59a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801b58a:	4620      	mov	r0, r4
 801b58c:	f006 ff75 	bl	802247a <__cxa_guard_release>
 801b590:	4a0e      	ldr	r2, [pc, #56]	; (801b5cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b592:	490f      	ldr	r1, [pc, #60]	; (801b5d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b594:	480f      	ldr	r0, [pc, #60]	; (801b5d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b596:	f006 ff5d 	bl	8022454 <__aeabi_atexit>
 801b59a:	4c0f      	ldr	r4, [pc, #60]	; (801b5d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b59c:	e8d4 3f8f 	ldab	r3, [r4]
 801b5a0:	07db      	lsls	r3, r3, #31
 801b5a2:	d40b      	bmi.n	801b5bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	f006 ff5c 	bl	8022462 <__cxa_guard_acquire>
 801b5aa:	b138      	cbz	r0, 801b5bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	f006 ff64 	bl	802247a <__cxa_guard_release>
 801b5b2:	4a06      	ldr	r2, [pc, #24]	; (801b5cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b5b4:	4909      	ldr	r1, [pc, #36]	; (801b5dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b5b6:	480a      	ldr	r0, [pc, #40]	; (801b5e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b5b8:	f006 ff4c 	bl	8022454 <__aeabi_atexit>
 801b5bc:	4b05      	ldr	r3, [pc, #20]	; (801b5d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b5be:	672b      	str	r3, [r5, #112]	; 0x70
 801b5c0:	4b07      	ldr	r3, [pc, #28]	; (801b5e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b5c2:	676b      	str	r3, [r5, #116]	; 0x74
 801b5c4:	bd38      	pop	{r3, r4, r5, pc}
 801b5c6:	bf00      	nop
 801b5c8:	20020120 	.word	0x20020120
 801b5cc:	20000000 	.word	0x20000000
 801b5d0:	080191bb 	.word	0x080191bb
 801b5d4:	20000028 	.word	0x20000028
 801b5d8:	20020124 	.word	0x20020124
 801b5dc:	080191b9 	.word	0x080191b9
 801b5e0:	2000002c 	.word	0x2000002c

0801b5e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b5e4:	b538      	push	{r3, r4, r5, lr}
 801b5e6:	4605      	mov	r5, r0
 801b5e8:	4c13      	ldr	r4, [pc, #76]	; (801b638 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801b5ea:	e8d4 3f8f 	ldab	r3, [r4]
 801b5ee:	07da      	lsls	r2, r3, #31
 801b5f0:	d40b      	bmi.n	801b60a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f006 ff35 	bl	8022462 <__cxa_guard_acquire>
 801b5f8:	b138      	cbz	r0, 801b60a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f006 ff3d 	bl	802247a <__cxa_guard_release>
 801b600:	4a0e      	ldr	r2, [pc, #56]	; (801b63c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b602:	490f      	ldr	r1, [pc, #60]	; (801b640 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b604:	480f      	ldr	r0, [pc, #60]	; (801b644 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b606:	f006 ff25 	bl	8022454 <__aeabi_atexit>
 801b60a:	4c0f      	ldr	r4, [pc, #60]	; (801b648 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b60c:	e8d4 3f8f 	ldab	r3, [r4]
 801b610:	07db      	lsls	r3, r3, #31
 801b612:	d40b      	bmi.n	801b62c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801b614:	4620      	mov	r0, r4
 801b616:	f006 ff24 	bl	8022462 <__cxa_guard_acquire>
 801b61a:	b138      	cbz	r0, 801b62c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801b61c:	4620      	mov	r0, r4
 801b61e:	f006 ff2c 	bl	802247a <__cxa_guard_release>
 801b622:	4a06      	ldr	r2, [pc, #24]	; (801b63c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b624:	4909      	ldr	r1, [pc, #36]	; (801b64c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b626:	480a      	ldr	r0, [pc, #40]	; (801b650 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b628:	f006 ff14 	bl	8022454 <__aeabi_atexit>
 801b62c:	4b05      	ldr	r3, [pc, #20]	; (801b644 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b62e:	66ab      	str	r3, [r5, #104]	; 0x68
 801b630:	4b07      	ldr	r3, [pc, #28]	; (801b650 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b632:	66eb      	str	r3, [r5, #108]	; 0x6c
 801b634:	bd38      	pop	{r3, r4, r5, pc}
 801b636:	bf00      	nop
 801b638:	20020118 	.word	0x20020118
 801b63c:	20000000 	.word	0x20000000
 801b640:	080191bf 	.word	0x080191bf
 801b644:	20000020 	.word	0x20000020
 801b648:	2002011c 	.word	0x2002011c
 801b64c:	080191bd 	.word	0x080191bd
 801b650:	20000024 	.word	0x20000024

0801b654 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801b654:	b510      	push	{r4, lr}
 801b656:	4604      	mov	r4, r0
 801b658:	f7ff ff8c 	bl	801b574 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b65c:	4620      	mov	r0, r4
 801b65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b662:	f7ff bfbf 	b.w	801b5e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801b666 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801b666:	b510      	push	{r4, lr}
 801b668:	4604      	mov	r4, r0
 801b66a:	f7ff fff3 	bl	801b654 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801b66e:	4620      	mov	r0, r4
 801b670:	f7ff ff76 	bl	801b560 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801b674:	4620      	mov	r0, r4
 801b676:	f7ff fe09 	bl	801b28c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801b67a:	4620      	mov	r0, r4
 801b67c:	f7ff fd12 	bl	801b0a4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801b680:	4620      	mov	r0, r4
 801b682:	f7ff fd89 	bl	801b198 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801b686:	4620      	mov	r0, r4
 801b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b68c:	f7ff bee8 	b.w	801b460 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801b690 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b694:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801b698:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801b69c:	fb05 4c0e 	mla	ip, r5, lr, r4
 801b6a0:	2d00      	cmp	r5, #0
 801b6a2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801b6a6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801b6aa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b6ae:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801b6b2:	eb02 0a0c 	add.w	sl, r2, ip
 801b6b6:	8808      	ldrh	r0, [r1, #0]
 801b6b8:	f2c0 80b0 	blt.w	801b81c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b6bc:	45ab      	cmp	fp, r5
 801b6be:	f340 80ad 	ble.w	801b81c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b6c2:	2c00      	cmp	r4, #0
 801b6c4:	f2c0 80a8 	blt.w	801b818 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b6c8:	45a6      	cmp	lr, r4
 801b6ca:	f340 80a5 	ble.w	801b818 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b6ce:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b6d2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801b6d6:	1c62      	adds	r2, r4, #1
 801b6d8:	f100 80a3 	bmi.w	801b822 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b6dc:	4596      	cmp	lr, r2
 801b6de:	f340 80a0 	ble.w	801b822 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b6e2:	f1b9 0f00 	cmp.w	r9, #0
 801b6e6:	f000 809c 	beq.w	801b822 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b6ea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b6ee:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801b6f2:	3501      	adds	r5, #1
 801b6f4:	f100 8099 	bmi.w	801b82a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b6f8:	45ab      	cmp	fp, r5
 801b6fa:	f340 8096 	ble.w	801b82a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b6fe:	2f00      	cmp	r7, #0
 801b700:	f000 8093 	beq.w	801b82a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b704:	2c00      	cmp	r4, #0
 801b706:	f2c0 808e 	blt.w	801b826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b70a:	45a6      	cmp	lr, r4
 801b70c:	f340 808b 	ble.w	801b826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b710:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801b714:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801b718:	3401      	adds	r4, #1
 801b71a:	f100 8089 	bmi.w	801b830 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b71e:	45a6      	cmp	lr, r4
 801b720:	f340 8086 	ble.w	801b830 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b724:	f1b9 0f00 	cmp.w	r9, #0
 801b728:	f000 8082 	beq.w	801b830 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b72c:	44d6      	add	lr, sl
 801b72e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b732:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b736:	fb19 fe07 	smulbb	lr, r9, r7
 801b73a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801b73e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b742:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801b746:	ea44 0808 	orr.w	r8, r4, r8
 801b74a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801b74e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801b752:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b756:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b75a:	ea44 0c0c 	orr.w	ip, r4, ip
 801b75e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801b762:	fb04 f40c 	mul.w	r4, r4, ip
 801b766:	f1c7 0210 	rsb	r2, r7, #16
 801b76a:	eba2 0209 	sub.w	r2, r2, r9
 801b76e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801b772:	fb02 4808 	mla	r8, r2, r8, r4
 801b776:	b2b4      	uxth	r4, r6
 801b778:	43f6      	mvns	r6, r6
 801b77a:	041a      	lsls	r2, r3, #16
 801b77c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b780:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b784:	4313      	orrs	r3, r2
 801b786:	fb0e 8303 	mla	r3, lr, r3, r8
 801b78a:	042a      	lsls	r2, r5, #16
 801b78c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b790:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b794:	432a      	orrs	r2, r5
 801b796:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801b79a:	fb07 3202 	mla	r2, r7, r2, r3
 801b79e:	0d53      	lsrs	r3, r2, #21
 801b7a0:	0952      	lsrs	r2, r2, #5
 801b7a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b7a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b7aa:	431a      	orrs	r2, r3
 801b7ac:	b293      	uxth	r3, r2
 801b7ae:	1202      	asrs	r2, r0, #8
 801b7b0:	b2f6      	uxtb	r6, r6
 801b7b2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b7b6:	fb12 f206 	smulbb	r2, r2, r6
 801b7ba:	10c7      	asrs	r7, r0, #3
 801b7bc:	00c0      	lsls	r0, r0, #3
 801b7be:	b2c0      	uxtb	r0, r0
 801b7c0:	121d      	asrs	r5, r3, #8
 801b7c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7c6:	fb10 f006 	smulbb	r0, r0, r6
 801b7ca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b7ce:	fb17 f706 	smulbb	r7, r7, r6
 801b7d2:	fb05 2504 	mla	r5, r5, r4, r2
 801b7d6:	10da      	asrs	r2, r3, #3
 801b7d8:	00db      	lsls	r3, r3, #3
 801b7da:	b2db      	uxtb	r3, r3
 801b7dc:	fb03 0004 	mla	r0, r3, r4, r0
 801b7e0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b7e4:	fb02 7204 	mla	r2, r2, r4, r7
 801b7e8:	b2ad      	uxth	r5, r5
 801b7ea:	b280      	uxth	r0, r0
 801b7ec:	1c6b      	adds	r3, r5, #1
 801b7ee:	b292      	uxth	r2, r2
 801b7f0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b7f4:	1c43      	adds	r3, r0, #1
 801b7f6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b7fa:	1c50      	adds	r0, r2, #1
 801b7fc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b800:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b804:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b808:	0952      	lsrs	r2, r2, #5
 801b80a:	432b      	orrs	r3, r5
 801b80c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b810:	4313      	orrs	r3, r2
 801b812:	800b      	strh	r3, [r1, #0]
 801b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b818:	4680      	mov	r8, r0
 801b81a:	e75c      	b.n	801b6d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801b81c:	4684      	mov	ip, r0
 801b81e:	4680      	mov	r8, r0
 801b820:	e767      	b.n	801b6f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b822:	4684      	mov	ip, r0
 801b824:	e765      	b.n	801b6f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b826:	4605      	mov	r5, r0
 801b828:	e776      	b.n	801b718 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801b82a:	4603      	mov	r3, r0
 801b82c:	4605      	mov	r5, r0
 801b82e:	e782      	b.n	801b736 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801b830:	4603      	mov	r3, r0
 801b832:	e780      	b.n	801b736 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801b834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b838:	b099      	sub	sp, #100	; 0x64
 801b83a:	9215      	str	r2, [sp, #84]	; 0x54
 801b83c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b83e:	9016      	str	r0, [sp, #88]	; 0x58
 801b840:	9309      	str	r3, [sp, #36]	; 0x24
 801b842:	6850      	ldr	r0, [r2, #4]
 801b844:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801b848:	910c      	str	r1, [sp, #48]	; 0x30
 801b84a:	930d      	str	r3, [sp, #52]	; 0x34
 801b84c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801b850:	fb00 1303 	mla	r3, r0, r3, r1
 801b854:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801b858:	6812      	ldr	r2, [r2, #0]
 801b85a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801b85e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	930b      	str	r3, [sp, #44]	; 0x2c
 801b864:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b866:	685e      	ldr	r6, [r3, #4]
 801b868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b86a:	3604      	adds	r6, #4
 801b86c:	43db      	mvns	r3, r3
 801b86e:	b2db      	uxtb	r3, r3
 801b870:	930a      	str	r3, [sp, #40]	; 0x28
 801b872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b874:	2b00      	cmp	r3, #0
 801b876:	dc03      	bgt.n	801b880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	f340 8225 	ble.w	801bcca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801b880:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b882:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b886:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b88a:	1e48      	subs	r0, r1, #1
 801b88c:	1e57      	subs	r7, r2, #1
 801b88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b890:	2b00      	cmp	r3, #0
 801b892:	f340 80e3 	ble.w	801ba5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b896:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801b89a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b89e:	d406      	bmi.n	801b8ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b8a0:	4584      	cmp	ip, r0
 801b8a2:	da04      	bge.n	801b8ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	db02      	blt.n	801b8ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b8a8:	42bb      	cmp	r3, r7
 801b8aa:	f2c0 80d8 	blt.w	801ba5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b8ae:	f11c 0c01 	adds.w	ip, ip, #1
 801b8b2:	f100 80c9 	bmi.w	801ba48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8b6:	4561      	cmp	r1, ip
 801b8b8:	f2c0 80c6 	blt.w	801ba48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8bc:	3301      	adds	r3, #1
 801b8be:	f100 80c3 	bmi.w	801ba48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8c2:	429a      	cmp	r2, r3
 801b8c4:	f2c0 80c0 	blt.w	801ba48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8c8:	4647      	mov	r7, r8
 801b8ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801b8ce:	f1bb 0f00 	cmp.w	fp, #0
 801b8d2:	f340 80e3 	ble.w	801ba9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b8d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b8d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b8da:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b8de:	ea5f 422a 	movs.w	r2, sl, asr #16
 801b8e2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b8e6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801b8ea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b8ee:	689b      	ldr	r3, [r3, #8]
 801b8f0:	f100 8121 	bmi.w	801bb36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b8f4:	f103 39ff 	add.w	r9, r3, #4294967295
 801b8f8:	454a      	cmp	r2, r9
 801b8fa:	f280 811c 	bge.w	801bb36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b8fe:	f1bc 0f00 	cmp.w	ip, #0
 801b902:	f2c0 8118 	blt.w	801bb36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b906:	f10e 39ff 	add.w	r9, lr, #4294967295
 801b90a:	45cc      	cmp	ip, r9
 801b90c:	f280 8113 	bge.w	801bb36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b910:	b21b      	sxth	r3, r3
 801b912:	fb0c 2203 	mla	r2, ip, r3, r2
 801b916:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b918:	eb04 0902 	add.w	r9, r4, r2
 801b91c:	5ca2      	ldrb	r2, [r4, r2]
 801b91e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801b922:	2800      	cmp	r0, #0
 801b924:	f000 80fe 	beq.w	801bb24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b928:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b92c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801b930:	9211      	str	r2, [sp, #68]	; 0x44
 801b932:	b151      	cbz	r1, 801b94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b934:	eb09 0203 	add.w	r2, r9, r3
 801b938:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b93c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b940:	930f      	str	r3, [sp, #60]	; 0x3c
 801b942:	7853      	ldrb	r3, [r2, #1]
 801b944:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b948:	9312      	str	r3, [sp, #72]	; 0x48
 801b94a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b94c:	fb10 f201 	smulbb	r2, r0, r1
 801b950:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b954:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b958:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b95c:	ea4c 0c03 	orr.w	ip, ip, r3
 801b960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b962:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b964:	041b      	lsls	r3, r3, #16
 801b966:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801b96a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b96e:	10d2      	asrs	r2, r2, #3
 801b970:	4323      	orrs	r3, r4
 801b972:	4353      	muls	r3, r2
 801b974:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801b978:	fb09 330c 	mla	r3, r9, ip, r3
 801b97c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801b980:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b984:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b988:	ea4c 0e0e 	orr.w	lr, ip, lr
 801b98c:	f1c1 0c10 	rsb	ip, r1, #16
 801b990:	ebac 0c00 	sub.w	ip, ip, r0
 801b994:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b998:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801b99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b99e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801b9a2:	0418      	lsls	r0, r3, #16
 801b9a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b9a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b9ac:	4318      	orrs	r0, r3
 801b9ae:	fb02 c200 	mla	r2, r2, r0, ip
 801b9b2:	8838      	ldrh	r0, [r7, #0]
 801b9b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b9b6:	0d53      	lsrs	r3, r2, #21
 801b9b8:	1201      	asrs	r1, r0, #8
 801b9ba:	0952      	lsrs	r2, r2, #5
 801b9bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b9c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b9c4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b9c8:	431a      	orrs	r2, r3
 801b9ca:	fb11 f104 	smulbb	r1, r1, r4
 801b9ce:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801b9d2:	00c0      	lsls	r0, r0, #3
 801b9d4:	b292      	uxth	r2, r2
 801b9d6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b9da:	b2c0      	uxtb	r0, r0
 801b9dc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801b9e0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801b9e4:	fb1e fe04 	smulbb	lr, lr, r4
 801b9e8:	fb10 f004 	smulbb	r0, r0, r4
 801b9ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b9f0:	fb0c 1c03 	mla	ip, ip, r3, r1
 801b9f4:	10d1      	asrs	r1, r2, #3
 801b9f6:	00d2      	lsls	r2, r2, #3
 801b9f8:	b2d2      	uxtb	r2, r2
 801b9fa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b9fe:	fb01 e103 	mla	r1, r1, r3, lr
 801ba02:	fb02 0303 	mla	r3, r2, r3, r0
 801ba06:	fa1f fc8c 	uxth.w	ip, ip
 801ba0a:	b29a      	uxth	r2, r3
 801ba0c:	f10c 0301 	add.w	r3, ip, #1
 801ba10:	b289      	uxth	r1, r1
 801ba12:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ba16:	1c53      	adds	r3, r2, #1
 801ba18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ba1c:	1c4a      	adds	r2, r1, #1
 801ba1e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ba22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ba26:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ba2a:	0949      	lsrs	r1, r1, #5
 801ba2c:	ea43 030c 	orr.w	r3, r3, ip
 801ba30:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ba34:	430b      	orrs	r3, r1
 801ba36:	803b      	strh	r3, [r7, #0]
 801ba38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ba3a:	3702      	adds	r7, #2
 801ba3c:	449a      	add	sl, r3
 801ba3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba40:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ba44:	441d      	add	r5, r3
 801ba46:	e742      	b.n	801b8ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ba48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ba4a:	f108 0802 	add.w	r8, r8, #2
 801ba4e:	449a      	add	sl, r3
 801ba50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba52:	441d      	add	r5, r3
 801ba54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba56:	3b01      	subs	r3, #1
 801ba58:	9309      	str	r3, [sp, #36]	; 0x24
 801ba5a:	e718      	b.n	801b88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ba5c:	d023      	beq.n	801baa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba60:	9825      	ldr	r0, [sp, #148]	; 0x94
 801ba62:	3b01      	subs	r3, #1
 801ba64:	fb00 a003 	mla	r0, r0, r3, sl
 801ba68:	1400      	asrs	r0, r0, #16
 801ba6a:	f53f af2d 	bmi.w	801b8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ba6e:	3901      	subs	r1, #1
 801ba70:	4288      	cmp	r0, r1
 801ba72:	f6bf af29 	bge.w	801b8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ba76:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ba78:	fb01 5303 	mla	r3, r1, r3, r5
 801ba7c:	141b      	asrs	r3, r3, #16
 801ba7e:	f53f af23 	bmi.w	801b8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ba82:	3a01      	subs	r2, #1
 801ba84:	4293      	cmp	r3, r2
 801ba86:	f6bf af1f 	bge.w	801b8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ba8a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801ba8e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ba92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ba96:	f1be 0f00 	cmp.w	lr, #0
 801ba9a:	dc6c      	bgt.n	801bb76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ba9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba9e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801baa2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801baa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	f340 810e 	ble.w	801bcca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801baae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bab2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bab6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801baba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801babe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bac2:	eef0 6a62 	vmov.f32	s13, s5
 801bac6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bace:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bad2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bad6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bada:	ee16 aa90 	vmov	sl, s13
 801bade:	eef0 6a43 	vmov.f32	s13, s6
 801bae2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bae6:	ee12 2a90 	vmov	r2, s5
 801baea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801baee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801baf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801baf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801baf8:	ee13 2a10 	vmov	r2, s6
 801bafc:	9325      	str	r3, [sp, #148]	; 0x94
 801bafe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bb00:	ee16 5a90 	vmov	r5, s13
 801bb04:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb08:	9326      	str	r3, [sp, #152]	; 0x98
 801bb0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bb0e:	3b01      	subs	r3, #1
 801bb10:	930c      	str	r3, [sp, #48]	; 0x30
 801bb12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bb14:	bf08      	it	eq
 801bb16:	4613      	moveq	r3, r2
 801bb18:	eeb0 3a67 	vmov.f32	s6, s15
 801bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 801bb1e:	eef0 2a47 	vmov.f32	s5, s14
 801bb22:	e6a6      	b.n	801b872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bb24:	2900      	cmp	r1, #0
 801bb26:	f43f af10 	beq.w	801b94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bb2a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bb2e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bb32:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb34:	e709      	b.n	801b94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bb36:	f112 0901 	adds.w	r9, r2, #1
 801bb3a:	f53f af7d 	bmi.w	801ba38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bb3e:	454b      	cmp	r3, r9
 801bb40:	f6ff af7a 	blt.w	801ba38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bb44:	f11c 0901 	adds.w	r9, ip, #1
 801bb48:	f53f af76 	bmi.w	801ba38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bb4c:	45ce      	cmp	lr, r9
 801bb4e:	f6ff af73 	blt.w	801ba38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bb52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bb54:	9202      	str	r2, [sp, #8]
 801bb56:	b21b      	sxth	r3, r3
 801bb58:	fa0f f28e 	sxth.w	r2, lr
 801bb5c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801bb60:	e9cd c003 	strd	ip, r0, [sp, #12]
 801bb64:	9201      	str	r2, [sp, #4]
 801bb66:	9300      	str	r3, [sp, #0]
 801bb68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb6a:	4633      	mov	r3, r6
 801bb6c:	4639      	mov	r1, r7
 801bb6e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801bb70:	f7ff fd8e 	bl	801b690 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801bb74:	e760      	b.n	801ba38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bb76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb78:	ea4f 422a 	mov.w	r2, sl, asr #16
 801bb7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bb80:	1429      	asrs	r1, r5, #16
 801bb82:	fb03 2101 	mla	r1, r3, r1, r2
 801bb86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bb88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb8a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801bb8e:	440a      	add	r2, r1
 801bb90:	5c61      	ldrb	r1, [r4, r1]
 801bb92:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bb96:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801bb9a:	f1bc 0f00 	cmp.w	ip, #0
 801bb9e:	f000 808c 	beq.w	801bcba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801bba2:	7857      	ldrb	r7, [r2, #1]
 801bba4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801bba8:	9413      	str	r4, [sp, #76]	; 0x4c
 801bbaa:	b140      	cbz	r0, 801bbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bbac:	18d7      	adds	r7, r2, r3
 801bbae:	5cd3      	ldrb	r3, [r2, r3]
 801bbb0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bbb4:	9310      	str	r3, [sp, #64]	; 0x40
 801bbb6:	787b      	ldrb	r3, [r7, #1]
 801bbb8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bbbc:	9314      	str	r3, [sp, #80]	; 0x50
 801bbbe:	fb1c f200 	smulbb	r2, ip, r0
 801bbc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbc4:	10d2      	asrs	r2, r2, #3
 801bbc6:	041f      	lsls	r7, r3, #16
 801bbc8:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801bbcc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bbd0:	431f      	orrs	r7, r3
 801bbd2:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801bbd6:	9317      	str	r3, [sp, #92]	; 0x5c
 801bbd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bbda:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bbdc:	041b      	lsls	r3, r3, #16
 801bbde:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801bbe2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bbe6:	ea43 030b 	orr.w	r3, r3, fp
 801bbea:	4353      	muls	r3, r2
 801bbec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801bbee:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801bbf2:	fb04 3707 	mla	r7, r4, r7, r3
 801bbf6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bbfa:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801bbfe:	ea43 0b01 	orr.w	fp, r3, r1
 801bc02:	f1c0 0110 	rsb	r1, r0, #16
 801bc06:	eba1 0c0c 	sub.w	ip, r1, ip
 801bc0a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bc0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc10:	fb0c 770b 	mla	r7, ip, fp, r7
 801bc14:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bc18:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801bc1c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bc20:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801bc24:	ea4c 0c0b 	orr.w	ip, ip, fp
 801bc28:	fb02 770c 	mla	r7, r2, ip, r7
 801bc2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc2e:	0d79      	lsrs	r1, r7, #21
 801bc30:	8812      	ldrh	r2, [r2, #0]
 801bc32:	097f      	lsrs	r7, r7, #5
 801bc34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bc38:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bc3c:	430f      	orrs	r7, r1
 801bc3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bc40:	1211      	asrs	r1, r2, #8
 801bc42:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801bc46:	b2bb      	uxth	r3, r7
 801bc48:	fb11 f104 	smulbb	r1, r1, r4
 801bc4c:	10d7      	asrs	r7, r2, #3
 801bc4e:	00d2      	lsls	r2, r2, #3
 801bc50:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bc54:	b2d2      	uxtb	r2, r2
 801bc56:	1218      	asrs	r0, r3, #8
 801bc58:	fb17 f704 	smulbb	r7, r7, r4
 801bc5c:	fb12 f204 	smulbb	r2, r2, r4
 801bc60:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bc64:	fb00 1009 	mla	r0, r0, r9, r1
 801bc68:	10d9      	asrs	r1, r3, #3
 801bc6a:	00db      	lsls	r3, r3, #3
 801bc6c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bc70:	b2db      	uxtb	r3, r3
 801bc72:	fb01 7109 	mla	r1, r1, r9, r7
 801bc76:	fb03 2309 	mla	r3, r3, r9, r2
 801bc7a:	b280      	uxth	r0, r0
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	b289      	uxth	r1, r1
 801bc80:	1c42      	adds	r2, r0, #1
 801bc82:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bc86:	1c4f      	adds	r7, r1, #1
 801bc88:	1c5a      	adds	r2, r3, #1
 801bc8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bc8e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bc92:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bc96:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bc9a:	0949      	lsrs	r1, r1, #5
 801bc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc9e:	4310      	orrs	r0, r2
 801bca0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bca4:	4308      	orrs	r0, r1
 801bca6:	f823 0b02 	strh.w	r0, [r3], #2
 801bcaa:	930e      	str	r3, [sp, #56]	; 0x38
 801bcac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bcae:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bcb2:	449a      	add	sl, r3
 801bcb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bcb6:	441d      	add	r5, r3
 801bcb8:	e6ed      	b.n	801ba96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	f43f af7f 	beq.w	801bbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bcc0:	5cd3      	ldrb	r3, [r2, r3]
 801bcc2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bcc6:	9310      	str	r3, [sp, #64]	; 0x40
 801bcc8:	e779      	b.n	801bbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bcca:	b019      	add	sp, #100	; 0x64
 801bccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bcd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801bcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcd4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801bcd8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801bcdc:	fb08 470e 	mla	r7, r8, lr, r4
 801bce0:	f1b8 0f00 	cmp.w	r8, #0
 801bce4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801bce8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801bcec:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801bcf0:	eb02 0907 	add.w	r9, r2, r7
 801bcf4:	8808      	ldrh	r0, [r1, #0]
 801bcf6:	db67      	blt.n	801bdc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bcf8:	45c2      	cmp	sl, r8
 801bcfa:	dd65      	ble.n	801bdc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bcfc:	2c00      	cmp	r4, #0
 801bcfe:	db61      	blt.n	801bdc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801bd00:	45a6      	cmp	lr, r4
 801bd02:	dd5f      	ble.n	801bdc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801bd04:	5dd2      	ldrb	r2, [r2, r7]
 801bd06:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801bd0a:	1c62      	adds	r2, r4, #1
 801bd0c:	d45f      	bmi.n	801bdce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bd0e:	4596      	cmp	lr, r2
 801bd10:	dd5d      	ble.n	801bdce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bd12:	2d00      	cmp	r5, #0
 801bd14:	d05b      	beq.n	801bdce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bd16:	f899 2001 	ldrb.w	r2, [r9, #1]
 801bd1a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801bd1e:	f118 0801 	adds.w	r8, r8, #1
 801bd22:	d458      	bmi.n	801bdd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bd24:	45c2      	cmp	sl, r8
 801bd26:	dd56      	ble.n	801bdd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bd28:	2e00      	cmp	r6, #0
 801bd2a:	d054      	beq.n	801bdd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bd2c:	2c00      	cmp	r4, #0
 801bd2e:	db50      	blt.n	801bdd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bd30:	45a6      	cmp	lr, r4
 801bd32:	dd4e      	ble.n	801bdd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bd34:	f819 200e 	ldrb.w	r2, [r9, lr]
 801bd38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801bd3c:	3401      	adds	r4, #1
 801bd3e:	d407      	bmi.n	801bd50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bd40:	45a6      	cmp	lr, r4
 801bd42:	dd05      	ble.n	801bd50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bd44:	b125      	cbz	r5, 801bd50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bd46:	44ce      	add	lr, r9
 801bd48:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801bd4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801bd50:	fb15 f406 	smulbb	r4, r5, r6
 801bd54:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801bd58:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bd5c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801bd60:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801bd64:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801bd68:	ea43 0c0c 	orr.w	ip, r3, ip
 801bd6c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bd70:	f1c6 0310 	rsb	r3, r6, #16
 801bd74:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bd78:	1b5b      	subs	r3, r3, r5
 801bd7a:	ea4e 0707 	orr.w	r7, lr, r7
 801bd7e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801bd82:	437d      	muls	r5, r7
 801bd84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bd88:	fb03 5c0c 	mla	ip, r3, ip, r5
 801bd8c:	0403      	lsls	r3, r0, #16
 801bd8e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bd92:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bd96:	4318      	orrs	r0, r3
 801bd98:	fb04 c000 	mla	r0, r4, r0, ip
 801bd9c:	0413      	lsls	r3, r2, #16
 801bd9e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bda2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bda6:	4313      	orrs	r3, r2
 801bda8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801bdac:	fb06 0003 	mla	r0, r6, r3, r0
 801bdb0:	0d43      	lsrs	r3, r0, #21
 801bdb2:	0940      	lsrs	r0, r0, #5
 801bdb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bdb8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bdbc:	4318      	orrs	r0, r3
 801bdbe:	8008      	strh	r0, [r1, #0]
 801bdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdc4:	4684      	mov	ip, r0
 801bdc6:	e7a0      	b.n	801bd0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801bdc8:	4607      	mov	r7, r0
 801bdca:	4684      	mov	ip, r0
 801bdcc:	e7a7      	b.n	801bd1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801bdce:	4607      	mov	r7, r0
 801bdd0:	e7a5      	b.n	801bd1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	e7b2      	b.n	801bd3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801bdd6:	4602      	mov	r2, r0
 801bdd8:	e7ba      	b.n	801bd50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801bdda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde2:	b093      	sub	sp, #76	; 0x4c
 801bde4:	920f      	str	r2, [sp, #60]	; 0x3c
 801bde6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bde8:	9010      	str	r0, [sp, #64]	; 0x40
 801bdea:	6850      	ldr	r0, [r2, #4]
 801bdec:	9108      	str	r1, [sp, #32]
 801bdee:	9306      	str	r3, [sp, #24]
 801bdf0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801bdf4:	fb00 1303 	mla	r3, r0, r3, r1
 801bdf8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801bdfc:	6812      	ldr	r2, [r2, #0]
 801bdfe:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801be02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	9307      	str	r3, [sp, #28]
 801be08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be0a:	685f      	ldr	r7, [r3, #4]
 801be0c:	3704      	adds	r7, #4
 801be0e:	9b08      	ldr	r3, [sp, #32]
 801be10:	2b00      	cmp	r3, #0
 801be12:	dc03      	bgt.n	801be1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801be14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be16:	2b00      	cmp	r3, #0
 801be18:	f340 81b2 	ble.w	801c180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801be1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801be22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801be26:	1e48      	subs	r0, r1, #1
 801be28:	f102 3cff 	add.w	ip, r2, #4294967295
 801be2c:	9b06      	ldr	r3, [sp, #24]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	f340 80a9 	ble.w	801bf86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801be34:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801be38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801be3c:	d406      	bmi.n	801be4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be3e:	4586      	cmp	lr, r0
 801be40:	da04      	bge.n	801be4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be42:	2b00      	cmp	r3, #0
 801be44:	db02      	blt.n	801be4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be46:	4563      	cmp	r3, ip
 801be48:	f2c0 809e 	blt.w	801bf88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801be4c:	f11e 0e01 	adds.w	lr, lr, #1
 801be50:	f100 808f 	bmi.w	801bf72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801be54:	4571      	cmp	r1, lr
 801be56:	f2c0 808c 	blt.w	801bf72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801be5a:	3301      	adds	r3, #1
 801be5c:	f100 8089 	bmi.w	801bf72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801be60:	429a      	cmp	r2, r3
 801be62:	f2c0 8086 	blt.w	801bf72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801be66:	46c8      	mov	r8, r9
 801be68:	f8dd b018 	ldr.w	fp, [sp, #24]
 801be6c:	f1bb 0f00 	cmp.w	fp, #0
 801be70:	f340 80a6 	ble.w	801bfc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801be74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801be76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be78:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801be7c:	1422      	asrs	r2, r4, #16
 801be7e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801be82:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801be86:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801be8a:	689b      	ldr	r3, [r3, #8]
 801be8c:	f100 80e3 	bmi.w	801c056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801be90:	f103 3aff 	add.w	sl, r3, #4294967295
 801be94:	4552      	cmp	r2, sl
 801be96:	f280 80de 	bge.w	801c056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801be9a:	f1bc 0f00 	cmp.w	ip, #0
 801be9e:	f2c0 80da 	blt.w	801c056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bea2:	f10e 3aff 	add.w	sl, lr, #4294967295
 801bea6:	45d4      	cmp	ip, sl
 801bea8:	f280 80d5 	bge.w	801c056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801beac:	b21b      	sxth	r3, r3
 801beae:	fb0c 2203 	mla	r2, ip, r3, r2
 801beb2:	9d07      	ldr	r5, [sp, #28]
 801beb4:	eb05 0a02 	add.w	sl, r5, r2
 801beb8:	5caa      	ldrb	r2, [r5, r2]
 801beba:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f000 80c0 	beq.w	801c044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bec4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801bec8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801becc:	920b      	str	r2, [sp, #44]	; 0x2c
 801bece:	b151      	cbz	r1, 801bee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801bed0:	eb0a 0203 	add.w	r2, sl, r3
 801bed4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801bed8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801bedc:	9309      	str	r3, [sp, #36]	; 0x24
 801bede:	7853      	ldrb	r3, [r2, #1]
 801bee0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801bee4:	930c      	str	r3, [sp, #48]	; 0x30
 801bee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bee8:	fb10 f201 	smulbb	r2, r0, r1
 801beec:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bef0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bef4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bef8:	ea4c 0c03 	orr.w	ip, ip, r3
 801befc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801befe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bf00:	041b      	lsls	r3, r3, #16
 801bf02:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bf06:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801bf0a:	10d2      	asrs	r2, r2, #3
 801bf0c:	432b      	orrs	r3, r5
 801bf0e:	4353      	muls	r3, r2
 801bf10:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801bf14:	fb0a 330c 	mla	r3, sl, ip, r3
 801bf18:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801bf1c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bf20:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801bf24:	ea4c 0e0e 	orr.w	lr, ip, lr
 801bf28:	f1c1 0c10 	rsb	ip, r1, #16
 801bf2c:	ebac 0c00 	sub.w	ip, ip, r0
 801bf30:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bf34:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf3a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801bf3e:	0418      	lsls	r0, r3, #16
 801bf40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801bf44:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bf48:	4318      	orrs	r0, r3
 801bf4a:	fb02 c200 	mla	r2, r2, r0, ip
 801bf4e:	0d53      	lsrs	r3, r2, #21
 801bf50:	0952      	lsrs	r2, r2, #5
 801bf52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bf56:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bf5a:	431a      	orrs	r2, r3
 801bf5c:	f8a8 2000 	strh.w	r2, [r8]
 801bf60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bf62:	f108 0802 	add.w	r8, r8, #2
 801bf66:	441c      	add	r4, r3
 801bf68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bf6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bf6e:	441e      	add	r6, r3
 801bf70:	e77c      	b.n	801be6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bf72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bf74:	f109 0902 	add.w	r9, r9, #2
 801bf78:	441c      	add	r4, r3
 801bf7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bf7c:	441e      	add	r6, r3
 801bf7e:	9b06      	ldr	r3, [sp, #24]
 801bf80:	3b01      	subs	r3, #1
 801bf82:	9306      	str	r3, [sp, #24]
 801bf84:	e752      	b.n	801be2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf86:	d020      	beq.n	801bfca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bf88:	9b06      	ldr	r3, [sp, #24]
 801bf8a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801bf8c:	3b01      	subs	r3, #1
 801bf8e:	fb00 4003 	mla	r0, r0, r3, r4
 801bf92:	1400      	asrs	r0, r0, #16
 801bf94:	f53f af67 	bmi.w	801be66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bf98:	3901      	subs	r1, #1
 801bf9a:	4288      	cmp	r0, r1
 801bf9c:	f6bf af63 	bge.w	801be66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bfa0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801bfa2:	fb01 6303 	mla	r3, r1, r3, r6
 801bfa6:	141b      	asrs	r3, r3, #16
 801bfa8:	f53f af5d 	bmi.w	801be66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bfac:	3a01      	subs	r2, #1
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	f6bf af59 	bge.w	801be66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bfb4:	46ca      	mov	sl, r9
 801bfb6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bfba:	f1b8 0f00 	cmp.w	r8, #0
 801bfbe:	dc67      	bgt.n	801c090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801bfc0:	9b06      	ldr	r3, [sp, #24]
 801bfc2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801bfc6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801bfca:	9b08      	ldr	r3, [sp, #32]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	f340 80d7 	ble.w	801c180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801bfd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bfd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bfda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bfde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfe2:	eeb0 6a62 	vmov.f32	s12, s5
 801bfe6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bff2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bff6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bffa:	ee16 4a10 	vmov	r4, s12
 801bffe:	eeb0 6a43 	vmov.f32	s12, s6
 801c002:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c006:	ee12 2a90 	vmov	r2, s5
 801c00a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c00e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c010:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c014:	fb92 f3f3 	sdiv	r3, r2, r3
 801c018:	ee13 2a10 	vmov	r2, s6
 801c01c:	931f      	str	r3, [sp, #124]	; 0x7c
 801c01e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c020:	ee16 6a10 	vmov	r6, s12
 801c024:	fb92 f3f3 	sdiv	r3, r2, r3
 801c028:	9320      	str	r3, [sp, #128]	; 0x80
 801c02a:	9b08      	ldr	r3, [sp, #32]
 801c02c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c02e:	3b01      	subs	r3, #1
 801c030:	9308      	str	r3, [sp, #32]
 801c032:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c034:	bf08      	it	eq
 801c036:	4613      	moveq	r3, r2
 801c038:	eeb0 3a67 	vmov.f32	s6, s15
 801c03c:	9306      	str	r3, [sp, #24]
 801c03e:	eef0 2a47 	vmov.f32	s5, s14
 801c042:	e6e4      	b.n	801be0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c044:	2900      	cmp	r1, #0
 801c046:	f43f af4e 	beq.w	801bee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c04a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c04e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c052:	9309      	str	r3, [sp, #36]	; 0x24
 801c054:	e747      	b.n	801bee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c056:	f112 0a01 	adds.w	sl, r2, #1
 801c05a:	d481      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c05c:	4553      	cmp	r3, sl
 801c05e:	f6ff af7f 	blt.w	801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c062:	f11c 0a01 	adds.w	sl, ip, #1
 801c066:	f53f af7b 	bmi.w	801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c06a:	45d6      	cmp	lr, sl
 801c06c:	f6ff af78 	blt.w	801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c070:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801c074:	b21b      	sxth	r3, r3
 801c076:	fa0f f28e 	sxth.w	r2, lr
 801c07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c07e:	9201      	str	r2, [sp, #4]
 801c080:	9300      	str	r3, [sp, #0]
 801c082:	9a07      	ldr	r2, [sp, #28]
 801c084:	463b      	mov	r3, r7
 801c086:	4641      	mov	r1, r8
 801c088:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c08a:	f7ff fe21 	bl	801bcd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c08e:	e767      	b.n	801bf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c090:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c092:	1422      	asrs	r2, r4, #16
 801c094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c098:	1431      	asrs	r1, r6, #16
 801c09a:	fb03 2101 	mla	r1, r3, r1, r2
 801c09e:	9d07      	ldr	r5, [sp, #28]
 801c0a0:	9a07      	ldr	r2, [sp, #28]
 801c0a2:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801c0a6:	440a      	add	r2, r1
 801c0a8:	5c69      	ldrb	r1, [r5, r1]
 801c0aa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c0ae:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801c0b2:	f1be 0f00 	cmp.w	lr, #0
 801c0b6:	d05c      	beq.n	801c172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801c0b8:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c0bc:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801c0c0:	950d      	str	r5, [sp, #52]	; 0x34
 801c0c2:	b150      	cbz	r0, 801c0da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c0c4:	eb02 0c03 	add.w	ip, r2, r3
 801c0c8:	5cd3      	ldrb	r3, [r2, r3]
 801c0ca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c0ce:	930a      	str	r3, [sp, #40]	; 0x28
 801c0d0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c0d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c0d8:	930e      	str	r3, [sp, #56]	; 0x38
 801c0da:	fb1e f200 	smulbb	r2, lr, r0
 801c0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0e0:	10d2      	asrs	r2, r2, #3
 801c0e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c0e6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c0ea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c0ee:	ea4c 0c03 	orr.w	ip, ip, r3
 801c0f2:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801c0f6:	9311      	str	r3, [sp, #68]	; 0x44
 801c0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c0fc:	041b      	lsls	r3, r3, #16
 801c0fe:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801c102:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c106:	ea43 030b 	orr.w	r3, r3, fp
 801c10a:	4353      	muls	r3, r2
 801c10c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c10e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c112:	fb05 3c0c 	mla	ip, r5, ip, r3
 801c116:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c11a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c11e:	ea43 0b01 	orr.w	fp, r3, r1
 801c122:	f1c0 0110 	rsb	r1, r0, #16
 801c126:	eba1 0e0e 	sub.w	lr, r1, lr
 801c12a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801c12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c130:	fb0e cc0b 	mla	ip, lr, fp, ip
 801c134:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801c138:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801c13c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c140:	ea4b 0e0e 	orr.w	lr, fp, lr
 801c144:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c148:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c14c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801c150:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c154:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c158:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c15c:	ea43 0c0c 	orr.w	ip, r3, ip
 801c160:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c162:	f82a cb02 	strh.w	ip, [sl], #2
 801c166:	441c      	add	r4, r3
 801c168:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c16a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c16e:	441e      	add	r6, r3
 801c170:	e723      	b.n	801bfba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c172:	2800      	cmp	r0, #0
 801c174:	d0b1      	beq.n	801c0da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c176:	5cd3      	ldrb	r3, [r2, r3]
 801c178:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c17c:	930a      	str	r3, [sp, #40]	; 0x28
 801c17e:	e7ac      	b.n	801c0da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c180:	b013      	add	sp, #76	; 0x4c
 801c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801c186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c18a:	880d      	ldrh	r5, [r1, #0]
 801c18c:	b087      	sub	sp, #28
 801c18e:	10ef      	asrs	r7, r5, #3
 801c190:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801c194:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c198:	00ed      	lsls	r5, r5, #3
 801c19a:	9701      	str	r7, [sp, #4]
 801c19c:	b2ed      	uxtb	r5, r5
 801c19e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801c1a2:	9502      	str	r5, [sp, #8]
 801c1a4:	9d01      	ldr	r5, [sp, #4]
 801c1a6:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801c1aa:	fb06 0709 	mla	r7, r6, r9, r0
 801c1ae:	9103      	str	r1, [sp, #12]
 801c1b0:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801c1b4:	022d      	lsls	r5, r5, #8
 801c1b6:	9902      	ldr	r1, [sp, #8]
 801c1b8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801c1bc:	430d      	orrs	r5, r1
 801c1be:	2e00      	cmp	r6, #0
 801c1c0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c1c4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801c1c8:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801c1cc:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801c1d0:	eb02 0c07 	add.w	ip, r2, r7
 801c1d4:	9505      	str	r5, [sp, #20]
 801c1d6:	f2c0 80b6 	blt.w	801c346 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c1da:	45b3      	cmp	fp, r6
 801c1dc:	f340 80b3 	ble.w	801c346 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c1e0:	2800      	cmp	r0, #0
 801c1e2:	f2c0 80ae 	blt.w	801c342 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c1e6:	4581      	cmp	r9, r0
 801c1e8:	f340 80ab 	ble.w	801c342 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c1ec:	5dd7      	ldrb	r7, [r2, r7]
 801c1ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c1f2:	441f      	add	r7, r3
 801c1f4:	1c42      	adds	r2, r0, #1
 801c1f6:	f100 80a9 	bmi.w	801c34c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c1fa:	4591      	cmp	r9, r2
 801c1fc:	f340 80a6 	ble.w	801c34c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c200:	2c00      	cmp	r4, #0
 801c202:	f000 80a3 	beq.w	801c34c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c206:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c20a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c20e:	441d      	add	r5, r3
 801c210:	3601      	adds	r6, #1
 801c212:	f100 809f 	bmi.w	801c354 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c216:	45b3      	cmp	fp, r6
 801c218:	f340 809c 	ble.w	801c354 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c21c:	f1be 0f00 	cmp.w	lr, #0
 801c220:	f000 8098 	beq.w	801c354 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c224:	2800      	cmp	r0, #0
 801c226:	f2c0 8093 	blt.w	801c350 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c22a:	4581      	cmp	r9, r0
 801c22c:	f340 8090 	ble.w	801c350 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c230:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801c234:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c238:	441e      	add	r6, r3
 801c23a:	3001      	adds	r0, #1
 801c23c:	f100 808d 	bmi.w	801c35a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c240:	4581      	cmp	r9, r0
 801c242:	f340 808a 	ble.w	801c35a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c246:	2c00      	cmp	r4, #0
 801c248:	f000 8087 	beq.w	801c35a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c24c:	44e1      	add	r9, ip
 801c24e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c256:	4413      	add	r3, r2
 801c258:	b2a4      	uxth	r4, r4
 801c25a:	fa1f fe8e 	uxth.w	lr, lr
 801c25e:	fb04 fb0e 	mul.w	fp, r4, lr
 801c262:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801c266:	fa1f f08e 	uxth.w	r0, lr
 801c26a:	fa1f fe88 	uxth.w	lr, r8
 801c26e:	ea6f 0808 	mvn.w	r8, r8
 801c272:	0124      	lsls	r4, r4, #4
 801c274:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801c278:	eba4 040b 	sub.w	r4, r4, fp
 801c27c:	b2a2      	uxth	r2, r4
 801c27e:	78ac      	ldrb	r4, [r5, #2]
 801c280:	f897 c002 	ldrb.w	ip, [r7, #2]
 801c284:	4354      	muls	r4, r2
 801c286:	eba9 0900 	sub.w	r9, r9, r0
 801c28a:	fa1f f989 	uxth.w	r9, r9
 801c28e:	fb09 440c 	mla	r4, r9, ip, r4
 801c292:	f896 c002 	ldrb.w	ip, [r6, #2]
 801c296:	fa5f f888 	uxtb.w	r8, r8
 801c29a:	fb00 440c 	mla	r4, r0, ip, r4
 801c29e:	f893 c002 	ldrb.w	ip, [r3, #2]
 801c2a2:	fb1a fa08 	smulbb	sl, sl, r8
 801c2a6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801c2aa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c2ae:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c2b2:	f895 a001 	ldrb.w	sl, [r5, #1]
 801c2b6:	782d      	ldrb	r5, [r5, #0]
 801c2b8:	fb02 fa0a 	mul.w	sl, r2, sl
 801c2bc:	436a      	muls	r2, r5
 801c2be:	787c      	ldrb	r4, [r7, #1]
 801c2c0:	783f      	ldrb	r7, [r7, #0]
 801c2c2:	fb09 aa04 	mla	sl, r9, r4, sl
 801c2c6:	fb09 2207 	mla	r2, r9, r7, r2
 801c2ca:	7874      	ldrb	r4, [r6, #1]
 801c2cc:	7835      	ldrb	r5, [r6, #0]
 801c2ce:	fb00 aa04 	mla	sl, r0, r4, sl
 801c2d2:	fb00 2005 	mla	r0, r0, r5, r2
 801c2d6:	785c      	ldrb	r4, [r3, #1]
 801c2d8:	781b      	ldrb	r3, [r3, #0]
 801c2da:	fb0b a404 	mla	r4, fp, r4, sl
 801c2de:	9901      	ldr	r1, [sp, #4]
 801c2e0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c2e4:	9b02      	ldr	r3, [sp, #8]
 801c2e6:	fb11 fa08 	smulbb	sl, r1, r8
 801c2ea:	fb13 f808 	smulbb	r8, r3, r8
 801c2ee:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c2f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c2f6:	fb04 a40e 	mla	r4, r4, lr, sl
 801c2fa:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801c2fe:	fa1f fc8c 	uxth.w	ip, ip
 801c302:	f10c 0301 	add.w	r3, ip, #1
 801c306:	fa1f fe8e 	uxth.w	lr, lr
 801c30a:	b2a4      	uxth	r4, r4
 801c30c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c310:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801c314:	f104 0a01 	add.w	sl, r4, #1
 801c318:	f10e 0c01 	add.w	ip, lr, #1
 801c31c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c320:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c324:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c328:	0964      	lsrs	r4, r4, #5
 801c32a:	ea4c 0c03 	orr.w	ip, ip, r3
 801c32e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c332:	9b03      	ldr	r3, [sp, #12]
 801c334:	ea4c 0c04 	orr.w	ip, ip, r4
 801c338:	f8a3 c000 	strh.w	ip, [r3]
 801c33c:	b007      	add	sp, #28
 801c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c342:	af05      	add	r7, sp, #20
 801c344:	e756      	b.n	801c1f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801c346:	ad05      	add	r5, sp, #20
 801c348:	462f      	mov	r7, r5
 801c34a:	e761      	b.n	801c210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c34c:	ad05      	add	r5, sp, #20
 801c34e:	e75f      	b.n	801c210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c350:	ae05      	add	r6, sp, #20
 801c352:	e772      	b.n	801c23a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801c354:	ab05      	add	r3, sp, #20
 801c356:	461e      	mov	r6, r3
 801c358:	e77e      	b.n	801c258 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801c35a:	ab05      	add	r3, sp, #20
 801c35c:	e77c      	b.n	801c258 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801c35e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c362:	b095      	sub	sp, #84	; 0x54
 801c364:	9212      	str	r2, [sp, #72]	; 0x48
 801c366:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c368:	9013      	str	r0, [sp, #76]	; 0x4c
 801c36a:	9309      	str	r3, [sp, #36]	; 0x24
 801c36c:	6850      	ldr	r0, [r2, #4]
 801c36e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801c372:	910e      	str	r1, [sp, #56]	; 0x38
 801c374:	930f      	str	r3, [sp, #60]	; 0x3c
 801c376:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801c37a:	fb00 1303 	mla	r3, r0, r3, r1
 801c37e:	6812      	ldr	r2, [r2, #0]
 801c380:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c384:	930a      	str	r3, [sp, #40]	; 0x28
 801c386:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	930d      	str	r3, [sp, #52]	; 0x34
 801c38c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c38e:	685c      	ldr	r4, [r3, #4]
 801c390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c392:	3404      	adds	r4, #4
 801c394:	43db      	mvns	r3, r3
 801c396:	b2db      	uxtb	r3, r3
 801c398:	930b      	str	r3, [sp, #44]	; 0x2c
 801c39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	dc03      	bgt.n	801c3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c3a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	f340 8255 	ble.w	801c852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c3a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c3aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c3b2:	1e48      	subs	r0, r1, #1
 801c3b4:	1e55      	subs	r5, r2, #1
 801c3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	f340 80f9 	ble.w	801c5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c3be:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801c3c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c3c2:	1436      	asrs	r6, r6, #16
 801c3c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c3c8:	d406      	bmi.n	801c3d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3ca:	4286      	cmp	r6, r0
 801c3cc:	da04      	bge.n	801c3d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	db02      	blt.n	801c3d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c3d2:	42ab      	cmp	r3, r5
 801c3d4:	f2c0 80ed 	blt.w	801c5b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c3d8:	3601      	adds	r6, #1
 801c3da:	f100 80da 	bmi.w	801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c3de:	42b1      	cmp	r1, r6
 801c3e0:	f2c0 80d7 	blt.w	801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c3e4:	3301      	adds	r3, #1
 801c3e6:	f100 80d4 	bmi.w	801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	f2c0 80d1 	blt.w	801c592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3f2:	9311      	str	r3, [sp, #68]	; 0x44
 801c3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3f6:	930c      	str	r3, [sp, #48]	; 0x30
 801c3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	f340 80fa 	ble.w	801c5f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c400:	9826      	ldr	r0, [sp, #152]	; 0x98
 801c402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c406:	68c6      	ldr	r6, [r0, #12]
 801c408:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c40a:	141d      	asrs	r5, r3, #16
 801c40c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c412:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c414:	1400      	asrs	r0, r0, #16
 801c416:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c41a:	6892      	ldr	r2, [r2, #8]
 801c41c:	f100 813e 	bmi.w	801c69c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c420:	1e57      	subs	r7, r2, #1
 801c422:	42b8      	cmp	r0, r7
 801c424:	f280 813a 	bge.w	801c69c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c428:	2d00      	cmp	r5, #0
 801c42a:	f2c0 8137 	blt.w	801c69c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c42e:	1e77      	subs	r7, r6, #1
 801c430:	42bd      	cmp	r5, r7
 801c432:	f280 8133 	bge.w	801c69c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c436:	b212      	sxth	r2, r2
 801c438:	fb05 0002 	mla	r0, r5, r2, r0
 801c43c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c43e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801c442:	182e      	adds	r6, r5, r0
 801c444:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801c448:	eb04 050a 	add.w	r5, r4, sl
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	f000 8117 	beq.w	801c680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c452:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c456:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c45a:	44a4      	add	ip, r4
 801c45c:	2900      	cmp	r1, #0
 801c45e:	f000 8117 	beq.w	801c690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c462:	18b0      	adds	r0, r6, r2
 801c464:	7840      	ldrb	r0, [r0, #1]
 801c466:	5cb2      	ldrb	r2, [r6, r2]
 801c468:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c46c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c470:	4422      	add	r2, r4
 801c472:	4420      	add	r0, r4
 801c474:	b29b      	uxth	r3, r3
 801c476:	b289      	uxth	r1, r1
 801c478:	fb03 f901 	mul.w	r9, r3, r1
 801c47c:	011b      	lsls	r3, r3, #4
 801c47e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801c482:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801c486:	eba3 0309 	sub.w	r3, r3, r9
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	435f      	muls	r7, r3
 801c48e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c492:	b289      	uxth	r1, r1
 801c494:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c498:	eba8 0801 	sub.w	r8, r8, r1
 801c49c:	fa1f f888 	uxth.w	r8, r8
 801c4a0:	fb08 770b 	mla	r7, r8, fp, r7
 801c4a4:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c4a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c4aa:	fb01 770b 	mla	r7, r1, fp, r7
 801c4ae:	f8b6 e000 	ldrh.w	lr, [r6]
 801c4b2:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c4b6:	9310      	str	r3, [sp, #64]	; 0x40
 801c4b8:	fb09 770b 	mla	r7, r9, fp, r7
 801c4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4be:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801c4c2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c4c6:	fb1b fb03 	smulbb	fp, fp, r3
 801c4ca:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801c4ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c4d2:	fb07 b706 	mla	r7, r7, r6, fp
 801c4d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c4d8:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c4dc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c4e0:	f89c c000 	ldrb.w	ip, [ip]
 801c4e4:	435d      	muls	r5, r3
 801c4e6:	fb08 550b 	mla	r5, r8, fp, r5
 801c4ea:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4f0:	fb01 550b 	mla	r5, r1, fp, r5
 801c4f4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c4f8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801c4fc:	fb09 550b 	mla	r5, r9, fp, r5
 801c500:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801c504:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c508:	fb1b fb03 	smulbb	fp, fp, r3
 801c50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c50e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c512:	fb03 f30c 	mul.w	r3, r3, ip
 801c516:	fb08 330a 	mla	r3, r8, sl, r3
 801c51a:	f892 c000 	ldrb.w	ip, [r2]
 801c51e:	fa5f fe8e 	uxtb.w	lr, lr
 801c522:	fb01 330c 	mla	r3, r1, ip, r3
 801c526:	f890 c000 	ldrb.w	ip, [r0]
 801c52a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c52e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c534:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c538:	fb1e fe03 	smulbb	lr, lr, r3
 801c53c:	fb05 b506 	mla	r5, r5, r6, fp
 801c540:	fb0c e606 	mla	r6, ip, r6, lr
 801c544:	b2bf      	uxth	r7, r7
 801c546:	1c7b      	adds	r3, r7, #1
 801c548:	b2ad      	uxth	r5, r5
 801c54a:	b2b6      	uxth	r6, r6
 801c54c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c550:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801c554:	f105 0b01 	add.w	fp, r5, #1
 801c558:	1c77      	adds	r7, r6, #1
 801c55a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c55e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c562:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c566:	096d      	lsrs	r5, r5, #5
 801c568:	431f      	orrs	r7, r3
 801c56a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c570:	433d      	orrs	r5, r7
 801c572:	801d      	strh	r5, [r3, #0]
 801c574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c576:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c578:	3302      	adds	r3, #2
 801c57a:	930c      	str	r3, [sp, #48]	; 0x30
 801c57c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c57e:	4413      	add	r3, r2
 801c580:	931f      	str	r3, [sp, #124]	; 0x7c
 801c582:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c584:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c586:	4413      	add	r3, r2
 801c588:	9320      	str	r3, [sp, #128]	; 0x80
 801c58a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c58c:	3b01      	subs	r3, #1
 801c58e:	9311      	str	r3, [sp, #68]	; 0x44
 801c590:	e732      	b.n	801c3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c594:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801c596:	4433      	add	r3, r6
 801c598:	931f      	str	r3, [sp, #124]	; 0x7c
 801c59a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801c59c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c59e:	4433      	add	r3, r6
 801c5a0:	9320      	str	r3, [sp, #128]	; 0x80
 801c5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5a4:	3b01      	subs	r3, #1
 801c5a6:	9309      	str	r3, [sp, #36]	; 0x24
 801c5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5aa:	3302      	adds	r3, #2
 801c5ac:	930a      	str	r3, [sp, #40]	; 0x28
 801c5ae:	e702      	b.n	801c3b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c5b0:	d027      	beq.n	801c602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801c5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5b4:	9821      	ldr	r0, [sp, #132]	; 0x84
 801c5b6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801c5b8:	3b01      	subs	r3, #1
 801c5ba:	fb00 5003 	mla	r0, r0, r3, r5
 801c5be:	1400      	asrs	r0, r0, #16
 801c5c0:	f53f af16 	bmi.w	801c3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c5c4:	3901      	subs	r1, #1
 801c5c6:	4288      	cmp	r0, r1
 801c5c8:	f6bf af12 	bge.w	801c3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c5cc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801c5ce:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c5d0:	fb01 0303 	mla	r3, r1, r3, r0
 801c5d4:	141b      	asrs	r3, r3, #16
 801c5d6:	f53f af0b 	bmi.w	801c3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c5da:	3a01      	subs	r2, #1
 801c5dc:	4293      	cmp	r3, r2
 801c5de:	f6bf af07 	bge.w	801c3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5e4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801c5e8:	9311      	str	r3, [sp, #68]	; 0x44
 801c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5ec:	930c      	str	r3, [sp, #48]	; 0x30
 801c5ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	dc70      	bgt.n	801c6d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c5f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c600:	930a      	str	r3, [sp, #40]	; 0x28
 801c602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c604:	2b00      	cmp	r3, #0
 801c606:	f340 8124 	ble.w	801c852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c60a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c60e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c612:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c61a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c61e:	eef0 6a62 	vmov.f32	s13, s5
 801c622:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c626:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c62a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c62e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c632:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c636:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801c63a:	eef0 6a43 	vmov.f32	s13, s6
 801c63e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c642:	ee12 2a90 	vmov	r2, s5
 801c646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c64a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c64c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c650:	fb92 f3f3 	sdiv	r3, r2, r3
 801c654:	ee13 2a10 	vmov	r2, s6
 801c658:	9321      	str	r3, [sp, #132]	; 0x84
 801c65a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c65c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801c660:	fb92 f3f3 	sdiv	r3, r2, r3
 801c664:	9322      	str	r3, [sp, #136]	; 0x88
 801c666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c668:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c66a:	3b01      	subs	r3, #1
 801c66c:	930e      	str	r3, [sp, #56]	; 0x38
 801c66e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c670:	bf08      	it	eq
 801c672:	4613      	moveq	r3, r2
 801c674:	eeb0 3a67 	vmov.f32	s6, s15
 801c678:	9309      	str	r3, [sp, #36]	; 0x24
 801c67a:	eef0 2a47 	vmov.f32	s5, s14
 801c67e:	e68c      	b.n	801c39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c680:	b149      	cbz	r1, 801c696 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801c682:	4628      	mov	r0, r5
 801c684:	5cb2      	ldrb	r2, [r6, r2]
 801c686:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c68a:	4422      	add	r2, r4
 801c68c:	46ac      	mov	ip, r5
 801c68e:	e6f1      	b.n	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c690:	4628      	mov	r0, r5
 801c692:	462a      	mov	r2, r5
 801c694:	e6ee      	b.n	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c696:	4628      	mov	r0, r5
 801c698:	462a      	mov	r2, r5
 801c69a:	e7f7      	b.n	801c68c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801c69c:	1c47      	adds	r7, r0, #1
 801c69e:	f53f af69 	bmi.w	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c6a2:	42ba      	cmp	r2, r7
 801c6a4:	f6ff af66 	blt.w	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c6a8:	1c6f      	adds	r7, r5, #1
 801c6aa:	f53f af63 	bmi.w	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c6ae:	42be      	cmp	r6, r7
 801c6b0:	f6ff af60 	blt.w	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c6b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c6b6:	b236      	sxth	r6, r6
 801c6b8:	b212      	sxth	r2, r2
 801c6ba:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801c6be:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c6c2:	9002      	str	r0, [sp, #8]
 801c6c4:	9200      	str	r2, [sp, #0]
 801c6c6:	9601      	str	r6, [sp, #4]
 801c6c8:	4623      	mov	r3, r4
 801c6ca:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801c6ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c6d0:	f7ff fd59 	bl	801c186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801c6d4:	e74e      	b.n	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c6d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c6d8:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c6da:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c6de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c6e0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801c6e2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c6e6:	142d      	asrs	r5, r5, #16
 801c6e8:	1400      	asrs	r0, r0, #16
 801c6ea:	fb02 5000 	mla	r0, r2, r0, r5
 801c6ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c6f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c6f2:	f815 9000 	ldrb.w	r9, [r5, r0]
 801c6f6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c6fa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c6fe:	182e      	adds	r6, r5, r0
 801c700:	eb04 0509 	add.w	r5, r4, r9
 801c704:	2b00      	cmp	r3, #0
 801c706:	f000 8096 	beq.w	801c836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801c70a:	7877      	ldrb	r7, [r6, #1]
 801c70c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c710:	4427      	add	r7, r4
 801c712:	2900      	cmp	r1, #0
 801c714:	f000 8097 	beq.w	801c846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801c718:	18b0      	adds	r0, r6, r2
 801c71a:	7840      	ldrb	r0, [r0, #1]
 801c71c:	5cb2      	ldrb	r2, [r6, r2]
 801c71e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c726:	4422      	add	r2, r4
 801c728:	4420      	add	r0, r4
 801c72a:	b29b      	uxth	r3, r3
 801c72c:	b289      	uxth	r1, r1
 801c72e:	fb03 f801 	mul.w	r8, r3, r1
 801c732:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c734:	011b      	lsls	r3, r3, #4
 801c736:	f8b6 c000 	ldrh.w	ip, [r6]
 801c73a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c73e:	78be      	ldrb	r6, [r7, #2]
 801c740:	eba3 0308 	sub.w	r3, r3, r8
 801c744:	b29b      	uxth	r3, r3
 801c746:	435e      	muls	r6, r3
 801c748:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c74c:	b289      	uxth	r1, r1
 801c74e:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c752:	ebae 0e01 	sub.w	lr, lr, r1
 801c756:	fa1f fe8e 	uxth.w	lr, lr
 801c75a:	fb0e 660b 	mla	r6, lr, fp, r6
 801c75e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c762:	9310      	str	r3, [sp, #64]	; 0x40
 801c764:	fb01 660b 	mla	r6, r1, fp, r6
 801c768:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c76e:	fb08 660b 	mla	r6, r8, fp, r6
 801c772:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801c776:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c77a:	fb1b fb03 	smulbb	fp, fp, r3
 801c77e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c782:	fb06 b60a 	mla	r6, r6, sl, fp
 801c786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c788:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c78c:	787d      	ldrb	r5, [r7, #1]
 801c78e:	783f      	ldrb	r7, [r7, #0]
 801c790:	435d      	muls	r5, r3
 801c792:	fb0e 550b 	mla	r5, lr, fp, r5
 801c796:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c79c:	fb01 550b 	mla	r5, r1, fp, r5
 801c7a0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c7a4:	f814 9009 	ldrb.w	r9, [r4, r9]
 801c7a8:	fb08 550b 	mla	r5, r8, fp, r5
 801c7ac:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801c7b0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c7b4:	fb1b fb03 	smulbb	fp, fp, r3
 801c7b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c7ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c7be:	437b      	muls	r3, r7
 801c7c0:	fb0e 3309 	mla	r3, lr, r9, r3
 801c7c4:	7817      	ldrb	r7, [r2, #0]
 801c7c6:	fa5f fc8c 	uxtb.w	ip, ip
 801c7ca:	fb01 3307 	mla	r3, r1, r7, r3
 801c7ce:	7807      	ldrb	r7, [r0, #0]
 801c7d0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c7d4:	fb08 3707 	mla	r7, r8, r7, r3
 801c7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c7de:	fb1c fc03 	smulbb	ip, ip, r3
 801c7e2:	fb05 b50a 	mla	r5, r5, sl, fp
 801c7e6:	fb07 c70a 	mla	r7, r7, sl, ip
 801c7ea:	b2b6      	uxth	r6, r6
 801c7ec:	b2ad      	uxth	r5, r5
 801c7ee:	b2bf      	uxth	r7, r7
 801c7f0:	1c73      	adds	r3, r6, #1
 801c7f2:	1c7a      	adds	r2, r7, #1
 801c7f4:	f105 0b01 	add.w	fp, r5, #1
 801c7f8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c7fc:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801c800:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c804:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c808:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c80c:	096d      	lsrs	r5, r5, #5
 801c80e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c810:	4316      	orrs	r6, r2
 801c812:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c816:	432e      	orrs	r6, r5
 801c818:	f823 6b02 	strh.w	r6, [r3], #2
 801c81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c81e:	930c      	str	r3, [sp, #48]	; 0x30
 801c820:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c822:	4413      	add	r3, r2
 801c824:	931f      	str	r3, [sp, #124]	; 0x7c
 801c826:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c828:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c82a:	4413      	add	r3, r2
 801c82c:	9320      	str	r3, [sp, #128]	; 0x80
 801c82e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c830:	3b01      	subs	r3, #1
 801c832:	9311      	str	r3, [sp, #68]	; 0x44
 801c834:	e6db      	b.n	801c5ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801c836:	b149      	cbz	r1, 801c84c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801c838:	4628      	mov	r0, r5
 801c83a:	5cb2      	ldrb	r2, [r6, r2]
 801c83c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c840:	4422      	add	r2, r4
 801c842:	462f      	mov	r7, r5
 801c844:	e771      	b.n	801c72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c846:	4628      	mov	r0, r5
 801c848:	462a      	mov	r2, r5
 801c84a:	e76e      	b.n	801c72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c84c:	4628      	mov	r0, r5
 801c84e:	462a      	mov	r2, r5
 801c850:	e7f7      	b.n	801c842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801c852:	b015      	add	sp, #84	; 0x54
 801c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c858 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801c858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c85c:	880f      	ldrh	r7, [r1, #0]
 801c85e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801c862:	023c      	lsls	r4, r7, #8
 801c864:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801c868:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801c86c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801c870:	017c      	lsls	r4, r7, #5
 801c872:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801c876:	00ff      	lsls	r7, r7, #3
 801c878:	ea4b 0404 	orr.w	r4, fp, r4
 801c87c:	b2ff      	uxtb	r7, r7
 801c87e:	4327      	orrs	r7, r4
 801c880:	2d00      	cmp	r5, #0
 801c882:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c886:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801c88a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801c88e:	eb02 080a 	add.w	r8, r2, sl
 801c892:	9701      	str	r7, [sp, #4]
 801c894:	db7e      	blt.n	801c994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801c896:	45a9      	cmp	r9, r5
 801c898:	dd7c      	ble.n	801c994 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801c89a:	f1bc 0f00 	cmp.w	ip, #0
 801c89e:	db77      	blt.n	801c990 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801c8a0:	45e6      	cmp	lr, ip
 801c8a2:	dd75      	ble.n	801c990 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801c8a4:	f812 700a 	ldrb.w	r7, [r2, sl]
 801c8a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8ac:	441f      	add	r7, r3
 801c8ae:	f11c 0201 	adds.w	r2, ip, #1
 801c8b2:	d472      	bmi.n	801c99a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c8b4:	4596      	cmp	lr, r2
 801c8b6:	dd70      	ble.n	801c99a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c8b8:	2800      	cmp	r0, #0
 801c8ba:	d06e      	beq.n	801c99a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c8bc:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c8c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c8c4:	441c      	add	r4, r3
 801c8c6:	3501      	adds	r5, #1
 801c8c8:	d46b      	bmi.n	801c9a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c8ca:	45a9      	cmp	r9, r5
 801c8cc:	dd69      	ble.n	801c9a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c8ce:	2e00      	cmp	r6, #0
 801c8d0:	d067      	beq.n	801c9a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c8d2:	f1bc 0f00 	cmp.w	ip, #0
 801c8d6:	db62      	blt.n	801c99e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801c8d8:	45e6      	cmp	lr, ip
 801c8da:	dd60      	ble.n	801c99e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801c8dc:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c8e4:	441d      	add	r5, r3
 801c8e6:	f11c 0201 	adds.w	r2, ip, #1
 801c8ea:	d45d      	bmi.n	801c9a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c8ec:	4596      	cmp	lr, r2
 801c8ee:	dd5b      	ble.n	801c9a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	d059      	beq.n	801c9a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c8f4:	44c6      	add	lr, r8
 801c8f6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c8fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8fe:	4413      	add	r3, r2
 801c900:	b280      	uxth	r0, r0
 801c902:	b2b2      	uxth	r2, r6
 801c904:	fb00 f602 	mul.w	r6, r0, r2
 801c908:	0100      	lsls	r0, r0, #4
 801c90a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c90e:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801c912:	1b80      	subs	r0, r0, r6
 801c914:	fa1f fc82 	uxth.w	ip, r2
 801c918:	b282      	uxth	r2, r0
 801c91a:	78a0      	ldrb	r0, [r4, #2]
 801c91c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801c920:	4350      	muls	r0, r2
 801c922:	eba8 080c 	sub.w	r8, r8, ip
 801c926:	fa1f f888 	uxth.w	r8, r8
 801c92a:	fb08 0e0e 	mla	lr, r8, lr, r0
 801c92e:	78a8      	ldrb	r0, [r5, #2]
 801c930:	f897 9000 	ldrb.w	r9, [r7]
 801c934:	fb0c e000 	mla	r0, ip, r0, lr
 801c938:	f893 e002 	ldrb.w	lr, [r3, #2]
 801c93c:	787f      	ldrb	r7, [r7, #1]
 801c93e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801c942:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801c946:	f894 e000 	ldrb.w	lr, [r4]
 801c94a:	fb02 fe0e 	mul.w	lr, r2, lr
 801c94e:	fb08 e909 	mla	r9, r8, r9, lr
 801c952:	f895 e000 	ldrb.w	lr, [r5]
 801c956:	fb0c 990e 	mla	r9, ip, lr, r9
 801c95a:	f893 e000 	ldrb.w	lr, [r3]
 801c95e:	785b      	ldrb	r3, [r3, #1]
 801c960:	fb06 9e0e 	mla	lr, r6, lr, r9
 801c964:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c968:	ea4e 0e00 	orr.w	lr, lr, r0
 801c96c:	7860      	ldrb	r0, [r4, #1]
 801c96e:	4350      	muls	r0, r2
 801c970:	fb08 0007 	mla	r0, r8, r7, r0
 801c974:	786a      	ldrb	r2, [r5, #1]
 801c976:	fb0c 0202 	mla	r2, ip, r2, r0
 801c97a:	fb06 2303 	mla	r3, r6, r3, r2
 801c97e:	095b      	lsrs	r3, r3, #5
 801c980:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c984:	ea4e 0303 	orr.w	r3, lr, r3
 801c988:	800b      	strh	r3, [r1, #0]
 801c98a:	b003      	add	sp, #12
 801c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c990:	af01      	add	r7, sp, #4
 801c992:	e78c      	b.n	801c8ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801c994:	ac01      	add	r4, sp, #4
 801c996:	4627      	mov	r7, r4
 801c998:	e795      	b.n	801c8c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801c99a:	ac01      	add	r4, sp, #4
 801c99c:	e793      	b.n	801c8c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801c99e:	ad01      	add	r5, sp, #4
 801c9a0:	e7a1      	b.n	801c8e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801c9a2:	ab01      	add	r3, sp, #4
 801c9a4:	461d      	mov	r5, r3
 801c9a6:	e7ab      	b.n	801c900 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801c9a8:	ab01      	add	r3, sp, #4
 801c9aa:	e7a9      	b.n	801c900 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801c9ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b0:	b08f      	sub	sp, #60	; 0x3c
 801c9b2:	920c      	str	r2, [sp, #48]	; 0x30
 801c9b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c9b6:	900d      	str	r0, [sp, #52]	; 0x34
 801c9b8:	6850      	ldr	r0, [r2, #4]
 801c9ba:	910a      	str	r1, [sp, #40]	; 0x28
 801c9bc:	9306      	str	r3, [sp, #24]
 801c9be:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801c9c2:	fb00 1303 	mla	r3, r0, r3, r1
 801c9c6:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801c9ca:	6812      	ldr	r2, [r2, #0]
 801c9cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c9d0:	9307      	str	r3, [sp, #28]
 801c9d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	9308      	str	r3, [sp, #32]
 801c9d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9da:	685c      	ldr	r4, [r3, #4]
 801c9dc:	3404      	adds	r4, #4
 801c9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	dc03      	bgt.n	801c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	f340 81d6 	ble.w	801cd98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801c9ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c9f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c9f6:	1e48      	subs	r0, r1, #1
 801c9f8:	1e56      	subs	r6, r2, #1
 801c9fa:	9b06      	ldr	r3, [sp, #24]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f340 80b7 	ble.w	801cb70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801ca02:	ea5f 472b 	movs.w	r7, fp, asr #16
 801ca06:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ca0a:	d406      	bmi.n	801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca0c:	4287      	cmp	r7, r0
 801ca0e:	da04      	bge.n	801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	db02      	blt.n	801ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca14:	42b3      	cmp	r3, r6
 801ca16:	f2c0 80ac 	blt.w	801cb72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ca1a:	3701      	adds	r7, #1
 801ca1c:	f100 809d 	bmi.w	801cb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ca20:	42b9      	cmp	r1, r7
 801ca22:	f2c0 809a 	blt.w	801cb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ca26:	3301      	adds	r3, #1
 801ca28:	f100 8097 	bmi.w	801cb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ca2c:	429a      	cmp	r2, r3
 801ca2e:	f2c0 8094 	blt.w	801cb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ca32:	9b06      	ldr	r3, [sp, #24]
 801ca34:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca36:	9b07      	ldr	r3, [sp, #28]
 801ca38:	9309      	str	r3, [sp, #36]	; 0x24
 801ca3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	f340 80b5 	ble.w	801cbac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ca42:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ca44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ca46:	68c7      	ldr	r7, [r0, #12]
 801ca48:	ea5f 402b 	movs.w	r0, fp, asr #16
 801ca4c:	ea4f 4625 	mov.w	r6, r5, asr #16
 801ca50:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ca54:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ca58:	6892      	ldr	r2, [r2, #8]
 801ca5a:	f100 80fb 	bmi.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ca5e:	f102 3cff 	add.w	ip, r2, #4294967295
 801ca62:	4560      	cmp	r0, ip
 801ca64:	f280 80f6 	bge.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ca68:	2e00      	cmp	r6, #0
 801ca6a:	f2c0 80f3 	blt.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ca6e:	f107 3cff 	add.w	ip, r7, #4294967295
 801ca72:	4566      	cmp	r6, ip
 801ca74:	f280 80ee 	bge.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ca78:	b212      	sxth	r2, r2
 801ca7a:	fb06 0002 	mla	r0, r6, r2, r0
 801ca7e:	9e08      	ldr	r6, [sp, #32]
 801ca80:	1837      	adds	r7, r6, r0
 801ca82:	5c30      	ldrb	r0, [r6, r0]
 801ca84:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801ca88:	eb04 0c08 	add.w	ip, r4, r8
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	f000 80d3 	beq.w	801cc38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ca92:	787e      	ldrb	r6, [r7, #1]
 801ca94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ca98:	4426      	add	r6, r4
 801ca9a:	2900      	cmp	r1, #0
 801ca9c:	f000 80d4 	beq.w	801cc48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801caa0:	18b8      	adds	r0, r7, r2
 801caa2:	7840      	ldrb	r0, [r0, #1]
 801caa4:	5cba      	ldrb	r2, [r7, r2]
 801caa6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801caaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801caae:	4422      	add	r2, r4
 801cab0:	4420      	add	r0, r4
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	b289      	uxth	r1, r1
 801cab6:	fb03 f901 	mul.w	r9, r3, r1
 801caba:	011b      	lsls	r3, r3, #4
 801cabc:	78b7      	ldrb	r7, [r6, #2]
 801cabe:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cac2:	eba3 0309 	sub.w	r3, r3, r9
 801cac6:	b29b      	uxth	r3, r3
 801cac8:	435f      	muls	r7, r3
 801caca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cace:	b289      	uxth	r1, r1
 801cad0:	f89c a002 	ldrb.w	sl, [ip, #2]
 801cad4:	ebae 0e01 	sub.w	lr, lr, r1
 801cad8:	fa1f fe8e 	uxth.w	lr, lr
 801cadc:	fb0e 770a 	mla	r7, lr, sl, r7
 801cae0:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cae4:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cae8:	fb01 770a 	mla	r7, r1, sl, r7
 801caec:	f890 a002 	ldrb.w	sl, [r0, #2]
 801caf0:	fb09 7a0a 	mla	sl, r9, sl, r7
 801caf4:	f814 7008 	ldrb.w	r7, [r4, r8]
 801caf8:	f896 8000 	ldrb.w	r8, [r6]
 801cafc:	7876      	ldrb	r6, [r6, #1]
 801cafe:	fb03 f808 	mul.w	r8, r3, r8
 801cb02:	fb0e 8807 	mla	r8, lr, r7, r8
 801cb06:	7817      	ldrb	r7, [r2, #0]
 801cb08:	4373      	muls	r3, r6
 801cb0a:	fb01 8807 	mla	r8, r1, r7, r8
 801cb0e:	7807      	ldrb	r7, [r0, #0]
 801cb10:	fb0e 330c 	mla	r3, lr, ip, r3
 801cb14:	fb09 8707 	mla	r7, r9, r7, r8
 801cb18:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801cb1c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cb20:	ea47 070a 	orr.w	r7, r7, sl
 801cb24:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cb28:	fb01 310a 	mla	r1, r1, sl, r3
 801cb2c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb32:	fb09 1a0a 	mla	sl, r9, sl, r1
 801cb36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cb3a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cb3e:	ea47 070a 	orr.w	r7, r7, sl
 801cb42:	801f      	strh	r7, [r3, #0]
 801cb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb46:	3302      	adds	r3, #2
 801cb48:	9309      	str	r3, [sp, #36]	; 0x24
 801cb4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cb4c:	449b      	add	fp, r3
 801cb4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb50:	441d      	add	r5, r3
 801cb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb54:	3b01      	subs	r3, #1
 801cb56:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb58:	e76f      	b.n	801ca3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cb5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cb5c:	449b      	add	fp, r3
 801cb5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb60:	441d      	add	r5, r3
 801cb62:	9b06      	ldr	r3, [sp, #24]
 801cb64:	3b01      	subs	r3, #1
 801cb66:	9306      	str	r3, [sp, #24]
 801cb68:	9b07      	ldr	r3, [sp, #28]
 801cb6a:	3302      	adds	r3, #2
 801cb6c:	9307      	str	r3, [sp, #28]
 801cb6e:	e744      	b.n	801c9fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cb70:	d023      	beq.n	801cbba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801cb72:	9b06      	ldr	r3, [sp, #24]
 801cb74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801cb76:	3b01      	subs	r3, #1
 801cb78:	fb00 b003 	mla	r0, r0, r3, fp
 801cb7c:	1400      	asrs	r0, r0, #16
 801cb7e:	f53f af58 	bmi.w	801ca32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cb82:	3901      	subs	r1, #1
 801cb84:	4288      	cmp	r0, r1
 801cb86:	f6bf af54 	bge.w	801ca32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cb8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cb8c:	fb01 5303 	mla	r3, r1, r3, r5
 801cb90:	141b      	asrs	r3, r3, #16
 801cb92:	f53f af4e 	bmi.w	801ca32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cb96:	3a01      	subs	r2, #1
 801cb98:	4293      	cmp	r3, r2
 801cb9a:	f6bf af4a 	bge.w	801ca32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cb9e:	9b06      	ldr	r3, [sp, #24]
 801cba0:	9309      	str	r3, [sp, #36]	; 0x24
 801cba2:	9b07      	ldr	r3, [sp, #28]
 801cba4:	930b      	str	r3, [sp, #44]	; 0x2c
 801cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	dc70      	bgt.n	801cc8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801cbac:	9b06      	ldr	r3, [sp, #24]
 801cbae:	9a07      	ldr	r2, [sp, #28]
 801cbb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbb4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cbb8:	9307      	str	r3, [sp, #28]
 801cbba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	f340 80eb 	ble.w	801cd98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801cbc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbc6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cbd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbd6:	eef0 6a62 	vmov.f32	s13, s5
 801cbda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbde:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbe2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbe6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbee:	ee16 ba90 	vmov	fp, s13
 801cbf2:	eef0 6a43 	vmov.f32	s13, s6
 801cbf6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbfa:	ee12 2a90 	vmov	r2, s5
 801cbfe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cc04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc08:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc0c:	ee13 2a10 	vmov	r2, s6
 801cc10:	931b      	str	r3, [sp, #108]	; 0x6c
 801cc12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cc14:	ee16 5a90 	vmov	r5, s13
 801cc18:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc1c:	931c      	str	r3, [sp, #112]	; 0x70
 801cc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cc22:	3b01      	subs	r3, #1
 801cc24:	930a      	str	r3, [sp, #40]	; 0x28
 801cc26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cc28:	bf08      	it	eq
 801cc2a:	4613      	moveq	r3, r2
 801cc2c:	eeb0 3a67 	vmov.f32	s6, s15
 801cc30:	9306      	str	r3, [sp, #24]
 801cc32:	eef0 2a47 	vmov.f32	s5, s14
 801cc36:	e6d2      	b.n	801c9de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cc38:	b149      	cbz	r1, 801cc4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc3a:	4660      	mov	r0, ip
 801cc3c:	5cba      	ldrb	r2, [r7, r2]
 801cc3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc42:	4422      	add	r2, r4
 801cc44:	4666      	mov	r6, ip
 801cc46:	e734      	b.n	801cab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801cc48:	4660      	mov	r0, ip
 801cc4a:	4662      	mov	r2, ip
 801cc4c:	e731      	b.n	801cab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801cc4e:	4660      	mov	r0, ip
 801cc50:	4662      	mov	r2, ip
 801cc52:	e7f7      	b.n	801cc44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801cc54:	f110 0c01 	adds.w	ip, r0, #1
 801cc58:	f53f af74 	bmi.w	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc5c:	4562      	cmp	r2, ip
 801cc5e:	f6ff af71 	blt.w	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc62:	f116 0c01 	adds.w	ip, r6, #1
 801cc66:	f53f af6d 	bmi.w	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc6a:	4567      	cmp	r7, ip
 801cc6c:	f6ff af6a 	blt.w	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc70:	b23f      	sxth	r7, r7
 801cc72:	b212      	sxth	r2, r2
 801cc74:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cc78:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801cc7c:	9200      	str	r2, [sp, #0]
 801cc7e:	9701      	str	r7, [sp, #4]
 801cc80:	4623      	mov	r3, r4
 801cc82:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cc86:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cc88:	f7ff fde6 	bl	801c858 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801cc8c:	e75a      	b.n	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cc90:	ea4f 462b 	mov.w	r6, fp, asr #16
 801cc94:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cc98:	1428      	asrs	r0, r5, #16
 801cc9a:	fb02 6000 	mla	r0, r2, r0, r6
 801cc9e:	9e08      	ldr	r6, [sp, #32]
 801cca0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cca4:	f816 8000 	ldrb.w	r8, [r6, r0]
 801cca8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ccac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ccb0:	1837      	adds	r7, r6, r0
 801ccb2:	eb04 0c08 	add.w	ip, r4, r8
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d060      	beq.n	801cd7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801ccba:	787e      	ldrb	r6, [r7, #1]
 801ccbc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ccc0:	4426      	add	r6, r4
 801ccc2:	2900      	cmp	r1, #0
 801ccc4:	d062      	beq.n	801cd8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801ccc6:	18b8      	adds	r0, r7, r2
 801ccc8:	7840      	ldrb	r0, [r0, #1]
 801ccca:	5cba      	ldrb	r2, [r7, r2]
 801cccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ccd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ccd4:	4422      	add	r2, r4
 801ccd6:	4420      	add	r0, r4
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	b289      	uxth	r1, r1
 801ccdc:	fb03 f901 	mul.w	r9, r3, r1
 801cce0:	011b      	lsls	r3, r3, #4
 801cce2:	78b7      	ldrb	r7, [r6, #2]
 801cce4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cce8:	eba3 0309 	sub.w	r3, r3, r9
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	435f      	muls	r7, r3
 801ccf0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ccf4:	b289      	uxth	r1, r1
 801ccf6:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ccfa:	ebae 0e01 	sub.w	lr, lr, r1
 801ccfe:	fa1f fe8e 	uxth.w	lr, lr
 801cd02:	fb0e 770a 	mla	r7, lr, sl, r7
 801cd06:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cd0a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cd0e:	fb01 770a 	mla	r7, r1, sl, r7
 801cd12:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cd16:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cd1a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cd1e:	f896 8000 	ldrb.w	r8, [r6]
 801cd22:	7876      	ldrb	r6, [r6, #1]
 801cd24:	fb03 f808 	mul.w	r8, r3, r8
 801cd28:	fb0e 8807 	mla	r8, lr, r7, r8
 801cd2c:	7817      	ldrb	r7, [r2, #0]
 801cd2e:	4373      	muls	r3, r6
 801cd30:	fb01 8807 	mla	r8, r1, r7, r8
 801cd34:	7807      	ldrb	r7, [r0, #0]
 801cd36:	fb0e 330c 	mla	r3, lr, ip, r3
 801cd3a:	fb09 8707 	mla	r7, r9, r7, r8
 801cd3e:	7856      	ldrb	r6, [r2, #1]
 801cd40:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801cd44:	fb01 3306 	mla	r3, r1, r6, r3
 801cd48:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cd4c:	ea47 070a 	orr.w	r7, r7, sl
 801cd50:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cd54:	fb09 3a0a 	mla	sl, r9, sl, r3
 801cd58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cd62:	ea47 070a 	orr.w	r7, r7, sl
 801cd66:	f823 7b02 	strh.w	r7, [r3], #2
 801cd6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cd6e:	449b      	add	fp, r3
 801cd70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd72:	441d      	add	r5, r3
 801cd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd76:	3b01      	subs	r3, #1
 801cd78:	9309      	str	r3, [sp, #36]	; 0x24
 801cd7a:	e714      	b.n	801cba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cd7c:	b149      	cbz	r1, 801cd92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801cd7e:	4660      	mov	r0, ip
 801cd80:	5cba      	ldrb	r2, [r7, r2]
 801cd82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd86:	4422      	add	r2, r4
 801cd88:	4666      	mov	r6, ip
 801cd8a:	e7a5      	b.n	801ccd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cd8c:	4660      	mov	r0, ip
 801cd8e:	4662      	mov	r2, ip
 801cd90:	e7a2      	b.n	801ccd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cd92:	4660      	mov	r0, ip
 801cd94:	4662      	mov	r2, ip
 801cd96:	e7f7      	b.n	801cd88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801cd98:	b00f      	add	sp, #60	; 0x3c
 801cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801cd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cda2:	b085      	sub	sp, #20
 801cda4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801cda8:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801cdac:	9102      	str	r1, [sp, #8]
 801cdae:	fb04 710c 	mla	r1, r4, ip, r7
 801cdb2:	2c00      	cmp	r4, #0
 801cdb4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801cdb8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801cdbc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801cdc0:	eb02 0e01 	add.w	lr, r2, r1
 801cdc4:	f2c0 8122 	blt.w	801d00c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801cdc8:	45a0      	cmp	r8, r4
 801cdca:	f340 811f 	ble.w	801d00c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801cdce:	2f00      	cmp	r7, #0
 801cdd0:	f2c0 811a 	blt.w	801d008 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801cdd4:	45bc      	cmp	ip, r7
 801cdd6:	f340 8117 	ble.w	801d008 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801cdda:	5c52      	ldrb	r2, [r2, r1]
 801cddc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cde0:	1c7a      	adds	r2, r7, #1
 801cde2:	f100 8116 	bmi.w	801d012 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801cde6:	4594      	cmp	ip, r2
 801cde8:	f340 8113 	ble.w	801d012 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801cdec:	2e00      	cmp	r6, #0
 801cdee:	f000 8112 	beq.w	801d016 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801cdf2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cdf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cdfa:	3401      	adds	r4, #1
 801cdfc:	f100 810f 	bmi.w	801d01e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ce00:	45a0      	cmp	r8, r4
 801ce02:	f340 810c 	ble.w	801d01e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ce06:	2800      	cmp	r0, #0
 801ce08:	f000 810c 	beq.w	801d024 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801ce0c:	2f00      	cmp	r7, #0
 801ce0e:	f2c0 8104 	blt.w	801d01a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ce12:	45bc      	cmp	ip, r7
 801ce14:	f340 8101 	ble.w	801d01a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ce18:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801ce1c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ce20:	3701      	adds	r7, #1
 801ce22:	f100 8102 	bmi.w	801d02a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ce26:	45bc      	cmp	ip, r7
 801ce28:	f340 80ff 	ble.w	801d02a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ce2c:	2e00      	cmp	r6, #0
 801ce2e:	f000 80fe 	beq.w	801d02e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801ce32:	44f4      	add	ip, lr
 801ce34:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ce38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ce3c:	b2b6      	uxth	r6, r6
 801ce3e:	b280      	uxth	r0, r0
 801ce40:	fb00 fe06 	mul.w	lr, r0, r6
 801ce44:	0136      	lsls	r6, r6, #4
 801ce46:	eba6 070e 	sub.w	r7, r6, lr
 801ce4a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ce4e:	b2bf      	uxth	r7, r7
 801ce50:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801ce54:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801ce58:	fb0a f607 	mul.w	r6, sl, r7
 801ce5c:	b280      	uxth	r0, r0
 801ce5e:	1a1b      	subs	r3, r3, r0
 801ce60:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801ce64:	b29b      	uxth	r3, r3
 801ce66:	fb0b 6603 	mla	r6, fp, r3, r6
 801ce6a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ce6e:	fb00 6609 	mla	r6, r0, r9, r6
 801ce72:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ce76:	fb0e 6608 	mla	r6, lr, r8, r6
 801ce7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ce7e:	9600      	str	r6, [sp, #0]
 801ce80:	2e00      	cmp	r6, #0
 801ce82:	f000 80be 	beq.w	801d002 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801ce86:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801ce8a:	fb0b fc0c 	mul.w	ip, fp, ip
 801ce8e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ce92:	fb0b f505 	mul.w	r5, fp, r5
 801ce96:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ce9a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ce9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cea2:	44dc      	add	ip, fp
 801cea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cea8:	9501      	str	r5, [sp, #4]
 801ceaa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ceae:	9503      	str	r5, [sp, #12]
 801ceb0:	9d01      	ldr	r5, [sp, #4]
 801ceb2:	9e02      	ldr	r6, [sp, #8]
 801ceb4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801ceb8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cebc:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801cec0:	fb0a fc0c 	mul.w	ip, sl, ip
 801cec4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801cec8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801cecc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ced0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ced4:	4465      	add	r5, ip
 801ced6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ceda:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cede:	fb09 fc0c 	mul.w	ip, r9, ip
 801cee2:	fb09 f904 	mul.w	r9, r9, r4
 801cee6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ceea:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ceee:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801cef2:	fb08 f404 	mul.w	r4, r8, r4
 801cef6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cefa:	fb08 f802 	mul.w	r8, r8, r2
 801cefe:	0a2d      	lsrs	r5, r5, #8
 801cf00:	0a22      	lsrs	r2, r4, #8
 801cf02:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cf06:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cf0a:	437d      	muls	r5, r7
 801cf0c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801cf10:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cf14:	4414      	add	r4, r2
 801cf16:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801cf1a:	fb0a fa01 	mul.w	sl, sl, r1
 801cf1e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cf22:	9a03      	ldr	r2, [sp, #12]
 801cf24:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801cf28:	fb02 5503 	mla	r5, r2, r3, r5
 801cf2c:	0a24      	lsrs	r4, r4, #8
 801cf2e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801cf32:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801cf36:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801cf3a:	fb04 540e 	mla	r4, r4, lr, r5
 801cf3e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801cf42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf46:	4461      	add	r1, ip
 801cf48:	0a09      	lsrs	r1, r1, #8
 801cf4a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801cf4e:	fb01 4100 	mla	r1, r1, r0, r4
 801cf52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cf5a:	fb07 f70a 	mul.w	r7, r7, sl
 801cf5e:	0a09      	lsrs	r1, r1, #8
 801cf60:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801cf64:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801cf68:	fb03 7101 	mla	r1, r3, r1, r7
 801cf6c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cf70:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801cf74:	fb0e 1e08 	mla	lr, lr, r8, r1
 801cf78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cf7c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801cf80:	fb00 e101 	mla	r1, r0, r1, lr
 801cf84:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801cf88:	9a00      	ldr	r2, [sp, #0]
 801cf8a:	b287      	uxth	r7, r0
 801cf8c:	437a      	muls	r2, r7
 801cf8e:	1c53      	adds	r3, r2, #1
 801cf90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cf94:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801cf98:	0a09      	lsrs	r1, r1, #8
 801cf9a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cf9e:	4321      	orrs	r1, r4
 801cfa0:	0c0a      	lsrs	r2, r1, #16
 801cfa2:	8836      	ldrh	r6, [r6, #0]
 801cfa4:	fb12 f207 	smulbb	r2, r2, r7
 801cfa8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801cfac:	b2c8      	uxtb	r0, r1
 801cfae:	1235      	asrs	r5, r6, #8
 801cfb0:	fb14 f407 	smulbb	r4, r4, r7
 801cfb4:	fb10 f007 	smulbb	r0, r0, r7
 801cfb8:	b2db      	uxtb	r3, r3
 801cfba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cfbe:	fb05 2503 	mla	r5, r5, r3, r2
 801cfc2:	10f2      	asrs	r2, r6, #3
 801cfc4:	00f6      	lsls	r6, r6, #3
 801cfc6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801cfca:	b2f6      	uxtb	r6, r6
 801cfcc:	fb02 4203 	mla	r2, r2, r3, r4
 801cfd0:	fb06 0303 	mla	r3, r6, r3, r0
 801cfd4:	b2ad      	uxth	r5, r5
 801cfd6:	b299      	uxth	r1, r3
 801cfd8:	b294      	uxth	r4, r2
 801cfda:	1c6b      	adds	r3, r5, #1
 801cfdc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cfe0:	1c62      	adds	r2, r4, #1
 801cfe2:	1c4b      	adds	r3, r1, #1
 801cfe4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801cfe8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cfec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cff0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801cff4:	0952      	lsrs	r2, r2, #5
 801cff6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cffa:	432b      	orrs	r3, r5
 801cffc:	4313      	orrs	r3, r2
 801cffe:	9a02      	ldr	r2, [sp, #8]
 801d000:	8013      	strh	r3, [r2, #0]
 801d002:	b005      	add	sp, #20
 801d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d008:	2500      	movs	r5, #0
 801d00a:	e6e9      	b.n	801cde0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801d00c:	2100      	movs	r1, #0
 801d00e:	460d      	mov	r5, r1
 801d010:	e6f3      	b.n	801cdfa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d012:	2100      	movs	r1, #0
 801d014:	e6f1      	b.n	801cdfa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d016:	4631      	mov	r1, r6
 801d018:	e6ef      	b.n	801cdfa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d01a:	2400      	movs	r4, #0
 801d01c:	e700      	b.n	801ce20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801d01e:	2200      	movs	r2, #0
 801d020:	4614      	mov	r4, r2
 801d022:	e70b      	b.n	801ce3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d024:	4602      	mov	r2, r0
 801d026:	4604      	mov	r4, r0
 801d028:	e708      	b.n	801ce3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d02a:	2200      	movs	r2, #0
 801d02c:	e706      	b.n	801ce3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d02e:	4632      	mov	r2, r6
 801d030:	e704      	b.n	801ce3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801d032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d036:	b09f      	sub	sp, #124	; 0x7c
 801d038:	921b      	str	r2, [sp, #108]	; 0x6c
 801d03a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d03c:	901d      	str	r0, [sp, #116]	; 0x74
 801d03e:	9309      	str	r3, [sp, #36]	; 0x24
 801d040:	6850      	ldr	r0, [r2, #4]
 801d042:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d046:	9119      	str	r1, [sp, #100]	; 0x64
 801d048:	931c      	str	r3, [sp, #112]	; 0x70
 801d04a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d04e:	fb00 1303 	mla	r3, r0, r3, r1
 801d052:	6812      	ldr	r2, [r2, #0]
 801d054:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801d056:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d05a:	930c      	str	r3, [sp, #48]	; 0x30
 801d05c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	9312      	str	r3, [sp, #72]	; 0x48
 801d062:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d064:	685e      	ldr	r6, [r3, #4]
 801d066:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d06a:	3604      	adds	r6, #4
 801d06c:	930d      	str	r3, [sp, #52]	; 0x34
 801d06e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d070:	2b00      	cmp	r3, #0
 801d072:	dc03      	bgt.n	801d07c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d076:	2b00      	cmp	r3, #0
 801d078:	f340 8387 	ble.w	801d78a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d07c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d07e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d082:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d086:	1e48      	subs	r0, r1, #1
 801d088:	1e57      	subs	r7, r2, #1
 801d08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	f340 8194 	ble.w	801d3ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801d092:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d094:	142b      	asrs	r3, r5, #16
 801d096:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d09a:	d406      	bmi.n	801d0aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d09c:	4584      	cmp	ip, r0
 801d09e:	da04      	bge.n	801d0aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	db02      	blt.n	801d0aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d0a4:	42bb      	cmp	r3, r7
 801d0a6:	f2c0 8189 	blt.w	801d3bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d0aa:	f11c 0c01 	adds.w	ip, ip, #1
 801d0ae:	f100 8177 	bmi.w	801d3a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d0b2:	4561      	cmp	r1, ip
 801d0b4:	f2c0 8174 	blt.w	801d3a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d0b8:	3301      	adds	r3, #1
 801d0ba:	f100 8171 	bmi.w	801d3a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d0be:	429a      	cmp	r2, r3
 801d0c0:	f2c0 816e 	blt.w	801d3a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d0c8:	931a      	str	r3, [sp, #104]	; 0x68
 801d0ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	f340 8193 	ble.w	801d3f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d0d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d0d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d0d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d0dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d0de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d0e2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d0e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d0e8:	141b      	asrs	r3, r3, #16
 801d0ea:	f100 81d6 	bmi.w	801d49a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d0ee:	f100 38ff 	add.w	r8, r0, #4294967295
 801d0f2:	4543      	cmp	r3, r8
 801d0f4:	f280 81d1 	bge.w	801d49a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d0f8:	f1bc 0f00 	cmp.w	ip, #0
 801d0fc:	f2c0 81cd 	blt.w	801d49a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d100:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d104:	45c4      	cmp	ip, r8
 801d106:	f280 81c8 	bge.w	801d49a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d10a:	b200      	sxth	r0, r0
 801d10c:	fb0c 3300 	mla	r3, ip, r0, r3
 801d110:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d112:	eb04 0803 	add.w	r8, r4, r3
 801d116:	5ce3      	ldrb	r3, [r4, r3]
 801d118:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d11c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d120:	2a00      	cmp	r2, #0
 801d122:	f000 81af 	beq.w	801d484 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d126:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d12a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d12e:	940e      	str	r4, [sp, #56]	; 0x38
 801d130:	0e24      	lsrs	r4, r4, #24
 801d132:	9415      	str	r4, [sp, #84]	; 0x54
 801d134:	b179      	cbz	r1, 801d156 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d136:	eb08 0c00 	add.w	ip, r8, r0
 801d13a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d13e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d142:	900a      	str	r0, [sp, #40]	; 0x28
 801d144:	0e00      	lsrs	r0, r0, #24
 801d146:	9013      	str	r0, [sp, #76]	; 0x4c
 801d148:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d14c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d150:	900f      	str	r0, [sp, #60]	; 0x3c
 801d152:	0e00      	lsrs	r0, r0, #24
 801d154:	9016      	str	r0, [sp, #88]	; 0x58
 801d156:	b292      	uxth	r2, r2
 801d158:	b289      	uxth	r1, r1
 801d15a:	fb02 f901 	mul.w	r9, r2, r1
 801d15e:	0112      	lsls	r2, r2, #4
 801d160:	eba2 0809 	sub.w	r8, r2, r9
 801d164:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d166:	fa1f f888 	uxth.w	r8, r8
 801d16a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d16e:	fb08 f000 	mul.w	r0, r8, r0
 801d172:	b289      	uxth	r1, r1
 801d174:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d178:	1a52      	subs	r2, r2, r1
 801d17a:	b292      	uxth	r2, r2
 801d17c:	fb02 000e 	mla	r0, r2, lr, r0
 801d180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d182:	fb01 0004 	mla	r0, r1, r4, r0
 801d186:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d188:	fb09 0004 	mla	r0, r9, r4, r0
 801d18c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d190:	2800      	cmp	r0, #0
 801d192:	f000 80fa 	beq.w	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d196:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d19a:	d01b      	beq.n	801d1d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801d19c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d1a0:	fb0e fa0a 	mul.w	sl, lr, sl
 801d1a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d1a8:	fb0e fe03 	mul.w	lr, lr, r3
 801d1ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d1b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d1b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d1b8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d1bc:	4453      	add	r3, sl
 801d1be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d1c2:	0a1b      	lsrs	r3, r3, #8
 801d1c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d1cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d1d0:	ea43 030c 	orr.w	r3, r3, ip
 801d1d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d1d6:	2cff      	cmp	r4, #255	; 0xff
 801d1d8:	d021      	beq.n	801d21e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d1da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d1dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d1e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d1e2:	fb04 fb0b 	mul.w	fp, r4, fp
 801d1e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d1e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d1ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d1f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d1f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1f6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d1fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d202:	44de      	add	lr, fp
 801d204:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d208:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d20c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d210:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d214:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d218:	ea4e 040a 	orr.w	r4, lr, sl
 801d21c:	940e      	str	r4, [sp, #56]	; 0x38
 801d21e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d220:	2cff      	cmp	r4, #255	; 0xff
 801d222:	d021      	beq.n	801d268 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d226:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d22a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d22c:	fb04 fb0b 	mul.w	fp, r4, fp
 801d230:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d232:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d236:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d23a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d23c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d240:	fb04 fa0a 	mul.w	sl, r4, sl
 801d244:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d248:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d24c:	44de      	add	lr, fp
 801d24e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d252:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d256:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d25a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d25e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d262:	ea4e 040a 	orr.w	r4, lr, sl
 801d266:	940a      	str	r4, [sp, #40]	; 0x28
 801d268:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d26a:	2cff      	cmp	r4, #255	; 0xff
 801d26c:	d021      	beq.n	801d2b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801d26e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d270:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d274:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d276:	fb04 fb0b 	mul.w	fp, r4, fp
 801d27a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d27c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d280:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d284:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d28a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d28e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d292:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d296:	44de      	add	lr, fp
 801d298:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d29c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d2ac:	ea4e 040a 	orr.w	r4, lr, sl
 801d2b0:	940f      	str	r4, [sp, #60]	; 0x3c
 801d2b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d2b4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d2b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d2bc:	fb08 fc0c 	mul.w	ip, r8, ip
 801d2c0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d2c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d2c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d2ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d2ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d2d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d2d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d2d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d2da:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d2de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d2e2:	fb08 f80e 	mul.w	r8, r8, lr
 801d2e6:	fb02 8303 	mla	r3, r2, r3, r8
 801d2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d2ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d2f0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d2f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d2f6:	fb01 330a 	mla	r3, r1, sl, r3
 801d2fa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d2fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d300:	fb09 3901 	mla	r9, r9, r1, r3
 801d304:	4342      	muls	r2, r0
 801d306:	1c50      	adds	r0, r2, #1
 801d308:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d30c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d310:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d314:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d318:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d31c:	ea4c 0c09 	orr.w	ip, ip, r9
 801d320:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d322:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d326:	883b      	ldrh	r3, [r7, #0]
 801d328:	fb12 f204 	smulbb	r2, r2, r4
 801d32c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d330:	fa5f fc8c 	uxtb.w	ip, ip
 801d334:	1219      	asrs	r1, r3, #8
 801d336:	fb1c fc04 	smulbb	ip, ip, r4
 801d33a:	b2c0      	uxtb	r0, r0
 801d33c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d340:	fb01 2100 	mla	r1, r1, r0, r2
 801d344:	10da      	asrs	r2, r3, #3
 801d346:	00db      	lsls	r3, r3, #3
 801d348:	fb1e fe04 	smulbb	lr, lr, r4
 801d34c:	b2db      	uxtb	r3, r3
 801d34e:	fb03 c300 	mla	r3, r3, r0, ip
 801d352:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d356:	b289      	uxth	r1, r1
 801d358:	fb02 e200 	mla	r2, r2, r0, lr
 801d35c:	fa1f fc83 	uxth.w	ip, r3
 801d360:	1c4b      	adds	r3, r1, #1
 801d362:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d366:	f10c 0301 	add.w	r3, ip, #1
 801d36a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d36e:	b292      	uxth	r2, r2
 801d370:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d374:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d378:	430b      	orrs	r3, r1
 801d37a:	1c51      	adds	r1, r2, #1
 801d37c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d380:	0952      	lsrs	r2, r2, #5
 801d382:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d386:	4313      	orrs	r3, r2
 801d388:	803b      	strh	r3, [r7, #0]
 801d38a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d38c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d38e:	3702      	adds	r7, #2
 801d390:	441a      	add	r2, r3
 801d392:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d394:	9229      	str	r2, [sp, #164]	; 0xa4
 801d396:	441d      	add	r5, r3
 801d398:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d39a:	3b01      	subs	r3, #1
 801d39c:	931a      	str	r3, [sp, #104]	; 0x68
 801d39e:	e694      	b.n	801d0ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d3a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d3a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d3a4:	441c      	add	r4, r3
 801d3a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d3a8:	9429      	str	r4, [sp, #164]	; 0xa4
 801d3aa:	441d      	add	r5, r3
 801d3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3ae:	3b01      	subs	r3, #1
 801d3b0:	9309      	str	r3, [sp, #36]	; 0x24
 801d3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3b4:	3302      	adds	r3, #2
 801d3b6:	930c      	str	r3, [sp, #48]	; 0x30
 801d3b8:	e667      	b.n	801d08a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d3ba:	d024      	beq.n	801d406 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801d3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3be:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d3c0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d3c2:	3b01      	subs	r3, #1
 801d3c4:	fb00 4003 	mla	r0, r0, r3, r4
 801d3c8:	1400      	asrs	r0, r0, #16
 801d3ca:	f53f ae7b 	bmi.w	801d0c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3ce:	3901      	subs	r1, #1
 801d3d0:	4288      	cmp	r0, r1
 801d3d2:	f6bf ae77 	bge.w	801d0c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3d6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d3d8:	fb01 5303 	mla	r3, r1, r3, r5
 801d3dc:	141b      	asrs	r3, r3, #16
 801d3de:	f53f ae71 	bmi.w	801d0c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3e2:	3a01      	subs	r2, #1
 801d3e4:	4293      	cmp	r3, r2
 801d3e6:	f6bf ae6d 	bge.w	801d0c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3ea:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d3ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d3f2:	f1bb 0f00 	cmp.w	fp, #0
 801d3f6:	dc70      	bgt.n	801d4da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801d3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d400:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d404:	930c      	str	r3, [sp, #48]	; 0x30
 801d406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d408:	2b00      	cmp	r3, #0
 801d40a:	f340 81be 	ble.w	801d78a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d412:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d416:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d41a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d41e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d422:	eef0 6a62 	vmov.f32	s13, s5
 801d426:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d42a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d42e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d432:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d436:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d43a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801d43e:	eef0 6a43 	vmov.f32	s13, s6
 801d442:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d446:	ee12 2a90 	vmov	r2, s5
 801d44a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d44e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d450:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d454:	fb92 f3f3 	sdiv	r3, r2, r3
 801d458:	ee13 2a10 	vmov	r2, s6
 801d45c:	932b      	str	r3, [sp, #172]	; 0xac
 801d45e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d460:	ee16 5a90 	vmov	r5, s13
 801d464:	fb92 f3f3 	sdiv	r3, r2, r3
 801d468:	932c      	str	r3, [sp, #176]	; 0xb0
 801d46a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d46c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d46e:	3b01      	subs	r3, #1
 801d470:	9319      	str	r3, [sp, #100]	; 0x64
 801d472:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d474:	bf08      	it	eq
 801d476:	4613      	moveq	r3, r2
 801d478:	eeb0 3a67 	vmov.f32	s6, s15
 801d47c:	9309      	str	r3, [sp, #36]	; 0x24
 801d47e:	eef0 2a47 	vmov.f32	s5, s14
 801d482:	e5f4      	b.n	801d06e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d484:	2900      	cmp	r1, #0
 801d486:	f43f ae66 	beq.w	801d156 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d48a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d48e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d492:	900a      	str	r0, [sp, #40]	; 0x28
 801d494:	0e00      	lsrs	r0, r0, #24
 801d496:	9013      	str	r0, [sp, #76]	; 0x4c
 801d498:	e65d      	b.n	801d156 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d49a:	f113 0801 	adds.w	r8, r3, #1
 801d49e:	f53f af74 	bmi.w	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d4a2:	4540      	cmp	r0, r8
 801d4a4:	f6ff af71 	blt.w	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d4a8:	f11c 0801 	adds.w	r8, ip, #1
 801d4ac:	f53f af6d 	bmi.w	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d4b0:	45c6      	cmp	lr, r8
 801d4b2:	f6ff af6a 	blt.w	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d4b6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d4b8:	9302      	str	r3, [sp, #8]
 801d4ba:	b200      	sxth	r0, r0
 801d4bc:	fa0f f38e 	sxth.w	r3, lr
 801d4c0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d4c4:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d4c8:	9301      	str	r3, [sp, #4]
 801d4ca:	9000      	str	r0, [sp, #0]
 801d4cc:	4633      	mov	r3, r6
 801d4ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d4d0:	4639      	mov	r1, r7
 801d4d2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d4d4:	f7ff fc63 	bl	801cd9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801d4d8:	e757      	b.n	801d38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d4da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d4dc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d4de:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d4e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d4e4:	1427      	asrs	r7, r4, #16
 801d4e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4ea:	142b      	asrs	r3, r5, #16
 801d4ec:	fb01 7303 	mla	r3, r1, r3, r7
 801d4f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d4f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d4f6:	18e7      	adds	r7, r4, r3
 801d4f8:	5ce3      	ldrb	r3, [r4, r3]
 801d4fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d4fe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d502:	2a00      	cmp	r2, #0
 801d504:	f000 8137 	beq.w	801d776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801d508:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d50c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d510:	9410      	str	r4, [sp, #64]	; 0x40
 801d512:	0e24      	lsrs	r4, r4, #24
 801d514:	9417      	str	r4, [sp, #92]	; 0x5c
 801d516:	b170      	cbz	r0, 801d536 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d518:	eb07 0e01 	add.w	lr, r7, r1
 801d51c:	5c79      	ldrb	r1, [r7, r1]
 801d51e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d522:	910b      	str	r1, [sp, #44]	; 0x2c
 801d524:	0e09      	lsrs	r1, r1, #24
 801d526:	9114      	str	r1, [sp, #80]	; 0x50
 801d528:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d52c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d530:	9111      	str	r1, [sp, #68]	; 0x44
 801d532:	0e09      	lsrs	r1, r1, #24
 801d534:	9118      	str	r1, [sp, #96]	; 0x60
 801d536:	b292      	uxth	r2, r2
 801d538:	b280      	uxth	r0, r0
 801d53a:	fb02 f800 	mul.w	r8, r2, r0
 801d53e:	0112      	lsls	r2, r2, #4
 801d540:	eba2 0e08 	sub.w	lr, r2, r8
 801d544:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d546:	fa1f fe8e 	uxth.w	lr, lr
 801d54a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d54e:	fb0e f101 	mul.w	r1, lr, r1
 801d552:	b280      	uxth	r0, r0
 801d554:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d558:	1a12      	subs	r2, r2, r0
 801d55a:	b292      	uxth	r2, r2
 801d55c:	fb02 110c 	mla	r1, r2, ip, r1
 801d560:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d562:	fb00 1104 	mla	r1, r0, r4, r1
 801d566:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d568:	fb08 1104 	mla	r1, r8, r4, r1
 801d56c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d570:	2900      	cmp	r1, #0
 801d572:	f000 80f5 	beq.w	801d760 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801d576:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d57a:	d019      	beq.n	801d5b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801d57c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d580:	fb0c fa0a 	mul.w	sl, ip, sl
 801d584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d588:	fb0c fc03 	mul.w	ip, ip, r3
 801d58c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d590:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d594:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d598:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d59c:	4453      	add	r3, sl
 801d59e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d5a2:	0a1b      	lsrs	r3, r3, #8
 801d5a4:	0a3f      	lsrs	r7, r7, #8
 801d5a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d5aa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d5ae:	433b      	orrs	r3, r7
 801d5b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d5b2:	2cff      	cmp	r4, #255	; 0xff
 801d5b4:	d020      	beq.n	801d5f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801d5b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d5b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d5bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d5be:	4367      	muls	r7, r4
 801d5c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d5c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d5c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d5ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d5cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d5d0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d5d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5d8:	44bc      	add	ip, r7
 801d5da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d5de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d5e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d5ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d5f2:	ea4c 040a 	orr.w	r4, ip, sl
 801d5f6:	9410      	str	r4, [sp, #64]	; 0x40
 801d5f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5fa:	2cff      	cmp	r4, #255	; 0xff
 801d5fc:	d020      	beq.n	801d640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801d5fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d600:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d604:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d606:	4367      	muls	r7, r4
 801d608:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d60a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d60e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d612:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d614:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d618:	fb04 fa0a 	mul.w	sl, r4, sl
 801d61c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d620:	44bc      	add	ip, r7
 801d622:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d626:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d62a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d62e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d632:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d636:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d63a:	ea4c 040a 	orr.w	r4, ip, sl
 801d63e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d640:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d642:	2cff      	cmp	r4, #255	; 0xff
 801d644:	d020      	beq.n	801d688 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801d646:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d648:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d64c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d64e:	4367      	muls	r7, r4
 801d650:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d652:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d656:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d65a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d65c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d660:	fb04 fa0a 	mul.w	sl, r4, sl
 801d664:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d668:	44bc      	add	ip, r7
 801d66a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d66e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d672:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d676:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d67a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d67e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d682:	ea4c 040a 	orr.w	r4, ip, sl
 801d686:	9411      	str	r4, [sp, #68]	; 0x44
 801d688:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d68a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d68e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d692:	fb0e f707 	mul.w	r7, lr, r7
 801d696:	fb02 770c 	mla	r7, r2, ip, r7
 801d69a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d69c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d6a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6a4:	fb00 770c 	mla	r7, r0, ip, r7
 801d6a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d6aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d6b0:	fb08 770c 	mla	r7, r8, ip, r7
 801d6b4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d6b8:	fb0e fe0c 	mul.w	lr, lr, ip
 801d6bc:	fb02 e303 	mla	r3, r2, r3, lr
 801d6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d6c2:	0a3f      	lsrs	r7, r7, #8
 801d6c4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d6c8:	fb00 330a 	mla	r3, r0, sl, r3
 801d6cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d6ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d6d2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d6d6:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6e0:	434b      	muls	r3, r1
 801d6e2:	1c59      	adds	r1, r3, #1
 801d6e4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d6e8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d6ec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d6f0:	ea47 070c 	orr.w	r7, r7, ip
 801d6f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d6f6:	0c3b      	lsrs	r3, r7, #16
 801d6f8:	f8b9 0000 	ldrh.w	r0, [r9]
 801d6fc:	fb13 f304 	smulbb	r3, r3, r4
 801d700:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d704:	b2ff      	uxtb	r7, r7
 801d706:	1202      	asrs	r2, r0, #8
 801d708:	fb17 f704 	smulbb	r7, r7, r4
 801d70c:	b2c9      	uxtb	r1, r1
 801d70e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d712:	fb02 3201 	mla	r2, r2, r1, r3
 801d716:	10c3      	asrs	r3, r0, #3
 801d718:	00c0      	lsls	r0, r0, #3
 801d71a:	fb1c fc04 	smulbb	ip, ip, r4
 801d71e:	b2c0      	uxtb	r0, r0
 801d720:	fb00 7001 	mla	r0, r0, r1, r7
 801d724:	b292      	uxth	r2, r2
 801d726:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d72a:	fb03 c301 	mla	r3, r3, r1, ip
 801d72e:	f102 0c01 	add.w	ip, r2, #1
 801d732:	b280      	uxth	r0, r0
 801d734:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d738:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801d73c:	1c42      	adds	r2, r0, #1
 801d73e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d742:	b29b      	uxth	r3, r3
 801d744:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d748:	ea42 020c 	orr.w	r2, r2, ip
 801d74c:	f103 0c01 	add.w	ip, r3, #1
 801d750:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d754:	095b      	lsrs	r3, r3, #5
 801d756:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d75a:	431a      	orrs	r2, r3
 801d75c:	f8a9 2000 	strh.w	r2, [r9]
 801d760:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d762:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d764:	f109 0902 	add.w	r9, r9, #2
 801d768:	441a      	add	r2, r3
 801d76a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d76c:	9229      	str	r2, [sp, #164]	; 0xa4
 801d76e:	441d      	add	r5, r3
 801d770:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d774:	e63d      	b.n	801d3f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d776:	2800      	cmp	r0, #0
 801d778:	f43f aedd 	beq.w	801d536 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d77c:	5c79      	ldrb	r1, [r7, r1]
 801d77e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d782:	910b      	str	r1, [sp, #44]	; 0x2c
 801d784:	0e09      	lsrs	r1, r1, #24
 801d786:	9114      	str	r1, [sp, #80]	; 0x50
 801d788:	e6d5      	b.n	801d536 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d78a:	b01f      	add	sp, #124	; 0x7c
 801d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d790 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d794:	b089      	sub	sp, #36	; 0x24
 801d796:	9101      	str	r1, [sp, #4]
 801d798:	9801      	ldr	r0, [sp, #4]
 801d79a:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801d79e:	8800      	ldrh	r0, [r0, #0]
 801d7a0:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801d7a4:	1206      	asrs	r6, r0, #8
 801d7a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d7aa:	9602      	str	r6, [sp, #8]
 801d7ac:	10c6      	asrs	r6, r0, #3
 801d7ae:	00c0      	lsls	r0, r0, #3
 801d7b0:	b2c0      	uxtb	r0, r0
 801d7b2:	9004      	str	r0, [sp, #16]
 801d7b4:	fb07 100c 	mla	r0, r7, ip, r1
 801d7b8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d7bc:	2f00      	cmp	r7, #0
 801d7be:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801d7c2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801d7c6:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801d7ca:	9603      	str	r6, [sp, #12]
 801d7cc:	eb02 0e00 	add.w	lr, r2, r0
 801d7d0:	f2c0 810a 	blt.w	801d9e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d7d4:	45b8      	cmp	r8, r7
 801d7d6:	f340 8107 	ble.w	801d9e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d7da:	2900      	cmp	r1, #0
 801d7dc:	f2c0 8102 	blt.w	801d9e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d7e0:	458c      	cmp	ip, r1
 801d7e2:	f340 80ff 	ble.w	801d9e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d7e6:	5c12      	ldrb	r2, [r2, r0]
 801d7e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d7ec:	1c4a      	adds	r2, r1, #1
 801d7ee:	f100 80fe 	bmi.w	801d9ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d7f2:	4594      	cmp	ip, r2
 801d7f4:	f340 80fb 	ble.w	801d9ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d7f8:	2d00      	cmp	r5, #0
 801d7fa:	f000 80fa 	beq.w	801d9f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801d7fe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d802:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d806:	3701      	adds	r7, #1
 801d808:	f100 80f7 	bmi.w	801d9fa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d80c:	45b8      	cmp	r8, r7
 801d80e:	f340 80f4 	ble.w	801d9fa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d812:	2c00      	cmp	r4, #0
 801d814:	f000 80f4 	beq.w	801da00 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801d818:	2900      	cmp	r1, #0
 801d81a:	eb0e 020c 	add.w	r2, lr, ip
 801d81e:	f2c0 80ea 	blt.w	801d9f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d822:	458c      	cmp	ip, r1
 801d824:	f340 80e7 	ble.w	801d9f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d828:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801d82c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801d830:	3101      	adds	r1, #1
 801d832:	f100 80e8 	bmi.w	801da06 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d836:	458c      	cmp	ip, r1
 801d838:	f340 80e5 	ble.w	801da06 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d83c:	2d00      	cmp	r5, #0
 801d83e:	f000 80e4 	beq.w	801da0a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801d842:	7852      	ldrb	r2, [r2, #1]
 801d844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d848:	0e0b      	lsrs	r3, r1, #24
 801d84a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d84e:	9300      	str	r3, [sp, #0]
 801d850:	b2a4      	uxth	r4, r4
 801d852:	b2ab      	uxth	r3, r5
 801d854:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d858:	fb03 f904 	mul.w	r9, r3, r4
 801d85c:	fb0a f505 	mul.w	r5, sl, r5
 801d860:	011b      	lsls	r3, r3, #4
 801d862:	eba3 0e09 	sub.w	lr, r3, r9
 801d866:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801d86a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801d86e:	0a28      	lsrs	r0, r5, #8
 801d870:	fb0a f303 	mul.w	r3, sl, r3
 801d874:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d878:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d87c:	4405      	add	r5, r0
 801d87e:	0a2d      	lsrs	r5, r5, #8
 801d880:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801d884:	9005      	str	r0, [sp, #20]
 801d886:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801d88a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d88e:	0a1b      	lsrs	r3, r3, #8
 801d890:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d894:	9306      	str	r3, [sp, #24]
 801d896:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801d89a:	fb0b f303 	mul.w	r3, fp, r3
 801d89e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d8a2:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801d8a6:	fb0b f606 	mul.w	r6, fp, r6
 801d8aa:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801d8ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d8b2:	fb08 f707 	mul.w	r7, r8, r7
 801d8b6:	0a1d      	lsrs	r5, r3, #8
 801d8b8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d8bc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801d8c0:	441d      	add	r5, r3
 801d8c2:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801d8c6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d8ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d8ce:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801d8d2:	fb08 fc0c 	mul.w	ip, r8, ip
 801d8d6:	0a1b      	lsrs	r3, r3, #8
 801d8d8:	9307      	str	r3, [sp, #28]
 801d8da:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801d8de:	0e0b      	lsrs	r3, r1, #24
 801d8e0:	0a2d      	lsrs	r5, r5, #8
 801d8e2:	fa1f fe8e 	uxth.w	lr, lr
 801d8e6:	435f      	muls	r7, r3
 801d8e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d8ec:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801d8f0:	fb05 f50e 	mul.w	r5, r5, lr
 801d8f4:	b2a4      	uxth	r4, r4
 801d8f6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801d8fa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d8fe:	4359      	muls	r1, r3
 801d900:	1b12      	subs	r2, r2, r4
 801d902:	9b05      	ldr	r3, [sp, #20]
 801d904:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d908:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d90c:	b292      	uxth	r2, r2
 801d90e:	4460      	add	r0, ip
 801d910:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d914:	fb03 5502 	mla	r5, r3, r2, r5
 801d918:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d91c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d920:	44bc      	add	ip, r7
 801d922:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d926:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d92a:	0a36      	lsrs	r6, r6, #8
 801d92c:	fb0c 5509 	mla	r5, ip, r9, r5
 801d930:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d934:	fb0e f606 	mul.w	r6, lr, r6
 801d938:	9b06      	ldr	r3, [sp, #24]
 801d93a:	0a00      	lsrs	r0, r0, #8
 801d93c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d940:	fb00 5504 	mla	r5, r0, r4, r5
 801d944:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801d948:	fb02 6000 	mla	r0, r2, r0, r6
 801d94c:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801d950:	fb0e fe0b 	mul.w	lr, lr, fp
 801d954:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801d958:	0a09      	lsrs	r1, r1, #8
 801d95a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d95e:	fb09 0001 	mla	r0, r9, r1, r0
 801d962:	fb02 e20a 	mla	r2, r2, sl, lr
 801d966:	9b07      	ldr	r3, [sp, #28]
 801d968:	0a2d      	lsrs	r5, r5, #8
 801d96a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d96e:	fb04 0003 	mla	r0, r4, r3, r0
 801d972:	fb04 2408 	mla	r4, r4, r8, r2
 801d976:	9b00      	ldr	r3, [sp, #0]
 801d978:	9a04      	ldr	r2, [sp, #16]
 801d97a:	fb09 4903 	mla	r9, r9, r3, r4
 801d97e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801d982:	9b02      	ldr	r3, [sp, #8]
 801d984:	fa5f f989 	uxtb.w	r9, r9
 801d988:	fb03 f109 	mul.w	r1, r3, r9
 801d98c:	9b03      	ldr	r3, [sp, #12]
 801d98e:	0a00      	lsrs	r0, r0, #8
 801d990:	fb03 f309 	mul.w	r3, r3, r9
 801d994:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d998:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d99c:	4305      	orrs	r5, r0
 801d99e:	fb02 f909 	mul.w	r9, r2, r9
 801d9a2:	1c58      	adds	r0, r3, #1
 801d9a4:	1c4a      	adds	r2, r1, #1
 801d9a6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d9aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d9ae:	0a2b      	lsrs	r3, r5, #8
 801d9b0:	0c2a      	lsrs	r2, r5, #16
 801d9b2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d9b6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d9ba:	00db      	lsls	r3, r3, #3
 801d9bc:	0212      	lsls	r2, r2, #8
 801d9be:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801d9c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	f109 0201 	add.w	r2, r9, #1
 801d9cc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d9d0:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801d9d4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d9d8:	431d      	orrs	r5, r3
 801d9da:	9b01      	ldr	r3, [sp, #4]
 801d9dc:	801d      	strh	r5, [r3, #0]
 801d9de:	b009      	add	sp, #36	; 0x24
 801d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9e4:	2000      	movs	r0, #0
 801d9e6:	e701      	b.n	801d7ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801d9e8:	2600      	movs	r6, #0
 801d9ea:	4630      	mov	r0, r6
 801d9ec:	e70b      	b.n	801d806 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d9ee:	2600      	movs	r6, #0
 801d9f0:	e709      	b.n	801d806 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d9f2:	462e      	mov	r6, r5
 801d9f4:	e707      	b.n	801d806 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d9f6:	2700      	movs	r7, #0
 801d9f8:	e71a      	b.n	801d830 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801d9fa:	2100      	movs	r1, #0
 801d9fc:	460f      	mov	r7, r1
 801d9fe:	e723      	b.n	801d848 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801da00:	4621      	mov	r1, r4
 801da02:	4627      	mov	r7, r4
 801da04:	e720      	b.n	801d848 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801da06:	2100      	movs	r1, #0
 801da08:	e71e      	b.n	801d848 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801da0a:	4629      	mov	r1, r5
 801da0c:	e71c      	b.n	801d848 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

0801da10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da14:	b09b      	sub	sp, #108	; 0x6c
 801da16:	9218      	str	r2, [sp, #96]	; 0x60
 801da18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801da1a:	9019      	str	r0, [sp, #100]	; 0x64
 801da1c:	6850      	ldr	r0, [r2, #4]
 801da1e:	9116      	str	r1, [sp, #88]	; 0x58
 801da20:	9307      	str	r3, [sp, #28]
 801da22:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801da26:	fb00 1303 	mla	r3, r0, r3, r1
 801da2a:	6812      	ldr	r2, [r2, #0]
 801da2c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801da2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801da32:	930a      	str	r3, [sp, #40]	; 0x28
 801da34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	930f      	str	r3, [sp, #60]	; 0x3c
 801da3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da3c:	685e      	ldr	r6, [r3, #4]
 801da3e:	3604      	adds	r6, #4
 801da40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801da42:	2b00      	cmp	r3, #0
 801da44:	dc03      	bgt.n	801da4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801da46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da48:	2b00      	cmp	r3, #0
 801da4a:	f340 8373 	ble.w	801e134 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801da4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801da54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801da58:	1e48      	subs	r0, r1, #1
 801da5a:	1e57      	subs	r7, r2, #1
 801da5c:	9b07      	ldr	r3, [sp, #28]
 801da5e:	2b00      	cmp	r3, #0
 801da60:	f340 818f 	ble.w	801dd82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801da64:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801da66:	142b      	asrs	r3, r5, #16
 801da68:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801da6c:	d406      	bmi.n	801da7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801da6e:	4584      	cmp	ip, r0
 801da70:	da04      	bge.n	801da7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801da72:	2b00      	cmp	r3, #0
 801da74:	db02      	blt.n	801da7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801da76:	42bb      	cmp	r3, r7
 801da78:	f2c0 8184 	blt.w	801dd84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801da7c:	f11c 0c01 	adds.w	ip, ip, #1
 801da80:	f100 8172 	bmi.w	801dd68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801da84:	4561      	cmp	r1, ip
 801da86:	f2c0 816f 	blt.w	801dd68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801da8a:	3301      	adds	r3, #1
 801da8c:	f100 816c 	bmi.w	801dd68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801da90:	429a      	cmp	r2, r3
 801da92:	f2c0 8169 	blt.w	801dd68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801da96:	9b07      	ldr	r3, [sp, #28]
 801da98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801da9a:	9317      	str	r3, [sp, #92]	; 0x5c
 801da9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	f340 818e 	ble.w	801ddc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801daa4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801daa6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801daaa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801daae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dab0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dab4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801dab8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801daba:	141b      	asrs	r3, r3, #16
 801dabc:	f100 81d1 	bmi.w	801de62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dac0:	f101 38ff 	add.w	r8, r1, #4294967295
 801dac4:	4543      	cmp	r3, r8
 801dac6:	f280 81cc 	bge.w	801de62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801daca:	f1bc 0f00 	cmp.w	ip, #0
 801dace:	f2c0 81c8 	blt.w	801de62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dad2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dad6:	45c4      	cmp	ip, r8
 801dad8:	f280 81c3 	bge.w	801de62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dadc:	b209      	sxth	r1, r1
 801dade:	fb0c 3301 	mla	r3, ip, r1, r3
 801dae2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dae4:	eb04 0803 	add.w	r8, r4, r3
 801dae8:	5ce3      	ldrb	r3, [r4, r3]
 801daea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801daee:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801daf2:	2a00      	cmp	r2, #0
 801daf4:	f000 81aa 	beq.w	801de4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801daf8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dafc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801db00:	940b      	str	r4, [sp, #44]	; 0x2c
 801db02:	0e24      	lsrs	r4, r4, #24
 801db04:	9412      	str	r4, [sp, #72]	; 0x48
 801db06:	b178      	cbz	r0, 801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801db08:	eb08 0c01 	add.w	ip, r8, r1
 801db0c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801db10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801db14:	9108      	str	r1, [sp, #32]
 801db16:	0e09      	lsrs	r1, r1, #24
 801db18:	9110      	str	r1, [sp, #64]	; 0x40
 801db1a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801db1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801db22:	910c      	str	r1, [sp, #48]	; 0x30
 801db24:	0e09      	lsrs	r1, r1, #24
 801db26:	9113      	str	r1, [sp, #76]	; 0x4c
 801db28:	b292      	uxth	r2, r2
 801db2a:	b280      	uxth	r0, r0
 801db2c:	fb02 f900 	mul.w	r9, r2, r0
 801db30:	0112      	lsls	r2, r2, #4
 801db32:	eba2 0809 	sub.w	r8, r2, r9
 801db36:	9912      	ldr	r1, [sp, #72]	; 0x48
 801db38:	fa1f f888 	uxth.w	r8, r8
 801db3c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801db40:	fb08 f101 	mul.w	r1, r8, r1
 801db44:	b280      	uxth	r0, r0
 801db46:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801db4a:	1a12      	subs	r2, r2, r0
 801db4c:	b292      	uxth	r2, r2
 801db4e:	fb02 110e 	mla	r1, r2, lr, r1
 801db52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801db54:	fb00 1104 	mla	r1, r0, r4, r1
 801db58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801db5a:	fb09 1104 	mla	r1, r9, r4, r1
 801db5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801db62:	2900      	cmp	r1, #0
 801db64:	f000 80f5 	beq.w	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801db68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801db6c:	d01b      	beq.n	801dba6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db6e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801db72:	fb0e fa0a 	mul.w	sl, lr, sl
 801db76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db7a:	fb0e fe03 	mul.w	lr, lr, r3
 801db7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801db82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801db8a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801db8e:	4453      	add	r3, sl
 801db90:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801db94:	0a1b      	lsrs	r3, r3, #8
 801db96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dba2:	ea43 030c 	orr.w	r3, r3, ip
 801dba6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dba8:	2cff      	cmp	r4, #255	; 0xff
 801dbaa:	d021      	beq.n	801dbf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dbae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dbb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dbb4:	fb04 fb0b 	mul.w	fp, r4, fp
 801dbb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dbba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dbbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dbc2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dbc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dbc8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dbcc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dbd0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dbd4:	44de      	add	lr, fp
 801dbd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dbda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dbe2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dbe6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dbea:	ea4e 040a 	orr.w	r4, lr, sl
 801dbee:	940b      	str	r4, [sp, #44]	; 0x2c
 801dbf0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dbf2:	2cff      	cmp	r4, #255	; 0xff
 801dbf4:	d021      	beq.n	801dc3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801dbf6:	9c08      	ldr	r4, [sp, #32]
 801dbf8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dbfc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dbfe:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc02:	9c08      	ldr	r4, [sp, #32]
 801dc04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dc0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc12:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc1a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc1e:	44de      	add	lr, fp
 801dc20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc34:	ea4e 040a 	orr.w	r4, lr, sl
 801dc38:	9408      	str	r4, [sp, #32]
 801dc3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc3c:	2cff      	cmp	r4, #255	; 0xff
 801dc3e:	d021      	beq.n	801dc84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801dc40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dc42:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc48:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dc4e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc5c:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc68:	44de      	add	lr, fp
 801dc6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc7e:	ea4e 040a 	orr.w	r4, lr, sl
 801dc82:	940c      	str	r4, [sp, #48]	; 0x30
 801dc84:	43c9      	mvns	r1, r1
 801dc86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc88:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dc8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dc90:	fb08 fc0c 	mul.w	ip, r8, ip
 801dc94:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dc98:	9c08      	ldr	r4, [sp, #32]
 801dc9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc9e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dca2:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dca6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dca8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dcac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dcae:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dcb2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801dcb6:	fb08 f80e 	mul.w	r8, r8, lr
 801dcba:	fb02 8303 	mla	r3, r2, r3, r8
 801dcbe:	9a08      	ldr	r2, [sp, #32]
 801dcc0:	f8b7 8000 	ldrh.w	r8, [r7]
 801dcc4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801dcc8:	fb00 330a 	mla	r3, r0, sl, r3
 801dccc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dcce:	fa5f fe81 	uxtb.w	lr, r1
 801dcd2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801dcd6:	fb09 3900 	mla	r9, r9, r0, r3
 801dcda:	ea4f 2228 	mov.w	r2, r8, asr #8
 801dcde:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801dce2:	fb02 f20e 	mul.w	r2, r2, lr
 801dce6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dcee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801dcf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dcf6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dcfa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dcfe:	ea4c 0c09 	orr.w	ip, ip, r9
 801dd02:	fb00 f00e 	mul.w	r0, r0, lr
 801dd06:	1c53      	adds	r3, r2, #1
 801dd08:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801dd0c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801dd10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dd14:	4a62      	ldr	r2, [pc, #392]	; (801dea0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801dd16:	b2db      	uxtb	r3, r3
 801dd18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801dd1c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801dd20:	b2c9      	uxtb	r1, r1
 801dd22:	1c43      	adds	r3, r0, #1
 801dd24:	fb01 f10e 	mul.w	r1, r1, lr
 801dd28:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dd2c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801dd30:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dd34:	00db      	lsls	r3, r3, #3
 801dd36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dd3a:	4313      	orrs	r3, r2
 801dd3c:	1c4a      	adds	r2, r1, #1
 801dd3e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801dd42:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801dd46:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801dd4a:	ea4c 0c03 	orr.w	ip, ip, r3
 801dd4e:	f8a7 c000 	strh.w	ip, [r7]
 801dd52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dd54:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801dd56:	3702      	adds	r7, #2
 801dd58:	441a      	add	r2, r3
 801dd5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dd5c:	9225      	str	r2, [sp, #148]	; 0x94
 801dd5e:	441d      	add	r5, r3
 801dd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd62:	3b01      	subs	r3, #1
 801dd64:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd66:	e699      	b.n	801da9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dd68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dd6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801dd6c:	441c      	add	r4, r3
 801dd6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dd70:	9425      	str	r4, [sp, #148]	; 0x94
 801dd72:	441d      	add	r5, r3
 801dd74:	9b07      	ldr	r3, [sp, #28]
 801dd76:	3b01      	subs	r3, #1
 801dd78:	9307      	str	r3, [sp, #28]
 801dd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd7c:	3302      	adds	r3, #2
 801dd7e:	930a      	str	r3, [sp, #40]	; 0x28
 801dd80:	e66c      	b.n	801da5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dd82:	d024      	beq.n	801ddce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801dd84:	9b07      	ldr	r3, [sp, #28]
 801dd86:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dd88:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801dd8a:	3b01      	subs	r3, #1
 801dd8c:	fb00 4003 	mla	r0, r0, r3, r4
 801dd90:	1400      	asrs	r0, r0, #16
 801dd92:	f53f ae80 	bmi.w	801da96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dd96:	3901      	subs	r1, #1
 801dd98:	4288      	cmp	r0, r1
 801dd9a:	f6bf ae7c 	bge.w	801da96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dd9e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dda0:	fb01 5303 	mla	r3, r1, r3, r5
 801dda4:	141b      	asrs	r3, r3, #16
 801dda6:	f53f ae76 	bmi.w	801da96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ddaa:	3a01      	subs	r2, #1
 801ddac:	4293      	cmp	r3, r2
 801ddae:	f6bf ae72 	bge.w	801da96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ddb2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ddb6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ddba:	f1bb 0f00 	cmp.w	fp, #0
 801ddbe:	dc71      	bgt.n	801dea4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ddc0:	9b07      	ldr	r3, [sp, #28]
 801ddc2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ddc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddc8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ddcc:	930a      	str	r3, [sp, #40]	; 0x28
 801ddce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	f340 81af 	ble.w	801e134 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801ddd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dde2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dde6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ddea:	eef0 6a62 	vmov.f32	s13, s5
 801ddee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ddf2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ddfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de02:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801de06:	eef0 6a43 	vmov.f32	s13, s6
 801de0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de0e:	ee12 2a90 	vmov	r2, s5
 801de12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801de20:	ee13 2a10 	vmov	r2, s6
 801de24:	9327      	str	r3, [sp, #156]	; 0x9c
 801de26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de28:	ee16 5a90 	vmov	r5, s13
 801de2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801de30:	9328      	str	r3, [sp, #160]	; 0xa0
 801de32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801de34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801de36:	3b01      	subs	r3, #1
 801de38:	9316      	str	r3, [sp, #88]	; 0x58
 801de3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de3c:	bf08      	it	eq
 801de3e:	4613      	moveq	r3, r2
 801de40:	eeb0 3a67 	vmov.f32	s6, s15
 801de44:	9307      	str	r3, [sp, #28]
 801de46:	eef0 2a47 	vmov.f32	s5, s14
 801de4a:	e5f9      	b.n	801da40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801de4c:	2800      	cmp	r0, #0
 801de4e:	f43f ae6b 	beq.w	801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801de52:	f818 1001 	ldrb.w	r1, [r8, r1]
 801de56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801de5a:	9108      	str	r1, [sp, #32]
 801de5c:	0e09      	lsrs	r1, r1, #24
 801de5e:	9110      	str	r1, [sp, #64]	; 0x40
 801de60:	e662      	b.n	801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801de62:	f113 0801 	adds.w	r8, r3, #1
 801de66:	f53f af74 	bmi.w	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801de6a:	4541      	cmp	r1, r8
 801de6c:	f6ff af71 	blt.w	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801de70:	f11c 0801 	adds.w	r8, ip, #1
 801de74:	f53f af6d 	bmi.w	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801de78:	45c6      	cmp	lr, r8
 801de7a:	f6ff af6a 	blt.w	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801de7e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801de82:	b209      	sxth	r1, r1
 801de84:	fa0f f38e 	sxth.w	r3, lr
 801de88:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801de8c:	9301      	str	r3, [sp, #4]
 801de8e:	9100      	str	r1, [sp, #0]
 801de90:	4633      	mov	r3, r6
 801de92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de94:	4639      	mov	r1, r7
 801de96:	9819      	ldr	r0, [sp, #100]	; 0x64
 801de98:	f7ff fc7a 	bl	801d790 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801de9c:	e759      	b.n	801dd52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801de9e:	bf00      	nop
 801dea0:	fffff800 	.word	0xfffff800
 801dea4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dea6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801dea8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801deac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801deae:	1427      	asrs	r7, r4, #16
 801deb0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801deb4:	142b      	asrs	r3, r5, #16
 801deb6:	fb01 7303 	mla	r3, r1, r3, r7
 801deba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801debc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dec0:	18e7      	adds	r7, r4, r3
 801dec2:	5ce3      	ldrb	r3, [r4, r3]
 801dec4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dec8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801decc:	2a00      	cmp	r2, #0
 801dece:	f000 8127 	beq.w	801e120 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ded2:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ded6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801deda:	940d      	str	r4, [sp, #52]	; 0x34
 801dedc:	0e24      	lsrs	r4, r4, #24
 801dede:	9414      	str	r4, [sp, #80]	; 0x50
 801dee0:	b170      	cbz	r0, 801df00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801dee2:	eb07 0e01 	add.w	lr, r7, r1
 801dee6:	5c79      	ldrb	r1, [r7, r1]
 801dee8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801deec:	9109      	str	r1, [sp, #36]	; 0x24
 801deee:	0e09      	lsrs	r1, r1, #24
 801def0:	9111      	str	r1, [sp, #68]	; 0x44
 801def2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801def6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801defa:	910e      	str	r1, [sp, #56]	; 0x38
 801defc:	0e09      	lsrs	r1, r1, #24
 801defe:	9115      	str	r1, [sp, #84]	; 0x54
 801df00:	b292      	uxth	r2, r2
 801df02:	b280      	uxth	r0, r0
 801df04:	fb02 f800 	mul.w	r8, r2, r0
 801df08:	0112      	lsls	r2, r2, #4
 801df0a:	eba2 0e08 	sub.w	lr, r2, r8
 801df0e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801df12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df14:	fa1f fe8e 	uxth.w	lr, lr
 801df18:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801df1c:	fb0e f202 	mul.w	r2, lr, r2
 801df20:	b280      	uxth	r0, r0
 801df22:	1a09      	subs	r1, r1, r0
 801df24:	b289      	uxth	r1, r1
 801df26:	fb01 220c 	mla	r2, r1, ip, r2
 801df2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801df2c:	fb00 2204 	mla	r2, r0, r4, r2
 801df30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df32:	fb08 2204 	mla	r2, r8, r4, r2
 801df36:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801df3a:	2a00      	cmp	r2, #0
 801df3c:	f000 80e5 	beq.w	801e10a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801df40:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801df44:	d019      	beq.n	801df7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801df46:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801df4a:	fb0c fa0a 	mul.w	sl, ip, sl
 801df4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df52:	fb0c fc03 	mul.w	ip, ip, r3
 801df56:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801df5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801df62:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801df66:	4453      	add	r3, sl
 801df68:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801df6c:	0a1b      	lsrs	r3, r3, #8
 801df6e:	0a3f      	lsrs	r7, r7, #8
 801df70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df74:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801df78:	433b      	orrs	r3, r7
 801df7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df7c:	2cff      	cmp	r4, #255	; 0xff
 801df7e:	d020      	beq.n	801dfc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801df80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801df82:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801df86:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df88:	4367      	muls	r7, r4
 801df8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801df8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801df90:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801df94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801df9a:	fb04 fa0a 	mul.w	sl, r4, sl
 801df9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfa2:	44bc      	add	ip, r7
 801dfa4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dfa8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dfac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dfb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dfbc:	ea4c 040a 	orr.w	r4, ip, sl
 801dfc0:	940d      	str	r4, [sp, #52]	; 0x34
 801dfc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfc4:	2cff      	cmp	r4, #255	; 0xff
 801dfc6:	d020      	beq.n	801e00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801dfc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dfca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dfce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfd0:	4367      	muls	r7, r4
 801dfd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dfd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dfd8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dfdc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dfe2:	fb04 fa0a 	mul.w	sl, r4, sl
 801dfe6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfea:	44bc      	add	ip, r7
 801dfec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dff0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dffc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e004:	ea4c 040a 	orr.w	r4, ip, sl
 801e008:	9409      	str	r4, [sp, #36]	; 0x24
 801e00a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e00c:	2cff      	cmp	r4, #255	; 0xff
 801e00e:	d020      	beq.n	801e052 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801e010:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e012:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e016:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e018:	4367      	muls	r7, r4
 801e01a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e01c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e020:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e024:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e026:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e02a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e02e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e032:	44bc      	add	ip, r7
 801e034:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e038:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e03c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e048:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e04c:	ea4c 040a 	orr.w	r4, ip, sl
 801e050:	940e      	str	r4, [sp, #56]	; 0x38
 801e052:	43d2      	mvns	r2, r2
 801e054:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e056:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e05a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e05e:	fb0e f707 	mul.w	r7, lr, r7
 801e062:	fb01 770c 	mla	r7, r1, ip, r7
 801e066:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e06c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e070:	fb00 770c 	mla	r7, r0, ip, r7
 801e074:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e076:	b2d2      	uxtb	r2, r2
 801e078:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e07c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e07e:	fb08 770c 	mla	r7, r8, ip, r7
 801e082:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e086:	fb0e fe0c 	mul.w	lr, lr, ip
 801e08a:	fb01 e303 	mla	r3, r1, r3, lr
 801e08e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e090:	0a3f      	lsrs	r7, r7, #8
 801e092:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e096:	fb00 330a 	mla	r3, r0, sl, r3
 801e09a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e09c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e0a0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e0a4:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e0a8:	f8b9 3000 	ldrh.w	r3, [r9]
 801e0ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0b0:	1218      	asrs	r0, r3, #8
 801e0b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e0b6:	4350      	muls	r0, r2
 801e0b8:	10d9      	asrs	r1, r3, #3
 801e0ba:	00db      	lsls	r3, r3, #3
 801e0bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e0c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e0c4:	b2db      	uxtb	r3, r3
 801e0c6:	ea47 070c 	orr.w	r7, r7, ip
 801e0ca:	4351      	muls	r1, r2
 801e0cc:	4353      	muls	r3, r2
 801e0ce:	1c42      	adds	r2, r0, #1
 801e0d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e0d4:	0c3a      	lsrs	r2, r7, #16
 801e0d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e0da:	4a18      	ldr	r2, [pc, #96]	; (801e13c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801e0dc:	b2c0      	uxtb	r0, r0
 801e0de:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801e0e2:	1c4a      	adds	r2, r1, #1
 801e0e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e0e8:	0a3a      	lsrs	r2, r7, #8
 801e0ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e0ee:	00c9      	lsls	r1, r1, #3
 801e0f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e0f4:	4301      	orrs	r1, r0
 801e0f6:	1c58      	adds	r0, r3, #1
 801e0f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e0fc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e100:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801e104:	4308      	orrs	r0, r1
 801e106:	f8a9 0000 	strh.w	r0, [r9]
 801e10a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e10c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e10e:	f109 0902 	add.w	r9, r9, #2
 801e112:	441a      	add	r2, r3
 801e114:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e116:	9225      	str	r2, [sp, #148]	; 0x94
 801e118:	441d      	add	r5, r3
 801e11a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e11e:	e64c      	b.n	801ddba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e120:	2800      	cmp	r0, #0
 801e122:	f43f aeed 	beq.w	801df00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e126:	5c79      	ldrb	r1, [r7, r1]
 801e128:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e12c:	9109      	str	r1, [sp, #36]	; 0x24
 801e12e:	0e09      	lsrs	r1, r1, #24
 801e130:	9111      	str	r1, [sp, #68]	; 0x44
 801e132:	e6e5      	b.n	801df00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e134:	b01b      	add	sp, #108	; 0x6c
 801e136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e13a:	bf00      	nop
 801e13c:	fffff800 	.word	0xfffff800

0801e140 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e144:	b085      	sub	sp, #20
 801e146:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801e14a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801e14e:	fb00 7406 	mla	r4, r0, r6, r7
 801e152:	2800      	cmp	r0, #0
 801e154:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801e158:	9103      	str	r1, [sp, #12]
 801e15a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801e15e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801e162:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801e166:	9501      	str	r5, [sp, #4]
 801e168:	eb03 0904 	add.w	r9, r3, r4
 801e16c:	f2c0 8150 	blt.w	801e410 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e170:	4583      	cmp	fp, r0
 801e172:	f340 814d 	ble.w	801e410 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e176:	2f00      	cmp	r7, #0
 801e178:	f2c0 8146 	blt.w	801e408 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e17c:	42be      	cmp	r6, r7
 801e17e:	f340 8143 	ble.w	801e408 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e182:	f813 c004 	ldrb.w	ip, [r3, r4]
 801e186:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801e18a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801e18e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e192:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801e196:	4355      	muls	r5, r2
 801e198:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e19c:	fb0c f203 	mul.w	r2, ip, r3
 801e1a0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801e1a4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801e1a8:	441d      	add	r5, r3
 801e1aa:	f102 0320 	add.w	r3, r2, #32
 801e1ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e1b2:	0a1b      	lsrs	r3, r3, #8
 801e1b4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801e1b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e1bc:	431c      	orrs	r4, r3
 801e1be:	1c7b      	adds	r3, r7, #1
 801e1c0:	f100 812b 	bmi.w	801e41a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e1c4:	429e      	cmp	r6, r3
 801e1c6:	f340 8128 	ble.w	801e41a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e1ca:	2900      	cmp	r1, #0
 801e1cc:	f000 8128 	beq.w	801e420 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801e1d0:	9a01      	ldr	r2, [sp, #4]
 801e1d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e1d6:	8855      	ldrh	r5, [r2, #2]
 801e1d8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801e1dc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801e1e0:	fb08 f802 	mul.w	r8, r8, r2
 801e1e4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801e1e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e1ec:	435d      	muls	r5, r3
 801e1ee:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801e1f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e1f6:	44d0      	add	r8, sl
 801e1f8:	f105 0a20 	add.w	sl, r5, #32
 801e1fc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e200:	0a2d      	lsrs	r5, r5, #8
 801e202:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e206:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e20a:	432a      	orrs	r2, r5
 801e20c:	3001      	adds	r0, #1
 801e20e:	f100 810d 	bmi.w	801e42c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e212:	4583      	cmp	fp, r0
 801e214:	f340 810a 	ble.w	801e42c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e218:	f1be 0f00 	cmp.w	lr, #0
 801e21c:	f000 810b 	beq.w	801e436 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801e220:	2f00      	cmp	r7, #0
 801e222:	f2c0 8100 	blt.w	801e426 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e226:	42be      	cmp	r6, r7
 801e228:	f340 80fd 	ble.w	801e426 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e22c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e230:	9801      	ldr	r0, [sp, #4]
 801e232:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e236:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801e23a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e23e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801e242:	fb0a fa00 	mul.w	sl, sl, r0
 801e246:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e24a:	fb05 f808 	mul.w	r8, r5, r8
 801e24e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801e252:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801e256:	4482      	add	sl, r0
 801e258:	f108 0020 	add.w	r0, r8, #32
 801e25c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e260:	0a00      	lsrs	r0, r0, #8
 801e262:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801e266:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e26a:	ea4b 0b00 	orr.w	fp, fp, r0
 801e26e:	3701      	adds	r7, #1
 801e270:	f100 80e6 	bmi.w	801e440 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e274:	42be      	cmp	r6, r7
 801e276:	f340 80e3 	ble.w	801e440 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e27a:	2900      	cmp	r1, #0
 801e27c:	f000 80e3 	beq.w	801e446 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801e280:	9801      	ldr	r0, [sp, #4]
 801e282:	3601      	adds	r6, #1
 801e284:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801e288:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e28c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801e290:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e294:	fb07 f800 	mul.w	r8, r7, r0
 801e298:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801e29c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801e2a0:	fb09 f906 	mul.w	r9, r9, r6
 801e2a4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801e2a8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801e2ac:	44d1      	add	r9, sl
 801e2ae:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801e2b2:	f108 0020 	add.w	r0, r8, #32
 801e2b6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e2ba:	0a00      	lsrs	r0, r0, #8
 801e2bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e2c0:	4330      	orrs	r0, r6
 801e2c2:	b28e      	uxth	r6, r1
 801e2c4:	fa1f f98e 	uxth.w	r9, lr
 801e2c8:	fb06 f809 	mul.w	r8, r6, r9
 801e2cc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801e2d0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e2d4:	0136      	lsls	r6, r6, #4
 801e2d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e2da:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e2de:	9601      	str	r6, [sp, #4]
 801e2e0:	ea4a 0404 	orr.w	r4, sl, r4
 801e2e4:	fa1f f689 	uxth.w	r6, r9
 801e2e8:	9602      	str	r6, [sp, #8]
 801e2ea:	4626      	mov	r6, r4
 801e2ec:	fb11 f90e 	smulbb	r9, r1, lr
 801e2f0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e2f4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801e2f8:	f1ce 0410 	rsb	r4, lr, #16
 801e2fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e300:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e304:	1a64      	subs	r4, r4, r1
 801e306:	ea4a 0202 	orr.w	r2, sl, r2
 801e30a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801e30e:	434a      	muls	r2, r1
 801e310:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801e314:	fb04 2406 	mla	r4, r4, r6, r2
 801e318:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e31c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e320:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e324:	ea4a 0000 	orr.w	r0, sl, r0
 801e328:	fb09 4200 	mla	r2, r9, r0, r4
 801e32c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801e330:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e334:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801e338:	ea44 0b0b 	orr.w	fp, r4, fp
 801e33c:	9c01      	ldr	r4, [sp, #4]
 801e33e:	9e02      	ldr	r6, [sp, #8]
 801e340:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801e344:	1ba4      	subs	r4, r4, r6
 801e346:	9e01      	ldr	r6, [sp, #4]
 801e348:	b2a4      	uxth	r4, r4
 801e34a:	eba6 0608 	sub.w	r6, r6, r8
 801e34e:	b2b6      	uxth	r6, r6
 801e350:	4373      	muls	r3, r6
 801e352:	fb0c 3304 	mla	r3, ip, r4, r3
 801e356:	9c02      	ldr	r4, [sp, #8]
 801e358:	9903      	ldr	r1, [sp, #12]
 801e35a:	fb04 3505 	mla	r5, r4, r5, r3
 801e35e:	fb08 5707 	mla	r7, r8, r7, r5
 801e362:	8808      	ldrh	r0, [r1, #0]
 801e364:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801e368:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e36c:	b289      	uxth	r1, r1
 801e36e:	434f      	muls	r7, r1
 801e370:	1c7b      	adds	r3, r7, #1
 801e372:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e376:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801e37a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e37e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801e382:	1203      	asrs	r3, r0, #8
 801e384:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e388:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e38c:	b2ff      	uxtb	r7, r7
 801e38e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e392:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e396:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e39a:	fb13 f307 	smulbb	r3, r3, r7
 801e39e:	ea42 0e0e 	orr.w	lr, r2, lr
 801e3a2:	fa1f f28e 	uxth.w	r2, lr
 801e3a6:	1215      	asrs	r5, r2, #8
 801e3a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e3ac:	fb05 3501 	mla	r5, r5, r1, r3
 801e3b0:	10c3      	asrs	r3, r0, #3
 801e3b2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e3b6:	fb13 f307 	smulbb	r3, r3, r7
 801e3ba:	10d4      	asrs	r4, r2, #3
 801e3bc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e3c0:	fb04 3401 	mla	r4, r4, r1, r3
 801e3c4:	00c3      	lsls	r3, r0, #3
 801e3c6:	b2db      	uxtb	r3, r3
 801e3c8:	fb13 f307 	smulbb	r3, r3, r7
 801e3cc:	00d2      	lsls	r2, r2, #3
 801e3ce:	b2d2      	uxtb	r2, r2
 801e3d0:	fb02 3101 	mla	r1, r2, r1, r3
 801e3d4:	b2ad      	uxth	r5, r5
 801e3d6:	b289      	uxth	r1, r1
 801e3d8:	b2a4      	uxth	r4, r4
 801e3da:	1c6b      	adds	r3, r5, #1
 801e3dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e3e0:	1c62      	adds	r2, r4, #1
 801e3e2:	1c4b      	adds	r3, r1, #1
 801e3e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e3e8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e3ec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e3f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e3f4:	0964      	lsrs	r4, r4, #5
 801e3f6:	432b      	orrs	r3, r5
 801e3f8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e3fc:	9a03      	ldr	r2, [sp, #12]
 801e3fe:	4323      	orrs	r3, r4
 801e400:	8013      	strh	r3, [r2, #0]
 801e402:	b005      	add	sp, #20
 801e404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e408:	f04f 0c00 	mov.w	ip, #0
 801e40c:	4664      	mov	r4, ip
 801e40e:	e6d6      	b.n	801e1be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801e410:	2300      	movs	r3, #0
 801e412:	469c      	mov	ip, r3
 801e414:	461a      	mov	r2, r3
 801e416:	461c      	mov	r4, r3
 801e418:	e6f8      	b.n	801e20c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e41a:	2300      	movs	r3, #0
 801e41c:	461a      	mov	r2, r3
 801e41e:	e6f5      	b.n	801e20c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e420:	460b      	mov	r3, r1
 801e422:	460a      	mov	r2, r1
 801e424:	e6f2      	b.n	801e20c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e426:	2500      	movs	r5, #0
 801e428:	46ab      	mov	fp, r5
 801e42a:	e720      	b.n	801e26e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801e42c:	2700      	movs	r7, #0
 801e42e:	463d      	mov	r5, r7
 801e430:	4638      	mov	r0, r7
 801e432:	46bb      	mov	fp, r7
 801e434:	e745      	b.n	801e2c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e436:	4677      	mov	r7, lr
 801e438:	4675      	mov	r5, lr
 801e43a:	4670      	mov	r0, lr
 801e43c:	46f3      	mov	fp, lr
 801e43e:	e740      	b.n	801e2c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e440:	2700      	movs	r7, #0
 801e442:	4638      	mov	r0, r7
 801e444:	e73d      	b.n	801e2c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e446:	460f      	mov	r7, r1
 801e448:	4608      	mov	r0, r1
 801e44a:	e73a      	b.n	801e2c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801e44c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e450:	b097      	sub	sp, #92	; 0x5c
 801e452:	9214      	str	r2, [sp, #80]	; 0x50
 801e454:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e456:	9015      	str	r0, [sp, #84]	; 0x54
 801e458:	9308      	str	r3, [sp, #32]
 801e45a:	6850      	ldr	r0, [r2, #4]
 801e45c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e460:	9111      	str	r1, [sp, #68]	; 0x44
 801e462:	9312      	str	r3, [sp, #72]	; 0x48
 801e464:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801e468:	fb00 1303 	mla	r3, r0, r3, r1
 801e46c:	6812      	ldr	r2, [r2, #0]
 801e46e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e472:	9309      	str	r3, [sp, #36]	; 0x24
 801e474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	930b      	str	r3, [sp, #44]	; 0x2c
 801e47a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e47c:	685b      	ldr	r3, [r3, #4]
 801e47e:	930c      	str	r3, [sp, #48]	; 0x30
 801e480:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e484:	930a      	str	r3, [sp, #40]	; 0x28
 801e486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e488:	2b00      	cmp	r3, #0
 801e48a:	dc03      	bgt.n	801e494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e48c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e48e:	2b00      	cmp	r3, #0
 801e490:	f340 83cb 	ble.w	801ec2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801e494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e496:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e49a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e49e:	1e48      	subs	r0, r1, #1
 801e4a0:	1e55      	subs	r5, r2, #1
 801e4a2:	9b08      	ldr	r3, [sp, #32]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	f340 81a3 	ble.w	801e7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801e4aa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801e4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e4ae:	1436      	asrs	r6, r6, #16
 801e4b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e4b4:	d406      	bmi.n	801e4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e4b6:	4286      	cmp	r6, r0
 801e4b8:	da04      	bge.n	801e4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	db02      	blt.n	801e4c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e4be:	42ab      	cmp	r3, r5
 801e4c0:	f2c0 8197 	blt.w	801e7f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801e4c4:	3601      	adds	r6, #1
 801e4c6:	f100 8184 	bmi.w	801e7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801e4ca:	42b1      	cmp	r1, r6
 801e4cc:	f2c0 8181 	blt.w	801e7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	f100 817e 	bmi.w	801e7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801e4d6:	429a      	cmp	r2, r3
 801e4d8:	f2c0 817b 	blt.w	801e7d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801e4dc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e4e0:	9b08      	ldr	r3, [sp, #32]
 801e4e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e4e4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e4e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	f340 81a4 	ble.w	801e836 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801e4ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e4f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e4f2:	1418      	asrs	r0, r3, #16
 801e4f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e4f6:	142d      	asrs	r5, r5, #16
 801e4f8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e4fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e4fe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e502:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e504:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e508:	f100 81f8 	bmi.w	801e8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e50c:	f102 3eff 	add.w	lr, r2, #4294967295
 801e510:	4575      	cmp	r5, lr
 801e512:	f280 81f3 	bge.w	801e8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e516:	2800      	cmp	r0, #0
 801e518:	f2c0 81f0 	blt.w	801e8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e51c:	f103 3eff 	add.w	lr, r3, #4294967295
 801e520:	4570      	cmp	r0, lr
 801e522:	f280 81eb 	bge.w	801e8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e526:	b212      	sxth	r2, r2
 801e528:	fb00 5002 	mla	r0, r0, r2, r5
 801e52c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e52e:	fa1f fe81 	uxth.w	lr, r1
 801e532:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e536:	eb03 0a00 	add.w	sl, r3, r0
 801e53a:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e53e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801e542:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e546:	b29b      	uxth	r3, r3
 801e548:	f1bc 0f00 	cmp.w	ip, #0
 801e54c:	f000 81b9 	beq.w	801e8c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801e550:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e554:	eb0a 0b02 	add.w	fp, sl, r2
 801e558:	fa1f fa8c 	uxth.w	sl, ip
 801e55c:	fb0a fe0e 	mul.w	lr, sl, lr
 801e560:	eba5 050e 	sub.w	r5, r5, lr
 801e564:	b2ad      	uxth	r5, r5
 801e566:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e56a:	fb08 f505 	mul.w	r5, r8, r5
 801e56e:	fa1f fa8a 	uxth.w	sl, sl
 801e572:	eba3 030a 	sub.w	r3, r3, sl
 801e576:	b29b      	uxth	r3, r3
 801e578:	940d      	str	r4, [sp, #52]	; 0x34
 801e57a:	fb09 5303 	mla	r3, r9, r3, r5
 801e57e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e582:	940e      	str	r4, [sp, #56]	; 0x38
 801e584:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e586:	fb0a 3304 	mla	r3, sl, r4, r3
 801e58a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e58c:	fb0e 3304 	mla	r3, lr, r4, r3
 801e590:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e594:	2b00      	cmp	r3, #0
 801e596:	f000 810f 	beq.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e59a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e59c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e5a0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e5a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e5a8:	f000 8190 	beq.w	801e8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801e5ac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e5b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e5b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e5b8:	fb09 f000 	mul.w	r0, r9, r0
 801e5bc:	fb0a fe0e 	mul.w	lr, sl, lr
 801e5c0:	f100 0b20 	add.w	fp, r0, #32
 801e5c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e5c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e5cc:	44ce      	add	lr, r9
 801e5ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e5d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e5d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e5da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e5de:	ea4e 0909 	orr.w	r9, lr, r9
 801e5e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e5e6:	8868      	ldrh	r0, [r5, #2]
 801e5e8:	d019      	beq.n	801e61e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e5ea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e5ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e5f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e5f6:	fb08 f800 	mul.w	r8, r8, r0
 801e5fa:	fb0a fe0e 	mul.w	lr, sl, lr
 801e5fe:	f108 0b20 	add.w	fp, r8, #32
 801e602:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e606:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e60a:	4486      	add	lr, r0
 801e60c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e610:	0a00      	lsrs	r0, r0, #8
 801e612:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e616:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e61a:	ea4e 0000 	orr.w	r0, lr, r0
 801e61e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e622:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e626:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e62a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e62e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e632:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e636:	ea4e 0909 	orr.w	r9, lr, r9
 801e63a:	ea4a 0000 	orr.w	r0, sl, r0
 801e63e:	f1bc 0f00 	cmp.w	ip, #0
 801e642:	f000 8145 	beq.w	801e8d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801e646:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e64a:	3a01      	subs	r2, #1
 801e64c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e64e:	0052      	lsls	r2, r2, #1
 801e650:	3202      	adds	r2, #2
 801e652:	2cff      	cmp	r4, #255	; 0xff
 801e654:	eb05 0e02 	add.w	lr, r5, r2
 801e658:	5aaa      	ldrh	r2, [r5, r2]
 801e65a:	d018      	beq.n	801e68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801e65c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801e660:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e664:	fb04 fa02 	mul.w	sl, r4, r2
 801e668:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e66c:	fb08 f805 	mul.w	r8, r8, r5
 801e670:	f10a 0520 	add.w	r5, sl, #32
 801e674:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e678:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e67c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e680:	4442      	add	r2, r8
 801e682:	0a2d      	lsrs	r5, r5, #8
 801e684:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e688:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e68c:	432a      	orrs	r2, r5
 801e68e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e690:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e694:	2cff      	cmp	r4, #255	; 0xff
 801e696:	d01a      	beq.n	801e6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e698:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801e69c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e6a0:	fb04 fa05 	mul.w	sl, r4, r5
 801e6a4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e6a8:	fb08 f80e 	mul.w	r8, r8, lr
 801e6ac:	f10a 0e20 	add.w	lr, sl, #32
 801e6b0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e6b4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e6b8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e6bc:	4445      	add	r5, r8
 801e6be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e6c2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e6c6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e6ca:	ea45 050e 	orr.w	r5, r5, lr
 801e6ce:	fb1c fe01 	smulbb	lr, ip, r1
 801e6d2:	f1cc 0810 	rsb	r8, ip, #16
 801e6d6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801e6da:	eba8 0801 	sub.w	r8, r8, r1
 801e6de:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801e6e2:	4341      	muls	r1, r0
 801e6e4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801e6e8:	fb09 1108 	mla	r1, r9, r8, r1
 801e6ec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e6f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e6f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e6f8:	ea4a 0202 	orr.w	r2, sl, r2
 801e6fc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801e700:	fb0c 1102 	mla	r1, ip, r2, r1
 801e704:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801e708:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e70c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e710:	ea4b 0505 	orr.w	r5, fp, r5
 801e714:	fb0e 1e05 	mla	lr, lr, r5, r1
 801e718:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e71c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e720:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e724:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e728:	ea42 0e0e 	orr.w	lr, r2, lr
 801e72c:	fa1f f28e 	uxth.w	r2, lr
 801e730:	2bff      	cmp	r3, #255	; 0xff
 801e732:	d103      	bne.n	801e73c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e734:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e736:	29ff      	cmp	r1, #255	; 0xff
 801e738:	f000 80de 	beq.w	801e8f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801e73c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e73e:	8838      	ldrh	r0, [r7, #0]
 801e740:	434b      	muls	r3, r1
 801e742:	f103 0c01 	add.w	ip, r3, #1
 801e746:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801e74a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801e74e:	fa5f fc83 	uxtb.w	ip, r3
 801e752:	1203      	asrs	r3, r0, #8
 801e754:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e758:	fb13 f30c 	smulbb	r3, r3, ip
 801e75c:	1215      	asrs	r5, r2, #8
 801e75e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e762:	fb05 3501 	mla	r5, r5, r1, r3
 801e766:	10c3      	asrs	r3, r0, #3
 801e768:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e76c:	fb13 f30c 	smulbb	r3, r3, ip
 801e770:	10d1      	asrs	r1, r2, #3
 801e772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e774:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e778:	fb01 3104 	mla	r1, r1, r4, r3
 801e77c:	00c3      	lsls	r3, r0, #3
 801e77e:	b2db      	uxtb	r3, r3
 801e780:	fb13 f30c 	smulbb	r3, r3, ip
 801e784:	00d2      	lsls	r2, r2, #3
 801e786:	b2d2      	uxtb	r2, r2
 801e788:	fb02 3304 	mla	r3, r2, r4, r3
 801e78c:	b2ad      	uxth	r5, r5
 801e78e:	b29a      	uxth	r2, r3
 801e790:	1c6b      	adds	r3, r5, #1
 801e792:	b289      	uxth	r1, r1
 801e794:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e798:	1c53      	adds	r3, r2, #1
 801e79a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e79e:	1c4a      	adds	r2, r1, #1
 801e7a0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e7a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e7a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e7ac:	0949      	lsrs	r1, r1, #5
 801e7ae:	432b      	orrs	r3, r5
 801e7b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e7b4:	430b      	orrs	r3, r1
 801e7b6:	803b      	strh	r3, [r7, #0]
 801e7b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e7ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e7bc:	3702      	adds	r7, #2
 801e7be:	4413      	add	r3, r2
 801e7c0:	9321      	str	r3, [sp, #132]	; 0x84
 801e7c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e7c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e7c6:	441a      	add	r2, r3
 801e7c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e7ca:	9222      	str	r2, [sp, #136]	; 0x88
 801e7cc:	3b01      	subs	r3, #1
 801e7ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7d0:	e689      	b.n	801e4e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e7d4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801e7d6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801e7d8:	4433      	add	r3, r6
 801e7da:	9321      	str	r3, [sp, #132]	; 0x84
 801e7dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e7de:	441c      	add	r4, r3
 801e7e0:	9b08      	ldr	r3, [sp, #32]
 801e7e2:	9422      	str	r4, [sp, #136]	; 0x88
 801e7e4:	3b01      	subs	r3, #1
 801e7e6:	9308      	str	r3, [sp, #32]
 801e7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7ea:	3302      	adds	r3, #2
 801e7ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e7ee:	e658      	b.n	801e4a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e7f0:	d028      	beq.n	801e844 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801e7f2:	9b08      	ldr	r3, [sp, #32]
 801e7f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e7f6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e7f8:	3b01      	subs	r3, #1
 801e7fa:	fb00 5003 	mla	r0, r0, r3, r5
 801e7fe:	1400      	asrs	r0, r0, #16
 801e800:	f53f ae6c 	bmi.w	801e4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e804:	3901      	subs	r1, #1
 801e806:	4288      	cmp	r0, r1
 801e808:	f6bf ae68 	bge.w	801e4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e80c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e80e:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e810:	fb01 0303 	mla	r3, r1, r3, r0
 801e814:	141b      	asrs	r3, r3, #16
 801e816:	f53f ae61 	bmi.w	801e4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e81a:	3a01      	subs	r2, #1
 801e81c:	4293      	cmp	r3, r2
 801e81e:	f6bf ae5d 	bge.w	801e4dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e822:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e826:	9b08      	ldr	r3, [sp, #32]
 801e828:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e82c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e82e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e830:	2b00      	cmp	r3, #0
 801e832:	f300 8082 	bgt.w	801e93a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801e836:	9b08      	ldr	r3, [sp, #32]
 801e838:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e83e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e842:	9309      	str	r3, [sp, #36]	; 0x24
 801e844:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e846:	2b00      	cmp	r3, #0
 801e848:	f340 81ef 	ble.w	801ec2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801e84c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e850:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e854:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e858:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e85c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e860:	eef0 6a62 	vmov.f32	s13, s5
 801e864:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e868:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e86c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e874:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e878:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801e87c:	eef0 6a43 	vmov.f32	s13, s6
 801e880:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e884:	ee12 2a90 	vmov	r2, s5
 801e888:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e88c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e88e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e892:	fb92 f3f3 	sdiv	r3, r2, r3
 801e896:	ee13 2a10 	vmov	r2, s6
 801e89a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e89c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e89e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801e8a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8a6:	9324      	str	r3, [sp, #144]	; 0x90
 801e8a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e8ac:	3b01      	subs	r3, #1
 801e8ae:	9311      	str	r3, [sp, #68]	; 0x44
 801e8b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e8b2:	bf08      	it	eq
 801e8b4:	4613      	moveq	r3, r2
 801e8b6:	eeb0 3a67 	vmov.f32	s6, s15
 801e8ba:	9308      	str	r3, [sp, #32]
 801e8bc:	eef0 2a47 	vmov.f32	s5, s14
 801e8c0:	e5e1      	b.n	801e486 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e8c2:	fb08 f505 	mul.w	r5, r8, r5
 801e8c6:	fb09 5303 	mla	r3, r9, r3, r5
 801e8ca:	e661      	b.n	801e590 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801e8cc:	4681      	mov	r9, r0
 801e8ce:	e688      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e8d0:	f1c1 0210 	rsb	r2, r1, #16
 801e8d4:	4341      	muls	r1, r0
 801e8d6:	fb09 1902 	mla	r9, r9, r2, r1
 801e8da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e8de:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801e8e2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e8e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e8ea:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e8ee:	ea42 0909 	orr.w	r9, r2, r9
 801e8f2:	fa1f f289 	uxth.w	r2, r9
 801e8f6:	e71b      	b.n	801e730 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801e8f8:	803a      	strh	r2, [r7, #0]
 801e8fa:	e75d      	b.n	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e8fc:	f115 0e01 	adds.w	lr, r5, #1
 801e900:	f53f af5a 	bmi.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e904:	4572      	cmp	r2, lr
 801e906:	f6ff af57 	blt.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e90a:	f110 0e01 	adds.w	lr, r0, #1
 801e90e:	f53f af53 	bmi.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e912:	4573      	cmp	r3, lr
 801e914:	f6ff af50 	blt.w	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e918:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e91a:	b21b      	sxth	r3, r3
 801e91c:	b212      	sxth	r2, r2
 801e91e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801e922:	9301      	str	r3, [sp, #4]
 801e924:	9200      	str	r2, [sp, #0]
 801e926:	e9cd c405 	strd	ip, r4, [sp, #20]
 801e92a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801e92e:	9502      	str	r5, [sp, #8]
 801e930:	4639      	mov	r1, r7
 801e932:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e934:	f7ff fc04 	bl	801e140 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801e938:	e73e      	b.n	801e7b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e93c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e942:	fa1f fc82 	uxth.w	ip, r2
 801e946:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801e94a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e94c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801e950:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e956:	141f      	asrs	r7, r3, #16
 801e958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e95a:	141b      	asrs	r3, r3, #16
 801e95c:	fb01 3707 	mla	r7, r1, r7, r3
 801e960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e962:	eb03 0a07 	add.w	sl, r3, r7
 801e966:	f813 9007 	ldrb.w	r9, [r3, r7]
 801e96a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801e96e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e972:	b29b      	uxth	r3, r3
 801e974:	2d00      	cmp	r5, #0
 801e976:	f000 813d 	beq.w	801ebf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801e97a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801e97e:	eb0a 0b01 	add.w	fp, sl, r1
 801e982:	fa1f fa85 	uxth.w	sl, r5
 801e986:	fb0a fc0c 	mul.w	ip, sl, ip
 801e98a:	eba0 000c 	sub.w	r0, r0, ip
 801e98e:	b280      	uxth	r0, r0
 801e990:	fb08 f000 	mul.w	r0, r8, r0
 801e994:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801e998:	fa1f fa8a 	uxth.w	sl, sl
 801e99c:	eba3 030a 	sub.w	r3, r3, sl
 801e9a0:	b29b      	uxth	r3, r3
 801e9a2:	fb09 0303 	mla	r3, r9, r3, r0
 801e9a6:	940f      	str	r4, [sp, #60]	; 0x3c
 801e9a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e9aa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e9ae:	fb0a 3300 	mla	r3, sl, r0, r3
 801e9b2:	fb0c 3304 	mla	r3, ip, r4, r3
 801e9b6:	9410      	str	r4, [sp, #64]	; 0x40
 801e9b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	f000 810b 	beq.w	801ebd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801e9c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e9c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e9ca:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801e9ce:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801e9d2:	f000 8114 	beq.w	801ebfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 801e9d6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e9da:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e9de:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e9e2:	fb09 f707 	mul.w	r7, r9, r7
 801e9e6:	fb0a fc0c 	mul.w	ip, sl, ip
 801e9ea:	f107 0b20 	add.w	fp, r7, #32
 801e9ee:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801e9f2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e9f6:	44cc      	add	ip, r9
 801e9f8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801e9fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ea00:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ea04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ea08:	ea4c 0909 	orr.w	r9, ip, r9
 801ea0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ea10:	8847      	ldrh	r7, [r0, #2]
 801ea12:	d019      	beq.n	801ea48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 801ea14:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ea18:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ea1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ea20:	fb08 f807 	mul.w	r8, r8, r7
 801ea24:	fb0a fc0c 	mul.w	ip, sl, ip
 801ea28:	f108 0b20 	add.w	fp, r8, #32
 801ea2c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801ea30:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ea34:	44bc      	add	ip, r7
 801ea36:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ea3a:	0a3f      	lsrs	r7, r7, #8
 801ea3c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ea40:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ea44:	ea4c 0707 	orr.w	r7, ip, r7
 801ea48:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ea4c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ea50:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ea54:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ea58:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ea5c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ea60:	ea4c 0909 	orr.w	r9, ip, r9
 801ea64:	ea4a 0707 	orr.w	r7, sl, r7
 801ea68:	2d00      	cmp	r5, #0
 801ea6a:	f000 80ca 	beq.w	801ec02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801ea6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ea72:	3901      	subs	r1, #1
 801ea74:	0049      	lsls	r1, r1, #1
 801ea76:	3102      	adds	r1, #2
 801ea78:	eb00 0c01 	add.w	ip, r0, r1
 801ea7c:	5a41      	ldrh	r1, [r0, r1]
 801ea7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ea80:	28ff      	cmp	r0, #255	; 0xff
 801ea82:	d019      	beq.n	801eab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 801ea84:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ea86:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801ea8a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea8e:	fb04 fa01 	mul.w	sl, r4, r1
 801ea92:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ea96:	fb08 f800 	mul.w	r8, r8, r0
 801ea9a:	f10a 0020 	add.w	r0, sl, #32
 801ea9e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801eaa2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801eaa6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801eaaa:	4441      	add	r1, r8
 801eaac:	0a00      	lsrs	r0, r0, #8
 801eaae:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801eab2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801eab6:	4301      	orrs	r1, r0
 801eab8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eaba:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801eabe:	2cff      	cmp	r4, #255	; 0xff
 801eac0:	d01a      	beq.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 801eac2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801eac6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801eaca:	fb04 fa00 	mul.w	sl, r4, r0
 801eace:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ead2:	fb08 f80c 	mul.w	r8, r8, ip
 801ead6:	f10a 0c20 	add.w	ip, sl, #32
 801eada:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801eade:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801eae2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801eae6:	4440      	add	r0, r8
 801eae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eaec:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801eaf0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801eaf4:	ea40 000c 	orr.w	r0, r0, ip
 801eaf8:	fb15 fc02 	smulbb	ip, r5, r2
 801eafc:	f1c5 0810 	rsb	r8, r5, #16
 801eb00:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801eb04:	eba8 0802 	sub.w	r8, r8, r2
 801eb08:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801eb0c:	437a      	muls	r2, r7
 801eb0e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801eb12:	fb09 2208 	mla	r2, r9, r8, r2
 801eb16:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801eb1a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801eb1e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801eb22:	ea4a 0101 	orr.w	r1, sl, r1
 801eb26:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801eb2a:	fb05 2201 	mla	r2, r5, r1, r2
 801eb2e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801eb32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801eb36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eb3a:	ea4b 0000 	orr.w	r0, fp, r0
 801eb3e:	fb0c 2200 	mla	r2, ip, r0, r2
 801eb42:	0d57      	lsrs	r7, r2, #21
 801eb44:	0952      	lsrs	r2, r2, #5
 801eb46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801eb4e:	433a      	orrs	r2, r7
 801eb50:	2bff      	cmp	r3, #255	; 0xff
 801eb52:	b292      	uxth	r2, r2
 801eb54:	d102      	bne.n	801eb5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801eb56:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eb58:	29ff      	cmp	r1, #255	; 0xff
 801eb5a:	d063      	beq.n	801ec24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 801eb5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb5e:	f8be 1000 	ldrh.w	r1, [lr]
 801eb62:	4343      	muls	r3, r0
 801eb64:	1c58      	adds	r0, r3, #1
 801eb66:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801eb6a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801eb6e:	1208      	asrs	r0, r1, #8
 801eb70:	b2db      	uxtb	r3, r3
 801eb72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eb76:	fb10 f003 	smulbb	r0, r0, r3
 801eb7a:	10cf      	asrs	r7, r1, #3
 801eb7c:	00c9      	lsls	r1, r1, #3
 801eb7e:	b2c9      	uxtb	r1, r1
 801eb80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eb82:	1215      	asrs	r5, r2, #8
 801eb84:	fb11 f103 	smulbb	r1, r1, r3
 801eb88:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801eb8c:	fb05 0504 	mla	r5, r5, r4, r0
 801eb90:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eb94:	10d0      	asrs	r0, r2, #3
 801eb96:	00d2      	lsls	r2, r2, #3
 801eb98:	fb17 f703 	smulbb	r7, r7, r3
 801eb9c:	b2d2      	uxtb	r2, r2
 801eb9e:	fb02 1204 	mla	r2, r2, r4, r1
 801eba2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eba6:	fb00 7004 	mla	r0, r0, r4, r7
 801ebaa:	b2ad      	uxth	r5, r5
 801ebac:	b292      	uxth	r2, r2
 801ebae:	1c6b      	adds	r3, r5, #1
 801ebb0:	1c57      	adds	r7, r2, #1
 801ebb2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ebb6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ebba:	b280      	uxth	r0, r0
 801ebbc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ebc0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ebc4:	433d      	orrs	r5, r7
 801ebc6:	1c47      	adds	r7, r0, #1
 801ebc8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801ebcc:	097f      	lsrs	r7, r7, #5
 801ebce:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ebd2:	433d      	orrs	r5, r7
 801ebd4:	f8ae 5000 	strh.w	r5, [lr]
 801ebd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ebda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ebdc:	f10e 0e02 	add.w	lr, lr, #2
 801ebe0:	4413      	add	r3, r2
 801ebe2:	9321      	str	r3, [sp, #132]	; 0x84
 801ebe4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ebe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebe8:	441a      	add	r2, r3
 801ebea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ebec:	9222      	str	r2, [sp, #136]	; 0x88
 801ebee:	3b01      	subs	r3, #1
 801ebf0:	9313      	str	r3, [sp, #76]	; 0x4c
 801ebf2:	e61c      	b.n	801e82e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801ebf4:	fb08 f000 	mul.w	r0, r8, r0
 801ebf8:	fb09 0303 	mla	r3, r9, r3, r0
 801ebfc:	e6dc      	b.n	801e9b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 801ebfe:	46b9      	mov	r9, r7
 801ec00:	e704      	b.n	801ea0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 801ec02:	f1c2 0110 	rsb	r1, r2, #16
 801ec06:	437a      	muls	r2, r7
 801ec08:	fb09 2901 	mla	r9, r9, r1, r2
 801ec0c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ec10:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801ec14:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801ec18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec1c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec20:	4302      	orrs	r2, r0
 801ec22:	e795      	b.n	801eb50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801ec24:	f8ae 2000 	strh.w	r2, [lr]
 801ec28:	e7d6      	b.n	801ebd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801ec2a:	b017      	add	sp, #92	; 0x5c
 801ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec34:	b085      	sub	sp, #20
 801ec36:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801ec3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801ec3e:	fb00 7406 	mla	r4, r0, r6, r7
 801ec42:	2800      	cmp	r0, #0
 801ec44:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801ec48:	9103      	str	r1, [sp, #12]
 801ec4a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801ec4e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801ec52:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ec56:	9501      	str	r5, [sp, #4]
 801ec58:	eb02 0904 	add.w	r9, r2, r4
 801ec5c:	f2c0 8141 	blt.w	801eee2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ec60:	4583      	cmp	fp, r0
 801ec62:	f340 813e 	ble.w	801eee2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ec66:	2f00      	cmp	r7, #0
 801ec68:	f2c0 8137 	blt.w	801eeda <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ec6c:	42be      	cmp	r6, r7
 801ec6e:	f340 8134 	ble.w	801eeda <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ec72:	f812 c004 	ldrb.w	ip, [r2, r4]
 801ec76:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801ec7a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801ec7e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ec82:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801ec86:	4355      	muls	r5, r2
 801ec88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ec8c:	fb0c f203 	mul.w	r2, ip, r3
 801ec90:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ec94:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801ec98:	441d      	add	r5, r3
 801ec9a:	f102 0320 	add.w	r3, r2, #32
 801ec9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eca2:	0a1b      	lsrs	r3, r3, #8
 801eca4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801eca8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ecac:	431c      	orrs	r4, r3
 801ecae:	1c7b      	adds	r3, r7, #1
 801ecb0:	f100 811c 	bmi.w	801eeec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ecb4:	429e      	cmp	r6, r3
 801ecb6:	f340 8119 	ble.w	801eeec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ecba:	2900      	cmp	r1, #0
 801ecbc:	f000 8119 	beq.w	801eef2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801ecc0:	9a01      	ldr	r2, [sp, #4]
 801ecc2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ecc6:	8855      	ldrh	r5, [r2, #2]
 801ecc8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801eccc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801ecd0:	fb08 f802 	mul.w	r8, r8, r2
 801ecd4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801ecd8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ecdc:	435d      	muls	r5, r3
 801ecde:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801ece2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ece6:	44d0      	add	r8, sl
 801ece8:	f105 0a20 	add.w	sl, r5, #32
 801ecec:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ecf0:	0a2d      	lsrs	r5, r5, #8
 801ecf2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801ecf6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ecfa:	432a      	orrs	r2, r5
 801ecfc:	3001      	adds	r0, #1
 801ecfe:	f100 80fe 	bmi.w	801eefe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801ed02:	4583      	cmp	fp, r0
 801ed04:	f340 80fb 	ble.w	801eefe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801ed08:	f1be 0f00 	cmp.w	lr, #0
 801ed0c:	f000 80fc 	beq.w	801ef08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801ed10:	2f00      	cmp	r7, #0
 801ed12:	f2c0 80f1 	blt.w	801eef8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801ed16:	42be      	cmp	r6, r7
 801ed18:	f340 80ee 	ble.w	801eef8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801ed1c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ed20:	9801      	ldr	r0, [sp, #4]
 801ed22:	f819 5006 	ldrb.w	r5, [r9, r6]
 801ed26:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801ed2a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ed2e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801ed32:	fb0a fa00 	mul.w	sl, sl, r0
 801ed36:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ed3a:	fb05 f808 	mul.w	r8, r5, r8
 801ed3e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801ed42:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801ed46:	4482      	add	sl, r0
 801ed48:	f108 0020 	add.w	r0, r8, #32
 801ed4c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ed50:	0a00      	lsrs	r0, r0, #8
 801ed52:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801ed56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ed5a:	ea4b 0b00 	orr.w	fp, fp, r0
 801ed5e:	3701      	adds	r7, #1
 801ed60:	f100 80d7 	bmi.w	801ef12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ed64:	42be      	cmp	r6, r7
 801ed66:	f340 80d4 	ble.w	801ef12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ed6a:	2900      	cmp	r1, #0
 801ed6c:	f000 80d4 	beq.w	801ef18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801ed70:	9801      	ldr	r0, [sp, #4]
 801ed72:	3601      	adds	r6, #1
 801ed74:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801ed78:	f819 7006 	ldrb.w	r7, [r9, r6]
 801ed7c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801ed80:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ed84:	fb07 f800 	mul.w	r8, r7, r0
 801ed88:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801ed8c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801ed90:	fb09 f906 	mul.w	r9, r9, r6
 801ed94:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801ed98:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801ed9c:	44d1      	add	r9, sl
 801ed9e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801eda2:	f108 0020 	add.w	r0, r8, #32
 801eda6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801edaa:	0a00      	lsrs	r0, r0, #8
 801edac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801edb0:	4330      	orrs	r0, r6
 801edb2:	b28e      	uxth	r6, r1
 801edb4:	fa1f f98e 	uxth.w	r9, lr
 801edb8:	fb06 f809 	mul.w	r8, r6, r9
 801edbc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801edc0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801edc4:	0136      	lsls	r6, r6, #4
 801edc6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801edca:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801edce:	9601      	str	r6, [sp, #4]
 801edd0:	ea4a 0404 	orr.w	r4, sl, r4
 801edd4:	fa1f f689 	uxth.w	r6, r9
 801edd8:	9602      	str	r6, [sp, #8]
 801edda:	4626      	mov	r6, r4
 801eddc:	fb11 f90e 	smulbb	r9, r1, lr
 801ede0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ede4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801ede8:	f1ce 0410 	rsb	r4, lr, #16
 801edec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801edf0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801edf4:	1a64      	subs	r4, r4, r1
 801edf6:	ea4a 0202 	orr.w	r2, sl, r2
 801edfa:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801edfe:	434a      	muls	r2, r1
 801ee00:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801ee04:	fb04 2406 	mla	r4, r4, r6, r2
 801ee08:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ee0c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ee10:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ee14:	ea4a 0000 	orr.w	r0, sl, r0
 801ee18:	fb09 4200 	mla	r2, r9, r0, r4
 801ee1c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801ee20:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ee24:	9801      	ldr	r0, [sp, #4]
 801ee26:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ee2a:	ea44 0b0b 	orr.w	fp, r4, fp
 801ee2e:	9c02      	ldr	r4, [sp, #8]
 801ee30:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ee34:	1b00      	subs	r0, r0, r4
 801ee36:	9c01      	ldr	r4, [sp, #4]
 801ee38:	b280      	uxth	r0, r0
 801ee3a:	eba4 0608 	sub.w	r6, r4, r8
 801ee3e:	b2b6      	uxth	r6, r6
 801ee40:	4373      	muls	r3, r6
 801ee42:	fb0c 3300 	mla	r3, ip, r0, r3
 801ee46:	9802      	ldr	r0, [sp, #8]
 801ee48:	9903      	ldr	r1, [sp, #12]
 801ee4a:	fb00 3505 	mla	r5, r0, r5, r3
 801ee4e:	fb08 5707 	mla	r7, r8, r7, r5
 801ee52:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801ee56:	8809      	ldrh	r1, [r1, #0]
 801ee58:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801ee5c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801ee60:	120b      	asrs	r3, r1, #8
 801ee62:	b2ff      	uxtb	r7, r7
 801ee64:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ee68:	437b      	muls	r3, r7
 801ee6a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ee6e:	10c8      	asrs	r0, r1, #3
 801ee70:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ee74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ee78:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ee7c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ee80:	00c9      	lsls	r1, r1, #3
 801ee82:	4378      	muls	r0, r7
 801ee84:	ea42 0e0e 	orr.w	lr, r2, lr
 801ee88:	b2c9      	uxtb	r1, r1
 801ee8a:	fa1f f28e 	uxth.w	r2, lr
 801ee8e:	434f      	muls	r7, r1
 801ee90:	1c59      	adds	r1, r3, #1
 801ee92:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ee96:	1213      	asrs	r3, r2, #8
 801ee98:	f023 0307 	bic.w	r3, r3, #7
 801ee9c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eea0:	1c41      	adds	r1, r0, #1
 801eea2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801eea6:	10d1      	asrs	r1, r2, #3
 801eea8:	f021 0103 	bic.w	r1, r1, #3
 801eeac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801eeb0:	021b      	lsls	r3, r3, #8
 801eeb2:	00c9      	lsls	r1, r1, #3
 801eeb4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eeb8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801eebc:	430b      	orrs	r3, r1
 801eebe:	1c79      	adds	r1, r7, #1
 801eec0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801eec4:	00d2      	lsls	r2, r2, #3
 801eec6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801eeca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801eece:	431a      	orrs	r2, r3
 801eed0:	9b03      	ldr	r3, [sp, #12]
 801eed2:	801a      	strh	r2, [r3, #0]
 801eed4:	b005      	add	sp, #20
 801eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeda:	f04f 0c00 	mov.w	ip, #0
 801eede:	4664      	mov	r4, ip
 801eee0:	e6e5      	b.n	801ecae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801eee2:	2300      	movs	r3, #0
 801eee4:	469c      	mov	ip, r3
 801eee6:	461a      	mov	r2, r3
 801eee8:	461c      	mov	r4, r3
 801eeea:	e707      	b.n	801ecfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801eeec:	2300      	movs	r3, #0
 801eeee:	461a      	mov	r2, r3
 801eef0:	e704      	b.n	801ecfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801eef2:	460b      	mov	r3, r1
 801eef4:	460a      	mov	r2, r1
 801eef6:	e701      	b.n	801ecfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801eef8:	2500      	movs	r5, #0
 801eefa:	46ab      	mov	fp, r5
 801eefc:	e72f      	b.n	801ed5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801eefe:	2700      	movs	r7, #0
 801ef00:	463d      	mov	r5, r7
 801ef02:	4638      	mov	r0, r7
 801ef04:	46bb      	mov	fp, r7
 801ef06:	e754      	b.n	801edb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801ef08:	4677      	mov	r7, lr
 801ef0a:	4675      	mov	r5, lr
 801ef0c:	4670      	mov	r0, lr
 801ef0e:	46f3      	mov	fp, lr
 801ef10:	e74f      	b.n	801edb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801ef12:	2700      	movs	r7, #0
 801ef14:	4638      	mov	r0, r7
 801ef16:	e74c      	b.n	801edb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801ef18:	460f      	mov	r7, r1
 801ef1a:	4608      	mov	r0, r1
 801ef1c:	e749      	b.n	801edb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801ef20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef24:	b093      	sub	sp, #76	; 0x4c
 801ef26:	9210      	str	r2, [sp, #64]	; 0x40
 801ef28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ef2a:	9011      	str	r0, [sp, #68]	; 0x44
 801ef2c:	6850      	ldr	r0, [r2, #4]
 801ef2e:	910e      	str	r1, [sp, #56]	; 0x38
 801ef30:	9306      	str	r3, [sp, #24]
 801ef32:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ef36:	fb00 1303 	mla	r3, r0, r3, r1
 801ef3a:	6812      	ldr	r2, [r2, #0]
 801ef3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ef40:	9307      	str	r3, [sp, #28]
 801ef42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	9308      	str	r3, [sp, #32]
 801ef48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef4a:	685b      	ldr	r3, [r3, #4]
 801ef4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	dc03      	bgt.n	801ef5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ef54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	f340 83b4 	ble.w	801f6c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801ef5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef62:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef66:	1e48      	subs	r0, r1, #1
 801ef68:	1e55      	subs	r5, r2, #1
 801ef6a:	9b06      	ldr	r3, [sp, #24]
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	f340 8163 	ble.w	801f238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801ef72:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ef74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ef76:	1436      	asrs	r6, r6, #16
 801ef78:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef7c:	d406      	bmi.n	801ef8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef7e:	4286      	cmp	r6, r0
 801ef80:	da04      	bge.n	801ef8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	db02      	blt.n	801ef8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef86:	42ab      	cmp	r3, r5
 801ef88:	f2c0 8157 	blt.w	801f23a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ef8c:	3601      	adds	r6, #1
 801ef8e:	f100 8144 	bmi.w	801f21a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801ef92:	42b1      	cmp	r1, r6
 801ef94:	f2c0 8141 	blt.w	801f21a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801ef98:	3301      	adds	r3, #1
 801ef9a:	f100 813e 	bmi.w	801f21a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	f2c0 813b 	blt.w	801f21a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801efa4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801efa8:	9b06      	ldr	r3, [sp, #24]
 801efaa:	9f07      	ldr	r7, [sp, #28]
 801efac:	930f      	str	r3, [sp, #60]	; 0x3c
 801efae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	f340 8164 	ble.w	801f27e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801efb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801efb8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801efba:	1418      	asrs	r0, r3, #16
 801efbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801efbe:	142d      	asrs	r5, r5, #16
 801efc0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801efc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801efc6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801efca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801efcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801efd0:	f100 81ee 	bmi.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801efd4:	f102 3eff 	add.w	lr, r2, #4294967295
 801efd8:	4575      	cmp	r5, lr
 801efda:	f280 81e9 	bge.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801efde:	2800      	cmp	r0, #0
 801efe0:	f2c0 81e6 	blt.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801efe4:	f103 3eff 	add.w	lr, r3, #4294967295
 801efe8:	4570      	cmp	r0, lr
 801efea:	f280 81e1 	bge.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801efee:	b212      	sxth	r2, r2
 801eff0:	fb00 5002 	mla	r0, r0, r2, r5
 801eff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eff6:	fa1f fe81 	uxth.w	lr, r1
 801effa:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801effe:	eb03 0a00 	add.w	sl, r3, r0
 801f002:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f006:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f00a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f00e:	b29b      	uxth	r3, r3
 801f010:	f1bc 0f00 	cmp.w	ip, #0
 801f014:	f000 8179 	beq.w	801f30a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f018:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f01c:	eb0a 0b02 	add.w	fp, sl, r2
 801f020:	fa1f fa8c 	uxth.w	sl, ip
 801f024:	fb0a fe0e 	mul.w	lr, sl, lr
 801f028:	eba5 050e 	sub.w	r5, r5, lr
 801f02c:	b2ad      	uxth	r5, r5
 801f02e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f032:	fb08 f505 	mul.w	r5, r8, r5
 801f036:	fa1f fa8a 	uxth.w	sl, sl
 801f03a:	eba3 030a 	sub.w	r3, r3, sl
 801f03e:	b29b      	uxth	r3, r3
 801f040:	940a      	str	r4, [sp, #40]	; 0x28
 801f042:	fb09 5303 	mla	r3, r9, r3, r5
 801f046:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f04a:	940b      	str	r4, [sp, #44]	; 0x2c
 801f04c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f04e:	fb0a 3304 	mla	r3, sl, r4, r3
 801f052:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f054:	fb0e 3304 	mla	r3, lr, r4, r3
 801f058:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	f000 80cf 	beq.w	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f062:	9c08      	ldr	r4, [sp, #32]
 801f064:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f068:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f06c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f070:	f000 8150 	beq.w	801f314 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801f074:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f078:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f07c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f080:	fb09 f000 	mul.w	r0, r9, r0
 801f084:	fb0a fe0e 	mul.w	lr, sl, lr
 801f088:	f100 0b20 	add.w	fp, r0, #32
 801f08c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f090:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f094:	44ce      	add	lr, r9
 801f096:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f09a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f09e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f0a2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f0a6:	ea4e 0909 	orr.w	r9, lr, r9
 801f0aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f0ae:	8868      	ldrh	r0, [r5, #2]
 801f0b0:	d019      	beq.n	801f0e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f0b2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f0b6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f0ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f0be:	fb08 f800 	mul.w	r8, r8, r0
 801f0c2:	fb0a fe0e 	mul.w	lr, sl, lr
 801f0c6:	f108 0b20 	add.w	fp, r8, #32
 801f0ca:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f0ce:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f0d2:	4486      	add	lr, r0
 801f0d4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f0d8:	0a00      	lsrs	r0, r0, #8
 801f0da:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f0de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f0e2:	ea4e 0000 	orr.w	r0, lr, r0
 801f0e6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f0ea:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f0ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f0f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f0f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f0fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f0fe:	ea4e 0909 	orr.w	r9, lr, r9
 801f102:	ea4a 0000 	orr.w	r0, sl, r0
 801f106:	f1bc 0f00 	cmp.w	ip, #0
 801f10a:	f000 8105 	beq.w	801f318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801f10e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f112:	3a01      	subs	r2, #1
 801f114:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f116:	0052      	lsls	r2, r2, #1
 801f118:	3202      	adds	r2, #2
 801f11a:	2cff      	cmp	r4, #255	; 0xff
 801f11c:	eb05 0e02 	add.w	lr, r5, r2
 801f120:	5aaa      	ldrh	r2, [r5, r2]
 801f122:	d018      	beq.n	801f156 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f124:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f128:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f12c:	fb04 fa02 	mul.w	sl, r4, r2
 801f130:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f134:	fb08 f805 	mul.w	r8, r8, r5
 801f138:	f10a 0520 	add.w	r5, sl, #32
 801f13c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f140:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f144:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f148:	4442      	add	r2, r8
 801f14a:	0a2d      	lsrs	r5, r5, #8
 801f14c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f150:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f154:	432a      	orrs	r2, r5
 801f156:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f158:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f15c:	2cff      	cmp	r4, #255	; 0xff
 801f15e:	d01a      	beq.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f160:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f164:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f168:	fb04 fa05 	mul.w	sl, r4, r5
 801f16c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f170:	fb08 f80e 	mul.w	r8, r8, lr
 801f174:	f10a 0e20 	add.w	lr, sl, #32
 801f178:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f17c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f180:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f184:	4445      	add	r5, r8
 801f186:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f18a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f18e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f192:	ea45 050e 	orr.w	r5, r5, lr
 801f196:	fb1c fe01 	smulbb	lr, ip, r1
 801f19a:	f1cc 0810 	rsb	r8, ip, #16
 801f19e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f1a2:	eba8 0801 	sub.w	r8, r8, r1
 801f1a6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f1aa:	4341      	muls	r1, r0
 801f1ac:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f1b0:	fb09 1108 	mla	r1, r9, r8, r1
 801f1b4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f1b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f1c0:	ea4a 0202 	orr.w	r2, sl, r2
 801f1c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f1c8:	fb0c 1102 	mla	r1, ip, r2, r1
 801f1cc:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f1d0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f1d4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f1d8:	ea4b 0505 	orr.w	r5, fp, r5
 801f1dc:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f1e0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f1e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f1e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f1ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f1f0:	ea42 0e0e 	orr.w	lr, r2, lr
 801f1f4:	fa1f f28e 	uxth.w	r2, lr
 801f1f8:	2bff      	cmp	r3, #255	; 0xff
 801f1fa:	f040 80a1 	bne.w	801f340 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801f1fe:	803a      	strh	r2, [r7, #0]
 801f200:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f202:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f204:	3702      	adds	r7, #2
 801f206:	4413      	add	r3, r2
 801f208:	931d      	str	r3, [sp, #116]	; 0x74
 801f20a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f20c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f20e:	441a      	add	r2, r3
 801f210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f212:	921e      	str	r2, [sp, #120]	; 0x78
 801f214:	3b01      	subs	r3, #1
 801f216:	930f      	str	r3, [sp, #60]	; 0x3c
 801f218:	e6c9      	b.n	801efae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f21a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f21c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f21e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801f220:	4433      	add	r3, r6
 801f222:	931d      	str	r3, [sp, #116]	; 0x74
 801f224:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f226:	441c      	add	r4, r3
 801f228:	9b06      	ldr	r3, [sp, #24]
 801f22a:	941e      	str	r4, [sp, #120]	; 0x78
 801f22c:	3b01      	subs	r3, #1
 801f22e:	9306      	str	r3, [sp, #24]
 801f230:	9b07      	ldr	r3, [sp, #28]
 801f232:	3302      	adds	r3, #2
 801f234:	9307      	str	r3, [sp, #28]
 801f236:	e698      	b.n	801ef6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f238:	d028      	beq.n	801f28c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f23a:	9b06      	ldr	r3, [sp, #24]
 801f23c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f23e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f240:	3b01      	subs	r3, #1
 801f242:	fb00 5003 	mla	r0, r0, r3, r5
 801f246:	1400      	asrs	r0, r0, #16
 801f248:	f53f aeac 	bmi.w	801efa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f24c:	3901      	subs	r1, #1
 801f24e:	4288      	cmp	r0, r1
 801f250:	f6bf aea8 	bge.w	801efa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f254:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f256:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f258:	fb01 0303 	mla	r3, r1, r3, r0
 801f25c:	141b      	asrs	r3, r3, #16
 801f25e:	f53f aea1 	bmi.w	801efa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f262:	3a01      	subs	r2, #1
 801f264:	4293      	cmp	r3, r2
 801f266:	f6bf ae9d 	bge.w	801efa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f26a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f26e:	9b06      	ldr	r3, [sp, #24]
 801f270:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801f274:	930f      	str	r3, [sp, #60]	; 0x3c
 801f276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f278:	2b00      	cmp	r3, #0
 801f27a:	f300 80b6 	bgt.w	801f3ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 801f27e:	9b06      	ldr	r3, [sp, #24]
 801f280:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f284:	9b07      	ldr	r3, [sp, #28]
 801f286:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f28a:	9307      	str	r3, [sp, #28]
 801f28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f28e:	2b00      	cmp	r3, #0
 801f290:	f340 8218 	ble.w	801f6c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801f294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f298:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f29c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f2a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2a8:	eef0 6a62 	vmov.f32	s13, s5
 801f2ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2c0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801f2c4:	eef0 6a43 	vmov.f32	s13, s6
 801f2c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2cc:	ee12 2a90 	vmov	r2, s5
 801f2d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f2d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2de:	ee13 2a10 	vmov	r2, s6
 801f2e2:	931f      	str	r3, [sp, #124]	; 0x7c
 801f2e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f2e6:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801f2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ee:	9320      	str	r3, [sp, #128]	; 0x80
 801f2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2f4:	3b01      	subs	r3, #1
 801f2f6:	930e      	str	r3, [sp, #56]	; 0x38
 801f2f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f2fa:	bf08      	it	eq
 801f2fc:	4613      	moveq	r3, r2
 801f2fe:	eeb0 3a67 	vmov.f32	s6, s15
 801f302:	9306      	str	r3, [sp, #24]
 801f304:	eef0 2a47 	vmov.f32	s5, s14
 801f308:	e621      	b.n	801ef4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f30a:	fb08 f505 	mul.w	r5, r8, r5
 801f30e:	fb09 5303 	mla	r3, r9, r3, r5
 801f312:	e6a1      	b.n	801f058 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f314:	4681      	mov	r9, r0
 801f316:	e6c8      	b.n	801f0aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f318:	f1c1 0210 	rsb	r2, r1, #16
 801f31c:	4341      	muls	r1, r0
 801f31e:	fb09 1902 	mla	r9, r9, r2, r1
 801f322:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f326:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f32a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f32e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f332:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f336:	ea42 0909 	orr.w	r9, r2, r9
 801f33a:	fa1f f289 	uxth.w	r2, r9
 801f33e:	e75b      	b.n	801f1f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f340:	43db      	mvns	r3, r3
 801f342:	f8b7 c000 	ldrh.w	ip, [r7]
 801f346:	fa5f fe83 	uxtb.w	lr, r3
 801f34a:	ea4f 202c 	mov.w	r0, ip, asr #8
 801f34e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f352:	fb00 f00e 	mul.w	r0, r0, lr
 801f356:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f35a:	1c41      	adds	r1, r0, #1
 801f35c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f360:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f364:	fb05 f50e 	mul.w	r5, r5, lr
 801f368:	1211      	asrs	r1, r2, #8
 801f36a:	f021 0107 	bic.w	r1, r1, #7
 801f36e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f372:	48d6      	ldr	r0, [pc, #856]	; (801f6cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801f374:	b2c9      	uxtb	r1, r1
 801f376:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801f37a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801f37e:	1c69      	adds	r1, r5, #1
 801f380:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f384:	b2db      	uxtb	r3, r3
 801f386:	10d1      	asrs	r1, r2, #3
 801f388:	fb03 f30e 	mul.w	r3, r3, lr
 801f38c:	f021 0103 	bic.w	r1, r1, #3
 801f390:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f394:	00c9      	lsls	r1, r1, #3
 801f396:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f39a:	4301      	orrs	r1, r0
 801f39c:	1c58      	adds	r0, r3, #1
 801f39e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f3a2:	00d2      	lsls	r2, r2, #3
 801f3a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f3a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f3ac:	430a      	orrs	r2, r1
 801f3ae:	e726      	b.n	801f1fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 801f3b0:	f115 0e01 	adds.w	lr, r5, #1
 801f3b4:	f53f af24 	bmi.w	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3b8:	4572      	cmp	r2, lr
 801f3ba:	f6ff af21 	blt.w	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3be:	f110 0e01 	adds.w	lr, r0, #1
 801f3c2:	f53f af1d 	bmi.w	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3c6:	4573      	cmp	r3, lr
 801f3c8:	f6ff af1a 	blt.w	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3cc:	b21b      	sxth	r3, r3
 801f3ce:	b212      	sxth	r2, r2
 801f3d0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801f3d4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801f3d8:	9301      	str	r3, [sp, #4]
 801f3da:	9200      	str	r2, [sp, #0]
 801f3dc:	4639      	mov	r1, r7
 801f3de:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801f3e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3e4:	f7ff fc24 	bl	801ec30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f3e8:	e70a      	b.n	801f200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f3ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f3f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3f2:	fa1f fc82 	uxth.w	ip, r2
 801f3f6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f3fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f3fc:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f400:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f406:	141f      	asrs	r7, r3, #16
 801f408:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f40a:	141b      	asrs	r3, r3, #16
 801f40c:	fb01 3707 	mla	r7, r1, r7, r3
 801f410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f412:	eb03 0a07 	add.w	sl, r3, r7
 801f416:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f41a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f41e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f422:	b29b      	uxth	r3, r3
 801f424:	2d00      	cmp	r5, #0
 801f426:	f000 80fe 	beq.w	801f626 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801f42a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f42e:	eb0a 0b01 	add.w	fp, sl, r1
 801f432:	fa1f fa85 	uxth.w	sl, r5
 801f436:	fb0a fc0c 	mul.w	ip, sl, ip
 801f43a:	eba0 000c 	sub.w	r0, r0, ip
 801f43e:	b280      	uxth	r0, r0
 801f440:	fb08 f000 	mul.w	r0, r8, r0
 801f444:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f448:	fa1f fa8a 	uxth.w	sl, sl
 801f44c:	eba3 030a 	sub.w	r3, r3, sl
 801f450:	b29b      	uxth	r3, r3
 801f452:	fb09 0303 	mla	r3, r9, r3, r0
 801f456:	940c      	str	r4, [sp, #48]	; 0x30
 801f458:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f45a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f45e:	fb0a 3300 	mla	r3, sl, r0, r3
 801f462:	fb0c 3304 	mla	r3, ip, r4, r3
 801f466:	940d      	str	r4, [sp, #52]	; 0x34
 801f468:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	f000 80cc 	beq.w	801f60a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801f472:	9808      	ldr	r0, [sp, #32]
 801f474:	9c08      	ldr	r4, [sp, #32]
 801f476:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f47a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f47e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f482:	f000 80d5 	beq.w	801f630 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801f486:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f48a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f48e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f492:	fb09 f707 	mul.w	r7, r9, r7
 801f496:	fb0a fc0c 	mul.w	ip, sl, ip
 801f49a:	f107 0b20 	add.w	fp, r7, #32
 801f49e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f4a2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f4a6:	44cc      	add	ip, r9
 801f4a8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f4ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f4b0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f4b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f4b8:	ea4c 0909 	orr.w	r9, ip, r9
 801f4bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f4c0:	8847      	ldrh	r7, [r0, #2]
 801f4c2:	d019      	beq.n	801f4f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 801f4c4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f4c8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f4cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f4d0:	fb08 f807 	mul.w	r8, r8, r7
 801f4d4:	fb0a fc0c 	mul.w	ip, sl, ip
 801f4d8:	f108 0b20 	add.w	fp, r8, #32
 801f4dc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f4e0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f4e4:	44bc      	add	ip, r7
 801f4e6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f4ea:	0a3f      	lsrs	r7, r7, #8
 801f4ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f4f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f4f4:	ea4c 0707 	orr.w	r7, ip, r7
 801f4f8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f4fc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f500:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f504:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f508:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f50c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f510:	ea4c 0909 	orr.w	r9, ip, r9
 801f514:	ea4a 0707 	orr.w	r7, sl, r7
 801f518:	2d00      	cmp	r5, #0
 801f51a:	f000 808b 	beq.w	801f634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f51e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f522:	3901      	subs	r1, #1
 801f524:	0049      	lsls	r1, r1, #1
 801f526:	3102      	adds	r1, #2
 801f528:	eb00 0c01 	add.w	ip, r0, r1
 801f52c:	5a41      	ldrh	r1, [r0, r1]
 801f52e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f530:	28ff      	cmp	r0, #255	; 0xff
 801f532:	d019      	beq.n	801f568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 801f534:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f536:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f53a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f53e:	fb04 fa01 	mul.w	sl, r4, r1
 801f542:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f546:	fb08 f800 	mul.w	r8, r8, r0
 801f54a:	f10a 0020 	add.w	r0, sl, #32
 801f54e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f552:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f556:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f55a:	4441      	add	r1, r8
 801f55c:	0a00      	lsrs	r0, r0, #8
 801f55e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f562:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f566:	4301      	orrs	r1, r0
 801f568:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f56a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f56e:	2cff      	cmp	r4, #255	; 0xff
 801f570:	d01a      	beq.n	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801f572:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f576:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f57a:	fb04 fa00 	mul.w	sl, r4, r0
 801f57e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f582:	fb08 f80c 	mul.w	r8, r8, ip
 801f586:	f10a 0c20 	add.w	ip, sl, #32
 801f58a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f58e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f592:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f596:	4440      	add	r0, r8
 801f598:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f59c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f5a0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f5a4:	ea40 000c 	orr.w	r0, r0, ip
 801f5a8:	fb15 fc02 	smulbb	ip, r5, r2
 801f5ac:	f1c5 0810 	rsb	r8, r5, #16
 801f5b0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f5b4:	eba8 0802 	sub.w	r8, r8, r2
 801f5b8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f5bc:	437a      	muls	r2, r7
 801f5be:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f5c2:	fb09 2208 	mla	r2, r9, r8, r2
 801f5c6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f5ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f5ce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f5d2:	ea4a 0101 	orr.w	r1, sl, r1
 801f5d6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f5da:	fb05 2201 	mla	r2, r5, r1, r2
 801f5de:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f5e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f5e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f5ea:	ea4b 0000 	orr.w	r0, fp, r0
 801f5ee:	fb0c 2200 	mla	r2, ip, r0, r2
 801f5f2:	0d57      	lsrs	r7, r2, #21
 801f5f4:	0952      	lsrs	r2, r2, #5
 801f5f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f5fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f5fe:	433a      	orrs	r2, r7
 801f600:	2bff      	cmp	r3, #255	; 0xff
 801f602:	b292      	uxth	r2, r2
 801f604:	d127      	bne.n	801f656 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801f606:	f8ae 2000 	strh.w	r2, [lr]
 801f60a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f60c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f60e:	f10e 0e02 	add.w	lr, lr, #2
 801f612:	4413      	add	r3, r2
 801f614:	931d      	str	r3, [sp, #116]	; 0x74
 801f616:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f618:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f61a:	441a      	add	r2, r3
 801f61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f61e:	921e      	str	r2, [sp, #120]	; 0x78
 801f620:	3b01      	subs	r3, #1
 801f622:	930f      	str	r3, [sp, #60]	; 0x3c
 801f624:	e627      	b.n	801f276 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f626:	fb08 f000 	mul.w	r0, r8, r0
 801f62a:	fb09 0303 	mla	r3, r9, r3, r0
 801f62e:	e71b      	b.n	801f468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 801f630:	46b9      	mov	r9, r7
 801f632:	e743      	b.n	801f4bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 801f634:	f1c2 0110 	rsb	r1, r2, #16
 801f638:	437a      	muls	r2, r7
 801f63a:	fb09 2901 	mla	r9, r9, r1, r2
 801f63e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f642:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f646:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f64a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f64e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f652:	4302      	orrs	r2, r0
 801f654:	e7d4      	b.n	801f600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f656:	43db      	mvns	r3, r3
 801f658:	f8be 7000 	ldrh.w	r7, [lr]
 801f65c:	fa5f fc83 	uxtb.w	ip, r3
 801f660:	1238      	asrs	r0, r7, #8
 801f662:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f666:	fb00 f00c 	mul.w	r0, r0, ip
 801f66a:	10fd      	asrs	r5, r7, #3
 801f66c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f670:	fb05 f10c 	mul.w	r1, r5, ip
 801f674:	1c45      	adds	r5, r0, #1
 801f676:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f67a:	1215      	asrs	r5, r2, #8
 801f67c:	f025 0507 	bic.w	r5, r5, #7
 801f680:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f684:	00fb      	lsls	r3, r7, #3
 801f686:	1c4d      	adds	r5, r1, #1
 801f688:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f68c:	b2db      	uxtb	r3, r3
 801f68e:	10d1      	asrs	r1, r2, #3
 801f690:	fb03 f30c 	mul.w	r3, r3, ip
 801f694:	f021 0103 	bic.w	r1, r1, #3
 801f698:	4c0c      	ldr	r4, [pc, #48]	; (801f6cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801f69a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f69e:	b2c0      	uxtb	r0, r0
 801f6a0:	00c9      	lsls	r1, r1, #3
 801f6a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f6a6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801f6aa:	4308      	orrs	r0, r1
 801f6ac:	1c59      	adds	r1, r3, #1
 801f6ae:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f6b2:	00d2      	lsls	r2, r2, #3
 801f6b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f6b8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f6bc:	4318      	orrs	r0, r3
 801f6be:	f8ae 0000 	strh.w	r0, [lr]
 801f6c2:	e7a2      	b.n	801f60a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801f6c4:	b013      	add	sp, #76	; 0x4c
 801f6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ca:	bf00      	nop
 801f6cc:	fffff800 	.word	0xfffff800

0801f6d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801f6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6d4:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801f6d8:	fb05 4c03 	mla	ip, r5, r3, r4
 801f6dc:	2d00      	cmp	r5, #0
 801f6de:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801f6e2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801f6e6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801f6ea:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f6ee:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801f6f2:	8808      	ldrh	r0, [r1, #0]
 801f6f4:	f2c0 80a7 	blt.w	801f846 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f6f8:	45aa      	cmp	sl, r5
 801f6fa:	f340 80a4 	ble.w	801f846 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f6fe:	2c00      	cmp	r4, #0
 801f700:	f2c0 809f 	blt.w	801f842 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f704:	42a3      	cmp	r3, r4
 801f706:	f340 809c 	ble.w	801f842 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f70a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801f70e:	1c62      	adds	r2, r4, #1
 801f710:	f100 809c 	bmi.w	801f84c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f714:	4293      	cmp	r3, r2
 801f716:	f340 8099 	ble.w	801f84c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f71a:	f1b9 0f00 	cmp.w	r9, #0
 801f71e:	f000 8095 	beq.w	801f84c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f722:	f8be c002 	ldrh.w	ip, [lr, #2]
 801f726:	3501      	adds	r5, #1
 801f728:	f100 8094 	bmi.w	801f854 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f72c:	45aa      	cmp	sl, r5
 801f72e:	f340 8091 	ble.w	801f854 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f732:	2f00      	cmp	r7, #0
 801f734:	f000 808e 	beq.w	801f854 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f738:	2c00      	cmp	r4, #0
 801f73a:	f2c0 8089 	blt.w	801f850 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f73e:	42a3      	cmp	r3, r4
 801f740:	f340 8086 	ble.w	801f850 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f744:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801f748:	3401      	adds	r4, #1
 801f74a:	f100 8086 	bmi.w	801f85a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f74e:	42a3      	cmp	r3, r4
 801f750:	f340 8083 	ble.w	801f85a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f754:	f1b9 0f00 	cmp.w	r9, #0
 801f758:	d07f      	beq.n	801f85a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f75a:	3301      	adds	r3, #1
 801f75c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801f760:	fb19 fe07 	smulbb	lr, r9, r7
 801f764:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f768:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f76c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f770:	ea44 0808 	orr.w	r8, r4, r8
 801f774:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f778:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f77c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f780:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f784:	ea44 0c0c 	orr.w	ip, r4, ip
 801f788:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f78c:	fb04 f40c 	mul.w	r4, r4, ip
 801f790:	f1c7 0210 	rsb	r2, r7, #16
 801f794:	eba2 0209 	sub.w	r2, r2, r9
 801f798:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f79c:	fb02 4808 	mla	r8, r2, r8, r4
 801f7a0:	b2b4      	uxth	r4, r6
 801f7a2:	43f6      	mvns	r6, r6
 801f7a4:	041a      	lsls	r2, r3, #16
 801f7a6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f7aa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f7ae:	4313      	orrs	r3, r2
 801f7b0:	fb0e 8303 	mla	r3, lr, r3, r8
 801f7b4:	042a      	lsls	r2, r5, #16
 801f7b6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f7ba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f7be:	432a      	orrs	r2, r5
 801f7c0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f7c4:	fb07 3202 	mla	r2, r7, r2, r3
 801f7c8:	0d53      	lsrs	r3, r2, #21
 801f7ca:	0952      	lsrs	r2, r2, #5
 801f7cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f7d0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f7d4:	431a      	orrs	r2, r3
 801f7d6:	b293      	uxth	r3, r2
 801f7d8:	1202      	asrs	r2, r0, #8
 801f7da:	b2f6      	uxtb	r6, r6
 801f7dc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f7e0:	fb12 f206 	smulbb	r2, r2, r6
 801f7e4:	10c7      	asrs	r7, r0, #3
 801f7e6:	00c0      	lsls	r0, r0, #3
 801f7e8:	b2c0      	uxtb	r0, r0
 801f7ea:	121d      	asrs	r5, r3, #8
 801f7ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f7f0:	fb10 f006 	smulbb	r0, r0, r6
 801f7f4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f7f8:	fb17 f706 	smulbb	r7, r7, r6
 801f7fc:	fb05 2504 	mla	r5, r5, r4, r2
 801f800:	10da      	asrs	r2, r3, #3
 801f802:	00db      	lsls	r3, r3, #3
 801f804:	b2db      	uxtb	r3, r3
 801f806:	fb03 0004 	mla	r0, r3, r4, r0
 801f80a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f80e:	fb02 7204 	mla	r2, r2, r4, r7
 801f812:	b2ad      	uxth	r5, r5
 801f814:	b280      	uxth	r0, r0
 801f816:	1c6b      	adds	r3, r5, #1
 801f818:	b292      	uxth	r2, r2
 801f81a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f81e:	1c43      	adds	r3, r0, #1
 801f820:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f824:	1c50      	adds	r0, r2, #1
 801f826:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f82a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f82e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f832:	0952      	lsrs	r2, r2, #5
 801f834:	432b      	orrs	r3, r5
 801f836:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f83a:	4313      	orrs	r3, r2
 801f83c:	800b      	strh	r3, [r1, #0]
 801f83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f842:	4680      	mov	r8, r0
 801f844:	e763      	b.n	801f70e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801f846:	4684      	mov	ip, r0
 801f848:	4680      	mov	r8, r0
 801f84a:	e76c      	b.n	801f726 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801f84c:	4684      	mov	ip, r0
 801f84e:	e76a      	b.n	801f726 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801f850:	4605      	mov	r5, r0
 801f852:	e779      	b.n	801f748 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801f854:	4603      	mov	r3, r0
 801f856:	4605      	mov	r5, r0
 801f858:	e782      	b.n	801f760 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801f85a:	4603      	mov	r3, r0
 801f85c:	e780      	b.n	801f760 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801f85e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f85e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f862:	b093      	sub	sp, #76	; 0x4c
 801f864:	461d      	mov	r5, r3
 801f866:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f86a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f86c:	910a      	str	r1, [sp, #40]	; 0x28
 801f86e:	9210      	str	r2, [sp, #64]	; 0x40
 801f870:	6859      	ldr	r1, [r3, #4]
 801f872:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	920b      	str	r2, [sp, #44]	; 0x2c
 801f87a:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801f87e:	fb01 2707 	mla	r7, r1, r7, r2
 801f882:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801f886:	9307      	str	r3, [sp, #28]
 801f888:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f88a:	9011      	str	r0, [sp, #68]	; 0x44
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	9309      	str	r3, [sp, #36]	; 0x24
 801f890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f892:	43db      	mvns	r3, r3
 801f894:	b2db      	uxtb	r3, r3
 801f896:	9308      	str	r3, [sp, #32]
 801f898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	dc03      	bgt.n	801f8a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	f340 8203 	ble.w	801fcac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801f8a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f8ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f8b0:	1e48      	subs	r0, r1, #1
 801f8b2:	f102 3cff 	add.w	ip, r2, #4294967295
 801f8b6:	2d00      	cmp	r5, #0
 801f8b8:	f340 80da 	ble.w	801fa70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801f8bc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f8c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f8c4:	d406      	bmi.n	801f8d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8c6:	4586      	cmp	lr, r0
 801f8c8:	da04      	bge.n	801f8d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	db02      	blt.n	801f8d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8ce:	4563      	cmp	r3, ip
 801f8d0:	f2c0 80cf 	blt.w	801fa72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f8d4:	f11e 0e01 	adds.w	lr, lr, #1
 801f8d8:	f100 80c1 	bmi.w	801fa5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f8dc:	4571      	cmp	r1, lr
 801f8de:	f2c0 80be 	blt.w	801fa5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f8e2:	3301      	adds	r3, #1
 801f8e4:	f100 80bb 	bmi.w	801fa5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f8e8:	429a      	cmp	r2, r3
 801f8ea:	f2c0 80b8 	blt.w	801fa5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f8ee:	46a9      	mov	r9, r5
 801f8f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f8f4:	f1b9 0f00 	cmp.w	r9, #0
 801f8f8:	f340 80d8 	ble.w	801faac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801f8fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8fe:	1421      	asrs	r1, r4, #16
 801f900:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f904:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f908:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f90c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f910:	f100 8111 	bmi.w	801fb36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f914:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f918:	4551      	cmp	r1, sl
 801f91a:	f280 810c 	bge.w	801fb36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f91e:	2800      	cmp	r0, #0
 801f920:	f2c0 8109 	blt.w	801fb36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f924:	f103 3aff 	add.w	sl, r3, #4294967295
 801f928:	4550      	cmp	r0, sl
 801f92a:	f280 8104 	bge.w	801fb36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f92e:	fa0f f38e 	sxth.w	r3, lr
 801f932:	fb00 1103 	mla	r1, r0, r3, r1
 801f936:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f938:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801f93c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801f940:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801f944:	f1bc 0f00 	cmp.w	ip, #0
 801f948:	d007      	beq.n	801f95a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f94a:	005b      	lsls	r3, r3, #1
 801f94c:	eb0a 0003 	add.w	r0, sl, r3
 801f950:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801f954:	930c      	str	r3, [sp, #48]	; 0x30
 801f956:	8843      	ldrh	r3, [r0, #2]
 801f958:	930d      	str	r3, [sp, #52]	; 0x34
 801f95a:	fb12 f30c 	smulbb	r3, r2, ip
 801f95e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801f962:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f966:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f96a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f96e:	10db      	asrs	r3, r3, #3
 801f970:	ea40 000e 	orr.w	r0, r0, lr
 801f974:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f978:	f1cc 0e10 	rsb	lr, ip, #16
 801f97c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f980:	ebae 0e02 	sub.w	lr, lr, r2
 801f984:	ea4a 0101 	orr.w	r1, sl, r1
 801f988:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f98c:	4351      	muls	r1, r2
 801f98e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801f992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f994:	fb0e 1e00 	mla	lr, lr, r0, r1
 801f998:	0410      	lsls	r0, r2, #16
 801f99a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f99e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f9a2:	4310      	orrs	r0, r2
 801f9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9a6:	fb03 e000 	mla	r0, r3, r0, lr
 801f9aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f9ac:	0412      	lsls	r2, r2, #16
 801f9ae:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f9b2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f9b6:	ea42 020e 	orr.w	r2, r2, lr
 801f9ba:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f9be:	fb03 0302 	mla	r3, r3, r2, r0
 801f9c2:	f8b8 0000 	ldrh.w	r0, [r8]
 801f9c6:	9f08      	ldr	r7, [sp, #32]
 801f9c8:	0d5a      	lsrs	r2, r3, #21
 801f9ca:	1201      	asrs	r1, r0, #8
 801f9cc:	095b      	lsrs	r3, r3, #5
 801f9ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f9d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f9d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f9da:	4313      	orrs	r3, r2
 801f9dc:	fb11 f107 	smulbb	r1, r1, r7
 801f9e0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f9e4:	00c0      	lsls	r0, r0, #3
 801f9e6:	b29b      	uxth	r3, r3
 801f9e8:	b2c0      	uxtb	r0, r0
 801f9ea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f9ee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f9f2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f9f6:	fb10 f007 	smulbb	r0, r0, r7
 801f9fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f9fe:	fb1e fe07 	smulbb	lr, lr, r7
 801fa02:	fb0c 1c02 	mla	ip, ip, r2, r1
 801fa06:	10d9      	asrs	r1, r3, #3
 801fa08:	00db      	lsls	r3, r3, #3
 801fa0a:	b2db      	uxtb	r3, r3
 801fa0c:	fb03 0302 	mla	r3, r3, r2, r0
 801fa10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fa14:	fb01 e102 	mla	r1, r1, r2, lr
 801fa18:	fa1f fc8c 	uxth.w	ip, ip
 801fa1c:	b29a      	uxth	r2, r3
 801fa1e:	f10c 0301 	add.w	r3, ip, #1
 801fa22:	b289      	uxth	r1, r1
 801fa24:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fa28:	1c53      	adds	r3, r2, #1
 801fa2a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fa2e:	1c4a      	adds	r2, r1, #1
 801fa30:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fa34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fa38:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fa3c:	0949      	lsrs	r1, r1, #5
 801fa3e:	ea43 030c 	orr.w	r3, r3, ip
 801fa42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fa46:	430b      	orrs	r3, r1
 801fa48:	f8a8 3000 	strh.w	r3, [r8]
 801fa4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fa4e:	f108 0802 	add.w	r8, r8, #2
 801fa52:	441c      	add	r4, r3
 801fa54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa56:	f109 39ff 	add.w	r9, r9, #4294967295
 801fa5a:	441e      	add	r6, r3
 801fa5c:	e74a      	b.n	801f8f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fa60:	3d01      	subs	r5, #1
 801fa62:	441c      	add	r4, r3
 801fa64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa66:	441e      	add	r6, r3
 801fa68:	9b07      	ldr	r3, [sp, #28]
 801fa6a:	3302      	adds	r3, #2
 801fa6c:	9307      	str	r3, [sp, #28]
 801fa6e:	e722      	b.n	801f8b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fa70:	d022      	beq.n	801fab8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801fa72:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fa74:	1e6b      	subs	r3, r5, #1
 801fa76:	fb00 4003 	mla	r0, r0, r3, r4
 801fa7a:	1400      	asrs	r0, r0, #16
 801fa7c:	f53f af37 	bmi.w	801f8ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa80:	3901      	subs	r1, #1
 801fa82:	4288      	cmp	r0, r1
 801fa84:	f6bf af33 	bge.w	801f8ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa88:	9920      	ldr	r1, [sp, #128]	; 0x80
 801fa8a:	fb01 6303 	mla	r3, r1, r3, r6
 801fa8e:	141b      	asrs	r3, r3, #16
 801fa90:	f53f af2d 	bmi.w	801f8ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa94:	3a01      	subs	r2, #1
 801fa96:	4293      	cmp	r3, r2
 801fa98:	f6bf af29 	bge.w	801f8ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa9c:	46a8      	mov	r8, r5
 801fa9e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801faa2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801faa6:	f1b8 0f00 	cmp.w	r8, #0
 801faaa:	dc5e      	bgt.n	801fb6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801faac:	9b07      	ldr	r3, [sp, #28]
 801faae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801fab2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fab6:	9307      	str	r3, [sp, #28]
 801fab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faba:	2b00      	cmp	r3, #0
 801fabc:	f340 80f6 	ble.w	801fcac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801fac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fac4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fac8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801facc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fad0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fad4:	eef0 6a62 	vmov.f32	s13, s5
 801fad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fadc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fae0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fae4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fae8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801faec:	ee16 4a90 	vmov	r4, s13
 801faf0:	eef0 6a43 	vmov.f32	s13, s6
 801faf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801faf8:	ee12 2a90 	vmov	r2, s5
 801fafc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fb02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb06:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb0a:	ee13 2a10 	vmov	r2, s6
 801fb0e:	931f      	str	r3, [sp, #124]	; 0x7c
 801fb10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fb12:	ee16 6a90 	vmov	r6, s13
 801fb16:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb1a:	9320      	str	r3, [sp, #128]	; 0x80
 801fb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb20:	3b01      	subs	r3, #1
 801fb22:	930a      	str	r3, [sp, #40]	; 0x28
 801fb24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fb26:	bf0c      	ite	eq
 801fb28:	4615      	moveq	r5, r2
 801fb2a:	461d      	movne	r5, r3
 801fb2c:	eeb0 3a67 	vmov.f32	s6, s15
 801fb30:	eef0 2a47 	vmov.f32	s5, s14
 801fb34:	e6b0      	b.n	801f898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fb36:	f111 0a01 	adds.w	sl, r1, #1
 801fb3a:	d487      	bmi.n	801fa4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb3c:	45d6      	cmp	lr, sl
 801fb3e:	db85      	blt.n	801fa4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb40:	f110 0a01 	adds.w	sl, r0, #1
 801fb44:	d482      	bmi.n	801fa4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb46:	4553      	cmp	r3, sl
 801fb48:	db80      	blt.n	801fa4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fb4c:	b21b      	sxth	r3, r3
 801fb4e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fb52:	9101      	str	r1, [sp, #4]
 801fb54:	9300      	str	r3, [sp, #0]
 801fb56:	e9cd c704 	strd	ip, r7, [sp, #16]
 801fb5a:	fa0f f38e 	sxth.w	r3, lr
 801fb5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb60:	4641      	mov	r1, r8
 801fb62:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fb64:	f7ff fdb4 	bl	801f6d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801fb68:	e770      	b.n	801fa4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb6c:	1430      	asrs	r0, r6, #16
 801fb6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb72:	1423      	asrs	r3, r4, #16
 801fb74:	fb01 3000 	mla	r0, r1, r0, r3
 801fb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb7c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801fb80:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801fb84:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801fb88:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fb8c:	8858      	ldrh	r0, [r3, #2]
 801fb8e:	f1be 0f00 	cmp.w	lr, #0
 801fb92:	d00b      	beq.n	801fbac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801fb94:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801fb98:	3901      	subs	r1, #1
 801fb9a:	0049      	lsls	r1, r1, #1
 801fb9c:	3102      	adds	r1, #2
 801fb9e:	eb03 0b01 	add.w	fp, r3, r1
 801fba2:	5a5b      	ldrh	r3, [r3, r1]
 801fba4:	930e      	str	r3, [sp, #56]	; 0x38
 801fba6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801fbaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801fbac:	fb12 f30e 	smulbb	r3, r2, lr
 801fbb0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801fbb4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801fbb8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fbbc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801fbc0:	10db      	asrs	r3, r3, #3
 801fbc2:	ea41 010c 	orr.w	r1, r1, ip
 801fbc6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fbca:	f1ce 0c10 	rsb	ip, lr, #16
 801fbce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fbd2:	ebac 0c02 	sub.w	ip, ip, r2
 801fbd6:	ea4b 0000 	orr.w	r0, fp, r0
 801fbda:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fbde:	4350      	muls	r0, r2
 801fbe0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801fbe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbe6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fbea:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801fbee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fbf2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801fbf6:	ea4b 0101 	orr.w	r1, fp, r1
 801fbfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fbfc:	fb03 c101 	mla	r1, r3, r1, ip
 801fc00:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fc02:	0412      	lsls	r2, r2, #16
 801fc04:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fc08:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fc0c:	4302      	orrs	r2, r0
 801fc0e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801fc12:	fb03 1202 	mla	r2, r3, r2, r1
 801fc16:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801fc1a:	0952      	lsrs	r2, r2, #5
 801fc1c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801fc20:	f8b9 2000 	ldrh.w	r2, [r9]
 801fc24:	9f08      	ldr	r7, [sp, #32]
 801fc26:	1211      	asrs	r1, r2, #8
 801fc28:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fc2c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fc30:	fb11 f107 	smulbb	r1, r1, r7
 801fc34:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801fc38:	ea4b 0303 	orr.w	r3, fp, r3
 801fc3c:	00d2      	lsls	r2, r2, #3
 801fc3e:	b29b      	uxth	r3, r3
 801fc40:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fc44:	b2d2      	uxtb	r2, r2
 801fc46:	1218      	asrs	r0, r3, #8
 801fc48:	fb1c fc07 	smulbb	ip, ip, r7
 801fc4c:	fb12 f207 	smulbb	r2, r2, r7
 801fc50:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fc54:	fb00 100a 	mla	r0, r0, sl, r1
 801fc58:	10d9      	asrs	r1, r3, #3
 801fc5a:	00db      	lsls	r3, r3, #3
 801fc5c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fc60:	b2db      	uxtb	r3, r3
 801fc62:	fb01 c10a 	mla	r1, r1, sl, ip
 801fc66:	fb03 230a 	mla	r3, r3, sl, r2
 801fc6a:	b280      	uxth	r0, r0
 801fc6c:	b29b      	uxth	r3, r3
 801fc6e:	b289      	uxth	r1, r1
 801fc70:	1c42      	adds	r2, r0, #1
 801fc72:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fc76:	f101 0c01 	add.w	ip, r1, #1
 801fc7a:	1c5a      	adds	r2, r3, #1
 801fc7c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fc80:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801fc84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc86:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fc8a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fc8e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fc92:	4310      	orrs	r0, r2
 801fc94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fc98:	441c      	add	r4, r3
 801fc9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc9c:	ea40 000c 	orr.w	r0, r0, ip
 801fca0:	f829 0b02 	strh.w	r0, [r9], #2
 801fca4:	441e      	add	r6, r3
 801fca6:	f108 38ff 	add.w	r8, r8, #4294967295
 801fcaa:	e6fc      	b.n	801faa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fcac:	b013      	add	sp, #76	; 0x4c
 801fcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcb2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801fcb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fcb6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801fcba:	fb0e 4703 	mla	r7, lr, r3, r4
 801fcbe:	f1be 0f00 	cmp.w	lr, #0
 801fcc2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801fcc6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801fcca:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801fcce:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801fcd2:	8808      	ldrh	r0, [r1, #0]
 801fcd4:	db60      	blt.n	801fd98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fcd6:	45f1      	cmp	r9, lr
 801fcd8:	dd5e      	ble.n	801fd98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fcda:	2c00      	cmp	r4, #0
 801fcdc:	db5a      	blt.n	801fd94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fcde:	42a3      	cmp	r3, r4
 801fce0:	dd58      	ble.n	801fd94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fce2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801fce6:	1c62      	adds	r2, r4, #1
 801fce8:	d459      	bmi.n	801fd9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fcea:	4293      	cmp	r3, r2
 801fcec:	dd57      	ble.n	801fd9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fcee:	2d00      	cmp	r5, #0
 801fcf0:	d055      	beq.n	801fd9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fcf2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801fcf6:	f11e 0e01 	adds.w	lr, lr, #1
 801fcfa:	d454      	bmi.n	801fda6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fcfc:	45f1      	cmp	r9, lr
 801fcfe:	dd52      	ble.n	801fda6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fd00:	2e00      	cmp	r6, #0
 801fd02:	d050      	beq.n	801fda6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fd04:	2c00      	cmp	r4, #0
 801fd06:	db4c      	blt.n	801fda2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801fd08:	42a3      	cmp	r3, r4
 801fd0a:	dd4a      	ble.n	801fda2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801fd0c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801fd10:	3401      	adds	r4, #1
 801fd12:	d405      	bmi.n	801fd20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fd14:	42a3      	cmp	r3, r4
 801fd16:	dd03      	ble.n	801fd20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fd18:	b115      	cbz	r5, 801fd20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fd1a:	3301      	adds	r3, #1
 801fd1c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801fd20:	fb15 f406 	smulbb	r4, r5, r6
 801fd24:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801fd28:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fd2c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801fd30:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fd34:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801fd38:	ea43 0c0c 	orr.w	ip, r3, ip
 801fd3c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fd40:	f1c6 0310 	rsb	r3, r6, #16
 801fd44:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fd48:	1b5b      	subs	r3, r3, r5
 801fd4a:	ea4e 0707 	orr.w	r7, lr, r7
 801fd4e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801fd52:	437d      	muls	r5, r7
 801fd54:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fd58:	fb03 5c0c 	mla	ip, r3, ip, r5
 801fd5c:	0403      	lsls	r3, r0, #16
 801fd5e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fd62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fd66:	4318      	orrs	r0, r3
 801fd68:	fb04 c000 	mla	r0, r4, r0, ip
 801fd6c:	0413      	lsls	r3, r2, #16
 801fd6e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fd72:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fd76:	4313      	orrs	r3, r2
 801fd78:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801fd7c:	fb06 0003 	mla	r0, r6, r3, r0
 801fd80:	0d43      	lsrs	r3, r0, #21
 801fd82:	0940      	lsrs	r0, r0, #5
 801fd84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd88:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fd8c:	4318      	orrs	r0, r3
 801fd8e:	8008      	strh	r0, [r1, #0]
 801fd90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd94:	4684      	mov	ip, r0
 801fd96:	e7a6      	b.n	801fce6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801fd98:	4607      	mov	r7, r0
 801fd9a:	4684      	mov	ip, r0
 801fd9c:	e7ab      	b.n	801fcf6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801fd9e:	4607      	mov	r7, r0
 801fda0:	e7a9      	b.n	801fcf6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801fda2:	4602      	mov	r2, r0
 801fda4:	e7b4      	b.n	801fd10 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801fda6:	4602      	mov	r2, r0
 801fda8:	e7ba      	b.n	801fd20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801fdaa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdae:	b08f      	sub	sp, #60	; 0x3c
 801fdb0:	461d      	mov	r5, r3
 801fdb2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801fdb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fdb8:	9107      	str	r1, [sp, #28]
 801fdba:	6859      	ldr	r1, [r3, #4]
 801fdbc:	920c      	str	r2, [sp, #48]	; 0x30
 801fdbe:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801fdc2:	fb01 2707 	mla	r7, r1, r7, r2
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	900d      	str	r0, [sp, #52]	; 0x34
 801fdca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801fdce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fdd0:	f8d3 8000 	ldr.w	r8, [r3]
 801fdd4:	9b07      	ldr	r3, [sp, #28]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	dc03      	bgt.n	801fde2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fdda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	f340 8181 	ble.w	80200e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801fde2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fde4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fde8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fdec:	1e48      	subs	r0, r1, #1
 801fdee:	f102 3cff 	add.w	ip, r2, #4294967295
 801fdf2:	2d00      	cmp	r5, #0
 801fdf4:	f340 809b 	ble.w	801ff2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801fdf8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fdfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fe00:	d406      	bmi.n	801fe10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe02:	4586      	cmp	lr, r0
 801fe04:	da04      	bge.n	801fe10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	db02      	blt.n	801fe10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe0a:	4563      	cmp	r3, ip
 801fe0c:	f2c0 8090 	blt.w	801ff30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fe10:	f11e 0e01 	adds.w	lr, lr, #1
 801fe14:	f100 8084 	bmi.w	801ff20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fe18:	4571      	cmp	r1, lr
 801fe1a:	f2c0 8081 	blt.w	801ff20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fe1e:	3301      	adds	r3, #1
 801fe20:	d47e      	bmi.n	801ff20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fe22:	429a      	cmp	r2, r3
 801fe24:	db7c      	blt.n	801ff20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fe26:	46aa      	mov	sl, r5
 801fe28:	46b9      	mov	r9, r7
 801fe2a:	f1ba 0f00 	cmp.w	sl, #0
 801fe2e:	f340 8099 	ble.w	801ff64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fe32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe34:	1421      	asrs	r1, r4, #16
 801fe36:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fe3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fe3e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fe42:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fe46:	f100 80d0 	bmi.w	801ffea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fe4a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801fe4e:	4559      	cmp	r1, fp
 801fe50:	f280 80cb 	bge.w	801ffea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fe54:	2800      	cmp	r0, #0
 801fe56:	f2c0 80c8 	blt.w	801ffea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fe5a:	f103 3bff 	add.w	fp, r3, #4294967295
 801fe5e:	4558      	cmp	r0, fp
 801fe60:	f280 80c3 	bge.w	801ffea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fe64:	fa0f fe8e 	sxth.w	lr, lr
 801fe68:	fb00 110e 	mla	r1, r0, lr, r1
 801fe6c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801fe70:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801fe74:	8841      	ldrh	r1, [r0, #2]
 801fe76:	f1bc 0f00 	cmp.w	ip, #0
 801fe7a:	d00b      	beq.n	801fe94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801fe7c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801fe80:	3b01      	subs	r3, #1
 801fe82:	005b      	lsls	r3, r3, #1
 801fe84:	3302      	adds	r3, #2
 801fe86:	eb00 0e03 	add.w	lr, r0, r3
 801fe8a:	5ac3      	ldrh	r3, [r0, r3]
 801fe8c:	9308      	str	r3, [sp, #32]
 801fe8e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801fe92:	9309      	str	r3, [sp, #36]	; 0x24
 801fe94:	fb12 f30c 	smulbb	r3, r2, ip
 801fe98:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801fe9c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fea0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801fea4:	ea40 000b 	orr.w	r0, r0, fp
 801fea8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801feac:	10db      	asrs	r3, r3, #3
 801feae:	f1cc 0e10 	rsb	lr, ip, #16
 801feb2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801feb6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801feba:	ebae 0e02 	sub.w	lr, lr, r2
 801febe:	ea4b 0101 	orr.w	r1, fp, r1
 801fec2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fec6:	4351      	muls	r1, r2
 801fec8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801fecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fece:	fb0e 1e00 	mla	lr, lr, r0, r1
 801fed2:	0410      	lsls	r0, r2, #16
 801fed4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fed8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fedc:	4310      	orrs	r0, r2
 801fede:	9a08      	ldr	r2, [sp, #32]
 801fee0:	fb03 e000 	mla	r0, r3, r0, lr
 801fee4:	9908      	ldr	r1, [sp, #32]
 801fee6:	0412      	lsls	r2, r2, #16
 801fee8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801feec:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801fef0:	ea42 020e 	orr.w	r2, r2, lr
 801fef4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801fef8:	fb03 0302 	mla	r3, r3, r2, r0
 801fefc:	0d5a      	lsrs	r2, r3, #21
 801fefe:	095b      	lsrs	r3, r3, #5
 801ff00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff04:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ff08:	4313      	orrs	r3, r2
 801ff0a:	f8a9 3000 	strh.w	r3, [r9]
 801ff0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff10:	f109 0902 	add.w	r9, r9, #2
 801ff14:	441c      	add	r4, r3
 801ff16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff18:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff1c:	441e      	add	r6, r3
 801ff1e:	e784      	b.n	801fe2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff22:	3d01      	subs	r5, #1
 801ff24:	441c      	add	r4, r3
 801ff26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff28:	3702      	adds	r7, #2
 801ff2a:	441e      	add	r6, r3
 801ff2c:	e761      	b.n	801fdf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ff2e:	d01d      	beq.n	801ff6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801ff30:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ff32:	1e6b      	subs	r3, r5, #1
 801ff34:	fb00 4003 	mla	r0, r0, r3, r4
 801ff38:	1400      	asrs	r0, r0, #16
 801ff3a:	f53f af74 	bmi.w	801fe26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff3e:	3901      	subs	r1, #1
 801ff40:	4288      	cmp	r0, r1
 801ff42:	f6bf af70 	bge.w	801fe26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff46:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ff48:	fb01 6303 	mla	r3, r1, r3, r6
 801ff4c:	141b      	asrs	r3, r3, #16
 801ff4e:	f53f af6a 	bmi.w	801fe26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff52:	3a01      	subs	r2, #1
 801ff54:	4293      	cmp	r3, r2
 801ff56:	f6bf af66 	bge.w	801fe26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ff5a:	46a9      	mov	r9, r5
 801ff5c:	46ba      	mov	sl, r7
 801ff5e:	f1b9 0f00 	cmp.w	r9, #0
 801ff62:	dc5a      	bgt.n	802001a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801ff64:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801ff68:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801ff6c:	9b07      	ldr	r3, [sp, #28]
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	f340 80b8 	ble.w	80200e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801ff74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff88:	eef0 6a62 	vmov.f32	s13, s5
 801ff8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff94:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffa0:	ee16 4a90 	vmov	r4, s13
 801ffa4:	eef0 6a43 	vmov.f32	s13, s6
 801ffa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffac:	ee12 2a90 	vmov	r2, s5
 801ffb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ffb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffba:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffbe:	ee13 2a10 	vmov	r2, s6
 801ffc2:	931b      	str	r3, [sp, #108]	; 0x6c
 801ffc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ffc6:	ee16 6a90 	vmov	r6, s13
 801ffca:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffce:	931c      	str	r3, [sp, #112]	; 0x70
 801ffd0:	9b07      	ldr	r3, [sp, #28]
 801ffd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ffd4:	3b01      	subs	r3, #1
 801ffd6:	9307      	str	r3, [sp, #28]
 801ffd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ffda:	bf0c      	ite	eq
 801ffdc:	4615      	moveq	r5, r2
 801ffde:	461d      	movne	r5, r3
 801ffe0:	eeb0 3a67 	vmov.f32	s6, s15
 801ffe4:	eef0 2a47 	vmov.f32	s5, s14
 801ffe8:	e6f4      	b.n	801fdd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ffea:	f111 0b01 	adds.w	fp, r1, #1
 801ffee:	d48e      	bmi.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fff0:	45de      	cmp	lr, fp
 801fff2:	db8c      	blt.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fff4:	f110 0b01 	adds.w	fp, r0, #1
 801fff8:	d489      	bmi.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fffa:	455b      	cmp	r3, fp
 801fffc:	db87      	blt.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fffe:	b21b      	sxth	r3, r3
 8020000:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020004:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020008:	9300      	str	r3, [sp, #0]
 802000a:	4642      	mov	r2, r8
 802000c:	fa0f f38e 	sxth.w	r3, lr
 8020010:	4649      	mov	r1, r9
 8020012:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020014:	f7ff fe4d 	bl	801fcb2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020018:	e779      	b.n	801ff0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802001a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802001c:	1420      	asrs	r0, r4, #16
 802001e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020022:	1431      	asrs	r1, r6, #16
 8020024:	fb03 0101 	mla	r1, r3, r1, r0
 8020028:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802002c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020030:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020034:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020038:	8841      	ldrh	r1, [r0, #2]
 802003a:	f1be 0f00 	cmp.w	lr, #0
 802003e:	d00b      	beq.n	8020058 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8020040:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020044:	3b01      	subs	r3, #1
 8020046:	005b      	lsls	r3, r3, #1
 8020048:	3302      	adds	r3, #2
 802004a:	eb00 0b03 	add.w	fp, r0, r3
 802004e:	5ac3      	ldrh	r3, [r0, r3]
 8020050:	930a      	str	r3, [sp, #40]	; 0x28
 8020052:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020056:	930b      	str	r3, [sp, #44]	; 0x2c
 8020058:	fb12 f30e 	smulbb	r3, r2, lr
 802005c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020060:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020064:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020068:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802006c:	10db      	asrs	r3, r3, #3
 802006e:	ea40 000c 	orr.w	r0, r0, ip
 8020072:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020076:	f1ce 0c10 	rsb	ip, lr, #16
 802007a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802007e:	ebac 0c02 	sub.w	ip, ip, r2
 8020082:	ea4b 0101 	orr.w	r1, fp, r1
 8020086:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802008a:	4351      	muls	r1, r2
 802008c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020092:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020096:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802009a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802009e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80200a2:	ea4b 0000 	orr.w	r0, fp, r0
 80200a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80200a8:	fb03 c000 	mla	r0, r3, r0, ip
 80200ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80200ae:	0412      	lsls	r2, r2, #16
 80200b0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80200b4:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80200b8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80200bc:	ea42 0b0b 	orr.w	fp, r2, fp
 80200c0:	fb03 000b 	mla	r0, r3, fp, r0
 80200c4:	0d43      	lsrs	r3, r0, #21
 80200c6:	0940      	lsrs	r0, r0, #5
 80200c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80200cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80200d0:	4318      	orrs	r0, r3
 80200d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200d4:	f82a 0b02 	strh.w	r0, [sl], #2
 80200d8:	441c      	add	r4, r3
 80200da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80200e0:	441e      	add	r6, r3
 80200e2:	e73c      	b.n	801ff5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80200e4:	b00f      	add	sp, #60	; 0x3c
 80200e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80200ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ee:	b085      	sub	sp, #20
 80200f0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80200f4:	9102      	str	r1, [sp, #8]
 80200f6:	fb04 7103 	mla	r1, r4, r3, r7
 80200fa:	2c00      	cmp	r4, #0
 80200fc:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020100:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020104:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020108:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802010c:	f2c0 811b 	blt.w	8020346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020110:	45a6      	cmp	lr, r4
 8020112:	f340 8118 	ble.w	8020346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020116:	2f00      	cmp	r7, #0
 8020118:	f2c0 8113 	blt.w	8020342 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802011c:	42bb      	cmp	r3, r7
 802011e:	f340 8110 	ble.w	8020342 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020122:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020126:	1c7a      	adds	r2, r7, #1
 8020128:	f100 8110 	bmi.w	802034c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802012c:	4293      	cmp	r3, r2
 802012e:	f340 810d 	ble.w	802034c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020132:	2e00      	cmp	r6, #0
 8020134:	f000 810c 	beq.w	8020350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8020138:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802013c:	3401      	adds	r4, #1
 802013e:	f100 810b 	bmi.w	8020358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020142:	45a6      	cmp	lr, r4
 8020144:	f340 8108 	ble.w	8020358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020148:	2800      	cmp	r0, #0
 802014a:	f000 8108 	beq.w	802035e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802014e:	2f00      	cmp	r7, #0
 8020150:	f2c0 8100 	blt.w	8020354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020154:	42bb      	cmp	r3, r7
 8020156:	f340 80fd 	ble.w	8020354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802015a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802015e:	3701      	adds	r7, #1
 8020160:	f100 8100 	bmi.w	8020364 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020164:	42bb      	cmp	r3, r7
 8020166:	f340 80fd 	ble.w	8020364 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802016a:	2e00      	cmp	r6, #0
 802016c:	f000 80fc 	beq.w	8020368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8020170:	3301      	adds	r3, #1
 8020172:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020176:	b2b6      	uxth	r6, r6
 8020178:	b280      	uxth	r0, r0
 802017a:	fb00 fe06 	mul.w	lr, r0, r6
 802017e:	0136      	lsls	r6, r6, #4
 8020180:	eba6 070e 	sub.w	r7, r6, lr
 8020184:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020188:	b2bf      	uxth	r7, r7
 802018a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802018e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020192:	fb0a f607 	mul.w	r6, sl, r7
 8020196:	b280      	uxth	r0, r0
 8020198:	1a1b      	subs	r3, r3, r0
 802019a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802019e:	b29b      	uxth	r3, r3
 80201a0:	fb0b 6603 	mla	r6, fp, r3, r6
 80201a4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80201a8:	fb00 6609 	mla	r6, r0, r9, r6
 80201ac:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80201b0:	fb0e 6608 	mla	r6, lr, r8, r6
 80201b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80201b8:	9600      	str	r6, [sp, #0]
 80201ba:	2e00      	cmp	r6, #0
 80201bc:	f000 80be 	beq.w	802033c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80201c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80201c4:	fb0b fc0c 	mul.w	ip, fp, ip
 80201c8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80201cc:	fb0b f505 	mul.w	r5, fp, r5
 80201d0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80201d4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80201d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201dc:	44dc      	add	ip, fp
 80201de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201e2:	9501      	str	r5, [sp, #4]
 80201e4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80201e8:	9503      	str	r5, [sp, #12]
 80201ea:	9d01      	ldr	r5, [sp, #4]
 80201ec:	9e02      	ldr	r6, [sp, #8]
 80201ee:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80201f2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80201f6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80201fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80201fe:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020202:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020206:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802020a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802020e:	4465      	add	r5, ip
 8020210:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020214:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020218:	fb09 fc0c 	mul.w	ip, r9, ip
 802021c:	fb09 f904 	mul.w	r9, r9, r4
 8020220:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020224:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020228:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802022c:	fb08 f404 	mul.w	r4, r8, r4
 8020230:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020234:	fb08 f802 	mul.w	r8, r8, r2
 8020238:	0a2d      	lsrs	r5, r5, #8
 802023a:	0a22      	lsrs	r2, r4, #8
 802023c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020240:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020244:	437d      	muls	r5, r7
 8020246:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802024a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802024e:	4414      	add	r4, r2
 8020250:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020254:	fb0a fa01 	mul.w	sl, sl, r1
 8020258:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802025c:	9a03      	ldr	r2, [sp, #12]
 802025e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020262:	fb02 5503 	mla	r5, r2, r3, r5
 8020266:	0a24      	lsrs	r4, r4, #8
 8020268:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802026c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020270:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020274:	fb04 540e 	mla	r4, r4, lr, r5
 8020278:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802027c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020280:	4461      	add	r1, ip
 8020282:	0a09      	lsrs	r1, r1, #8
 8020284:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020288:	fb01 4100 	mla	r1, r1, r0, r4
 802028c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020290:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020294:	fb07 f70a 	mul.w	r7, r7, sl
 8020298:	0a09      	lsrs	r1, r1, #8
 802029a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802029e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80202a2:	fb03 7101 	mla	r1, r3, r1, r7
 80202a6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80202aa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80202ae:	fb0e 1e08 	mla	lr, lr, r8, r1
 80202b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80202b6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80202ba:	fb00 e101 	mla	r1, r0, r1, lr
 80202be:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80202c2:	9a00      	ldr	r2, [sp, #0]
 80202c4:	b287      	uxth	r7, r0
 80202c6:	437a      	muls	r2, r7
 80202c8:	1c53      	adds	r3, r2, #1
 80202ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80202ce:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80202d2:	0a09      	lsrs	r1, r1, #8
 80202d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80202d8:	4321      	orrs	r1, r4
 80202da:	0c0a      	lsrs	r2, r1, #16
 80202dc:	8836      	ldrh	r6, [r6, #0]
 80202de:	fb12 f207 	smulbb	r2, r2, r7
 80202e2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80202e6:	b2c8      	uxtb	r0, r1
 80202e8:	1235      	asrs	r5, r6, #8
 80202ea:	fb14 f407 	smulbb	r4, r4, r7
 80202ee:	fb10 f007 	smulbb	r0, r0, r7
 80202f2:	b2db      	uxtb	r3, r3
 80202f4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80202f8:	fb05 2503 	mla	r5, r5, r3, r2
 80202fc:	10f2      	asrs	r2, r6, #3
 80202fe:	00f6      	lsls	r6, r6, #3
 8020300:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020304:	b2f6      	uxtb	r6, r6
 8020306:	fb02 4203 	mla	r2, r2, r3, r4
 802030a:	fb06 0303 	mla	r3, r6, r3, r0
 802030e:	b2ad      	uxth	r5, r5
 8020310:	b299      	uxth	r1, r3
 8020312:	b294      	uxth	r4, r2
 8020314:	1c6b      	adds	r3, r5, #1
 8020316:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802031a:	1c62      	adds	r2, r4, #1
 802031c:	1c4b      	adds	r3, r1, #1
 802031e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020322:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020326:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802032a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802032e:	0952      	lsrs	r2, r2, #5
 8020330:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020334:	432b      	orrs	r3, r5
 8020336:	4313      	orrs	r3, r2
 8020338:	9a02      	ldr	r2, [sp, #8]
 802033a:	8013      	strh	r3, [r2, #0]
 802033c:	b005      	add	sp, #20
 802033e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020342:	2500      	movs	r5, #0
 8020344:	e6ef      	b.n	8020126 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8020346:	2100      	movs	r1, #0
 8020348:	460d      	mov	r5, r1
 802034a:	e6f7      	b.n	802013c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802034c:	2100      	movs	r1, #0
 802034e:	e6f5      	b.n	802013c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020350:	4631      	mov	r1, r6
 8020352:	e6f3      	b.n	802013c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020354:	2400      	movs	r4, #0
 8020356:	e702      	b.n	802015e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8020358:	2200      	movs	r2, #0
 802035a:	4614      	mov	r4, r2
 802035c:	e70b      	b.n	8020176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802035e:	4602      	mov	r2, r0
 8020360:	4604      	mov	r4, r0
 8020362:	e708      	b.n	8020176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020364:	2200      	movs	r2, #0
 8020366:	e706      	b.n	8020176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020368:	4632      	mov	r2, r6
 802036a:	e704      	b.n	8020176 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802036c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020370:	b09d      	sub	sp, #116	; 0x74
 8020372:	9219      	str	r2, [sp, #100]	; 0x64
 8020374:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020376:	901b      	str	r0, [sp, #108]	; 0x6c
 8020378:	9307      	str	r3, [sp, #28]
 802037a:	6850      	ldr	r0, [r2, #4]
 802037c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020380:	9117      	str	r1, [sp, #92]	; 0x5c
 8020382:	931a      	str	r3, [sp, #104]	; 0x68
 8020384:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020388:	fb00 1303 	mla	r3, r0, r3, r1
 802038c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020390:	6812      	ldr	r2, [r2, #0]
 8020392:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020396:	930a      	str	r3, [sp, #40]	; 0x28
 8020398:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	9310      	str	r3, [sp, #64]	; 0x40
 802039e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80203a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80203a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	dc03      	bgt.n	80203b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80203aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	f340 8375 	ble.w	8020a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80203b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80203b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203bc:	1e48      	subs	r0, r1, #1
 80203be:	1e57      	subs	r7, r2, #1
 80203c0:	9b07      	ldr	r3, [sp, #28]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	f340 818e 	ble.w	80206e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80203c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80203cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80203d0:	d406      	bmi.n	80203e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80203d2:	4584      	cmp	ip, r0
 80203d4:	da04      	bge.n	80203e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	db02      	blt.n	80203e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80203da:	42bb      	cmp	r3, r7
 80203dc:	f2c0 8183 	blt.w	80206e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80203e0:	f11c 0c01 	adds.w	ip, ip, #1
 80203e4:	f100 8173 	bmi.w	80206ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80203e8:	4561      	cmp	r1, ip
 80203ea:	f2c0 8170 	blt.w	80206ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80203ee:	3301      	adds	r3, #1
 80203f0:	f100 816d 	bmi.w	80206ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80203f4:	429a      	cmp	r2, r3
 80203f6:	f2c0 816a 	blt.w	80206ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80203fa:	9b07      	ldr	r3, [sp, #28]
 80203fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80203fe:	9318      	str	r3, [sp, #96]	; 0x60
 8020400:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020402:	2b00      	cmp	r3, #0
 8020404:	f340 818c 	ble.w	8020720 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8020408:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802040a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802040c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020410:	1422      	asrs	r2, r4, #16
 8020412:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020416:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802041a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802041e:	689b      	ldr	r3, [r3, #8]
 8020420:	f100 81cd 	bmi.w	80207be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020424:	f103 38ff 	add.w	r8, r3, #4294967295
 8020428:	4542      	cmp	r2, r8
 802042a:	f280 81c8 	bge.w	80207be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802042e:	f1bc 0f00 	cmp.w	ip, #0
 8020432:	f2c0 81c4 	blt.w	80207be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020436:	f10e 38ff 	add.w	r8, lr, #4294967295
 802043a:	45c4      	cmp	ip, r8
 802043c:	f280 81bf 	bge.w	80207be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020440:	b21b      	sxth	r3, r3
 8020442:	fb0c 2203 	mla	r2, ip, r3, r2
 8020446:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020448:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802044c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020450:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020454:	2800      	cmp	r0, #0
 8020456:	f000 81a9 	beq.w	80207ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802045a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802045e:	950c      	str	r5, [sp, #48]	; 0x30
 8020460:	0e2d      	lsrs	r5, r5, #24
 8020462:	9513      	str	r5, [sp, #76]	; 0x4c
 8020464:	b181      	cbz	r1, 8020488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802046a:	3b01      	subs	r3, #1
 802046c:	009b      	lsls	r3, r3, #2
 802046e:	3304      	adds	r3, #4
 8020470:	eb08 0c03 	add.w	ip, r8, r3
 8020474:	f858 3003 	ldr.w	r3, [r8, r3]
 8020478:	9308      	str	r3, [sp, #32]
 802047a:	0e1b      	lsrs	r3, r3, #24
 802047c:	9311      	str	r3, [sp, #68]	; 0x44
 802047e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020482:	930d      	str	r3, [sp, #52]	; 0x34
 8020484:	0e1b      	lsrs	r3, r3, #24
 8020486:	9314      	str	r3, [sp, #80]	; 0x50
 8020488:	b280      	uxth	r0, r0
 802048a:	b289      	uxth	r1, r1
 802048c:	fb00 f901 	mul.w	r9, r0, r1
 8020490:	0100      	lsls	r0, r0, #4
 8020492:	eba0 0809 	sub.w	r8, r0, r9
 8020496:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802049a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802049c:	fa1f f888 	uxth.w	r8, r8
 80204a0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80204a4:	fb08 f000 	mul.w	r0, r8, r0
 80204a8:	b289      	uxth	r1, r1
 80204aa:	1a5b      	subs	r3, r3, r1
 80204ac:	b29b      	uxth	r3, r3
 80204ae:	fb03 000e 	mla	r0, r3, lr, r0
 80204b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80204b4:	fb01 0005 	mla	r0, r1, r5, r0
 80204b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80204ba:	fb09 0005 	mla	r0, r9, r5, r0
 80204be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80204c2:	2800      	cmp	r0, #0
 80204c4:	f000 80fa 	beq.w	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80204c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80204cc:	d01b      	beq.n	8020506 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80204ce:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80204d2:	fb0e fa0a 	mul.w	sl, lr, sl
 80204d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80204da:	fb0e fe02 	mul.w	lr, lr, r2
 80204de:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80204e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80204ee:	4452      	add	r2, sl
 80204f0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80204f4:	0a12      	lsrs	r2, r2, #8
 80204f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020502:	ea42 020c 	orr.w	r2, r2, ip
 8020506:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020508:	2dff      	cmp	r5, #255	; 0xff
 802050a:	d021      	beq.n	8020550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802050c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802050e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020512:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020514:	fb05 fb0b 	mul.w	fp, r5, fp
 8020518:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802051a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802051e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020522:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020524:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020528:	fb05 fa0a 	mul.w	sl, r5, sl
 802052c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020530:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020534:	44de      	add	lr, fp
 8020536:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802053a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802053e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020542:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020546:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802054a:	ea4e 050a 	orr.w	r5, lr, sl
 802054e:	950c      	str	r5, [sp, #48]	; 0x30
 8020550:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020552:	2dff      	cmp	r5, #255	; 0xff
 8020554:	d021      	beq.n	802059a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020556:	9d08      	ldr	r5, [sp, #32]
 8020558:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802055c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802055e:	fb05 fb0b 	mul.w	fp, r5, fp
 8020562:	9d08      	ldr	r5, [sp, #32]
 8020564:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020568:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802056c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802056e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020572:	fb05 fa0a 	mul.w	sl, r5, sl
 8020576:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802057a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802057e:	44de      	add	lr, fp
 8020580:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020584:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020588:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802058c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020590:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020594:	ea4e 050a 	orr.w	r5, lr, sl
 8020598:	9508      	str	r5, [sp, #32]
 802059a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802059c:	2dff      	cmp	r5, #255	; 0xff
 802059e:	d021      	beq.n	80205e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80205a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80205a2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80205a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80205a8:	fb05 fb0b 	mul.w	fp, r5, fp
 80205ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80205ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80205b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80205b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80205c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80205c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80205c8:	44de      	add	lr, fp
 80205ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80205ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205de:	ea4e 050a 	orr.w	r5, lr, sl
 80205e2:	950d      	str	r5, [sp, #52]	; 0x34
 80205e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80205e6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80205ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80205ee:	fb08 fc0c 	mul.w	ip, r8, ip
 80205f2:	fb03 cc0e 	mla	ip, r3, lr, ip
 80205f6:	9d08      	ldr	r5, [sp, #32]
 80205f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205fc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020600:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020604:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020606:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802060a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802060c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020610:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020614:	fb08 f80e 	mul.w	r8, r8, lr
 8020618:	fb03 8202 	mla	r2, r3, r2, r8
 802061c:	9b08      	ldr	r3, [sp, #32]
 802061e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020622:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8020626:	fb01 220a 	mla	r2, r1, sl, r2
 802062a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802062c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020630:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8020634:	fb09 2901 	mla	r9, r9, r1, r2
 8020638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802063a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802063e:	4342      	muls	r2, r0
 8020640:	1c50      	adds	r0, r2, #1
 8020642:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020646:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802064a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802064e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020652:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020654:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020658:	883b      	ldrh	r3, [r7, #0]
 802065a:	fb12 f205 	smulbb	r2, r2, r5
 802065e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020662:	fa5f fc8c 	uxtb.w	ip, ip
 8020666:	1219      	asrs	r1, r3, #8
 8020668:	fb1c fc05 	smulbb	ip, ip, r5
 802066c:	b2c0      	uxtb	r0, r0
 802066e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020672:	fb01 2100 	mla	r1, r1, r0, r2
 8020676:	10da      	asrs	r2, r3, #3
 8020678:	00db      	lsls	r3, r3, #3
 802067a:	fb1e fe05 	smulbb	lr, lr, r5
 802067e:	b2db      	uxtb	r3, r3
 8020680:	fb03 c300 	mla	r3, r3, r0, ip
 8020684:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020688:	b289      	uxth	r1, r1
 802068a:	fb02 e200 	mla	r2, r2, r0, lr
 802068e:	fa1f fc83 	uxth.w	ip, r3
 8020692:	1c4b      	adds	r3, r1, #1
 8020694:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020698:	f10c 0301 	add.w	r3, ip, #1
 802069c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80206a0:	b292      	uxth	r2, r2
 80206a2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80206a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80206aa:	430b      	orrs	r3, r1
 80206ac:	1c51      	adds	r1, r2, #1
 80206ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80206b2:	0952      	lsrs	r2, r2, #5
 80206b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80206b8:	4313      	orrs	r3, r2
 80206ba:	803b      	strh	r3, [r7, #0]
 80206bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80206be:	3702      	adds	r7, #2
 80206c0:	441c      	add	r4, r3
 80206c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80206c4:	441e      	add	r6, r3
 80206c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80206c8:	3b01      	subs	r3, #1
 80206ca:	9318      	str	r3, [sp, #96]	; 0x60
 80206cc:	e698      	b.n	8020400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80206ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80206d0:	441c      	add	r4, r3
 80206d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80206d4:	441e      	add	r6, r3
 80206d6:	9b07      	ldr	r3, [sp, #28]
 80206d8:	3b01      	subs	r3, #1
 80206da:	9307      	str	r3, [sp, #28]
 80206dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206de:	3302      	adds	r3, #2
 80206e0:	930a      	str	r3, [sp, #40]	; 0x28
 80206e2:	e66d      	b.n	80203c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80206e4:	d023      	beq.n	802072e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80206e6:	9b07      	ldr	r3, [sp, #28]
 80206e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80206ea:	3b01      	subs	r3, #1
 80206ec:	fb00 4003 	mla	r0, r0, r3, r4
 80206f0:	1400      	asrs	r0, r0, #16
 80206f2:	f53f ae82 	bmi.w	80203fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80206f6:	3901      	subs	r1, #1
 80206f8:	4288      	cmp	r0, r1
 80206fa:	f6bf ae7e 	bge.w	80203fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80206fe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020700:	fb01 6303 	mla	r3, r1, r3, r6
 8020704:	141b      	asrs	r3, r3, #16
 8020706:	f53f ae78 	bmi.w	80203fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802070a:	3a01      	subs	r2, #1
 802070c:	4293      	cmp	r3, r2
 802070e:	f6bf ae74 	bge.w	80203fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020712:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020716:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802071a:	f1bb 0f00 	cmp.w	fp, #0
 802071e:	dc6c      	bgt.n	80207fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8020720:	9b07      	ldr	r3, [sp, #28]
 8020722:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020728:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802072c:	930a      	str	r3, [sp, #40]	; 0x28
 802072e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020730:	2b00      	cmp	r3, #0
 8020732:	f340 81b3 	ble.w	8020a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802073a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802073e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020742:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020746:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802074a:	eef0 6a62 	vmov.f32	s13, s5
 802074e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020752:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020756:	ee61 7a27 	vmul.f32	s15, s2, s15
 802075a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802075e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020762:	ee16 4a90 	vmov	r4, s13
 8020766:	eef0 6a43 	vmov.f32	s13, s6
 802076a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802076e:	ee12 2a90 	vmov	r2, s5
 8020772:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020776:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020778:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802077c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020780:	ee13 2a10 	vmov	r2, s6
 8020784:	9329      	str	r3, [sp, #164]	; 0xa4
 8020786:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020788:	ee16 6a90 	vmov	r6, s13
 802078c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020790:	932a      	str	r3, [sp, #168]	; 0xa8
 8020792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020794:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020796:	3b01      	subs	r3, #1
 8020798:	9317      	str	r3, [sp, #92]	; 0x5c
 802079a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802079c:	bf08      	it	eq
 802079e:	4613      	moveq	r3, r2
 80207a0:	eeb0 3a67 	vmov.f32	s6, s15
 80207a4:	9307      	str	r3, [sp, #28]
 80207a6:	eef0 2a47 	vmov.f32	s5, s14
 80207aa:	e5fb      	b.n	80203a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80207ac:	2900      	cmp	r1, #0
 80207ae:	f43f ae6b 	beq.w	8020488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80207b2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80207b6:	9308      	str	r3, [sp, #32]
 80207b8:	0e1b      	lsrs	r3, r3, #24
 80207ba:	9311      	str	r3, [sp, #68]	; 0x44
 80207bc:	e664      	b.n	8020488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80207be:	f112 0801 	adds.w	r8, r2, #1
 80207c2:	f53f af7b 	bmi.w	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80207c6:	4543      	cmp	r3, r8
 80207c8:	f6ff af78 	blt.w	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80207cc:	f11c 0801 	adds.w	r8, ip, #1
 80207d0:	f53f af74 	bmi.w	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80207d4:	45c6      	cmp	lr, r8
 80207d6:	f6ff af71 	blt.w	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80207da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80207dc:	9201      	str	r2, [sp, #4]
 80207de:	fa0f f28e 	sxth.w	r2, lr
 80207e2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80207e6:	e9cd c002 	strd	ip, r0, [sp, #8]
 80207ea:	9200      	str	r2, [sp, #0]
 80207ec:	b21b      	sxth	r3, r3
 80207ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80207f0:	4639      	mov	r1, r7
 80207f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80207f4:	f7ff fc79 	bl	80200ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80207f8:	e760      	b.n	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80207fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80207fc:	1427      	asrs	r7, r4, #16
 80207fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020802:	1433      	asrs	r3, r6, #16
 8020804:	fb01 7303 	mla	r3, r1, r3, r7
 8020808:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802080a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802080e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8020812:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020816:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802081a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802081e:	2a00      	cmp	r2, #0
 8020820:	f000 8133 	beq.w	8020a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8020824:	687d      	ldr	r5, [r7, #4]
 8020826:	950e      	str	r5, [sp, #56]	; 0x38
 8020828:	0e2d      	lsrs	r5, r5, #24
 802082a:	9515      	str	r5, [sp, #84]	; 0x54
 802082c:	b178      	cbz	r0, 802084e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802082e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8020832:	3901      	subs	r1, #1
 8020834:	0089      	lsls	r1, r1, #2
 8020836:	3104      	adds	r1, #4
 8020838:	eb07 0e01 	add.w	lr, r7, r1
 802083c:	5879      	ldr	r1, [r7, r1]
 802083e:	9109      	str	r1, [sp, #36]	; 0x24
 8020840:	0e09      	lsrs	r1, r1, #24
 8020842:	9112      	str	r1, [sp, #72]	; 0x48
 8020844:	f8de 1004 	ldr.w	r1, [lr, #4]
 8020848:	910f      	str	r1, [sp, #60]	; 0x3c
 802084a:	0e09      	lsrs	r1, r1, #24
 802084c:	9116      	str	r1, [sp, #88]	; 0x58
 802084e:	b292      	uxth	r2, r2
 8020850:	b280      	uxth	r0, r0
 8020852:	fb02 f800 	mul.w	r8, r2, r0
 8020856:	0112      	lsls	r2, r2, #4
 8020858:	eba2 0e08 	sub.w	lr, r2, r8
 802085c:	9915      	ldr	r1, [sp, #84]	; 0x54
 802085e:	fa1f fe8e 	uxth.w	lr, lr
 8020862:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020866:	fb0e f101 	mul.w	r1, lr, r1
 802086a:	b280      	uxth	r0, r0
 802086c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020870:	1a12      	subs	r2, r2, r0
 8020872:	b292      	uxth	r2, r2
 8020874:	fb02 110c 	mla	r1, r2, ip, r1
 8020878:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802087a:	fb00 1105 	mla	r1, r0, r5, r1
 802087e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020880:	fb08 1105 	mla	r1, r8, r5, r1
 8020884:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020888:	2900      	cmp	r1, #0
 802088a:	f000 80f5 	beq.w	8020a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802088e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020892:	d019      	beq.n	80208c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8020894:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020898:	fb0c fa0a 	mul.w	sl, ip, sl
 802089c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208a0:	fb0c fc03 	mul.w	ip, ip, r3
 80208a4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80208a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80208b0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80208b4:	4453      	add	r3, sl
 80208b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80208ba:	0a1b      	lsrs	r3, r3, #8
 80208bc:	0a3f      	lsrs	r7, r7, #8
 80208be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80208c6:	433b      	orrs	r3, r7
 80208c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80208ca:	2dff      	cmp	r5, #255	; 0xff
 80208cc:	d020      	beq.n	8020910 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80208ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80208d0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80208d4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80208d6:	436f      	muls	r7, r5
 80208d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80208da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80208e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80208e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80208e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80208ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208f0:	44bc      	add	ip, r7
 80208f2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020902:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020906:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802090a:	ea4c 050a 	orr.w	r5, ip, sl
 802090e:	950e      	str	r5, [sp, #56]	; 0x38
 8020910:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020912:	2dff      	cmp	r5, #255	; 0xff
 8020914:	d020      	beq.n	8020958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8020916:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020918:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802091c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802091e:	436f      	muls	r7, r5
 8020920:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020922:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020926:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802092a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802092c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020930:	fb05 fa0a 	mul.w	sl, r5, sl
 8020934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020938:	44bc      	add	ip, r7
 802093a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802093e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020942:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020946:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802094a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802094e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020952:	ea4c 050a 	orr.w	r5, ip, sl
 8020956:	9509      	str	r5, [sp, #36]	; 0x24
 8020958:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802095a:	2dff      	cmp	r5, #255	; 0xff
 802095c:	d020      	beq.n	80209a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802095e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020960:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020964:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020966:	436f      	muls	r7, r5
 8020968:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802096a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802096e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020972:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020974:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020978:	fb05 fa0a 	mul.w	sl, r5, sl
 802097c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020980:	44bc      	add	ip, r7
 8020982:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020986:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802098a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802098e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020992:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020996:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802099a:	ea4c 050a 	orr.w	r5, ip, sl
 802099e:	950f      	str	r5, [sp, #60]	; 0x3c
 80209a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80209a2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80209a6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80209aa:	fb0e f707 	mul.w	r7, lr, r7
 80209ae:	fb02 770c 	mla	r7, r2, ip, r7
 80209b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80209b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209b8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80209bc:	fb00 770c 	mla	r7, r0, ip, r7
 80209c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80209c2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80209c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80209c8:	fb08 770c 	mla	r7, r8, ip, r7
 80209cc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80209d0:	fb0e fe0c 	mul.w	lr, lr, ip
 80209d4:	fb02 e303 	mla	r3, r2, r3, lr
 80209d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80209da:	0a3f      	lsrs	r7, r7, #8
 80209dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80209e0:	fb00 330a 	mla	r3, r0, sl, r3
 80209e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80209ea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80209ee:	fb08 3c0c 	mla	ip, r8, ip, r3
 80209f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209f8:	4359      	muls	r1, r3
 80209fa:	1c4b      	adds	r3, r1, #1
 80209fc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020a00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020a04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020a08:	ea47 070c 	orr.w	r7, r7, ip
 8020a0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020a0e:	0c3b      	lsrs	r3, r7, #16
 8020a10:	f8b9 0000 	ldrh.w	r0, [r9]
 8020a14:	fb13 f305 	smulbb	r3, r3, r5
 8020a18:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020a1c:	b2ff      	uxtb	r7, r7
 8020a1e:	1202      	asrs	r2, r0, #8
 8020a20:	fb17 f705 	smulbb	r7, r7, r5
 8020a24:	b2c9      	uxtb	r1, r1
 8020a26:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020a2a:	fb02 3201 	mla	r2, r2, r1, r3
 8020a2e:	10c3      	asrs	r3, r0, #3
 8020a30:	00c0      	lsls	r0, r0, #3
 8020a32:	fb1c fc05 	smulbb	ip, ip, r5
 8020a36:	b2c0      	uxtb	r0, r0
 8020a38:	fb00 7001 	mla	r0, r0, r1, r7
 8020a3c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020a40:	fb03 c301 	mla	r3, r3, r1, ip
 8020a44:	b292      	uxth	r2, r2
 8020a46:	b280      	uxth	r0, r0
 8020a48:	1c51      	adds	r1, r2, #1
 8020a4a:	f100 0c01 	add.w	ip, r0, #1
 8020a4e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020a52:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8020a56:	b29b      	uxth	r3, r3
 8020a58:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020a5c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020a60:	ea4c 0202 	orr.w	r2, ip, r2
 8020a64:	f103 0c01 	add.w	ip, r3, #1
 8020a68:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020a6c:	095b      	lsrs	r3, r3, #5
 8020a6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a72:	431a      	orrs	r2, r3
 8020a74:	f8a9 2000 	strh.w	r2, [r9]
 8020a78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a7a:	f109 0902 	add.w	r9, r9, #2
 8020a7e:	441c      	add	r4, r3
 8020a80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a86:	441e      	add	r6, r3
 8020a88:	e647      	b.n	802071a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	f43f aedf 	beq.w	802084e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020a90:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8020a94:	9109      	str	r1, [sp, #36]	; 0x24
 8020a96:	0e09      	lsrs	r1, r1, #24
 8020a98:	9112      	str	r1, [sp, #72]	; 0x48
 8020a9a:	e6d8      	b.n	802084e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020a9c:	b01d      	add	sp, #116	; 0x74
 8020a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020aa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8020aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa6:	b085      	sub	sp, #20
 8020aa8:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020aac:	9102      	str	r1, [sp, #8]
 8020aae:	fb04 7103 	mla	r1, r4, r3, r7
 8020ab2:	2c00      	cmp	r4, #0
 8020ab4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020ab8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020abc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020ac0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020ac4:	f2c0 810c 	blt.w	8020ce0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020ac8:	45a6      	cmp	lr, r4
 8020aca:	f340 8109 	ble.w	8020ce0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020ace:	2f00      	cmp	r7, #0
 8020ad0:	f2c0 8104 	blt.w	8020cdc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020ad4:	42bb      	cmp	r3, r7
 8020ad6:	f340 8101 	ble.w	8020cdc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020ada:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020ade:	1c7a      	adds	r2, r7, #1
 8020ae0:	f100 8101 	bmi.w	8020ce6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020ae4:	4293      	cmp	r3, r2
 8020ae6:	f340 80fe 	ble.w	8020ce6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020aea:	2e00      	cmp	r6, #0
 8020aec:	f000 80fd 	beq.w	8020cea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8020af0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020af4:	3401      	adds	r4, #1
 8020af6:	f100 80fc 	bmi.w	8020cf2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020afa:	45a6      	cmp	lr, r4
 8020afc:	f340 80f9 	ble.w	8020cf2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020b00:	2800      	cmp	r0, #0
 8020b02:	f000 80f9 	beq.w	8020cf8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8020b06:	2f00      	cmp	r7, #0
 8020b08:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8020b0c:	f2c0 80ef 	blt.w	8020cee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020b10:	42bb      	cmp	r3, r7
 8020b12:	f340 80ec 	ble.w	8020cee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020b16:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020b1a:	3701      	adds	r7, #1
 8020b1c:	f100 80ef 	bmi.w	8020cfe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020b20:	42bb      	cmp	r3, r7
 8020b22:	f340 80ec 	ble.w	8020cfe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020b26:	2e00      	cmp	r6, #0
 8020b28:	f000 80eb 	beq.w	8020d02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8020b2c:	6852      	ldr	r2, [r2, #4]
 8020b2e:	b2b6      	uxth	r6, r6
 8020b30:	b280      	uxth	r0, r0
 8020b32:	fb00 fe06 	mul.w	lr, r0, r6
 8020b36:	0136      	lsls	r6, r6, #4
 8020b38:	eba6 070e 	sub.w	r7, r6, lr
 8020b3c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020b40:	b2bf      	uxth	r7, r7
 8020b42:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020b46:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020b4a:	fb07 f60a 	mul.w	r6, r7, sl
 8020b4e:	b280      	uxth	r0, r0
 8020b50:	1a1b      	subs	r3, r3, r0
 8020b52:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020b56:	b29b      	uxth	r3, r3
 8020b58:	fb0b 6603 	mla	r6, fp, r3, r6
 8020b5c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020b60:	fb00 6609 	mla	r6, r0, r9, r6
 8020b64:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020b68:	fb0e 6608 	mla	r6, lr, r8, r6
 8020b6c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020b70:	9600      	str	r6, [sp, #0]
 8020b72:	2e00      	cmp	r6, #0
 8020b74:	f000 80af 	beq.w	8020cd6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8020b78:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020b7c:	fb0b fc0c 	mul.w	ip, fp, ip
 8020b80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020b84:	fb0b f505 	mul.w	r5, fp, r5
 8020b88:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020b8c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020b90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020b94:	44dc      	add	ip, fp
 8020b96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b9a:	9501      	str	r5, [sp, #4]
 8020b9c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020ba0:	9503      	str	r5, [sp, #12]
 8020ba2:	9d01      	ldr	r5, [sp, #4]
 8020ba4:	9e02      	ldr	r6, [sp, #8]
 8020ba6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020baa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020bae:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020bb2:	fb0a fc0c 	mul.w	ip, sl, ip
 8020bb6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020bba:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020bbe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020bc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020bc6:	4465      	add	r5, ip
 8020bc8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020bcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020bd0:	fb09 fc0c 	mul.w	ip, r9, ip
 8020bd4:	fb09 f904 	mul.w	r9, r9, r4
 8020bd8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020bdc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020be0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020be4:	fb08 f404 	mul.w	r4, r8, r4
 8020be8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020bec:	fb08 f802 	mul.w	r8, r8, r2
 8020bf0:	0a2d      	lsrs	r5, r5, #8
 8020bf2:	0a22      	lsrs	r2, r4, #8
 8020bf4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020bf8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020bfc:	437d      	muls	r5, r7
 8020bfe:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020c02:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020c06:	4414      	add	r4, r2
 8020c08:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020c0c:	fb0a fa01 	mul.w	sl, sl, r1
 8020c10:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020c14:	9a03      	ldr	r2, [sp, #12]
 8020c16:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020c1a:	fb02 5503 	mla	r5, r2, r3, r5
 8020c1e:	0a24      	lsrs	r4, r4, #8
 8020c20:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020c24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020c28:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020c2c:	fb04 540e 	mla	r4, r4, lr, r5
 8020c30:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020c34:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c38:	4461      	add	r1, ip
 8020c3a:	0a09      	lsrs	r1, r1, #8
 8020c3c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020c40:	fb01 4100 	mla	r1, r1, r0, r4
 8020c44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c4c:	fb07 f70a 	mul.w	r7, r7, sl
 8020c50:	0a09      	lsrs	r1, r1, #8
 8020c52:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020c56:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8020c5a:	fb03 7101 	mla	r1, r3, r1, r7
 8020c5e:	9b00      	ldr	r3, [sp, #0]
 8020c60:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020c64:	43da      	mvns	r2, r3
 8020c66:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020c6a:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020c6e:	8836      	ldrh	r6, [r6, #0]
 8020c70:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020c74:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020c78:	fb00 e101 	mla	r1, r0, r1, lr
 8020c7c:	1233      	asrs	r3, r6, #8
 8020c7e:	b2d2      	uxtb	r2, r2
 8020c80:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020c84:	4353      	muls	r3, r2
 8020c86:	10f0      	asrs	r0, r6, #3
 8020c88:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c8c:	4350      	muls	r0, r2
 8020c8e:	0a09      	lsrs	r1, r1, #8
 8020c90:	00f6      	lsls	r6, r6, #3
 8020c92:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020c96:	b2f6      	uxtb	r6, r6
 8020c98:	4321      	orrs	r1, r4
 8020c9a:	4356      	muls	r6, r2
 8020c9c:	1c5a      	adds	r2, r3, #1
 8020c9e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020ca2:	0c0b      	lsrs	r3, r1, #16
 8020ca4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ca8:	1c42      	adds	r2, r0, #1
 8020caa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020cae:	0a0a      	lsrs	r2, r1, #8
 8020cb0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020cb4:	021b      	lsls	r3, r3, #8
 8020cb6:	00d2      	lsls	r2, r2, #3
 8020cb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020cbc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020cc0:	4313      	orrs	r3, r2
 8020cc2:	1c72      	adds	r2, r6, #1
 8020cc4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020cc8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8020ccc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020cd0:	4319      	orrs	r1, r3
 8020cd2:	9b02      	ldr	r3, [sp, #8]
 8020cd4:	8019      	strh	r1, [r3, #0]
 8020cd6:	b005      	add	sp, #20
 8020cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cdc:	2500      	movs	r5, #0
 8020cde:	e6fe      	b.n	8020ade <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8020ce0:	2100      	movs	r1, #0
 8020ce2:	460d      	mov	r5, r1
 8020ce4:	e706      	b.n	8020af4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020ce6:	2100      	movs	r1, #0
 8020ce8:	e704      	b.n	8020af4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020cea:	4631      	mov	r1, r6
 8020cec:	e702      	b.n	8020af4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020cee:	2400      	movs	r4, #0
 8020cf0:	e713      	b.n	8020b1a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	4614      	mov	r4, r2
 8020cf6:	e71a      	b.n	8020b2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020cf8:	4602      	mov	r2, r0
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	e717      	b.n	8020b2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020cfe:	2200      	movs	r2, #0
 8020d00:	e715      	b.n	8020b2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020d02:	4632      	mov	r2, r6
 8020d04:	e713      	b.n	8020b2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08020d08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d0c:	b09b      	sub	sp, #108	; 0x6c
 8020d0e:	9218      	str	r2, [sp, #96]	; 0x60
 8020d10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020d12:	9019      	str	r0, [sp, #100]	; 0x64
 8020d14:	6850      	ldr	r0, [r2, #4]
 8020d16:	9116      	str	r1, [sp, #88]	; 0x58
 8020d18:	9307      	str	r3, [sp, #28]
 8020d1a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020d1e:	fb00 1303 	mla	r3, r0, r3, r1
 8020d22:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8020d26:	6812      	ldr	r2, [r2, #0]
 8020d28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8020d2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d30:	681b      	ldr	r3, [r3, #0]
 8020d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	dc03      	bgt.n	8020d42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020d3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	f340 8387 	ble.w	8021450 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020d42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d4c:	1e48      	subs	r0, r1, #1
 8020d4e:	1e57      	subs	r7, r2, #1
 8020d50:	9b07      	ldr	r3, [sp, #28]
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	f340 8166 	ble.w	8021024 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020d58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020d5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020d60:	d406      	bmi.n	8020d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d62:	4584      	cmp	ip, r0
 8020d64:	da04      	bge.n	8020d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	db02      	blt.n	8020d70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d6a:	42bb      	cmp	r3, r7
 8020d6c:	f2c0 815b 	blt.w	8021026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020d70:	f11c 0c01 	adds.w	ip, ip, #1
 8020d74:	f100 814b 	bmi.w	802100e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020d78:	4561      	cmp	r1, ip
 8020d7a:	f2c0 8148 	blt.w	802100e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020d7e:	3301      	adds	r3, #1
 8020d80:	f100 8145 	bmi.w	802100e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020d84:	429a      	cmp	r2, r3
 8020d86:	f2c0 8142 	blt.w	802100e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020d8a:	9b07      	ldr	r3, [sp, #28]
 8020d8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020d8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8020d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	f340 8165 	ble.w	8021062 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020d98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020d9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d9c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020da0:	1422      	asrs	r2, r4, #16
 8020da2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020da6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020daa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020dae:	689b      	ldr	r3, [r3, #8]
 8020db0:	f100 81d5 	bmi.w	802115e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020db4:	f103 38ff 	add.w	r8, r3, #4294967295
 8020db8:	4542      	cmp	r2, r8
 8020dba:	f280 81d0 	bge.w	802115e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020dbe:	f1bc 0f00 	cmp.w	ip, #0
 8020dc2:	f2c0 81cc 	blt.w	802115e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020dc6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020dca:	45c4      	cmp	ip, r8
 8020dcc:	f280 81c7 	bge.w	802115e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020dd0:	b21b      	sxth	r3, r3
 8020dd2:	fb0c 2203 	mla	r2, ip, r3, r2
 8020dd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020dd8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020ddc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020de0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020de4:	2900      	cmp	r1, #0
 8020de6:	f000 8182 	beq.w	80210ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020dea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020dee:	950b      	str	r5, [sp, #44]	; 0x2c
 8020df0:	0e2d      	lsrs	r5, r5, #24
 8020df2:	9512      	str	r5, [sp, #72]	; 0x48
 8020df4:	b180      	cbz	r0, 8020e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020dfa:	3b01      	subs	r3, #1
 8020dfc:	009b      	lsls	r3, r3, #2
 8020dfe:	3304      	adds	r3, #4
 8020e00:	eb08 0c03 	add.w	ip, r8, r3
 8020e04:	f858 3003 	ldr.w	r3, [r8, r3]
 8020e08:	9308      	str	r3, [sp, #32]
 8020e0a:	0e1b      	lsrs	r3, r3, #24
 8020e0c:	9310      	str	r3, [sp, #64]	; 0x40
 8020e0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020e12:	930c      	str	r3, [sp, #48]	; 0x30
 8020e14:	0e1b      	lsrs	r3, r3, #24
 8020e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e18:	b289      	uxth	r1, r1
 8020e1a:	b280      	uxth	r0, r0
 8020e1c:	fb01 f900 	mul.w	r9, r1, r0
 8020e20:	0109      	lsls	r1, r1, #4
 8020e22:	eba1 0809 	sub.w	r8, r1, r9
 8020e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e28:	fa1f f888 	uxth.w	r8, r8
 8020e2c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020e30:	fb08 f303 	mul.w	r3, r8, r3
 8020e34:	b280      	uxth	r0, r0
 8020e36:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8020e3a:	1a09      	subs	r1, r1, r0
 8020e3c:	b289      	uxth	r1, r1
 8020e3e:	fb01 330e 	mla	r3, r1, lr, r3
 8020e42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020e44:	fb00 3305 	mla	r3, r0, r5, r3
 8020e48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020e4a:	fb09 3305 	mla	r3, r9, r5, r3
 8020e4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	f000 80d2 	beq.w	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020e58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020e5c:	d01b      	beq.n	8020e96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8020e5e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020e62:	fb0e fa0a 	mul.w	sl, lr, sl
 8020e66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e6a:	fb0e fe02 	mul.w	lr, lr, r2
 8020e6e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020e72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020e7a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020e7e:	4452      	add	r2, sl
 8020e80:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020e84:	0a12      	lsrs	r2, r2, #8
 8020e86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e8a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e8e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e92:	ea42 020c 	orr.w	r2, r2, ip
 8020e96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020e98:	2dff      	cmp	r5, #255	; 0xff
 8020e9a:	d021      	beq.n	8020ee0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020e9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020e9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020ea2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020ea4:	fb05 fb0b 	mul.w	fp, r5, fp
 8020ea8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020eaa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020eae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020eb2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020eb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020eb8:	fb05 fa0a 	mul.w	sl, r5, sl
 8020ebc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ec0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ec4:	44de      	add	lr, fp
 8020ec6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020eca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ece:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ed6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020eda:	ea4e 050a 	orr.w	r5, lr, sl
 8020ede:	950b      	str	r5, [sp, #44]	; 0x2c
 8020ee0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020ee2:	2dff      	cmp	r5, #255	; 0xff
 8020ee4:	d021      	beq.n	8020f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8020ee6:	9d08      	ldr	r5, [sp, #32]
 8020ee8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020eec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020eee:	fb05 fb0b 	mul.w	fp, r5, fp
 8020ef2:	9d08      	ldr	r5, [sp, #32]
 8020ef4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020ef8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020efa:	fb05 fa0e 	mul.w	sl, r5, lr
 8020efe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f0e:	44de      	add	lr, fp
 8020f10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f24:	ea4e 050a 	orr.w	r5, lr, sl
 8020f28:	9508      	str	r5, [sp, #32]
 8020f2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f2c:	2dff      	cmp	r5, #255	; 0xff
 8020f2e:	d021      	beq.n	8020f74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020f30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020f32:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020f36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f38:	fb05 fb0b 	mul.w	fp, r5, fp
 8020f3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020f3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f42:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020f46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f4c:	fb05 fa0a 	mul.w	sl, r5, sl
 8020f50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f58:	44de      	add	lr, fp
 8020f5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f6e:	ea4e 050a 	orr.w	r5, lr, sl
 8020f72:	950c      	str	r5, [sp, #48]	; 0x30
 8020f74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020f76:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020f7a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020f7e:	fb08 fc0c 	mul.w	ip, r8, ip
 8020f82:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020f86:	9d08      	ldr	r5, [sp, #32]
 8020f88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f8c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020f90:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020f96:	2bff      	cmp	r3, #255	; 0xff
 8020f98:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020f9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020f9e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020fa2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020fa6:	fb08 f80e 	mul.w	r8, r8, lr
 8020faa:	fb01 8202 	mla	r2, r1, r2, r8
 8020fae:	9908      	ldr	r1, [sp, #32]
 8020fb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fb4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020fb8:	fb00 220a 	mla	r2, r0, sl, r2
 8020fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020fbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fc2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8020fc6:	fb09 2900 	mla	r9, r9, r0, r2
 8020fca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020fce:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020fd2:	ea4c 0c09 	orr.w	ip, ip, r9
 8020fd6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8020fda:	f040 8091 	bne.w	8021100 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020fde:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8020fe2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8020fe6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020fea:	f022 0207 	bic.w	r2, r2, #7
 8020fee:	431a      	orrs	r2, r3
 8020ff0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020ff4:	ea4c 0c02 	orr.w	ip, ip, r2
 8020ff8:	f8a7 c000 	strh.w	ip, [r7]
 8020ffc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020ffe:	3702      	adds	r7, #2
 8021000:	441c      	add	r4, r3
 8021002:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021004:	441e      	add	r6, r3
 8021006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021008:	3b01      	subs	r3, #1
 802100a:	9317      	str	r3, [sp, #92]	; 0x5c
 802100c:	e6c0      	b.n	8020d90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802100e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021010:	441c      	add	r4, r3
 8021012:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021014:	441e      	add	r6, r3
 8021016:	9b07      	ldr	r3, [sp, #28]
 8021018:	3b01      	subs	r3, #1
 802101a:	9307      	str	r3, [sp, #28]
 802101c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802101e:	3302      	adds	r3, #2
 8021020:	930a      	str	r3, [sp, #40]	; 0x28
 8021022:	e695      	b.n	8020d50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021024:	d024      	beq.n	8021070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021026:	9b07      	ldr	r3, [sp, #28]
 8021028:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802102a:	3b01      	subs	r3, #1
 802102c:	fb00 4003 	mla	r0, r0, r3, r4
 8021030:	1400      	asrs	r0, r0, #16
 8021032:	f53f aeaa 	bmi.w	8020d8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021036:	3901      	subs	r1, #1
 8021038:	4288      	cmp	r0, r1
 802103a:	f6bf aea6 	bge.w	8020d8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802103e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021040:	fb01 6303 	mla	r3, r1, r3, r6
 8021044:	141b      	asrs	r3, r3, #16
 8021046:	f53f aea0 	bmi.w	8020d8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802104a:	3a01      	subs	r2, #1
 802104c:	4293      	cmp	r3, r2
 802104e:	f6bf ae9c 	bge.w	8020d8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021052:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021056:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802105a:	f1bb 0f00 	cmp.w	fp, #0
 802105e:	f300 809a 	bgt.w	8021196 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021062:	9b07      	ldr	r3, [sp, #28]
 8021064:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802106a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802106e:	930a      	str	r3, [sp, #40]	; 0x28
 8021070:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021072:	2b00      	cmp	r3, #0
 8021074:	f340 81ec 	ble.w	8021450 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802107c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021080:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021084:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021088:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802108c:	eef0 6a62 	vmov.f32	s13, s5
 8021090:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021094:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021098:	ee61 7a27 	vmul.f32	s15, s2, s15
 802109c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80210a4:	ee16 4a90 	vmov	r4, s13
 80210a8:	eef0 6a43 	vmov.f32	s13, s6
 80210ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80210b0:	ee12 2a90 	vmov	r2, s5
 80210b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210be:	fb92 f3f3 	sdiv	r3, r2, r3
 80210c2:	ee13 2a10 	vmov	r2, s6
 80210c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80210c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210ca:	ee16 6a90 	vmov	r6, s13
 80210ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80210d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80210d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80210d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80210d8:	3b01      	subs	r3, #1
 80210da:	9316      	str	r3, [sp, #88]	; 0x58
 80210dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210de:	bf08      	it	eq
 80210e0:	4613      	moveq	r3, r2
 80210e2:	eeb0 3a67 	vmov.f32	s6, s15
 80210e6:	9307      	str	r3, [sp, #28]
 80210e8:	eef0 2a47 	vmov.f32	s5, s14
 80210ec:	e622      	b.n	8020d34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80210ee:	2800      	cmp	r0, #0
 80210f0:	f43f ae92 	beq.w	8020e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80210f4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80210f8:	9308      	str	r3, [sp, #32]
 80210fa:	0e1b      	lsrs	r3, r3, #24
 80210fc:	9310      	str	r3, [sp, #64]	; 0x40
 80210fe:	e68b      	b.n	8020e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021100:	43db      	mvns	r3, r3
 8021102:	8839      	ldrh	r1, [r7, #0]
 8021104:	fa5f f883 	uxtb.w	r8, r3
 8021108:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802110c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021110:	fb0e fe08 	mul.w	lr, lr, r8
 8021114:	10c8      	asrs	r0, r1, #3
 8021116:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802111a:	fb00 f008 	mul.w	r0, r0, r8
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	f10e 0101 	add.w	r1, lr, #1
 8021124:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021128:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802112c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021130:	b2db      	uxtb	r3, r3
 8021132:	f100 0e01 	add.w	lr, r0, #1
 8021136:	fb03 f308 	mul.w	r3, r3, r8
 802113a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802113e:	4dc6      	ldr	r5, [pc, #792]	; (8021458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021140:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021144:	b2c9      	uxtb	r1, r1
 8021146:	00d2      	lsls	r2, r2, #3
 8021148:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802114c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021150:	430a      	orrs	r2, r1
 8021152:	1c59      	adds	r1, r3, #1
 8021154:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021158:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802115c:	e748      	b.n	8020ff0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802115e:	f112 0801 	adds.w	r8, r2, #1
 8021162:	f53f af4b 	bmi.w	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021166:	4543      	cmp	r3, r8
 8021168:	f6ff af48 	blt.w	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802116c:	f11c 0801 	adds.w	r8, ip, #1
 8021170:	f53f af44 	bmi.w	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021174:	45c6      	cmp	lr, r8
 8021176:	f6ff af41 	blt.w	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802117a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802117e:	fa0f f28e 	sxth.w	r2, lr
 8021182:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021186:	9200      	str	r2, [sp, #0]
 8021188:	b21b      	sxth	r3, r3
 802118a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802118c:	4639      	mov	r1, r7
 802118e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021190:	f7ff fc87 	bl	8020aa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021194:	e732      	b.n	8020ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021196:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021198:	1421      	asrs	r1, r4, #16
 802119a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802119e:	1433      	asrs	r3, r6, #16
 80211a0:	fb07 1303 	mla	r3, r7, r3, r1
 80211a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80211a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80211a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80211ac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80211b0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80211b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80211b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80211bc:	2a00      	cmp	r2, #0
 80211be:	f000 8108 	beq.w	80213d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80211c2:	684d      	ldr	r5, [r1, #4]
 80211c4:	950d      	str	r5, [sp, #52]	; 0x34
 80211c6:	0e2d      	lsrs	r5, r5, #24
 80211c8:	9514      	str	r5, [sp, #80]	; 0x50
 80211ca:	b178      	cbz	r0, 80211ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80211cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80211d0:	3f01      	subs	r7, #1
 80211d2:	00bf      	lsls	r7, r7, #2
 80211d4:	3704      	adds	r7, #4
 80211d6:	eb01 0e07 	add.w	lr, r1, r7
 80211da:	59c9      	ldr	r1, [r1, r7]
 80211dc:	9109      	str	r1, [sp, #36]	; 0x24
 80211de:	0e09      	lsrs	r1, r1, #24
 80211e0:	9111      	str	r1, [sp, #68]	; 0x44
 80211e2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80211e6:	910e      	str	r1, [sp, #56]	; 0x38
 80211e8:	0e09      	lsrs	r1, r1, #24
 80211ea:	9115      	str	r1, [sp, #84]	; 0x54
 80211ec:	b292      	uxth	r2, r2
 80211ee:	b280      	uxth	r0, r0
 80211f0:	fb02 f900 	mul.w	r9, r2, r0
 80211f4:	0112      	lsls	r2, r2, #4
 80211f6:	eba2 0e09 	sub.w	lr, r2, r9
 80211fa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80211fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021200:	fa1f fe8e 	uxth.w	lr, lr
 8021204:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021208:	fb0e f202 	mul.w	r2, lr, r2
 802120c:	b280      	uxth	r0, r0
 802120e:	1a09      	subs	r1, r1, r0
 8021210:	b289      	uxth	r1, r1
 8021212:	fb01 220c 	mla	r2, r1, ip, r2
 8021216:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021218:	fb00 2205 	mla	r2, r0, r5, r2
 802121c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802121e:	fb09 2205 	mla	r2, r9, r5, r2
 8021222:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021226:	2a00      	cmp	r2, #0
 8021228:	f000 80ca 	beq.w	80213c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802122c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021230:	d019      	beq.n	8021266 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8021232:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021236:	fb0c fa0a 	mul.w	sl, ip, sl
 802123a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802123e:	fb0c fc03 	mul.w	ip, ip, r3
 8021242:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021246:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802124a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802124e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021252:	4453      	add	r3, sl
 8021254:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021258:	0a1b      	lsrs	r3, r3, #8
 802125a:	0a3f      	lsrs	r7, r7, #8
 802125c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021260:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021264:	433b      	orrs	r3, r7
 8021266:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021268:	2dff      	cmp	r5, #255	; 0xff
 802126a:	d020      	beq.n	80212ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802126c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802126e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021272:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021274:	436f      	muls	r7, r5
 8021276:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021278:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802127c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021280:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021282:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021286:	fb05 fa0a 	mul.w	sl, r5, sl
 802128a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802128e:	44bc      	add	ip, r7
 8021290:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021294:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802129c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212a8:	ea4c 050a 	orr.w	r5, ip, sl
 80212ac:	950d      	str	r5, [sp, #52]	; 0x34
 80212ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80212b0:	2dff      	cmp	r5, #255	; 0xff
 80212b2:	d020      	beq.n	80212f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80212b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80212b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80212ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80212bc:	436f      	muls	r7, r5
 80212be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80212c0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80212c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80212c6:	fb05 fa0c 	mul.w	sl, r5, ip
 80212ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80212ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80212d6:	44bc      	add	ip, r7
 80212d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80212dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80212e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212f0:	ea4c 050a 	orr.w	r5, ip, sl
 80212f4:	9509      	str	r5, [sp, #36]	; 0x24
 80212f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80212f8:	2dff      	cmp	r5, #255	; 0xff
 80212fa:	d020      	beq.n	802133e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80212fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80212fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021302:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021304:	436f      	muls	r7, r5
 8021306:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021308:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802130c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021310:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021312:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021316:	fb05 fa0a 	mul.w	sl, r5, sl
 802131a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802131e:	44bc      	add	ip, r7
 8021320:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021324:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021328:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802132c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021330:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021334:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021338:	ea4c 050a 	orr.w	r5, ip, sl
 802133c:	950e      	str	r5, [sp, #56]	; 0x38
 802133e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021340:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021344:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021348:	fb0e f707 	mul.w	r7, lr, r7
 802134c:	fb01 770c 	mla	r7, r1, ip, r7
 8021350:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021356:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802135a:	fb00 770c 	mla	r7, r0, ip, r7
 802135e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021360:	2aff      	cmp	r2, #255	; 0xff
 8021362:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021366:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021368:	fb09 770c 	mla	r7, r9, ip, r7
 802136c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021370:	fb0e fe0c 	mul.w	lr, lr, ip
 8021374:	fb01 e303 	mla	r3, r1, r3, lr
 8021378:	9909      	ldr	r1, [sp, #36]	; 0x24
 802137a:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802137e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021382:	fb00 330a 	mla	r3, r0, sl, r3
 8021386:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021388:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802138c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021390:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021394:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021398:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802139c:	ea47 070c 	orr.w	r7, r7, ip
 80213a0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80213a4:	d11e      	bne.n	80213e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80213a6:	097a      	lsrs	r2, r7, #5
 80213a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80213ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80213b0:	f023 0307 	bic.w	r3, r3, #7
 80213b4:	4313      	orrs	r3, r2
 80213b6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80213ba:	431f      	orrs	r7, r3
 80213bc:	f8a8 7000 	strh.w	r7, [r8]
 80213c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80213c2:	f108 0802 	add.w	r8, r8, #2
 80213c6:	441c      	add	r4, r3
 80213c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80213ce:	441e      	add	r6, r3
 80213d0:	e643      	b.n	802105a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80213d2:	2800      	cmp	r0, #0
 80213d4:	f43f af0a 	beq.w	80211ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80213d8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80213dc:	9109      	str	r1, [sp, #36]	; 0x24
 80213de:	0e09      	lsrs	r1, r1, #24
 80213e0:	9111      	str	r1, [sp, #68]	; 0x44
 80213e2:	e703      	b.n	80211ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80213e4:	43d2      	mvns	r2, r2
 80213e6:	f8b8 1000 	ldrh.w	r1, [r8]
 80213ea:	fa5f fe82 	uxtb.w	lr, r2
 80213ee:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80213f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80213f6:	fb0c fc0e 	mul.w	ip, ip, lr
 80213fa:	10c8      	asrs	r0, r1, #3
 80213fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021400:	fb00 f00e 	mul.w	r0, r0, lr
 8021404:	00ca      	lsls	r2, r1, #3
 8021406:	f10c 0101 	add.w	r1, ip, #1
 802140a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802140e:	b2d2      	uxtb	r2, r2
 8021410:	0c39      	lsrs	r1, r7, #16
 8021412:	fb02 f20e 	mul.w	r2, r2, lr
 8021416:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802141a:	490f      	ldr	r1, [pc, #60]	; (8021458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802141c:	fa5f fc8c 	uxtb.w	ip, ip
 8021420:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8021424:	1c41      	adds	r1, r0, #1
 8021426:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802142a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802142e:	1c51      	adds	r1, r2, #1
 8021430:	00c0      	lsls	r0, r0, #3
 8021432:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021436:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802143a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802143e:	ea4c 0c00 	orr.w	ip, ip, r0
 8021442:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021446:	ea47 0c0c 	orr.w	ip, r7, ip
 802144a:	f8a8 c000 	strh.w	ip, [r8]
 802144e:	e7b7      	b.n	80213c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021450:	b01b      	add	sp, #108	; 0x6c
 8021452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021456:	bf00      	nop
 8021458:	fffff800 	.word	0xfffff800

0802145c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802145c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021460:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8021464:	2d00      	cmp	r5, #0
 8021466:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802146a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802146e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021472:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021476:	fb05 0e03 	mla	lr, r5, r3, r0
 802147a:	f2c0 808c 	blt.w	8021596 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802147e:	45a9      	cmp	r9, r5
 8021480:	f340 8089 	ble.w	8021596 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021484:	2800      	cmp	r0, #0
 8021486:	f2c0 8084 	blt.w	8021592 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802148a:	4580      	cmp	r8, r0
 802148c:	f340 8081 	ble.w	8021592 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021490:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021494:	5d16      	ldrb	r6, [r2, r4]
 8021496:	f01e 0f01 	tst.w	lr, #1
 802149a:	bf0c      	ite	eq
 802149c:	f006 060f 	andeq.w	r6, r6, #15
 80214a0:	1136      	asrne	r6, r6, #4
 80214a2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80214a6:	b2f6      	uxtb	r6, r6
 80214a8:	1c44      	adds	r4, r0, #1
 80214aa:	d477      	bmi.n	802159c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80214ac:	45a0      	cmp	r8, r4
 80214ae:	dd75      	ble.n	802159c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80214b0:	2f00      	cmp	r7, #0
 80214b2:	d075      	beq.n	80215a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80214b4:	f10e 0a01 	add.w	sl, lr, #1
 80214b8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80214bc:	5d14      	ldrb	r4, [r2, r4]
 80214be:	f01a 0f01 	tst.w	sl, #1
 80214c2:	bf0c      	ite	eq
 80214c4:	f004 040f 	andeq.w	r4, r4, #15
 80214c8:	1124      	asrne	r4, r4, #4
 80214ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80214ce:	b2e4      	uxtb	r4, r4
 80214d0:	3501      	adds	r5, #1
 80214d2:	d469      	bmi.n	80215a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80214d4:	45a9      	cmp	r9, r5
 80214d6:	dd67      	ble.n	80215a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80214d8:	f1bc 0f00 	cmp.w	ip, #0
 80214dc:	d067      	beq.n	80215ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80214de:	2800      	cmp	r0, #0
 80214e0:	db60      	blt.n	80215a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80214e2:	4580      	cmp	r8, r0
 80214e4:	dd5e      	ble.n	80215a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80214e6:	eb03 090e 	add.w	r9, r3, lr
 80214ea:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80214ee:	5d55      	ldrb	r5, [r2, r5]
 80214f0:	f019 0f01 	tst.w	r9, #1
 80214f4:	bf0c      	ite	eq
 80214f6:	f005 050f 	andeq.w	r5, r5, #15
 80214fa:	112d      	asrne	r5, r5, #4
 80214fc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021500:	b2ed      	uxtb	r5, r5
 8021502:	3001      	adds	r0, #1
 8021504:	d456      	bmi.n	80215b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8021506:	4580      	cmp	r8, r0
 8021508:	dd54      	ble.n	80215b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802150a:	2f00      	cmp	r7, #0
 802150c:	d054      	beq.n	80215b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802150e:	3301      	adds	r3, #1
 8021510:	449e      	add	lr, r3
 8021512:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021516:	5cd0      	ldrb	r0, [r2, r3]
 8021518:	f01e 0f01 	tst.w	lr, #1
 802151c:	bf0c      	ite	eq
 802151e:	f000 000f 	andeq.w	r0, r0, #15
 8021522:	1100      	asrne	r0, r0, #4
 8021524:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021528:	b2c3      	uxtb	r3, r0
 802152a:	b2ba      	uxth	r2, r7
 802152c:	fa1f fc8c 	uxth.w	ip, ip
 8021530:	fb02 f00c 	mul.w	r0, r2, ip
 8021534:	0112      	lsls	r2, r2, #4
 8021536:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802153a:	1a12      	subs	r2, r2, r0
 802153c:	b292      	uxth	r2, r2
 802153e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021542:	4362      	muls	r2, r4
 8021544:	fa1f fc8c 	uxth.w	ip, ip
 8021548:	eba7 070c 	sub.w	r7, r7, ip
 802154c:	b2bf      	uxth	r7, r7
 802154e:	fb06 2207 	mla	r2, r6, r7, r2
 8021552:	fb0c 2505 	mla	r5, ip, r5, r2
 8021556:	fb00 5303 	mla	r3, r0, r3, r5
 802155a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802155e:	b1b3      	cbz	r3, 802158e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8021560:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8021564:	435a      	muls	r2, r3
 8021566:	1c53      	adds	r3, r2, #1
 8021568:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802156c:	4a2d      	ldr	r2, [pc, #180]	; (8021624 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802156e:	121b      	asrs	r3, r3, #8
 8021570:	6812      	ldr	r2, [r2, #0]
 8021572:	2bff      	cmp	r3, #255	; 0xff
 8021574:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021578:	d120      	bne.n	80215bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802157a:	4b2b      	ldr	r3, [pc, #172]	; (8021628 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802157c:	0950      	lsrs	r0, r2, #5
 802157e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021582:	4033      	ands	r3, r6
 8021584:	4318      	orrs	r0, r3
 8021586:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802158a:	4302      	orrs	r2, r0
 802158c:	800a      	strh	r2, [r1, #0]
 802158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021592:	2600      	movs	r6, #0
 8021594:	e788      	b.n	80214a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8021596:	2400      	movs	r4, #0
 8021598:	4626      	mov	r6, r4
 802159a:	e799      	b.n	80214d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802159c:	2400      	movs	r4, #0
 802159e:	e797      	b.n	80214d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80215a0:	463c      	mov	r4, r7
 80215a2:	e795      	b.n	80214d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80215a4:	2500      	movs	r5, #0
 80215a6:	e7ac      	b.n	8021502 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80215a8:	2300      	movs	r3, #0
 80215aa:	461d      	mov	r5, r3
 80215ac:	e7bd      	b.n	802152a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80215ae:	4663      	mov	r3, ip
 80215b0:	4665      	mov	r5, ip
 80215b2:	e7ba      	b.n	802152a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80215b4:	2300      	movs	r3, #0
 80215b6:	e7b8      	b.n	802152a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80215b8:	463b      	mov	r3, r7
 80215ba:	e7b6      	b.n	802152a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80215bc:	b29f      	uxth	r7, r3
 80215be:	43db      	mvns	r3, r3
 80215c0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80215c4:	880d      	ldrh	r5, [r1, #0]
 80215c6:	fb10 f007 	smulbb	r0, r0, r7
 80215ca:	b2f6      	uxtb	r6, r6
 80215cc:	b2d2      	uxtb	r2, r2
 80215ce:	122c      	asrs	r4, r5, #8
 80215d0:	fb12 f207 	smulbb	r2, r2, r7
 80215d4:	fb16 f607 	smulbb	r6, r6, r7
 80215d8:	b2db      	uxtb	r3, r3
 80215da:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80215de:	fb04 0403 	mla	r4, r4, r3, r0
 80215e2:	10e8      	asrs	r0, r5, #3
 80215e4:	00ed      	lsls	r5, r5, #3
 80215e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80215ea:	b2ed      	uxtb	r5, r5
 80215ec:	fb00 6603 	mla	r6, r0, r3, r6
 80215f0:	fb05 2303 	mla	r3, r5, r3, r2
 80215f4:	b2a4      	uxth	r4, r4
 80215f6:	b29a      	uxth	r2, r3
 80215f8:	1c63      	adds	r3, r4, #1
 80215fa:	b2b0      	uxth	r0, r6
 80215fc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021600:	1c53      	adds	r3, r2, #1
 8021602:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021606:	1c42      	adds	r2, r0, #1
 8021608:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802160c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021610:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021614:	0940      	lsrs	r0, r0, #5
 8021616:	4323      	orrs	r3, r4
 8021618:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802161c:	4303      	orrs	r3, r0
 802161e:	800b      	strh	r3, [r1, #0]
 8021620:	e7b5      	b.n	802158e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8021622:	bf00      	nop
 8021624:	20020094 	.word	0x20020094
 8021628:	00fff800 	.word	0x00fff800

0802162c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021630:	b097      	sub	sp, #92	; 0x5c
 8021632:	9214      	str	r2, [sp, #80]	; 0x50
 8021634:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021636:	9015      	str	r0, [sp, #84]	; 0x54
 8021638:	9309      	str	r3, [sp, #36]	; 0x24
 802163a:	6850      	ldr	r0, [r2, #4]
 802163c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021640:	910d      	str	r1, [sp, #52]	; 0x34
 8021642:	930f      	str	r3, [sp, #60]	; 0x3c
 8021644:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021648:	fb00 1303 	mla	r3, r0, r3, r1
 802164c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8021650:	6812      	ldr	r2, [r2, #0]
 8021652:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021656:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021658:	689b      	ldr	r3, [r3, #8]
 802165a:	3301      	adds	r3, #1
 802165c:	f023 0301 	bic.w	r3, r3, #1
 8021660:	930a      	str	r3, [sp, #40]	; 0x28
 8021662:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021664:	681f      	ldr	r7, [r3, #0]
 8021666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021668:	2b00      	cmp	r3, #0
 802166a:	dc03      	bgt.n	8021674 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802166c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802166e:	2b00      	cmp	r3, #0
 8021670:	f340 8287 	ble.w	8021b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8021674:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021676:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802167a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802167e:	1e48      	subs	r0, r1, #1
 8021680:	f102 3cff 	add.w	ip, r2, #4294967295
 8021684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021686:	2b00      	cmp	r3, #0
 8021688:	f340 80c3 	ble.w	8021812 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802168c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021690:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021694:	d406      	bmi.n	80216a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021696:	4586      	cmp	lr, r0
 8021698:	da04      	bge.n	80216a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802169a:	2b00      	cmp	r3, #0
 802169c:	db02      	blt.n	80216a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802169e:	4563      	cmp	r3, ip
 80216a0:	f2c0 80b8 	blt.w	8021814 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80216a4:	f11e 0e01 	adds.w	lr, lr, #1
 80216a8:	f100 80a9 	bmi.w	80217fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80216ac:	4571      	cmp	r1, lr
 80216ae:	f2c0 80a6 	blt.w	80217fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80216b2:	3301      	adds	r3, #1
 80216b4:	f100 80a3 	bmi.w	80217fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80216b8:	429a      	cmp	r2, r3
 80216ba:	f2c0 80a0 	blt.w	80217fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80216be:	46c8      	mov	r8, r9
 80216c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216c2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80216c6:	930e      	str	r3, [sp, #56]	; 0x38
 80216c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	f340 80c2 	ble.w	8021854 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80216d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80216d2:	1430      	asrs	r0, r6, #16
 80216d4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80216d8:	1423      	asrs	r3, r4, #16
 80216da:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80216de:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80216e2:	f100 814d 	bmi.w	8021980 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80216e6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80216ea:	455b      	cmp	r3, fp
 80216ec:	f280 8148 	bge.w	8021980 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80216f0:	2800      	cmp	r0, #0
 80216f2:	f2c0 8145 	blt.w	8021980 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80216f6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80216fa:	4558      	cmp	r0, fp
 80216fc:	f280 8140 	bge.w	8021980 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8021700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021702:	fb00 3305 	mla	r3, r0, r5, r3
 8021706:	0858      	lsrs	r0, r3, #1
 8021708:	f817 c000 	ldrb.w	ip, [r7, r0]
 802170c:	07dd      	lsls	r5, r3, #31
 802170e:	bf54      	ite	pl
 8021710:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021714:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021718:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802171c:	fa5f fc8c 	uxtb.w	ip, ip
 8021720:	2a00      	cmp	r2, #0
 8021722:	f000 80db 	beq.w	80218dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021726:	1c58      	adds	r0, r3, #1
 8021728:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802172c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021730:	07c0      	lsls	r0, r0, #31
 8021732:	bf54      	ite	pl
 8021734:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021738:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802173c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021740:	fa5f f08e 	uxtb.w	r0, lr
 8021744:	9010      	str	r0, [sp, #64]	; 0x40
 8021746:	b1c9      	cbz	r1, 802177c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8021748:	4453      	add	r3, sl
 802174a:	0858      	lsrs	r0, r3, #1
 802174c:	5c38      	ldrb	r0, [r7, r0]
 802174e:	07dd      	lsls	r5, r3, #31
 8021750:	bf54      	ite	pl
 8021752:	f000 000f 	andpl.w	r0, r0, #15
 8021756:	1100      	asrmi	r0, r0, #4
 8021758:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802175c:	3301      	adds	r3, #1
 802175e:	b2c0      	uxtb	r0, r0
 8021760:	900b      	str	r0, [sp, #44]	; 0x2c
 8021762:	0858      	lsrs	r0, r3, #1
 8021764:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021768:	07dd      	lsls	r5, r3, #31
 802176a:	bf54      	ite	pl
 802176c:	f00e 030f 	andpl.w	r3, lr, #15
 8021770:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021774:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021778:	b2db      	uxtb	r3, r3
 802177a:	9311      	str	r3, [sp, #68]	; 0x44
 802177c:	b292      	uxth	r2, r2
 802177e:	b289      	uxth	r1, r1
 8021780:	fb02 f301 	mul.w	r3, r2, r1
 8021784:	0112      	lsls	r2, r2, #4
 8021786:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802178a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802178c:	1ad2      	subs	r2, r2, r3
 802178e:	b292      	uxth	r2, r2
 8021790:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021794:	436a      	muls	r2, r5
 8021796:	b289      	uxth	r1, r1
 8021798:	1a40      	subs	r0, r0, r1
 802179a:	b280      	uxth	r0, r0
 802179c:	fb0c 2c00 	mla	ip, ip, r0, r2
 80217a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80217a2:	fb01 c102 	mla	r1, r1, r2, ip
 80217a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80217a8:	fb03 1302 	mla	r3, r3, r2, r1
 80217ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80217b0:	b1db      	cbz	r3, 80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80217b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217b4:	4353      	muls	r3, r2
 80217b6:	1c5a      	adds	r2, r3, #1
 80217b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217bc:	4ac6      	ldr	r2, [pc, #792]	; (8021ad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80217be:	121b      	asrs	r3, r3, #8
 80217c0:	6812      	ldr	r2, [r2, #0]
 80217c2:	2bff      	cmp	r3, #255	; 0xff
 80217c4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80217c8:	f040 8099 	bne.w	80218fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80217cc:	0953      	lsrs	r3, r2, #5
 80217ce:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80217d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80217d6:	f02c 0c07 	bic.w	ip, ip, #7
 80217da:	ea43 0c0c 	orr.w	ip, r3, ip
 80217de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80217e2:	ea4c 0202 	orr.w	r2, ip, r2
 80217e6:	f8a8 2000 	strh.w	r2, [r8]
 80217ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80217ec:	f108 0802 	add.w	r8, r8, #2
 80217f0:	441c      	add	r4, r3
 80217f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217f4:	441e      	add	r6, r3
 80217f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217f8:	3b01      	subs	r3, #1
 80217fa:	930e      	str	r3, [sp, #56]	; 0x38
 80217fc:	e764      	b.n	80216c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80217fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021800:	f109 0902 	add.w	r9, r9, #2
 8021804:	441c      	add	r4, r3
 8021806:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021808:	441e      	add	r6, r3
 802180a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802180c:	3b01      	subs	r3, #1
 802180e:	9309      	str	r3, [sp, #36]	; 0x24
 8021810:	e738      	b.n	8021684 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021812:	d024      	beq.n	802185e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021816:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021818:	3b01      	subs	r3, #1
 802181a:	fb00 4003 	mla	r0, r0, r3, r4
 802181e:	1400      	asrs	r0, r0, #16
 8021820:	f53f af4d 	bmi.w	80216be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021824:	3901      	subs	r1, #1
 8021826:	4288      	cmp	r0, r1
 8021828:	f6bf af49 	bge.w	80216be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802182c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802182e:	fb01 6303 	mla	r3, r1, r3, r6
 8021832:	141b      	asrs	r3, r3, #16
 8021834:	f53f af43 	bmi.w	80216be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021838:	3a01      	subs	r2, #1
 802183a:	4293      	cmp	r3, r2
 802183c:	f6bf af3f 	bge.w	80216be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021840:	46c8      	mov	r8, r9
 8021842:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021846:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802184a:	930e      	str	r3, [sp, #56]	; 0x38
 802184c:	f1bb 0f00 	cmp.w	fp, #0
 8021850:	f300 80b7 	bgt.w	80219c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8021854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021856:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802185a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802185e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021860:	2b00      	cmp	r3, #0
 8021862:	f340 818e 	ble.w	8021b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8021866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802186a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802186e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021872:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021876:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802187a:	eef0 6a62 	vmov.f32	s13, s5
 802187e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021882:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021886:	ee61 7a27 	vmul.f32	s15, s2, s15
 802188a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802188e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021892:	ee16 4a90 	vmov	r4, s13
 8021896:	eef0 6a43 	vmov.f32	s13, s6
 802189a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802189e:	ee12 2a90 	vmov	r2, s5
 80218a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80218a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80218b0:	ee13 2a10 	vmov	r2, s6
 80218b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80218b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80218b8:	ee16 6a90 	vmov	r6, s13
 80218bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80218c0:	9324      	str	r3, [sp, #144]	; 0x90
 80218c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80218c6:	3b01      	subs	r3, #1
 80218c8:	930d      	str	r3, [sp, #52]	; 0x34
 80218ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80218cc:	bf08      	it	eq
 80218ce:	4613      	moveq	r3, r2
 80218d0:	eeb0 3a67 	vmov.f32	s6, s15
 80218d4:	9309      	str	r3, [sp, #36]	; 0x24
 80218d6:	eef0 2a47 	vmov.f32	s5, s14
 80218da:	e6c4      	b.n	8021666 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80218dc:	2900      	cmp	r1, #0
 80218de:	f43f af4d 	beq.w	802177c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80218e2:	eb0a 0003 	add.w	r0, sl, r3
 80218e6:	0843      	lsrs	r3, r0, #1
 80218e8:	5cfb      	ldrb	r3, [r7, r3]
 80218ea:	07c0      	lsls	r0, r0, #31
 80218ec:	bf54      	ite	pl
 80218ee:	f003 030f 	andpl.w	r3, r3, #15
 80218f2:	111b      	asrmi	r3, r3, #4
 80218f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80218f8:	b2db      	uxtb	r3, r3
 80218fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80218fc:	e73e      	b.n	802177c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80218fe:	fa1f fb83 	uxth.w	fp, r3
 8021902:	43db      	mvns	r3, r3
 8021904:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021908:	f8b8 e000 	ldrh.w	lr, [r8]
 802190c:	fb11 f10b 	smulbb	r1, r1, fp
 8021910:	fa5f fc8c 	uxtb.w	ip, ip
 8021914:	b2d2      	uxtb	r2, r2
 8021916:	ea4f 202e 	mov.w	r0, lr, asr #8
 802191a:	fb1c fc0b 	smulbb	ip, ip, fp
 802191e:	fb12 fb0b 	smulbb	fp, r2, fp
 8021922:	b2db      	uxtb	r3, r3
 8021924:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021928:	fb00 1003 	mla	r0, r0, r3, r1
 802192c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021930:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021934:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021938:	fa5f fe8e 	uxtb.w	lr, lr
 802193c:	fb01 cc03 	mla	ip, r1, r3, ip
 8021940:	fb0e bb03 	mla	fp, lr, r3, fp
 8021944:	b280      	uxth	r0, r0
 8021946:	1c43      	adds	r3, r0, #1
 8021948:	fa1f fc8c 	uxth.w	ip, ip
 802194c:	fa1f fb8b 	uxth.w	fp, fp
 8021950:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021954:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8021958:	f10c 0101 	add.w	r1, ip, #1
 802195c:	f10b 0001 	add.w	r0, fp, #1
 8021960:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021964:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021968:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802196c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021970:	4318      	orrs	r0, r3
 8021972:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021976:	ea40 000c 	orr.w	r0, r0, ip
 802197a:	f8a8 0000 	strh.w	r0, [r8]
 802197e:	e734      	b.n	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021980:	f113 0b01 	adds.w	fp, r3, #1
 8021984:	f53f af31 	bmi.w	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021988:	45dc      	cmp	ip, fp
 802198a:	f6ff af2e 	blt.w	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802198e:	f110 0b01 	adds.w	fp, r0, #1
 8021992:	f53f af2a 	bmi.w	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021996:	45de      	cmp	lr, fp
 8021998:	f6ff af27 	blt.w	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802199c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802199e:	9302      	str	r3, [sp, #8]
 80219a0:	fa0f f38e 	sxth.w	r3, lr
 80219a4:	9301      	str	r3, [sp, #4]
 80219a6:	fa0f f38c 	sxth.w	r3, ip
 80219aa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80219ae:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80219b2:	9300      	str	r3, [sp, #0]
 80219b4:	463a      	mov	r2, r7
 80219b6:	4653      	mov	r3, sl
 80219b8:	4641      	mov	r1, r8
 80219ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80219bc:	f7ff fd4e 	bl	802145c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80219c0:	e713      	b.n	80217ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80219c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80219c4:	1422      	asrs	r2, r4, #16
 80219c6:	1433      	asrs	r3, r6, #16
 80219c8:	fb05 2303 	mla	r3, r5, r3, r2
 80219cc:	085a      	lsrs	r2, r3, #1
 80219ce:	5cba      	ldrb	r2, [r7, r2]
 80219d0:	07dd      	lsls	r5, r3, #31
 80219d2:	bf54      	ite	pl
 80219d4:	f002 020f 	andpl.w	r2, r2, #15
 80219d8:	1112      	asrmi	r2, r2, #4
 80219da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80219de:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80219e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80219e6:	b2d2      	uxtb	r2, r2
 80219e8:	2900      	cmp	r1, #0
 80219ea:	d077      	beq.n	8021adc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80219ec:	f103 0e01 	add.w	lr, r3, #1
 80219f0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80219f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80219f8:	f01e 0f01 	tst.w	lr, #1
 80219fc:	bf0c      	ite	eq
 80219fe:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021a02:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021a06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a0a:	fa5f f58c 	uxtb.w	r5, ip
 8021a0e:	9512      	str	r5, [sp, #72]	; 0x48
 8021a10:	b300      	cbz	r0, 8021a54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021a12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021a14:	442b      	add	r3, r5
 8021a16:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021a1a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021a1e:	07dd      	lsls	r5, r3, #31
 8021a20:	bf54      	ite	pl
 8021a22:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021a26:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021a2a:	3301      	adds	r3, #1
 8021a2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a30:	fa5f f58c 	uxtb.w	r5, ip
 8021a34:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021a38:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021a3c:	950c      	str	r5, [sp, #48]	; 0x30
 8021a3e:	07dd      	lsls	r5, r3, #31
 8021a40:	bf54      	ite	pl
 8021a42:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021a46:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021a4a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a4e:	fa5f f38c 	uxtb.w	r3, ip
 8021a52:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a54:	b289      	uxth	r1, r1
 8021a56:	b280      	uxth	r0, r0
 8021a58:	fb01 f300 	mul.w	r3, r1, r0
 8021a5c:	0109      	lsls	r1, r1, #4
 8021a5e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021a62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021a64:	1ac9      	subs	r1, r1, r3
 8021a66:	b289      	uxth	r1, r1
 8021a68:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021a6c:	4369      	muls	r1, r5
 8021a6e:	b280      	uxth	r0, r0
 8021a70:	ebac 0c00 	sub.w	ip, ip, r0
 8021a74:	fa1f fc8c 	uxth.w	ip, ip
 8021a78:	fb02 120c 	mla	r2, r2, ip, r1
 8021a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a7e:	fb00 2001 	mla	r0, r0, r1, r2
 8021a82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a84:	fb03 0302 	mla	r3, r3, r2, r0
 8021a88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021a8c:	b1d3      	cbz	r3, 8021ac4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a90:	4353      	muls	r3, r2
 8021a92:	1c5a      	adds	r2, r3, #1
 8021a94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a98:	4a0f      	ldr	r2, [pc, #60]	; (8021ad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8021a9a:	121b      	asrs	r3, r3, #8
 8021a9c:	6812      	ldr	r2, [r2, #0]
 8021a9e:	2bff      	cmp	r3, #255	; 0xff
 8021aa0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021aa4:	d12e      	bne.n	8021b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8021aa6:	0953      	lsrs	r3, r2, #5
 8021aa8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021aac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ab0:	f02c 0c07 	bic.w	ip, ip, #7
 8021ab4:	ea43 0c0c 	orr.w	ip, r3, ip
 8021ab8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021abc:	ea4c 0202 	orr.w	r2, ip, r2
 8021ac0:	f8a8 2000 	strh.w	r2, [r8]
 8021ac4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021ac6:	f108 0802 	add.w	r8, r8, #2
 8021aca:	441c      	add	r4, r3
 8021acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ace:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ad2:	441e      	add	r6, r3
 8021ad4:	e6ba      	b.n	802184c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021ad6:	bf00      	nop
 8021ad8:	20020094 	.word	0x20020094
 8021adc:	2800      	cmp	r0, #0
 8021ade:	d0b9      	beq.n	8021a54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021ae0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021ae2:	442b      	add	r3, r5
 8021ae4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021ae8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021aec:	07db      	lsls	r3, r3, #31
 8021aee:	bf54      	ite	pl
 8021af0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021af4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021af8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021afc:	fa5f f38c 	uxtb.w	r3, ip
 8021b00:	930c      	str	r3, [sp, #48]	; 0x30
 8021b02:	e7a7      	b.n	8021a54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021b04:	fa1f fa83 	uxth.w	sl, r3
 8021b08:	43db      	mvns	r3, r3
 8021b0a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021b0e:	f8b8 e000 	ldrh.w	lr, [r8]
 8021b12:	fb11 f10a 	smulbb	r1, r1, sl
 8021b16:	b2d2      	uxtb	r2, r2
 8021b18:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021b1c:	fb12 f20a 	smulbb	r2, r2, sl
 8021b20:	b2db      	uxtb	r3, r3
 8021b22:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021b26:	fb00 1003 	mla	r0, r0, r3, r1
 8021b2a:	fa5f fc8c 	uxtb.w	ip, ip
 8021b2e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021b32:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021b36:	fb1c fc0a 	smulbb	ip, ip, sl
 8021b3a:	fa5f fe8e 	uxtb.w	lr, lr
 8021b3e:	fb0e 2203 	mla	r2, lr, r3, r2
 8021b42:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021b46:	fb01 cc03 	mla	ip, r1, r3, ip
 8021b4a:	b280      	uxth	r0, r0
 8021b4c:	b292      	uxth	r2, r2
 8021b4e:	1c43      	adds	r3, r0, #1
 8021b50:	1c51      	adds	r1, r2, #1
 8021b52:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021b56:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021b5a:	fa1f fc8c 	uxth.w	ip, ip
 8021b5e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021b62:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021b66:	4308      	orrs	r0, r1
 8021b68:	f10c 0101 	add.w	r1, ip, #1
 8021b6c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021b70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021b74:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021b78:	ea40 000c 	orr.w	r0, r0, ip
 8021b7c:	f8a8 0000 	strh.w	r0, [r8]
 8021b80:	e7a0      	b.n	8021ac4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8021b82:	b017      	add	sp, #92	; 0x5c
 8021b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8021b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b8c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8021b90:	2d00      	cmp	r5, #0
 8021b92:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021b96:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021b9a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021b9e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021ba2:	fb05 0e03 	mla	lr, r5, r3, r0
 8021ba6:	f2c0 80b0 	blt.w	8021d0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021baa:	45a9      	cmp	r9, r5
 8021bac:	f340 80ad 	ble.w	8021d0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021bb0:	2800      	cmp	r0, #0
 8021bb2:	f2c0 80a8 	blt.w	8021d06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021bb6:	4580      	cmp	r8, r0
 8021bb8:	f340 80a5 	ble.w	8021d06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021bbc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021bc0:	5d16      	ldrb	r6, [r2, r4]
 8021bc2:	f01e 0f01 	tst.w	lr, #1
 8021bc6:	bf0c      	ite	eq
 8021bc8:	f006 060f 	andeq.w	r6, r6, #15
 8021bcc:	1136      	asrne	r6, r6, #4
 8021bce:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021bd2:	b2f6      	uxtb	r6, r6
 8021bd4:	1c44      	adds	r4, r0, #1
 8021bd6:	f100 809b 	bmi.w	8021d10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021bda:	45a0      	cmp	r8, r4
 8021bdc:	f340 8098 	ble.w	8021d10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021be0:	2f00      	cmp	r7, #0
 8021be2:	f000 8097 	beq.w	8021d14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8021be6:	f10e 0a01 	add.w	sl, lr, #1
 8021bea:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021bee:	5d14      	ldrb	r4, [r2, r4]
 8021bf0:	f01a 0f01 	tst.w	sl, #1
 8021bf4:	bf0c      	ite	eq
 8021bf6:	f004 040f 	andeq.w	r4, r4, #15
 8021bfa:	1124      	asrne	r4, r4, #4
 8021bfc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021c00:	b2e4      	uxtb	r4, r4
 8021c02:	3501      	adds	r5, #1
 8021c04:	f100 808a 	bmi.w	8021d1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021c08:	45a9      	cmp	r9, r5
 8021c0a:	f340 8087 	ble.w	8021d1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021c0e:	f1bc 0f00 	cmp.w	ip, #0
 8021c12:	f000 8086 	beq.w	8021d22 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8021c16:	2800      	cmp	r0, #0
 8021c18:	db7e      	blt.n	8021d18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021c1a:	4580      	cmp	r8, r0
 8021c1c:	dd7c      	ble.n	8021d18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021c1e:	eb03 090e 	add.w	r9, r3, lr
 8021c22:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8021c26:	5d55      	ldrb	r5, [r2, r5]
 8021c28:	f019 0f01 	tst.w	r9, #1
 8021c2c:	bf0c      	ite	eq
 8021c2e:	f005 050f 	andeq.w	r5, r5, #15
 8021c32:	112d      	asrne	r5, r5, #4
 8021c34:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021c38:	b2ed      	uxtb	r5, r5
 8021c3a:	3001      	adds	r0, #1
 8021c3c:	d474      	bmi.n	8021d28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021c3e:	4580      	cmp	r8, r0
 8021c40:	dd72      	ble.n	8021d28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021c42:	2f00      	cmp	r7, #0
 8021c44:	d072      	beq.n	8021d2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8021c46:	3301      	adds	r3, #1
 8021c48:	449e      	add	lr, r3
 8021c4a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021c4e:	5cd0      	ldrb	r0, [r2, r3]
 8021c50:	f01e 0f01 	tst.w	lr, #1
 8021c54:	bf0c      	ite	eq
 8021c56:	f000 000f 	andeq.w	r0, r0, #15
 8021c5a:	1100      	asrne	r0, r0, #4
 8021c5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021c60:	b2c3      	uxtb	r3, r0
 8021c62:	b2ba      	uxth	r2, r7
 8021c64:	fa1f fc8c 	uxth.w	ip, ip
 8021c68:	fb02 f00c 	mul.w	r0, r2, ip
 8021c6c:	0112      	lsls	r2, r2, #4
 8021c6e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021c72:	1a12      	subs	r2, r2, r0
 8021c74:	b292      	uxth	r2, r2
 8021c76:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021c7a:	4362      	muls	r2, r4
 8021c7c:	fa1f fc8c 	uxth.w	ip, ip
 8021c80:	eba7 070c 	sub.w	r7, r7, ip
 8021c84:	b2bf      	uxth	r7, r7
 8021c86:	fb06 2207 	mla	r2, r6, r7, r2
 8021c8a:	fb0c 2505 	mla	r5, ip, r5, r2
 8021c8e:	fb00 5303 	mla	r3, r0, r3, r5
 8021c92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c96:	b3a3      	cbz	r3, 8021d02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8021c98:	4a25      	ldr	r2, [pc, #148]	; (8021d30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8021c9a:	880e      	ldrh	r6, [r1, #0]
 8021c9c:	6815      	ldr	r5, [r2, #0]
 8021c9e:	b29a      	uxth	r2, r3
 8021ca0:	43db      	mvns	r3, r3
 8021ca2:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8021ca6:	fb10 f002 	smulbb	r0, r0, r2
 8021caa:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8021cae:	b2ed      	uxtb	r5, r5
 8021cb0:	1234      	asrs	r4, r6, #8
 8021cb2:	fb17 f702 	smulbb	r7, r7, r2
 8021cb6:	fb15 f202 	smulbb	r2, r5, r2
 8021cba:	b2db      	uxtb	r3, r3
 8021cbc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021cc0:	fb04 0403 	mla	r4, r4, r3, r0
 8021cc4:	10f0      	asrs	r0, r6, #3
 8021cc6:	00f6      	lsls	r6, r6, #3
 8021cc8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021ccc:	b2f6      	uxtb	r6, r6
 8021cce:	fb00 7003 	mla	r0, r0, r3, r7
 8021cd2:	fb06 2303 	mla	r3, r6, r3, r2
 8021cd6:	b2a4      	uxth	r4, r4
 8021cd8:	b29a      	uxth	r2, r3
 8021cda:	1c63      	adds	r3, r4, #1
 8021cdc:	b280      	uxth	r0, r0
 8021cde:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021ce2:	1c53      	adds	r3, r2, #1
 8021ce4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021ce8:	1c42      	adds	r2, r0, #1
 8021cea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021cee:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021cf2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021cf6:	0940      	lsrs	r0, r0, #5
 8021cf8:	4323      	orrs	r3, r4
 8021cfa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cfe:	4303      	orrs	r3, r0
 8021d00:	800b      	strh	r3, [r1, #0]
 8021d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d06:	2600      	movs	r6, #0
 8021d08:	e764      	b.n	8021bd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8021d0a:	2400      	movs	r4, #0
 8021d0c:	4626      	mov	r6, r4
 8021d0e:	e778      	b.n	8021c02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021d10:	2400      	movs	r4, #0
 8021d12:	e776      	b.n	8021c02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021d14:	463c      	mov	r4, r7
 8021d16:	e774      	b.n	8021c02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021d18:	2500      	movs	r5, #0
 8021d1a:	e78e      	b.n	8021c3a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8021d1c:	2300      	movs	r3, #0
 8021d1e:	461d      	mov	r5, r3
 8021d20:	e79f      	b.n	8021c62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021d22:	4663      	mov	r3, ip
 8021d24:	4665      	mov	r5, ip
 8021d26:	e79c      	b.n	8021c62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021d28:	2300      	movs	r3, #0
 8021d2a:	e79a      	b.n	8021c62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021d2c:	463b      	mov	r3, r7
 8021d2e:	e798      	b.n	8021c62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021d30:	20020094 	.word	0x20020094

08021d34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d38:	b093      	sub	sp, #76	; 0x4c
 8021d3a:	920c      	str	r2, [sp, #48]	; 0x30
 8021d3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021d3e:	9011      	str	r0, [sp, #68]	; 0x44
 8021d40:	6850      	ldr	r0, [r2, #4]
 8021d42:	9107      	str	r1, [sp, #28]
 8021d44:	461d      	mov	r5, r3
 8021d46:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021d4a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8021d4e:	fb00 1303 	mla	r3, r0, r3, r1
 8021d52:	6812      	ldr	r2, [r2, #0]
 8021d54:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d5a:	689b      	ldr	r3, [r3, #8]
 8021d5c:	3301      	adds	r3, #1
 8021d5e:	f023 0301 	bic.w	r3, r3, #1
 8021d62:	9306      	str	r3, [sp, #24]
 8021d64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d66:	681f      	ldr	r7, [r3, #0]
 8021d68:	9b07      	ldr	r3, [sp, #28]
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	dc03      	bgt.n	8021d76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	f340 8265 	ble.w	8022240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8021d76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d7c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d80:	1e48      	subs	r0, r1, #1
 8021d82:	f102 3cff 	add.w	ip, r2, #4294967295
 8021d86:	2d00      	cmp	r5, #0
 8021d88:	f340 80b7 	ble.w	8021efa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021d8c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021d90:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021d94:	d406      	bmi.n	8021da4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d96:	4586      	cmp	lr, r0
 8021d98:	da04      	bge.n	8021da4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	db02      	blt.n	8021da4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d9e:	4563      	cmp	r3, ip
 8021da0:	f2c0 80ac 	blt.w	8021efc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021da4:	f11e 0e01 	adds.w	lr, lr, #1
 8021da8:	f100 809f 	bmi.w	8021eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021dac:	4571      	cmp	r1, lr
 8021dae:	f2c0 809c 	blt.w	8021eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021db2:	3301      	adds	r3, #1
 8021db4:	f100 8099 	bmi.w	8021eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021db8:	429a      	cmp	r2, r3
 8021dba:	f2c0 8096 	blt.w	8021eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021dbe:	46c8      	mov	r8, r9
 8021dc0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8021dc4:	9509      	str	r5, [sp, #36]	; 0x24
 8021dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	f340 80b5 	ble.w	8021f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021dce:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021dd2:	9308      	str	r3, [sp, #32]
 8021dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021dd6:	1430      	asrs	r0, r6, #16
 8021dd8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021ddc:	1423      	asrs	r3, r4, #16
 8021dde:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021de2:	f100 813e 	bmi.w	8022062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021de6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8021dea:	455b      	cmp	r3, fp
 8021dec:	f280 8139 	bge.w	8022062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021df0:	2800      	cmp	r0, #0
 8021df2:	f2c0 8136 	blt.w	8022062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021df6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021dfa:	4558      	cmp	r0, fp
 8021dfc:	f280 8131 	bge.w	8022062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021e00:	9a06      	ldr	r2, [sp, #24]
 8021e02:	fb00 3302 	mla	r3, r0, r2, r3
 8021e06:	0858      	lsrs	r0, r3, #1
 8021e08:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021e0c:	07da      	lsls	r2, r3, #31
 8021e0e:	bf54      	ite	pl
 8021e10:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021e14:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021e18:	9a08      	ldr	r2, [sp, #32]
 8021e1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021e1e:	fa5f fc8c 	uxtb.w	ip, ip
 8021e22:	2a00      	cmp	r2, #0
 8021e24:	f000 80cb 	beq.w	8021fbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021e28:	1c58      	adds	r0, r3, #1
 8021e2a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021e2e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021e32:	07c0      	lsls	r0, r0, #31
 8021e34:	bf54      	ite	pl
 8021e36:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021e3a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021e3e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021e42:	fa5f fe8e 	uxtb.w	lr, lr
 8021e46:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8021e4a:	b1b9      	cbz	r1, 8021e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021e4c:	4453      	add	r3, sl
 8021e4e:	0858      	lsrs	r0, r3, #1
 8021e50:	5c38      	ldrb	r0, [r7, r0]
 8021e52:	07da      	lsls	r2, r3, #31
 8021e54:	bf54      	ite	pl
 8021e56:	f000 000f 	andpl.w	r0, r0, #15
 8021e5a:	1100      	asrmi	r0, r0, #4
 8021e5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021e60:	b2c0      	uxtb	r0, r0
 8021e62:	900a      	str	r0, [sp, #40]	; 0x28
 8021e64:	1c58      	adds	r0, r3, #1
 8021e66:	0843      	lsrs	r3, r0, #1
 8021e68:	5cfb      	ldrb	r3, [r7, r3]
 8021e6a:	07c2      	lsls	r2, r0, #31
 8021e6c:	bf54      	ite	pl
 8021e6e:	f003 030f 	andpl.w	r3, r3, #15
 8021e72:	111b      	asrmi	r3, r3, #4
 8021e74:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021e78:	b2db      	uxtb	r3, r3
 8021e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8021e7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021e80:	b289      	uxth	r1, r1
 8021e82:	fb02 f301 	mul.w	r3, r2, r1
 8021e86:	0112      	lsls	r2, r2, #4
 8021e88:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021e8c:	b289      	uxth	r1, r1
 8021e8e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8021e92:	1a40      	subs	r0, r0, r1
 8021e94:	fa1f fe80 	uxth.w	lr, r0
 8021e98:	1ad2      	subs	r2, r2, r3
 8021e9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021e9c:	b292      	uxth	r2, r2
 8021e9e:	4342      	muls	r2, r0
 8021ea0:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ea6:	fb01 c102 	mla	r1, r1, r2, ip
 8021eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021eac:	fb03 1302 	mla	r3, r3, r2, r1
 8021eb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021eb4:	2bff      	cmp	r3, #255	; 0xff
 8021eb6:	f040 8093 	bne.w	8021fe0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8021eba:	4bbe      	ldr	r3, [pc, #760]	; (80221b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8021ebc:	681a      	ldr	r2, [r3, #0]
 8021ebe:	4bbe      	ldr	r3, [pc, #760]	; (80221b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8021ec0:	0951      	lsrs	r1, r2, #5
 8021ec2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8021ec6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021eca:	430b      	orrs	r3, r1
 8021ecc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021ed0:	4313      	orrs	r3, r2
 8021ed2:	f8a8 3000 	strh.w	r3, [r8]
 8021ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021ed8:	f108 0802 	add.w	r8, r8, #2
 8021edc:	441c      	add	r4, r3
 8021ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ee0:	441e      	add	r6, r3
 8021ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ee4:	3b01      	subs	r3, #1
 8021ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8021ee8:	e76d      	b.n	8021dc6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021eec:	3d01      	subs	r5, #1
 8021eee:	441c      	add	r4, r3
 8021ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ef2:	f109 0902 	add.w	r9, r9, #2
 8021ef6:	441e      	add	r6, r3
 8021ef8:	e745      	b.n	8021d86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021efa:	d021      	beq.n	8021f40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021efc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021efe:	1e6b      	subs	r3, r5, #1
 8021f00:	fb00 4003 	mla	r0, r0, r3, r4
 8021f04:	1400      	asrs	r0, r0, #16
 8021f06:	f53f af5a 	bmi.w	8021dbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f0a:	3901      	subs	r1, #1
 8021f0c:	4288      	cmp	r0, r1
 8021f0e:	f6bf af56 	bge.w	8021dbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f12:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021f14:	fb01 6303 	mla	r3, r1, r3, r6
 8021f18:	141b      	asrs	r3, r3, #16
 8021f1a:	f53f af50 	bmi.w	8021dbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f1e:	3a01      	subs	r2, #1
 8021f20:	4293      	cmp	r3, r2
 8021f22:	f6bf af4c 	bge.w	8021dbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f26:	46a8      	mov	r8, r5
 8021f28:	46ce      	mov	lr, r9
 8021f2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8021f2e:	9308      	str	r3, [sp, #32]
 8021f30:	f1b8 0f00 	cmp.w	r8, #0
 8021f34:	f300 80b5 	bgt.w	80220a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021f38:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021f3c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021f40:	9b07      	ldr	r3, [sp, #28]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	f340 817c 	ble.w	8022240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8021f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f5c:	eef0 6a62 	vmov.f32	s13, s5
 8021f60:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f74:	ee16 4a90 	vmov	r4, s13
 8021f78:	eef0 6a43 	vmov.f32	s13, s6
 8021f7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f80:	ee12 2a90 	vmov	r2, s5
 8021f84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021f8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f92:	ee13 2a10 	vmov	r2, s6
 8021f96:	931f      	str	r3, [sp, #124]	; 0x7c
 8021f98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021f9a:	ee16 6a90 	vmov	r6, s13
 8021f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fa2:	9320      	str	r3, [sp, #128]	; 0x80
 8021fa4:	9b07      	ldr	r3, [sp, #28]
 8021fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021fa8:	3b01      	subs	r3, #1
 8021faa:	9307      	str	r3, [sp, #28]
 8021fac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021fae:	bf0c      	ite	eq
 8021fb0:	4615      	moveq	r5, r2
 8021fb2:	461d      	movne	r5, r3
 8021fb4:	eeb0 3a67 	vmov.f32	s6, s15
 8021fb8:	eef0 2a47 	vmov.f32	s5, s14
 8021fbc:	e6d4      	b.n	8021d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8021fbe:	2900      	cmp	r1, #0
 8021fc0:	f43f af5c 	beq.w	8021e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021fc4:	eb0a 0003 	add.w	r0, sl, r3
 8021fc8:	0843      	lsrs	r3, r0, #1
 8021fca:	5cfb      	ldrb	r3, [r7, r3]
 8021fcc:	07c0      	lsls	r0, r0, #31
 8021fce:	bf54      	ite	pl
 8021fd0:	f003 030f 	andpl.w	r3, r3, #15
 8021fd4:	111b      	asrmi	r3, r3, #4
 8021fd6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021fda:	b2db      	uxtb	r3, r3
 8021fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8021fde:	e74d      	b.n	8021e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	f43f af78 	beq.w	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8021fe6:	fa1f fe83 	uxth.w	lr, r3
 8021fea:	43db      	mvns	r3, r3
 8021fec:	4a71      	ldr	r2, [pc, #452]	; (80221b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8021fee:	f8b8 c000 	ldrh.w	ip, [r8]
 8021ff2:	6810      	ldr	r0, [r2, #0]
 8021ff4:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021ff8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021ffc:	fb12 f20e 	smulbb	r2, r2, lr
 8022000:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022004:	b2c0      	uxtb	r0, r0
 8022006:	fb1b fb0e 	smulbb	fp, fp, lr
 802200a:	fb10 fe0e 	smulbb	lr, r0, lr
 802200e:	b2db      	uxtb	r3, r3
 8022010:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022014:	fb01 2103 	mla	r1, r1, r3, r2
 8022018:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802201c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022020:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022024:	fa5f fc8c 	uxtb.w	ip, ip
 8022028:	fb02 b203 	mla	r2, r2, r3, fp
 802202c:	fb0c e303 	mla	r3, ip, r3, lr
 8022030:	b289      	uxth	r1, r1
 8022032:	1c48      	adds	r0, r1, #1
 8022034:	b292      	uxth	r2, r2
 8022036:	b29b      	uxth	r3, r3
 8022038:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802203c:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8022040:	f102 0b01 	add.w	fp, r2, #1
 8022044:	1c59      	adds	r1, r3, #1
 8022046:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802204a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802204e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022052:	0952      	lsrs	r2, r2, #5
 8022054:	4301      	orrs	r1, r0
 8022056:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802205a:	4311      	orrs	r1, r2
 802205c:	f8a8 1000 	strh.w	r1, [r8]
 8022060:	e739      	b.n	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022062:	f113 0b01 	adds.w	fp, r3, #1
 8022066:	f53f af36 	bmi.w	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802206a:	45dc      	cmp	ip, fp
 802206c:	f6ff af33 	blt.w	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022070:	f110 0b01 	adds.w	fp, r0, #1
 8022074:	f53f af2f 	bmi.w	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022078:	45de      	cmp	lr, fp
 802207a:	f6ff af2c 	blt.w	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802207e:	9a08      	ldr	r2, [sp, #32]
 8022080:	9302      	str	r3, [sp, #8]
 8022082:	fa0f f38e 	sxth.w	r3, lr
 8022086:	9301      	str	r3, [sp, #4]
 8022088:	fa0f f38c 	sxth.w	r3, ip
 802208c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022090:	9105      	str	r1, [sp, #20]
 8022092:	9300      	str	r3, [sp, #0]
 8022094:	463a      	mov	r2, r7
 8022096:	4653      	mov	r3, sl
 8022098:	4641      	mov	r1, r8
 802209a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802209c:	f7ff fd74 	bl	8021b88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80220a0:	e719      	b.n	8021ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80220a2:	9906      	ldr	r1, [sp, #24]
 80220a4:	1422      	asrs	r2, r4, #16
 80220a6:	1433      	asrs	r3, r6, #16
 80220a8:	fb01 2303 	mla	r3, r1, r3, r2
 80220ac:	085a      	lsrs	r2, r3, #1
 80220ae:	5cba      	ldrb	r2, [r7, r2]
 80220b0:	07d9      	lsls	r1, r3, #31
 80220b2:	bf54      	ite	pl
 80220b4:	f002 020f 	andpl.w	r2, r2, #15
 80220b8:	1112      	asrmi	r2, r2, #4
 80220ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80220be:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80220c2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80220c6:	b2d2      	uxtb	r2, r2
 80220c8:	2800      	cmp	r0, #0
 80220ca:	d062      	beq.n	8022192 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80220cc:	f103 0a01 	add.w	sl, r3, #1
 80220d0:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80220d4:	5c79      	ldrb	r1, [r7, r1]
 80220d6:	f01a 0f01 	tst.w	sl, #1
 80220da:	bf0c      	ite	eq
 80220dc:	f001 010f 	andeq.w	r1, r1, #15
 80220e0:	1109      	asrne	r1, r1, #4
 80220e2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80220e6:	b2c9      	uxtb	r1, r1
 80220e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80220ea:	f1bc 0f00 	cmp.w	ip, #0
 80220ee:	d019      	beq.n	8022124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80220f0:	9908      	ldr	r1, [sp, #32]
 80220f2:	440b      	add	r3, r1
 80220f4:	0859      	lsrs	r1, r3, #1
 80220f6:	5c79      	ldrb	r1, [r7, r1]
 80220f8:	f013 0f01 	tst.w	r3, #1
 80220fc:	bf0c      	ite	eq
 80220fe:	f001 010f 	andeq.w	r1, r1, #15
 8022102:	1109      	asrne	r1, r1, #4
 8022104:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022108:	b2c9      	uxtb	r1, r1
 802210a:	3301      	adds	r3, #1
 802210c:	910b      	str	r1, [sp, #44]	; 0x2c
 802210e:	0859      	lsrs	r1, r3, #1
 8022110:	5c79      	ldrb	r1, [r7, r1]
 8022112:	07db      	lsls	r3, r3, #31
 8022114:	bf54      	ite	pl
 8022116:	f001 010f 	andpl.w	r1, r1, #15
 802211a:	1109      	asrmi	r1, r1, #4
 802211c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022120:	b2c9      	uxtb	r1, r1
 8022122:	9110      	str	r1, [sp, #64]	; 0x40
 8022124:	b280      	uxth	r0, r0
 8022126:	fa1f fc8c 	uxth.w	ip, ip
 802212a:	fb00 f30c 	mul.w	r3, r0, ip
 802212e:	0100      	lsls	r0, r0, #4
 8022130:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022134:	fa1f fc8c 	uxth.w	ip, ip
 8022138:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802213c:	eba1 010c 	sub.w	r1, r1, ip
 8022140:	fa1f fa81 	uxth.w	sl, r1
 8022144:	1ac0      	subs	r0, r0, r3
 8022146:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022148:	b280      	uxth	r0, r0
 802214a:	4348      	muls	r0, r1
 802214c:	fb02 020a 	mla	r2, r2, sl, r0
 8022150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022152:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022158:	fb03 c302 	mla	r3, r3, r2, ip
 802215c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022160:	2bff      	cmp	r3, #255	; 0xff
 8022162:	d12b      	bne.n	80221bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8022164:	4b13      	ldr	r3, [pc, #76]	; (80221b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8022166:	681a      	ldr	r2, [r3, #0]
 8022168:	4b13      	ldr	r3, [pc, #76]	; (80221b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802216a:	0951      	lsrs	r1, r2, #5
 802216c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022170:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022174:	430b      	orrs	r3, r1
 8022176:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802217a:	4313      	orrs	r3, r2
 802217c:	f8ae 3000 	strh.w	r3, [lr]
 8022180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022182:	f10e 0e02 	add.w	lr, lr, #2
 8022186:	441c      	add	r4, r3
 8022188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802218a:	f108 38ff 	add.w	r8, r8, #4294967295
 802218e:	441e      	add	r6, r3
 8022190:	e6ce      	b.n	8021f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022192:	f1bc 0f00 	cmp.w	ip, #0
 8022196:	d0c5      	beq.n	8022124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8022198:	9908      	ldr	r1, [sp, #32]
 802219a:	440b      	add	r3, r1
 802219c:	0859      	lsrs	r1, r3, #1
 802219e:	5c79      	ldrb	r1, [r7, r1]
 80221a0:	07db      	lsls	r3, r3, #31
 80221a2:	bf54      	ite	pl
 80221a4:	f001 010f 	andpl.w	r1, r1, #15
 80221a8:	1109      	asrmi	r1, r1, #4
 80221aa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80221ae:	b2c9      	uxtb	r1, r1
 80221b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80221b2:	e7b7      	b.n	8022124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80221b4:	20020094 	.word	0x20020094
 80221b8:	fffff800 	.word	0xfffff800
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d0df      	beq.n	8022180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80221c0:	fa1f fa83 	uxth.w	sl, r3
 80221c4:	43db      	mvns	r3, r3
 80221c6:	4a20      	ldr	r2, [pc, #128]	; (8022248 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 80221c8:	f8be c000 	ldrh.w	ip, [lr]
 80221cc:	6810      	ldr	r0, [r2, #0]
 80221ce:	ea4f 212c 	mov.w	r1, ip, asr #8
 80221d2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80221d6:	fb12 f20a 	smulbb	r2, r2, sl
 80221da:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80221de:	b2c0      	uxtb	r0, r0
 80221e0:	fb10 f00a 	smulbb	r0, r0, sl
 80221e4:	b2db      	uxtb	r3, r3
 80221e6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80221ea:	fb01 2103 	mla	r1, r1, r3, r2
 80221ee:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80221f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80221f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80221fa:	fa5f fc8c 	uxtb.w	ip, ip
 80221fe:	fb0c 0003 	mla	r0, ip, r3, r0
 8022202:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022206:	fb02 b203 	mla	r2, r2, r3, fp
 802220a:	b289      	uxth	r1, r1
 802220c:	b280      	uxth	r0, r0
 802220e:	1c4b      	adds	r3, r1, #1
 8022210:	f100 0b01 	add.w	fp, r0, #1
 8022214:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022218:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802221c:	b292      	uxth	r2, r2
 802221e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8022222:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022226:	ea4b 0101 	orr.w	r1, fp, r1
 802222a:	f102 0b01 	add.w	fp, r2, #1
 802222e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022232:	0952      	lsrs	r2, r2, #5
 8022234:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022238:	4311      	orrs	r1, r2
 802223a:	f8ae 1000 	strh.w	r1, [lr]
 802223e:	e79f      	b.n	8022180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022240:	b013      	add	sp, #76	; 0x4c
 8022242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022246:	bf00      	nop
 8022248:	20020094 	.word	0x20020094

0802224c <CRC_Lock>:
 802224c:	b530      	push	{r4, r5, lr}
 802224e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022252:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022256:	4a1e      	ldr	r2, [pc, #120]	; (80222d0 <CRC_Lock+0x84>)
 8022258:	6813      	ldr	r3, [r2, #0]
 802225a:	f023 0301 	bic.w	r3, r3, #1
 802225e:	6013      	str	r3, [r2, #0]
 8022260:	4b1c      	ldr	r3, [pc, #112]	; (80222d4 <CRC_Lock+0x88>)
 8022262:	681a      	ldr	r2, [r3, #0]
 8022264:	4022      	ands	r2, r4
 8022266:	42aa      	cmp	r2, r5
 8022268:	d005      	beq.n	8022276 <CRC_Lock+0x2a>
 802226a:	f24c 2270 	movw	r2, #49776	; 0xc270
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	4023      	ands	r3, r4
 8022272:	4293      	cmp	r3, r2
 8022274:	d124      	bne.n	80222c0 <CRC_Lock+0x74>
 8022276:	4b18      	ldr	r3, [pc, #96]	; (80222d8 <CRC_Lock+0x8c>)
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	bb0b      	cbnz	r3, 80222c0 <CRC_Lock+0x74>
 802227c:	4b17      	ldr	r3, [pc, #92]	; (80222dc <CRC_Lock+0x90>)
 802227e:	681a      	ldr	r2, [r3, #0]
 8022280:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022284:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022288:	d00d      	beq.n	80222a6 <CRC_Lock+0x5a>
 802228a:	f240 4483 	movw	r4, #1155	; 0x483
 802228e:	681a      	ldr	r2, [r3, #0]
 8022290:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022294:	42a2      	cmp	r2, r4
 8022296:	d006      	beq.n	80222a6 <CRC_Lock+0x5a>
 8022298:	f240 4285 	movw	r2, #1157	; 0x485
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80222a2:	4293      	cmp	r3, r2
 80222a4:	d10c      	bne.n	80222c0 <CRC_Lock+0x74>
 80222a6:	2201      	movs	r2, #1
 80222a8:	4b0d      	ldr	r3, [pc, #52]	; (80222e0 <CRC_Lock+0x94>)
 80222aa:	601a      	str	r2, [r3, #0]
 80222ac:	681a      	ldr	r2, [r3, #0]
 80222ae:	2a00      	cmp	r2, #0
 80222b0:	d1fc      	bne.n	80222ac <CRC_Lock+0x60>
 80222b2:	4b0c      	ldr	r3, [pc, #48]	; (80222e4 <CRC_Lock+0x98>)
 80222b4:	6018      	str	r0, [r3, #0]
 80222b6:	6818      	ldr	r0, [r3, #0]
 80222b8:	1a43      	subs	r3, r0, r1
 80222ba:	4258      	negs	r0, r3
 80222bc:	4158      	adcs	r0, r3
 80222be:	bd30      	pop	{r4, r5, pc}
 80222c0:	2201      	movs	r2, #1
 80222c2:	4b09      	ldr	r3, [pc, #36]	; (80222e8 <CRC_Lock+0x9c>)
 80222c4:	601a      	str	r2, [r3, #0]
 80222c6:	681a      	ldr	r2, [r3, #0]
 80222c8:	2a00      	cmp	r2, #0
 80222ca:	d1fc      	bne.n	80222c6 <CRC_Lock+0x7a>
 80222cc:	4b07      	ldr	r3, [pc, #28]	; (80222ec <CRC_Lock+0xa0>)
 80222ce:	e7f1      	b.n	80222b4 <CRC_Lock+0x68>
 80222d0:	e0002000 	.word	0xe0002000
 80222d4:	e000ed00 	.word	0xe000ed00
 80222d8:	e0042000 	.word	0xe0042000
 80222dc:	5c001000 	.word	0x5c001000
 80222e0:	58024c08 	.word	0x58024c08
 80222e4:	58024c00 	.word	0x58024c00
 80222e8:	40023008 	.word	0x40023008
 80222ec:	40023000 	.word	0x40023000

080222f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80222f0:	6101      	str	r1, [r0, #16]
 80222f2:	4770      	bx	lr

080222f4 <_ZN8touchgfx8Gestures4tickEv>:
 80222f4:	7b83      	ldrb	r3, [r0, #14]
 80222f6:	b14b      	cbz	r3, 802230c <_ZN8touchgfx8Gestures4tickEv+0x18>
 80222f8:	8903      	ldrh	r3, [r0, #8]
 80222fa:	3301      	adds	r3, #1
 80222fc:	b29b      	uxth	r3, r3
 80222fe:	2b07      	cmp	r3, #7
 8022300:	8103      	strh	r3, [r0, #8]
 8022302:	bf81      	itttt	hi
 8022304:	2300      	movhi	r3, #0
 8022306:	8143      	strhhi	r3, [r0, #10]
 8022308:	8183      	strhhi	r3, [r0, #12]
 802230a:	7383      	strbhi	r3, [r0, #14]
 802230c:	4770      	bx	lr
	...

08022310 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022310:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022314:	4698      	mov	r8, r3
 8022316:	4604      	mov	r4, r0
 8022318:	8883      	ldrh	r3, [r0, #4]
 802231a:	460e      	mov	r6, r1
 802231c:	88c1      	ldrh	r1, [r0, #6]
 802231e:	2000      	movs	r0, #0
 8022320:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022324:	eba8 0303 	sub.w	r3, r8, r3
 8022328:	b21b      	sxth	r3, r3
 802232a:	4617      	mov	r7, r2
 802232c:	4a17      	ldr	r2, [pc, #92]	; (802238c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802232e:	2b00      	cmp	r3, #0
 8022330:	bfb8      	it	lt
 8022332:	425b      	neglt	r3, r3
 8022334:	9200      	str	r2, [sp, #0]
 8022336:	8aa2      	ldrh	r2, [r4, #20]
 8022338:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802233c:	b21b      	sxth	r3, r3
 802233e:	4293      	cmp	r3, r2
 8022340:	f88d 0004 	strb.w	r0, [sp, #4]
 8022344:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022348:	f8ad 800a 	strh.w	r8, [sp, #10]
 802234c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022350:	dc07      	bgt.n	8022362 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022352:	1a69      	subs	r1, r5, r1
 8022354:	b209      	sxth	r1, r1
 8022356:	2900      	cmp	r1, #0
 8022358:	bfb8      	it	lt
 802235a:	4249      	neglt	r1, r1
 802235c:	b209      	sxth	r1, r1
 802235e:	428a      	cmp	r2, r1
 8022360:	da10      	bge.n	8022384 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022362:	6920      	ldr	r0, [r4, #16]
 8022364:	4669      	mov	r1, sp
 8022366:	6803      	ldr	r3, [r0, #0]
 8022368:	eba8 0606 	sub.w	r6, r8, r6
 802236c:	685b      	ldr	r3, [r3, #4]
 802236e:	4798      	blx	r3
 8022370:	2300      	movs	r3, #0
 8022372:	2001      	movs	r0, #1
 8022374:	1bef      	subs	r7, r5, r7
 8022376:	8123      	strh	r3, [r4, #8]
 8022378:	8166      	strh	r6, [r4, #10]
 802237a:	81a7      	strh	r7, [r4, #12]
 802237c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022380:	80e5      	strh	r5, [r4, #6]
 8022382:	73a0      	strb	r0, [r4, #14]
 8022384:	b004      	add	sp, #16
 8022386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802238a:	bf00      	nop
 802238c:	08025b84 	.word	0x08025b84

08022390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022392:	461e      	mov	r6, r3
 8022394:	1e4b      	subs	r3, r1, #1
 8022396:	2b01      	cmp	r3, #1
 8022398:	b085      	sub	sp, #20
 802239a:	4604      	mov	r4, r0
 802239c:	460d      	mov	r5, r1
 802239e:	4617      	mov	r7, r2
 80223a0:	d84b      	bhi.n	802243a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80223a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80223a6:	1cd3      	adds	r3, r2, #3
 80223a8:	b29b      	uxth	r3, r3
 80223aa:	2b06      	cmp	r3, #6
 80223ac:	d916      	bls.n	80223dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80223ae:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8022450 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80223b2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80223b6:	f8cd c004 	str.w	ip, [sp, #4]
 80223ba:	f04f 0c00 	mov.w	ip, #0
 80223be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80223c2:	6900      	ldr	r0, [r0, #16]
 80223c4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80223c8:	f88d c008 	strb.w	ip, [sp, #8]
 80223cc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80223d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80223d4:	6803      	ldr	r3, [r0, #0]
 80223d6:	a901      	add	r1, sp, #4
 80223d8:	689b      	ldr	r3, [r3, #8]
 80223da:	4798      	blx	r3
 80223dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223e0:	1cd3      	adds	r3, r2, #3
 80223e2:	b29b      	uxth	r3, r3
 80223e4:	2b06      	cmp	r3, #6
 80223e6:	d916      	bls.n	8022416 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80223e8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8022450 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80223ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80223f0:	f8cd c004 	str.w	ip, [sp, #4]
 80223f4:	f04f 0c01 	mov.w	ip, #1
 80223f8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80223fc:	6920      	ldr	r0, [r4, #16]
 80223fe:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022402:	f88d c008 	strb.w	ip, [sp, #8]
 8022406:	f8ad 200a 	strh.w	r2, [sp, #10]
 802240a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802240e:	6803      	ldr	r3, [r0, #0]
 8022410:	a901      	add	r1, sp, #4
 8022412:	689b      	ldr	r3, [r3, #8]
 8022414:	4798      	blx	r3
 8022416:	4b0d      	ldr	r3, [pc, #52]	; (802244c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8022418:	6920      	ldr	r0, [r4, #16]
 802241a:	9301      	str	r3, [sp, #4]
 802241c:	2300      	movs	r3, #0
 802241e:	f88d 5008 	strb.w	r5, [sp, #8]
 8022422:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022426:	f8ad 600c 	strh.w	r6, [sp, #12]
 802242a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802242e:	6803      	ldr	r3, [r0, #0]
 8022430:	a901      	add	r1, sp, #4
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	4798      	blx	r3
 8022436:	b005      	add	sp, #20
 8022438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802243a:	2900      	cmp	r1, #0
 802243c:	d1eb      	bne.n	8022416 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802243e:	80a2      	strh	r2, [r4, #4]
 8022440:	80c6      	strh	r6, [r0, #6]
 8022442:	60a1      	str	r1, [r4, #8]
 8022444:	81a1      	strh	r1, [r4, #12]
 8022446:	73a1      	strb	r1, [r4, #14]
 8022448:	e7e5      	b.n	8022416 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802244a:	bf00      	nop
 802244c:	08025b70 	.word	0x08025b70
 8022450:	08025b98 	.word	0x08025b98

08022454 <__aeabi_atexit>:
 8022454:	460b      	mov	r3, r1
 8022456:	4601      	mov	r1, r0
 8022458:	4618      	mov	r0, r3
 802245a:	f000 bdb3 	b.w	8022fc4 <__cxa_atexit>

0802245e <_ZdlPvj>:
 802245e:	f000 b812 	b.w	8022486 <_ZdlPv>

08022462 <__cxa_guard_acquire>:
 8022462:	6803      	ldr	r3, [r0, #0]
 8022464:	07db      	lsls	r3, r3, #31
 8022466:	d406      	bmi.n	8022476 <__cxa_guard_acquire+0x14>
 8022468:	7843      	ldrb	r3, [r0, #1]
 802246a:	b103      	cbz	r3, 802246e <__cxa_guard_acquire+0xc>
 802246c:	deff      	udf	#255	; 0xff
 802246e:	2301      	movs	r3, #1
 8022470:	7043      	strb	r3, [r0, #1]
 8022472:	4618      	mov	r0, r3
 8022474:	4770      	bx	lr
 8022476:	2000      	movs	r0, #0
 8022478:	4770      	bx	lr

0802247a <__cxa_guard_release>:
 802247a:	2301      	movs	r3, #1
 802247c:	6003      	str	r3, [r0, #0]
 802247e:	4770      	bx	lr

08022480 <__cxa_pure_virtual>:
 8022480:	b508      	push	{r3, lr}
 8022482:	f000 f80d 	bl	80224a0 <_ZSt9terminatev>

08022486 <_ZdlPv>:
 8022486:	f000 bee9 	b.w	802325c <free>

0802248a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802248a:	b508      	push	{r3, lr}
 802248c:	4780      	blx	r0
 802248e:	f000 fd6d 	bl	8022f6c <abort>
	...

08022494 <_ZSt13get_terminatev>:
 8022494:	4b01      	ldr	r3, [pc, #4]	; (802249c <_ZSt13get_terminatev+0x8>)
 8022496:	e8d3 0faf 	lda	r0, [r3]
 802249a:	4770      	bx	lr
 802249c:	20000090 	.word	0x20000090

080224a0 <_ZSt9terminatev>:
 80224a0:	b508      	push	{r3, lr}
 80224a2:	f7ff fff7 	bl	8022494 <_ZSt13get_terminatev>
 80224a6:	f7ff fff0 	bl	802248a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080224ac <cosf>:
 80224ac:	ee10 3a10 	vmov	r3, s0
 80224b0:	b507      	push	{r0, r1, r2, lr}
 80224b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80224b6:	4a1d      	ldr	r2, [pc, #116]	; (802252c <cosf+0x80>)
 80224b8:	4293      	cmp	r3, r2
 80224ba:	dc06      	bgt.n	80224ca <cosf+0x1e>
 80224bc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8022530 <cosf+0x84>
 80224c0:	b003      	add	sp, #12
 80224c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80224c6:	f000 b9b7 	b.w	8022838 <__kernel_cosf>
 80224ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80224ce:	db04      	blt.n	80224da <cosf+0x2e>
 80224d0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80224d4:	b003      	add	sp, #12
 80224d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80224da:	4668      	mov	r0, sp
 80224dc:	f000 f870 	bl	80225c0 <__ieee754_rem_pio2f>
 80224e0:	f000 0003 	and.w	r0, r0, #3
 80224e4:	2801      	cmp	r0, #1
 80224e6:	d009      	beq.n	80224fc <cosf+0x50>
 80224e8:	2802      	cmp	r0, #2
 80224ea:	d010      	beq.n	802250e <cosf+0x62>
 80224ec:	b9b0      	cbnz	r0, 802251c <cosf+0x70>
 80224ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80224f2:	ed9d 0a00 	vldr	s0, [sp]
 80224f6:	f000 f99f 	bl	8022838 <__kernel_cosf>
 80224fa:	e7eb      	b.n	80224d4 <cosf+0x28>
 80224fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8022500:	ed9d 0a00 	vldr	s0, [sp]
 8022504:	f000 fc70 	bl	8022de8 <__kernel_sinf>
 8022508:	eeb1 0a40 	vneg.f32	s0, s0
 802250c:	e7e2      	b.n	80224d4 <cosf+0x28>
 802250e:	eddd 0a01 	vldr	s1, [sp, #4]
 8022512:	ed9d 0a00 	vldr	s0, [sp]
 8022516:	f000 f98f 	bl	8022838 <__kernel_cosf>
 802251a:	e7f5      	b.n	8022508 <cosf+0x5c>
 802251c:	2001      	movs	r0, #1
 802251e:	eddd 0a01 	vldr	s1, [sp, #4]
 8022522:	ed9d 0a00 	vldr	s0, [sp]
 8022526:	f000 fc5f 	bl	8022de8 <__kernel_sinf>
 802252a:	e7d3      	b.n	80224d4 <cosf+0x28>
 802252c:	3f490fd8 	.word	0x3f490fd8
 8022530:	00000000 	.word	0x00000000

08022534 <sinf>:
 8022534:	ee10 3a10 	vmov	r3, s0
 8022538:	b507      	push	{r0, r1, r2, lr}
 802253a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802253e:	4a1e      	ldr	r2, [pc, #120]	; (80225b8 <sinf+0x84>)
 8022540:	4293      	cmp	r3, r2
 8022542:	dc07      	bgt.n	8022554 <sinf+0x20>
 8022544:	2000      	movs	r0, #0
 8022546:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80225bc <sinf+0x88>
 802254a:	b003      	add	sp, #12
 802254c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022550:	f000 bc4a 	b.w	8022de8 <__kernel_sinf>
 8022554:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022558:	db04      	blt.n	8022564 <sinf+0x30>
 802255a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802255e:	b003      	add	sp, #12
 8022560:	f85d fb04 	ldr.w	pc, [sp], #4
 8022564:	4668      	mov	r0, sp
 8022566:	f000 f82b 	bl	80225c0 <__ieee754_rem_pio2f>
 802256a:	f000 0003 	and.w	r0, r0, #3
 802256e:	2801      	cmp	r0, #1
 8022570:	d00a      	beq.n	8022588 <sinf+0x54>
 8022572:	2802      	cmp	r0, #2
 8022574:	d00f      	beq.n	8022596 <sinf+0x62>
 8022576:	b9c0      	cbnz	r0, 80225aa <sinf+0x76>
 8022578:	2001      	movs	r0, #1
 802257a:	eddd 0a01 	vldr	s1, [sp, #4]
 802257e:	ed9d 0a00 	vldr	s0, [sp]
 8022582:	f000 fc31 	bl	8022de8 <__kernel_sinf>
 8022586:	e7ea      	b.n	802255e <sinf+0x2a>
 8022588:	eddd 0a01 	vldr	s1, [sp, #4]
 802258c:	ed9d 0a00 	vldr	s0, [sp]
 8022590:	f000 f952 	bl	8022838 <__kernel_cosf>
 8022594:	e7e3      	b.n	802255e <sinf+0x2a>
 8022596:	2001      	movs	r0, #1
 8022598:	eddd 0a01 	vldr	s1, [sp, #4]
 802259c:	ed9d 0a00 	vldr	s0, [sp]
 80225a0:	f000 fc22 	bl	8022de8 <__kernel_sinf>
 80225a4:	eeb1 0a40 	vneg.f32	s0, s0
 80225a8:	e7d9      	b.n	802255e <sinf+0x2a>
 80225aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80225ae:	ed9d 0a00 	vldr	s0, [sp]
 80225b2:	f000 f941 	bl	8022838 <__kernel_cosf>
 80225b6:	e7f5      	b.n	80225a4 <sinf+0x70>
 80225b8:	3f490fd8 	.word	0x3f490fd8
 80225bc:	00000000 	.word	0x00000000

080225c0 <__ieee754_rem_pio2f>:
 80225c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225c2:	ee10 6a10 	vmov	r6, s0
 80225c6:	4b8e      	ldr	r3, [pc, #568]	; (8022800 <__ieee754_rem_pio2f+0x240>)
 80225c8:	eef0 7a40 	vmov.f32	s15, s0
 80225cc:	b087      	sub	sp, #28
 80225ce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80225d2:	4604      	mov	r4, r0
 80225d4:	429d      	cmp	r5, r3
 80225d6:	dc05      	bgt.n	80225e4 <__ieee754_rem_pio2f+0x24>
 80225d8:	2300      	movs	r3, #0
 80225da:	ed80 0a00 	vstr	s0, [r0]
 80225de:	6043      	str	r3, [r0, #4]
 80225e0:	2000      	movs	r0, #0
 80225e2:	e01a      	b.n	802261a <__ieee754_rem_pio2f+0x5a>
 80225e4:	4b87      	ldr	r3, [pc, #540]	; (8022804 <__ieee754_rem_pio2f+0x244>)
 80225e6:	429d      	cmp	r5, r3
 80225e8:	dc46      	bgt.n	8022678 <__ieee754_rem_pio2f+0xb8>
 80225ea:	2e00      	cmp	r6, #0
 80225ec:	f025 050f 	bic.w	r5, r5, #15
 80225f0:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8022808 <__ieee754_rem_pio2f+0x248>
 80225f4:	4b85      	ldr	r3, [pc, #532]	; (802280c <__ieee754_rem_pio2f+0x24c>)
 80225f6:	dd1f      	ble.n	8022638 <__ieee754_rem_pio2f+0x78>
 80225f8:	429d      	cmp	r5, r3
 80225fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80225fe:	d00e      	beq.n	802261e <__ieee754_rem_pio2f+0x5e>
 8022600:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8022810 <__ieee754_rem_pio2f+0x250>
 8022604:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8022608:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802260c:	ed80 0a00 	vstr	s0, [r0]
 8022610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022614:	2001      	movs	r0, #1
 8022616:	edc4 7a01 	vstr	s15, [r4, #4]
 802261a:	b007      	add	sp, #28
 802261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802261e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8022814 <__ieee754_rem_pio2f+0x254>
 8022622:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8022818 <__ieee754_rem_pio2f+0x258>
 8022626:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802262a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802262e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022632:	edc0 6a00 	vstr	s13, [r0]
 8022636:	e7eb      	b.n	8022610 <__ieee754_rem_pio2f+0x50>
 8022638:	429d      	cmp	r5, r3
 802263a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802263e:	d00e      	beq.n	802265e <__ieee754_rem_pio2f+0x9e>
 8022640:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8022810 <__ieee754_rem_pio2f+0x250>
 8022644:	ee37 0a87 	vadd.f32	s0, s15, s14
 8022648:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802264c:	ed80 0a00 	vstr	s0, [r0]
 8022650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022654:	f04f 30ff 	mov.w	r0, #4294967295
 8022658:	edc4 7a01 	vstr	s15, [r4, #4]
 802265c:	e7dd      	b.n	802261a <__ieee754_rem_pio2f+0x5a>
 802265e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8022814 <__ieee754_rem_pio2f+0x254>
 8022662:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8022818 <__ieee754_rem_pio2f+0x258>
 8022666:	ee77 7a80 	vadd.f32	s15, s15, s0
 802266a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802266e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022672:	edc0 6a00 	vstr	s13, [r0]
 8022676:	e7eb      	b.n	8022650 <__ieee754_rem_pio2f+0x90>
 8022678:	4b68      	ldr	r3, [pc, #416]	; (802281c <__ieee754_rem_pio2f+0x25c>)
 802267a:	429d      	cmp	r5, r3
 802267c:	dc72      	bgt.n	8022764 <__ieee754_rem_pio2f+0x1a4>
 802267e:	f000 fbfb 	bl	8022e78 <fabsf>
 8022682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022686:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8022820 <__ieee754_rem_pio2f+0x260>
 802268a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802268e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022696:	ee17 0a90 	vmov	r0, s15
 802269a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8022808 <__ieee754_rem_pio2f+0x248>
 802269e:	281f      	cmp	r0, #31
 80226a0:	eea7 0a67 	vfms.f32	s0, s14, s15
 80226a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8022810 <__ieee754_rem_pio2f+0x250>
 80226a8:	eeb1 6a47 	vneg.f32	s12, s14
 80226ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80226b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80226b4:	ee16 2a90 	vmov	r2, s13
 80226b8:	dc1c      	bgt.n	80226f4 <__ieee754_rem_pio2f+0x134>
 80226ba:	1e47      	subs	r7, r0, #1
 80226bc:	4959      	ldr	r1, [pc, #356]	; (8022824 <__ieee754_rem_pio2f+0x264>)
 80226be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80226c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80226c6:	428b      	cmp	r3, r1
 80226c8:	d014      	beq.n	80226f4 <__ieee754_rem_pio2f+0x134>
 80226ca:	6022      	str	r2, [r4, #0]
 80226cc:	ed94 7a00 	vldr	s14, [r4]
 80226d0:	2e00      	cmp	r6, #0
 80226d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80226d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80226da:	ed84 0a01 	vstr	s0, [r4, #4]
 80226de:	da9c      	bge.n	802261a <__ieee754_rem_pio2f+0x5a>
 80226e0:	eeb1 7a47 	vneg.f32	s14, s14
 80226e4:	eeb1 0a40 	vneg.f32	s0, s0
 80226e8:	ed84 7a00 	vstr	s14, [r4]
 80226ec:	ed84 0a01 	vstr	s0, [r4, #4]
 80226f0:	4240      	negs	r0, r0
 80226f2:	e792      	b.n	802261a <__ieee754_rem_pio2f+0x5a>
 80226f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80226f8:	15eb      	asrs	r3, r5, #23
 80226fa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80226fe:	2d08      	cmp	r5, #8
 8022700:	dde3      	ble.n	80226ca <__ieee754_rem_pio2f+0x10a>
 8022702:	eef0 6a40 	vmov.f32	s13, s0
 8022706:	eddf 7a43 	vldr	s15, [pc, #268]	; 8022814 <__ieee754_rem_pio2f+0x254>
 802270a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8022818 <__ieee754_rem_pio2f+0x258>
 802270e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022712:	ee30 0a66 	vsub.f32	s0, s0, s13
 8022716:	eea6 0a27 	vfma.f32	s0, s12, s15
 802271a:	eef0 7a40 	vmov.f32	s15, s0
 802271e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8022722:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8022726:	ee15 2a90 	vmov	r2, s11
 802272a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802272e:	1a5b      	subs	r3, r3, r1
 8022730:	2b19      	cmp	r3, #25
 8022732:	dc04      	bgt.n	802273e <__ieee754_rem_pio2f+0x17e>
 8022734:	eeb0 0a66 	vmov.f32	s0, s13
 8022738:	edc4 5a00 	vstr	s11, [r4]
 802273c:	e7c6      	b.n	80226cc <__ieee754_rem_pio2f+0x10c>
 802273e:	eeb0 0a66 	vmov.f32	s0, s13
 8022742:	eddf 5a39 	vldr	s11, [pc, #228]	; 8022828 <__ieee754_rem_pio2f+0x268>
 8022746:	eea6 0a25 	vfma.f32	s0, s12, s11
 802274a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802274e:	eddf 6a37 	vldr	s13, [pc, #220]	; 802282c <__ieee754_rem_pio2f+0x26c>
 8022752:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022756:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802275a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802275e:	ed84 7a00 	vstr	s14, [r4]
 8022762:	e7b3      	b.n	80226cc <__ieee754_rem_pio2f+0x10c>
 8022764:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022768:	db06      	blt.n	8022778 <__ieee754_rem_pio2f+0x1b8>
 802276a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802276e:	edc0 7a01 	vstr	s15, [r0, #4]
 8022772:	edc0 7a00 	vstr	s15, [r0]
 8022776:	e733      	b.n	80225e0 <__ieee754_rem_pio2f+0x20>
 8022778:	15ea      	asrs	r2, r5, #23
 802277a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8022830 <__ieee754_rem_pio2f+0x270>
 802277e:	3a86      	subs	r2, #134	; 0x86
 8022780:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8022784:	ee07 3a90 	vmov	s15, r3
 8022788:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802278c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022794:	ed8d 7a03 	vstr	s14, [sp, #12]
 8022798:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802279c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80227a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80227a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80227a8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80227ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80227b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80227b4:	edcd 7a05 	vstr	s15, [sp, #20]
 80227b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227bc:	d11e      	bne.n	80227fc <__ieee754_rem_pio2f+0x23c>
 80227be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80227c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227c6:	bf14      	ite	ne
 80227c8:	2302      	movne	r3, #2
 80227ca:	2301      	moveq	r3, #1
 80227cc:	4919      	ldr	r1, [pc, #100]	; (8022834 <__ieee754_rem_pio2f+0x274>)
 80227ce:	a803      	add	r0, sp, #12
 80227d0:	9101      	str	r1, [sp, #4]
 80227d2:	2102      	movs	r1, #2
 80227d4:	9100      	str	r1, [sp, #0]
 80227d6:	4621      	mov	r1, r4
 80227d8:	f000 f88e 	bl	80228f8 <__kernel_rem_pio2f>
 80227dc:	2e00      	cmp	r6, #0
 80227de:	f6bf af1c 	bge.w	802261a <__ieee754_rem_pio2f+0x5a>
 80227e2:	edd4 7a00 	vldr	s15, [r4]
 80227e6:	eef1 7a67 	vneg.f32	s15, s15
 80227ea:	edc4 7a00 	vstr	s15, [r4]
 80227ee:	edd4 7a01 	vldr	s15, [r4, #4]
 80227f2:	eef1 7a67 	vneg.f32	s15, s15
 80227f6:	edc4 7a01 	vstr	s15, [r4, #4]
 80227fa:	e779      	b.n	80226f0 <__ieee754_rem_pio2f+0x130>
 80227fc:	2303      	movs	r3, #3
 80227fe:	e7e5      	b.n	80227cc <__ieee754_rem_pio2f+0x20c>
 8022800:	3f490fd8 	.word	0x3f490fd8
 8022804:	4016cbe3 	.word	0x4016cbe3
 8022808:	3fc90f80 	.word	0x3fc90f80
 802280c:	3fc90fd0 	.word	0x3fc90fd0
 8022810:	37354443 	.word	0x37354443
 8022814:	37354400 	.word	0x37354400
 8022818:	2e85a308 	.word	0x2e85a308
 802281c:	43490f80 	.word	0x43490f80
 8022820:	3f22f984 	.word	0x3f22f984
 8022824:	08025e60 	.word	0x08025e60
 8022828:	2e85a300 	.word	0x2e85a300
 802282c:	248d3132 	.word	0x248d3132
 8022830:	43800000 	.word	0x43800000
 8022834:	08025ee0 	.word	0x08025ee0

08022838 <__kernel_cosf>:
 8022838:	ee10 3a10 	vmov	r3, s0
 802283c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8022840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022844:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022848:	da05      	bge.n	8022856 <__kernel_cosf+0x1e>
 802284a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802284e:	ee17 2a90 	vmov	r2, s15
 8022852:	2a00      	cmp	r2, #0
 8022854:	d03d      	beq.n	80228d2 <__kernel_cosf+0x9a>
 8022856:	ee60 5a00 	vmul.f32	s11, s0, s0
 802285a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80228d8 <__kernel_cosf+0xa0>
 802285e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80228dc <__kernel_cosf+0xa4>
 8022862:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80228e0 <__kernel_cosf+0xa8>
 8022866:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802286a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80228e4 <__kernel_cosf+0xac>
 802286e:	4a1e      	ldr	r2, [pc, #120]	; (80228e8 <__kernel_cosf+0xb0>)
 8022870:	4293      	cmp	r3, r2
 8022872:	eee7 7a25 	vfma.f32	s15, s14, s11
 8022876:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80228ec <__kernel_cosf+0xb4>
 802287a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802287e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80228f0 <__kernel_cosf+0xb8>
 8022882:	eee7 7a25 	vfma.f32	s15, s14, s11
 8022886:	eeb0 7a66 	vmov.f32	s14, s13
 802288a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802288e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8022892:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8022896:	ee67 6a25 	vmul.f32	s13, s14, s11
 802289a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802289e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80228a2:	dc04      	bgt.n	80228ae <__kernel_cosf+0x76>
 80228a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80228a8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80228ac:	4770      	bx	lr
 80228ae:	4a11      	ldr	r2, [pc, #68]	; (80228f4 <__kernel_cosf+0xbc>)
 80228b0:	4293      	cmp	r3, r2
 80228b2:	bfd6      	itet	le
 80228b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80228b8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80228bc:	ee06 3a90 	vmovle	s13, r3
 80228c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80228c4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80228c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80228d0:	4770      	bx	lr
 80228d2:	eeb0 0a46 	vmov.f32	s0, s12
 80228d6:	4770      	bx	lr
 80228d8:	ad47d74e 	.word	0xad47d74e
 80228dc:	310f74f6 	.word	0x310f74f6
 80228e0:	3d2aaaab 	.word	0x3d2aaaab
 80228e4:	b493f27c 	.word	0xb493f27c
 80228e8:	3e999999 	.word	0x3e999999
 80228ec:	37d00d01 	.word	0x37d00d01
 80228f0:	bab60b61 	.word	0xbab60b61
 80228f4:	3f480000 	.word	0x3f480000

080228f8 <__kernel_rem_pio2f>:
 80228f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228fc:	ed2d 8b04 	vpush	{d8-d9}
 8022900:	b0d9      	sub	sp, #356	; 0x164
 8022902:	4688      	mov	r8, r1
 8022904:	49bc      	ldr	r1, [pc, #752]	; (8022bf8 <__kernel_rem_pio2f+0x300>)
 8022906:	9002      	str	r0, [sp, #8]
 8022908:	9866      	ldr	r0, [sp, #408]	; 0x198
 802290a:	9301      	str	r3, [sp, #4]
 802290c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8022910:	1e59      	subs	r1, r3, #1
 8022912:	1d13      	adds	r3, r2, #4
 8022914:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8022918:	db27      	blt.n	802296a <__kernel_rem_pio2f+0x72>
 802291a:	f1b2 0b03 	subs.w	fp, r2, #3
 802291e:	bf48      	it	mi
 8022920:	f102 0b04 	addmi.w	fp, r2, #4
 8022924:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8022928:	1c45      	adds	r5, r0, #1
 802292a:	1a47      	subs	r7, r0, r1
 802292c:	eb0a 0c01 	add.w	ip, sl, r1
 8022930:	ae1c      	add	r6, sp, #112	; 0x70
 8022932:	00ec      	lsls	r4, r5, #3
 8022934:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022938:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802293c:	9403      	str	r4, [sp, #12]
 802293e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8022942:	2400      	movs	r4, #0
 8022944:	4564      	cmp	r4, ip
 8022946:	dd12      	ble.n	802296e <__kernel_rem_pio2f+0x76>
 8022948:	ac1c      	add	r4, sp, #112	; 0x70
 802294a:	9b01      	ldr	r3, [sp, #4]
 802294c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8022950:	f04f 0c00 	mov.w	ip, #0
 8022954:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022958:	45d4      	cmp	ip, sl
 802295a:	dc29      	bgt.n	80229b0 <__kernel_rem_pio2f+0xb8>
 802295c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8022960:	4627      	mov	r7, r4
 8022962:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022966:	2600      	movs	r6, #0
 8022968:	e018      	b.n	802299c <__kernel_rem_pio2f+0xa4>
 802296a:	2000      	movs	r0, #0
 802296c:	e7dc      	b.n	8022928 <__kernel_rem_pio2f+0x30>
 802296e:	42e7      	cmn	r7, r4
 8022970:	bf54      	ite	pl
 8022972:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8022976:	eef0 7a47 	vmovmi.f32	s15, s14
 802297a:	f104 0401 	add.w	r4, r4, #1
 802297e:	bf5c      	itt	pl
 8022980:	ee07 3a90 	vmovpl	s15, r3
 8022984:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8022988:	ece6 7a01 	vstmia	r6!, {s15}
 802298c:	e7da      	b.n	8022944 <__kernel_rem_pio2f+0x4c>
 802298e:	ecf9 6a01 	vldmia	r9!, {s13}
 8022992:	3601      	adds	r6, #1
 8022994:	ed97 7a00 	vldr	s14, [r7]
 8022998:	eee6 7a87 	vfma.f32	s15, s13, s14
 802299c:	428e      	cmp	r6, r1
 802299e:	f1a7 0704 	sub.w	r7, r7, #4
 80229a2:	ddf4      	ble.n	802298e <__kernel_rem_pio2f+0x96>
 80229a4:	f10c 0c01 	add.w	ip, ip, #1
 80229a8:	3404      	adds	r4, #4
 80229aa:	eceb 7a01 	vstmia	fp!, {s15}
 80229ae:	e7d3      	b.n	8022958 <__kernel_rem_pio2f+0x60>
 80229b0:	ab08      	add	r3, sp, #32
 80229b2:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80229b6:	4656      	mov	r6, sl
 80229b8:	eddf 8a92 	vldr	s17, [pc, #584]	; 8022c04 <__kernel_rem_pio2f+0x30c>
 80229bc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80229c0:	ed9f 9a8f 	vldr	s18, [pc, #572]	; 8022c00 <__kernel_rem_pio2f+0x308>
 80229c4:	9304      	str	r3, [sp, #16]
 80229c6:	00b3      	lsls	r3, r6, #2
 80229c8:	ac08      	add	r4, sp, #32
 80229ca:	4637      	mov	r7, r6
 80229cc:	9305      	str	r3, [sp, #20]
 80229ce:	ab58      	add	r3, sp, #352	; 0x160
 80229d0:	46a4      	mov	ip, r4
 80229d2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80229d6:	ab44      	add	r3, sp, #272	; 0x110
 80229d8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80229dc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80229e0:	2f00      	cmp	r7, #0
 80229e2:	f1a0 0004 	sub.w	r0, r0, #4
 80229e6:	dc4f      	bgt.n	8022a88 <__kernel_rem_pio2f+0x190>
 80229e8:	4628      	mov	r0, r5
 80229ea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80229ee:	f000 fa4d 	bl	8022e8c <scalbnf>
 80229f2:	eeb0 8a40 	vmov.f32	s16, s0
 80229f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80229fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80229fe:	f000 fa42 	bl	8022e86 <floorf>
 8022a02:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8022a06:	2d00      	cmp	r5, #0
 8022a08:	eea0 8a67 	vfms.f32	s16, s0, s15
 8022a0c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8022a10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8022a14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8022a18:	ee17 9a90 	vmov	r9, s15
 8022a1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8022a20:	dd44      	ble.n	8022aac <__kernel_rem_pio2f+0x1b4>
 8022a22:	f106 3cff 	add.w	ip, r6, #4294967295
 8022a26:	ab08      	add	r3, sp, #32
 8022a28:	f1c5 0e08 	rsb	lr, r5, #8
 8022a2c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8022a30:	fa47 f00e 	asr.w	r0, r7, lr
 8022a34:	4481      	add	r9, r0
 8022a36:	fa00 f00e 	lsl.w	r0, r0, lr
 8022a3a:	1a3f      	subs	r7, r7, r0
 8022a3c:	f1c5 0007 	rsb	r0, r5, #7
 8022a40:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8022a44:	4107      	asrs	r7, r0
 8022a46:	2f00      	cmp	r7, #0
 8022a48:	dd3f      	ble.n	8022aca <__kernel_rem_pio2f+0x1d2>
 8022a4a:	f04f 0e00 	mov.w	lr, #0
 8022a4e:	f109 0901 	add.w	r9, r9, #1
 8022a52:	4673      	mov	r3, lr
 8022a54:	4576      	cmp	r6, lr
 8022a56:	dc6b      	bgt.n	8022b30 <__kernel_rem_pio2f+0x238>
 8022a58:	2d00      	cmp	r5, #0
 8022a5a:	dd04      	ble.n	8022a66 <__kernel_rem_pio2f+0x16e>
 8022a5c:	2d01      	cmp	r5, #1
 8022a5e:	d078      	beq.n	8022b52 <__kernel_rem_pio2f+0x25a>
 8022a60:	2d02      	cmp	r5, #2
 8022a62:	f000 8081 	beq.w	8022b68 <__kernel_rem_pio2f+0x270>
 8022a66:	2f02      	cmp	r7, #2
 8022a68:	d12f      	bne.n	8022aca <__kernel_rem_pio2f+0x1d2>
 8022a6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022a6e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8022a72:	b353      	cbz	r3, 8022aca <__kernel_rem_pio2f+0x1d2>
 8022a74:	4628      	mov	r0, r5
 8022a76:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8022a7a:	f000 fa07 	bl	8022e8c <scalbnf>
 8022a7e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8022a82:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8022a86:	e020      	b.n	8022aca <__kernel_rem_pio2f+0x1d2>
 8022a88:	ee60 7a28 	vmul.f32	s15, s0, s17
 8022a8c:	3f01      	subs	r7, #1
 8022a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022a96:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8022a9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8022a9e:	ecac 0a01 	vstmia	ip!, {s0}
 8022aa2:	ed90 0a00 	vldr	s0, [r0]
 8022aa6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8022aaa:	e799      	b.n	80229e0 <__kernel_rem_pio2f+0xe8>
 8022aac:	d105      	bne.n	8022aba <__kernel_rem_pio2f+0x1c2>
 8022aae:	1e70      	subs	r0, r6, #1
 8022ab0:	ab08      	add	r3, sp, #32
 8022ab2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8022ab6:	11ff      	asrs	r7, r7, #7
 8022ab8:	e7c5      	b.n	8022a46 <__kernel_rem_pio2f+0x14e>
 8022aba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022abe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8022ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ac6:	da31      	bge.n	8022b2c <__kernel_rem_pio2f+0x234>
 8022ac8:	2700      	movs	r7, #0
 8022aca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8022ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ad2:	f040 809b 	bne.w	8022c0c <__kernel_rem_pio2f+0x314>
 8022ad6:	1e74      	subs	r4, r6, #1
 8022ad8:	2000      	movs	r0, #0
 8022ada:	46a4      	mov	ip, r4
 8022adc:	45d4      	cmp	ip, sl
 8022ade:	da4a      	bge.n	8022b76 <__kernel_rem_pio2f+0x27e>
 8022ae0:	2800      	cmp	r0, #0
 8022ae2:	d07a      	beq.n	8022bda <__kernel_rem_pio2f+0x2e2>
 8022ae4:	ab08      	add	r3, sp, #32
 8022ae6:	3d08      	subs	r5, #8
 8022ae8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	f000 8081 	beq.w	8022bf4 <__kernel_rem_pio2f+0x2fc>
 8022af2:	4628      	mov	r0, r5
 8022af4:	00a5      	lsls	r5, r4, #2
 8022af6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8022afa:	f000 f9c7 	bl	8022e8c <scalbnf>
 8022afe:	aa44      	add	r2, sp, #272	; 0x110
 8022b00:	1d2b      	adds	r3, r5, #4
 8022b02:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8022c04 <__kernel_rem_pio2f+0x30c>
 8022b06:	18d1      	adds	r1, r2, r3
 8022b08:	4622      	mov	r2, r4
 8022b0a:	2a00      	cmp	r2, #0
 8022b0c:	f280 80ae 	bge.w	8022c6c <__kernel_rem_pio2f+0x374>
 8022b10:	4622      	mov	r2, r4
 8022b12:	2a00      	cmp	r2, #0
 8022b14:	f2c0 80cc 	blt.w	8022cb0 <__kernel_rem_pio2f+0x3b8>
 8022b18:	a944      	add	r1, sp, #272	; 0x110
 8022b1a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8022bfc <__kernel_rem_pio2f+0x304>
 8022b1e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022b22:	2000      	movs	r0, #0
 8022b24:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8022b28:	1aa1      	subs	r1, r4, r2
 8022b2a:	e0b6      	b.n	8022c9a <__kernel_rem_pio2f+0x3a2>
 8022b2c:	2702      	movs	r7, #2
 8022b2e:	e78c      	b.n	8022a4a <__kernel_rem_pio2f+0x152>
 8022b30:	6820      	ldr	r0, [r4, #0]
 8022b32:	b94b      	cbnz	r3, 8022b48 <__kernel_rem_pio2f+0x250>
 8022b34:	b118      	cbz	r0, 8022b3e <__kernel_rem_pio2f+0x246>
 8022b36:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022b3a:	6020      	str	r0, [r4, #0]
 8022b3c:	2001      	movs	r0, #1
 8022b3e:	f10e 0e01 	add.w	lr, lr, #1
 8022b42:	3404      	adds	r4, #4
 8022b44:	4603      	mov	r3, r0
 8022b46:	e785      	b.n	8022a54 <__kernel_rem_pio2f+0x15c>
 8022b48:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8022b4c:	6020      	str	r0, [r4, #0]
 8022b4e:	4618      	mov	r0, r3
 8022b50:	e7f5      	b.n	8022b3e <__kernel_rem_pio2f+0x246>
 8022b52:	1e74      	subs	r4, r6, #1
 8022b54:	a808      	add	r0, sp, #32
 8022b56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8022b5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8022b5e:	f10d 0c20 	add.w	ip, sp, #32
 8022b62:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8022b66:	e77e      	b.n	8022a66 <__kernel_rem_pio2f+0x16e>
 8022b68:	1e74      	subs	r4, r6, #1
 8022b6a:	a808      	add	r0, sp, #32
 8022b6c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8022b70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8022b74:	e7f3      	b.n	8022b5e <__kernel_rem_pio2f+0x266>
 8022b76:	ab08      	add	r3, sp, #32
 8022b78:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8022b7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022b80:	4318      	orrs	r0, r3
 8022b82:	e7ab      	b.n	8022adc <__kernel_rem_pio2f+0x1e4>
 8022b84:	f10c 0c01 	add.w	ip, ip, #1
 8022b88:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8022b8c:	2c00      	cmp	r4, #0
 8022b8e:	d0f9      	beq.n	8022b84 <__kernel_rem_pio2f+0x28c>
 8022b90:	9b05      	ldr	r3, [sp, #20]
 8022b92:	1c77      	adds	r7, r6, #1
 8022b94:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8022b98:	eb0d 0003 	add.w	r0, sp, r3
 8022b9c:	9b01      	ldr	r3, [sp, #4]
 8022b9e:	18f4      	adds	r4, r6, r3
 8022ba0:	ab1c      	add	r3, sp, #112	; 0x70
 8022ba2:	384c      	subs	r0, #76	; 0x4c
 8022ba4:	4466      	add	r6, ip
 8022ba6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022baa:	42be      	cmp	r6, r7
 8022bac:	f6ff af0b 	blt.w	80229c6 <__kernel_rem_pio2f+0xce>
 8022bb0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8022bb4:	f04f 0c00 	mov.w	ip, #0
 8022bb8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8022bbc:	ee07 3a90 	vmov	s15, r3
 8022bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022bc4:	ece4 7a01 	vstmia	r4!, {s15}
 8022bc8:	46a1      	mov	r9, r4
 8022bca:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022bce:	458c      	cmp	ip, r1
 8022bd0:	dd07      	ble.n	8022be2 <__kernel_rem_pio2f+0x2ea>
 8022bd2:	3701      	adds	r7, #1
 8022bd4:	ece0 7a01 	vstmia	r0!, {s15}
 8022bd8:	e7e7      	b.n	8022baa <__kernel_rem_pio2f+0x2b2>
 8022bda:	9804      	ldr	r0, [sp, #16]
 8022bdc:	f04f 0c01 	mov.w	ip, #1
 8022be0:	e7d2      	b.n	8022b88 <__kernel_rem_pio2f+0x290>
 8022be2:	ecfe 6a01 	vldmia	lr!, {s13}
 8022be6:	f10c 0c01 	add.w	ip, ip, #1
 8022bea:	ed39 7a01 	vldmdb	r9!, {s14}
 8022bee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022bf2:	e7ec      	b.n	8022bce <__kernel_rem_pio2f+0x2d6>
 8022bf4:	3c01      	subs	r4, #1
 8022bf6:	e775      	b.n	8022ae4 <__kernel_rem_pio2f+0x1ec>
 8022bf8:	08026224 	.word	0x08026224
 8022bfc:	080261f8 	.word	0x080261f8
 8022c00:	43800000 	.word	0x43800000
 8022c04:	3b800000 	.word	0x3b800000
 8022c08:	00000000 	.word	0x00000000
 8022c0c:	9b03      	ldr	r3, [sp, #12]
 8022c0e:	eeb0 0a48 	vmov.f32	s0, s16
 8022c12:	1a98      	subs	r0, r3, r2
 8022c14:	f000 f93a 	bl	8022e8c <scalbnf>
 8022c18:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8022c00 <__kernel_rem_pio2f+0x308>
 8022c1c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8022c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c24:	db19      	blt.n	8022c5a <__kernel_rem_pio2f+0x362>
 8022c26:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8022c04 <__kernel_rem_pio2f+0x30c>
 8022c2a:	aa08      	add	r2, sp, #32
 8022c2c:	1c74      	adds	r4, r6, #1
 8022c2e:	3508      	adds	r5, #8
 8022c30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8022c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022c3c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8022c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022c44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8022c48:	ee10 3a10 	vmov	r3, s0
 8022c4c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8022c50:	ee17 3a90 	vmov	r3, s15
 8022c54:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8022c58:	e74b      	b.n	8022af2 <__kernel_rem_pio2f+0x1fa>
 8022c5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8022c5e:	aa08      	add	r2, sp, #32
 8022c60:	4634      	mov	r4, r6
 8022c62:	ee10 3a10 	vmov	r3, s0
 8022c66:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8022c6a:	e742      	b.n	8022af2 <__kernel_rem_pio2f+0x1fa>
 8022c6c:	a808      	add	r0, sp, #32
 8022c6e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8022c72:	3a01      	subs	r2, #1
 8022c74:	ee07 0a90 	vmov	s15, r0
 8022c78:	9001      	str	r0, [sp, #4]
 8022c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022c7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8022c82:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022c86:	ed61 7a01 	vstmdb	r1!, {s15}
 8022c8a:	e73e      	b.n	8022b0a <__kernel_rem_pio2f+0x212>
 8022c8c:	ecfc 6a01 	vldmia	ip!, {s13}
 8022c90:	3001      	adds	r0, #1
 8022c92:	ecb6 7a01 	vldmia	r6!, {s14}
 8022c96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022c9a:	4550      	cmp	r0, sl
 8022c9c:	dc01      	bgt.n	8022ca2 <__kernel_rem_pio2f+0x3aa>
 8022c9e:	4288      	cmp	r0, r1
 8022ca0:	ddf4      	ble.n	8022c8c <__kernel_rem_pio2f+0x394>
 8022ca2:	a858      	add	r0, sp, #352	; 0x160
 8022ca4:	3a01      	subs	r2, #1
 8022ca6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022caa:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8022cae:	e730      	b.n	8022b12 <__kernel_rem_pio2f+0x21a>
 8022cb0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8022cb2:	2a02      	cmp	r2, #2
 8022cb4:	dc09      	bgt.n	8022cca <__kernel_rem_pio2f+0x3d2>
 8022cb6:	2a00      	cmp	r2, #0
 8022cb8:	dc2a      	bgt.n	8022d10 <__kernel_rem_pio2f+0x418>
 8022cba:	d043      	beq.n	8022d44 <__kernel_rem_pio2f+0x44c>
 8022cbc:	f009 0007 	and.w	r0, r9, #7
 8022cc0:	b059      	add	sp, #356	; 0x164
 8022cc2:	ecbd 8b04 	vpop	{d8-d9}
 8022cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8022ccc:	2b03      	cmp	r3, #3
 8022cce:	d1f5      	bne.n	8022cbc <__kernel_rem_pio2f+0x3c4>
 8022cd0:	ab30      	add	r3, sp, #192	; 0xc0
 8022cd2:	4620      	mov	r0, r4
 8022cd4:	442b      	add	r3, r5
 8022cd6:	461a      	mov	r2, r3
 8022cd8:	4619      	mov	r1, r3
 8022cda:	2800      	cmp	r0, #0
 8022cdc:	f1a1 0104 	sub.w	r1, r1, #4
 8022ce0:	dc51      	bgt.n	8022d86 <__kernel_rem_pio2f+0x48e>
 8022ce2:	4621      	mov	r1, r4
 8022ce4:	2901      	cmp	r1, #1
 8022ce6:	f1a2 0204 	sub.w	r2, r2, #4
 8022cea:	dc5c      	bgt.n	8022da6 <__kernel_rem_pio2f+0x4ae>
 8022cec:	3304      	adds	r3, #4
 8022cee:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022cf2:	2c01      	cmp	r4, #1
 8022cf4:	dc67      	bgt.n	8022dc6 <__kernel_rem_pio2f+0x4ce>
 8022cf6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8022cfa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8022cfe:	2f00      	cmp	r7, #0
 8022d00:	d167      	bne.n	8022dd2 <__kernel_rem_pio2f+0x4da>
 8022d02:	edc8 6a00 	vstr	s13, [r8]
 8022d06:	ed88 7a01 	vstr	s14, [r8, #4]
 8022d0a:	edc8 7a02 	vstr	s15, [r8, #8]
 8022d0e:	e7d5      	b.n	8022cbc <__kernel_rem_pio2f+0x3c4>
 8022d10:	aa30      	add	r2, sp, #192	; 0xc0
 8022d12:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022d16:	4413      	add	r3, r2
 8022d18:	4622      	mov	r2, r4
 8022d1a:	2a00      	cmp	r2, #0
 8022d1c:	da24      	bge.n	8022d68 <__kernel_rem_pio2f+0x470>
 8022d1e:	b34f      	cbz	r7, 8022d74 <__kernel_rem_pio2f+0x47c>
 8022d20:	eef1 7a47 	vneg.f32	s15, s14
 8022d24:	edc8 7a00 	vstr	s15, [r8]
 8022d28:	aa31      	add	r2, sp, #196	; 0xc4
 8022d2a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8022d2e:	2301      	movs	r3, #1
 8022d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022d34:	429c      	cmp	r4, r3
 8022d36:	da20      	bge.n	8022d7a <__kernel_rem_pio2f+0x482>
 8022d38:	b10f      	cbz	r7, 8022d3e <__kernel_rem_pio2f+0x446>
 8022d3a:	eef1 7a67 	vneg.f32	s15, s15
 8022d3e:	edc8 7a01 	vstr	s15, [r8, #4]
 8022d42:	e7bb      	b.n	8022cbc <__kernel_rem_pio2f+0x3c4>
 8022d44:	aa30      	add	r2, sp, #192	; 0xc0
 8022d46:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8022c08 <__kernel_rem_pio2f+0x310>
 8022d4a:	4413      	add	r3, r2
 8022d4c:	2c00      	cmp	r4, #0
 8022d4e:	da05      	bge.n	8022d5c <__kernel_rem_pio2f+0x464>
 8022d50:	b10f      	cbz	r7, 8022d56 <__kernel_rem_pio2f+0x45e>
 8022d52:	eef1 7a67 	vneg.f32	s15, s15
 8022d56:	edc8 7a00 	vstr	s15, [r8]
 8022d5a:	e7af      	b.n	8022cbc <__kernel_rem_pio2f+0x3c4>
 8022d5c:	ed33 7a01 	vldmdb	r3!, {s14}
 8022d60:	3c01      	subs	r4, #1
 8022d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d66:	e7f1      	b.n	8022d4c <__kernel_rem_pio2f+0x454>
 8022d68:	ed73 7a01 	vldmdb	r3!, {s15}
 8022d6c:	3a01      	subs	r2, #1
 8022d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8022d72:	e7d2      	b.n	8022d1a <__kernel_rem_pio2f+0x422>
 8022d74:	eef0 7a47 	vmov.f32	s15, s14
 8022d78:	e7d4      	b.n	8022d24 <__kernel_rem_pio2f+0x42c>
 8022d7a:	ecb2 7a01 	vldmia	r2!, {s14}
 8022d7e:	3301      	adds	r3, #1
 8022d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d84:	e7d6      	b.n	8022d34 <__kernel_rem_pio2f+0x43c>
 8022d86:	edd1 7a00 	vldr	s15, [r1]
 8022d8a:	3801      	subs	r0, #1
 8022d8c:	edd1 6a01 	vldr	s13, [r1, #4]
 8022d90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8022d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022d98:	ed81 7a00 	vstr	s14, [r1]
 8022d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022da0:	edc1 7a01 	vstr	s15, [r1, #4]
 8022da4:	e799      	b.n	8022cda <__kernel_rem_pio2f+0x3e2>
 8022da6:	edd2 7a00 	vldr	s15, [r2]
 8022daa:	3901      	subs	r1, #1
 8022dac:	edd2 6a01 	vldr	s13, [r2, #4]
 8022db0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8022db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022db8:	ed82 7a00 	vstr	s14, [r2]
 8022dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022dc0:	edc2 7a01 	vstr	s15, [r2, #4]
 8022dc4:	e78e      	b.n	8022ce4 <__kernel_rem_pio2f+0x3ec>
 8022dc6:	ed33 7a01 	vldmdb	r3!, {s14}
 8022dca:	3c01      	subs	r4, #1
 8022dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022dd0:	e78f      	b.n	8022cf2 <__kernel_rem_pio2f+0x3fa>
 8022dd2:	eef1 6a66 	vneg.f32	s13, s13
 8022dd6:	eeb1 7a47 	vneg.f32	s14, s14
 8022dda:	eef1 7a67 	vneg.f32	s15, s15
 8022dde:	edc8 6a00 	vstr	s13, [r8]
 8022de2:	ed88 7a01 	vstr	s14, [r8, #4]
 8022de6:	e790      	b.n	8022d0a <__kernel_rem_pio2f+0x412>

08022de8 <__kernel_sinf>:
 8022de8:	ee10 3a10 	vmov	r3, s0
 8022dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022df0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022df4:	da04      	bge.n	8022e00 <__kernel_sinf+0x18>
 8022df6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022dfa:	ee17 3a90 	vmov	r3, s15
 8022dfe:	b35b      	cbz	r3, 8022e58 <__kernel_sinf+0x70>
 8022e00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022e04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022e5c <__kernel_sinf+0x74>
 8022e08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8022e60 <__kernel_sinf+0x78>
 8022e0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022e10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8022e64 <__kernel_sinf+0x7c>
 8022e14:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022e18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022e1c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022e68 <__kernel_sinf+0x80>
 8022e20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022e24:	eddf 7a11 	vldr	s15, [pc, #68]	; 8022e6c <__kernel_sinf+0x84>
 8022e28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022e2c:	b930      	cbnz	r0, 8022e3c <__kernel_sinf+0x54>
 8022e2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8022e70 <__kernel_sinf+0x88>
 8022e32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022e36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8022e3a:	4770      	bx	lr
 8022e3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8022e40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8022e44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8022e48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8022e4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022e74 <__kernel_sinf+0x8c>
 8022e50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8022e54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8022e58:	4770      	bx	lr
 8022e5a:	bf00      	nop
 8022e5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8022e60:	b2d72f34 	.word	0xb2d72f34
 8022e64:	3638ef1b 	.word	0x3638ef1b
 8022e68:	b9500d01 	.word	0xb9500d01
 8022e6c:	3c088889 	.word	0x3c088889
 8022e70:	be2aaaab 	.word	0xbe2aaaab
 8022e74:	3e2aaaab 	.word	0x3e2aaaab

08022e78 <fabsf>:
 8022e78:	ee10 3a10 	vmov	r3, s0
 8022e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022e80:	ee00 3a10 	vmov	s0, r3
 8022e84:	4770      	bx	lr

08022e86 <floorf>:
 8022e86:	febb 0a40 	vrintm.f32	s0, s0
 8022e8a:	4770      	bx	lr

08022e8c <scalbnf>:
 8022e8c:	ee10 3a10 	vmov	r3, s0
 8022e90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022e94:	d024      	beq.n	8022ee0 <scalbnf+0x54>
 8022e96:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8022e9a:	d302      	bcc.n	8022ea2 <scalbnf+0x16>
 8022e9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022ea0:	4770      	bx	lr
 8022ea2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8022ea6:	d121      	bne.n	8022eec <scalbnf+0x60>
 8022ea8:	4b29      	ldr	r3, [pc, #164]	; (8022f50 <scalbnf+0xc4>)
 8022eaa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8022f54 <scalbnf+0xc8>
 8022eae:	4298      	cmp	r0, r3
 8022eb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022eb4:	db15      	blt.n	8022ee2 <scalbnf+0x56>
 8022eb6:	ee10 3a10 	vmov	r3, s0
 8022eba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022ebe:	3a19      	subs	r2, #25
 8022ec0:	4402      	add	r2, r0
 8022ec2:	2afe      	cmp	r2, #254	; 0xfe
 8022ec4:	dd14      	ble.n	8022ef0 <scalbnf+0x64>
 8022ec6:	ee10 3a10 	vmov	r3, s0
 8022eca:	eddf 7a23 	vldr	s15, [pc, #140]	; 8022f58 <scalbnf+0xcc>
 8022ece:	eddf 6a23 	vldr	s13, [pc, #140]	; 8022f5c <scalbnf+0xd0>
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	eeb0 7a67 	vmov.f32	s14, s15
 8022ed8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8022edc:	ee27 0a27 	vmul.f32	s0, s14, s15
 8022ee0:	4770      	bx	lr
 8022ee2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8022f60 <scalbnf+0xd4>
 8022ee6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022eea:	4770      	bx	lr
 8022eec:	0dd2      	lsrs	r2, r2, #23
 8022eee:	e7e7      	b.n	8022ec0 <scalbnf+0x34>
 8022ef0:	2a00      	cmp	r2, #0
 8022ef2:	dd06      	ble.n	8022f02 <scalbnf+0x76>
 8022ef4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022ef8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022efc:	ee00 3a10 	vmov	s0, r3
 8022f00:	4770      	bx	lr
 8022f02:	f112 0f16 	cmn.w	r2, #22
 8022f06:	da19      	bge.n	8022f3c <scalbnf+0xb0>
 8022f08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022f0c:	4298      	cmp	r0, r3
 8022f0e:	ee10 3a10 	vmov	r3, s0
 8022f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022f16:	dd09      	ble.n	8022f2c <scalbnf+0xa0>
 8022f18:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8022f58 <scalbnf+0xcc>
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8022f5c <scalbnf+0xd0>
 8022f22:	eef0 7a40 	vmov.f32	s15, s0
 8022f26:	fe00 0a07 	vseleq.f32	s0, s0, s14
 8022f2a:	e7dc      	b.n	8022ee6 <scalbnf+0x5a>
 8022f2c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8022f60 <scalbnf+0xd4>
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8022f64 <scalbnf+0xd8>
 8022f36:	eef0 7a40 	vmov.f32	s15, s0
 8022f3a:	e7f4      	b.n	8022f26 <scalbnf+0x9a>
 8022f3c:	3219      	adds	r2, #25
 8022f3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022f42:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022f68 <scalbnf+0xdc>
 8022f46:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022f4a:	ee07 3a10 	vmov	s14, r3
 8022f4e:	e7c5      	b.n	8022edc <scalbnf+0x50>
 8022f50:	ffff3cb0 	.word	0xffff3cb0
 8022f54:	4c000000 	.word	0x4c000000
 8022f58:	7149f2ca 	.word	0x7149f2ca
 8022f5c:	f149f2ca 	.word	0xf149f2ca
 8022f60:	0da24260 	.word	0x0da24260
 8022f64:	8da24260 	.word	0x8da24260
 8022f68:	33000000 	.word	0x33000000

08022f6c <abort>:
 8022f6c:	2006      	movs	r0, #6
 8022f6e:	b508      	push	{r3, lr}
 8022f70:	f000 fe04 	bl	8023b7c <raise>
 8022f74:	2001      	movs	r0, #1
 8022f76:	f7de fe5d 	bl	8001c34 <_exit>
	...

08022f7c <__assert_func>:
 8022f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f7e:	4614      	mov	r4, r2
 8022f80:	461a      	mov	r2, r3
 8022f82:	4b09      	ldr	r3, [pc, #36]	; (8022fa8 <__assert_func+0x2c>)
 8022f84:	4605      	mov	r5, r0
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	68d8      	ldr	r0, [r3, #12]
 8022f8a:	b14c      	cbz	r4, 8022fa0 <__assert_func+0x24>
 8022f8c:	4b07      	ldr	r3, [pc, #28]	; (8022fac <__assert_func+0x30>)
 8022f8e:	9100      	str	r1, [sp, #0]
 8022f90:	4907      	ldr	r1, [pc, #28]	; (8022fb0 <__assert_func+0x34>)
 8022f92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f96:	462b      	mov	r3, r5
 8022f98:	f000 f8fe 	bl	8023198 <fiprintf>
 8022f9c:	f7ff ffe6 	bl	8022f6c <abort>
 8022fa0:	4b04      	ldr	r3, [pc, #16]	; (8022fb4 <__assert_func+0x38>)
 8022fa2:	461c      	mov	r4, r3
 8022fa4:	e7f3      	b.n	8022f8e <__assert_func+0x12>
 8022fa6:	bf00      	nop
 8022fa8:	20000094 	.word	0x20000094
 8022fac:	08026230 	.word	0x08026230
 8022fb0:	0802623d 	.word	0x0802623d
 8022fb4:	0802626b 	.word	0x0802626b

08022fb8 <atexit>:
 8022fb8:	2300      	movs	r3, #0
 8022fba:	4601      	mov	r1, r0
 8022fbc:	461a      	mov	r2, r3
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	f000 bf0e 	b.w	8023de0 <__register_exitproc>

08022fc4 <__cxa_atexit>:
 8022fc4:	b510      	push	{r4, lr}
 8022fc6:	4c05      	ldr	r4, [pc, #20]	; (8022fdc <__cxa_atexit+0x18>)
 8022fc8:	4613      	mov	r3, r2
 8022fca:	b12c      	cbz	r4, 8022fd8 <__cxa_atexit+0x14>
 8022fcc:	460a      	mov	r2, r1
 8022fce:	4601      	mov	r1, r0
 8022fd0:	2002      	movs	r0, #2
 8022fd2:	f000 ff05 	bl	8023de0 <__register_exitproc>
 8022fd6:	bd10      	pop	{r4, pc}
 8022fd8:	4620      	mov	r0, r4
 8022fda:	e7fc      	b.n	8022fd6 <__cxa_atexit+0x12>
 8022fdc:	08023de1 	.word	0x08023de1

08022fe0 <__errno>:
 8022fe0:	4b01      	ldr	r3, [pc, #4]	; (8022fe8 <__errno+0x8>)
 8022fe2:	6818      	ldr	r0, [r3, #0]
 8022fe4:	4770      	bx	lr
 8022fe6:	bf00      	nop
 8022fe8:	20000094 	.word	0x20000094

08022fec <std>:
 8022fec:	2300      	movs	r3, #0
 8022fee:	b510      	push	{r4, lr}
 8022ff0:	4604      	mov	r4, r0
 8022ff2:	6083      	str	r3, [r0, #8]
 8022ff4:	8181      	strh	r1, [r0, #12]
 8022ff6:	4619      	mov	r1, r3
 8022ff8:	6643      	str	r3, [r0, #100]	; 0x64
 8022ffa:	81c2      	strh	r2, [r0, #14]
 8022ffc:	2208      	movs	r2, #8
 8022ffe:	6183      	str	r3, [r0, #24]
 8023000:	e9c0 3300 	strd	r3, r3, [r0]
 8023004:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023008:	305c      	adds	r0, #92	; 0x5c
 802300a:	f000 f93c 	bl	8023286 <memset>
 802300e:	4b05      	ldr	r3, [pc, #20]	; (8023024 <std+0x38>)
 8023010:	6224      	str	r4, [r4, #32]
 8023012:	6263      	str	r3, [r4, #36]	; 0x24
 8023014:	4b04      	ldr	r3, [pc, #16]	; (8023028 <std+0x3c>)
 8023016:	62a3      	str	r3, [r4, #40]	; 0x28
 8023018:	4b04      	ldr	r3, [pc, #16]	; (802302c <std+0x40>)
 802301a:	62e3      	str	r3, [r4, #44]	; 0x2c
 802301c:	4b04      	ldr	r3, [pc, #16]	; (8023030 <std+0x44>)
 802301e:	6323      	str	r3, [r4, #48]	; 0x30
 8023020:	bd10      	pop	{r4, pc}
 8023022:	bf00      	nop
 8023024:	08023bb5 	.word	0x08023bb5
 8023028:	08023bd7 	.word	0x08023bd7
 802302c:	08023c0f 	.word	0x08023c0f
 8023030:	08023c33 	.word	0x08023c33

08023034 <_cleanup_r>:
 8023034:	4901      	ldr	r1, [pc, #4]	; (802303c <_cleanup_r+0x8>)
 8023036:	f000 b8c1 	b.w	80231bc <_fwalk_reent>
 802303a:	bf00      	nop
 802303c:	08023fd1 	.word	0x08023fd1

08023040 <__sfmoreglue>:
 8023040:	b570      	push	{r4, r5, r6, lr}
 8023042:	2268      	movs	r2, #104	; 0x68
 8023044:	1e4d      	subs	r5, r1, #1
 8023046:	460e      	mov	r6, r1
 8023048:	4355      	muls	r5, r2
 802304a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802304e:	f000 f98f 	bl	8023370 <_malloc_r>
 8023052:	4604      	mov	r4, r0
 8023054:	b140      	cbz	r0, 8023068 <__sfmoreglue+0x28>
 8023056:	2100      	movs	r1, #0
 8023058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802305c:	e9c0 1600 	strd	r1, r6, [r0]
 8023060:	300c      	adds	r0, #12
 8023062:	60a0      	str	r0, [r4, #8]
 8023064:	f000 f90f 	bl	8023286 <memset>
 8023068:	4620      	mov	r0, r4
 802306a:	bd70      	pop	{r4, r5, r6, pc}

0802306c <__sfp_lock_acquire>:
 802306c:	4801      	ldr	r0, [pc, #4]	; (8023074 <__sfp_lock_acquire+0x8>)
 802306e:	f000 b8ea 	b.w	8023246 <__retarget_lock_acquire_recursive>
 8023072:	bf00      	nop
 8023074:	2002018a 	.word	0x2002018a

08023078 <__sfp_lock_release>:
 8023078:	4801      	ldr	r0, [pc, #4]	; (8023080 <__sfp_lock_release+0x8>)
 802307a:	f000 b8e6 	b.w	802324a <__retarget_lock_release_recursive>
 802307e:	bf00      	nop
 8023080:	2002018a 	.word	0x2002018a

08023084 <__sinit_lock_acquire>:
 8023084:	4801      	ldr	r0, [pc, #4]	; (802308c <__sinit_lock_acquire+0x8>)
 8023086:	f000 b8de 	b.w	8023246 <__retarget_lock_acquire_recursive>
 802308a:	bf00      	nop
 802308c:	2002018b 	.word	0x2002018b

08023090 <__sinit_lock_release>:
 8023090:	4801      	ldr	r0, [pc, #4]	; (8023098 <__sinit_lock_release+0x8>)
 8023092:	f000 b8da 	b.w	802324a <__retarget_lock_release_recursive>
 8023096:	bf00      	nop
 8023098:	2002018b 	.word	0x2002018b

0802309c <__sinit>:
 802309c:	b510      	push	{r4, lr}
 802309e:	4604      	mov	r4, r0
 80230a0:	f7ff fff0 	bl	8023084 <__sinit_lock_acquire>
 80230a4:	69a3      	ldr	r3, [r4, #24]
 80230a6:	b11b      	cbz	r3, 80230b0 <__sinit+0x14>
 80230a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230ac:	f7ff bff0 	b.w	8023090 <__sinit_lock_release>
 80230b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80230b4:	6523      	str	r3, [r4, #80]	; 0x50
 80230b6:	4620      	mov	r0, r4
 80230b8:	4b12      	ldr	r3, [pc, #72]	; (8023104 <__sinit+0x68>)
 80230ba:	4a13      	ldr	r2, [pc, #76]	; (8023108 <__sinit+0x6c>)
 80230bc:	681b      	ldr	r3, [r3, #0]
 80230be:	62a2      	str	r2, [r4, #40]	; 0x28
 80230c0:	42a3      	cmp	r3, r4
 80230c2:	bf04      	itt	eq
 80230c4:	2301      	moveq	r3, #1
 80230c6:	61a3      	streq	r3, [r4, #24]
 80230c8:	f000 f820 	bl	802310c <__sfp>
 80230cc:	6060      	str	r0, [r4, #4]
 80230ce:	4620      	mov	r0, r4
 80230d0:	f000 f81c 	bl	802310c <__sfp>
 80230d4:	60a0      	str	r0, [r4, #8]
 80230d6:	4620      	mov	r0, r4
 80230d8:	f000 f818 	bl	802310c <__sfp>
 80230dc:	2200      	movs	r2, #0
 80230de:	2104      	movs	r1, #4
 80230e0:	60e0      	str	r0, [r4, #12]
 80230e2:	6860      	ldr	r0, [r4, #4]
 80230e4:	f7ff ff82 	bl	8022fec <std>
 80230e8:	2201      	movs	r2, #1
 80230ea:	2109      	movs	r1, #9
 80230ec:	68a0      	ldr	r0, [r4, #8]
 80230ee:	f7ff ff7d 	bl	8022fec <std>
 80230f2:	2202      	movs	r2, #2
 80230f4:	2112      	movs	r1, #18
 80230f6:	68e0      	ldr	r0, [r4, #12]
 80230f8:	f7ff ff78 	bl	8022fec <std>
 80230fc:	2301      	movs	r3, #1
 80230fe:	61a3      	str	r3, [r4, #24]
 8023100:	e7d2      	b.n	80230a8 <__sinit+0xc>
 8023102:	bf00      	nop
 8023104:	080262cc 	.word	0x080262cc
 8023108:	08023035 	.word	0x08023035

0802310c <__sfp>:
 802310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802310e:	4607      	mov	r7, r0
 8023110:	f7ff ffac 	bl	802306c <__sfp_lock_acquire>
 8023114:	4b1e      	ldr	r3, [pc, #120]	; (8023190 <__sfp+0x84>)
 8023116:	681e      	ldr	r6, [r3, #0]
 8023118:	69b3      	ldr	r3, [r6, #24]
 802311a:	b913      	cbnz	r3, 8023122 <__sfp+0x16>
 802311c:	4630      	mov	r0, r6
 802311e:	f7ff ffbd 	bl	802309c <__sinit>
 8023122:	3648      	adds	r6, #72	; 0x48
 8023124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023128:	3b01      	subs	r3, #1
 802312a:	d503      	bpl.n	8023134 <__sfp+0x28>
 802312c:	6833      	ldr	r3, [r6, #0]
 802312e:	b30b      	cbz	r3, 8023174 <__sfp+0x68>
 8023130:	6836      	ldr	r6, [r6, #0]
 8023132:	e7f7      	b.n	8023124 <__sfp+0x18>
 8023134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023138:	b9d5      	cbnz	r5, 8023170 <__sfp+0x64>
 802313a:	4b16      	ldr	r3, [pc, #88]	; (8023194 <__sfp+0x88>)
 802313c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023140:	6665      	str	r5, [r4, #100]	; 0x64
 8023142:	60e3      	str	r3, [r4, #12]
 8023144:	f000 f87e 	bl	8023244 <__retarget_lock_init_recursive>
 8023148:	f7ff ff96 	bl	8023078 <__sfp_lock_release>
 802314c:	2208      	movs	r2, #8
 802314e:	4629      	mov	r1, r5
 8023150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023154:	6025      	str	r5, [r4, #0]
 8023156:	61a5      	str	r5, [r4, #24]
 8023158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802315c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023160:	f000 f891 	bl	8023286 <memset>
 8023164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802316c:	4620      	mov	r0, r4
 802316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023170:	3468      	adds	r4, #104	; 0x68
 8023172:	e7d9      	b.n	8023128 <__sfp+0x1c>
 8023174:	2104      	movs	r1, #4
 8023176:	4638      	mov	r0, r7
 8023178:	f7ff ff62 	bl	8023040 <__sfmoreglue>
 802317c:	4604      	mov	r4, r0
 802317e:	6030      	str	r0, [r6, #0]
 8023180:	2800      	cmp	r0, #0
 8023182:	d1d5      	bne.n	8023130 <__sfp+0x24>
 8023184:	f7ff ff78 	bl	8023078 <__sfp_lock_release>
 8023188:	230c      	movs	r3, #12
 802318a:	603b      	str	r3, [r7, #0]
 802318c:	e7ee      	b.n	802316c <__sfp+0x60>
 802318e:	bf00      	nop
 8023190:	080262cc 	.word	0x080262cc
 8023194:	ffff0001 	.word	0xffff0001

08023198 <fiprintf>:
 8023198:	b40e      	push	{r1, r2, r3}
 802319a:	b503      	push	{r0, r1, lr}
 802319c:	ab03      	add	r3, sp, #12
 802319e:	4601      	mov	r1, r0
 80231a0:	4805      	ldr	r0, [pc, #20]	; (80231b8 <fiprintf+0x20>)
 80231a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80231a6:	6800      	ldr	r0, [r0, #0]
 80231a8:	9301      	str	r3, [sp, #4]
 80231aa:	f000 f97f 	bl	80234ac <_vfiprintf_r>
 80231ae:	b002      	add	sp, #8
 80231b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80231b4:	b003      	add	sp, #12
 80231b6:	4770      	bx	lr
 80231b8:	20000094 	.word	0x20000094

080231bc <_fwalk_reent>:
 80231bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231c0:	4606      	mov	r6, r0
 80231c2:	4688      	mov	r8, r1
 80231c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80231c8:	2700      	movs	r7, #0
 80231ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231ce:	f1b9 0901 	subs.w	r9, r9, #1
 80231d2:	d505      	bpl.n	80231e0 <_fwalk_reent+0x24>
 80231d4:	6824      	ldr	r4, [r4, #0]
 80231d6:	2c00      	cmp	r4, #0
 80231d8:	d1f7      	bne.n	80231ca <_fwalk_reent+0xe>
 80231da:	4638      	mov	r0, r7
 80231dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231e0:	89ab      	ldrh	r3, [r5, #12]
 80231e2:	2b01      	cmp	r3, #1
 80231e4:	d907      	bls.n	80231f6 <_fwalk_reent+0x3a>
 80231e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80231ea:	3301      	adds	r3, #1
 80231ec:	d003      	beq.n	80231f6 <_fwalk_reent+0x3a>
 80231ee:	4629      	mov	r1, r5
 80231f0:	4630      	mov	r0, r6
 80231f2:	47c0      	blx	r8
 80231f4:	4307      	orrs	r7, r0
 80231f6:	3568      	adds	r5, #104	; 0x68
 80231f8:	e7e9      	b.n	80231ce <_fwalk_reent+0x12>
	...

080231fc <__libc_init_array>:
 80231fc:	b570      	push	{r4, r5, r6, lr}
 80231fe:	4d0d      	ldr	r5, [pc, #52]	; (8023234 <__libc_init_array+0x38>)
 8023200:	2600      	movs	r6, #0
 8023202:	4c0d      	ldr	r4, [pc, #52]	; (8023238 <__libc_init_array+0x3c>)
 8023204:	1b64      	subs	r4, r4, r5
 8023206:	10a4      	asrs	r4, r4, #2
 8023208:	42a6      	cmp	r6, r4
 802320a:	d109      	bne.n	8023220 <__libc_init_array+0x24>
 802320c:	4d0b      	ldr	r5, [pc, #44]	; (802323c <__libc_init_array+0x40>)
 802320e:	2600      	movs	r6, #0
 8023210:	4c0b      	ldr	r4, [pc, #44]	; (8023240 <__libc_init_array+0x44>)
 8023212:	f000 ffdf 	bl	80241d4 <_init>
 8023216:	1b64      	subs	r4, r4, r5
 8023218:	10a4      	asrs	r4, r4, #2
 802321a:	42a6      	cmp	r6, r4
 802321c:	d105      	bne.n	802322a <__libc_init_array+0x2e>
 802321e:	bd70      	pop	{r4, r5, r6, pc}
 8023220:	f855 3b04 	ldr.w	r3, [r5], #4
 8023224:	3601      	adds	r6, #1
 8023226:	4798      	blx	r3
 8023228:	e7ee      	b.n	8023208 <__libc_init_array+0xc>
 802322a:	f855 3b04 	ldr.w	r3, [r5], #4
 802322e:	3601      	adds	r6, #1
 8023230:	4798      	blx	r3
 8023232:	e7f2      	b.n	802321a <__libc_init_array+0x1e>
 8023234:	080623f8 	.word	0x080623f8
 8023238:	080623f8 	.word	0x080623f8
 802323c:	080623f8 	.word	0x080623f8
 8023240:	0806240c 	.word	0x0806240c

08023244 <__retarget_lock_init_recursive>:
 8023244:	4770      	bx	lr

08023246 <__retarget_lock_acquire_recursive>:
 8023246:	4770      	bx	lr

08023248 <__retarget_lock_release>:
 8023248:	4770      	bx	lr

0802324a <__retarget_lock_release_recursive>:
 802324a:	4770      	bx	lr

0802324c <malloc>:
 802324c:	4b02      	ldr	r3, [pc, #8]	; (8023258 <malloc+0xc>)
 802324e:	4601      	mov	r1, r0
 8023250:	6818      	ldr	r0, [r3, #0]
 8023252:	f000 b88d 	b.w	8023370 <_malloc_r>
 8023256:	bf00      	nop
 8023258:	20000094 	.word	0x20000094

0802325c <free>:
 802325c:	4b02      	ldr	r3, [pc, #8]	; (8023268 <free+0xc>)
 802325e:	4601      	mov	r1, r0
 8023260:	6818      	ldr	r0, [r3, #0]
 8023262:	f000 b819 	b.w	8023298 <_free_r>
 8023266:	bf00      	nop
 8023268:	20000094 	.word	0x20000094

0802326c <memcpy>:
 802326c:	440a      	add	r2, r1
 802326e:	1e43      	subs	r3, r0, #1
 8023270:	4291      	cmp	r1, r2
 8023272:	d100      	bne.n	8023276 <memcpy+0xa>
 8023274:	4770      	bx	lr
 8023276:	b510      	push	{r4, lr}
 8023278:	f811 4b01 	ldrb.w	r4, [r1], #1
 802327c:	4291      	cmp	r1, r2
 802327e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023282:	d1f9      	bne.n	8023278 <memcpy+0xc>
 8023284:	bd10      	pop	{r4, pc}

08023286 <memset>:
 8023286:	4402      	add	r2, r0
 8023288:	4603      	mov	r3, r0
 802328a:	4293      	cmp	r3, r2
 802328c:	d100      	bne.n	8023290 <memset+0xa>
 802328e:	4770      	bx	lr
 8023290:	f803 1b01 	strb.w	r1, [r3], #1
 8023294:	e7f9      	b.n	802328a <memset+0x4>
	...

08023298 <_free_r>:
 8023298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802329a:	2900      	cmp	r1, #0
 802329c:	d043      	beq.n	8023326 <_free_r+0x8e>
 802329e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80232a2:	1f0c      	subs	r4, r1, #4
 80232a4:	9001      	str	r0, [sp, #4]
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	bfb8      	it	lt
 80232aa:	18e4      	addlt	r4, r4, r3
 80232ac:	f000 ff52 	bl	8024154 <__malloc_lock>
 80232b0:	4a1e      	ldr	r2, [pc, #120]	; (802332c <_free_r+0x94>)
 80232b2:	9801      	ldr	r0, [sp, #4]
 80232b4:	6813      	ldr	r3, [r2, #0]
 80232b6:	b933      	cbnz	r3, 80232c6 <_free_r+0x2e>
 80232b8:	6063      	str	r3, [r4, #4]
 80232ba:	6014      	str	r4, [r2, #0]
 80232bc:	b003      	add	sp, #12
 80232be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80232c2:	f000 bf4d 	b.w	8024160 <__malloc_unlock>
 80232c6:	42a3      	cmp	r3, r4
 80232c8:	d908      	bls.n	80232dc <_free_r+0x44>
 80232ca:	6825      	ldr	r5, [r4, #0]
 80232cc:	1961      	adds	r1, r4, r5
 80232ce:	428b      	cmp	r3, r1
 80232d0:	bf01      	itttt	eq
 80232d2:	6819      	ldreq	r1, [r3, #0]
 80232d4:	685b      	ldreq	r3, [r3, #4]
 80232d6:	1949      	addeq	r1, r1, r5
 80232d8:	6021      	streq	r1, [r4, #0]
 80232da:	e7ed      	b.n	80232b8 <_free_r+0x20>
 80232dc:	461a      	mov	r2, r3
 80232de:	685b      	ldr	r3, [r3, #4]
 80232e0:	b10b      	cbz	r3, 80232e6 <_free_r+0x4e>
 80232e2:	42a3      	cmp	r3, r4
 80232e4:	d9fa      	bls.n	80232dc <_free_r+0x44>
 80232e6:	6811      	ldr	r1, [r2, #0]
 80232e8:	1855      	adds	r5, r2, r1
 80232ea:	42a5      	cmp	r5, r4
 80232ec:	d10b      	bne.n	8023306 <_free_r+0x6e>
 80232ee:	6824      	ldr	r4, [r4, #0]
 80232f0:	4421      	add	r1, r4
 80232f2:	1854      	adds	r4, r2, r1
 80232f4:	6011      	str	r1, [r2, #0]
 80232f6:	42a3      	cmp	r3, r4
 80232f8:	d1e0      	bne.n	80232bc <_free_r+0x24>
 80232fa:	681c      	ldr	r4, [r3, #0]
 80232fc:	685b      	ldr	r3, [r3, #4]
 80232fe:	4421      	add	r1, r4
 8023300:	6053      	str	r3, [r2, #4]
 8023302:	6011      	str	r1, [r2, #0]
 8023304:	e7da      	b.n	80232bc <_free_r+0x24>
 8023306:	d902      	bls.n	802330e <_free_r+0x76>
 8023308:	230c      	movs	r3, #12
 802330a:	6003      	str	r3, [r0, #0]
 802330c:	e7d6      	b.n	80232bc <_free_r+0x24>
 802330e:	6825      	ldr	r5, [r4, #0]
 8023310:	1961      	adds	r1, r4, r5
 8023312:	428b      	cmp	r3, r1
 8023314:	bf02      	ittt	eq
 8023316:	6819      	ldreq	r1, [r3, #0]
 8023318:	685b      	ldreq	r3, [r3, #4]
 802331a:	1949      	addeq	r1, r1, r5
 802331c:	6063      	str	r3, [r4, #4]
 802331e:	bf08      	it	eq
 8023320:	6021      	streq	r1, [r4, #0]
 8023322:	6054      	str	r4, [r2, #4]
 8023324:	e7ca      	b.n	80232bc <_free_r+0x24>
 8023326:	b003      	add	sp, #12
 8023328:	bd30      	pop	{r4, r5, pc}
 802332a:	bf00      	nop
 802332c:	2002018c 	.word	0x2002018c

08023330 <sbrk_aligned>:
 8023330:	b570      	push	{r4, r5, r6, lr}
 8023332:	4e0e      	ldr	r6, [pc, #56]	; (802336c <sbrk_aligned+0x3c>)
 8023334:	460c      	mov	r4, r1
 8023336:	4605      	mov	r5, r0
 8023338:	6831      	ldr	r1, [r6, #0]
 802333a:	b911      	cbnz	r1, 8023342 <sbrk_aligned+0x12>
 802333c:	f000 fbe6 	bl	8023b0c <_sbrk_r>
 8023340:	6030      	str	r0, [r6, #0]
 8023342:	4621      	mov	r1, r4
 8023344:	4628      	mov	r0, r5
 8023346:	f000 fbe1 	bl	8023b0c <_sbrk_r>
 802334a:	1c43      	adds	r3, r0, #1
 802334c:	d00a      	beq.n	8023364 <sbrk_aligned+0x34>
 802334e:	1cc4      	adds	r4, r0, #3
 8023350:	f024 0403 	bic.w	r4, r4, #3
 8023354:	42a0      	cmp	r0, r4
 8023356:	d007      	beq.n	8023368 <sbrk_aligned+0x38>
 8023358:	1a21      	subs	r1, r4, r0
 802335a:	4628      	mov	r0, r5
 802335c:	f000 fbd6 	bl	8023b0c <_sbrk_r>
 8023360:	3001      	adds	r0, #1
 8023362:	d101      	bne.n	8023368 <sbrk_aligned+0x38>
 8023364:	f04f 34ff 	mov.w	r4, #4294967295
 8023368:	4620      	mov	r0, r4
 802336a:	bd70      	pop	{r4, r5, r6, pc}
 802336c:	20020190 	.word	0x20020190

08023370 <_malloc_r>:
 8023370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023374:	1ccd      	adds	r5, r1, #3
 8023376:	4607      	mov	r7, r0
 8023378:	f025 0503 	bic.w	r5, r5, #3
 802337c:	3508      	adds	r5, #8
 802337e:	2d0c      	cmp	r5, #12
 8023380:	bf38      	it	cc
 8023382:	250c      	movcc	r5, #12
 8023384:	2d00      	cmp	r5, #0
 8023386:	db01      	blt.n	802338c <_malloc_r+0x1c>
 8023388:	42a9      	cmp	r1, r5
 802338a:	d905      	bls.n	8023398 <_malloc_r+0x28>
 802338c:	230c      	movs	r3, #12
 802338e:	2600      	movs	r6, #0
 8023390:	603b      	str	r3, [r7, #0]
 8023392:	4630      	mov	r0, r6
 8023394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023398:	4e2e      	ldr	r6, [pc, #184]	; (8023454 <_malloc_r+0xe4>)
 802339a:	f000 fedb 	bl	8024154 <__malloc_lock>
 802339e:	6833      	ldr	r3, [r6, #0]
 80233a0:	461c      	mov	r4, r3
 80233a2:	bb34      	cbnz	r4, 80233f2 <_malloc_r+0x82>
 80233a4:	4629      	mov	r1, r5
 80233a6:	4638      	mov	r0, r7
 80233a8:	f7ff ffc2 	bl	8023330 <sbrk_aligned>
 80233ac:	1c43      	adds	r3, r0, #1
 80233ae:	4604      	mov	r4, r0
 80233b0:	d14d      	bne.n	802344e <_malloc_r+0xde>
 80233b2:	6834      	ldr	r4, [r6, #0]
 80233b4:	4626      	mov	r6, r4
 80233b6:	2e00      	cmp	r6, #0
 80233b8:	d140      	bne.n	802343c <_malloc_r+0xcc>
 80233ba:	6823      	ldr	r3, [r4, #0]
 80233bc:	4631      	mov	r1, r6
 80233be:	4638      	mov	r0, r7
 80233c0:	eb04 0803 	add.w	r8, r4, r3
 80233c4:	f000 fba2 	bl	8023b0c <_sbrk_r>
 80233c8:	4580      	cmp	r8, r0
 80233ca:	d13a      	bne.n	8023442 <_malloc_r+0xd2>
 80233cc:	6821      	ldr	r1, [r4, #0]
 80233ce:	3503      	adds	r5, #3
 80233d0:	4638      	mov	r0, r7
 80233d2:	1a6d      	subs	r5, r5, r1
 80233d4:	f025 0503 	bic.w	r5, r5, #3
 80233d8:	3508      	adds	r5, #8
 80233da:	2d0c      	cmp	r5, #12
 80233dc:	bf38      	it	cc
 80233de:	250c      	movcc	r5, #12
 80233e0:	4629      	mov	r1, r5
 80233e2:	f7ff ffa5 	bl	8023330 <sbrk_aligned>
 80233e6:	3001      	adds	r0, #1
 80233e8:	d02b      	beq.n	8023442 <_malloc_r+0xd2>
 80233ea:	6823      	ldr	r3, [r4, #0]
 80233ec:	442b      	add	r3, r5
 80233ee:	6023      	str	r3, [r4, #0]
 80233f0:	e00e      	b.n	8023410 <_malloc_r+0xa0>
 80233f2:	6822      	ldr	r2, [r4, #0]
 80233f4:	1b52      	subs	r2, r2, r5
 80233f6:	d41e      	bmi.n	8023436 <_malloc_r+0xc6>
 80233f8:	2a0b      	cmp	r2, #11
 80233fa:	d916      	bls.n	802342a <_malloc_r+0xba>
 80233fc:	1961      	adds	r1, r4, r5
 80233fe:	42a3      	cmp	r3, r4
 8023400:	6025      	str	r5, [r4, #0]
 8023402:	bf18      	it	ne
 8023404:	6059      	strne	r1, [r3, #4]
 8023406:	6863      	ldr	r3, [r4, #4]
 8023408:	bf08      	it	eq
 802340a:	6031      	streq	r1, [r6, #0]
 802340c:	5162      	str	r2, [r4, r5]
 802340e:	604b      	str	r3, [r1, #4]
 8023410:	f104 060b 	add.w	r6, r4, #11
 8023414:	4638      	mov	r0, r7
 8023416:	f000 fea3 	bl	8024160 <__malloc_unlock>
 802341a:	1d23      	adds	r3, r4, #4
 802341c:	f026 0607 	bic.w	r6, r6, #7
 8023420:	1af2      	subs	r2, r6, r3
 8023422:	d0b6      	beq.n	8023392 <_malloc_r+0x22>
 8023424:	1b9b      	subs	r3, r3, r6
 8023426:	50a3      	str	r3, [r4, r2]
 8023428:	e7b3      	b.n	8023392 <_malloc_r+0x22>
 802342a:	6862      	ldr	r2, [r4, #4]
 802342c:	42a3      	cmp	r3, r4
 802342e:	bf0c      	ite	eq
 8023430:	6032      	streq	r2, [r6, #0]
 8023432:	605a      	strne	r2, [r3, #4]
 8023434:	e7ec      	b.n	8023410 <_malloc_r+0xa0>
 8023436:	4623      	mov	r3, r4
 8023438:	6864      	ldr	r4, [r4, #4]
 802343a:	e7b2      	b.n	80233a2 <_malloc_r+0x32>
 802343c:	4634      	mov	r4, r6
 802343e:	6876      	ldr	r6, [r6, #4]
 8023440:	e7b9      	b.n	80233b6 <_malloc_r+0x46>
 8023442:	230c      	movs	r3, #12
 8023444:	4638      	mov	r0, r7
 8023446:	603b      	str	r3, [r7, #0]
 8023448:	f000 fe8a 	bl	8024160 <__malloc_unlock>
 802344c:	e7a1      	b.n	8023392 <_malloc_r+0x22>
 802344e:	6025      	str	r5, [r4, #0]
 8023450:	e7de      	b.n	8023410 <_malloc_r+0xa0>
 8023452:	bf00      	nop
 8023454:	2002018c 	.word	0x2002018c

08023458 <__sfputc_r>:
 8023458:	6893      	ldr	r3, [r2, #8]
 802345a:	3b01      	subs	r3, #1
 802345c:	2b00      	cmp	r3, #0
 802345e:	6093      	str	r3, [r2, #8]
 8023460:	b410      	push	{r4}
 8023462:	da08      	bge.n	8023476 <__sfputc_r+0x1e>
 8023464:	6994      	ldr	r4, [r2, #24]
 8023466:	42a3      	cmp	r3, r4
 8023468:	db01      	blt.n	802346e <__sfputc_r+0x16>
 802346a:	290a      	cmp	r1, #10
 802346c:	d103      	bne.n	8023476 <__sfputc_r+0x1e>
 802346e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023472:	f000 bbe3 	b.w	8023c3c <__swbuf_r>
 8023476:	6813      	ldr	r3, [r2, #0]
 8023478:	1c58      	adds	r0, r3, #1
 802347a:	6010      	str	r0, [r2, #0]
 802347c:	4608      	mov	r0, r1
 802347e:	7019      	strb	r1, [r3, #0]
 8023480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023484:	4770      	bx	lr

08023486 <__sfputs_r>:
 8023486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023488:	4606      	mov	r6, r0
 802348a:	460f      	mov	r7, r1
 802348c:	4614      	mov	r4, r2
 802348e:	18d5      	adds	r5, r2, r3
 8023490:	42ac      	cmp	r4, r5
 8023492:	d101      	bne.n	8023498 <__sfputs_r+0x12>
 8023494:	2000      	movs	r0, #0
 8023496:	e007      	b.n	80234a8 <__sfputs_r+0x22>
 8023498:	463a      	mov	r2, r7
 802349a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802349e:	4630      	mov	r0, r6
 80234a0:	f7ff ffda 	bl	8023458 <__sfputc_r>
 80234a4:	1c43      	adds	r3, r0, #1
 80234a6:	d1f3      	bne.n	8023490 <__sfputs_r+0xa>
 80234a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080234ac <_vfiprintf_r>:
 80234ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234b0:	460d      	mov	r5, r1
 80234b2:	b09d      	sub	sp, #116	; 0x74
 80234b4:	4614      	mov	r4, r2
 80234b6:	4698      	mov	r8, r3
 80234b8:	4606      	mov	r6, r0
 80234ba:	b118      	cbz	r0, 80234c4 <_vfiprintf_r+0x18>
 80234bc:	6983      	ldr	r3, [r0, #24]
 80234be:	b90b      	cbnz	r3, 80234c4 <_vfiprintf_r+0x18>
 80234c0:	f7ff fdec 	bl	802309c <__sinit>
 80234c4:	4b89      	ldr	r3, [pc, #548]	; (80236ec <_vfiprintf_r+0x240>)
 80234c6:	429d      	cmp	r5, r3
 80234c8:	d11b      	bne.n	8023502 <_vfiprintf_r+0x56>
 80234ca:	6875      	ldr	r5, [r6, #4]
 80234cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234ce:	07d9      	lsls	r1, r3, #31
 80234d0:	d405      	bmi.n	80234de <_vfiprintf_r+0x32>
 80234d2:	89ab      	ldrh	r3, [r5, #12]
 80234d4:	059a      	lsls	r2, r3, #22
 80234d6:	d402      	bmi.n	80234de <_vfiprintf_r+0x32>
 80234d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234da:	f7ff feb4 	bl	8023246 <__retarget_lock_acquire_recursive>
 80234de:	89ab      	ldrh	r3, [r5, #12]
 80234e0:	071b      	lsls	r3, r3, #28
 80234e2:	d501      	bpl.n	80234e8 <_vfiprintf_r+0x3c>
 80234e4:	692b      	ldr	r3, [r5, #16]
 80234e6:	b9eb      	cbnz	r3, 8023524 <_vfiprintf_r+0x78>
 80234e8:	4629      	mov	r1, r5
 80234ea:	4630      	mov	r0, r6
 80234ec:	f000 fc0a 	bl	8023d04 <__swsetup_r>
 80234f0:	b1c0      	cbz	r0, 8023524 <_vfiprintf_r+0x78>
 80234f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234f4:	07dc      	lsls	r4, r3, #31
 80234f6:	d50e      	bpl.n	8023516 <_vfiprintf_r+0x6a>
 80234f8:	f04f 30ff 	mov.w	r0, #4294967295
 80234fc:	b01d      	add	sp, #116	; 0x74
 80234fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023502:	4b7b      	ldr	r3, [pc, #492]	; (80236f0 <_vfiprintf_r+0x244>)
 8023504:	429d      	cmp	r5, r3
 8023506:	d101      	bne.n	802350c <_vfiprintf_r+0x60>
 8023508:	68b5      	ldr	r5, [r6, #8]
 802350a:	e7df      	b.n	80234cc <_vfiprintf_r+0x20>
 802350c:	4b79      	ldr	r3, [pc, #484]	; (80236f4 <_vfiprintf_r+0x248>)
 802350e:	429d      	cmp	r5, r3
 8023510:	bf08      	it	eq
 8023512:	68f5      	ldreq	r5, [r6, #12]
 8023514:	e7da      	b.n	80234cc <_vfiprintf_r+0x20>
 8023516:	89ab      	ldrh	r3, [r5, #12]
 8023518:	0598      	lsls	r0, r3, #22
 802351a:	d4ed      	bmi.n	80234f8 <_vfiprintf_r+0x4c>
 802351c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802351e:	f7ff fe94 	bl	802324a <__retarget_lock_release_recursive>
 8023522:	e7e9      	b.n	80234f8 <_vfiprintf_r+0x4c>
 8023524:	2300      	movs	r3, #0
 8023526:	f8cd 800c 	str.w	r8, [sp, #12]
 802352a:	f04f 0901 	mov.w	r9, #1
 802352e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80236f8 <_vfiprintf_r+0x24c>
 8023532:	9309      	str	r3, [sp, #36]	; 0x24
 8023534:	2320      	movs	r3, #32
 8023536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802353a:	2330      	movs	r3, #48	; 0x30
 802353c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023540:	4623      	mov	r3, r4
 8023542:	469a      	mov	sl, r3
 8023544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023548:	b10a      	cbz	r2, 802354e <_vfiprintf_r+0xa2>
 802354a:	2a25      	cmp	r2, #37	; 0x25
 802354c:	d1f9      	bne.n	8023542 <_vfiprintf_r+0x96>
 802354e:	ebba 0b04 	subs.w	fp, sl, r4
 8023552:	d00b      	beq.n	802356c <_vfiprintf_r+0xc0>
 8023554:	465b      	mov	r3, fp
 8023556:	4622      	mov	r2, r4
 8023558:	4629      	mov	r1, r5
 802355a:	4630      	mov	r0, r6
 802355c:	f7ff ff93 	bl	8023486 <__sfputs_r>
 8023560:	3001      	adds	r0, #1
 8023562:	f000 80aa 	beq.w	80236ba <_vfiprintf_r+0x20e>
 8023566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023568:	445a      	add	r2, fp
 802356a:	9209      	str	r2, [sp, #36]	; 0x24
 802356c:	f89a 3000 	ldrb.w	r3, [sl]
 8023570:	2b00      	cmp	r3, #0
 8023572:	f000 80a2 	beq.w	80236ba <_vfiprintf_r+0x20e>
 8023576:	2300      	movs	r3, #0
 8023578:	f04f 32ff 	mov.w	r2, #4294967295
 802357c:	f10a 0a01 	add.w	sl, sl, #1
 8023580:	9304      	str	r3, [sp, #16]
 8023582:	9307      	str	r3, [sp, #28]
 8023584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023588:	931a      	str	r3, [sp, #104]	; 0x68
 802358a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802358e:	4654      	mov	r4, sl
 8023590:	2205      	movs	r2, #5
 8023592:	4859      	ldr	r0, [pc, #356]	; (80236f8 <_vfiprintf_r+0x24c>)
 8023594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023598:	f000 fdce 	bl	8024138 <memchr>
 802359c:	9a04      	ldr	r2, [sp, #16]
 802359e:	b9d8      	cbnz	r0, 80235d8 <_vfiprintf_r+0x12c>
 80235a0:	06d1      	lsls	r1, r2, #27
 80235a2:	bf44      	itt	mi
 80235a4:	2320      	movmi	r3, #32
 80235a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235aa:	0713      	lsls	r3, r2, #28
 80235ac:	bf44      	itt	mi
 80235ae:	232b      	movmi	r3, #43	; 0x2b
 80235b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235b4:	f89a 3000 	ldrb.w	r3, [sl]
 80235b8:	2b2a      	cmp	r3, #42	; 0x2a
 80235ba:	d015      	beq.n	80235e8 <_vfiprintf_r+0x13c>
 80235bc:	9a07      	ldr	r2, [sp, #28]
 80235be:	4654      	mov	r4, sl
 80235c0:	2000      	movs	r0, #0
 80235c2:	f04f 0c0a 	mov.w	ip, #10
 80235c6:	4621      	mov	r1, r4
 80235c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80235cc:	3b30      	subs	r3, #48	; 0x30
 80235ce:	2b09      	cmp	r3, #9
 80235d0:	d94e      	bls.n	8023670 <_vfiprintf_r+0x1c4>
 80235d2:	b1b0      	cbz	r0, 8023602 <_vfiprintf_r+0x156>
 80235d4:	9207      	str	r2, [sp, #28]
 80235d6:	e014      	b.n	8023602 <_vfiprintf_r+0x156>
 80235d8:	eba0 0308 	sub.w	r3, r0, r8
 80235dc:	46a2      	mov	sl, r4
 80235de:	fa09 f303 	lsl.w	r3, r9, r3
 80235e2:	4313      	orrs	r3, r2
 80235e4:	9304      	str	r3, [sp, #16]
 80235e6:	e7d2      	b.n	802358e <_vfiprintf_r+0xe2>
 80235e8:	9b03      	ldr	r3, [sp, #12]
 80235ea:	1d19      	adds	r1, r3, #4
 80235ec:	681b      	ldr	r3, [r3, #0]
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	9103      	str	r1, [sp, #12]
 80235f2:	bfbb      	ittet	lt
 80235f4:	425b      	neglt	r3, r3
 80235f6:	f042 0202 	orrlt.w	r2, r2, #2
 80235fa:	9307      	strge	r3, [sp, #28]
 80235fc:	9307      	strlt	r3, [sp, #28]
 80235fe:	bfb8      	it	lt
 8023600:	9204      	strlt	r2, [sp, #16]
 8023602:	7823      	ldrb	r3, [r4, #0]
 8023604:	2b2e      	cmp	r3, #46	; 0x2e
 8023606:	d10c      	bne.n	8023622 <_vfiprintf_r+0x176>
 8023608:	7863      	ldrb	r3, [r4, #1]
 802360a:	2b2a      	cmp	r3, #42	; 0x2a
 802360c:	d135      	bne.n	802367a <_vfiprintf_r+0x1ce>
 802360e:	9b03      	ldr	r3, [sp, #12]
 8023610:	3402      	adds	r4, #2
 8023612:	1d1a      	adds	r2, r3, #4
 8023614:	681b      	ldr	r3, [r3, #0]
 8023616:	2b00      	cmp	r3, #0
 8023618:	9203      	str	r2, [sp, #12]
 802361a:	bfb8      	it	lt
 802361c:	f04f 33ff 	movlt.w	r3, #4294967295
 8023620:	9305      	str	r3, [sp, #20]
 8023622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023708 <_vfiprintf_r+0x25c>
 8023626:	2203      	movs	r2, #3
 8023628:	7821      	ldrb	r1, [r4, #0]
 802362a:	4650      	mov	r0, sl
 802362c:	f000 fd84 	bl	8024138 <memchr>
 8023630:	b140      	cbz	r0, 8023644 <_vfiprintf_r+0x198>
 8023632:	2340      	movs	r3, #64	; 0x40
 8023634:	eba0 000a 	sub.w	r0, r0, sl
 8023638:	3401      	adds	r4, #1
 802363a:	fa03 f000 	lsl.w	r0, r3, r0
 802363e:	9b04      	ldr	r3, [sp, #16]
 8023640:	4303      	orrs	r3, r0
 8023642:	9304      	str	r3, [sp, #16]
 8023644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023648:	2206      	movs	r2, #6
 802364a:	482c      	ldr	r0, [pc, #176]	; (80236fc <_vfiprintf_r+0x250>)
 802364c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023650:	f000 fd72 	bl	8024138 <memchr>
 8023654:	2800      	cmp	r0, #0
 8023656:	d03f      	beq.n	80236d8 <_vfiprintf_r+0x22c>
 8023658:	4b29      	ldr	r3, [pc, #164]	; (8023700 <_vfiprintf_r+0x254>)
 802365a:	bb1b      	cbnz	r3, 80236a4 <_vfiprintf_r+0x1f8>
 802365c:	9b03      	ldr	r3, [sp, #12]
 802365e:	3307      	adds	r3, #7
 8023660:	f023 0307 	bic.w	r3, r3, #7
 8023664:	3308      	adds	r3, #8
 8023666:	9303      	str	r3, [sp, #12]
 8023668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802366a:	443b      	add	r3, r7
 802366c:	9309      	str	r3, [sp, #36]	; 0x24
 802366e:	e767      	b.n	8023540 <_vfiprintf_r+0x94>
 8023670:	fb0c 3202 	mla	r2, ip, r2, r3
 8023674:	460c      	mov	r4, r1
 8023676:	2001      	movs	r0, #1
 8023678:	e7a5      	b.n	80235c6 <_vfiprintf_r+0x11a>
 802367a:	2300      	movs	r3, #0
 802367c:	3401      	adds	r4, #1
 802367e:	f04f 0c0a 	mov.w	ip, #10
 8023682:	4619      	mov	r1, r3
 8023684:	9305      	str	r3, [sp, #20]
 8023686:	4620      	mov	r0, r4
 8023688:	f810 2b01 	ldrb.w	r2, [r0], #1
 802368c:	3a30      	subs	r2, #48	; 0x30
 802368e:	2a09      	cmp	r2, #9
 8023690:	d903      	bls.n	802369a <_vfiprintf_r+0x1ee>
 8023692:	2b00      	cmp	r3, #0
 8023694:	d0c5      	beq.n	8023622 <_vfiprintf_r+0x176>
 8023696:	9105      	str	r1, [sp, #20]
 8023698:	e7c3      	b.n	8023622 <_vfiprintf_r+0x176>
 802369a:	fb0c 2101 	mla	r1, ip, r1, r2
 802369e:	4604      	mov	r4, r0
 80236a0:	2301      	movs	r3, #1
 80236a2:	e7f0      	b.n	8023686 <_vfiprintf_r+0x1da>
 80236a4:	ab03      	add	r3, sp, #12
 80236a6:	462a      	mov	r2, r5
 80236a8:	a904      	add	r1, sp, #16
 80236aa:	4630      	mov	r0, r6
 80236ac:	9300      	str	r3, [sp, #0]
 80236ae:	4b15      	ldr	r3, [pc, #84]	; (8023704 <_vfiprintf_r+0x258>)
 80236b0:	e000      	b.n	80236b4 <_vfiprintf_r+0x208>
 80236b2:	bf00      	nop
 80236b4:	4607      	mov	r7, r0
 80236b6:	1c78      	adds	r0, r7, #1
 80236b8:	d1d6      	bne.n	8023668 <_vfiprintf_r+0x1bc>
 80236ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236bc:	07d9      	lsls	r1, r3, #31
 80236be:	d405      	bmi.n	80236cc <_vfiprintf_r+0x220>
 80236c0:	89ab      	ldrh	r3, [r5, #12]
 80236c2:	059a      	lsls	r2, r3, #22
 80236c4:	d402      	bmi.n	80236cc <_vfiprintf_r+0x220>
 80236c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236c8:	f7ff fdbf 	bl	802324a <__retarget_lock_release_recursive>
 80236cc:	89ab      	ldrh	r3, [r5, #12]
 80236ce:	065b      	lsls	r3, r3, #25
 80236d0:	f53f af12 	bmi.w	80234f8 <_vfiprintf_r+0x4c>
 80236d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236d6:	e711      	b.n	80234fc <_vfiprintf_r+0x50>
 80236d8:	ab03      	add	r3, sp, #12
 80236da:	462a      	mov	r2, r5
 80236dc:	a904      	add	r1, sp, #16
 80236de:	4630      	mov	r0, r6
 80236e0:	9300      	str	r3, [sp, #0]
 80236e2:	4b08      	ldr	r3, [pc, #32]	; (8023704 <_vfiprintf_r+0x258>)
 80236e4:	f000 f882 	bl	80237ec <_printf_i>
 80236e8:	e7e4      	b.n	80236b4 <_vfiprintf_r+0x208>
 80236ea:	bf00      	nop
 80236ec:	0802628c 	.word	0x0802628c
 80236f0:	080262ac 	.word	0x080262ac
 80236f4:	0802626c 	.word	0x0802626c
 80236f8:	080262d0 	.word	0x080262d0
 80236fc:	080262da 	.word	0x080262da
 8023700:	00000000 	.word	0x00000000
 8023704:	08023487 	.word	0x08023487
 8023708:	080262d6 	.word	0x080262d6

0802370c <_printf_common>:
 802370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023710:	4616      	mov	r6, r2
 8023712:	4699      	mov	r9, r3
 8023714:	688a      	ldr	r2, [r1, #8]
 8023716:	4607      	mov	r7, r0
 8023718:	690b      	ldr	r3, [r1, #16]
 802371a:	460c      	mov	r4, r1
 802371c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023720:	4293      	cmp	r3, r2
 8023722:	bfb8      	it	lt
 8023724:	4613      	movlt	r3, r2
 8023726:	6033      	str	r3, [r6, #0]
 8023728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802372c:	b10a      	cbz	r2, 8023732 <_printf_common+0x26>
 802372e:	3301      	adds	r3, #1
 8023730:	6033      	str	r3, [r6, #0]
 8023732:	6823      	ldr	r3, [r4, #0]
 8023734:	0699      	lsls	r1, r3, #26
 8023736:	bf42      	ittt	mi
 8023738:	6833      	ldrmi	r3, [r6, #0]
 802373a:	3302      	addmi	r3, #2
 802373c:	6033      	strmi	r3, [r6, #0]
 802373e:	6825      	ldr	r5, [r4, #0]
 8023740:	f015 0506 	ands.w	r5, r5, #6
 8023744:	d106      	bne.n	8023754 <_printf_common+0x48>
 8023746:	f104 0a19 	add.w	sl, r4, #25
 802374a:	68e3      	ldr	r3, [r4, #12]
 802374c:	6832      	ldr	r2, [r6, #0]
 802374e:	1a9b      	subs	r3, r3, r2
 8023750:	42ab      	cmp	r3, r5
 8023752:	dc29      	bgt.n	80237a8 <_printf_common+0x9c>
 8023754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023758:	1e13      	subs	r3, r2, #0
 802375a:	6822      	ldr	r2, [r4, #0]
 802375c:	bf18      	it	ne
 802375e:	2301      	movne	r3, #1
 8023760:	0692      	lsls	r2, r2, #26
 8023762:	d42e      	bmi.n	80237c2 <_printf_common+0xb6>
 8023764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023768:	4649      	mov	r1, r9
 802376a:	4638      	mov	r0, r7
 802376c:	47c0      	blx	r8
 802376e:	3001      	adds	r0, #1
 8023770:	d021      	beq.n	80237b6 <_printf_common+0xaa>
 8023772:	6823      	ldr	r3, [r4, #0]
 8023774:	341a      	adds	r4, #26
 8023776:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 802377a:	f003 0306 	and.w	r3, r3, #6
 802377e:	6832      	ldr	r2, [r6, #0]
 8023780:	2600      	movs	r6, #0
 8023782:	2b04      	cmp	r3, #4
 8023784:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8023788:	bf08      	it	eq
 802378a:	1aad      	subeq	r5, r5, r2
 802378c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8023790:	bf14      	ite	ne
 8023792:	2500      	movne	r5, #0
 8023794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023798:	4293      	cmp	r3, r2
 802379a:	bfc4      	itt	gt
 802379c:	1a9b      	subgt	r3, r3, r2
 802379e:	18ed      	addgt	r5, r5, r3
 80237a0:	42b5      	cmp	r5, r6
 80237a2:	d11a      	bne.n	80237da <_printf_common+0xce>
 80237a4:	2000      	movs	r0, #0
 80237a6:	e008      	b.n	80237ba <_printf_common+0xae>
 80237a8:	2301      	movs	r3, #1
 80237aa:	4652      	mov	r2, sl
 80237ac:	4649      	mov	r1, r9
 80237ae:	4638      	mov	r0, r7
 80237b0:	47c0      	blx	r8
 80237b2:	3001      	adds	r0, #1
 80237b4:	d103      	bne.n	80237be <_printf_common+0xb2>
 80237b6:	f04f 30ff 	mov.w	r0, #4294967295
 80237ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237be:	3501      	adds	r5, #1
 80237c0:	e7c3      	b.n	802374a <_printf_common+0x3e>
 80237c2:	18e1      	adds	r1, r4, r3
 80237c4:	1c5a      	adds	r2, r3, #1
 80237c6:	2030      	movs	r0, #48	; 0x30
 80237c8:	3302      	adds	r3, #2
 80237ca:	4422      	add	r2, r4
 80237cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80237d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80237d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80237d8:	e7c4      	b.n	8023764 <_printf_common+0x58>
 80237da:	2301      	movs	r3, #1
 80237dc:	4622      	mov	r2, r4
 80237de:	4649      	mov	r1, r9
 80237e0:	4638      	mov	r0, r7
 80237e2:	47c0      	blx	r8
 80237e4:	3001      	adds	r0, #1
 80237e6:	d0e6      	beq.n	80237b6 <_printf_common+0xaa>
 80237e8:	3601      	adds	r6, #1
 80237ea:	e7d9      	b.n	80237a0 <_printf_common+0x94>

080237ec <_printf_i>:
 80237ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80237f0:	7e0f      	ldrb	r7, [r1, #24]
 80237f2:	4691      	mov	r9, r2
 80237f4:	4680      	mov	r8, r0
 80237f6:	460c      	mov	r4, r1
 80237f8:	2f78      	cmp	r7, #120	; 0x78
 80237fa:	469a      	mov	sl, r3
 80237fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80237fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023802:	d807      	bhi.n	8023814 <_printf_i+0x28>
 8023804:	2f62      	cmp	r7, #98	; 0x62
 8023806:	d80a      	bhi.n	802381e <_printf_i+0x32>
 8023808:	2f00      	cmp	r7, #0
 802380a:	f000 80d8 	beq.w	80239be <_printf_i+0x1d2>
 802380e:	2f58      	cmp	r7, #88	; 0x58
 8023810:	f000 80a3 	beq.w	802395a <_printf_i+0x16e>
 8023814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802381c:	e03a      	b.n	8023894 <_printf_i+0xa8>
 802381e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023822:	2b15      	cmp	r3, #21
 8023824:	d8f6      	bhi.n	8023814 <_printf_i+0x28>
 8023826:	a101      	add	r1, pc, #4	; (adr r1, 802382c <_printf_i+0x40>)
 8023828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802382c:	08023885 	.word	0x08023885
 8023830:	08023899 	.word	0x08023899
 8023834:	08023815 	.word	0x08023815
 8023838:	08023815 	.word	0x08023815
 802383c:	08023815 	.word	0x08023815
 8023840:	08023815 	.word	0x08023815
 8023844:	08023899 	.word	0x08023899
 8023848:	08023815 	.word	0x08023815
 802384c:	08023815 	.word	0x08023815
 8023850:	08023815 	.word	0x08023815
 8023854:	08023815 	.word	0x08023815
 8023858:	080239a5 	.word	0x080239a5
 802385c:	080238c9 	.word	0x080238c9
 8023860:	08023987 	.word	0x08023987
 8023864:	08023815 	.word	0x08023815
 8023868:	08023815 	.word	0x08023815
 802386c:	080239c7 	.word	0x080239c7
 8023870:	08023815 	.word	0x08023815
 8023874:	080238c9 	.word	0x080238c9
 8023878:	08023815 	.word	0x08023815
 802387c:	08023815 	.word	0x08023815
 8023880:	0802398f 	.word	0x0802398f
 8023884:	682b      	ldr	r3, [r5, #0]
 8023886:	1d1a      	adds	r2, r3, #4
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	602a      	str	r2, [r5, #0]
 802388c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023894:	2301      	movs	r3, #1
 8023896:	e0a3      	b.n	80239e0 <_printf_i+0x1f4>
 8023898:	6820      	ldr	r0, [r4, #0]
 802389a:	6829      	ldr	r1, [r5, #0]
 802389c:	0606      	lsls	r6, r0, #24
 802389e:	f101 0304 	add.w	r3, r1, #4
 80238a2:	d50a      	bpl.n	80238ba <_printf_i+0xce>
 80238a4:	680e      	ldr	r6, [r1, #0]
 80238a6:	602b      	str	r3, [r5, #0]
 80238a8:	2e00      	cmp	r6, #0
 80238aa:	da03      	bge.n	80238b4 <_printf_i+0xc8>
 80238ac:	232d      	movs	r3, #45	; 0x2d
 80238ae:	4276      	negs	r6, r6
 80238b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80238b4:	485e      	ldr	r0, [pc, #376]	; (8023a30 <_printf_i+0x244>)
 80238b6:	230a      	movs	r3, #10
 80238b8:	e019      	b.n	80238ee <_printf_i+0x102>
 80238ba:	680e      	ldr	r6, [r1, #0]
 80238bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80238c0:	602b      	str	r3, [r5, #0]
 80238c2:	bf18      	it	ne
 80238c4:	b236      	sxthne	r6, r6
 80238c6:	e7ef      	b.n	80238a8 <_printf_i+0xbc>
 80238c8:	682b      	ldr	r3, [r5, #0]
 80238ca:	6820      	ldr	r0, [r4, #0]
 80238cc:	1d19      	adds	r1, r3, #4
 80238ce:	6029      	str	r1, [r5, #0]
 80238d0:	0601      	lsls	r1, r0, #24
 80238d2:	d501      	bpl.n	80238d8 <_printf_i+0xec>
 80238d4:	681e      	ldr	r6, [r3, #0]
 80238d6:	e002      	b.n	80238de <_printf_i+0xf2>
 80238d8:	0646      	lsls	r6, r0, #25
 80238da:	d5fb      	bpl.n	80238d4 <_printf_i+0xe8>
 80238dc:	881e      	ldrh	r6, [r3, #0]
 80238de:	2f6f      	cmp	r7, #111	; 0x6f
 80238e0:	4853      	ldr	r0, [pc, #332]	; (8023a30 <_printf_i+0x244>)
 80238e2:	bf0c      	ite	eq
 80238e4:	2308      	moveq	r3, #8
 80238e6:	230a      	movne	r3, #10
 80238e8:	2100      	movs	r1, #0
 80238ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80238ee:	6865      	ldr	r5, [r4, #4]
 80238f0:	2d00      	cmp	r5, #0
 80238f2:	60a5      	str	r5, [r4, #8]
 80238f4:	bfa2      	ittt	ge
 80238f6:	6821      	ldrge	r1, [r4, #0]
 80238f8:	f021 0104 	bicge.w	r1, r1, #4
 80238fc:	6021      	strge	r1, [r4, #0]
 80238fe:	b90e      	cbnz	r6, 8023904 <_printf_i+0x118>
 8023900:	2d00      	cmp	r5, #0
 8023902:	d04d      	beq.n	80239a0 <_printf_i+0x1b4>
 8023904:	4615      	mov	r5, r2
 8023906:	fbb6 f1f3 	udiv	r1, r6, r3
 802390a:	fb03 6711 	mls	r7, r3, r1, r6
 802390e:	5dc7      	ldrb	r7, [r0, r7]
 8023910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023914:	4637      	mov	r7, r6
 8023916:	460e      	mov	r6, r1
 8023918:	42bb      	cmp	r3, r7
 802391a:	d9f4      	bls.n	8023906 <_printf_i+0x11a>
 802391c:	2b08      	cmp	r3, #8
 802391e:	d10b      	bne.n	8023938 <_printf_i+0x14c>
 8023920:	6823      	ldr	r3, [r4, #0]
 8023922:	07de      	lsls	r6, r3, #31
 8023924:	d508      	bpl.n	8023938 <_printf_i+0x14c>
 8023926:	6923      	ldr	r3, [r4, #16]
 8023928:	6861      	ldr	r1, [r4, #4]
 802392a:	4299      	cmp	r1, r3
 802392c:	bfde      	ittt	le
 802392e:	2330      	movle	r3, #48	; 0x30
 8023930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023938:	1b52      	subs	r2, r2, r5
 802393a:	6122      	str	r2, [r4, #16]
 802393c:	464b      	mov	r3, r9
 802393e:	aa03      	add	r2, sp, #12
 8023940:	4621      	mov	r1, r4
 8023942:	4640      	mov	r0, r8
 8023944:	f8cd a000 	str.w	sl, [sp]
 8023948:	f7ff fee0 	bl	802370c <_printf_common>
 802394c:	3001      	adds	r0, #1
 802394e:	d14c      	bne.n	80239ea <_printf_i+0x1fe>
 8023950:	f04f 30ff 	mov.w	r0, #4294967295
 8023954:	b004      	add	sp, #16
 8023956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802395a:	4835      	ldr	r0, [pc, #212]	; (8023a30 <_printf_i+0x244>)
 802395c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023960:	6829      	ldr	r1, [r5, #0]
 8023962:	6823      	ldr	r3, [r4, #0]
 8023964:	f851 6b04 	ldr.w	r6, [r1], #4
 8023968:	6029      	str	r1, [r5, #0]
 802396a:	061d      	lsls	r5, r3, #24
 802396c:	d514      	bpl.n	8023998 <_printf_i+0x1ac>
 802396e:	07df      	lsls	r7, r3, #31
 8023970:	bf44      	itt	mi
 8023972:	f043 0320 	orrmi.w	r3, r3, #32
 8023976:	6023      	strmi	r3, [r4, #0]
 8023978:	b91e      	cbnz	r6, 8023982 <_printf_i+0x196>
 802397a:	6823      	ldr	r3, [r4, #0]
 802397c:	f023 0320 	bic.w	r3, r3, #32
 8023980:	6023      	str	r3, [r4, #0]
 8023982:	2310      	movs	r3, #16
 8023984:	e7b0      	b.n	80238e8 <_printf_i+0xfc>
 8023986:	6823      	ldr	r3, [r4, #0]
 8023988:	f043 0320 	orr.w	r3, r3, #32
 802398c:	6023      	str	r3, [r4, #0]
 802398e:	2378      	movs	r3, #120	; 0x78
 8023990:	4828      	ldr	r0, [pc, #160]	; (8023a34 <_printf_i+0x248>)
 8023992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023996:	e7e3      	b.n	8023960 <_printf_i+0x174>
 8023998:	0659      	lsls	r1, r3, #25
 802399a:	bf48      	it	mi
 802399c:	b2b6      	uxthmi	r6, r6
 802399e:	e7e6      	b.n	802396e <_printf_i+0x182>
 80239a0:	4615      	mov	r5, r2
 80239a2:	e7bb      	b.n	802391c <_printf_i+0x130>
 80239a4:	682b      	ldr	r3, [r5, #0]
 80239a6:	6826      	ldr	r6, [r4, #0]
 80239a8:	1d18      	adds	r0, r3, #4
 80239aa:	6961      	ldr	r1, [r4, #20]
 80239ac:	6028      	str	r0, [r5, #0]
 80239ae:	0635      	lsls	r5, r6, #24
 80239b0:	681b      	ldr	r3, [r3, #0]
 80239b2:	d501      	bpl.n	80239b8 <_printf_i+0x1cc>
 80239b4:	6019      	str	r1, [r3, #0]
 80239b6:	e002      	b.n	80239be <_printf_i+0x1d2>
 80239b8:	0670      	lsls	r0, r6, #25
 80239ba:	d5fb      	bpl.n	80239b4 <_printf_i+0x1c8>
 80239bc:	8019      	strh	r1, [r3, #0]
 80239be:	2300      	movs	r3, #0
 80239c0:	4615      	mov	r5, r2
 80239c2:	6123      	str	r3, [r4, #16]
 80239c4:	e7ba      	b.n	802393c <_printf_i+0x150>
 80239c6:	682b      	ldr	r3, [r5, #0]
 80239c8:	2100      	movs	r1, #0
 80239ca:	1d1a      	adds	r2, r3, #4
 80239cc:	602a      	str	r2, [r5, #0]
 80239ce:	681d      	ldr	r5, [r3, #0]
 80239d0:	6862      	ldr	r2, [r4, #4]
 80239d2:	4628      	mov	r0, r5
 80239d4:	f000 fbb0 	bl	8024138 <memchr>
 80239d8:	b108      	cbz	r0, 80239de <_printf_i+0x1f2>
 80239da:	1b40      	subs	r0, r0, r5
 80239dc:	6060      	str	r0, [r4, #4]
 80239de:	6863      	ldr	r3, [r4, #4]
 80239e0:	6123      	str	r3, [r4, #16]
 80239e2:	2300      	movs	r3, #0
 80239e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80239e8:	e7a8      	b.n	802393c <_printf_i+0x150>
 80239ea:	6923      	ldr	r3, [r4, #16]
 80239ec:	462a      	mov	r2, r5
 80239ee:	4649      	mov	r1, r9
 80239f0:	4640      	mov	r0, r8
 80239f2:	47d0      	blx	sl
 80239f4:	3001      	adds	r0, #1
 80239f6:	d0ab      	beq.n	8023950 <_printf_i+0x164>
 80239f8:	6823      	ldr	r3, [r4, #0]
 80239fa:	079b      	lsls	r3, r3, #30
 80239fc:	d413      	bmi.n	8023a26 <_printf_i+0x23a>
 80239fe:	68e0      	ldr	r0, [r4, #12]
 8023a00:	9b03      	ldr	r3, [sp, #12]
 8023a02:	4298      	cmp	r0, r3
 8023a04:	bfb8      	it	lt
 8023a06:	4618      	movlt	r0, r3
 8023a08:	e7a4      	b.n	8023954 <_printf_i+0x168>
 8023a0a:	2301      	movs	r3, #1
 8023a0c:	4632      	mov	r2, r6
 8023a0e:	4649      	mov	r1, r9
 8023a10:	4640      	mov	r0, r8
 8023a12:	47d0      	blx	sl
 8023a14:	3001      	adds	r0, #1
 8023a16:	d09b      	beq.n	8023950 <_printf_i+0x164>
 8023a18:	3501      	adds	r5, #1
 8023a1a:	68e3      	ldr	r3, [r4, #12]
 8023a1c:	9903      	ldr	r1, [sp, #12]
 8023a1e:	1a5b      	subs	r3, r3, r1
 8023a20:	42ab      	cmp	r3, r5
 8023a22:	dcf2      	bgt.n	8023a0a <_printf_i+0x21e>
 8023a24:	e7eb      	b.n	80239fe <_printf_i+0x212>
 8023a26:	2500      	movs	r5, #0
 8023a28:	f104 0619 	add.w	r6, r4, #25
 8023a2c:	e7f5      	b.n	8023a1a <_printf_i+0x22e>
 8023a2e:	bf00      	nop
 8023a30:	080262e1 	.word	0x080262e1
 8023a34:	080262f2 	.word	0x080262f2

08023a38 <cleanup_glue>:
 8023a38:	b538      	push	{r3, r4, r5, lr}
 8023a3a:	460c      	mov	r4, r1
 8023a3c:	6809      	ldr	r1, [r1, #0]
 8023a3e:	4605      	mov	r5, r0
 8023a40:	b109      	cbz	r1, 8023a46 <cleanup_glue+0xe>
 8023a42:	f7ff fff9 	bl	8023a38 <cleanup_glue>
 8023a46:	4621      	mov	r1, r4
 8023a48:	4628      	mov	r0, r5
 8023a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023a4e:	f7ff bc23 	b.w	8023298 <_free_r>
	...

08023a54 <_reclaim_reent>:
 8023a54:	4b2c      	ldr	r3, [pc, #176]	; (8023b08 <_reclaim_reent+0xb4>)
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	4283      	cmp	r3, r0
 8023a5a:	b570      	push	{r4, r5, r6, lr}
 8023a5c:	4604      	mov	r4, r0
 8023a5e:	d051      	beq.n	8023b04 <_reclaim_reent+0xb0>
 8023a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023a62:	b143      	cbz	r3, 8023a76 <_reclaim_reent+0x22>
 8023a64:	68db      	ldr	r3, [r3, #12]
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d14a      	bne.n	8023b00 <_reclaim_reent+0xac>
 8023a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023a6c:	6819      	ldr	r1, [r3, #0]
 8023a6e:	b111      	cbz	r1, 8023a76 <_reclaim_reent+0x22>
 8023a70:	4620      	mov	r0, r4
 8023a72:	f7ff fc11 	bl	8023298 <_free_r>
 8023a76:	6961      	ldr	r1, [r4, #20]
 8023a78:	b111      	cbz	r1, 8023a80 <_reclaim_reent+0x2c>
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	f7ff fc0c 	bl	8023298 <_free_r>
 8023a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023a82:	b111      	cbz	r1, 8023a8a <_reclaim_reent+0x36>
 8023a84:	4620      	mov	r0, r4
 8023a86:	f7ff fc07 	bl	8023298 <_free_r>
 8023a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023a8c:	b111      	cbz	r1, 8023a94 <_reclaim_reent+0x40>
 8023a8e:	4620      	mov	r0, r4
 8023a90:	f7ff fc02 	bl	8023298 <_free_r>
 8023a94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023a96:	b111      	cbz	r1, 8023a9e <_reclaim_reent+0x4a>
 8023a98:	4620      	mov	r0, r4
 8023a9a:	f7ff fbfd 	bl	8023298 <_free_r>
 8023a9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023aa0:	b111      	cbz	r1, 8023aa8 <_reclaim_reent+0x54>
 8023aa2:	4620      	mov	r0, r4
 8023aa4:	f7ff fbf8 	bl	8023298 <_free_r>
 8023aa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023aaa:	b111      	cbz	r1, 8023ab2 <_reclaim_reent+0x5e>
 8023aac:	4620      	mov	r0, r4
 8023aae:	f7ff fbf3 	bl	8023298 <_free_r>
 8023ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023ab4:	b111      	cbz	r1, 8023abc <_reclaim_reent+0x68>
 8023ab6:	4620      	mov	r0, r4
 8023ab8:	f7ff fbee 	bl	8023298 <_free_r>
 8023abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023abe:	b111      	cbz	r1, 8023ac6 <_reclaim_reent+0x72>
 8023ac0:	4620      	mov	r0, r4
 8023ac2:	f7ff fbe9 	bl	8023298 <_free_r>
 8023ac6:	69a3      	ldr	r3, [r4, #24]
 8023ac8:	b1e3      	cbz	r3, 8023b04 <_reclaim_reent+0xb0>
 8023aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023acc:	4620      	mov	r0, r4
 8023ace:	4798      	blx	r3
 8023ad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023ad2:	b1b9      	cbz	r1, 8023b04 <_reclaim_reent+0xb0>
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023ada:	f7ff bfad 	b.w	8023a38 <cleanup_glue>
 8023ade:	5949      	ldr	r1, [r1, r5]
 8023ae0:	b941      	cbnz	r1, 8023af4 <_reclaim_reent+0xa0>
 8023ae2:	3504      	adds	r5, #4
 8023ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023ae6:	2d80      	cmp	r5, #128	; 0x80
 8023ae8:	68d9      	ldr	r1, [r3, #12]
 8023aea:	d1f8      	bne.n	8023ade <_reclaim_reent+0x8a>
 8023aec:	4620      	mov	r0, r4
 8023aee:	f7ff fbd3 	bl	8023298 <_free_r>
 8023af2:	e7ba      	b.n	8023a6a <_reclaim_reent+0x16>
 8023af4:	680e      	ldr	r6, [r1, #0]
 8023af6:	4620      	mov	r0, r4
 8023af8:	f7ff fbce 	bl	8023298 <_free_r>
 8023afc:	4631      	mov	r1, r6
 8023afe:	e7ef      	b.n	8023ae0 <_reclaim_reent+0x8c>
 8023b00:	2500      	movs	r5, #0
 8023b02:	e7ef      	b.n	8023ae4 <_reclaim_reent+0x90>
 8023b04:	bd70      	pop	{r4, r5, r6, pc}
 8023b06:	bf00      	nop
 8023b08:	20000094 	.word	0x20000094

08023b0c <_sbrk_r>:
 8023b0c:	b538      	push	{r3, r4, r5, lr}
 8023b0e:	2300      	movs	r3, #0
 8023b10:	4d05      	ldr	r5, [pc, #20]	; (8023b28 <_sbrk_r+0x1c>)
 8023b12:	4604      	mov	r4, r0
 8023b14:	4608      	mov	r0, r1
 8023b16:	602b      	str	r3, [r5, #0]
 8023b18:	f7de f904 	bl	8001d24 <_sbrk>
 8023b1c:	1c43      	adds	r3, r0, #1
 8023b1e:	d102      	bne.n	8023b26 <_sbrk_r+0x1a>
 8023b20:	682b      	ldr	r3, [r5, #0]
 8023b22:	b103      	cbz	r3, 8023b26 <_sbrk_r+0x1a>
 8023b24:	6023      	str	r3, [r4, #0]
 8023b26:	bd38      	pop	{r3, r4, r5, pc}
 8023b28:	2002029c 	.word	0x2002029c

08023b2c <_raise_r>:
 8023b2c:	291f      	cmp	r1, #31
 8023b2e:	b538      	push	{r3, r4, r5, lr}
 8023b30:	4604      	mov	r4, r0
 8023b32:	460d      	mov	r5, r1
 8023b34:	d904      	bls.n	8023b40 <_raise_r+0x14>
 8023b36:	2316      	movs	r3, #22
 8023b38:	6003      	str	r3, [r0, #0]
 8023b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8023b3e:	bd38      	pop	{r3, r4, r5, pc}
 8023b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023b42:	b112      	cbz	r2, 8023b4a <_raise_r+0x1e>
 8023b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023b48:	b94b      	cbnz	r3, 8023b5e <_raise_r+0x32>
 8023b4a:	4620      	mov	r0, r4
 8023b4c:	f000 f830 	bl	8023bb0 <_getpid_r>
 8023b50:	462a      	mov	r2, r5
 8023b52:	4601      	mov	r1, r0
 8023b54:	4620      	mov	r0, r4
 8023b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023b5a:	f000 b817 	b.w	8023b8c <_kill_r>
 8023b5e:	2b01      	cmp	r3, #1
 8023b60:	d00a      	beq.n	8023b78 <_raise_r+0x4c>
 8023b62:	1c59      	adds	r1, r3, #1
 8023b64:	d103      	bne.n	8023b6e <_raise_r+0x42>
 8023b66:	2316      	movs	r3, #22
 8023b68:	6003      	str	r3, [r0, #0]
 8023b6a:	2001      	movs	r0, #1
 8023b6c:	e7e7      	b.n	8023b3e <_raise_r+0x12>
 8023b6e:	2400      	movs	r4, #0
 8023b70:	4628      	mov	r0, r5
 8023b72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023b76:	4798      	blx	r3
 8023b78:	2000      	movs	r0, #0
 8023b7a:	e7e0      	b.n	8023b3e <_raise_r+0x12>

08023b7c <raise>:
 8023b7c:	4b02      	ldr	r3, [pc, #8]	; (8023b88 <raise+0xc>)
 8023b7e:	4601      	mov	r1, r0
 8023b80:	6818      	ldr	r0, [r3, #0]
 8023b82:	f7ff bfd3 	b.w	8023b2c <_raise_r>
 8023b86:	bf00      	nop
 8023b88:	20000094 	.word	0x20000094

08023b8c <_kill_r>:
 8023b8c:	b538      	push	{r3, r4, r5, lr}
 8023b8e:	2300      	movs	r3, #0
 8023b90:	4d06      	ldr	r5, [pc, #24]	; (8023bac <_kill_r+0x20>)
 8023b92:	4604      	mov	r4, r0
 8023b94:	4608      	mov	r0, r1
 8023b96:	4611      	mov	r1, r2
 8023b98:	602b      	str	r3, [r5, #0]
 8023b9a:	f7de f83b 	bl	8001c14 <_kill>
 8023b9e:	1c43      	adds	r3, r0, #1
 8023ba0:	d102      	bne.n	8023ba8 <_kill_r+0x1c>
 8023ba2:	682b      	ldr	r3, [r5, #0]
 8023ba4:	b103      	cbz	r3, 8023ba8 <_kill_r+0x1c>
 8023ba6:	6023      	str	r3, [r4, #0]
 8023ba8:	bd38      	pop	{r3, r4, r5, pc}
 8023baa:	bf00      	nop
 8023bac:	2002029c 	.word	0x2002029c

08023bb0 <_getpid_r>:
 8023bb0:	f7de b828 	b.w	8001c04 <_getpid>

08023bb4 <__sread>:
 8023bb4:	b510      	push	{r4, lr}
 8023bb6:	460c      	mov	r4, r1
 8023bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023bbc:	f000 fad6 	bl	802416c <_read_r>
 8023bc0:	2800      	cmp	r0, #0
 8023bc2:	bfab      	itete	ge
 8023bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8023bc8:	181b      	addge	r3, r3, r0
 8023bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023bce:	bfac      	ite	ge
 8023bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8023bd2:	81a3      	strhlt	r3, [r4, #12]
 8023bd4:	bd10      	pop	{r4, pc}

08023bd6 <__swrite>:
 8023bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bda:	461f      	mov	r7, r3
 8023bdc:	898b      	ldrh	r3, [r1, #12]
 8023bde:	4605      	mov	r5, r0
 8023be0:	460c      	mov	r4, r1
 8023be2:	05db      	lsls	r3, r3, #23
 8023be4:	4616      	mov	r6, r2
 8023be6:	d505      	bpl.n	8023bf4 <__swrite+0x1e>
 8023be8:	2302      	movs	r3, #2
 8023bea:	2200      	movs	r2, #0
 8023bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023bf0:	f000 fa2a 	bl	8024048 <_lseek_r>
 8023bf4:	89a3      	ldrh	r3, [r4, #12]
 8023bf6:	4632      	mov	r2, r6
 8023bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023bfc:	4628      	mov	r0, r5
 8023bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023c02:	81a3      	strh	r3, [r4, #12]
 8023c04:	463b      	mov	r3, r7
 8023c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023c0a:	f000 b869 	b.w	8023ce0 <_write_r>

08023c0e <__sseek>:
 8023c0e:	b510      	push	{r4, lr}
 8023c10:	460c      	mov	r4, r1
 8023c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c16:	f000 fa17 	bl	8024048 <_lseek_r>
 8023c1a:	1c43      	adds	r3, r0, #1
 8023c1c:	89a3      	ldrh	r3, [r4, #12]
 8023c1e:	bf15      	itete	ne
 8023c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8023c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023c2a:	81a3      	strheq	r3, [r4, #12]
 8023c2c:	bf18      	it	ne
 8023c2e:	81a3      	strhne	r3, [r4, #12]
 8023c30:	bd10      	pop	{r4, pc}

08023c32 <__sclose>:
 8023c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c36:	f000 b937 	b.w	8023ea8 <_close_r>
	...

08023c3c <__swbuf_r>:
 8023c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c3e:	460e      	mov	r6, r1
 8023c40:	4614      	mov	r4, r2
 8023c42:	4605      	mov	r5, r0
 8023c44:	b118      	cbz	r0, 8023c4e <__swbuf_r+0x12>
 8023c46:	6983      	ldr	r3, [r0, #24]
 8023c48:	b90b      	cbnz	r3, 8023c4e <__swbuf_r+0x12>
 8023c4a:	f7ff fa27 	bl	802309c <__sinit>
 8023c4e:	4b21      	ldr	r3, [pc, #132]	; (8023cd4 <__swbuf_r+0x98>)
 8023c50:	429c      	cmp	r4, r3
 8023c52:	d12b      	bne.n	8023cac <__swbuf_r+0x70>
 8023c54:	686c      	ldr	r4, [r5, #4]
 8023c56:	69a3      	ldr	r3, [r4, #24]
 8023c58:	60a3      	str	r3, [r4, #8]
 8023c5a:	89a3      	ldrh	r3, [r4, #12]
 8023c5c:	071a      	lsls	r2, r3, #28
 8023c5e:	d52f      	bpl.n	8023cc0 <__swbuf_r+0x84>
 8023c60:	6923      	ldr	r3, [r4, #16]
 8023c62:	b36b      	cbz	r3, 8023cc0 <__swbuf_r+0x84>
 8023c64:	6923      	ldr	r3, [r4, #16]
 8023c66:	b2f6      	uxtb	r6, r6
 8023c68:	6820      	ldr	r0, [r4, #0]
 8023c6a:	4637      	mov	r7, r6
 8023c6c:	1ac0      	subs	r0, r0, r3
 8023c6e:	6963      	ldr	r3, [r4, #20]
 8023c70:	4283      	cmp	r3, r0
 8023c72:	dc04      	bgt.n	8023c7e <__swbuf_r+0x42>
 8023c74:	4621      	mov	r1, r4
 8023c76:	4628      	mov	r0, r5
 8023c78:	f000 f9aa 	bl	8023fd0 <_fflush_r>
 8023c7c:	bb30      	cbnz	r0, 8023ccc <__swbuf_r+0x90>
 8023c7e:	68a3      	ldr	r3, [r4, #8]
 8023c80:	3001      	adds	r0, #1
 8023c82:	3b01      	subs	r3, #1
 8023c84:	60a3      	str	r3, [r4, #8]
 8023c86:	6823      	ldr	r3, [r4, #0]
 8023c88:	1c5a      	adds	r2, r3, #1
 8023c8a:	6022      	str	r2, [r4, #0]
 8023c8c:	701e      	strb	r6, [r3, #0]
 8023c8e:	6963      	ldr	r3, [r4, #20]
 8023c90:	4283      	cmp	r3, r0
 8023c92:	d004      	beq.n	8023c9e <__swbuf_r+0x62>
 8023c94:	89a3      	ldrh	r3, [r4, #12]
 8023c96:	07db      	lsls	r3, r3, #31
 8023c98:	d506      	bpl.n	8023ca8 <__swbuf_r+0x6c>
 8023c9a:	2e0a      	cmp	r6, #10
 8023c9c:	d104      	bne.n	8023ca8 <__swbuf_r+0x6c>
 8023c9e:	4621      	mov	r1, r4
 8023ca0:	4628      	mov	r0, r5
 8023ca2:	f000 f995 	bl	8023fd0 <_fflush_r>
 8023ca6:	b988      	cbnz	r0, 8023ccc <__swbuf_r+0x90>
 8023ca8:	4638      	mov	r0, r7
 8023caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023cac:	4b0a      	ldr	r3, [pc, #40]	; (8023cd8 <__swbuf_r+0x9c>)
 8023cae:	429c      	cmp	r4, r3
 8023cb0:	d101      	bne.n	8023cb6 <__swbuf_r+0x7a>
 8023cb2:	68ac      	ldr	r4, [r5, #8]
 8023cb4:	e7cf      	b.n	8023c56 <__swbuf_r+0x1a>
 8023cb6:	4b09      	ldr	r3, [pc, #36]	; (8023cdc <__swbuf_r+0xa0>)
 8023cb8:	429c      	cmp	r4, r3
 8023cba:	bf08      	it	eq
 8023cbc:	68ec      	ldreq	r4, [r5, #12]
 8023cbe:	e7ca      	b.n	8023c56 <__swbuf_r+0x1a>
 8023cc0:	4621      	mov	r1, r4
 8023cc2:	4628      	mov	r0, r5
 8023cc4:	f000 f81e 	bl	8023d04 <__swsetup_r>
 8023cc8:	2800      	cmp	r0, #0
 8023cca:	d0cb      	beq.n	8023c64 <__swbuf_r+0x28>
 8023ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8023cd0:	e7ea      	b.n	8023ca8 <__swbuf_r+0x6c>
 8023cd2:	bf00      	nop
 8023cd4:	0802628c 	.word	0x0802628c
 8023cd8:	080262ac 	.word	0x080262ac
 8023cdc:	0802626c 	.word	0x0802626c

08023ce0 <_write_r>:
 8023ce0:	b538      	push	{r3, r4, r5, lr}
 8023ce2:	4604      	mov	r4, r0
 8023ce4:	4d06      	ldr	r5, [pc, #24]	; (8023d00 <_write_r+0x20>)
 8023ce6:	4608      	mov	r0, r1
 8023ce8:	4611      	mov	r1, r2
 8023cea:	2200      	movs	r2, #0
 8023cec:	602a      	str	r2, [r5, #0]
 8023cee:	461a      	mov	r2, r3
 8023cf0:	f7dd ffc7 	bl	8001c82 <_write>
 8023cf4:	1c43      	adds	r3, r0, #1
 8023cf6:	d102      	bne.n	8023cfe <_write_r+0x1e>
 8023cf8:	682b      	ldr	r3, [r5, #0]
 8023cfa:	b103      	cbz	r3, 8023cfe <_write_r+0x1e>
 8023cfc:	6023      	str	r3, [r4, #0]
 8023cfe:	bd38      	pop	{r3, r4, r5, pc}
 8023d00:	2002029c 	.word	0x2002029c

08023d04 <__swsetup_r>:
 8023d04:	4b32      	ldr	r3, [pc, #200]	; (8023dd0 <__swsetup_r+0xcc>)
 8023d06:	b570      	push	{r4, r5, r6, lr}
 8023d08:	681d      	ldr	r5, [r3, #0]
 8023d0a:	4606      	mov	r6, r0
 8023d0c:	460c      	mov	r4, r1
 8023d0e:	b125      	cbz	r5, 8023d1a <__swsetup_r+0x16>
 8023d10:	69ab      	ldr	r3, [r5, #24]
 8023d12:	b913      	cbnz	r3, 8023d1a <__swsetup_r+0x16>
 8023d14:	4628      	mov	r0, r5
 8023d16:	f7ff f9c1 	bl	802309c <__sinit>
 8023d1a:	4b2e      	ldr	r3, [pc, #184]	; (8023dd4 <__swsetup_r+0xd0>)
 8023d1c:	429c      	cmp	r4, r3
 8023d1e:	d10f      	bne.n	8023d40 <__swsetup_r+0x3c>
 8023d20:	686c      	ldr	r4, [r5, #4]
 8023d22:	89a3      	ldrh	r3, [r4, #12]
 8023d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023d28:	0719      	lsls	r1, r3, #28
 8023d2a:	d42c      	bmi.n	8023d86 <__swsetup_r+0x82>
 8023d2c:	06dd      	lsls	r5, r3, #27
 8023d2e:	d411      	bmi.n	8023d54 <__swsetup_r+0x50>
 8023d30:	2309      	movs	r3, #9
 8023d32:	6033      	str	r3, [r6, #0]
 8023d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023d38:	f04f 30ff 	mov.w	r0, #4294967295
 8023d3c:	81a3      	strh	r3, [r4, #12]
 8023d3e:	e03e      	b.n	8023dbe <__swsetup_r+0xba>
 8023d40:	4b25      	ldr	r3, [pc, #148]	; (8023dd8 <__swsetup_r+0xd4>)
 8023d42:	429c      	cmp	r4, r3
 8023d44:	d101      	bne.n	8023d4a <__swsetup_r+0x46>
 8023d46:	68ac      	ldr	r4, [r5, #8]
 8023d48:	e7eb      	b.n	8023d22 <__swsetup_r+0x1e>
 8023d4a:	4b24      	ldr	r3, [pc, #144]	; (8023ddc <__swsetup_r+0xd8>)
 8023d4c:	429c      	cmp	r4, r3
 8023d4e:	bf08      	it	eq
 8023d50:	68ec      	ldreq	r4, [r5, #12]
 8023d52:	e7e6      	b.n	8023d22 <__swsetup_r+0x1e>
 8023d54:	0758      	lsls	r0, r3, #29
 8023d56:	d512      	bpl.n	8023d7e <__swsetup_r+0x7a>
 8023d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023d5a:	b141      	cbz	r1, 8023d6e <__swsetup_r+0x6a>
 8023d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d60:	4299      	cmp	r1, r3
 8023d62:	d002      	beq.n	8023d6a <__swsetup_r+0x66>
 8023d64:	4630      	mov	r0, r6
 8023d66:	f7ff fa97 	bl	8023298 <_free_r>
 8023d6a:	2300      	movs	r3, #0
 8023d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8023d6e:	89a3      	ldrh	r3, [r4, #12]
 8023d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023d74:	81a3      	strh	r3, [r4, #12]
 8023d76:	2300      	movs	r3, #0
 8023d78:	6063      	str	r3, [r4, #4]
 8023d7a:	6923      	ldr	r3, [r4, #16]
 8023d7c:	6023      	str	r3, [r4, #0]
 8023d7e:	89a3      	ldrh	r3, [r4, #12]
 8023d80:	f043 0308 	orr.w	r3, r3, #8
 8023d84:	81a3      	strh	r3, [r4, #12]
 8023d86:	6923      	ldr	r3, [r4, #16]
 8023d88:	b94b      	cbnz	r3, 8023d9e <__swsetup_r+0x9a>
 8023d8a:	89a3      	ldrh	r3, [r4, #12]
 8023d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023d94:	d003      	beq.n	8023d9e <__swsetup_r+0x9a>
 8023d96:	4621      	mov	r1, r4
 8023d98:	4630      	mov	r0, r6
 8023d9a:	f000 f98d 	bl	80240b8 <__smakebuf_r>
 8023d9e:	89a0      	ldrh	r0, [r4, #12]
 8023da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023da4:	f010 0301 	ands.w	r3, r0, #1
 8023da8:	d00a      	beq.n	8023dc0 <__swsetup_r+0xbc>
 8023daa:	2300      	movs	r3, #0
 8023dac:	60a3      	str	r3, [r4, #8]
 8023dae:	6963      	ldr	r3, [r4, #20]
 8023db0:	425b      	negs	r3, r3
 8023db2:	61a3      	str	r3, [r4, #24]
 8023db4:	6923      	ldr	r3, [r4, #16]
 8023db6:	b943      	cbnz	r3, 8023dca <__swsetup_r+0xc6>
 8023db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023dbc:	d1ba      	bne.n	8023d34 <__swsetup_r+0x30>
 8023dbe:	bd70      	pop	{r4, r5, r6, pc}
 8023dc0:	0781      	lsls	r1, r0, #30
 8023dc2:	bf58      	it	pl
 8023dc4:	6963      	ldrpl	r3, [r4, #20]
 8023dc6:	60a3      	str	r3, [r4, #8]
 8023dc8:	e7f4      	b.n	8023db4 <__swsetup_r+0xb0>
 8023dca:	2000      	movs	r0, #0
 8023dcc:	e7f7      	b.n	8023dbe <__swsetup_r+0xba>
 8023dce:	bf00      	nop
 8023dd0:	20000094 	.word	0x20000094
 8023dd4:	0802628c 	.word	0x0802628c
 8023dd8:	080262ac 	.word	0x080262ac
 8023ddc:	0802626c 	.word	0x0802626c

08023de0 <__register_exitproc>:
 8023de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023de4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8023ea4 <__register_exitproc+0xc4>
 8023de8:	4606      	mov	r6, r0
 8023dea:	461f      	mov	r7, r3
 8023dec:	460d      	mov	r5, r1
 8023dee:	f8d8 0000 	ldr.w	r0, [r8]
 8023df2:	4691      	mov	r9, r2
 8023df4:	f7ff fa27 	bl	8023246 <__retarget_lock_acquire_recursive>
 8023df8:	4b26      	ldr	r3, [pc, #152]	; (8023e94 <__register_exitproc+0xb4>)
 8023dfa:	681c      	ldr	r4, [r3, #0]
 8023dfc:	b934      	cbnz	r4, 8023e0c <__register_exitproc+0x2c>
 8023dfe:	4c26      	ldr	r4, [pc, #152]	; (8023e98 <__register_exitproc+0xb8>)
 8023e00:	601c      	str	r4, [r3, #0]
 8023e02:	4b26      	ldr	r3, [pc, #152]	; (8023e9c <__register_exitproc+0xbc>)
 8023e04:	b113      	cbz	r3, 8023e0c <__register_exitproc+0x2c>
 8023e06:	681b      	ldr	r3, [r3, #0]
 8023e08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023e0c:	6863      	ldr	r3, [r4, #4]
 8023e0e:	2b1f      	cmp	r3, #31
 8023e10:	dd07      	ble.n	8023e22 <__register_exitproc+0x42>
 8023e12:	f8d8 0000 	ldr.w	r0, [r8]
 8023e16:	f7ff fa18 	bl	802324a <__retarget_lock_release_recursive>
 8023e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8023e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e22:	b35e      	cbz	r6, 8023e7c <__register_exitproc+0x9c>
 8023e24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023e28:	b988      	cbnz	r0, 8023e4e <__register_exitproc+0x6e>
 8023e2a:	4b1d      	ldr	r3, [pc, #116]	; (8023ea0 <__register_exitproc+0xc0>)
 8023e2c:	b923      	cbnz	r3, 8023e38 <__register_exitproc+0x58>
 8023e2e:	f8d8 0000 	ldr.w	r0, [r8]
 8023e32:	f7ff fa09 	bl	8023248 <__retarget_lock_release>
 8023e36:	e7f0      	b.n	8023e1a <__register_exitproc+0x3a>
 8023e38:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023e3c:	f7ff fa06 	bl	802324c <malloc>
 8023e40:	2800      	cmp	r0, #0
 8023e42:	d0f4      	beq.n	8023e2e <__register_exitproc+0x4e>
 8023e44:	2300      	movs	r3, #0
 8023e46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8023e4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023e4e:	6863      	ldr	r3, [r4, #4]
 8023e50:	2201      	movs	r2, #1
 8023e52:	2e02      	cmp	r6, #2
 8023e54:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023e58:	fa02 f203 	lsl.w	r2, r2, r3
 8023e5c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023e60:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023e64:	ea43 0302 	orr.w	r3, r3, r2
 8023e68:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023e6c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023e70:	bf02      	ittt	eq
 8023e72:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023e76:	4313      	orreq	r3, r2
 8023e78:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023e7c:	6863      	ldr	r3, [r4, #4]
 8023e7e:	f8d8 0000 	ldr.w	r0, [r8]
 8023e82:	1c5a      	adds	r2, r3, #1
 8023e84:	3302      	adds	r3, #2
 8023e86:	6062      	str	r2, [r4, #4]
 8023e88:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023e8c:	f7ff f9dd 	bl	802324a <__retarget_lock_release_recursive>
 8023e90:	2000      	movs	r0, #0
 8023e92:	e7c4      	b.n	8023e1e <__register_exitproc+0x3e>
 8023e94:	2002032c 	.word	0x2002032c
 8023e98:	200202a0 	.word	0x200202a0
 8023e9c:	08026304 	.word	0x08026304
 8023ea0:	0802324d 	.word	0x0802324d
 8023ea4:	200000f8 	.word	0x200000f8

08023ea8 <_close_r>:
 8023ea8:	b538      	push	{r3, r4, r5, lr}
 8023eaa:	2300      	movs	r3, #0
 8023eac:	4d05      	ldr	r5, [pc, #20]	; (8023ec4 <_close_r+0x1c>)
 8023eae:	4604      	mov	r4, r0
 8023eb0:	4608      	mov	r0, r1
 8023eb2:	602b      	str	r3, [r5, #0]
 8023eb4:	f7dd ff01 	bl	8001cba <_close>
 8023eb8:	1c43      	adds	r3, r0, #1
 8023eba:	d102      	bne.n	8023ec2 <_close_r+0x1a>
 8023ebc:	682b      	ldr	r3, [r5, #0]
 8023ebe:	b103      	cbz	r3, 8023ec2 <_close_r+0x1a>
 8023ec0:	6023      	str	r3, [r4, #0]
 8023ec2:	bd38      	pop	{r3, r4, r5, pc}
 8023ec4:	2002029c 	.word	0x2002029c

08023ec8 <__sflush_r>:
 8023ec8:	898a      	ldrh	r2, [r1, #12]
 8023eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ece:	4605      	mov	r5, r0
 8023ed0:	0710      	lsls	r0, r2, #28
 8023ed2:	460c      	mov	r4, r1
 8023ed4:	d458      	bmi.n	8023f88 <__sflush_r+0xc0>
 8023ed6:	684b      	ldr	r3, [r1, #4]
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	dc05      	bgt.n	8023ee8 <__sflush_r+0x20>
 8023edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	dc02      	bgt.n	8023ee8 <__sflush_r+0x20>
 8023ee2:	2000      	movs	r0, #0
 8023ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023eea:	2e00      	cmp	r6, #0
 8023eec:	d0f9      	beq.n	8023ee2 <__sflush_r+0x1a>
 8023eee:	2300      	movs	r3, #0
 8023ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023ef4:	682f      	ldr	r7, [r5, #0]
 8023ef6:	602b      	str	r3, [r5, #0]
 8023ef8:	d032      	beq.n	8023f60 <__sflush_r+0x98>
 8023efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023efc:	89a3      	ldrh	r3, [r4, #12]
 8023efe:	075a      	lsls	r2, r3, #29
 8023f00:	d505      	bpl.n	8023f0e <__sflush_r+0x46>
 8023f02:	6863      	ldr	r3, [r4, #4]
 8023f04:	1ac0      	subs	r0, r0, r3
 8023f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023f08:	b10b      	cbz	r3, 8023f0e <__sflush_r+0x46>
 8023f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023f0c:	1ac0      	subs	r0, r0, r3
 8023f0e:	2300      	movs	r3, #0
 8023f10:	4602      	mov	r2, r0
 8023f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023f14:	4628      	mov	r0, r5
 8023f16:	6a21      	ldr	r1, [r4, #32]
 8023f18:	47b0      	blx	r6
 8023f1a:	1c43      	adds	r3, r0, #1
 8023f1c:	89a3      	ldrh	r3, [r4, #12]
 8023f1e:	d106      	bne.n	8023f2e <__sflush_r+0x66>
 8023f20:	6829      	ldr	r1, [r5, #0]
 8023f22:	291d      	cmp	r1, #29
 8023f24:	d82c      	bhi.n	8023f80 <__sflush_r+0xb8>
 8023f26:	4a29      	ldr	r2, [pc, #164]	; (8023fcc <__sflush_r+0x104>)
 8023f28:	40ca      	lsrs	r2, r1
 8023f2a:	07d6      	lsls	r6, r2, #31
 8023f2c:	d528      	bpl.n	8023f80 <__sflush_r+0xb8>
 8023f2e:	2200      	movs	r2, #0
 8023f30:	04d9      	lsls	r1, r3, #19
 8023f32:	6062      	str	r2, [r4, #4]
 8023f34:	6922      	ldr	r2, [r4, #16]
 8023f36:	6022      	str	r2, [r4, #0]
 8023f38:	d504      	bpl.n	8023f44 <__sflush_r+0x7c>
 8023f3a:	1c42      	adds	r2, r0, #1
 8023f3c:	d101      	bne.n	8023f42 <__sflush_r+0x7a>
 8023f3e:	682b      	ldr	r3, [r5, #0]
 8023f40:	b903      	cbnz	r3, 8023f44 <__sflush_r+0x7c>
 8023f42:	6560      	str	r0, [r4, #84]	; 0x54
 8023f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023f46:	602f      	str	r7, [r5, #0]
 8023f48:	2900      	cmp	r1, #0
 8023f4a:	d0ca      	beq.n	8023ee2 <__sflush_r+0x1a>
 8023f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f50:	4299      	cmp	r1, r3
 8023f52:	d002      	beq.n	8023f5a <__sflush_r+0x92>
 8023f54:	4628      	mov	r0, r5
 8023f56:	f7ff f99f 	bl	8023298 <_free_r>
 8023f5a:	2000      	movs	r0, #0
 8023f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8023f5e:	e7c1      	b.n	8023ee4 <__sflush_r+0x1c>
 8023f60:	6a21      	ldr	r1, [r4, #32]
 8023f62:	2301      	movs	r3, #1
 8023f64:	4628      	mov	r0, r5
 8023f66:	47b0      	blx	r6
 8023f68:	1c41      	adds	r1, r0, #1
 8023f6a:	d1c7      	bne.n	8023efc <__sflush_r+0x34>
 8023f6c:	682b      	ldr	r3, [r5, #0]
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d0c4      	beq.n	8023efc <__sflush_r+0x34>
 8023f72:	2b1d      	cmp	r3, #29
 8023f74:	d001      	beq.n	8023f7a <__sflush_r+0xb2>
 8023f76:	2b16      	cmp	r3, #22
 8023f78:	d101      	bne.n	8023f7e <__sflush_r+0xb6>
 8023f7a:	602f      	str	r7, [r5, #0]
 8023f7c:	e7b1      	b.n	8023ee2 <__sflush_r+0x1a>
 8023f7e:	89a3      	ldrh	r3, [r4, #12]
 8023f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f84:	81a3      	strh	r3, [r4, #12]
 8023f86:	e7ad      	b.n	8023ee4 <__sflush_r+0x1c>
 8023f88:	690f      	ldr	r7, [r1, #16]
 8023f8a:	2f00      	cmp	r7, #0
 8023f8c:	d0a9      	beq.n	8023ee2 <__sflush_r+0x1a>
 8023f8e:	0793      	lsls	r3, r2, #30
 8023f90:	680e      	ldr	r6, [r1, #0]
 8023f92:	600f      	str	r7, [r1, #0]
 8023f94:	bf0c      	ite	eq
 8023f96:	694b      	ldreq	r3, [r1, #20]
 8023f98:	2300      	movne	r3, #0
 8023f9a:	eba6 0807 	sub.w	r8, r6, r7
 8023f9e:	608b      	str	r3, [r1, #8]
 8023fa0:	f1b8 0f00 	cmp.w	r8, #0
 8023fa4:	dd9d      	ble.n	8023ee2 <__sflush_r+0x1a>
 8023fa6:	4643      	mov	r3, r8
 8023fa8:	463a      	mov	r2, r7
 8023faa:	6a21      	ldr	r1, [r4, #32]
 8023fac:	4628      	mov	r0, r5
 8023fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023fb0:	47b0      	blx	r6
 8023fb2:	2800      	cmp	r0, #0
 8023fb4:	dc06      	bgt.n	8023fc4 <__sflush_r+0xfc>
 8023fb6:	89a3      	ldrh	r3, [r4, #12]
 8023fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8023fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023fc0:	81a3      	strh	r3, [r4, #12]
 8023fc2:	e78f      	b.n	8023ee4 <__sflush_r+0x1c>
 8023fc4:	4407      	add	r7, r0
 8023fc6:	eba8 0800 	sub.w	r8, r8, r0
 8023fca:	e7e9      	b.n	8023fa0 <__sflush_r+0xd8>
 8023fcc:	20400001 	.word	0x20400001

08023fd0 <_fflush_r>:
 8023fd0:	b538      	push	{r3, r4, r5, lr}
 8023fd2:	690b      	ldr	r3, [r1, #16]
 8023fd4:	4605      	mov	r5, r0
 8023fd6:	460c      	mov	r4, r1
 8023fd8:	b913      	cbnz	r3, 8023fe0 <_fflush_r+0x10>
 8023fda:	2500      	movs	r5, #0
 8023fdc:	4628      	mov	r0, r5
 8023fde:	bd38      	pop	{r3, r4, r5, pc}
 8023fe0:	b118      	cbz	r0, 8023fea <_fflush_r+0x1a>
 8023fe2:	6983      	ldr	r3, [r0, #24]
 8023fe4:	b90b      	cbnz	r3, 8023fea <_fflush_r+0x1a>
 8023fe6:	f7ff f859 	bl	802309c <__sinit>
 8023fea:	4b14      	ldr	r3, [pc, #80]	; (802403c <_fflush_r+0x6c>)
 8023fec:	429c      	cmp	r4, r3
 8023fee:	d11b      	bne.n	8024028 <_fflush_r+0x58>
 8023ff0:	686c      	ldr	r4, [r5, #4]
 8023ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	d0ef      	beq.n	8023fda <_fflush_r+0xa>
 8023ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023ffc:	07d0      	lsls	r0, r2, #31
 8023ffe:	d404      	bmi.n	802400a <_fflush_r+0x3a>
 8024000:	0599      	lsls	r1, r3, #22
 8024002:	d402      	bmi.n	802400a <_fflush_r+0x3a>
 8024004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024006:	f7ff f91e 	bl	8023246 <__retarget_lock_acquire_recursive>
 802400a:	4628      	mov	r0, r5
 802400c:	4621      	mov	r1, r4
 802400e:	f7ff ff5b 	bl	8023ec8 <__sflush_r>
 8024012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024014:	4605      	mov	r5, r0
 8024016:	07da      	lsls	r2, r3, #31
 8024018:	d4e0      	bmi.n	8023fdc <_fflush_r+0xc>
 802401a:	89a3      	ldrh	r3, [r4, #12]
 802401c:	059b      	lsls	r3, r3, #22
 802401e:	d4dd      	bmi.n	8023fdc <_fflush_r+0xc>
 8024020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024022:	f7ff f912 	bl	802324a <__retarget_lock_release_recursive>
 8024026:	e7d9      	b.n	8023fdc <_fflush_r+0xc>
 8024028:	4b05      	ldr	r3, [pc, #20]	; (8024040 <_fflush_r+0x70>)
 802402a:	429c      	cmp	r4, r3
 802402c:	d101      	bne.n	8024032 <_fflush_r+0x62>
 802402e:	68ac      	ldr	r4, [r5, #8]
 8024030:	e7df      	b.n	8023ff2 <_fflush_r+0x22>
 8024032:	4b04      	ldr	r3, [pc, #16]	; (8024044 <_fflush_r+0x74>)
 8024034:	429c      	cmp	r4, r3
 8024036:	bf08      	it	eq
 8024038:	68ec      	ldreq	r4, [r5, #12]
 802403a:	e7da      	b.n	8023ff2 <_fflush_r+0x22>
 802403c:	0802628c 	.word	0x0802628c
 8024040:	080262ac 	.word	0x080262ac
 8024044:	0802626c 	.word	0x0802626c

08024048 <_lseek_r>:
 8024048:	b538      	push	{r3, r4, r5, lr}
 802404a:	4604      	mov	r4, r0
 802404c:	4d06      	ldr	r5, [pc, #24]	; (8024068 <_lseek_r+0x20>)
 802404e:	4608      	mov	r0, r1
 8024050:	4611      	mov	r1, r2
 8024052:	2200      	movs	r2, #0
 8024054:	602a      	str	r2, [r5, #0]
 8024056:	461a      	mov	r2, r3
 8024058:	f7dd fe56 	bl	8001d08 <_lseek>
 802405c:	1c43      	adds	r3, r0, #1
 802405e:	d102      	bne.n	8024066 <_lseek_r+0x1e>
 8024060:	682b      	ldr	r3, [r5, #0]
 8024062:	b103      	cbz	r3, 8024066 <_lseek_r+0x1e>
 8024064:	6023      	str	r3, [r4, #0]
 8024066:	bd38      	pop	{r3, r4, r5, pc}
 8024068:	2002029c 	.word	0x2002029c

0802406c <__swhatbuf_r>:
 802406c:	b570      	push	{r4, r5, r6, lr}
 802406e:	460e      	mov	r6, r1
 8024070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024074:	b096      	sub	sp, #88	; 0x58
 8024076:	4614      	mov	r4, r2
 8024078:	2900      	cmp	r1, #0
 802407a:	461d      	mov	r5, r3
 802407c:	da08      	bge.n	8024090 <__swhatbuf_r+0x24>
 802407e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024082:	2200      	movs	r2, #0
 8024084:	602a      	str	r2, [r5, #0]
 8024086:	061a      	lsls	r2, r3, #24
 8024088:	d410      	bmi.n	80240ac <__swhatbuf_r+0x40>
 802408a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802408e:	e00e      	b.n	80240ae <__swhatbuf_r+0x42>
 8024090:	466a      	mov	r2, sp
 8024092:	f000 f87d 	bl	8024190 <_fstat_r>
 8024096:	2800      	cmp	r0, #0
 8024098:	dbf1      	blt.n	802407e <__swhatbuf_r+0x12>
 802409a:	9a01      	ldr	r2, [sp, #4]
 802409c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80240a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80240a4:	425a      	negs	r2, r3
 80240a6:	415a      	adcs	r2, r3
 80240a8:	602a      	str	r2, [r5, #0]
 80240aa:	e7ee      	b.n	802408a <__swhatbuf_r+0x1e>
 80240ac:	2340      	movs	r3, #64	; 0x40
 80240ae:	2000      	movs	r0, #0
 80240b0:	6023      	str	r3, [r4, #0]
 80240b2:	b016      	add	sp, #88	; 0x58
 80240b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080240b8 <__smakebuf_r>:
 80240b8:	898b      	ldrh	r3, [r1, #12]
 80240ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80240bc:	079d      	lsls	r5, r3, #30
 80240be:	4606      	mov	r6, r0
 80240c0:	460c      	mov	r4, r1
 80240c2:	d507      	bpl.n	80240d4 <__smakebuf_r+0x1c>
 80240c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80240c8:	6023      	str	r3, [r4, #0]
 80240ca:	6123      	str	r3, [r4, #16]
 80240cc:	2301      	movs	r3, #1
 80240ce:	6163      	str	r3, [r4, #20]
 80240d0:	b002      	add	sp, #8
 80240d2:	bd70      	pop	{r4, r5, r6, pc}
 80240d4:	ab01      	add	r3, sp, #4
 80240d6:	466a      	mov	r2, sp
 80240d8:	f7ff ffc8 	bl	802406c <__swhatbuf_r>
 80240dc:	9900      	ldr	r1, [sp, #0]
 80240de:	4605      	mov	r5, r0
 80240e0:	4630      	mov	r0, r6
 80240e2:	f7ff f945 	bl	8023370 <_malloc_r>
 80240e6:	b948      	cbnz	r0, 80240fc <__smakebuf_r+0x44>
 80240e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80240ec:	059a      	lsls	r2, r3, #22
 80240ee:	d4ef      	bmi.n	80240d0 <__smakebuf_r+0x18>
 80240f0:	f023 0303 	bic.w	r3, r3, #3
 80240f4:	f043 0302 	orr.w	r3, r3, #2
 80240f8:	81a3      	strh	r3, [r4, #12]
 80240fa:	e7e3      	b.n	80240c4 <__smakebuf_r+0xc>
 80240fc:	4b0d      	ldr	r3, [pc, #52]	; (8024134 <__smakebuf_r+0x7c>)
 80240fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8024100:	89a3      	ldrh	r3, [r4, #12]
 8024102:	6020      	str	r0, [r4, #0]
 8024104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024108:	6120      	str	r0, [r4, #16]
 802410a:	81a3      	strh	r3, [r4, #12]
 802410c:	9b00      	ldr	r3, [sp, #0]
 802410e:	6163      	str	r3, [r4, #20]
 8024110:	9b01      	ldr	r3, [sp, #4]
 8024112:	b15b      	cbz	r3, 802412c <__smakebuf_r+0x74>
 8024114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024118:	4630      	mov	r0, r6
 802411a:	f000 f84b 	bl	80241b4 <_isatty_r>
 802411e:	b128      	cbz	r0, 802412c <__smakebuf_r+0x74>
 8024120:	89a3      	ldrh	r3, [r4, #12]
 8024122:	f023 0303 	bic.w	r3, r3, #3
 8024126:	f043 0301 	orr.w	r3, r3, #1
 802412a:	81a3      	strh	r3, [r4, #12]
 802412c:	89a0      	ldrh	r0, [r4, #12]
 802412e:	4305      	orrs	r5, r0
 8024130:	81a5      	strh	r5, [r4, #12]
 8024132:	e7cd      	b.n	80240d0 <__smakebuf_r+0x18>
 8024134:	08023035 	.word	0x08023035

08024138 <memchr>:
 8024138:	b2c9      	uxtb	r1, r1
 802413a:	4402      	add	r2, r0
 802413c:	b510      	push	{r4, lr}
 802413e:	4290      	cmp	r0, r2
 8024140:	4603      	mov	r3, r0
 8024142:	d101      	bne.n	8024148 <memchr+0x10>
 8024144:	2300      	movs	r3, #0
 8024146:	e003      	b.n	8024150 <memchr+0x18>
 8024148:	781c      	ldrb	r4, [r3, #0]
 802414a:	3001      	adds	r0, #1
 802414c:	428c      	cmp	r4, r1
 802414e:	d1f6      	bne.n	802413e <memchr+0x6>
 8024150:	4618      	mov	r0, r3
 8024152:	bd10      	pop	{r4, pc}

08024154 <__malloc_lock>:
 8024154:	4801      	ldr	r0, [pc, #4]	; (802415c <__malloc_lock+0x8>)
 8024156:	f7ff b876 	b.w	8023246 <__retarget_lock_acquire_recursive>
 802415a:	bf00      	nop
 802415c:	20020189 	.word	0x20020189

08024160 <__malloc_unlock>:
 8024160:	4801      	ldr	r0, [pc, #4]	; (8024168 <__malloc_unlock+0x8>)
 8024162:	f7ff b872 	b.w	802324a <__retarget_lock_release_recursive>
 8024166:	bf00      	nop
 8024168:	20020189 	.word	0x20020189

0802416c <_read_r>:
 802416c:	b538      	push	{r3, r4, r5, lr}
 802416e:	4604      	mov	r4, r0
 8024170:	4d06      	ldr	r5, [pc, #24]	; (802418c <_read_r+0x20>)
 8024172:	4608      	mov	r0, r1
 8024174:	4611      	mov	r1, r2
 8024176:	2200      	movs	r2, #0
 8024178:	602a      	str	r2, [r5, #0]
 802417a:	461a      	mov	r2, r3
 802417c:	f7dd fd64 	bl	8001c48 <_read>
 8024180:	1c43      	adds	r3, r0, #1
 8024182:	d102      	bne.n	802418a <_read_r+0x1e>
 8024184:	682b      	ldr	r3, [r5, #0]
 8024186:	b103      	cbz	r3, 802418a <_read_r+0x1e>
 8024188:	6023      	str	r3, [r4, #0]
 802418a:	bd38      	pop	{r3, r4, r5, pc}
 802418c:	2002029c 	.word	0x2002029c

08024190 <_fstat_r>:
 8024190:	b538      	push	{r3, r4, r5, lr}
 8024192:	2300      	movs	r3, #0
 8024194:	4d06      	ldr	r5, [pc, #24]	; (80241b0 <_fstat_r+0x20>)
 8024196:	4604      	mov	r4, r0
 8024198:	4608      	mov	r0, r1
 802419a:	4611      	mov	r1, r2
 802419c:	602b      	str	r3, [r5, #0]
 802419e:	f7dd fd98 	bl	8001cd2 <_fstat>
 80241a2:	1c43      	adds	r3, r0, #1
 80241a4:	d102      	bne.n	80241ac <_fstat_r+0x1c>
 80241a6:	682b      	ldr	r3, [r5, #0]
 80241a8:	b103      	cbz	r3, 80241ac <_fstat_r+0x1c>
 80241aa:	6023      	str	r3, [r4, #0]
 80241ac:	bd38      	pop	{r3, r4, r5, pc}
 80241ae:	bf00      	nop
 80241b0:	2002029c 	.word	0x2002029c

080241b4 <_isatty_r>:
 80241b4:	b538      	push	{r3, r4, r5, lr}
 80241b6:	2300      	movs	r3, #0
 80241b8:	4d05      	ldr	r5, [pc, #20]	; (80241d0 <_isatty_r+0x1c>)
 80241ba:	4604      	mov	r4, r0
 80241bc:	4608      	mov	r0, r1
 80241be:	602b      	str	r3, [r5, #0]
 80241c0:	f7dd fd97 	bl	8001cf2 <_isatty>
 80241c4:	1c43      	adds	r3, r0, #1
 80241c6:	d102      	bne.n	80241ce <_isatty_r+0x1a>
 80241c8:	682b      	ldr	r3, [r5, #0]
 80241ca:	b103      	cbz	r3, 80241ce <_isatty_r+0x1a>
 80241cc:	6023      	str	r3, [r4, #0]
 80241ce:	bd38      	pop	{r3, r4, r5, pc}
 80241d0:	2002029c 	.word	0x2002029c

080241d4 <_init>:
 80241d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241d6:	bf00      	nop
 80241d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241da:	bc08      	pop	{r3}
 80241dc:	469e      	mov	lr, r3
 80241de:	4770      	bx	lr

080241e0 <_fini>:
 80241e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241e2:	bf00      	nop
 80241e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241e6:	bc08      	pop	{r3}
 80241e8:	469e      	mov	lr, r3
 80241ea:	4770      	bx	lr
